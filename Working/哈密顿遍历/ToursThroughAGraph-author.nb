(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    318312,       6986]
NotebookOptionsPosition[    313309,       6836]
NotebookOutlinePosition[    314950,       6887]
CellTagsIndexPosition[    314614,       6875]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Tours through a Graph", "DemoTitle",
 CellChangeTimes->{{3.5468023810803623`*^9, 3.546802385118601*^9}, {
  3.5491289130603113`*^9, 3.549128914610725*^9}}],

Cell["", "InitializationSection"],

Cell[CellGroupData[{

Cell["", "ManipulateSection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "pull", ",", "is", ",", "thicks", ",", "jj", ",", "G", ",", "tour", ",",
        "mat", ",", "locs"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"SeedRandom", "[", "1", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"pull", "=", "0.1"}], ";", "\[IndentingNewLine]", 
      RowBox[{"is", "=", "330"}], ";", "\[IndentingNewLine]", 
      RowBox[{"thicks", "=", 
       RowBox[{"{", 
        RowBox[{".014", ",", ".014", ",", ".012", ",", ".01"}], "}"}]}], ";", 
      RowBox[{"jj", "=", 
       RowBox[{"graphtype", "/.", "\[VeryThinSpace]", 
        RowBox[{"Thread", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<small\>\"", ",", "\"\<graph based on grid\>\"", ",", 
            "\"\<small planar graph\>\"", ",", "\"\<large planar graph\>\""}],
            "}"}], "\[Rule]", 
          RowBox[{"Range", "[", "4", "]"}]}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"G", "=", 
       RowBox[{
       "graphs", "\[LeftDoubleBracket]", "jj", "\[RightDoubleBracket]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"locs", "=", 
       RowBox[{
       "locData", "\[LeftDoubleBracket]", "jj", "\[RightDoubleBracket]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"tour", "=", 
       RowBox[{"tourdata", "\[LeftDoubleBracket]", 
        RowBox[{"jj", ",", "problemtype"}], "\[RightDoubleBracket]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"problemtype", "\[Equal]", "4"}], ",", 
        RowBox[{"mat", "=", 
         RowBox[{
         "cppmatdata", "\[LeftDoubleBracket]", "jj", 
          "\[RightDoubleBracket]"}]}]}], "]"}], ";", 
      RowBox[{"Pane", "[", 
       RowBox[{
        RowBox[{"Which", "[", 
         RowBox[{
          RowBox[{"problemtype", "\[Equal]", "1"}], ",", 
          RowBox[{"Column", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Style", "[", 
              RowBox[{
              "\"\< Shortest cycle through all vertices, staying on graph \
edges, with vertex and \\n edge repetition allowed\>\"", ",", 
               RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}]}], "]"}], 
             ",", 
             RowBox[{"RoutingProblemTourImage", "[", 
              RowBox[{"jj", ",", "tour", ",", 
               RowBox[{"EdgeThickness", "\[Rule]", 
                RowBox[{
                "thicks", "\[LeftDoubleBracket]", "jj", 
                 "\[RightDoubleBracket]"}]}], ",", 
               RowBox[{"ShowTour", "\[Rule]", "showtour"}], ",", 
               RowBox[{"ImageSize", "\[Rule]", "is"}], ",", 
               RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
               RowBox[{"ArrowPullback", "\[Rule]", "0.1"}]}], "]"}]}], "}"}], 
           "]"}], ",", 
          RowBox[{"problemtype", "\[Equal]", "2"}], ",", 
          RowBox[{"Column", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Style", "[", 
              RowBox[{
              "\"\< Shortest Hamiltonian cycle: a cycle through all vertices, \
staying on graph edges\\n and visiting each vertex once\>\"", ",", 
               RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}]}], "]"}], 
             ",", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"graphtype", "===", "\"\<graph based on grid\>\""}], 
               ",", 
               RowBox[{"Column", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"Style", "[", 
                   RowBox[{
                   "\"\< There is no Hamiltonian cycle for this graph\>\"", 
                    ",", 
                    RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}], ",", 
                    "Red"}], "]"}], ",", 
                  RowBox[{"GraphPlot", "[", 
                   RowBox[{"G", ",", 
                    RowBox[{"ImageSize", "\[Rule]", "is"}], ",", 
                    RowBox[{"EdgeRenderingFunction", "\[Rule]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Thickness", "[", 
                    RowBox[{"0.025", " ", "1.2"}], "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"\<Round\>\"", "]"}], ",", 
                    RowBox[{"GrayLevel", "[", "1", "]"}], ",", 
                    RowBox[{"Line", "[", "#1", "]"}]}], "}"}], "&"}], ")"}]}],
                     ",", 
                    RowBox[{"Background", "\[Rule]", "Black"}], ",", 
                    RowBox[{"PlotRangePadding", "\[Rule]", 
                    RowBox[{"Scaled", "[", ".05", "]"}]}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "5"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "5"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"VertexRenderingFunction", "\[Rule]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", ".003", "]"}], ",", "Black"}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"FaceForm", "[", 
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", ".8", ",", ".5"}], "]"}], "]"}], ",", 
                    RowBox[{"Disk", "[", 
                    RowBox[{"#1", ",", ".09"}], "]"}]}], "}"}], "&"}], 
                    ")"}]}]}], "]"}]}], "}"}], "]"}], ",", 
               RowBox[{"ShortestHamiltonianCycleImage", "[", 
                RowBox[{"jj", ",", "tour", ",", 
                 RowBox[{"ImageSize", "\[Rule]", "is"}], ",", 
                 RowBox[{"ShowTour", "\[Rule]", "showtour"}], ",", 
                 RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
                 RowBox[{"ArrowPullback", "\[Rule]", "0.1"}], ",", 
                 RowBox[{"EdgeThickness", "\[Rule]", 
                  RowBox[{
                  "thicks", "\[LeftDoubleBracket]", "jj", 
                   "\[RightDoubleBracket]"}]}]}], "]"}]}], "]"}]}], "}"}], 
           "]"}], ",", 
          RowBox[{"problemtype", "\[Equal]", "3"}], ",", 
          RowBox[{"Column", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Style", "[", 
              RowBox[{
              "\"\< Shortest cycle through all edges, with travel off the \
edges allowed\\n and vertex repetition allowed; pen\[Hyphen]up segments are \
dashed\>\"", ",", 
               RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}]}], "]"}], 
             ",", 
             RowBox[{"PlotterProblemImage", "[", 
              RowBox[{"jj", ",", "tour", ",", 
               RowBox[{
               "plottermatdata", "\[LeftDoubleBracket]", "jj", 
                "\[RightDoubleBracket]"}], ",", 
               RowBox[{"EdgeThickness", "\[Rule]", 
                RowBox[{
                "thicks", "\[LeftDoubleBracket]", "jj", 
                 "\[RightDoubleBracket]"}]}], ",", 
               RowBox[{"ImageSize", "\[Rule]", "is"}], ",", 
               RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
               RowBox[{"ShowTour", "\[Rule]", "showtour"}], ",", 
               RowBox[{"ArrowPullback", "\[Rule]", "pull"}]}], "]"}]}], "}"}],
            "]"}], ",", 
          RowBox[{"problemtype", "\[Equal]", "4"}], ",", 
          RowBox[{"Column", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Style", "[", 
              RowBox[{
              "\"\< Shortest cycle through all edges, staying on graph edges, \
with vertex and\\n edge repetition allowed; like a mailman using streets\>\"",
                ",", 
               RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}]}], "]"}], 
             ",", 
             RowBox[{"ChinesePostmanTourImage", "[", 
              RowBox[{"jj", ",", "tour", ",", "mat", ",", 
               RowBox[{"ImageSize", "\[Rule]", "is"}], ",", 
               RowBox[{"EdgeThickness", "\[Rule]", 
                RowBox[{
                "thicks", "\[LeftDoubleBracket]", "jj", 
                 "\[RightDoubleBracket]"}]}], ",", 
               RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
               RowBox[{"ShowTour", "\[Rule]", "showtour"}], ",", 
               RowBox[{"ArrowPullback", "\[Rule]", "pull"}]}], "]"}]}], "}"}],
            "]"}]}], "]"}], ",", 
        RowBox[{"ImageSize", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"400", ",", "440"}], "}"}]}]}], "]"}]}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Row", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Control", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "graphtype", ",", " ", "\"\<small\>\"", ",", " ", 
           "\"\<graph type\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "\"\<small\>\"", ",", "\"\<graph based on grid\>\"", ",", 
           "\"\<small planar graph\>\"", ",", "\"\<large planar graph\>\""}], 
          "}"}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Spacer", "[", "20", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Control", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"showtour", ",", "True", ",", "\"\<show tour\>\""}], "}"}], 
         ",", 
         RowBox[{"{", 
          RowBox[{"False", ",", "True"}], "}"}]}], "}"}], "]"}]}], "}"}], 
    "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"problemtype", ",", "1", ",", "\"\<problem type\>\""}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "\"\<vehicle routing problem\>\""}], ",", 
       RowBox[{
       "2", "\[Rule]", "\"\<traveling salesman problem on graph\>\""}], ",", 
       RowBox[{"3", "\[Rule]", "\"\<plotter problem\>\""}], ",", 
       RowBox[{"4", "\[Rule]", "\"\<Chinese postman problem\>\""}]}], "}"}]}],
     "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"TrackedSymbols", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"Initialization", "\[RuleDelayed]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"gropts", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"AlignmentPoint", "\[Rule]", "Center"}], ",", 
         RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
         RowBox[{"Axes", "\[Rule]", "False"}], ",", 
         RowBox[{"AxesLabel", "\[Rule]", "None"}], ",", 
         RowBox[{"AxesOrigin", "\[Rule]", "Automatic"}], ",", 
         RowBox[{"AxesStyle", "\[Rule]", 
          RowBox[{"{", "}"}]}], ",", 
         RowBox[{"Background", "\[Rule]", "None"}], ",", 
         RowBox[{"BaselinePosition", "\[Rule]", "Automatic"}], ",", 
         RowBox[{"BaseStyle", "\[Rule]", 
          RowBox[{"{", "}"}]}], ",", 
         RowBox[{"ColorOutput", "\[Rule]", "Automatic"}], ",", 
         RowBox[{"ContentSelectable", "\[Rule]", "Automatic"}], ",", 
         RowBox[{"CoordinatesToolOptions", "\[Rule]", "Automatic"}], ",", 
         RowBox[{"DisplayFunction", "\[RuleDelayed]", "$DisplayFunction"}], 
         ",", 
         RowBox[{"Epilog", "\[Rule]", 
          RowBox[{"{", "}"}]}], ",", 
         RowBox[{"FormatType", "\[RuleDelayed]", "TraditionalForm"}], ",", 
         RowBox[{"Frame", "\[Rule]", "False"}], ",", 
         RowBox[{"FrameLabel", "\[Rule]", "None"}], ",", 
         RowBox[{"FrameStyle", "\[Rule]", 
          RowBox[{"{", "}"}]}], ",", 
         RowBox[{"FrameTicks", "\[Rule]", "Automatic"}], ",", 
         RowBox[{"FrameTicksStyle", "\[Rule]", 
          RowBox[{"{", "}"}]}], ",", 
         RowBox[{"GridLines", "\[Rule]", "None"}], ",", 
         RowBox[{"GridLinesStyle", "\[Rule]", 
          RowBox[{"{", "}"}]}], ",", 
         RowBox[{"ImageMargins", "\[Rule]", "0."}], ",", 
         RowBox[{"ImagePadding", "\[Rule]", "All"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "Automatic"}], ",", 
         RowBox[{"ImageSizeRaw", "\[Rule]", "Automatic"}], ",", 
         RowBox[{"LabelStyle", "\[Rule]", 
          RowBox[{"{", "}"}]}], ",", 
         RowBox[{"Method", "\[Rule]", "Automatic"}], ",", 
         RowBox[{"PlotLabel", "\[Rule]", "None"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
         RowBox[{"PlotRangeClipping", "\[Rule]", "False"}], ",", 
         RowBox[{"PlotRangePadding", "\[Rule]", "Automatic"}], ",", 
         RowBox[{"PlotRegion", "\[Rule]", "Automatic"}], ",", 
         RowBox[{"PreserveImageOptions", "\[Rule]", "Automatic"}], ",", 
         RowBox[{"Prolog", "\[Rule]", 
          RowBox[{"{", "}"}]}], ",", 
         RowBox[{"RotateLabel", "\[Rule]", "True"}], ",", 
         RowBox[{"Ticks", "\[Rule]", "Automatic"}], ",", 
         RowBox[{"TicksStyle", "\[Rule]", 
          RowBox[{"{", "}"}]}]}], "}"}]}], ";", 
      RowBox[{"graphs", "=", 
       RowBox[{"Apply", "[", 
        RowBox[{"Graph", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], 
             ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"1", "\[UndirectedEdge]", "4"}], ",", 
               RowBox[{"1", "\[UndirectedEdge]", "5"}], ",", 
               RowBox[{"2", "\[UndirectedEdge]", "3"}], ",", 
               RowBox[{"2", "\[UndirectedEdge]", "4"}], ",", 
               RowBox[{"2", "\[UndirectedEdge]", "5"}], ",", 
               RowBox[{"3", "\[UndirectedEdge]", "4"}], ",", 
               RowBox[{"3", "\[UndirectedEdge]", "5"}]}], "}"}], ",", 
             RowBox[{"VertexCoordinates", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"0.", ",", ".5"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0.15", ",", "0.18"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0.", ",", "0."}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0.", ",", "0.3"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0.4", ",", "0."}], "}"}]}], "}"}]}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7",
                ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", 
               "13", ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", 
               ",", "19", ",", "20", ",", "21", ",", "22", ",", "23"}], "}"}],
              ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"1", "\[UndirectedEdge]", "2"}], ",", 
               RowBox[{"1", "\[UndirectedEdge]", "6"}], ",", 
               RowBox[{"3", "\[UndirectedEdge]", "4"}], ",", 
               RowBox[{"3", "\[UndirectedEdge]", "7"}], ",", 
               RowBox[{"3", "\[UndirectedEdge]", "8"}], ",", 
               RowBox[{"4", "\[UndirectedEdge]", "8"}], ",", 
               RowBox[{"5", "\[UndirectedEdge]", "6"}], ",", 
               RowBox[{"6", "\[UndirectedEdge]", "7"}], ",", 
               RowBox[{"7", "\[UndirectedEdge]", "8"}], ",", 
               RowBox[{"7", "\[UndirectedEdge]", "11"}], ",", 
               RowBox[{"7", "\[UndirectedEdge]", "12"}], ",", 
               RowBox[{"8", "\[UndirectedEdge]", "13"}], ",", 
               RowBox[{"9", "\[UndirectedEdge]", "10"}], ",", 
               RowBox[{"9", "\[UndirectedEdge]", "14"}], ",", 
               RowBox[{"10", "\[UndirectedEdge]", "15"}], ",", 
               RowBox[{"10", "\[UndirectedEdge]", "16"}], ",", 
               RowBox[{"11", "\[UndirectedEdge]", "16"}], ",", 
               RowBox[{"11", "\[UndirectedEdge]", "17"}], ",", 
               RowBox[{"12", "\[UndirectedEdge]", "17"}], ",", 
               RowBox[{"15", "\[UndirectedEdge]", "20"}], ",", 
               RowBox[{"16", "\[UndirectedEdge]", "21"}], ",", 
               RowBox[{"16", "\[UndirectedEdge]", "22"}], ",", 
               RowBox[{"17", "\[UndirectedEdge]", "18"}], ",", 
               RowBox[{"17", "\[UndirectedEdge]", "23"}], ",", 
               RowBox[{"19", "\[UndirectedEdge]", "20"}], ",", 
               RowBox[{"21", "\[UndirectedEdge]", "22"}], ",", 
               RowBox[{"22", "\[UndirectedEdge]", "23"}]}], "}"}], ",", 
             RowBox[{"VertexCoordinates", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"1.", ",", "1."}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"1.", ",", "2."}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"1.", ",", "3."}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"1.", ",", "4."}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"2.", ",", "1."}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"2.", ",", "2."}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"2.", ",", "3."}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"2.", ",", "4."}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"3.", ",", "1."}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"3.", ",", "2."}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"3.", ",", "3."}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"3.", ",", "4."}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"3.", ",", "5."}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"4.", ",", "1."}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"4.", ",", "2."}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"4.", ",", "3."}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"4.", ",", "4."}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"4.", ",", "5."}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"5.", ",", "1."}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"5.", ",", "2."}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"5.", ",", "3."}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"5.", ",", "4."}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"5.", ",", "5."}], "}"}]}], "}"}]}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7",
                ",", "8", ",", "9"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"1", "\[UndirectedEdge]", "2"}], ",", 
               RowBox[{"1", "\[UndirectedEdge]", "3"}], ",", 
               RowBox[{"1", "\[UndirectedEdge]", "4"}], ",", 
               RowBox[{"1", "\[UndirectedEdge]", "9"}], ",", 
               RowBox[{"2", "\[UndirectedEdge]", "4"}], ",", 
               RowBox[{"2", "\[UndirectedEdge]", "8"}], ",", 
               RowBox[{"2", "\[UndirectedEdge]", "9"}], ",", 
               RowBox[{"3", "\[UndirectedEdge]", "9"}], ",", 
               RowBox[{"4", "\[UndirectedEdge]", "5"}], ",", 
               RowBox[{"4", "\[UndirectedEdge]", "6"}], ",", 
               RowBox[{"4", "\[UndirectedEdge]", "7"}], ",", 
               RowBox[{"4", "\[UndirectedEdge]", "8"}], ",", 
               RowBox[{"5", "\[UndirectedEdge]", "6"}], ",", 
               RowBox[{"5", "\[UndirectedEdge]", "7"}], ",", 
               RowBox[{"5", "\[UndirectedEdge]", "8"}], ",", 
               RowBox[{"5", "\[UndirectedEdge]", "9"}], ",", 
               RowBox[{"6", "\[UndirectedEdge]", "8"}], ",", 
               RowBox[{"7", "\[UndirectedEdge]", "9"}], ",", 
               RowBox[{"8", "\[UndirectedEdge]", "9"}]}], "}"}], ",", 
             RowBox[{"VertexCoordinates", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"0.309", ",", "0.951"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0.18", ",", "0.033"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "0.809"}], ",", "0.588"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"1.", ",", "0."}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0.241", ",", 
                  RowBox[{"-", "0.396"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0.487", ",", 
                  RowBox[{"-", "0.209"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0.309", ",", 
                  RowBox[{"-", "0.951"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0.22", ",", 
                  RowBox[{"-", "0.232"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "0.809"}], ",", 
                  RowBox[{"-", "0.588"}]}], "}"}]}], "}"}]}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7",
                ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", 
               "13", ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", 
               ",", "19", ",", "20"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"1", "\[UndirectedEdge]", "3"}], ",", 
               RowBox[{"1", "\[UndirectedEdge]", "6"}], ",", 
               RowBox[{"1", "\[UndirectedEdge]", "7"}], ",", 
               RowBox[{"1", "\[UndirectedEdge]", "13"}], ",", 
               RowBox[{"1", "\[UndirectedEdge]", "16"}], ",", 
               RowBox[{"1", "\[UndirectedEdge]", "17"}], ",", 
               RowBox[{"2", "\[UndirectedEdge]", "4"}], ",", 
               RowBox[{"2", "\[UndirectedEdge]", "7"}], ",", 
               RowBox[{"2", "\[UndirectedEdge]", "11"}], ",", 
               RowBox[{"2", "\[UndirectedEdge]", "15"}], ",", 
               RowBox[{"2", "\[UndirectedEdge]", "19"}], ",", 
               RowBox[{"3", "\[UndirectedEdge]", "6"}], ",", 
               RowBox[{"3", "\[UndirectedEdge]", "7"}], ",", 
               RowBox[{"3", "\[UndirectedEdge]", "19"}], ",", 
               RowBox[{"4", "\[UndirectedEdge]", "7"}], ",", 
               RowBox[{"4", "\[UndirectedEdge]", "15"}], ",", 
               RowBox[{"5", "\[UndirectedEdge]", "6"}], ",", 
               RowBox[{"5", "\[UndirectedEdge]", "10"}], ",", 
               RowBox[{"5", "\[UndirectedEdge]", "12"}], ",", 
               RowBox[{"5", "\[UndirectedEdge]", "16"}], ",", 
               RowBox[{"5", "\[UndirectedEdge]", "20"}], ",", 
               RowBox[{"6", "\[UndirectedEdge]", "15"}], ",", 
               RowBox[{"6", "\[UndirectedEdge]", "16"}], ",", 
               RowBox[{"6", "\[UndirectedEdge]", "19"}], ",", 
               RowBox[{"6", "\[UndirectedEdge]", "20"}], ",", 
               RowBox[{"7", "\[UndirectedEdge]", "13"}], ",", 
               RowBox[{"7", "\[UndirectedEdge]", "19"}], ",", 
               RowBox[{"8", "\[UndirectedEdge]", "9"}], ",", 
               RowBox[{"8", "\[UndirectedEdge]", "13"}], ",", 
               RowBox[{"8", "\[UndirectedEdge]", "16"}], ",", 
               RowBox[{"9", "\[UndirectedEdge]", "10"}], ",", 
               RowBox[{"9", "\[UndirectedEdge]", "16"}], ",", 
               RowBox[{"9", "\[UndirectedEdge]", "18"}], ",", 
               RowBox[{"10", "\[UndirectedEdge]", "12"}], ",", 
               RowBox[{"10", "\[UndirectedEdge]", "16"}], ",", 
               RowBox[{"10", "\[UndirectedEdge]", "18"}], ",", 
               RowBox[{"11", "\[UndirectedEdge]", "15"}], ",", 
               RowBox[{"11", "\[UndirectedEdge]", "19"}], ",", 
               RowBox[{"12", "\[UndirectedEdge]", "14"}], ",", 
               RowBox[{"12", "\[UndirectedEdge]", "18"}], ",", 
               RowBox[{"12", "\[UndirectedEdge]", "20"}], ",", 
               RowBox[{"13", "\[UndirectedEdge]", "16"}], ",", 
               RowBox[{"13", "\[UndirectedEdge]", "17"}], ",", 
               RowBox[{"14", "\[UndirectedEdge]", "15"}], ",", 
               RowBox[{"14", "\[UndirectedEdge]", "18"}], ",", 
               RowBox[{"14", "\[UndirectedEdge]", "20"}], ",", 
               RowBox[{"15", "\[UndirectedEdge]", "19"}], ",", 
               RowBox[{"15", "\[UndirectedEdge]", "20"}], ",", 
               RowBox[{"16", "\[UndirectedEdge]", "17"}]}], "}"}], ",", 
             RowBox[{"VertexCoordinates", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"0.188", ",", 
                  RowBox[{"-", "0.464"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0.734", ",", "0.055"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0.43", ",", 
                  RowBox[{"-", "0.274"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"1.", ",", "0."}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "0.112"}], ",", "0.208"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0.241", ",", "0.059"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0.707", ",", 
                  RowBox[{"-", "0.707"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "0.707"}], ",", 
                  RowBox[{"-", "0.707"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "1."}], ",", "0."}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "0.456"}], ",", "0.233"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0.674", ",", "0.26"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "0.231"}], ",", "0.53"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0.", ",", 
                  RowBox[{"-", "1."}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0.", ",", "1."}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0.707", ",", "0.707"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "0.233"}], ",", 
                  RowBox[{"-", "0.282"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "0.015"}], ",", 
                  RowBox[{"-", "0.582"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "0.707"}], ",", "0.707"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0.582", ",", "0.017"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0.121", ",", "0.501"}], "}"}]}], "}"}]}]}], "}"}]}],
           "}"}], ",", 
         RowBox[{"{", "1", "}"}]}], "]"}]}], ";", 
      RowBox[{
       RowBox[{"Extend", "[", "a_", "]"}], ":=", 
       RowBox[{"Append", "[", 
        RowBox[{"a", ",", 
         RowBox[{
         "a", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
        "]"}]}], ";", 
      RowBox[{"ColorsForColoring", "=", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "Red", ",", "Green", ",", "Blue", ",", "Cyan", ",", "Magenta", ",", 
           "Yellow", ",", "Orange", ",", "Purple", ",", "Brown", ",", 
           "Black"}], "}"}], ",", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"ColorData", "[", 
            RowBox[{"\"\<Legacy\>\"", ",", "i"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "40"}], "}"}]}], "]"}]}], "]"}]}], ";", 
      RowBox[{
       RowBox[{"options", "[", "ChinesePostmanTourImage", "]"}], "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"ArrowPullback", "\[Rule]", "Automatic"}], ",", 
         RowBox[{"EdgeThickness", "\[Rule]", ".008"}], ",", 
         RowBox[{"ShowTour", "\[Rule]", "True"}]}], "}"}]}], ";", 
      RowBox[{
       RowBox[{"ChinesePostmanTourImage", "[", 
        RowBox[{"jj_", ",", "tour_", ",", "mat_", ",", "opts___"}], "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "G", ",", "nv", ",", "pull", ",", "th", ",", "show", ",", "cy", ",",
            "n", ",", "locs", ",", "pr", ",", "xR", ",", "cyEdges", ",", 
           "cyEdgesSorted", ",", "cyEdgesIndexed", ",", "matchedverts", ",", 
           "odds", ",", "v", ",", "i"}], "}"}], ",", 
         RowBox[{
          RowBox[{"G", "=", 
           RowBox[{
           "graphs", "\[LeftDoubleBracket]", "jj", 
            "\[RightDoubleBracket]"}]}], ";", 
          RowBox[{"nv", "=", 
           RowBox[{"VertexCount", "[", "G", "]"}]}], ";", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"th", ",", "pull", ",", "show"}], "}"}], "=", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "EdgeThickness", ",", "ArrowPullback", ",", "ShowTour"}], "}"}],
              "/.", "\[VeryThinSpace]", 
             RowBox[{"{", "opts", "}"}]}], "/.", "\[VeryThinSpace]", 
            RowBox[{"options", "[", "ChinesePostmanTourImage", "]"}]}]}], ";", 
          RowBox[{"pull", "=", 
           RowBox[{"pull", "/.", "\[VeryThinSpace]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Automatic", "\[Rule]", ".05"}], ",", 
              RowBox[{"None", "\[Rule]", "0"}]}], "}"}]}]}], ";", 
          RowBox[{"cy", "=", 
           RowBox[{"Extend", "[", "tour", "]"}]}], ";", 
          RowBox[{"n", "=", 
           RowBox[{"VertexCount", "[", "G", "]"}]}], ";", 
          RowBox[{"locs", "=", 
           RowBox[{
           "locData", "\[LeftDoubleBracket]", "jj", 
            "\[RightDoubleBracket]"}]}], ";", 
          RowBox[{"pr", "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Min", "[", 
                RowBox[{"First", "/@", "locs"}], "]"}], ",", 
               RowBox[{"Max", "[", 
                RowBox[{"First", "/@", "locs"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Min", "[", 
                RowBox[{"Last", "/@", "locs"}], "]"}], ",", 
               RowBox[{"Max", "[", 
                RowBox[{"Last", "/@", "locs"}], "]"}]}], "}"}]}], "}"}]}], 
          ";", 
          RowBox[{"xR", "=", 
           RowBox[{
            RowBox[{"pr", "\[LeftDoubleBracket]", 
             RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], "-", 
            RowBox[{"pr", "\[LeftDoubleBracket]", 
             RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}]}]}], ";", 
          RowBox[{"cyEdges", "=", 
           RowBox[{"Partition", "[", 
            RowBox[{"cy", ",", "2", ",", "1"}], "]"}]}], ";", 
          RowBox[{"cyEdgesSorted", "=", 
           RowBox[{"Sort", "/@", "cyEdges"}]}], ";", 
          RowBox[{"cyEdgesIndexed", "=", 
           RowBox[{"MapIndexed", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Rule", "@@", "#1"}], ",", 
                RowBox[{
                "#2", "\[LeftDoubleBracket]", "1", 
                 "\[RightDoubleBracket]"}]}], "}"}], "&"}], ",", "cyEdges"}], 
            "]"}]}], ";", 
          RowBox[{"matchedverts", "=", 
           RowBox[{"Apply", "[", 
            RowBox[{"List", ",", "mat", ",", 
             RowBox[{"{", "1", "}"}]}], "]"}]}], ";", 
          RowBox[{"odds", "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"EdgeForm", "[", 
              RowBox[{"Directive", "[", 
               RowBox[{
                RowBox[{"Thickness", "[", ".002", "]"}], ",", "Black"}], 
               "]"}], "]"}], ",", 
             RowBox[{"MapIndexed", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"ColorsForColoring", "\[LeftDoubleBracket]", 
                   RowBox[{
                   "#2", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "\[RightDoubleBracket]"}], ",", 
                  RowBox[{"Disk", "[", 
                   RowBox[{
                    RowBox[{"locs", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "#1", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"xR", " ", ".02"}]}], "]"}], ",", 
                  RowBox[{"Disk", "[", 
                   RowBox[{
                    RowBox[{"locs", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "#1", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}], "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"xR", " ", ".02"}]}], "]"}]}], "}"}], "&"}], ",", 
               "matchedverts"}], "]"}]}], "}"}]}], ";", 
          RowBox[{"Show", "[", 
           RowBox[{
            RowBox[{"Graphics", "[", 
             RowBox[{"Rectangle", "@@", 
              RowBox[{"Transpose", "[", "pr", "]"}]}], "]"}], ",", 
            RowBox[{"GraphPlot", "[", 
             RowBox[{"G", ",", 
              RowBox[{"EdgeRenderingFunction", "\[Rule]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Thickness", "[", 
                    RowBox[{"0.025", " ", "1.2"}], "]"}], ",", 
                   RowBox[{"CapForm", "[", "\"\<Round\>\"", "]"}], ",", 
                   RowBox[{"GrayLevel", "[", "1", "]"}], ",", 
                   RowBox[{"Line", "[", "#1", "]"}]}], "}"}], "&"}], ")"}]}], 
              ",", 
              RowBox[{"VertexRenderingFunction", "\[Rule]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"{", "}"}], "&"}], ")"}]}]}], "]"}], ",", 
            RowBox[{"If", "[", 
             RowBox[{"show", ",", 
              RowBox[{"GraphPlot", "[", 
               RowBox[{"cyEdgesIndexed", ",", 
                RowBox[{"EdgeRenderingFunction", "\[Rule]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"i", "=", "#3"}], ";", 
                    RowBox[{"\[Rho]", "=", 
                    FractionBox["i", 
                    RowBox[{"Length", "[", "cy", "]"}]]}], ";", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "th", "]"}], ",", 
                    RowBox[{"Arrowheads", "[", 
                    RowBox[{"4", " ", "th"}], "]"}], ",", 
                    RowBox[{"Hue", "[", 
                    RowBox[{
                    RowBox[{"1", "-", 
                    FractionBox["\[Rho]", "2"]}], ",", ".7", ",", "1"}], 
                    "]"}], ",", 
                    RowBox[{"Arrow", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{
                    RowBox[{"Norm", "[", 
                    RowBox[{
                    RowBox[{
                    "#1", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "-", 
                    RowBox[{"#1", "\[LeftDoubleBracket]", 
                    RowBox[{"-", "1"}], "\[RightDoubleBracket]"}]}], "]"}], 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["pull", "5"], ",", "pull"}], "}"}]}]}], 
                    "]"}]}], "}"}]}], ")"}], "&"}], ")"}]}], ",", 
                RowBox[{"VertexCoordinateRules", "\[Rule]", 
                 RowBox[{"Thread", "[", 
                  RowBox[{
                   RowBox[{"Range", "[", "n", "]"}], "\[Rule]", "locs"}], 
                  "]"}]}]}], "]"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Graphics", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Thickness", "[", ".01", "]"}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"v", "=", 
                    RowBox[{
                    "locs", "\[LeftDoubleBracket]", "#1", 
                    "\[RightDoubleBracket]"}]}], ";", "odds"}], ",", 
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", ".8", ",", ".5"}], "]"}], ",", "White", 
                    ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", ".002", "]"}], ",", "Black"}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"Disk", "[", 
                    RowBox[{"v", ",", 
                    RowBox[{"xR", " ", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"v", "\[Equal]", 
                    RowBox[{"locs", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "cy", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "\[RightDoubleBracket]"}]}], 
                    ",", 
                    RowBox[{".02", " ", "1.5"}], ",", ".02"}], "]"}]}]}], 
                    "]"}]}], "}"}], "&"}], ")"}], "/@", 
                RowBox[{"Complement", "[", 
                 RowBox[{
                  RowBox[{"Range", "[", "nv", "]"}], ",", 
                  RowBox[{"Flatten", "[", "matchedverts", "]"}]}], "]"}]}]}], 
              "}"}], "]"}], ",", 
            RowBox[{"Sequence", "@@", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", "gropts"}], "]"}]}], ",", 
            RowBox[{"Background", "\[Rule]", "Black"}], ",", 
            RowBox[{"PlotRange", "\[Rule]", "pr"}], ",", 
            RowBox[{"ImageSize", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"500", ",", "500"}], "}"}]}], ",", 
            RowBox[{"PlotRangePadding", "\[Rule]", 
             RowBox[{"Scaled", "[", ".05", "]"}]}], ",", 
            RowBox[{"Frame", "\[Rule]", "True"}], ",", 
            RowBox[{"FrameTicks", "\[Rule]", "False"}]}], "]"}]}]}], "]"}]}], 
      ";", 
      RowBox[{
       RowBox[{"options", "[", "PlotterProblemImage", "]"}], "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"ArrowPullback", "\[Rule]", "Automatic"}], ",", 
         RowBox[{"EdgeThickness", "\[Rule]", ".008"}], ",", 
         RowBox[{"ShowTour", "\[Rule]", "True"}]}], "}"}]}], ";", 
      RowBox[{
       RowBox[{"PlotterProblemImage", "[", 
        RowBox[{"jj_", ",", "tour_", ",", "mat1_", ",", "opts___"}], "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "odds", ",", "locs", ",", "pr", ",", "GOdd", ",", "XXedges", ",", 
           "len", ",", "mat", ",", "i", ",", "cy", ",", "edgesg", ",", 
           "cyEdges", ",", "pathData", ",", "edge", ",", "newAdj", ",", "wts",
            ",", "reordermat", ",", "g", ",", "nv", ",", "th", ",", "pull", 
           ",", "show", ",", "xR", ",", "matchedverts", ",", "cyEdgesSorted", 
           ",", "dashed", ",", "v", ",", "\[Rho]", ",", "cyEdgesIndexed"}], 
          "}"}], ",", 
         RowBox[{
          RowBox[{"g", "=", 
           RowBox[{
           "graphs", "\[LeftDoubleBracket]", "jj", 
            "\[RightDoubleBracket]"}]}], ";", 
          RowBox[{"nv", "=", 
           RowBox[{"VertexCount", "[", "g", "]"}]}], ";", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"th", ",", "pull", ",", "show"}], "}"}], "=", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "EdgeThickness", ",", "ArrowPullback", ",", "ShowTour"}], "}"}],
              "/.", "\[VeryThinSpace]", 
             RowBox[{"{", "opts", "}"}]}], "/.", "\[VeryThinSpace]", 
            RowBox[{"options", "[", "PlotterProblemImage", "]"}]}]}], ";", 
          RowBox[{"pull", "=", 
           RowBox[{"pull", "/.", "\[VeryThinSpace]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Automatic", "\[Rule]", ".05"}], ",", 
              RowBox[{"None", "\[Rule]", "0"}]}], "}"}]}]}], ";", 
          RowBox[{"odds", "=", 
           RowBox[{"Flatten", "[", 
            RowBox[{"Position", "[", 
             RowBox[{
              RowBox[{"VertexDegree", "[", "g", "]"}], ",", 
              RowBox[{"x_", "?", "OddQ"}]}], "]"}], "]"}]}], ";", 
          RowBox[{"locs", "=", 
           RowBox[{
           "locData", "\[LeftDoubleBracket]", "jj", 
            "\[RightDoubleBracket]"}]}], ";", 
          RowBox[{"pr", "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Min", "[", 
                RowBox[{"First", "/@", "locs"}], "]"}], ",", 
               RowBox[{"Max", "[", 
                RowBox[{"First", "/@", "locs"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Min", "[", 
                RowBox[{"Last", "/@", "locs"}], "]"}], ",", 
               RowBox[{"Max", "[", 
                RowBox[{"Last", "/@", "locs"}], "]"}]}], "}"}]}], "}"}]}], 
          ";", 
          RowBox[{"xR", "=", 
           RowBox[{
            RowBox[{"pr", "\[LeftDoubleBracket]", 
             RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], "-", 
            RowBox[{"pr", "\[LeftDoubleBracket]", 
             RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}]}]}], ";", 
          RowBox[{"cy", "=", 
           RowBox[{"Extend", "[", "tour", "]"}]}], ";", 
          RowBox[{"mat", "=", 
           RowBox[{"mat1", "/.", "\[VeryThinSpace]", 
            RowBox[{
             RowBox[{"i_", "\[UndirectedEdge]", "j_"}], "\[RuleDelayed]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"Position", "[", 
                  RowBox[{"cy", ",", "i"}], "]"}], "\[LeftDoubleBracket]", 
                 RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], "<", 
                RowBox[{
                 RowBox[{"Position", "[", 
                  RowBox[{"cy", ",", "j"}], "]"}], "\[LeftDoubleBracket]", 
                 RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}]}], ",", 
               RowBox[{"i", "\[UndirectedEdge]", "j"}], ",", 
               RowBox[{"j", "\[UndirectedEdge]", "i"}]}], "]"}]}]}]}], ";", 
          RowBox[{"matchedverts", "=", 
           RowBox[{"Apply", "[", 
            RowBox[{"List", ",", "mat1", ",", 
             RowBox[{"{", "1", "}"}]}], "]"}]}], ";", 
          RowBox[{"odds", "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"EdgeForm", "[", 
              RowBox[{"Directive", "[", 
               RowBox[{
                RowBox[{"Thickness", "[", ".002", "]"}], ",", "Black"}], 
               "]"}], "]"}], ",", 
             RowBox[{"MapIndexed", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"ColorsForColoring", "\[LeftDoubleBracket]", 
                   RowBox[{
                   "#2", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "\[RightDoubleBracket]"}], ",", 
                  RowBox[{"Disk", "[", 
                   RowBox[{
                    RowBox[{"locs", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "#1", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"xR", " ", ".02"}]}], "]"}], ",", 
                  RowBox[{"Disk", "[", 
                   RowBox[{
                    RowBox[{"locs", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "#1", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}], "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"xR", " ", ".02"}]}], "]"}]}], "}"}], "&"}], ",", 
               "matchedverts"}], "]"}]}], "}"}]}], ";", 
          RowBox[{"edgesg", "=", 
           RowBox[{"EdgeList", "[", "g", "]"}]}], ";", 
          RowBox[{"cyEdges", "=", 
           RowBox[{"Partition", "[", 
            RowBox[{"cy", ",", "2", ",", "1"}], "]"}]}], ";", 
          RowBox[{"cyEdgesSorted", "=", 
           RowBox[{"Sort", "/@", "cyEdges"}]}], ";", 
          RowBox[{"cyEdgesIndexed", "=", 
           RowBox[{"MapIndexed", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Rule", "@@", "#1"}], ",", 
                RowBox[{
                "#2", "\[LeftDoubleBracket]", "1", 
                 "\[RightDoubleBracket]"}]}], "}"}], "&"}], ",", "cyEdges"}], 
            "]"}]}], ";", 
          RowBox[{"pathData", "=", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{
               RowBox[{"Position", "[", 
                RowBox[{
                 RowBox[{"Take", "[", 
                  RowBox[{"cyEdges", ",", 
                   RowBox[{"i", "-", "1"}]}], "]"}], ",", 
                 RowBox[{
                 "cyEdges", "\[LeftDoubleBracket]", "i", 
                  "\[RightDoubleBracket]"}]}], "]"}], "\[NotEqual]", 
               RowBox[{"{", "}"}]}]}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", 
               RowBox[{"Length", "[", "cyEdges", "]"}]}], "}"}]}], "]"}]}], 
          ";", 
          RowBox[{"dashed", "=", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"False", "&"}], ")"}], "/@", "cyEdgesIndexed"}]}], ";", 
          RowBox[{"Show", "[", 
           RowBox[{
            RowBox[{"GraphPlot", "[", 
             RowBox[{"g", ",", 
              RowBox[{"EdgeRenderingFunction", "\[Rule]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Thickness", "[", 
                    RowBox[{"0.025", " ", "1.2"}], "]"}], ",", 
                   RowBox[{"CapForm", "[", "\"\<Round\>\"", "]"}], ",", 
                   RowBox[{"GrayLevel", "[", "1", "]"}], ",", 
                   RowBox[{"Line", "[", "#1", "]"}]}], "}"}], "&"}], ")"}]}], 
              ",", 
              RowBox[{"VertexRenderingFunction", "\[Rule]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"{", "}"}], "&"}], ")"}]}]}], "]"}], ",", 
            RowBox[{"If", "[", 
             RowBox[{"show", ",", 
              RowBox[{"GraphPlot", "[", 
               RowBox[{"cyEdgesIndexed", ",", 
                RowBox[{"EdgeRenderingFunction", "\[Rule]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Rho]", "=", 
                    FractionBox["#3", 
                    RowBox[{"Length", "[", "cy", "]"}]]}], ";", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "th", "]"}], ",", 
                    RowBox[{"Arrowheads", "[", 
                    RowBox[{"4", " ", "th"}], "]"}], ",", 
                    RowBox[{"Hue", "[", 
                    RowBox[{
                    RowBox[{"1", "-", 
                    FractionBox["\[Rho]", "2"]}], ",", ".7", ",", "1"}], 
                    "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{"mat", ",", 
                    RowBox[{"UndirectedEdge", "@@", "#2"}]}], "]"}], "&&", 
                    RowBox[{
                    "pathData", "\[LeftDoubleBracket]", "#3", 
                    "\[RightDoubleBracket]"}]}], ",", 
                    RowBox[{"Dashing", "[", 
                    RowBox[{"{", 
                    RowBox[{".01", ",", ".01"}], "}"}], "]"}]}], "]"}], ",", 
                    RowBox[{"Arrow", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{
                    RowBox[{"Norm", "[", 
                    RowBox[{
                    RowBox[{
                    "#1", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "-", 
                    RowBox[{"#1", "\[LeftDoubleBracket]", 
                    RowBox[{"-", "1"}], "\[RightDoubleBracket]"}]}], "]"}], 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["pull", "5"], ",", "pull"}], "}"}]}]}], 
                    "]"}]}], "}"}]}], ")"}], "&"}], ")"}]}], ",", 
                RowBox[{"VertexCoordinateRules", "\[Rule]", 
                 RowBox[{"Thread", "[", 
                  RowBox[{
                   RowBox[{"Range", "[", 
                    RowBox[{"VertexCount", "[", "g", "]"}], "]"}], "\[Rule]", 
                   "locs"}], "]"}]}]}], "]"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Graphics", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Thickness", "[", ".01", "]"}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"v", "=", 
                    RowBox[{
                    "locs", "\[LeftDoubleBracket]", "#1", 
                    "\[RightDoubleBracket]"}]}], ";", "odds"}], ",", 
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", ".8", ",", ".5"}], "]"}], ",", "White", 
                    ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", ".002", "]"}], ",", "Black"}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"Disk", "[", 
                    RowBox[{"v", ",", 
                    RowBox[{"xR", " ", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"v", "\[Equal]", 
                    RowBox[{"locs", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "cy", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "\[RightDoubleBracket]"}]}], 
                    ",", 
                    RowBox[{".02", " ", "1.5"}], ",", ".02"}], "]"}]}]}], 
                    "]"}]}], "}"}], "&"}], ")"}], "/@", 
                RowBox[{"Complement", "[", 
                 RowBox[{
                  RowBox[{"Range", "[", "nv", "]"}], ",", 
                  RowBox[{"Flatten", "[", "matchedverts", "]"}]}], "]"}]}]}], 
              "}"}], "]"}], ",", 
            RowBox[{"Sequence", "@@", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", "gropts"}], "]"}]}], ",", 
            RowBox[{"PlotRange", "\[Rule]", "pr"}], ",", 
            RowBox[{"Frame", "\[Rule]", "True"}], ",", 
            RowBox[{"ImageSize", "\[Rule]", "350"}], ",", 
            RowBox[{"Background", "\[Rule]", 
             RowBox[{"GrayLevel", "[", "0.", "]"}]}], ",", 
            RowBox[{"PlotRangePadding", "\[Rule]", 
             RowBox[{"Scaled", "[", ".05", "]"}]}]}], "]"}]}]}], "]"}]}], ";", 
      RowBox[{
       RowBox[{"options", "[", "ShortestHamiltonianCycleImage", "]"}], "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"ArrowPullback", "\[Rule]", "Automatic"}], ",", 
         RowBox[{"EdgeThickness", "\[Rule]", ".008"}], ",", 
         RowBox[{"ShowTour", "\[Rule]", "True"}]}], "}"}]}], ";", 
      RowBox[{
       RowBox[{"ShortestHamiltonianCycleImage", "[", 
        RowBox[{"jj_", ",", "tour_", ",", "opts___"}], "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "tourAns", ",", "locs", ",", "pr", ",", "n", ",", "th", ",", "pull",
            ",", "G", ",", "cyEdgesIndexed", ",", "xR", ",", "i", ",", 
           "\[Rho]"}], "}"}], ",", 
         RowBox[{
          RowBox[{"G", "=", 
           RowBox[{
           "graphs", "\[LeftDoubleBracket]", "jj", 
            "\[RightDoubleBracket]"}]}], ";", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"th", ",", "pull", ",", "show"}], "}"}], "=", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "EdgeThickness", ",", "ArrowPullback", ",", "ShowTour"}], "}"}],
              "/.", "\[VeryThinSpace]", 
             RowBox[{"{", "opts", "}"}]}], "/.", "\[VeryThinSpace]", 
            RowBox[{
            "options", "[", "ShortestHamiltonianCycleImage", "]"}]}]}], ";", 
          RowBox[{"pull", "=", 
           RowBox[{"pull", "/.", "\[VeryThinSpace]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Automatic", "\[Rule]", ".05"}], ",", 
              RowBox[{"None", "\[Rule]", "0"}]}], "}"}]}]}], ";", 
          RowBox[{"tourAns", "=", 
           RowBox[{"Apply", "[", 
            RowBox[{"UndirectedEdge", ",", 
             RowBox[{"Partition", "[", 
              RowBox[{
               RowBox[{"Extend", "[", "tour", "]"}], ",", "2", ",", "1"}], 
              "]"}], ",", 
             RowBox[{"{", "1", "}"}]}], "]"}]}], ";", 
          RowBox[{"locs", "=", 
           RowBox[{
           "locData", "\[LeftDoubleBracket]", "jj", 
            "\[RightDoubleBracket]"}]}], ";", 
          RowBox[{"n", "=", 
           RowBox[{"VertexCount", "[", "G", "]"}]}], ";", 
          RowBox[{"pr", "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Min", "[", 
                RowBox[{"First", "/@", "locs"}], "]"}], ",", 
               RowBox[{"Max", "[", 
                RowBox[{"First", "/@", "locs"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Min", "[", 
                RowBox[{"Last", "/@", "locs"}], "]"}], ",", 
               RowBox[{"Max", "[", 
                RowBox[{"Last", "/@", "locs"}], "]"}]}], "}"}]}], "}"}]}], 
          ";", 
          RowBox[{"xR", "=", 
           RowBox[{
            RowBox[{"pr", "\[LeftDoubleBracket]", 
             RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], "-", 
            RowBox[{"pr", "\[LeftDoubleBracket]", 
             RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}]}]}], ";", 
          RowBox[{"cyEdgesIndexed", "=", 
           RowBox[{"MapIndexed", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Rule", "@@", "#1"}], ",", 
                RowBox[{
                "#2", "\[LeftDoubleBracket]", "1", 
                 "\[RightDoubleBracket]"}]}], "}"}], "&"}], ",", "tourAns"}], 
            "]"}]}], ";", 
          RowBox[{"Show", "[", 
           RowBox[{
            RowBox[{"GraphPlot", "[", 
             RowBox[{
              RowBox[{"Apply", "[", 
               RowBox[{"Rule", ",", 
                RowBox[{"EdgeList", "[", "G", "]"}], ",", 
                RowBox[{"{", "1", "}"}]}], "]"}], ",", 
              RowBox[{"VertexCoordinateRules", "\[Rule]", 
               RowBox[{"Thread", "[", 
                RowBox[{
                 RowBox[{"Range", "[", "n", "]"}], "\[Rule]", "locs"}], 
                "]"}]}], ",", 
              RowBox[{"EdgeRenderingFunction", "\[Rule]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Thickness", "[", 
                    RowBox[{"0.025", " ", "1.2"}], "]"}], ",", 
                   RowBox[{"CapForm", "[", "\"\<Round\>\"", "]"}], ",", 
                   RowBox[{"GrayLevel", "[", "1", "]"}], ",", 
                   RowBox[{"Line", "[", "#1", "]"}]}], "}"}], "&"}], ")"}]}], 
              ",", 
              RowBox[{"VertexRenderingFunction", "\[Rule]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"{", "}"}], "&"}], ")"}]}]}], "]"}], ",", 
            RowBox[{"If", "[", 
             RowBox[{"show", ",", 
              RowBox[{"GraphPlot", "[", 
               RowBox[{"cyEdgesIndexed", ",", 
                RowBox[{"EdgeRenderingFunction", "\[Rule]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"i", "=", "#3"}], ";", 
                    RowBox[{"\[Rho]", "=", 
                    FractionBox["i", 
                    RowBox[{"Length", "[", "tourAns", "]"}]]}], ";", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "th", "]"}], ",", 
                    RowBox[{"Arrowheads", "[", 
                    RowBox[{"4", " ", "th"}], "]"}], ",", 
                    RowBox[{"Hue", "[", 
                    RowBox[{
                    RowBox[{"1", "-", 
                    FractionBox["\[Rho]", "2"]}], ",", ".7", ",", "1"}], 
                    "]"}], ",", 
                    RowBox[{"Arrow", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{
                    RowBox[{"Norm", "[", 
                    RowBox[{
                    RowBox[{
                    "#1", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "-", 
                    RowBox[{"#1", "\[LeftDoubleBracket]", 
                    RowBox[{"-", "1"}], "\[RightDoubleBracket]"}]}], "]"}], 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"pull", " ", "0"}], "5"], ",", "pull"}], 
                    "}"}]}]}], "]"}]}], "}"}]}], ")"}], "&"}], ")"}]}], ",", 
                RowBox[{"VertexCoordinateRules", "\[Rule]", 
                 RowBox[{"Thread", "[", 
                  RowBox[{
                   RowBox[{"Range", "[", "n", "]"}], "\[Rule]", "locs"}], 
                  "]"}]}]}], "]"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Graphics", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Thickness", "[", ".01", "]"}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"#1", "\[Equal]", 
                    RowBox[{"locs", "\[LeftDoubleBracket]", 
                    RowBox[{"tourAns", "\[LeftDoubleBracket]", 
                    RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], 
                    "\[RightDoubleBracket]"}]}], ",", 
                    RowBox[{"GrayLevel", "[", ".85", "]"}], ",", 
                    RowBox[{"Lighter", "[", "Orange", "]"}]}], "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", ".002", "]"}], ",", "Black"}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"Disk", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"xR", " ", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"#1", "\[Equal]", 
                    RowBox[{"locs", "\[LeftDoubleBracket]", 
                    RowBox[{"tourAns", "\[LeftDoubleBracket]", 
                    RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], 
                    "\[RightDoubleBracket]"}]}], ",", 
                    RowBox[{".02", " ", "1.5"}], ",", ".02"}], "]"}]}]}], 
                    "]"}]}], "}"}], "&"}], ")"}], "/@", "locs"}]}], "}"}], 
             "]"}], ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"Sequence", "@@", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", "gropts"}], "]"}]}], ",", 
            RowBox[{"Background", "\[Rule]", "Black"}], ",", 
            RowBox[{"PlotRange", "\[Rule]", "pr"}], ",", 
            RowBox[{"ImageSize", "\[Rule]", "500"}], ",", 
            RowBox[{"PlotRangePadding", "\[Rule]", 
             RowBox[{"Scaled", "[", ".05", "]"}]}], ",", 
            RowBox[{"Frame", "\[Rule]", "True"}], ",", 
            RowBox[{"FrameTicks", "\[Rule]", "False"}]}], "]"}]}]}], "]"}]}], 
      ";", 
      RowBox[{
       RowBox[{"options", "[", "RoutingProblemTourImage", "]"}], "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"ArrowPullback", "\[Rule]", "Automatic"}], ",", 
         RowBox[{"EdgeThickness", "\[Rule]", ".008"}], ",", 
         RowBox[{"ShowTour", "\[Rule]", "True"}]}], "}"}]}], ";", 
      RowBox[{
       RowBox[{"RoutingProblemTourImage", "[", 
        RowBox[{"jj_", ",", "tour_", ",", "opts___"}], "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "pr", ",", "G1", ",", "n", ",", "edges", ",", "locs", ",", "g2", 
           ",", "tourAns", ",", "tourbadEdges", ",", "tourbad", ",", 
           "tourgood", ",", "G", ",", "th", ",", "pull", ",", "show", ",", 
           "xR", ",", "cy", ",", "cyEdges", ",", "cyEdgesSorted", ",", 
           "cyEdgesIndexed", ",", "\[Rho]"}], "}"}], ",", 
         RowBox[{
          RowBox[{"G", "=", 
           RowBox[{
           "graphs", "\[LeftDoubleBracket]", "jj", 
            "\[RightDoubleBracket]"}]}], ";", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"th", ",", "pull", ",", "show"}], "}"}], "=", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "EdgeThickness", ",", "ArrowPullback", ",", "ShowTour"}], "}"}],
              "/.", "\[VeryThinSpace]", 
             RowBox[{"{", "opts", "}"}]}], "/.", "\[VeryThinSpace]", 
            RowBox[{"options", "[", "RoutingProblemTourImage", "]"}]}]}], ";", 
          RowBox[{"pull", "=", 
           RowBox[{"pull", "/.", "\[VeryThinSpace]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Automatic", "\[Rule]", "0.0002"}], ",", 
              RowBox[{"None", "\[Rule]", "0"}]}], "}"}]}]}], ";", 
          RowBox[{"n", "=", 
           RowBox[{"VertexCount", "[", "G", "]"}]}], ";", 
          RowBox[{"edges", "=", 
           RowBox[{"EdgeList", "[", "G", "]"}]}], ";", 
          RowBox[{"locs", "=", 
           RowBox[{
           "locData", "\[LeftDoubleBracket]", "jj", 
            "\[RightDoubleBracket]"}]}], ";", 
          RowBox[{"pr", "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Min", "[", 
                RowBox[{"First", "/@", "locs"}], "]"}], ",", 
               RowBox[{"Max", "[", 
                RowBox[{"First", "/@", "locs"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Min", "[", 
                RowBox[{"Last", "/@", "locs"}], "]"}], ",", 
               RowBox[{"Max", "[", 
                RowBox[{"Last", "/@", "locs"}], "]"}]}], "}"}]}], "}"}]}], 
          ";", 
          RowBox[{"xR", "=", 
           RowBox[{
            RowBox[{"pr", "\[LeftDoubleBracket]", 
             RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], "-", 
            RowBox[{"pr", "\[LeftDoubleBracket]", 
             RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}]}]}], ";", 
          RowBox[{"cy", "=", 
           RowBox[{"Extend", "[", "tour", "]"}]}], ";", 
          RowBox[{"cyEdges", "=", 
           RowBox[{"Partition", "[", 
            RowBox[{"cy", ",", "2", ",", "1"}], "]"}]}], ";", 
          RowBox[{"cyEdgesSorted", "=", 
           RowBox[{"Sort", "/@", "cyEdges"}]}], ";", 
          RowBox[{"cyEdgesIndexed", "=", 
           RowBox[{"MapIndexed", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Rule", "@@", "#1"}], ",", 
                RowBox[{
                "#2", "\[LeftDoubleBracket]", "1", 
                 "\[RightDoubleBracket]"}]}], "}"}], "&"}], ",", "cyEdges"}], 
            "]"}]}], ";", 
          RowBox[{"Show", "[", 
           RowBox[{
            RowBox[{"GraphPlot", "[", 
             RowBox[{"G", ",", 
              RowBox[{"EdgeRenderingFunction", "\[Rule]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Thickness", "[", 
                    RowBox[{"0.025", " ", "1.2"}], "]"}], ",", 
                   RowBox[{"CapForm", "[", "\"\<Round\>\"", "]"}], ",", 
                   RowBox[{"GrayLevel", "[", "1", "]"}], ",", 
                   RowBox[{"Line", "[", "#1", "]"}]}], "}"}], "&"}], ")"}]}], 
              ",", 
              RowBox[{"VertexRenderingFunction", "\[Rule]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"{", "}"}], "&"}], ")"}]}]}], "]"}], ",", 
            RowBox[{"If", "[", 
             RowBox[{"show", ",", 
              RowBox[{"GraphPlot", "[", 
               RowBox[{"cyEdgesIndexed", ",", 
                RowBox[{"EdgeRenderingFunction", "\[Rule]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"i", "=", "#3"}], ";", 
                    RowBox[{"\[Rho]", "=", 
                    FractionBox["i", 
                    RowBox[{"Length", "[", "cy", "]"}]]}], ";", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "th", "]"}], ",", 
                    RowBox[{"Arrowheads", "[", 
                    RowBox[{"4", " ", "th"}], "]"}], ",", 
                    RowBox[{"Hue", "[", 
                    RowBox[{
                    RowBox[{"1", "-", 
                    FractionBox["\[Rho]", "2"]}], ",", ".7", ",", "1"}], 
                    "]"}], ",", 
                    RowBox[{"Arrow", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{
                    RowBox[{"Norm", "[", 
                    RowBox[{
                    RowBox[{
                    "#1", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "-", 
                    RowBox[{"#1", "\[LeftDoubleBracket]", 
                    RowBox[{"-", "1"}], "\[RightDoubleBracket]"}]}], "]"}], 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"pull", " ", "0"}], "5"], ",", "pull"}], 
                    "}"}]}]}], "]"}]}], "}"}]}], ")"}], "&"}], ")"}]}], ",", 
                RowBox[{"VertexCoordinateRules", "\[Rule]", 
                 RowBox[{"Thread", "[", 
                  RowBox[{
                   RowBox[{"Range", "[", "n", "]"}], "\[Rule]", "locs"}], 
                  "]"}]}]}], "]"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Graphics", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Thickness", "[", ".01", "]"}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"#1", "\[Equal]", 
                    RowBox[{"locs", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "cy", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "\[RightDoubleBracket]"}]}], 
                    ",", 
                    RowBox[{"GrayLevel", "[", ".85", "]"}], ",", 
                    RowBox[{"Lighter", "[", "Orange", "]"}]}], "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", ".002", "]"}], ",", "Black"}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"Disk", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"xR", " ", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"#1", "\[Equal]", 
                    RowBox[{"locs", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "cy", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "\[RightDoubleBracket]"}]}], 
                    ",", 
                    RowBox[{".02", " ", "1.5"}], ",", ".02"}], "]"}]}]}], 
                    "]"}]}], "}"}], "&"}], ")"}], "/@", "locs"}]}], "}"}], 
             "]"}], ",", 
            RowBox[{"Sequence", "@@", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", "gropts"}], "]"}]}], ",", 
            RowBox[{"Background", "\[Rule]", "Black"}], ",", 
            RowBox[{"PlotRange", "\[Rule]", "pr"}], ",", 
            RowBox[{"ImageSize", "\[Rule]", "500"}], ",", 
            RowBox[{"PlotRangePadding", "\[Rule]", 
             RowBox[{"Scaled", "[", ".05", "]"}]}], ",", 
            RowBox[{"Frame", "\[Rule]", "True"}], ",", 
            RowBox[{"FrameTicks", "\[Rule]", "False"}]}], "]"}]}]}], "]"}]}], 
      ";", 
      RowBox[{"plottermatdata", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"2", "\[UndirectedEdge]", "4"}], ",", 
           RowBox[{"3", "\[UndirectedEdge]", "5"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"2", "\[UndirectedEdge]", "3"}], ",", 
           RowBox[{"5", "\[UndirectedEdge]", "6"}], ",", 
           RowBox[{"7", "\[UndirectedEdge]", "10"}], ",", 
           RowBox[{"11", "\[UndirectedEdge]", "22"}], ",", 
           RowBox[{"13", "\[UndirectedEdge]", "18"}], ",", 
           RowBox[{"14", "\[UndirectedEdge]", "19"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"5", "\[UndirectedEdge]", "7"}], ",", 
           RowBox[{"6", "\[UndirectedEdge]", "8"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"2", "\[UndirectedEdge]", "4"}], ",", 
           RowBox[{"5", "\[UndirectedEdge]", "6"}], ",", 
           RowBox[{"8", "\[UndirectedEdge]", "10"}], ",", 
           RowBox[{"11", "\[UndirectedEdge]", "15"}], ",", 
           RowBox[{"12", "\[UndirectedEdge]", "20"}], ",", 
           RowBox[{"13", "\[UndirectedEdge]", "17"}]}], "}"}]}], "}"}]}], ";", 
      RowBox[{"cppmatdata", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"2", "\[UndirectedEdge]", "5"}], ",", 
           RowBox[{"3", "\[UndirectedEdge]", "4"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"2", "\[UndirectedEdge]", "5"}], ",", 
           RowBox[{"3", "\[UndirectedEdge]", "13"}], ",", 
           RowBox[{"6", "\[UndirectedEdge]", "7"}], ",", 
           RowBox[{"10", "\[UndirectedEdge]", "14"}], ",", 
           RowBox[{"11", "\[UndirectedEdge]", "18"}], ",", 
           RowBox[{"19", "\[UndirectedEdge]", "22"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"5", "\[UndirectedEdge]", "7"}], ",", 
           RowBox[{"6", "\[UndirectedEdge]", "8"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"2", "\[UndirectedEdge]", "11"}], ",", 
           RowBox[{"4", "\[UndirectedEdge]", "15"}], ",", 
           RowBox[{"5", "\[UndirectedEdge]", "6"}], ",", 
           RowBox[{"8", "\[UndirectedEdge]", "13"}], ",", 
           RowBox[{"10", "\[UndirectedEdge]", "17"}], ",", 
           RowBox[{"12", "\[UndirectedEdge]", "20"}]}], "}"}]}], "}"}]}], ";", 
      RowBox[{"tourdata", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "4", ",", "3", ",", "5", ",", "2", ",", "4"}], 
            "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "4", ",", "2", ",", "3", ",", "5"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "1", ",", "5", ",", "3", ",", "5", ",", "2", ",", "4", ",", "3", 
             ",", "2", ",", "4"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "1", ",", "5", ",", "2", ",", "5", ",", "3", ",", "4", ",", "3", 
             ",", "2", ",", "4"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "1", ",", "2", ",", "1", ",", "6", ",", "5", ",", "6", ",", "7", 
             ",", "11", ",", "16", ",", "10", ",", "15", ",", "20", ",", "19",
              ",", "20", ",", "15", ",", "10", ",", "9", ",", "14", ",", "9", 
             ",", "10", ",", "16", ",", "21", ",", "22", ",", "23", ",", "17",
              ",", "18", ",", "17", ",", "12", ",", "7", ",", "3", ",", "4", 
             ",", "8", ",", "13", ",", "8", ",", "7", ",", "6"}], "}"}], ",", 
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "1", ",", "6", ",", "5", ",", "6", ",", "7", ",", "10", ",", "15",
              ",", "20", ",", "19", ",", "14", ",", "9", ",", "10", ",", "16",
              ",", "21", ",", "22", ",", "11", ",", "16", ",", "22", ",", 
             "23", ",", "17", ",", "12", ",", "7", ",", "11", ",", "17", ",", 
             "18", ",", "13", ",", "8", ",", "7", ",", "3", ",", "8", ",", 
             "4", ",", "3", ",", "2"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "1", ",", "6", ",", "7", ",", "12", ",", "17", ",", "18", ",", 
             "17", ",", "11", ",", "17", ",", "23", ",", "22", ",", "21", ",",
              "16", ",", "22", ",", "16", ",", "10", ",", "15", ",", "20", 
             ",", "19", ",", "20", ",", "15", ",", "10", ",", "9", ",", "14", 
             ",", "9", ",", "10", ",", "16", ",", "11", ",", "7", ",", "8", 
             ",", "13", ",", "8", ",", "3", ",", "8", ",", "4", ",", "3", ",",
              "7", ",", "6", ",", "5", ",", "6", ",", "1", ",", "2"}], 
            "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "1", ",", "3", ",", "9", ",", "7", ",", "5", ",", "8", ",", "2", 
             ",", "8", ",", "6", ",", "4"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "1", ",", "2", ",", "4", ",", "6", ",", "8", ",", "5", ",", "7", 
             ",", "9", ",", "3"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "1", ",", "9", ",", "7", ",", "5", ",", "9", ",", "8", ",", "6", 
             ",", "8", ",", "5", ",", "7", ",", "4", ",", "6", ",", "5", ",", 
             "4", ",", "8", ",", "2", ",", "9", ",", "3", ",", "1", ",", "4", 
             ",", "2"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "1", ",", "9", ",", "7", ",", "5", ",", "9", ",", "8", ",", "6", 
             ",", "8", ",", "5", ",", "7", ",", "4", ",", "6", ",", "5", ",", 
             "4", ",", "8", ",", "2", ",", "9", ",", "3", ",", "1", ",", "4", 
             ",", "2"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "1", ",", "16", ",", "8", ",", "9", ",", "18", ",", "10", ",", 
             "5", ",", "12", ",", "20", ",", "14", ",", "15", ",", "11", ",", 
             "2", ",", "4", ",", "2", ",", "19", ",", "6", ",", "3", ",", "7",
              ",", "13", ",", "17"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "1", ",", "3", ",", "6", ",", "5", ",", "16", ",", "8", ",", "9", 
             ",", "10", ",", "18", ",", "12", ",", "20", ",", "14", ",", "15",
              ",", "11", ",", "19", ",", "2", ",", "4", ",", "7", ",", "13", 
             ",", "17"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "1", ",", "17", ",", "13", ",", "17", ",", "16", ",", "9", ",", 
             "18", ",", "14", ",", "20", ",", "12", ",", "20", ",", "6", ",", 
             "5", ",", "20", ",", "15", ",", "11", ",", "19", ",", "15", ",", 
             "14", ",", "12", ",", "18", ",", "10", ",", "8", ",", "16", ",", 
             "13", ",", "7", ",", "19", ",", "6", ",", "16", ",", "10", ",", 
             "12", ",", "5", ",", "16", ",", "1", ",", "13", ",", "8", ",", 
             "9", ",", "10", ",", "5", ",", "6", ",", "15", ",", "4", ",", 
             "2", ",", "15", ",", "11", ",", "2", ",", "19", ",", "3", ",", 
             "7", ",", "4", ",", "2", ",", "7", ",", "1", ",", "6", ",", 
             "3"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "1", ",", "17", ",", "16", ",", "13", ",", "17", ",", "16", ",", 
             "10", ",", "18", ",", "14", ",", "20", ",", "12", ",", "20", ",",
              "6", ",", "5", ",", "20", ",", "15", ",", "19", ",", "7", ",", 
             "13", ",", "8", ",", "16", ",", "9", ",", "18", ",", "12", ",", 
             "14", ",", "15", ",", "4", ",", "15", ",", "6", ",", "16", ",", 
             "10", ",", "12", ",", "5", ",", "16", ",", "1", ",", "13", ",", 
             "8", ",", "9", ",", "10", ",", "5", ",", "6", ",", "19", ",", 
             "11", ",", "2", ",", "15", ",", "11", ",", "2", ",", "19", ",", 
             "3", ",", "7", ",", "4", ",", "2", ",", "7", ",", "1", ",", "6", 
             ",", "3"}], "}"}]}], "}"}]}], "}"}]}], ";", 
      RowBox[{"locData", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0.", ",", ".5"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.15", ",", "0.18"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.", ",", "0."}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.", ",", "0.3"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.4", ",", "0."}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1.", ",", "1."}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1.", ",", "2."}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1.", ",", "3."}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1.", ",", "4."}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"2.", ",", "1."}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"2.", ",", "2."}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"2.", ",", "3."}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"2.", ",", "4."}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"3.", ",", "1."}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"3.", ",", "2."}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"3.", ",", "3."}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"3.", ",", "4."}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"3.", ",", "5."}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"4.", ",", "1."}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"4.", ",", "2."}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"4.", ",", "3."}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"4.", ",", "4."}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"4.", ",", "5."}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"5.", ",", "1."}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"5.", ",", "2."}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"5.", ",", "3."}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"5.", ",", "4."}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"5.", ",", "5."}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0.309", ",", "0.951"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.18", ",", "0.033"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "0.809"}], ",", "0.588"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1.", ",", "0."}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.241", ",", 
             RowBox[{"-", "0.396"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.487", ",", 
             RowBox[{"-", "0.209"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.309", ",", 
             RowBox[{"-", "0.951"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.22", ",", 
             RowBox[{"-", "0.232"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "0.809"}], ",", 
             RowBox[{"-", "0.588"}]}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0.188", ",", 
             RowBox[{"-", "0.464"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.734", ",", "0.055"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.43", ",", 
             RowBox[{"-", "0.274"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1.", ",", "0."}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "0.112"}], ",", "0.208"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.241", ",", "0.059"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.707", ",", 
             RowBox[{"-", "0.707"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "0.707"}], ",", 
             RowBox[{"-", "0.707"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1."}], ",", "0."}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "0.456"}], ",", "0.233"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.674", ",", "0.26"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "0.231"}], ",", "0.53"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.", ",", 
             RowBox[{"-", "1."}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.", ",", "1."}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.707", ",", "0.707"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "0.233"}], ",", 
             RowBox[{"-", "0.282"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "0.015"}], ",", 
             RowBox[{"-", "0.582"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "0.707"}], ",", "0.707"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.582", ",", "0.017"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.121", ",", "0.501"}], "}"}]}], "}"}]}], "}"}]}], ";"}],
      ")"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.546802396222691*^9, 3.546802411627924*^9}, {
   3.5468024750591516`*^9, 3.546802522438694*^9}, {3.546802589905362*^9, 
   3.546802971219173*^9}, {3.546803017730418*^9, 3.546803020110956*^9}, {
   3.546866880117601*^9, 3.546866901710808*^9}, {3.546867027249537*^9, 
   3.546867029702166*^9}, {3.546868793002264*^9, 3.546868793723495*^9}, {
   3.546869040191132*^9, 3.5468690667111797`*^9}, {3.546949849962488*^9, 
   3.546949994494322*^9}, {3.546950025989386*^9, 3.5469500600610733`*^9}, {
   3.546950391917671*^9, 3.546950491925881*^9}, {3.546950713144723*^9, 
   3.54695074847091*^9}, {3.547655544549312*^9, 3.547655563676773*^9}, {
   3.547655689847624*^9, 3.547655692941433*^9}, {3.5476557399123774`*^9, 
   3.5476557652150087`*^9}, {3.547655808481625*^9, 3.547655885327128*^9}, {
   3.5476559197370358`*^9, 3.547656074144875*^9}, {3.54850599181382*^9, 
   3.548506101900999*^9}, {3.548519930114884*^9, 3.5485199747361298`*^9}, {
   3.548524524543357*^9, 3.548524546908948*^9}, {3.5486871024924192`*^9, 
   3.548687130523018*^9}, {3.548687301542741*^9, 3.548687311746249*^9}, 
   3.548687368206798*^9, {3.548689147211886*^9, 3.548689155364863*^9}, {
   3.548771179503118*^9, 3.548771205304626*^9}, {3.548771356865377*^9, 
   3.548771389394486*^9}, {3.548771464808689*^9, 3.548771464944207*^9}, {
   3.548771682711379*^9, 3.548771686143159*^9}, {3.548772140335391*^9, 
   3.548772299845398*^9}, {3.5487723562291193`*^9, 3.54877238121202*^9}, {
   3.5487724130587893`*^9, 3.548772586243424*^9}, {3.548772616611163*^9, 
   3.548772618057033*^9}, {3.548800623949029*^9, 3.548800673995409*^9}, {
   3.54880080463927*^9, 3.548800813010809*^9}, {3.5488008709252787`*^9, 
   3.548800876826661*^9}, {3.548800976610633*^9, 3.548800979648622*^9}, {
   3.548802420855*^9, 3.54880242131087*^9}, {3.548802523040263*^9, 
   3.548802563759482*^9}, {3.5488026571601*^9, 3.548802693247526*^9}, {
   3.548802736321247*^9, 3.548802739810939*^9}, {3.5488653392541513`*^9, 
   3.548865339702914*^9}, {3.5490154218051558`*^9, 3.5490154400269775`*^9}, 
   3.5490154806700416`*^9, {3.5490156203740106`*^9, 3.549015873158286*^9}, {
   3.5490159243124013`*^9, 3.5490159407450447`*^9}, {3.5490160461845875`*^9, 
   3.5490162271366806`*^9}, {3.549016257213688*^9, 3.549016389637929*^9}, {
   3.54901645995296*^9, 3.5490164602909937`*^9}, 3.549118410115035*^9, {
   3.5491289671428127`*^9, 3.5491289697635927`*^9}, {3.549129058349679*^9, 
   3.549129062024272*^9}, {3.5492301563049717`*^9, 3.5492301676878347`*^9}, {
   3.5493876062137423`*^9, 3.5493876560587263`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`graphtype$$ = 
    "small", $CellContext`problemtype$$ = 4, $CellContext`showtour$$ = False, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`graphtype$$], "small", "graph type"}, {
      "small", "graph based on grid", "small planar graph", 
       "large planar graph"}}, {{
       Hold[$CellContext`showtour$$], False, "show tour"}, {False, True}}, {
      Hold[
       Row[{
         Manipulate`Place[1], 
         Spacer[20], 
         Manipulate`Place[2]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`problemtype$$], 2, "problem type"}, {
      1 -> "vehicle routing problem", 2 -> 
       "traveling salesman problem on graph", 3 -> "plotter problem", 4 -> 
       "Chinese postman problem"}}}, Typeset`size$$ = {400., {217., 223.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`graphtype$187342$$ = 
    0, $CellContext`showtour$187343$$ = 
    False, $CellContext`problemtype$187344$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`graphtype$$ = 
        "small", $CellContext`problemtype$$ = 2, $CellContext`showtour$$ = 
        False}, "ControllerVariables" :> {
        Hold[$CellContext`graphtype$$, $CellContext`graphtype$187342$$, 0], 
        Hold[$CellContext`showtour$$, $CellContext`showtour$187343$$, False], 
        Hold[$CellContext`problemtype$$, $CellContext`problemtype$187344$$, 
         False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`pull$, $CellContext`is$, $CellContext`thicks$, \
$CellContext`jj$, $CellContext`G$, $CellContext`tour$, $CellContext`mat$, \
$CellContext`locs$}, 
        SeedRandom[1]; $CellContext`pull$ = 0.1; $CellContext`is$ = 
         330; $CellContext`thicks$ = {0.014, 0.014, 0.012, 
          0.01}; $CellContext`jj$ = ReplaceAll[$CellContext`graphtype$$, 
           
           Thread[{"small", "graph based on grid", "small planar graph", 
              "large planar graph"} -> Range[4]]]; $CellContext`G$ = 
         Part[$CellContext`graphs, $CellContext`jj$]; $CellContext`locs$ = 
         Part[$CellContext`locData, $CellContext`jj$]; $CellContext`tour$ = 
         Part[$CellContext`tourdata, $CellContext`jj$, \
$CellContext`problemtype$$]; 
        If[$CellContext`problemtype$$ == 4, $CellContext`mat$ = 
          Part[$CellContext`cppmatdata, $CellContext`jj$]]; Pane[
          Which[$CellContext`problemtype$$ == 1, 
           Column[{
             Style[
             " Shortest cycle through all vertices, staying on graph edges, \
with vertex and \n edge repetition allowed", FontFamily -> "Times"], 
             $CellContext`RoutingProblemTourImage[$CellContext`jj$, \
$CellContext`tour$, EdgeThickness -> 
              Part[$CellContext`thicks$, $CellContext`jj$], \
$CellContext`ShowTour -> $CellContext`showtour$$, 
              ImageSize -> $CellContext`is$, AspectRatio -> 
              Automatic, $CellContext`ArrowPullback -> 
              0.1]}], $CellContext`problemtype$$ == 2, 
           Column[{
             Style[
             " Shortest Hamiltonian cycle: a cycle through all vertices, \
staying on graph edges\n and visiting each vertex once", FontFamily -> 
              "Times"], 
             If[$CellContext`graphtype$$ === "graph based on grid", 
              Column[{
                Style[
                " There is no Hamiltonian cycle for this graph", FontFamily -> 
                 "Times", Red], 
                
                GraphPlot[$CellContext`G$, ImageSize -> $CellContext`is$, 
                 EdgeRenderingFunction -> ({
                   Thickness[0.025 1.2], 
                   CapForm["Round"], 
                   GrayLevel[1], 
                   Line[#]}& ), Background -> Black, PlotRangePadding -> 
                 Scaled[0.05], PlotRange -> {{1, 5}, {1, 5}}, 
                 VertexRenderingFunction -> ({
                   EdgeForm[
                    Directive[
                    Thickness[0.003], Black]], 
                   FaceForm[
                    RGBColor[1, 0.8, 0.5]], 
                   Disk[#, 0.09]}& )]}], 
              $CellContext`ShortestHamiltonianCycleImage[$CellContext`jj$, \
$CellContext`tour$, 
               ImageSize -> $CellContext`is$, $CellContext`ShowTour -> \
$CellContext`showtour$$, AspectRatio -> Automatic, $CellContext`ArrowPullback -> 
               0.1, EdgeThickness -> 
               Part[$CellContext`thicks$, $CellContext`jj$]]]}], \
$CellContext`problemtype$$ == 3, 
           Column[{
             Style[
             " Shortest cycle through all edges, with travel off the edges \
allowed\n and vertex repetition allowed; pen\[Hyphen]up segments are dashed", 
              FontFamily -> "Times"], 
             $CellContext`PlotterProblemImage[$CellContext`jj$, \
$CellContext`tour$, 
              Part[$CellContext`plottermatdata, $CellContext`jj$], 
              EdgeThickness -> Part[$CellContext`thicks$, $CellContext`jj$], 
              ImageSize -> $CellContext`is$, AspectRatio -> 
              Automatic, $CellContext`ShowTour -> $CellContext`showtour$$, \
$CellContext`ArrowPullback -> $CellContext`pull$]}], \
$CellContext`problemtype$$ == 4, 
           Column[{
             Style[
             " Shortest cycle through all edges, staying on graph edges, with \
vertex and\n edge repetition allowed; like a mailman using streets", 
              FontFamily -> "Times"], 
             $CellContext`ChinesePostmanTourImage[$CellContext`jj$, \
$CellContext`tour$, $CellContext`mat$, ImageSize -> $CellContext`is$, 
              EdgeThickness -> Part[$CellContext`thicks$, $CellContext`jj$], 
              AspectRatio -> 
              Automatic, $CellContext`ShowTour -> $CellContext`showtour$$, \
$CellContext`ArrowPullback -> $CellContext`pull$]}]], 
          ImageSize -> {400, 440}]], 
      "Specifications" :> {{{$CellContext`graphtype$$, "small", 
          "graph type"}, {
         "small", "graph based on grid", "small planar graph", 
          "large planar graph"}, ControlPlacement -> 
         1}, {{$CellContext`showtour$$, False, "show tour"}, {False, True}, 
         ControlPlacement -> 2}, 
        Row[{
          Manipulate`Place[1], 
          Spacer[20], 
          Manipulate`Place[2]}], {{$CellContext`problemtype$$, 2, 
          "problem type"}, {
         1 -> "vehicle routing problem", 2 -> 
          "traveling salesman problem on graph", 3 -> "plotter problem", 4 -> 
          "Chinese postman problem"}}}, "Options" :> {TrackedSymbols -> True},
       "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{664., {274., 279.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>(($CellContext`gropts = {
        AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> False, 
         AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, 
         Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, 
         ColorOutput -> Automatic, ContentSelectable -> Automatic, 
         CoordinatesToolOptions -> Automatic, 
         DisplayFunction :> $DisplayFunction, Epilog -> {}, FormatType :> 
         TraditionalForm, Frame -> False, FrameLabel -> None, 
         FrameStyle -> {}, FrameTicks -> Automatic, FrameTicksStyle -> {}, 
         GridLines -> None, GridLinesStyle -> {}, ImageMargins -> 0., 
         ImagePadding -> All, ImageSize -> Automatic, ImageSizeRaw -> 
         Automatic, LabelStyle -> {}, Method -> Automatic, PlotLabel -> None, 
         PlotRange -> All, PlotRangeClipping -> False, PlotRangePadding -> 
         Automatic, PlotRegion -> Automatic, PreserveImageOptions -> 
         Automatic, Prolog -> {}, RotateLabel -> True, Ticks -> Automatic, 
         TicksStyle -> {}}; $CellContext`graphs = 
       Apply[Graph, {{{1, 2, 3, 4, 5}, {
            UndirectedEdge[1, 4], 
            UndirectedEdge[1, 5], 
            UndirectedEdge[2, 3], 
            UndirectedEdge[2, 4], 
            UndirectedEdge[2, 5], 
            UndirectedEdge[3, 4], 
            UndirectedEdge[3, 5]}, 
           VertexCoordinates -> {{0., 0.5}, {0.15, 0.18}, {0., 0.}, {0., 
            0.3}, {0.4, 0.}}}, {{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 
           14, 15, 16, 17, 18, 19, 20, 21, 22, 23}, {
            UndirectedEdge[1, 2], 
            UndirectedEdge[1, 6], 
            UndirectedEdge[3, 4], 
            UndirectedEdge[3, 7], 
            UndirectedEdge[3, 8], 
            UndirectedEdge[4, 8], 
            UndirectedEdge[5, 6], 
            UndirectedEdge[6, 7], 
            UndirectedEdge[7, 8], 
            UndirectedEdge[7, 11], 
            UndirectedEdge[7, 12], 
            UndirectedEdge[8, 13], 
            UndirectedEdge[9, 10], 
            UndirectedEdge[9, 14], 
            UndirectedEdge[10, 15], 
            UndirectedEdge[10, 16], 
            UndirectedEdge[11, 16], 
            UndirectedEdge[11, 17], 
            UndirectedEdge[12, 17], 
            UndirectedEdge[15, 20], 
            UndirectedEdge[16, 21], 
            UndirectedEdge[16, 22], 
            UndirectedEdge[17, 18], 
            UndirectedEdge[17, 23], 
            UndirectedEdge[19, 20], 
            UndirectedEdge[21, 22], 
            UndirectedEdge[22, 23]}, VertexCoordinates -> CompressedData["
1:eJxTTMoPSmViYGAQB2IQDQEf7LHTDA6ofA40voADdnUMDthpDjS+AJo4uj3o
+tBpdP0iaOK43ImuTwAHLYJGw8yD8RnQ5HG5A2EOAGJbFzw=
            "]}, {{1, 2, 3, 4, 5, 6, 7, 8, 9}, {
            UndirectedEdge[1, 2], 
            UndirectedEdge[1, 3], 
            UndirectedEdge[1, 4], 
            UndirectedEdge[1, 9], 
            UndirectedEdge[2, 4], 
            UndirectedEdge[2, 8], 
            UndirectedEdge[2, 9], 
            UndirectedEdge[3, 9], 
            UndirectedEdge[4, 5], 
            UndirectedEdge[4, 6], 
            UndirectedEdge[4, 7], 
            UndirectedEdge[4, 8], 
            UndirectedEdge[5, 6], 
            UndirectedEdge[5, 7], 
            UndirectedEdge[5, 8], 
            UndirectedEdge[5, 9], 
            UndirectedEdge[6, 8], 
            UndirectedEdge[7, 9], 
            UndirectedEdge[8, 9]}, 
           VertexCoordinates -> {{0.309, 0.951}, {0.18, 0.033}, {-0.809, 
            0.588}, {1., 0.}, {0.241, -0.396}, {0.487, -0.209}, {
            0.309, -0.951}, {0.22, -0.232}, {-0.809, -0.588}}}, {{1, 2, 3, 4, 
           5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {
            UndirectedEdge[1, 3], 
            UndirectedEdge[1, 6], 
            UndirectedEdge[1, 7], 
            UndirectedEdge[1, 13], 
            UndirectedEdge[1, 16], 
            UndirectedEdge[1, 17], 
            UndirectedEdge[2, 4], 
            UndirectedEdge[2, 7], 
            UndirectedEdge[2, 11], 
            UndirectedEdge[2, 15], 
            UndirectedEdge[2, 19], 
            UndirectedEdge[3, 6], 
            UndirectedEdge[3, 7], 
            UndirectedEdge[3, 19], 
            UndirectedEdge[4, 7], 
            UndirectedEdge[4, 15], 
            UndirectedEdge[5, 6], 
            UndirectedEdge[5, 10], 
            UndirectedEdge[5, 12], 
            UndirectedEdge[5, 16], 
            UndirectedEdge[5, 20], 
            UndirectedEdge[6, 15], 
            UndirectedEdge[6, 16], 
            UndirectedEdge[6, 19], 
            UndirectedEdge[6, 20], 
            UndirectedEdge[7, 13], 
            UndirectedEdge[7, 19], 
            UndirectedEdge[8, 9], 
            UndirectedEdge[8, 13], 
            UndirectedEdge[8, 16], 
            UndirectedEdge[9, 10], 
            UndirectedEdge[9, 16], 
            UndirectedEdge[9, 18], 
            UndirectedEdge[10, 12], 
            UndirectedEdge[10, 16], 
            UndirectedEdge[10, 18], 
            UndirectedEdge[11, 15], 
            UndirectedEdge[11, 19], 
            UndirectedEdge[12, 14], 
            UndirectedEdge[12, 18], 
            UndirectedEdge[12, 20], 
            UndirectedEdge[13, 16], 
            UndirectedEdge[13, 17], 
            UndirectedEdge[14, 15], 
            UndirectedEdge[14, 18], 
            UndirectedEdge[14, 20], 
            UndirectedEdge[15, 19], 
            UndirectedEdge[15, 20], 
            UndirectedEdge[16, 17]}, VertexCoordinates -> CompressedData["
1:eJxTTMoPSmViYGAQAWIQverjJd8kgRP2kixhfLqb7u7fUJQx8W3Nc3vNmP5D
XzXW2Le+Dtwh13rb/sPyY97mnRf3M4DBB3sGKKh8qWbIsWbPfsstJ8r2zT9l
z8Ok3S5285w9yBR703X2EPFnMHo/Og01bz/MvJNAUSn9u/tzn/9e+fHSWfuj
CiAXPbVfUmDLdX3xBSj/7P5vGiAHPoC7A90cmDvR7LeHmrvf3jRulyfPpf1A
zwF92Ad1zyN090H1PbKfcwRssX3C0wtKt3/us79aAfL4A3sAlQaXOw==
            "]}}, {1}]; $CellContext`Extend[
         Pattern[$CellContext`a, 
          Blank[]]] := Append[$CellContext`a, 
         Part[$CellContext`a, 1]]; $CellContext`ColorsForColoring = 
       Join[{Red, Green, Blue, Cyan, Magenta, Yellow, Orange, Purple, Brown, 
          Black}, 
         Table[
          ColorData[
          "Legacy", $CellContext`i], {$CellContext`i, 
           40}]]; $CellContext`options[$CellContext`ChinesePostmanTourImage] = \
{$CellContext`ArrowPullback -> Automatic, EdgeThickness -> 
         0.008, $CellContext`ShowTour -> 
         True}; $CellContext`ChinesePostmanTourImage[
         Pattern[$CellContext`jj, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`mat, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`G, $CellContext`nv, $CellContext`pull, \
$CellContext`th, $CellContext`show, $CellContext`cy, $CellContext`n, \
$CellContext`locs, $CellContext`pr, $CellContext`xR, $CellContext`cyEdges, \
$CellContext`cyEdgesSorted, $CellContext`cyEdgesIndexed, \
$CellContext`matchedverts, $CellContext`odds, $CellContext`v, \
$CellContext`i}, $CellContext`G = 
          Part[$CellContext`graphs, $CellContext`jj]; $CellContext`nv = 
          VertexCount[$CellContext`G]; {$CellContext`th, $CellContext`pull, \
$CellContext`show} = ReplaceAll[
            
            ReplaceAll[{
             EdgeThickness, $CellContext`ArrowPullback, \
$CellContext`ShowTour}, {$CellContext`opts}], 
            $CellContext`options[$CellContext`ChinesePostmanTourImage]]; \
$CellContext`pull = 
          ReplaceAll[$CellContext`pull, {
            Automatic -> 0.05, None -> 
             0}]; $CellContext`cy = $CellContext`Extend[$CellContext`tour]; \
$CellContext`n = VertexCount[$CellContext`G]; $CellContext`locs = 
          Part[$CellContext`locData, $CellContext`jj]; $CellContext`pr = {{
             Min[
              Map[First, $CellContext`locs]], 
             Max[
              Map[First, $CellContext`locs]]}, {
             Min[
              Map[Last, $CellContext`locs]], 
             Max[
              Map[Last, $CellContext`locs]]}}; $CellContext`xR = 
          Part[$CellContext`pr, 1, 2] - 
           Part[$CellContext`pr, 1, 1]; $CellContext`cyEdges = 
          Partition[$CellContext`cy, 2, 1]; $CellContext`cyEdgesSorted = 
          Map[Sort, $CellContext`cyEdges]; $CellContext`cyEdgesIndexed = 
          MapIndexed[{
             Apply[Rule, #], 
             Part[#2, 1]}& , $CellContext`cyEdges]; $CellContext`matchedverts = 
          Apply[List, $CellContext`mat, {1}]; $CellContext`odds = {
            EdgeForm[
             Directive[
              Thickness[0.002], Black]], 
            MapIndexed[{
              Part[$CellContext`ColorsForColoring, 
               Part[#2, 1]], 
              Disk[
               Part[$CellContext`locs, 
                Part[#, 1]], $CellContext`xR 0.02], 
              Disk[
               Part[$CellContext`locs, 
                Part[#, 2]], $CellContext`xR 
               0.02]}& , $CellContext`matchedverts]}; Show[
           Graphics[
            Apply[Rectangle, 
             Transpose[$CellContext`pr]]], 
           GraphPlot[$CellContext`G, EdgeRenderingFunction -> ({
              Thickness[0.025 1.2], 
              CapForm["Round"], 
              GrayLevel[1], 
              Line[#]}& ), VertexRenderingFunction -> ({}& )], 
           If[$CellContext`show, 
            
            GraphPlot[$CellContext`cyEdgesIndexed, 
             EdgeRenderingFunction -> (($CellContext`i = #3; $CellContext`\
\[Rho] = $CellContext`i/Length[$CellContext`cy]; {
                Thickness[$CellContext`th], 
                Arrowheads[4 $CellContext`th], 
                Hue[1 - $CellContext`\[Rho]/2, 0.7, 1], 
                
                Arrow[#, 
                 Norm[Part[#, 1] - Part[#, -1]] {$CellContext`pull/
                   5, $CellContext`pull}]})& ), VertexCoordinateRules -> 
             Thread[Range[$CellContext`n] -> $CellContext`locs]], {}], 
           Graphics[{
             Thickness[0.01], 
             
             Map[{$CellContext`v = 
                Part[$CellContext`locs, #]; $CellContext`odds, 
               RGBColor[1, 0.8, 0.5], White, 
               EdgeForm[
                Directive[
                 Thickness[0.002], Black]], 
               
               Disk[$CellContext`v, $CellContext`xR 
                If[$CellContext`v == Part[$CellContext`locs, 
                    Part[$CellContext`cy, 1]], 0.02 1.5, 0.02]]}& , 
              Complement[
               Range[$CellContext`nv], 
               Flatten[$CellContext`matchedverts]]]}], 
           Apply[Sequence, 
            FilterRules[{$CellContext`opts}, $CellContext`gropts]], 
           Background -> Black, PlotRange -> $CellContext`pr, 
           ImageSize -> {500, 500}, PlotRangePadding -> Scaled[0.05], Frame -> 
           True, FrameTicks -> 
           False]]; $CellContext`options[$CellContext`PlotterProblemImage] = \
{$CellContext`ArrowPullback -> Automatic, EdgeThickness -> 
         0.008, $CellContext`ShowTour -> 
         True}; $CellContext`PlotterProblemImage[
         Pattern[$CellContext`jj, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`mat1, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`odds, $CellContext`locs, $CellContext`pr, \
$CellContext`GOdd, $CellContext`XXedges, $CellContext`len, $CellContext`mat, \
$CellContext`i, $CellContext`cy, $CellContext`edgesg, $CellContext`cyEdges, \
$CellContext`pathData, $CellContext`edge, $CellContext`newAdj, \
$CellContext`wts, $CellContext`reordermat, $CellContext`g, $CellContext`nv, \
$CellContext`th, $CellContext`pull, $CellContext`show, $CellContext`xR, \
$CellContext`matchedverts, $CellContext`cyEdgesSorted, $CellContext`dashed, \
$CellContext`v, $CellContext`\[Rho], $CellContext`cyEdgesIndexed}, \
$CellContext`g = Part[$CellContext`graphs, $CellContext`jj]; $CellContext`nv = 
          VertexCount[$CellContext`g]; {$CellContext`th, $CellContext`pull, \
$CellContext`show} = ReplaceAll[
            
            ReplaceAll[{
             EdgeThickness, $CellContext`ArrowPullback, \
$CellContext`ShowTour}, {$CellContext`opts}], 
            $CellContext`options[$CellContext`PlotterProblemImage]]; \
$CellContext`pull = 
          ReplaceAll[$CellContext`pull, {
            Automatic -> 0.05, None -> 0}]; $CellContext`odds = Flatten[
            Position[
             VertexDegree[$CellContext`g], 
             PatternTest[
              Pattern[$CellContext`x, 
               Blank[]], OddQ]]]; $CellContext`locs = 
          Part[$CellContext`locData, $CellContext`jj]; $CellContext`pr = {{
             Min[
              Map[First, $CellContext`locs]], 
             Max[
              Map[First, $CellContext`locs]]}, {
             Min[
              Map[Last, $CellContext`locs]], 
             Max[
              Map[Last, $CellContext`locs]]}}; $CellContext`xR = 
          Part[$CellContext`pr, 1, 2] - 
           Part[$CellContext`pr, 1, 
            1]; $CellContext`cy = $CellContext`Extend[$CellContext`tour]; \
$CellContext`mat = ReplaceAll[$CellContext`mat1, UndirectedEdge[
              Pattern[$CellContext`i, 
               Blank[]], 
              Pattern[$CellContext`j, 
               Blank[]]] :> If[Part[
                Position[$CellContext`cy, $CellContext`i], 1, 1] < Part[
                Position[$CellContext`cy, $CellContext`j], 1, 1], 
              UndirectedEdge[$CellContext`i, $CellContext`j], 
              
              UndirectedEdge[$CellContext`j, $CellContext`i]]]; \
$CellContext`matchedverts = 
          Apply[List, $CellContext`mat1, {1}]; $CellContext`odds = {
            EdgeForm[
             Directive[
              Thickness[0.002], Black]], 
            MapIndexed[{
              Part[$CellContext`ColorsForColoring, 
               Part[#2, 1]], 
              Disk[
               Part[$CellContext`locs, 
                Part[#, 1]], $CellContext`xR 0.02], 
              Disk[
               Part[$CellContext`locs, 
                Part[#, 2]], $CellContext`xR 
               0.02]}& , $CellContext`matchedverts]}; $CellContext`edgesg = 
          EdgeList[$CellContext`g]; $CellContext`cyEdges = 
          Partition[$CellContext`cy, 2, 1]; $CellContext`cyEdgesSorted = 
          Map[Sort, $CellContext`cyEdges]; $CellContext`cyEdgesIndexed = 
          MapIndexed[{
             Apply[Rule, #], 
             Part[#2, 1]}& , $CellContext`cyEdges]; $CellContext`pathData = 
          Table[
            Not[Position[
               Take[$CellContext`cyEdges, $CellContext`i - 1], 
               
               Part[$CellContext`cyEdges, $CellContext`i]] != {}], \
{$CellContext`i, 
             Length[$CellContext`cyEdges]}]; $CellContext`dashed = 
          Map[False& , $CellContext`cyEdgesIndexed]; Show[
           GraphPlot[$CellContext`g, EdgeRenderingFunction -> ({
              Thickness[0.025 1.2], 
              CapForm["Round"], 
              GrayLevel[1], 
              Line[#]}& ), VertexRenderingFunction -> ({}& )], 
           If[$CellContext`show, 
            
            GraphPlot[$CellContext`cyEdgesIndexed, 
             EdgeRenderingFunction -> (($CellContext`\[Rho] = #3/
                Length[$CellContext`cy]; {
                Thickness[$CellContext`th], 
                Arrowheads[4 $CellContext`th], 
                Hue[1 - $CellContext`\[Rho]/2, 0.7, 1], 
                If[
                 And[
                  MemberQ[$CellContext`mat, 
                   Apply[UndirectedEdge, #2]], 
                  Part[$CellContext`pathData, #3]], 
                 Dashing[{0.01, 0.01}]], 
                
                Arrow[#, 
                 Norm[Part[#, 1] - Part[#, -1]] {$CellContext`pull/
                   5, $CellContext`pull}]})& ), VertexCoordinateRules -> 
             Thread[Range[
                 VertexCount[$CellContext`g]] -> $CellContext`locs]], {}], 
           Graphics[{
             Thickness[0.01], 
             
             Map[{$CellContext`v = 
                Part[$CellContext`locs, #]; $CellContext`odds, 
               RGBColor[1, 0.8, 0.5], White, 
               EdgeForm[
                Directive[
                 Thickness[0.002], Black]], 
               
               Disk[$CellContext`v, $CellContext`xR 
                If[$CellContext`v == Part[$CellContext`locs, 
                    Part[$CellContext`cy, 1]], 0.02 1.5, 0.02]]}& , 
              Complement[
               Range[$CellContext`nv], 
               Flatten[$CellContext`matchedverts]]]}], 
           Apply[Sequence, 
            FilterRules[{$CellContext`opts}, $CellContext`gropts]], 
           PlotRange -> $CellContext`pr, Frame -> True, ImageSize -> 350, 
           Background -> GrayLevel[0.], PlotRangePadding -> 
           Scaled[0.05]]]; \
$CellContext`options[$CellContext`ShortestHamiltonianCycleImage] = \
{$CellContext`ArrowPullback -> Automatic, EdgeThickness -> 
         0.008, $CellContext`ShowTour -> 
         True}; $CellContext`ShortestHamiltonianCycleImage[
         Pattern[$CellContext`jj, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`tourAns, $CellContext`locs, $CellContext`pr, \
$CellContext`n, $CellContext`th, $CellContext`pull, $CellContext`G, \
$CellContext`cyEdgesIndexed, $CellContext`xR, $CellContext`i, $CellContext`\
\[Rho]}, $CellContext`G = 
          Part[$CellContext`graphs, $CellContext`jj]; {$CellContext`th, \
$CellContext`pull, $CellContext`show} = ReplaceAll[
            
            ReplaceAll[{
             EdgeThickness, $CellContext`ArrowPullback, \
$CellContext`ShowTour}, {$CellContext`opts}], 
            $CellContext`options[$CellContext`ShortestHamiltonianCycleImage]]; \
$CellContext`pull = 
          ReplaceAll[$CellContext`pull, {
            Automatic -> 0.05, None -> 0}]; $CellContext`tourAns = 
          Apply[UndirectedEdge, 
            Partition[
             $CellContext`Extend[$CellContext`tour], 2, 1], {
            1}]; $CellContext`locs = 
          Part[$CellContext`locData, $CellContext`jj]; $CellContext`n = 
          VertexCount[$CellContext`G]; $CellContext`pr = {{
             Min[
              Map[First, $CellContext`locs]], 
             Max[
              Map[First, $CellContext`locs]]}, {
             Min[
              Map[Last, $CellContext`locs]], 
             Max[
              Map[Last, $CellContext`locs]]}}; $CellContext`xR = 
          Part[$CellContext`pr, 1, 2] - 
           Part[$CellContext`pr, 1, 1]; $CellContext`cyEdgesIndexed = 
          MapIndexed[{
             Apply[Rule, #], 
             Part[#2, 1]}& , $CellContext`tourAns]; Show[
           GraphPlot[
            Apply[Rule, 
             EdgeList[$CellContext`G], {1}], VertexCoordinateRules -> 
            Thread[Range[$CellContext`n] -> $CellContext`locs], 
            EdgeRenderingFunction -> ({
              Thickness[0.025 1.2], 
              CapForm["Round"], 
              GrayLevel[1], 
              Line[#]}& ), VertexRenderingFunction -> ({}& )], 
           If[$CellContext`show, 
            
            GraphPlot[$CellContext`cyEdgesIndexed, 
             EdgeRenderingFunction -> (($CellContext`i = #3; $CellContext`\
\[Rho] = $CellContext`i/Length[$CellContext`tourAns]; {
                Thickness[$CellContext`th], 
                Arrowheads[4 $CellContext`th], 
                Hue[1 - $CellContext`\[Rho]/2, 0.7, 1], 
                
                Arrow[#, 
                 Norm[Part[#, 1] - Part[#, -1]] {$CellContext`pull 0/
                   5, $CellContext`pull}]})& ), VertexCoordinateRules -> 
             Thread[Range[$CellContext`n] -> $CellContext`locs]], {}], 
           Graphics[{
             Thickness[0.01], 
             Map[{
               If[# == Part[$CellContext`locs, 
                  Part[$CellContext`tourAns, 1, 1]], 
                GrayLevel[0.85], 
                Lighter[Orange]], 
               EdgeForm[
                Directive[
                 Thickness[0.002], Black]], 
               Disk[#, $CellContext`xR If[# == Part[$CellContext`locs, 
                    Part[$CellContext`tourAns, 1, 1]], 0.02 1.5, 
                  0.02]]}& , $CellContext`locs]}], {}, 
           Apply[Sequence, 
            FilterRules[{$CellContext`opts}, $CellContext`gropts]], 
           Background -> Black, PlotRange -> $CellContext`pr, ImageSize -> 
           500, PlotRangePadding -> Scaled[0.05], Frame -> True, FrameTicks -> 
           False]]; \
$CellContext`options[$CellContext`RoutingProblemTourImage] = \
{$CellContext`ArrowPullback -> Automatic, EdgeThickness -> 
         0.008, $CellContext`ShowTour -> 
         True}; $CellContext`RoutingProblemTourImage[
         Pattern[$CellContext`jj, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`pr, $CellContext`G1, $CellContext`n, \
$CellContext`edges, $CellContext`locs, $CellContext`g2, $CellContext`tourAns, \
$CellContext`tourbadEdges, $CellContext`tourbad, $CellContext`tourgood, \
$CellContext`G, $CellContext`th, $CellContext`pull, $CellContext`show, \
$CellContext`xR, $CellContext`cy, $CellContext`cyEdges, \
$CellContext`cyEdgesSorted, $CellContext`cyEdgesIndexed, \
$CellContext`\[Rho]}, $CellContext`G = 
          Part[$CellContext`graphs, $CellContext`jj]; {$CellContext`th, \
$CellContext`pull, $CellContext`show} = ReplaceAll[
            
            ReplaceAll[{
             EdgeThickness, $CellContext`ArrowPullback, \
$CellContext`ShowTour}, {$CellContext`opts}], 
            $CellContext`options[$CellContext`RoutingProblemTourImage]]; \
$CellContext`pull = 
          ReplaceAll[$CellContext`pull, {
            Automatic -> 0.0002, None -> 0}]; $CellContext`n = 
          VertexCount[$CellContext`G]; $CellContext`edges = 
          EdgeList[$CellContext`G]; $CellContext`locs = 
          Part[$CellContext`locData, $CellContext`jj]; $CellContext`pr = {{
             Min[
              Map[First, $CellContext`locs]], 
             Max[
              Map[First, $CellContext`locs]]}, {
             Min[
              Map[Last, $CellContext`locs]], 
             Max[
              Map[Last, $CellContext`locs]]}}; $CellContext`xR = 
          Part[$CellContext`pr, 1, 2] - 
           Part[$CellContext`pr, 1, 
            1]; $CellContext`cy = $CellContext`Extend[$CellContext`tour]; \
$CellContext`cyEdges = 
          Partition[$CellContext`cy, 2, 1]; $CellContext`cyEdgesSorted = 
          Map[Sort, $CellContext`cyEdges]; $CellContext`cyEdgesIndexed = 
          MapIndexed[{
             Apply[Rule, #], 
             Part[#2, 1]}& , $CellContext`cyEdges]; Show[
           GraphPlot[$CellContext`G, EdgeRenderingFunction -> ({
              Thickness[0.025 1.2], 
              CapForm["Round"], 
              GrayLevel[1], 
              Line[#]}& ), VertexRenderingFunction -> ({}& )], 
           If[$CellContext`show, 
            
            GraphPlot[$CellContext`cyEdgesIndexed, 
             EdgeRenderingFunction -> (($CellContext`i = #3; $CellContext`\
\[Rho] = $CellContext`i/Length[$CellContext`cy]; {
                Thickness[$CellContext`th], 
                Arrowheads[4 $CellContext`th], 
                Hue[1 - $CellContext`\[Rho]/2, 0.7, 1], 
                
                Arrow[#, 
                 Norm[Part[#, 1] - Part[#, -1]] {$CellContext`pull 0/
                   5, $CellContext`pull}]})& ), VertexCoordinateRules -> 
             Thread[Range[$CellContext`n] -> $CellContext`locs]], {}], 
           Graphics[{
             Thickness[0.01], 
             Map[{
               If[# == Part[$CellContext`locs, 
                  Part[$CellContext`cy, 1]], 
                GrayLevel[0.85], 
                Lighter[Orange]], 
               EdgeForm[
                Directive[
                 Thickness[0.002], Black]], 
               Disk[#, $CellContext`xR If[# == Part[$CellContext`locs, 
                    Part[$CellContext`cy, 1]], 0.02 1.5, 
                  0.02]]}& , $CellContext`locs]}], 
           Apply[Sequence, 
            FilterRules[{$CellContext`opts}, $CellContext`gropts]], 
           Background -> Black, PlotRange -> $CellContext`pr, ImageSize -> 
           500, PlotRangePadding -> Scaled[0.05], Frame -> True, FrameTicks -> 
           False]]; $CellContext`plottermatdata = {{
          UndirectedEdge[2, 4], 
          UndirectedEdge[3, 5]}, {
          UndirectedEdge[2, 3], 
          UndirectedEdge[5, 6], 
          UndirectedEdge[7, 10], 
          UndirectedEdge[11, 22], 
          UndirectedEdge[13, 18], 
          UndirectedEdge[14, 19]}, {
          UndirectedEdge[5, 7], 
          UndirectedEdge[6, 8]}, {
          UndirectedEdge[2, 4], 
          UndirectedEdge[5, 6], 
          UndirectedEdge[8, 10], 
          UndirectedEdge[11, 15], 
          UndirectedEdge[12, 20], 
          UndirectedEdge[13, 17]}}; $CellContext`cppmatdata = {{
          UndirectedEdge[2, 5], 
          UndirectedEdge[3, 4]}, {
          UndirectedEdge[2, 5], 
          UndirectedEdge[3, 13], 
          UndirectedEdge[6, 7], 
          UndirectedEdge[10, 14], 
          UndirectedEdge[11, 18], 
          UndirectedEdge[19, 22]}, {
          UndirectedEdge[5, 7], 
          UndirectedEdge[6, 8]}, {
          UndirectedEdge[2, 11], 
          UndirectedEdge[4, 15], 
          UndirectedEdge[5, 6], 
          UndirectedEdge[8, 13], 
          UndirectedEdge[10, 17], 
          UndirectedEdge[12, 20]}}; $CellContext`tourdata = {{{1, 4, 3, 5, 2, 
          4}, {1, 4, 2, 3, 5}, {1, 5, 3, 5, 2, 4, 3, 2, 4}, {1, 5, 2, 5, 3, 4,
           3, 2, 4}}, {{1, 2, 1, 6, 5, 6, 7, 11, 16, 10, 15, 20, 19, 20, 15, 
          10, 9, 14, 9, 10, 16, 21, 22, 23, 17, 18, 17, 12, 7, 3, 4, 8, 13, 8,
           7, 6}, {}, {1, 6, 5, 6, 7, 10, 15, 20, 19, 14, 9, 10, 16, 21, 22, 
          11, 16, 22, 23, 17, 12, 7, 11, 17, 18, 13, 8, 7, 3, 8, 4, 3, 2}, {1,
           6, 7, 12, 17, 18, 17, 11, 17, 23, 22, 21, 16, 22, 16, 10, 15, 20, 
          19, 20, 15, 10, 9, 14, 9, 10, 16, 11, 7, 8, 13, 8, 3, 8, 4, 3, 7, 6,
           5, 6, 1, 2}}, {{1, 3, 9, 7, 5, 8, 2, 8, 6, 4}, {1, 2, 4, 6, 8, 5, 
          7, 9, 3}, {1, 9, 7, 5, 9, 8, 6, 8, 5, 7, 4, 6, 5, 4, 8, 2, 9, 3, 1, 
          4, 2}, {1, 9, 7, 5, 9, 8, 6, 8, 5, 7, 4, 6, 5, 4, 8, 2, 9, 3, 1, 4, 
          2}}, {{1, 16, 8, 9, 18, 10, 5, 12, 20, 14, 15, 11, 2, 4, 2, 19, 6, 
          3, 7, 13, 17}, {1, 3, 6, 5, 16, 8, 9, 10, 18, 12, 20, 14, 15, 11, 
          19, 2, 4, 7, 13, 17}, {1, 17, 13, 17, 16, 9, 18, 14, 20, 12, 20, 6, 
          5, 20, 15, 11, 19, 15, 14, 12, 18, 10, 8, 16, 13, 7, 19, 6, 16, 10, 
          12, 5, 16, 1, 13, 8, 9, 10, 5, 6, 15, 4, 2, 15, 11, 2, 19, 3, 7, 4, 
          2, 7, 1, 6, 3}, {1, 17, 16, 13, 17, 16, 10, 18, 14, 20, 12, 20, 6, 
          5, 20, 15, 19, 7, 13, 8, 16, 9, 18, 12, 14, 15, 4, 15, 6, 16, 10, 
          12, 5, 16, 1, 13, 8, 9, 10, 5, 6, 19, 11, 2, 15, 11, 2, 19, 3, 7, 4,
           2, 7, 1, 6, 3}}}; $CellContext`locData = {{{0., 0.5}, {0.15, 
         0.18}, {0., 0.}, {0., 0.3}, {0.4, 0.}}, CompressedData["
1:eJxTTMoPSmViYGAQB2IQDQEf7LHTDA6ofA40voADdnUMDthpDjS+AJo4uj3o
+tBpdP0iaOK43ImuTwAHLYJGw8yD8RnQ5HG5A2EOAGJbFzw=
         "], {{0.309, 0.951}, {0.18, 0.033}, {-0.809, 0.588}, {1., 0.}, {
         0.241, -0.396}, {0.487, -0.209}, {0.309, -0.951}, {
         0.22, -0.232}, {-0.809, -0.588}}, CompressedData["
1:eJxTTMoPSmViYGAQAWIQverjJd8kgRP2kixhfLqb7u7fUJQx8W3Nc3vNmP5D
XzXW2Le+Dtwh13rb/sPyY97mnRf3M4DBB3sGKKh8qWbIsWbPfsstJ8r2zT9l
z8Ok3S5285w9yBR703X2EPFnMHo/Og01bz/MvJNAUSn9u/tzn/9e+fHSWfuj
CiAXPbVfUmDLdX3xBSj/7P5vGiAHPoC7A90cmDvR7LeHmrvf3jRulyfPpf1A
zwF92Ad1zyN090H1PbKfcwRssX3C0wtKt3/us79aAfL4A3sAlQaXOw==
         "]}; Null); Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->206214771]
}, {2}]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateCaptionSection"],

Cell["\<\
If we think of a graph as a road system, there are many types of optimal \
tours through the system that one might seek. This Demonstration shows four \
such tours, which can be found by various optimization methods. The starting \
point is shown as a larger gray disk.\
\>", "ManipulateCaption",
 CellChangeTimes->{{3.546869247916572*^9, 3.5468692954340487`*^9}, {
   3.547655497430263*^9, 3.5476555078473787`*^9}, {3.548773639648761*^9, 
   3.548773667364011*^9}, {3.548773720723804*^9, 3.5487737211632233`*^9}, 
   3.5491184585879087`*^9, {3.549387703429463*^9, 3.549387722925412*^9}}],

Cell["\<\
Vehicle routing tour: the cycle of shortest length that visits all vertices, \
with repetition of edges allowed.\
\>", "ManipulateCaption",
 CellChangeTimes->{{3.546869295776596*^9, 3.546869357697378*^9}, 
   3.546869446938196*^9, {3.5485251216135063`*^9, 3.54852512716714*^9}, {
   3.5493877687429934`*^9, 3.5493877691920385`*^9}},
 CellID->118989346],

Cell["\<\
Traveling salesman tour: For a graph, this means the shortest Hamiltonian \
cycle: a cycle passing through all vertices. In one of the four cases, there \
is no Hamiltonian cycle.\
\>", "ManipulateCaption",
 CellChangeTimes->{{3.546869295776596*^9, 3.5468693339696836`*^9}, {
   3.548773676132247*^9, 3.548773683515442*^9}, 3.5491292030188227`*^9, 
   3.549387760775197*^9},
 CellID->1546445741],

Cell["\<\
Plotter problem route: the shortest-length route for a plotter pen that \
visits all edges: thus, additional straight segments where the pen is in the \
up position are allowed.\
\>", "ManipulateCaption",
 CellChangeTimes->{{3.546869295776596*^9, 3.546869321145195*^9}, {
  3.546869361441246*^9, 3.546869421282819*^9}, {3.5485251386667233`*^9, 
  3.548525139546302*^9}, {3.5493877889680157`*^9, 3.5493877957766967`*^9}},
 CellID->546662865],

Cell["\<\
Chinese postman tour: the shortest-length tour that visits all edges, with \
repetitions allowed.\
\>", "ManipulateCaption",
 CellChangeTimes->{{3.548525144287229*^9, 3.548525144288772*^9}, 
   3.548773696100255*^9, {3.549387806456764*^9, 3.549387806640783*^9}},
 CellID->183397544],

Cell["\<\
In the images, the optimal cycle starts with red edges and ends with cyan. In \
the Chinese postman and plotter problem cases, the vertices of odd degree are \
matched up in a way that minimizes the total extra distance, and that \
matching is indicated by colors; vertices of even degree are simply colored \
white. \
\>", "ManipulateCaption",
 CellChangeTimes->{{3.548525144671673*^9, 3.548525231100855*^9}, {
   3.548773708484519*^9, 3.5487737326702633`*^9}, 3.549129251099758*^9},
 CellID->723488563],

Cell["\<\
Unchecking the \"show tour\" box lets you try to find the optimal cycle \
yourself.\
\>", "ManipulateCaption",
 CellChangeTimes->{{3.5487737336431923`*^9, 3.5487737576747713`*^9}, {
  3.54880242615382*^9, 3.5488024312736053`*^9}, {3.5491292714282293`*^9, 
  3.549129272777946*^9}},
 CellID->305311314]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ThumbnailSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`graphtype$$ = 
    "graph based on grid", $CellContext`problemtype$$ = 
    3, $CellContext`showtour$$ = True, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`graphtype$$], "graph based on grid", "graph type"}, {
      "small", "graph based on grid", "small planar graph", 
       "large planar graph"}}, {{
       Hold[$CellContext`showtour$$], True, "show tour"}, {False, True}}, {
      Hold[
       Row[{
         Manipulate`Place[1], 
         Spacer[20], 
         Manipulate`Place[2]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`problemtype$$], 3, "problem type"}, {
      1 -> "vehicle routing problem", 2 -> 
       "traveling salesman problem on graph", 3 -> "plotter problem", 4 -> 
       "Chinese postman problem"}}}, Typeset`size$$ = {400., {217., 223.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`graphtype$187406$$ = 
    0, $CellContext`showtour$187407$$ = 
    False, $CellContext`problemtype$187408$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`graphtype$$ = 
        "graph based on grid", $CellContext`problemtype$$ = 
        3, $CellContext`showtour$$ = True}, "ControllerVariables" :> {
        Hold[$CellContext`graphtype$$, $CellContext`graphtype$187406$$, 0], 
        Hold[$CellContext`showtour$$, $CellContext`showtour$187407$$, False], 
        Hold[$CellContext`problemtype$$, $CellContext`problemtype$187408$$, 
         False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`pull$, $CellContext`is$, $CellContext`thicks$, \
$CellContext`jj$, $CellContext`G$, $CellContext`tour$, $CellContext`mat$, \
$CellContext`locs$}, 
        SeedRandom[1]; $CellContext`pull$ = 0.1; $CellContext`is$ = 
         330; $CellContext`thicks$ = {0.014, 0.014, 0.012, 
          0.01}; $CellContext`jj$ = ReplaceAll[$CellContext`graphtype$$, 
           
           Thread[{"small", "graph based on grid", "small planar graph", 
              "large planar graph"} -> Range[4]]]; $CellContext`G$ = 
         Part[$CellContext`graphs, $CellContext`jj$]; $CellContext`locs$ = 
         Part[$CellContext`locData, $CellContext`jj$]; $CellContext`tour$ = 
         Part[$CellContext`tourdata, $CellContext`jj$, \
$CellContext`problemtype$$]; 
        If[$CellContext`problemtype$$ == 4, $CellContext`mat$ = 
          Part[$CellContext`cppmatdata, $CellContext`jj$]]; Pane[
          Which[$CellContext`problemtype$$ == 1, 
           Column[{
             Style[
             " Shortest cycle through all vertices, staying on graph edges, \
with vertex and \n edge repetition allowed", FontFamily -> "Times"], 
             $CellContext`RoutingProblemTourImage[$CellContext`jj$, \
$CellContext`tour$, EdgeThickness -> 
              Part[$CellContext`thicks$, $CellContext`jj$], \
$CellContext`ShowTour -> $CellContext`showtour$$, 
              ImageSize -> $CellContext`is$, AspectRatio -> 
              Automatic, $CellContext`ArrowPullback -> 
              0.1]}], $CellContext`problemtype$$ == 2, 
           Column[{
             Style[
             " Shortest Hamiltonian cycle: a cycle through all vertices, \
staying on graph edges\n and visiting each vertex once", FontFamily -> 
              "Times"], 
             If[$CellContext`graphtype$$ === "graph based on grid", 
              Column[{
                Style[
                " There is no Hamiltonian cycle for this graph", FontFamily -> 
                 "Times", Red], 
                
                GraphPlot[$CellContext`G$, ImageSize -> $CellContext`is$, 
                 EdgeRenderingFunction -> ({
                   Thickness[0.025 1.2], 
                   CapForm["Round"], 
                   GrayLevel[1], 
                   Line[#]}& ), Background -> Black, PlotRangePadding -> 
                 Scaled[0.05], PlotRange -> {{1, 5}, {1, 5}}, 
                 VertexRenderingFunction -> ({
                   EdgeForm[
                    Directive[
                    Thickness[0.003], Black]], 
                   FaceForm[
                    RGBColor[1, 0.8, 0.5]], 
                   Disk[#, 0.09]}& )]}], 
              $CellContext`ShortestHamiltonianCycleImage[$CellContext`jj$, \
$CellContext`tour$, 
               ImageSize -> $CellContext`is$, $CellContext`ShowTour -> \
$CellContext`showtour$$, AspectRatio -> Automatic, $CellContext`ArrowPullback -> 
               0.1, EdgeThickness -> 
               Part[$CellContext`thicks$, $CellContext`jj$]]]}], \
$CellContext`problemtype$$ == 3, 
           Column[{
             Style[
             " Shortest cycle through all edges, with travel off the edges \
allowed\n and vertex repetition allowed; pen\[Hyphen]up segments are dashed", 
              FontFamily -> "Times"], 
             $CellContext`PlotterProblemImage[$CellContext`jj$, \
$CellContext`tour$, 
              Part[$CellContext`plottermatdata, $CellContext`jj$], 
              EdgeThickness -> Part[$CellContext`thicks$, $CellContext`jj$], 
              ImageSize -> $CellContext`is$, AspectRatio -> 
              Automatic, $CellContext`ShowTour -> $CellContext`showtour$$, \
$CellContext`ArrowPullback -> $CellContext`pull$]}], \
$CellContext`problemtype$$ == 4, 
           Column[{
             Style[
             " Shortest cycle through all edges, staying on graph edges, with \
vertex and\n edge repetition allowed; like a mailman using streets", 
              FontFamily -> "Times"], 
             $CellContext`ChinesePostmanTourImage[$CellContext`jj$, \
$CellContext`tour$, $CellContext`mat$, ImageSize -> $CellContext`is$, 
              EdgeThickness -> Part[$CellContext`thicks$, $CellContext`jj$], 
              AspectRatio -> 
              Automatic, $CellContext`ShowTour -> $CellContext`showtour$$, \
$CellContext`ArrowPullback -> $CellContext`pull$]}]], 
          ImageSize -> {400, 440}]], 
      "Specifications" :> {{{$CellContext`graphtype$$, "graph based on grid", 
          "graph type"}, {
         "small", "graph based on grid", "small planar graph", 
          "large planar graph"}, ControlPlacement -> 
         1}, {{$CellContext`showtour$$, True, "show tour"}, {False, True}, 
         ControlPlacement -> 2}, 
        Row[{
          Manipulate`Place[1], 
          Spacer[20], 
          Manipulate`Place[2]}], {{$CellContext`problemtype$$, 3, 
          "problem type"}, {
         1 -> "vehicle routing problem", 2 -> 
          "traveling salesman problem on graph", 3 -> "plotter problem", 4 -> 
          "Chinese postman problem"}}}, "Options" :> {TrackedSymbols -> True},
       "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{664., {274., 279.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>(($CellContext`gropts = {
        AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> False, 
         AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, 
         Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, 
         ColorOutput -> Automatic, ContentSelectable -> Automatic, 
         CoordinatesToolOptions -> Automatic, 
         DisplayFunction :> $DisplayFunction, Epilog -> {}, FormatType :> 
         TraditionalForm, Frame -> False, FrameLabel -> None, 
         FrameStyle -> {}, FrameTicks -> Automatic, FrameTicksStyle -> {}, 
         GridLines -> None, GridLinesStyle -> {}, ImageMargins -> 0., 
         ImagePadding -> All, ImageSize -> Automatic, ImageSizeRaw -> 
         Automatic, LabelStyle -> {}, Method -> Automatic, PlotLabel -> None, 
         PlotRange -> All, PlotRangeClipping -> False, PlotRangePadding -> 
         Automatic, PlotRegion -> Automatic, PreserveImageOptions -> 
         Automatic, Prolog -> {}, RotateLabel -> True, Ticks -> Automatic, 
         TicksStyle -> {}}; $CellContext`graphs = 
       Apply[Graph, {{{1, 2, 3, 4, 5}, {
            UndirectedEdge[1, 4], 
            UndirectedEdge[1, 5], 
            UndirectedEdge[2, 3], 
            UndirectedEdge[2, 4], 
            UndirectedEdge[2, 5], 
            UndirectedEdge[3, 4], 
            UndirectedEdge[3, 5]}, 
           VertexCoordinates -> {{0., 0.5}, {0.15, 0.18}, {0., 0.}, {0., 
            0.3}, {0.4, 0.}}}, {{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 
           14, 15, 16, 17, 18, 19, 20, 21, 22, 23}, {
            UndirectedEdge[1, 2], 
            UndirectedEdge[1, 6], 
            UndirectedEdge[3, 4], 
            UndirectedEdge[3, 7], 
            UndirectedEdge[3, 8], 
            UndirectedEdge[4, 8], 
            UndirectedEdge[5, 6], 
            UndirectedEdge[6, 7], 
            UndirectedEdge[7, 8], 
            UndirectedEdge[7, 11], 
            UndirectedEdge[7, 12], 
            UndirectedEdge[8, 13], 
            UndirectedEdge[9, 10], 
            UndirectedEdge[9, 14], 
            UndirectedEdge[10, 15], 
            UndirectedEdge[10, 16], 
            UndirectedEdge[11, 16], 
            UndirectedEdge[11, 17], 
            UndirectedEdge[12, 17], 
            UndirectedEdge[15, 20], 
            UndirectedEdge[16, 21], 
            UndirectedEdge[16, 22], 
            UndirectedEdge[17, 18], 
            UndirectedEdge[17, 23], 
            UndirectedEdge[19, 20], 
            UndirectedEdge[21, 22], 
            UndirectedEdge[22, 23]}, VertexCoordinates -> CompressedData["
1:eJxTTMoPSmViYGAQB2IQDQEf7LHTDA6ofA40voADdnUMDthpDjS+AJo4uj3o
+tBpdP0iaOK43ImuTwAHLYJGw8yD8RnQ5HG5A2EOAGJbFzw=
            "]}, {{1, 2, 3, 4, 5, 6, 7, 8, 9}, {
            UndirectedEdge[1, 2], 
            UndirectedEdge[1, 3], 
            UndirectedEdge[1, 4], 
            UndirectedEdge[1, 9], 
            UndirectedEdge[2, 4], 
            UndirectedEdge[2, 8], 
            UndirectedEdge[2, 9], 
            UndirectedEdge[3, 9], 
            UndirectedEdge[4, 5], 
            UndirectedEdge[4, 6], 
            UndirectedEdge[4, 7], 
            UndirectedEdge[4, 8], 
            UndirectedEdge[5, 6], 
            UndirectedEdge[5, 7], 
            UndirectedEdge[5, 8], 
            UndirectedEdge[5, 9], 
            UndirectedEdge[6, 8], 
            UndirectedEdge[7, 9], 
            UndirectedEdge[8, 9]}, 
           VertexCoordinates -> {{0.309, 0.951}, {0.18, 0.033}, {-0.809, 
            0.588}, {1., 0.}, {0.241, -0.396}, {0.487, -0.209}, {
            0.309, -0.951}, {0.22, -0.232}, {-0.809, -0.588}}}, {{1, 2, 3, 4, 
           5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {
            UndirectedEdge[1, 3], 
            UndirectedEdge[1, 6], 
            UndirectedEdge[1, 7], 
            UndirectedEdge[1, 13], 
            UndirectedEdge[1, 16], 
            UndirectedEdge[1, 17], 
            UndirectedEdge[2, 4], 
            UndirectedEdge[2, 7], 
            UndirectedEdge[2, 11], 
            UndirectedEdge[2, 15], 
            UndirectedEdge[2, 19], 
            UndirectedEdge[3, 6], 
            UndirectedEdge[3, 7], 
            UndirectedEdge[3, 19], 
            UndirectedEdge[4, 7], 
            UndirectedEdge[4, 15], 
            UndirectedEdge[5, 6], 
            UndirectedEdge[5, 10], 
            UndirectedEdge[5, 12], 
            UndirectedEdge[5, 16], 
            UndirectedEdge[5, 20], 
            UndirectedEdge[6, 15], 
            UndirectedEdge[6, 16], 
            UndirectedEdge[6, 19], 
            UndirectedEdge[6, 20], 
            UndirectedEdge[7, 13], 
            UndirectedEdge[7, 19], 
            UndirectedEdge[8, 9], 
            UndirectedEdge[8, 13], 
            UndirectedEdge[8, 16], 
            UndirectedEdge[9, 10], 
            UndirectedEdge[9, 16], 
            UndirectedEdge[9, 18], 
            UndirectedEdge[10, 12], 
            UndirectedEdge[10, 16], 
            UndirectedEdge[10, 18], 
            UndirectedEdge[11, 15], 
            UndirectedEdge[11, 19], 
            UndirectedEdge[12, 14], 
            UndirectedEdge[12, 18], 
            UndirectedEdge[12, 20], 
            UndirectedEdge[13, 16], 
            UndirectedEdge[13, 17], 
            UndirectedEdge[14, 15], 
            UndirectedEdge[14, 18], 
            UndirectedEdge[14, 20], 
            UndirectedEdge[15, 19], 
            UndirectedEdge[15, 20], 
            UndirectedEdge[16, 17]}, VertexCoordinates -> CompressedData["
1:eJxTTMoPSmViYGAQAWIQverjJd8kgRP2kixhfLqb7u7fUJQx8W3Nc3vNmP5D
XzXW2Le+Dtwh13rb/sPyY97mnRf3M4DBB3sGKKh8qWbIsWbPfsstJ8r2zT9l
z8Ok3S5285w9yBR703X2EPFnMHo/Og01bz/MvJNAUSn9u/tzn/9e+fHSWfuj
CiAXPbVfUmDLdX3xBSj/7P5vGiAHPoC7A90cmDvR7LeHmrvf3jRulyfPpf1A
zwF92Ad1zyN090H1PbKfcwRssX3C0wtKt3/us79aAfL4A3sAlQaXOw==
            "]}}, {1}]; $CellContext`Extend[
         Pattern[$CellContext`a, 
          Blank[]]] := Append[$CellContext`a, 
         Part[$CellContext`a, 1]]; $CellContext`ColorsForColoring = 
       Join[{Red, Green, Blue, Cyan, Magenta, Yellow, Orange, Purple, Brown, 
          Black}, 
         Table[
          ColorData[
          "Legacy", $CellContext`i], {$CellContext`i, 
           40}]]; $CellContext`options[$CellContext`ChinesePostmanTourImage] = \
{$CellContext`ArrowPullback -> Automatic, EdgeThickness -> 
         0.008, $CellContext`ShowTour -> 
         True}; $CellContext`ChinesePostmanTourImage[
         Pattern[$CellContext`jj, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`mat, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`G, $CellContext`nv, $CellContext`pull, \
$CellContext`th, $CellContext`show, $CellContext`cy, $CellContext`n, \
$CellContext`locs, $CellContext`pr, $CellContext`xR, $CellContext`cyEdges, \
$CellContext`cyEdgesSorted, $CellContext`cyEdgesIndexed, \
$CellContext`matchedverts, $CellContext`odds, $CellContext`v, \
$CellContext`i}, $CellContext`G = 
          Part[$CellContext`graphs, $CellContext`jj]; $CellContext`nv = 
          VertexCount[$CellContext`G]; {$CellContext`th, $CellContext`pull, \
$CellContext`show} = ReplaceAll[
            
            ReplaceAll[{
             EdgeThickness, $CellContext`ArrowPullback, \
$CellContext`ShowTour}, {$CellContext`opts}], 
            $CellContext`options[$CellContext`ChinesePostmanTourImage]]; \
$CellContext`pull = 
          ReplaceAll[$CellContext`pull, {
            Automatic -> 0.05, None -> 
             0}]; $CellContext`cy = $CellContext`Extend[$CellContext`tour]; \
$CellContext`n = VertexCount[$CellContext`G]; $CellContext`locs = 
          Part[$CellContext`locData, $CellContext`jj]; $CellContext`pr = {{
             Min[
              Map[First, $CellContext`locs]], 
             Max[
              Map[First, $CellContext`locs]]}, {
             Min[
              Map[Last, $CellContext`locs]], 
             Max[
              Map[Last, $CellContext`locs]]}}; $CellContext`xR = 
          Part[$CellContext`pr, 1, 2] - 
           Part[$CellContext`pr, 1, 1]; $CellContext`cyEdges = 
          Partition[$CellContext`cy, 2, 1]; $CellContext`cyEdgesSorted = 
          Map[Sort, $CellContext`cyEdges]; $CellContext`cyEdgesIndexed = 
          MapIndexed[{
             Apply[Rule, #], 
             Part[#2, 1]}& , $CellContext`cyEdges]; $CellContext`matchedverts = 
          Apply[List, $CellContext`mat, {1}]; $CellContext`odds = {
            EdgeForm[
             Directive[
              Thickness[0.002], Black]], 
            MapIndexed[{
              Part[$CellContext`ColorsForColoring, 
               Part[#2, 1]], 
              Disk[
               Part[$CellContext`locs, 
                Part[#, 1]], $CellContext`xR 0.02], 
              Disk[
               Part[$CellContext`locs, 
                Part[#, 2]], $CellContext`xR 
               0.02]}& , $CellContext`matchedverts]}; Show[
           Graphics[
            Apply[Rectangle, 
             Transpose[$CellContext`pr]]], 
           GraphPlot[$CellContext`G, EdgeRenderingFunction -> ({
              Thickness[0.025 1.2], 
              CapForm["Round"], 
              GrayLevel[1], 
              Line[#]}& ), VertexRenderingFunction -> ({}& )], 
           If[$CellContext`show, 
            
            GraphPlot[$CellContext`cyEdgesIndexed, 
             EdgeRenderingFunction -> (($CellContext`i = #3; $CellContext`\
\[Rho] = $CellContext`i/Length[$CellContext`cy]; {
                Thickness[$CellContext`th], 
                Arrowheads[4 $CellContext`th], 
                Hue[1 - $CellContext`\[Rho]/2, 0.7, 1], 
                
                Arrow[#, 
                 Norm[Part[#, 1] - Part[#, -1]] {$CellContext`pull/
                   5, $CellContext`pull}]})& ), VertexCoordinateRules -> 
             Thread[Range[$CellContext`n] -> $CellContext`locs]], {}], 
           Graphics[{
             Thickness[0.01], 
             
             Map[{$CellContext`v = 
                Part[$CellContext`locs, #]; $CellContext`odds, 
               RGBColor[1, 0.8, 0.5], White, 
               EdgeForm[
                Directive[
                 Thickness[0.002], Black]], 
               
               Disk[$CellContext`v, $CellContext`xR 
                If[$CellContext`v == Part[$CellContext`locs, 
                    Part[$CellContext`cy, 1]], 0.02 1.5, 0.02]]}& , 
              Complement[
               Range[$CellContext`nv], 
               Flatten[$CellContext`matchedverts]]]}], 
           Apply[Sequence, 
            FilterRules[{$CellContext`opts}, $CellContext`gropts]], 
           Background -> Black, PlotRange -> $CellContext`pr, 
           ImageSize -> {500, 500}, PlotRangePadding -> Scaled[0.05], Frame -> 
           True, FrameTicks -> 
           False]]; $CellContext`options[$CellContext`PlotterProblemImage] = \
{$CellContext`ArrowPullback -> Automatic, EdgeThickness -> 
         0.008, $CellContext`ShowTour -> 
         True}; $CellContext`PlotterProblemImage[
         Pattern[$CellContext`jj, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`mat1, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`odds, $CellContext`locs, $CellContext`pr, \
$CellContext`GOdd, $CellContext`XXedges, $CellContext`len, $CellContext`mat, \
$CellContext`i, $CellContext`cy, $CellContext`edgesg, $CellContext`cyEdges, \
$CellContext`pathData, $CellContext`edge, $CellContext`newAdj, \
$CellContext`wts, $CellContext`reordermat, $CellContext`g, $CellContext`nv, \
$CellContext`th, $CellContext`pull, $CellContext`show, $CellContext`xR, \
$CellContext`matchedverts, $CellContext`cyEdgesSorted, $CellContext`dashed, \
$CellContext`v, $CellContext`\[Rho], $CellContext`cyEdgesIndexed}, \
$CellContext`g = Part[$CellContext`graphs, $CellContext`jj]; $CellContext`nv = 
          VertexCount[$CellContext`g]; {$CellContext`th, $CellContext`pull, \
$CellContext`show} = ReplaceAll[
            
            ReplaceAll[{
             EdgeThickness, $CellContext`ArrowPullback, \
$CellContext`ShowTour}, {$CellContext`opts}], 
            $CellContext`options[$CellContext`PlotterProblemImage]]; \
$CellContext`pull = 
          ReplaceAll[$CellContext`pull, {
            Automatic -> 0.05, None -> 0}]; $CellContext`odds = Flatten[
            Position[
             VertexDegree[$CellContext`g], 
             PatternTest[
              Pattern[$CellContext`x, 
               Blank[]], OddQ]]]; $CellContext`locs = 
          Part[$CellContext`locData, $CellContext`jj]; $CellContext`pr = {{
             Min[
              Map[First, $CellContext`locs]], 
             Max[
              Map[First, $CellContext`locs]]}, {
             Min[
              Map[Last, $CellContext`locs]], 
             Max[
              Map[Last, $CellContext`locs]]}}; $CellContext`xR = 
          Part[$CellContext`pr, 1, 2] - 
           Part[$CellContext`pr, 1, 
            1]; $CellContext`cy = $CellContext`Extend[$CellContext`tour]; \
$CellContext`mat = ReplaceAll[$CellContext`mat1, UndirectedEdge[
              Pattern[$CellContext`i, 
               Blank[]], 
              Pattern[$CellContext`j, 
               Blank[]]] :> If[Part[
                Position[$CellContext`cy, $CellContext`i], 1, 1] < Part[
                Position[$CellContext`cy, $CellContext`j], 1, 1], 
              UndirectedEdge[$CellContext`i, $CellContext`j], 
              
              UndirectedEdge[$CellContext`j, $CellContext`i]]]; \
$CellContext`matchedverts = 
          Apply[List, $CellContext`mat1, {1}]; $CellContext`odds = {
            EdgeForm[
             Directive[
              Thickness[0.002], Black]], 
            MapIndexed[{
              Part[$CellContext`ColorsForColoring, 
               Part[#2, 1]], 
              Disk[
               Part[$CellContext`locs, 
                Part[#, 1]], $CellContext`xR 0.02], 
              Disk[
               Part[$CellContext`locs, 
                Part[#, 2]], $CellContext`xR 
               0.02]}& , $CellContext`matchedverts]}; $CellContext`edgesg = 
          EdgeList[$CellContext`g]; $CellContext`cyEdges = 
          Partition[$CellContext`cy, 2, 1]; $CellContext`cyEdgesSorted = 
          Map[Sort, $CellContext`cyEdges]; $CellContext`cyEdgesIndexed = 
          MapIndexed[{
             Apply[Rule, #], 
             Part[#2, 1]}& , $CellContext`cyEdges]; $CellContext`pathData = 
          Table[
            Not[Position[
               Take[$CellContext`cyEdges, $CellContext`i - 1], 
               
               Part[$CellContext`cyEdges, $CellContext`i]] != {}], \
{$CellContext`i, 
             Length[$CellContext`cyEdges]}]; $CellContext`dashed = 
          Map[False& , $CellContext`cyEdgesIndexed]; Show[
           GraphPlot[$CellContext`g, EdgeRenderingFunction -> ({
              Thickness[0.025 1.2], 
              CapForm["Round"], 
              GrayLevel[1], 
              Line[#]}& ), VertexRenderingFunction -> ({}& )], 
           If[$CellContext`show, 
            
            GraphPlot[$CellContext`cyEdgesIndexed, 
             EdgeRenderingFunction -> (($CellContext`\[Rho] = #3/
                Length[$CellContext`cy]; {
                Thickness[$CellContext`th], 
                Arrowheads[4 $CellContext`th], 
                Hue[1 - $CellContext`\[Rho]/2, 0.7, 1], 
                If[
                 And[
                  MemberQ[$CellContext`mat, 
                   Apply[UndirectedEdge, #2]], 
                  Part[$CellContext`pathData, #3]], 
                 Dashing[{0.01, 0.01}]], 
                
                Arrow[#, 
                 Norm[Part[#, 1] - Part[#, -1]] {$CellContext`pull/
                   5, $CellContext`pull}]})& ), VertexCoordinateRules -> 
             Thread[Range[
                 VertexCount[$CellContext`g]] -> $CellContext`locs]], {}], 
           Graphics[{
             Thickness[0.01], 
             
             Map[{$CellContext`v = 
                Part[$CellContext`locs, #]; $CellContext`odds, 
               RGBColor[1, 0.8, 0.5], White, 
               EdgeForm[
                Directive[
                 Thickness[0.002], Black]], 
               
               Disk[$CellContext`v, $CellContext`xR 
                If[$CellContext`v == Part[$CellContext`locs, 
                    Part[$CellContext`cy, 1]], 0.02 1.5, 0.02]]}& , 
              Complement[
               Range[$CellContext`nv], 
               Flatten[$CellContext`matchedverts]]]}], 
           Apply[Sequence, 
            FilterRules[{$CellContext`opts}, $CellContext`gropts]], 
           PlotRange -> $CellContext`pr, Frame -> True, ImageSize -> 350, 
           Background -> GrayLevel[0.], PlotRangePadding -> 
           Scaled[0.05]]]; \
$CellContext`options[$CellContext`ShortestHamiltonianCycleImage] = \
{$CellContext`ArrowPullback -> Automatic, EdgeThickness -> 
         0.008, $CellContext`ShowTour -> 
         True}; $CellContext`ShortestHamiltonianCycleImage[
         Pattern[$CellContext`jj, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`tourAns, $CellContext`locs, $CellContext`pr, \
$CellContext`n, $CellContext`th, $CellContext`pull, $CellContext`G, \
$CellContext`cyEdgesIndexed, $CellContext`xR, $CellContext`i, $CellContext`\
\[Rho]}, $CellContext`G = 
          Part[$CellContext`graphs, $CellContext`jj]; {$CellContext`th, \
$CellContext`pull, $CellContext`show} = ReplaceAll[
            
            ReplaceAll[{
             EdgeThickness, $CellContext`ArrowPullback, \
$CellContext`ShowTour}, {$CellContext`opts}], 
            $CellContext`options[$CellContext`ShortestHamiltonianCycleImage]]; \
$CellContext`pull = 
          ReplaceAll[$CellContext`pull, {
            Automatic -> 0.05, None -> 0}]; $CellContext`tourAns = 
          Apply[UndirectedEdge, 
            Partition[
             $CellContext`Extend[$CellContext`tour], 2, 1], {
            1}]; $CellContext`locs = 
          Part[$CellContext`locData, $CellContext`jj]; $CellContext`n = 
          VertexCount[$CellContext`G]; $CellContext`pr = {{
             Min[
              Map[First, $CellContext`locs]], 
             Max[
              Map[First, $CellContext`locs]]}, {
             Min[
              Map[Last, $CellContext`locs]], 
             Max[
              Map[Last, $CellContext`locs]]}}; $CellContext`xR = 
          Part[$CellContext`pr, 1, 2] - 
           Part[$CellContext`pr, 1, 1]; $CellContext`cyEdgesIndexed = 
          MapIndexed[{
             Apply[Rule, #], 
             Part[#2, 1]}& , $CellContext`tourAns]; Show[
           GraphPlot[
            Apply[Rule, 
             EdgeList[$CellContext`G], {1}], VertexCoordinateRules -> 
            Thread[Range[$CellContext`n] -> $CellContext`locs], 
            EdgeRenderingFunction -> ({
              Thickness[0.025 1.2], 
              CapForm["Round"], 
              GrayLevel[1], 
              Line[#]}& ), VertexRenderingFunction -> ({}& )], 
           If[$CellContext`show, 
            
            GraphPlot[$CellContext`cyEdgesIndexed, 
             EdgeRenderingFunction -> (($CellContext`i = #3; $CellContext`\
\[Rho] = $CellContext`i/Length[$CellContext`tourAns]; {
                Thickness[$CellContext`th], 
                Arrowheads[4 $CellContext`th], 
                Hue[1 - $CellContext`\[Rho]/2, 0.7, 1], 
                
                Arrow[#, 
                 Norm[Part[#, 1] - Part[#, -1]] {$CellContext`pull 0/
                   5, $CellContext`pull}]})& ), VertexCoordinateRules -> 
             Thread[Range[$CellContext`n] -> $CellContext`locs]], {}], 
           Graphics[{
             Thickness[0.01], 
             Map[{
               If[# == Part[$CellContext`locs, 
                  Part[$CellContext`tourAns, 1, 1]], 
                GrayLevel[0.85], 
                Lighter[Orange]], 
               EdgeForm[
                Directive[
                 Thickness[0.002], Black]], 
               Disk[#, $CellContext`xR If[# == Part[$CellContext`locs, 
                    Part[$CellContext`tourAns, 1, 1]], 0.02 1.5, 
                  0.02]]}& , $CellContext`locs]}], {}, 
           Apply[Sequence, 
            FilterRules[{$CellContext`opts}, $CellContext`gropts]], 
           Background -> Black, PlotRange -> $CellContext`pr, ImageSize -> 
           500, PlotRangePadding -> Scaled[0.05], Frame -> True, FrameTicks -> 
           False]]; \
$CellContext`options[$CellContext`RoutingProblemTourImage] = \
{$CellContext`ArrowPullback -> Automatic, EdgeThickness -> 
         0.008, $CellContext`ShowTour -> 
         True}; $CellContext`RoutingProblemTourImage[
         Pattern[$CellContext`jj, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`pr, $CellContext`G1, $CellContext`n, \
$CellContext`edges, $CellContext`locs, $CellContext`g2, $CellContext`tourAns, \
$CellContext`tourbadEdges, $CellContext`tourbad, $CellContext`tourgood, \
$CellContext`G, $CellContext`th, $CellContext`pull, $CellContext`show, \
$CellContext`xR, $CellContext`cy, $CellContext`cyEdges, \
$CellContext`cyEdgesSorted, $CellContext`cyEdgesIndexed, \
$CellContext`\[Rho]}, $CellContext`G = 
          Part[$CellContext`graphs, $CellContext`jj]; {$CellContext`th, \
$CellContext`pull, $CellContext`show} = ReplaceAll[
            
            ReplaceAll[{
             EdgeThickness, $CellContext`ArrowPullback, \
$CellContext`ShowTour}, {$CellContext`opts}], 
            $CellContext`options[$CellContext`RoutingProblemTourImage]]; \
$CellContext`pull = 
          ReplaceAll[$CellContext`pull, {
            Automatic -> 0.0002, None -> 0}]; $CellContext`n = 
          VertexCount[$CellContext`G]; $CellContext`edges = 
          EdgeList[$CellContext`G]; $CellContext`locs = 
          Part[$CellContext`locData, $CellContext`jj]; $CellContext`pr = {{
             Min[
              Map[First, $CellContext`locs]], 
             Max[
              Map[First, $CellContext`locs]]}, {
             Min[
              Map[Last, $CellContext`locs]], 
             Max[
              Map[Last, $CellContext`locs]]}}; $CellContext`xR = 
          Part[$CellContext`pr, 1, 2] - 
           Part[$CellContext`pr, 1, 
            1]; $CellContext`cy = $CellContext`Extend[$CellContext`tour]; \
$CellContext`cyEdges = 
          Partition[$CellContext`cy, 2, 1]; $CellContext`cyEdgesSorted = 
          Map[Sort, $CellContext`cyEdges]; $CellContext`cyEdgesIndexed = 
          MapIndexed[{
             Apply[Rule, #], 
             Part[#2, 1]}& , $CellContext`cyEdges]; Show[
           GraphPlot[$CellContext`G, EdgeRenderingFunction -> ({
              Thickness[0.025 1.2], 
              CapForm["Round"], 
              GrayLevel[1], 
              Line[#]}& ), VertexRenderingFunction -> ({}& )], 
           If[$CellContext`show, 
            
            GraphPlot[$CellContext`cyEdgesIndexed, 
             EdgeRenderingFunction -> (($CellContext`i = #3; $CellContext`\
\[Rho] = $CellContext`i/Length[$CellContext`cy]; {
                Thickness[$CellContext`th], 
                Arrowheads[4 $CellContext`th], 
                Hue[1 - $CellContext`\[Rho]/2, 0.7, 1], 
                
                Arrow[#, 
                 Norm[Part[#, 1] - Part[#, -1]] {$CellContext`pull 0/
                   5, $CellContext`pull}]})& ), VertexCoordinateRules -> 
             Thread[Range[$CellContext`n] -> $CellContext`locs]], {}], 
           Graphics[{
             Thickness[0.01], 
             Map[{
               If[# == Part[$CellContext`locs, 
                  Part[$CellContext`cy, 1]], 
                GrayLevel[0.85], 
                Lighter[Orange]], 
               EdgeForm[
                Directive[
                 Thickness[0.002], Black]], 
               Disk[#, $CellContext`xR If[# == Part[$CellContext`locs, 
                    Part[$CellContext`cy, 1]], 0.02 1.5, 
                  0.02]]}& , $CellContext`locs]}], 
           Apply[Sequence, 
            FilterRules[{$CellContext`opts}, $CellContext`gropts]], 
           Background -> Black, PlotRange -> $CellContext`pr, ImageSize -> 
           500, PlotRangePadding -> Scaled[0.05], Frame -> True, FrameTicks -> 
           False]]; $CellContext`plottermatdata = {{
          UndirectedEdge[2, 4], 
          UndirectedEdge[3, 5]}, {
          UndirectedEdge[2, 3], 
          UndirectedEdge[5, 6], 
          UndirectedEdge[7, 10], 
          UndirectedEdge[11, 22], 
          UndirectedEdge[13, 18], 
          UndirectedEdge[14, 19]}, {
          UndirectedEdge[5, 7], 
          UndirectedEdge[6, 8]}, {
          UndirectedEdge[2, 4], 
          UndirectedEdge[5, 6], 
          UndirectedEdge[8, 10], 
          UndirectedEdge[11, 15], 
          UndirectedEdge[12, 20], 
          UndirectedEdge[13, 17]}}; $CellContext`cppmatdata = {{
          UndirectedEdge[2, 5], 
          UndirectedEdge[3, 4]}, {
          UndirectedEdge[2, 5], 
          UndirectedEdge[3, 13], 
          UndirectedEdge[6, 7], 
          UndirectedEdge[10, 14], 
          UndirectedEdge[11, 18], 
          UndirectedEdge[19, 22]}, {
          UndirectedEdge[5, 7], 
          UndirectedEdge[6, 8]}, {
          UndirectedEdge[2, 11], 
          UndirectedEdge[4, 15], 
          UndirectedEdge[5, 6], 
          UndirectedEdge[8, 13], 
          UndirectedEdge[10, 17], 
          UndirectedEdge[12, 20]}}; $CellContext`tourdata = {{{1, 4, 3, 5, 2, 
          4}, {1, 4, 2, 3, 5}, {1, 5, 3, 5, 2, 4, 3, 2, 4}, {1, 5, 2, 5, 3, 4,
           3, 2, 4}}, {{1, 2, 1, 6, 5, 6, 7, 11, 16, 10, 15, 20, 19, 20, 15, 
          10, 9, 14, 9, 10, 16, 21, 22, 23, 17, 18, 17, 12, 7, 3, 4, 8, 13, 8,
           7, 6}, {}, {1, 6, 5, 6, 7, 10, 15, 20, 19, 14, 9, 10, 16, 21, 22, 
          11, 16, 22, 23, 17, 12, 7, 11, 17, 18, 13, 8, 7, 3, 8, 4, 3, 2}, {1,
           6, 7, 12, 17, 18, 17, 11, 17, 23, 22, 21, 16, 22, 16, 10, 15, 20, 
          19, 20, 15, 10, 9, 14, 9, 10, 16, 11, 7, 8, 13, 8, 3, 8, 4, 3, 7, 6,
           5, 6, 1, 2}}, {{1, 3, 9, 7, 5, 8, 2, 8, 6, 4}, {1, 2, 4, 6, 8, 5, 
          7, 9, 3}, {1, 9, 7, 5, 9, 8, 6, 8, 5, 7, 4, 6, 5, 4, 8, 2, 9, 3, 1, 
          4, 2}, {1, 9, 7, 5, 9, 8, 6, 8, 5, 7, 4, 6, 5, 4, 8, 2, 9, 3, 1, 4, 
          2}}, {{1, 16, 8, 9, 18, 10, 5, 12, 20, 14, 15, 11, 2, 4, 2, 19, 6, 
          3, 7, 13, 17}, {1, 3, 6, 5, 16, 8, 9, 10, 18, 12, 20, 14, 15, 11, 
          19, 2, 4, 7, 13, 17}, {1, 17, 13, 17, 16, 9, 18, 14, 20, 12, 20, 6, 
          5, 20, 15, 11, 19, 15, 14, 12, 18, 10, 8, 16, 13, 7, 19, 6, 16, 10, 
          12, 5, 16, 1, 13, 8, 9, 10, 5, 6, 15, 4, 2, 15, 11, 2, 19, 3, 7, 4, 
          2, 7, 1, 6, 3}, {1, 17, 16, 13, 17, 16, 10, 18, 14, 20, 12, 20, 6, 
          5, 20, 15, 19, 7, 13, 8, 16, 9, 18, 12, 14, 15, 4, 15, 6, 16, 10, 
          12, 5, 16, 1, 13, 8, 9, 10, 5, 6, 19, 11, 2, 15, 11, 2, 19, 3, 7, 4,
           2, 7, 1, 6, 3}}}; $CellContext`locData = {{{0., 0.5}, {0.15, 
         0.18}, {0., 0.}, {0., 0.3}, {0.4, 0.}}, CompressedData["
1:eJxTTMoPSmViYGAQB2IQDQEf7LHTDA6ofA40voADdnUMDthpDjS+AJo4uj3o
+tBpdP0iaOK43ImuTwAHLYJGw8yD8RnQ5HG5A2EOAGJbFzw=
         "], {{0.309, 0.951}, {0.18, 0.033}, {-0.809, 0.588}, {1., 0.}, {
         0.241, -0.396}, {0.487, -0.209}, {0.309, -0.951}, {
         0.22, -0.232}, {-0.809, -0.588}}, CompressedData["
1:eJxTTMoPSmViYGAQAWIQverjJd8kgRP2kixhfLqb7u7fUJQx8W3Nc3vNmP5D
XzXW2Le+Dtwh13rb/sPyY97mnRf3M4DBB3sGKKh8qWbIsWbPfsstJ8r2zT9l
z8Ok3S5285w9yBR703X2EPFnMHo/Og01bz/MvJNAUSn9u/tzn/9e+fHSWfuj
CiAXPbVfUmDLdX3xBSj/7P5vGiAHPoC7A90cmDvR7LeHmrvf3jRulyfPpf1A
zwF92Ad1zyN090H1PbKfcwRssX3C0wtKt3/us79aAfL4A3sAlQaXOw==
         "]}; Null); Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->36818168]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SnapshotsSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`graphtype$$ = 
    "small", $CellContext`problemtype$$ = 2, $CellContext`showtour$$ = True, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`graphtype$$], "small", "graph type"}, {
      "small", "graph based on grid", "small planar graph", 
       "large planar graph"}}, {{
       Hold[$CellContext`showtour$$], True, "show tour"}, {False, True}}, {
      Hold[
       Row[{
         Manipulate`Place[1], 
         Spacer[20], 
         Manipulate`Place[2]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`problemtype$$], 2, "problem type"}, {
      1 -> "vehicle routing problem", 2 -> 
       "traveling salesman problem on graph", 3 -> "plotter problem", 4 -> 
       "Chinese postman problem"}}}, Typeset`size$$ = {400., {217., 223.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`graphtype$187468$$ = 
    0, $CellContext`showtour$187469$$ = 
    False, $CellContext`problemtype$187470$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`graphtype$$ = 
        "small", $CellContext`problemtype$$ = 2, $CellContext`showtour$$ = 
        True}, "ControllerVariables" :> {
        Hold[$CellContext`graphtype$$, $CellContext`graphtype$187468$$, 0], 
        Hold[$CellContext`showtour$$, $CellContext`showtour$187469$$, False], 
        Hold[$CellContext`problemtype$$, $CellContext`problemtype$187470$$, 
         False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`pull$, $CellContext`is$, $CellContext`thicks$, \
$CellContext`jj$, $CellContext`G$, $CellContext`tour$, $CellContext`mat$, \
$CellContext`locs$}, 
        SeedRandom[1]; $CellContext`pull$ = 0.1; $CellContext`is$ = 
         330; $CellContext`thicks$ = {0.014, 0.014, 0.012, 
          0.01}; $CellContext`jj$ = ReplaceAll[$CellContext`graphtype$$, 
           
           Thread[{"small", "graph based on grid", "small planar graph", 
              "large planar graph"} -> Range[4]]]; $CellContext`G$ = 
         Part[$CellContext`graphs, $CellContext`jj$]; $CellContext`locs$ = 
         Part[$CellContext`locData, $CellContext`jj$]; $CellContext`tour$ = 
         Part[$CellContext`tourdata, $CellContext`jj$, \
$CellContext`problemtype$$]; 
        If[$CellContext`problemtype$$ == 4, $CellContext`mat$ = 
          Part[$CellContext`cppmatdata, $CellContext`jj$]]; Pane[
          Which[$CellContext`problemtype$$ == 1, 
           Column[{
             Style[
             " Shortest cycle through all vertices, staying on graph edges, \
with vertex and \n edge repetition allowed", FontFamily -> "Times"], 
             $CellContext`RoutingProblemTourImage[$CellContext`jj$, \
$CellContext`tour$, EdgeThickness -> 
              Part[$CellContext`thicks$, $CellContext`jj$], \
$CellContext`ShowTour -> $CellContext`showtour$$, 
              ImageSize -> $CellContext`is$, AspectRatio -> 
              Automatic, $CellContext`ArrowPullback -> 
              0.1]}], $CellContext`problemtype$$ == 2, 
           Column[{
             Style[
             " Shortest Hamiltonian cycle: a cycle through all vertices, \
staying on graph edges\n and visiting each vertex once", FontFamily -> 
              "Times"], 
             If[$CellContext`graphtype$$ === "graph based on grid", 
              Column[{
                Style[
                " There is no Hamiltonian cycle for this graph", FontFamily -> 
                 "Times", Red], 
                
                GraphPlot[$CellContext`G$, ImageSize -> $CellContext`is$, 
                 EdgeRenderingFunction -> ({
                   Thickness[0.025 1.2], 
                   CapForm["Round"], 
                   GrayLevel[1], 
                   Line[#]}& ), Background -> Black, PlotRangePadding -> 
                 Scaled[0.05], PlotRange -> {{1, 5}, {1, 5}}, 
                 VertexRenderingFunction -> ({
                   EdgeForm[
                    Directive[
                    Thickness[0.003], Black]], 
                   FaceForm[
                    RGBColor[1, 0.8, 0.5]], 
                   Disk[#, 0.09]}& )]}], 
              $CellContext`ShortestHamiltonianCycleImage[$CellContext`jj$, \
$CellContext`tour$, 
               ImageSize -> $CellContext`is$, $CellContext`ShowTour -> \
$CellContext`showtour$$, AspectRatio -> Automatic, $CellContext`ArrowPullback -> 
               0.1, EdgeThickness -> 
               Part[$CellContext`thicks$, $CellContext`jj$]]]}], \
$CellContext`problemtype$$ == 3, 
           Column[{
             Style[
             " Shortest cycle through all edges, with travel off the edges \
allowed\n and vertex repetition allowed; pen\[Hyphen]up segments are dashed", 
              FontFamily -> "Times"], 
             $CellContext`PlotterProblemImage[$CellContext`jj$, \
$CellContext`tour$, 
              Part[$CellContext`plottermatdata, $CellContext`jj$], 
              EdgeThickness -> Part[$CellContext`thicks$, $CellContext`jj$], 
              ImageSize -> $CellContext`is$, AspectRatio -> 
              Automatic, $CellContext`ShowTour -> $CellContext`showtour$$, \
$CellContext`ArrowPullback -> $CellContext`pull$]}], \
$CellContext`problemtype$$ == 4, 
           Column[{
             Style[
             " Shortest cycle through all edges, staying on graph edges, with \
vertex and\n edge repetition allowed; like a mailman using streets", 
              FontFamily -> "Times"], 
             $CellContext`ChinesePostmanTourImage[$CellContext`jj$, \
$CellContext`tour$, $CellContext`mat$, ImageSize -> $CellContext`is$, 
              EdgeThickness -> Part[$CellContext`thicks$, $CellContext`jj$], 
              AspectRatio -> 
              Automatic, $CellContext`ShowTour -> $CellContext`showtour$$, \
$CellContext`ArrowPullback -> $CellContext`pull$]}]], 
          ImageSize -> {400, 440}]], 
      "Specifications" :> {{{$CellContext`graphtype$$, "small", 
          "graph type"}, {
         "small", "graph based on grid", "small planar graph", 
          "large planar graph"}, ControlPlacement -> 
         1}, {{$CellContext`showtour$$, True, "show tour"}, {False, True}, 
         ControlPlacement -> 2}, 
        Row[{
          Manipulate`Place[1], 
          Spacer[20], 
          Manipulate`Place[2]}], {{$CellContext`problemtype$$, 2, 
          "problem type"}, {
         1 -> "vehicle routing problem", 2 -> 
          "traveling salesman problem on graph", 3 -> "plotter problem", 4 -> 
          "Chinese postman problem"}}}, "Options" :> {TrackedSymbols -> True},
       "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{664., {274., 279.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>(($CellContext`gropts = {
        AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> False, 
         AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, 
         Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, 
         ColorOutput -> Automatic, ContentSelectable -> Automatic, 
         CoordinatesToolOptions -> Automatic, 
         DisplayFunction :> $DisplayFunction, Epilog -> {}, FormatType :> 
         TraditionalForm, Frame -> False, FrameLabel -> None, 
         FrameStyle -> {}, FrameTicks -> Automatic, FrameTicksStyle -> {}, 
         GridLines -> None, GridLinesStyle -> {}, ImageMargins -> 0., 
         ImagePadding -> All, ImageSize -> Automatic, ImageSizeRaw -> 
         Automatic, LabelStyle -> {}, Method -> Automatic, PlotLabel -> None, 
         PlotRange -> All, PlotRangeClipping -> False, PlotRangePadding -> 
         Automatic, PlotRegion -> Automatic, PreserveImageOptions -> 
         Automatic, Prolog -> {}, RotateLabel -> True, Ticks -> Automatic, 
         TicksStyle -> {}}; $CellContext`graphs = 
       Apply[Graph, {{{1, 2, 3, 4, 5}, {
            UndirectedEdge[1, 4], 
            UndirectedEdge[1, 5], 
            UndirectedEdge[2, 3], 
            UndirectedEdge[2, 4], 
            UndirectedEdge[2, 5], 
            UndirectedEdge[3, 4], 
            UndirectedEdge[3, 5]}, 
           VertexCoordinates -> {{0., 0.5}, {0.15, 0.18}, {0., 0.}, {0., 
            0.3}, {0.4, 0.}}}, {{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 
           14, 15, 16, 17, 18, 19, 20, 21, 22, 23}, {
            UndirectedEdge[1, 2], 
            UndirectedEdge[1, 6], 
            UndirectedEdge[3, 4], 
            UndirectedEdge[3, 7], 
            UndirectedEdge[3, 8], 
            UndirectedEdge[4, 8], 
            UndirectedEdge[5, 6], 
            UndirectedEdge[6, 7], 
            UndirectedEdge[7, 8], 
            UndirectedEdge[7, 11], 
            UndirectedEdge[7, 12], 
            UndirectedEdge[8, 13], 
            UndirectedEdge[9, 10], 
            UndirectedEdge[9, 14], 
            UndirectedEdge[10, 15], 
            UndirectedEdge[10, 16], 
            UndirectedEdge[11, 16], 
            UndirectedEdge[11, 17], 
            UndirectedEdge[12, 17], 
            UndirectedEdge[15, 20], 
            UndirectedEdge[16, 21], 
            UndirectedEdge[16, 22], 
            UndirectedEdge[17, 18], 
            UndirectedEdge[17, 23], 
            UndirectedEdge[19, 20], 
            UndirectedEdge[21, 22], 
            UndirectedEdge[22, 23]}, VertexCoordinates -> CompressedData["
1:eJxTTMoPSmViYGAQB2IQDQEf7LHTDA6ofA40voADdnUMDthpDjS+AJo4uj3o
+tBpdP0iaOK43ImuTwAHLYJGw8yD8RnQ5HG5A2EOAGJbFzw=
            "]}, {{1, 2, 3, 4, 5, 6, 7, 8, 9}, {
            UndirectedEdge[1, 2], 
            UndirectedEdge[1, 3], 
            UndirectedEdge[1, 4], 
            UndirectedEdge[1, 9], 
            UndirectedEdge[2, 4], 
            UndirectedEdge[2, 8], 
            UndirectedEdge[2, 9], 
            UndirectedEdge[3, 9], 
            UndirectedEdge[4, 5], 
            UndirectedEdge[4, 6], 
            UndirectedEdge[4, 7], 
            UndirectedEdge[4, 8], 
            UndirectedEdge[5, 6], 
            UndirectedEdge[5, 7], 
            UndirectedEdge[5, 8], 
            UndirectedEdge[5, 9], 
            UndirectedEdge[6, 8], 
            UndirectedEdge[7, 9], 
            UndirectedEdge[8, 9]}, 
           VertexCoordinates -> {{0.309, 0.951}, {0.18, 0.033}, {-0.809, 
            0.588}, {1., 0.}, {0.241, -0.396}, {0.487, -0.209}, {
            0.309, -0.951}, {0.22, -0.232}, {-0.809, -0.588}}}, {{1, 2, 3, 4, 
           5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {
            UndirectedEdge[1, 3], 
            UndirectedEdge[1, 6], 
            UndirectedEdge[1, 7], 
            UndirectedEdge[1, 13], 
            UndirectedEdge[1, 16], 
            UndirectedEdge[1, 17], 
            UndirectedEdge[2, 4], 
            UndirectedEdge[2, 7], 
            UndirectedEdge[2, 11], 
            UndirectedEdge[2, 15], 
            UndirectedEdge[2, 19], 
            UndirectedEdge[3, 6], 
            UndirectedEdge[3, 7], 
            UndirectedEdge[3, 19], 
            UndirectedEdge[4, 7], 
            UndirectedEdge[4, 15], 
            UndirectedEdge[5, 6], 
            UndirectedEdge[5, 10], 
            UndirectedEdge[5, 12], 
            UndirectedEdge[5, 16], 
            UndirectedEdge[5, 20], 
            UndirectedEdge[6, 15], 
            UndirectedEdge[6, 16], 
            UndirectedEdge[6, 19], 
            UndirectedEdge[6, 20], 
            UndirectedEdge[7, 13], 
            UndirectedEdge[7, 19], 
            UndirectedEdge[8, 9], 
            UndirectedEdge[8, 13], 
            UndirectedEdge[8, 16], 
            UndirectedEdge[9, 10], 
            UndirectedEdge[9, 16], 
            UndirectedEdge[9, 18], 
            UndirectedEdge[10, 12], 
            UndirectedEdge[10, 16], 
            UndirectedEdge[10, 18], 
            UndirectedEdge[11, 15], 
            UndirectedEdge[11, 19], 
            UndirectedEdge[12, 14], 
            UndirectedEdge[12, 18], 
            UndirectedEdge[12, 20], 
            UndirectedEdge[13, 16], 
            UndirectedEdge[13, 17], 
            UndirectedEdge[14, 15], 
            UndirectedEdge[14, 18], 
            UndirectedEdge[14, 20], 
            UndirectedEdge[15, 19], 
            UndirectedEdge[15, 20], 
            UndirectedEdge[16, 17]}, VertexCoordinates -> CompressedData["
1:eJxTTMoPSmViYGAQAWIQverjJd8kgRP2kixhfLqb7u7fUJQx8W3Nc3vNmP5D
XzXW2Le+Dtwh13rb/sPyY97mnRf3M4DBB3sGKKh8qWbIsWbPfsstJ8r2zT9l
z8Ok3S5285w9yBR703X2EPFnMHo/Og01bz/MvJNAUSn9u/tzn/9e+fHSWfuj
CiAXPbVfUmDLdX3xBSj/7P5vGiAHPoC7A90cmDvR7LeHmrvf3jRulyfPpf1A
zwF92Ad1zyN090H1PbKfcwRssX3C0wtKt3/us79aAfL4A3sAlQaXOw==
            "]}}, {1}]; $CellContext`Extend[
         Pattern[$CellContext`a, 
          Blank[]]] := Append[$CellContext`a, 
         Part[$CellContext`a, 1]]; $CellContext`ColorsForColoring = 
       Join[{Red, Green, Blue, Cyan, Magenta, Yellow, Orange, Purple, Brown, 
          Black}, 
         Table[
          ColorData[
          "Legacy", $CellContext`i], {$CellContext`i, 
           40}]]; $CellContext`options[$CellContext`ChinesePostmanTourImage] = \
{$CellContext`ArrowPullback -> Automatic, EdgeThickness -> 
         0.008, $CellContext`ShowTour -> 
         True}; $CellContext`ChinesePostmanTourImage[
         Pattern[$CellContext`jj, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`mat, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`G, $CellContext`nv, $CellContext`pull, \
$CellContext`th, $CellContext`show, $CellContext`cy, $CellContext`n, \
$CellContext`locs, $CellContext`pr, $CellContext`xR, $CellContext`cyEdges, \
$CellContext`cyEdgesSorted, $CellContext`cyEdgesIndexed, \
$CellContext`matchedverts, $CellContext`odds, $CellContext`v, \
$CellContext`i}, $CellContext`G = 
          Part[$CellContext`graphs, $CellContext`jj]; $CellContext`nv = 
          VertexCount[$CellContext`G]; {$CellContext`th, $CellContext`pull, \
$CellContext`show} = ReplaceAll[
            
            ReplaceAll[{
             EdgeThickness, $CellContext`ArrowPullback, \
$CellContext`ShowTour}, {$CellContext`opts}], 
            $CellContext`options[$CellContext`ChinesePostmanTourImage]]; \
$CellContext`pull = 
          ReplaceAll[$CellContext`pull, {
            Automatic -> 0.05, None -> 
             0}]; $CellContext`cy = $CellContext`Extend[$CellContext`tour]; \
$CellContext`n = VertexCount[$CellContext`G]; $CellContext`locs = 
          Part[$CellContext`locData, $CellContext`jj]; $CellContext`pr = {{
             Min[
              Map[First, $CellContext`locs]], 
             Max[
              Map[First, $CellContext`locs]]}, {
             Min[
              Map[Last, $CellContext`locs]], 
             Max[
              Map[Last, $CellContext`locs]]}}; $CellContext`xR = 
          Part[$CellContext`pr, 1, 2] - 
           Part[$CellContext`pr, 1, 1]; $CellContext`cyEdges = 
          Partition[$CellContext`cy, 2, 1]; $CellContext`cyEdgesSorted = 
          Map[Sort, $CellContext`cyEdges]; $CellContext`cyEdgesIndexed = 
          MapIndexed[{
             Apply[Rule, #], 
             Part[#2, 1]}& , $CellContext`cyEdges]; $CellContext`matchedverts = 
          Apply[List, $CellContext`mat, {1}]; $CellContext`odds = {
            EdgeForm[
             Directive[
              Thickness[0.002], Black]], 
            MapIndexed[{
              Part[$CellContext`ColorsForColoring, 
               Part[#2, 1]], 
              Disk[
               Part[$CellContext`locs, 
                Part[#, 1]], $CellContext`xR 0.02], 
              Disk[
               Part[$CellContext`locs, 
                Part[#, 2]], $CellContext`xR 
               0.02]}& , $CellContext`matchedverts]}; Show[
           Graphics[
            Apply[Rectangle, 
             Transpose[$CellContext`pr]]], 
           GraphPlot[$CellContext`G, EdgeRenderingFunction -> ({
              Thickness[0.025 1.2], 
              CapForm["Round"], 
              GrayLevel[1], 
              Line[#]}& ), VertexRenderingFunction -> ({}& )], 
           If[$CellContext`show, 
            
            GraphPlot[$CellContext`cyEdgesIndexed, 
             EdgeRenderingFunction -> (($CellContext`i = #3; $CellContext`\
\[Rho] = $CellContext`i/Length[$CellContext`cy]; {
                Thickness[$CellContext`th], 
                Arrowheads[4 $CellContext`th], 
                Hue[1 - $CellContext`\[Rho]/2, 0.7, 1], 
                
                Arrow[#, 
                 Norm[Part[#, 1] - Part[#, -1]] {$CellContext`pull/
                   5, $CellContext`pull}]})& ), VertexCoordinateRules -> 
             Thread[Range[$CellContext`n] -> $CellContext`locs]], {}], 
           Graphics[{
             Thickness[0.01], 
             
             Map[{$CellContext`v = 
                Part[$CellContext`locs, #]; $CellContext`odds, 
               RGBColor[1, 0.8, 0.5], White, 
               EdgeForm[
                Directive[
                 Thickness[0.002], Black]], 
               
               Disk[$CellContext`v, $CellContext`xR 
                If[$CellContext`v == Part[$CellContext`locs, 
                    Part[$CellContext`cy, 1]], 0.02 1.5, 0.02]]}& , 
              Complement[
               Range[$CellContext`nv], 
               Flatten[$CellContext`matchedverts]]]}], 
           Apply[Sequence, 
            FilterRules[{$CellContext`opts}, $CellContext`gropts]], 
           Background -> Black, PlotRange -> $CellContext`pr, 
           ImageSize -> {500, 500}, PlotRangePadding -> Scaled[0.05], Frame -> 
           True, FrameTicks -> 
           False]]; $CellContext`options[$CellContext`PlotterProblemImage] = \
{$CellContext`ArrowPullback -> Automatic, EdgeThickness -> 
         0.008, $CellContext`ShowTour -> 
         True}; $CellContext`PlotterProblemImage[
         Pattern[$CellContext`jj, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`mat1, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`odds, $CellContext`locs, $CellContext`pr, \
$CellContext`GOdd, $CellContext`XXedges, $CellContext`len, $CellContext`mat, \
$CellContext`i, $CellContext`cy, $CellContext`edgesg, $CellContext`cyEdges, \
$CellContext`pathData, $CellContext`edge, $CellContext`newAdj, \
$CellContext`wts, $CellContext`reordermat, $CellContext`g, $CellContext`nv, \
$CellContext`th, $CellContext`pull, $CellContext`show, $CellContext`xR, \
$CellContext`matchedverts, $CellContext`cyEdgesSorted, $CellContext`dashed, \
$CellContext`v, $CellContext`\[Rho], $CellContext`cyEdgesIndexed}, \
$CellContext`g = Part[$CellContext`graphs, $CellContext`jj]; $CellContext`nv = 
          VertexCount[$CellContext`g]; {$CellContext`th, $CellContext`pull, \
$CellContext`show} = ReplaceAll[
            
            ReplaceAll[{
             EdgeThickness, $CellContext`ArrowPullback, \
$CellContext`ShowTour}, {$CellContext`opts}], 
            $CellContext`options[$CellContext`PlotterProblemImage]]; \
$CellContext`pull = 
          ReplaceAll[$CellContext`pull, {
            Automatic -> 0.05, None -> 0}]; $CellContext`odds = Flatten[
            Position[
             VertexDegree[$CellContext`g], 
             PatternTest[
              Pattern[$CellContext`x, 
               Blank[]], OddQ]]]; $CellContext`locs = 
          Part[$CellContext`locData, $CellContext`jj]; $CellContext`pr = {{
             Min[
              Map[First, $CellContext`locs]], 
             Max[
              Map[First, $CellContext`locs]]}, {
             Min[
              Map[Last, $CellContext`locs]], 
             Max[
              Map[Last, $CellContext`locs]]}}; $CellContext`xR = 
          Part[$CellContext`pr, 1, 2] - 
           Part[$CellContext`pr, 1, 
            1]; $CellContext`cy = $CellContext`Extend[$CellContext`tour]; \
$CellContext`mat = ReplaceAll[$CellContext`mat1, UndirectedEdge[
              Pattern[$CellContext`i, 
               Blank[]], 
              Pattern[$CellContext`j, 
               Blank[]]] :> If[Part[
                Position[$CellContext`cy, $CellContext`i], 1, 1] < Part[
                Position[$CellContext`cy, $CellContext`j], 1, 1], 
              UndirectedEdge[$CellContext`i, $CellContext`j], 
              
              UndirectedEdge[$CellContext`j, $CellContext`i]]]; \
$CellContext`matchedverts = 
          Apply[List, $CellContext`mat1, {1}]; $CellContext`odds = {
            EdgeForm[
             Directive[
              Thickness[0.002], Black]], 
            MapIndexed[{
              Part[$CellContext`ColorsForColoring, 
               Part[#2, 1]], 
              Disk[
               Part[$CellContext`locs, 
                Part[#, 1]], $CellContext`xR 0.02], 
              Disk[
               Part[$CellContext`locs, 
                Part[#, 2]], $CellContext`xR 
               0.02]}& , $CellContext`matchedverts]}; $CellContext`edgesg = 
          EdgeList[$CellContext`g]; $CellContext`cyEdges = 
          Partition[$CellContext`cy, 2, 1]; $CellContext`cyEdgesSorted = 
          Map[Sort, $CellContext`cyEdges]; $CellContext`cyEdgesIndexed = 
          MapIndexed[{
             Apply[Rule, #], 
             Part[#2, 1]}& , $CellContext`cyEdges]; $CellContext`pathData = 
          Table[
            Not[Position[
               Take[$CellContext`cyEdges, $CellContext`i - 1], 
               
               Part[$CellContext`cyEdges, $CellContext`i]] != {}], \
{$CellContext`i, 
             Length[$CellContext`cyEdges]}]; $CellContext`dashed = 
          Map[False& , $CellContext`cyEdgesIndexed]; Show[
           GraphPlot[$CellContext`g, EdgeRenderingFunction -> ({
              Thickness[0.025 1.2], 
              CapForm["Round"], 
              GrayLevel[1], 
              Line[#]}& ), VertexRenderingFunction -> ({}& )], 
           If[$CellContext`show, 
            
            GraphPlot[$CellContext`cyEdgesIndexed, 
             EdgeRenderingFunction -> (($CellContext`\[Rho] = #3/
                Length[$CellContext`cy]; {
                Thickness[$CellContext`th], 
                Arrowheads[4 $CellContext`th], 
                Hue[1 - $CellContext`\[Rho]/2, 0.7, 1], 
                If[
                 And[
                  MemberQ[$CellContext`mat, 
                   Apply[UndirectedEdge, #2]], 
                  Part[$CellContext`pathData, #3]], 
                 Dashing[{0.01, 0.01}]], 
                
                Arrow[#, 
                 Norm[Part[#, 1] - Part[#, -1]] {$CellContext`pull/
                   5, $CellContext`pull}]})& ), VertexCoordinateRules -> 
             Thread[Range[
                 VertexCount[$CellContext`g]] -> $CellContext`locs]], {}], 
           Graphics[{
             Thickness[0.01], 
             
             Map[{$CellContext`v = 
                Part[$CellContext`locs, #]; $CellContext`odds, 
               RGBColor[1, 0.8, 0.5], White, 
               EdgeForm[
                Directive[
                 Thickness[0.002], Black]], 
               
               Disk[$CellContext`v, $CellContext`xR 
                If[$CellContext`v == Part[$CellContext`locs, 
                    Part[$CellContext`cy, 1]], 0.02 1.5, 0.02]]}& , 
              Complement[
               Range[$CellContext`nv], 
               Flatten[$CellContext`matchedverts]]]}], 
           Apply[Sequence, 
            FilterRules[{$CellContext`opts}, $CellContext`gropts]], 
           PlotRange -> $CellContext`pr, Frame -> True, ImageSize -> 350, 
           Background -> GrayLevel[0.], PlotRangePadding -> 
           Scaled[0.05]]]; \
$CellContext`options[$CellContext`ShortestHamiltonianCycleImage] = \
{$CellContext`ArrowPullback -> Automatic, EdgeThickness -> 
         0.008, $CellContext`ShowTour -> 
         True}; $CellContext`ShortestHamiltonianCycleImage[
         Pattern[$CellContext`jj, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`tourAns, $CellContext`locs, $CellContext`pr, \
$CellContext`n, $CellContext`th, $CellContext`pull, $CellContext`G, \
$CellContext`cyEdgesIndexed, $CellContext`xR, $CellContext`i, $CellContext`\
\[Rho]}, $CellContext`G = 
          Part[$CellContext`graphs, $CellContext`jj]; {$CellContext`th, \
$CellContext`pull, $CellContext`show} = ReplaceAll[
            
            ReplaceAll[{
             EdgeThickness, $CellContext`ArrowPullback, \
$CellContext`ShowTour}, {$CellContext`opts}], 
            $CellContext`options[$CellContext`ShortestHamiltonianCycleImage]]; \
$CellContext`pull = 
          ReplaceAll[$CellContext`pull, {
            Automatic -> 0.05, None -> 0}]; $CellContext`tourAns = 
          Apply[UndirectedEdge, 
            Partition[
             $CellContext`Extend[$CellContext`tour], 2, 1], {
            1}]; $CellContext`locs = 
          Part[$CellContext`locData, $CellContext`jj]; $CellContext`n = 
          VertexCount[$CellContext`G]; $CellContext`pr = {{
             Min[
              Map[First, $CellContext`locs]], 
             Max[
              Map[First, $CellContext`locs]]}, {
             Min[
              Map[Last, $CellContext`locs]], 
             Max[
              Map[Last, $CellContext`locs]]}}; $CellContext`xR = 
          Part[$CellContext`pr, 1, 2] - 
           Part[$CellContext`pr, 1, 1]; $CellContext`cyEdgesIndexed = 
          MapIndexed[{
             Apply[Rule, #], 
             Part[#2, 1]}& , $CellContext`tourAns]; Show[
           GraphPlot[
            Apply[Rule, 
             EdgeList[$CellContext`G], {1}], VertexCoordinateRules -> 
            Thread[Range[$CellContext`n] -> $CellContext`locs], 
            EdgeRenderingFunction -> ({
              Thickness[0.025 1.2], 
              CapForm["Round"], 
              GrayLevel[1], 
              Line[#]}& ), VertexRenderingFunction -> ({}& )], 
           If[$CellContext`show, 
            
            GraphPlot[$CellContext`cyEdgesIndexed, 
             EdgeRenderingFunction -> (($CellContext`i = #3; $CellContext`\
\[Rho] = $CellContext`i/Length[$CellContext`tourAns]; {
                Thickness[$CellContext`th], 
                Arrowheads[4 $CellContext`th], 
                Hue[1 - $CellContext`\[Rho]/2, 0.7, 1], 
                
                Arrow[#, 
                 Norm[Part[#, 1] - Part[#, -1]] {$CellContext`pull 0/
                   5, $CellContext`pull}]})& ), VertexCoordinateRules -> 
             Thread[Range[$CellContext`n] -> $CellContext`locs]], {}], 
           Graphics[{
             Thickness[0.01], 
             Map[{
               If[# == Part[$CellContext`locs, 
                  Part[$CellContext`tourAns, 1, 1]], 
                GrayLevel[0.85], 
                Lighter[Orange]], 
               EdgeForm[
                Directive[
                 Thickness[0.002], Black]], 
               Disk[#, $CellContext`xR If[# == Part[$CellContext`locs, 
                    Part[$CellContext`tourAns, 1, 1]], 0.02 1.5, 
                  0.02]]}& , $CellContext`locs]}], {}, 
           Apply[Sequence, 
            FilterRules[{$CellContext`opts}, $CellContext`gropts]], 
           Background -> Black, PlotRange -> $CellContext`pr, ImageSize -> 
           500, PlotRangePadding -> Scaled[0.05], Frame -> True, FrameTicks -> 
           False]]; \
$CellContext`options[$CellContext`RoutingProblemTourImage] = \
{$CellContext`ArrowPullback -> Automatic, EdgeThickness -> 
         0.008, $CellContext`ShowTour -> 
         True}; $CellContext`RoutingProblemTourImage[
         Pattern[$CellContext`jj, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`pr, $CellContext`G1, $CellContext`n, \
$CellContext`edges, $CellContext`locs, $CellContext`g2, $CellContext`tourAns, \
$CellContext`tourbadEdges, $CellContext`tourbad, $CellContext`tourgood, \
$CellContext`G, $CellContext`th, $CellContext`pull, $CellContext`show, \
$CellContext`xR, $CellContext`cy, $CellContext`cyEdges, \
$CellContext`cyEdgesSorted, $CellContext`cyEdgesIndexed, \
$CellContext`\[Rho]}, $CellContext`G = 
          Part[$CellContext`graphs, $CellContext`jj]; {$CellContext`th, \
$CellContext`pull, $CellContext`show} = ReplaceAll[
            
            ReplaceAll[{
             EdgeThickness, $CellContext`ArrowPullback, \
$CellContext`ShowTour}, {$CellContext`opts}], 
            $CellContext`options[$CellContext`RoutingProblemTourImage]]; \
$CellContext`pull = 
          ReplaceAll[$CellContext`pull, {
            Automatic -> 0.0002, None -> 0}]; $CellContext`n = 
          VertexCount[$CellContext`G]; $CellContext`edges = 
          EdgeList[$CellContext`G]; $CellContext`locs = 
          Part[$CellContext`locData, $CellContext`jj]; $CellContext`pr = {{
             Min[
              Map[First, $CellContext`locs]], 
             Max[
              Map[First, $CellContext`locs]]}, {
             Min[
              Map[Last, $CellContext`locs]], 
             Max[
              Map[Last, $CellContext`locs]]}}; $CellContext`xR = 
          Part[$CellContext`pr, 1, 2] - 
           Part[$CellContext`pr, 1, 
            1]; $CellContext`cy = $CellContext`Extend[$CellContext`tour]; \
$CellContext`cyEdges = 
          Partition[$CellContext`cy, 2, 1]; $CellContext`cyEdgesSorted = 
          Map[Sort, $CellContext`cyEdges]; $CellContext`cyEdgesIndexed = 
          MapIndexed[{
             Apply[Rule, #], 
             Part[#2, 1]}& , $CellContext`cyEdges]; Show[
           GraphPlot[$CellContext`G, EdgeRenderingFunction -> ({
              Thickness[0.025 1.2], 
              CapForm["Round"], 
              GrayLevel[1], 
              Line[#]}& ), VertexRenderingFunction -> ({}& )], 
           If[$CellContext`show, 
            
            GraphPlot[$CellContext`cyEdgesIndexed, 
             EdgeRenderingFunction -> (($CellContext`i = #3; $CellContext`\
\[Rho] = $CellContext`i/Length[$CellContext`cy]; {
                Thickness[$CellContext`th], 
                Arrowheads[4 $CellContext`th], 
                Hue[1 - $CellContext`\[Rho]/2, 0.7, 1], 
                
                Arrow[#, 
                 Norm[Part[#, 1] - Part[#, -1]] {$CellContext`pull 0/
                   5, $CellContext`pull}]})& ), VertexCoordinateRules -> 
             Thread[Range[$CellContext`n] -> $CellContext`locs]], {}], 
           Graphics[{
             Thickness[0.01], 
             Map[{
               If[# == Part[$CellContext`locs, 
                  Part[$CellContext`cy, 1]], 
                GrayLevel[0.85], 
                Lighter[Orange]], 
               EdgeForm[
                Directive[
                 Thickness[0.002], Black]], 
               Disk[#, $CellContext`xR If[# == Part[$CellContext`locs, 
                    Part[$CellContext`cy, 1]], 0.02 1.5, 
                  0.02]]}& , $CellContext`locs]}], 
           Apply[Sequence, 
            FilterRules[{$CellContext`opts}, $CellContext`gropts]], 
           Background -> Black, PlotRange -> $CellContext`pr, ImageSize -> 
           500, PlotRangePadding -> Scaled[0.05], Frame -> True, FrameTicks -> 
           False]]; $CellContext`plottermatdata = {{
          UndirectedEdge[2, 4], 
          UndirectedEdge[3, 5]}, {
          UndirectedEdge[2, 3], 
          UndirectedEdge[5, 6], 
          UndirectedEdge[7, 10], 
          UndirectedEdge[11, 22], 
          UndirectedEdge[13, 18], 
          UndirectedEdge[14, 19]}, {
          UndirectedEdge[5, 7], 
          UndirectedEdge[6, 8]}, {
          UndirectedEdge[2, 4], 
          UndirectedEdge[5, 6], 
          UndirectedEdge[8, 10], 
          UndirectedEdge[11, 15], 
          UndirectedEdge[12, 20], 
          UndirectedEdge[13, 17]}}; $CellContext`cppmatdata = {{
          UndirectedEdge[2, 5], 
          UndirectedEdge[3, 4]}, {
          UndirectedEdge[2, 5], 
          UndirectedEdge[3, 13], 
          UndirectedEdge[6, 7], 
          UndirectedEdge[10, 14], 
          UndirectedEdge[11, 18], 
          UndirectedEdge[19, 22]}, {
          UndirectedEdge[5, 7], 
          UndirectedEdge[6, 8]}, {
          UndirectedEdge[2, 11], 
          UndirectedEdge[4, 15], 
          UndirectedEdge[5, 6], 
          UndirectedEdge[8, 13], 
          UndirectedEdge[10, 17], 
          UndirectedEdge[12, 20]}}; $CellContext`tourdata = {{{1, 4, 3, 5, 2, 
          4}, {1, 4, 2, 3, 5}, {1, 5, 3, 5, 2, 4, 3, 2, 4}, {1, 5, 2, 5, 3, 4,
           3, 2, 4}}, {{1, 2, 1, 6, 5, 6, 7, 11, 16, 10, 15, 20, 19, 20, 15, 
          10, 9, 14, 9, 10, 16, 21, 22, 23, 17, 18, 17, 12, 7, 3, 4, 8, 13, 8,
           7, 6}, {}, {1, 6, 5, 6, 7, 10, 15, 20, 19, 14, 9, 10, 16, 21, 22, 
          11, 16, 22, 23, 17, 12, 7, 11, 17, 18, 13, 8, 7, 3, 8, 4, 3, 2}, {1,
           6, 7, 12, 17, 18, 17, 11, 17, 23, 22, 21, 16, 22, 16, 10, 15, 20, 
          19, 20, 15, 10, 9, 14, 9, 10, 16, 11, 7, 8, 13, 8, 3, 8, 4, 3, 7, 6,
           5, 6, 1, 2}}, {{1, 3, 9, 7, 5, 8, 2, 8, 6, 4}, {1, 2, 4, 6, 8, 5, 
          7, 9, 3}, {1, 9, 7, 5, 9, 8, 6, 8, 5, 7, 4, 6, 5, 4, 8, 2, 9, 3, 1, 
          4, 2}, {1, 9, 7, 5, 9, 8, 6, 8, 5, 7, 4, 6, 5, 4, 8, 2, 9, 3, 1, 4, 
          2}}, {{1, 16, 8, 9, 18, 10, 5, 12, 20, 14, 15, 11, 2, 4, 2, 19, 6, 
          3, 7, 13, 17}, {1, 3, 6, 5, 16, 8, 9, 10, 18, 12, 20, 14, 15, 11, 
          19, 2, 4, 7, 13, 17}, {1, 17, 13, 17, 16, 9, 18, 14, 20, 12, 20, 6, 
          5, 20, 15, 11, 19, 15, 14, 12, 18, 10, 8, 16, 13, 7, 19, 6, 16, 10, 
          12, 5, 16, 1, 13, 8, 9, 10, 5, 6, 15, 4, 2, 15, 11, 2, 19, 3, 7, 4, 
          2, 7, 1, 6, 3}, {1, 17, 16, 13, 17, 16, 10, 18, 14, 20, 12, 20, 6, 
          5, 20, 15, 19, 7, 13, 8, 16, 9, 18, 12, 14, 15, 4, 15, 6, 16, 10, 
          12, 5, 16, 1, 13, 8, 9, 10, 5, 6, 19, 11, 2, 15, 11, 2, 19, 3, 7, 4,
           2, 7, 1, 6, 3}}}; $CellContext`locData = {{{0., 0.5}, {0.15, 
         0.18}, {0., 0.}, {0., 0.3}, {0.4, 0.}}, CompressedData["
1:eJxTTMoPSmViYGAQB2IQDQEf7LHTDA6ofA40voADdnUMDthpDjS+AJo4uj3o
+tBpdP0iaOK43ImuTwAHLYJGw8yD8RnQ5HG5A2EOAGJbFzw=
         "], {{0.309, 0.951}, {0.18, 0.033}, {-0.809, 0.588}, {1., 0.}, {
         0.241, -0.396}, {0.487, -0.209}, {0.309, -0.951}, {
         0.22, -0.232}, {-0.809, -0.588}}, CompressedData["
1:eJxTTMoPSmViYGAQAWIQverjJd8kgRP2kixhfLqb7u7fUJQx8W3Nc3vNmP5D
XzXW2Le+Dtwh13rb/sPyY97mnRf3M4DBB3sGKKh8qWbIsWbPfsstJ8r2zT9l
z8Ok3S5285w9yBR703X2EPFnMHo/Og01bz/MvJNAUSn9u/tzn/9e+fHSWfuj
CiAXPbVfUmDLdX3xBSj/7P5vGiAHPoC7A90cmDvR7LeHmrvf3jRulyfPpf1A
zwF92Ad1zyN090H1PbKfcwRssX3C0wtKt3/us79aAfL4A3sAlQaXOw==
         "]}; Null); Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->226923352],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`graphtype$$ = 
    "small", $CellContext`problemtype$$ = 1, $CellContext`showtour$$ = True, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`graphtype$$], "small", "graph type"}, {
      "small", "graph based on grid", "small planar graph", 
       "large planar graph"}}, {{
       Hold[$CellContext`showtour$$], True, "show tour"}, {False, True}}, {
      Hold[
       Row[{
         Manipulate`Place[1], 
         Spacer[20], 
         Manipulate`Place[2]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`problemtype$$], 1, "problem type"}, {
      1 -> "vehicle routing problem", 2 -> 
       "traveling salesman problem on graph", 3 -> "plotter problem", 4 -> 
       "Chinese postman problem"}}}, Typeset`size$$ = {400., {217., 223.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`graphtype$187530$$ = 
    0, $CellContext`showtour$187531$$ = 
    False, $CellContext`problemtype$187532$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`graphtype$$ = 
        "small", $CellContext`problemtype$$ = 1, $CellContext`showtour$$ = 
        True}, "ControllerVariables" :> {
        Hold[$CellContext`graphtype$$, $CellContext`graphtype$187530$$, 0], 
        Hold[$CellContext`showtour$$, $CellContext`showtour$187531$$, False], 
        Hold[$CellContext`problemtype$$, $CellContext`problemtype$187532$$, 
         False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`pull$, $CellContext`is$, $CellContext`thicks$, \
$CellContext`jj$, $CellContext`G$, $CellContext`tour$, $CellContext`mat$, \
$CellContext`locs$}, 
        SeedRandom[1]; $CellContext`pull$ = 0.1; $CellContext`is$ = 
         330; $CellContext`thicks$ = {0.014, 0.014, 0.012, 
          0.01}; $CellContext`jj$ = ReplaceAll[$CellContext`graphtype$$, 
           
           Thread[{"small", "graph based on grid", "small planar graph", 
              "large planar graph"} -> Range[4]]]; $CellContext`G$ = 
         Part[$CellContext`graphs, $CellContext`jj$]; $CellContext`locs$ = 
         Part[$CellContext`locData, $CellContext`jj$]; $CellContext`tour$ = 
         Part[$CellContext`tourdata, $CellContext`jj$, \
$CellContext`problemtype$$]; 
        If[$CellContext`problemtype$$ == 4, $CellContext`mat$ = 
          Part[$CellContext`cppmatdata, $CellContext`jj$]]; Pane[
          Which[$CellContext`problemtype$$ == 1, 
           Column[{
             Style[
             " Shortest cycle through all vertices, staying on graph edges, \
with vertex and \n edge repetition allowed", FontFamily -> "Times"], 
             $CellContext`RoutingProblemTourImage[$CellContext`jj$, \
$CellContext`tour$, EdgeThickness -> 
              Part[$CellContext`thicks$, $CellContext`jj$], \
$CellContext`ShowTour -> $CellContext`showtour$$, 
              ImageSize -> $CellContext`is$, AspectRatio -> 
              Automatic, $CellContext`ArrowPullback -> 
              0.1]}], $CellContext`problemtype$$ == 2, 
           Column[{
             Style[
             " Shortest Hamiltonian cycle: a cycle through all vertices, \
staying on graph edges\n and visiting each vertex once", FontFamily -> 
              "Times"], 
             If[$CellContext`graphtype$$ === "graph based on grid", 
              Column[{
                Style[
                " There is no Hamiltonian cycle for this graph", FontFamily -> 
                 "Times", Red], 
                
                GraphPlot[$CellContext`G$, ImageSize -> $CellContext`is$, 
                 EdgeRenderingFunction -> ({
                   Thickness[0.025 1.2], 
                   CapForm["Round"], 
                   GrayLevel[1], 
                   Line[#]}& ), Background -> Black, PlotRangePadding -> 
                 Scaled[0.05], PlotRange -> {{1, 5}, {1, 5}}, 
                 VertexRenderingFunction -> ({
                   EdgeForm[
                    Directive[
                    Thickness[0.003], Black]], 
                   FaceForm[
                    RGBColor[1, 0.8, 0.5]], 
                   Disk[#, 0.09]}& )]}], 
              $CellContext`ShortestHamiltonianCycleImage[$CellContext`jj$, \
$CellContext`tour$, 
               ImageSize -> $CellContext`is$, $CellContext`ShowTour -> \
$CellContext`showtour$$, AspectRatio -> Automatic, $CellContext`ArrowPullback -> 
               0.1, EdgeThickness -> 
               Part[$CellContext`thicks$, $CellContext`jj$]]]}], \
$CellContext`problemtype$$ == 3, 
           Column[{
             Style[
             " Shortest cycle through all edges, with travel off the edges \
allowed\n and vertex repetition allowed; pen\[Hyphen]up segments are dashed", 
              FontFamily -> "Times"], 
             $CellContext`PlotterProblemImage[$CellContext`jj$, \
$CellContext`tour$, 
              Part[$CellContext`plottermatdata, $CellContext`jj$], 
              EdgeThickness -> Part[$CellContext`thicks$, $CellContext`jj$], 
              ImageSize -> $CellContext`is$, AspectRatio -> 
              Automatic, $CellContext`ShowTour -> $CellContext`showtour$$, \
$CellContext`ArrowPullback -> $CellContext`pull$]}], \
$CellContext`problemtype$$ == 4, 
           Column[{
             Style[
             " Shortest cycle through all edges, staying on graph edges, with \
vertex and\n edge repetition allowed; like a mailman using streets", 
              FontFamily -> "Times"], 
             $CellContext`ChinesePostmanTourImage[$CellContext`jj$, \
$CellContext`tour$, $CellContext`mat$, ImageSize -> $CellContext`is$, 
              EdgeThickness -> Part[$CellContext`thicks$, $CellContext`jj$], 
              AspectRatio -> 
              Automatic, $CellContext`ShowTour -> $CellContext`showtour$$, \
$CellContext`ArrowPullback -> $CellContext`pull$]}]], 
          ImageSize -> {400, 440}]], 
      "Specifications" :> {{{$CellContext`graphtype$$, "small", 
          "graph type"}, {
         "small", "graph based on grid", "small planar graph", 
          "large planar graph"}, ControlPlacement -> 
         1}, {{$CellContext`showtour$$, True, "show tour"}, {False, True}, 
         ControlPlacement -> 2}, 
        Row[{
          Manipulate`Place[1], 
          Spacer[20], 
          Manipulate`Place[2]}], {{$CellContext`problemtype$$, 1, 
          "problem type"}, {
         1 -> "vehicle routing problem", 2 -> 
          "traveling salesman problem on graph", 3 -> "plotter problem", 4 -> 
          "Chinese postman problem"}}}, "Options" :> {TrackedSymbols -> True},
       "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{664., {274., 279.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>(($CellContext`gropts = {
        AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> False, 
         AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, 
         Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, 
         ColorOutput -> Automatic, ContentSelectable -> Automatic, 
         CoordinatesToolOptions -> Automatic, 
         DisplayFunction :> $DisplayFunction, Epilog -> {}, FormatType :> 
         TraditionalForm, Frame -> False, FrameLabel -> None, 
         FrameStyle -> {}, FrameTicks -> Automatic, FrameTicksStyle -> {}, 
         GridLines -> None, GridLinesStyle -> {}, ImageMargins -> 0., 
         ImagePadding -> All, ImageSize -> Automatic, ImageSizeRaw -> 
         Automatic, LabelStyle -> {}, Method -> Automatic, PlotLabel -> None, 
         PlotRange -> All, PlotRangeClipping -> False, PlotRangePadding -> 
         Automatic, PlotRegion -> Automatic, PreserveImageOptions -> 
         Automatic, Prolog -> {}, RotateLabel -> True, Ticks -> Automatic, 
         TicksStyle -> {}}; $CellContext`graphs = 
       Apply[Graph, {{{1, 2, 3, 4, 5}, {
            UndirectedEdge[1, 4], 
            UndirectedEdge[1, 5], 
            UndirectedEdge[2, 3], 
            UndirectedEdge[2, 4], 
            UndirectedEdge[2, 5], 
            UndirectedEdge[3, 4], 
            UndirectedEdge[3, 5]}, 
           VertexCoordinates -> {{0., 0.5}, {0.15, 0.18}, {0., 0.}, {0., 
            0.3}, {0.4, 0.}}}, {{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 
           14, 15, 16, 17, 18, 19, 20, 21, 22, 23}, {
            UndirectedEdge[1, 2], 
            UndirectedEdge[1, 6], 
            UndirectedEdge[3, 4], 
            UndirectedEdge[3, 7], 
            UndirectedEdge[3, 8], 
            UndirectedEdge[4, 8], 
            UndirectedEdge[5, 6], 
            UndirectedEdge[6, 7], 
            UndirectedEdge[7, 8], 
            UndirectedEdge[7, 11], 
            UndirectedEdge[7, 12], 
            UndirectedEdge[8, 13], 
            UndirectedEdge[9, 10], 
            UndirectedEdge[9, 14], 
            UndirectedEdge[10, 15], 
            UndirectedEdge[10, 16], 
            UndirectedEdge[11, 16], 
            UndirectedEdge[11, 17], 
            UndirectedEdge[12, 17], 
            UndirectedEdge[15, 20], 
            UndirectedEdge[16, 21], 
            UndirectedEdge[16, 22], 
            UndirectedEdge[17, 18], 
            UndirectedEdge[17, 23], 
            UndirectedEdge[19, 20], 
            UndirectedEdge[21, 22], 
            UndirectedEdge[22, 23]}, VertexCoordinates -> CompressedData["
1:eJxTTMoPSmViYGAQB2IQDQEf7LHTDA6ofA40voADdnUMDthpDjS+AJo4uj3o
+tBpdP0iaOK43ImuTwAHLYJGw8yD8RnQ5HG5A2EOAGJbFzw=
            "]}, {{1, 2, 3, 4, 5, 6, 7, 8, 9}, {
            UndirectedEdge[1, 2], 
            UndirectedEdge[1, 3], 
            UndirectedEdge[1, 4], 
            UndirectedEdge[1, 9], 
            UndirectedEdge[2, 4], 
            UndirectedEdge[2, 8], 
            UndirectedEdge[2, 9], 
            UndirectedEdge[3, 9], 
            UndirectedEdge[4, 5], 
            UndirectedEdge[4, 6], 
            UndirectedEdge[4, 7], 
            UndirectedEdge[4, 8], 
            UndirectedEdge[5, 6], 
            UndirectedEdge[5, 7], 
            UndirectedEdge[5, 8], 
            UndirectedEdge[5, 9], 
            UndirectedEdge[6, 8], 
            UndirectedEdge[7, 9], 
            UndirectedEdge[8, 9]}, 
           VertexCoordinates -> {{0.309, 0.951}, {0.18, 0.033}, {-0.809, 
            0.588}, {1., 0.}, {0.241, -0.396}, {0.487, -0.209}, {
            0.309, -0.951}, {0.22, -0.232}, {-0.809, -0.588}}}, {{1, 2, 3, 4, 
           5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {
            UndirectedEdge[1, 3], 
            UndirectedEdge[1, 6], 
            UndirectedEdge[1, 7], 
            UndirectedEdge[1, 13], 
            UndirectedEdge[1, 16], 
            UndirectedEdge[1, 17], 
            UndirectedEdge[2, 4], 
            UndirectedEdge[2, 7], 
            UndirectedEdge[2, 11], 
            UndirectedEdge[2, 15], 
            UndirectedEdge[2, 19], 
            UndirectedEdge[3, 6], 
            UndirectedEdge[3, 7], 
            UndirectedEdge[3, 19], 
            UndirectedEdge[4, 7], 
            UndirectedEdge[4, 15], 
            UndirectedEdge[5, 6], 
            UndirectedEdge[5, 10], 
            UndirectedEdge[5, 12], 
            UndirectedEdge[5, 16], 
            UndirectedEdge[5, 20], 
            UndirectedEdge[6, 15], 
            UndirectedEdge[6, 16], 
            UndirectedEdge[6, 19], 
            UndirectedEdge[6, 20], 
            UndirectedEdge[7, 13], 
            UndirectedEdge[7, 19], 
            UndirectedEdge[8, 9], 
            UndirectedEdge[8, 13], 
            UndirectedEdge[8, 16], 
            UndirectedEdge[9, 10], 
            UndirectedEdge[9, 16], 
            UndirectedEdge[9, 18], 
            UndirectedEdge[10, 12], 
            UndirectedEdge[10, 16], 
            UndirectedEdge[10, 18], 
            UndirectedEdge[11, 15], 
            UndirectedEdge[11, 19], 
            UndirectedEdge[12, 14], 
            UndirectedEdge[12, 18], 
            UndirectedEdge[12, 20], 
            UndirectedEdge[13, 16], 
            UndirectedEdge[13, 17], 
            UndirectedEdge[14, 15], 
            UndirectedEdge[14, 18], 
            UndirectedEdge[14, 20], 
            UndirectedEdge[15, 19], 
            UndirectedEdge[15, 20], 
            UndirectedEdge[16, 17]}, VertexCoordinates -> CompressedData["
1:eJxTTMoPSmViYGAQAWIQverjJd8kgRP2kixhfLqb7u7fUJQx8W3Nc3vNmP5D
XzXW2Le+Dtwh13rb/sPyY97mnRf3M4DBB3sGKKh8qWbIsWbPfsstJ8r2zT9l
z8Ok3S5285w9yBR703X2EPFnMHo/Og01bz/MvJNAUSn9u/tzn/9e+fHSWfuj
CiAXPbVfUmDLdX3xBSj/7P5vGiAHPoC7A90cmDvR7LeHmrvf3jRulyfPpf1A
zwF92Ad1zyN090H1PbKfcwRssX3C0wtKt3/us79aAfL4A3sAlQaXOw==
            "]}}, {1}]; $CellContext`Extend[
         Pattern[$CellContext`a, 
          Blank[]]] := Append[$CellContext`a, 
         Part[$CellContext`a, 1]]; $CellContext`ColorsForColoring = 
       Join[{Red, Green, Blue, Cyan, Magenta, Yellow, Orange, Purple, Brown, 
          Black}, 
         Table[
          ColorData[
          "Legacy", $CellContext`i], {$CellContext`i, 
           40}]]; $CellContext`options[$CellContext`ChinesePostmanTourImage] = \
{$CellContext`ArrowPullback -> Automatic, EdgeThickness -> 
         0.008, $CellContext`ShowTour -> 
         True}; $CellContext`ChinesePostmanTourImage[
         Pattern[$CellContext`jj, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`mat, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`G, $CellContext`nv, $CellContext`pull, \
$CellContext`th, $CellContext`show, $CellContext`cy, $CellContext`n, \
$CellContext`locs, $CellContext`pr, $CellContext`xR, $CellContext`cyEdges, \
$CellContext`cyEdgesSorted, $CellContext`cyEdgesIndexed, \
$CellContext`matchedverts, $CellContext`odds, $CellContext`v, \
$CellContext`i}, $CellContext`G = 
          Part[$CellContext`graphs, $CellContext`jj]; $CellContext`nv = 
          VertexCount[$CellContext`G]; {$CellContext`th, $CellContext`pull, \
$CellContext`show} = ReplaceAll[
            
            ReplaceAll[{
             EdgeThickness, $CellContext`ArrowPullback, \
$CellContext`ShowTour}, {$CellContext`opts}], 
            $CellContext`options[$CellContext`ChinesePostmanTourImage]]; \
$CellContext`pull = 
          ReplaceAll[$CellContext`pull, {
            Automatic -> 0.05, None -> 
             0}]; $CellContext`cy = $CellContext`Extend[$CellContext`tour]; \
$CellContext`n = VertexCount[$CellContext`G]; $CellContext`locs = 
          Part[$CellContext`locData, $CellContext`jj]; $CellContext`pr = {{
             Min[
              Map[First, $CellContext`locs]], 
             Max[
              Map[First, $CellContext`locs]]}, {
             Min[
              Map[Last, $CellContext`locs]], 
             Max[
              Map[Last, $CellContext`locs]]}}; $CellContext`xR = 
          Part[$CellContext`pr, 1, 2] - 
           Part[$CellContext`pr, 1, 1]; $CellContext`cyEdges = 
          Partition[$CellContext`cy, 2, 1]; $CellContext`cyEdgesSorted = 
          Map[Sort, $CellContext`cyEdges]; $CellContext`cyEdgesIndexed = 
          MapIndexed[{
             Apply[Rule, #], 
             Part[#2, 1]}& , $CellContext`cyEdges]; $CellContext`matchedverts = 
          Apply[List, $CellContext`mat, {1}]; $CellContext`odds = {
            EdgeForm[
             Directive[
              Thickness[0.002], Black]], 
            MapIndexed[{
              Part[$CellContext`ColorsForColoring, 
               Part[#2, 1]], 
              Disk[
               Part[$CellContext`locs, 
                Part[#, 1]], $CellContext`xR 0.02], 
              Disk[
               Part[$CellContext`locs, 
                Part[#, 2]], $CellContext`xR 
               0.02]}& , $CellContext`matchedverts]}; Show[
           Graphics[
            Apply[Rectangle, 
             Transpose[$CellContext`pr]]], 
           GraphPlot[$CellContext`G, EdgeRenderingFunction -> ({
              Thickness[0.025 1.2], 
              CapForm["Round"], 
              GrayLevel[1], 
              Line[#]}& ), VertexRenderingFunction -> ({}& )], 
           If[$CellContext`show, 
            
            GraphPlot[$CellContext`cyEdgesIndexed, 
             EdgeRenderingFunction -> (($CellContext`i = #3; $CellContext`\
\[Rho] = $CellContext`i/Length[$CellContext`cy]; {
                Thickness[$CellContext`th], 
                Arrowheads[4 $CellContext`th], 
                Hue[1 - $CellContext`\[Rho]/2, 0.7, 1], 
                
                Arrow[#, 
                 Norm[Part[#, 1] - Part[#, -1]] {$CellContext`pull/
                   5, $CellContext`pull}]})& ), VertexCoordinateRules -> 
             Thread[Range[$CellContext`n] -> $CellContext`locs]], {}], 
           Graphics[{
             Thickness[0.01], 
             
             Map[{$CellContext`v = 
                Part[$CellContext`locs, #]; $CellContext`odds, 
               RGBColor[1, 0.8, 0.5], White, 
               EdgeForm[
                Directive[
                 Thickness[0.002], Black]], 
               
               Disk[$CellContext`v, $CellContext`xR 
                If[$CellContext`v == Part[$CellContext`locs, 
                    Part[$CellContext`cy, 1]], 0.02 1.5, 0.02]]}& , 
              Complement[
               Range[$CellContext`nv], 
               Flatten[$CellContext`matchedverts]]]}], 
           Apply[Sequence, 
            FilterRules[{$CellContext`opts}, $CellContext`gropts]], 
           Background -> Black, PlotRange -> $CellContext`pr, 
           ImageSize -> {500, 500}, PlotRangePadding -> Scaled[0.05], Frame -> 
           True, FrameTicks -> 
           False]]; $CellContext`options[$CellContext`PlotterProblemImage] = \
{$CellContext`ArrowPullback -> Automatic, EdgeThickness -> 
         0.008, $CellContext`ShowTour -> 
         True}; $CellContext`PlotterProblemImage[
         Pattern[$CellContext`jj, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`mat1, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`odds, $CellContext`locs, $CellContext`pr, \
$CellContext`GOdd, $CellContext`XXedges, $CellContext`len, $CellContext`mat, \
$CellContext`i, $CellContext`cy, $CellContext`edgesg, $CellContext`cyEdges, \
$CellContext`pathData, $CellContext`edge, $CellContext`newAdj, \
$CellContext`wts, $CellContext`reordermat, $CellContext`g, $CellContext`nv, \
$CellContext`th, $CellContext`pull, $CellContext`show, $CellContext`xR, \
$CellContext`matchedverts, $CellContext`cyEdgesSorted, $CellContext`dashed, \
$CellContext`v, $CellContext`\[Rho], $CellContext`cyEdgesIndexed}, \
$CellContext`g = Part[$CellContext`graphs, $CellContext`jj]; $CellContext`nv = 
          VertexCount[$CellContext`g]; {$CellContext`th, $CellContext`pull, \
$CellContext`show} = ReplaceAll[
            
            ReplaceAll[{
             EdgeThickness, $CellContext`ArrowPullback, \
$CellContext`ShowTour}, {$CellContext`opts}], 
            $CellContext`options[$CellContext`PlotterProblemImage]]; \
$CellContext`pull = 
          ReplaceAll[$CellContext`pull, {
            Automatic -> 0.05, None -> 0}]; $CellContext`odds = Flatten[
            Position[
             VertexDegree[$CellContext`g], 
             PatternTest[
              Pattern[$CellContext`x, 
               Blank[]], OddQ]]]; $CellContext`locs = 
          Part[$CellContext`locData, $CellContext`jj]; $CellContext`pr = {{
             Min[
              Map[First, $CellContext`locs]], 
             Max[
              Map[First, $CellContext`locs]]}, {
             Min[
              Map[Last, $CellContext`locs]], 
             Max[
              Map[Last, $CellContext`locs]]}}; $CellContext`xR = 
          Part[$CellContext`pr, 1, 2] - 
           Part[$CellContext`pr, 1, 
            1]; $CellContext`cy = $CellContext`Extend[$CellContext`tour]; \
$CellContext`mat = ReplaceAll[$CellContext`mat1, UndirectedEdge[
              Pattern[$CellContext`i, 
               Blank[]], 
              Pattern[$CellContext`j, 
               Blank[]]] :> If[Part[
                Position[$CellContext`cy, $CellContext`i], 1, 1] < Part[
                Position[$CellContext`cy, $CellContext`j], 1, 1], 
              UndirectedEdge[$CellContext`i, $CellContext`j], 
              
              UndirectedEdge[$CellContext`j, $CellContext`i]]]; \
$CellContext`matchedverts = 
          Apply[List, $CellContext`mat1, {1}]; $CellContext`odds = {
            EdgeForm[
             Directive[
              Thickness[0.002], Black]], 
            MapIndexed[{
              Part[$CellContext`ColorsForColoring, 
               Part[#2, 1]], 
              Disk[
               Part[$CellContext`locs, 
                Part[#, 1]], $CellContext`xR 0.02], 
              Disk[
               Part[$CellContext`locs, 
                Part[#, 2]], $CellContext`xR 
               0.02]}& , $CellContext`matchedverts]}; $CellContext`edgesg = 
          EdgeList[$CellContext`g]; $CellContext`cyEdges = 
          Partition[$CellContext`cy, 2, 1]; $CellContext`cyEdgesSorted = 
          Map[Sort, $CellContext`cyEdges]; $CellContext`cyEdgesIndexed = 
          MapIndexed[{
             Apply[Rule, #], 
             Part[#2, 1]}& , $CellContext`cyEdges]; $CellContext`pathData = 
          Table[
            Not[Position[
               Take[$CellContext`cyEdges, $CellContext`i - 1], 
               
               Part[$CellContext`cyEdges, $CellContext`i]] != {}], \
{$CellContext`i, 
             Length[$CellContext`cyEdges]}]; $CellContext`dashed = 
          Map[False& , $CellContext`cyEdgesIndexed]; Show[
           GraphPlot[$CellContext`g, EdgeRenderingFunction -> ({
              Thickness[0.025 1.2], 
              CapForm["Round"], 
              GrayLevel[1], 
              Line[#]}& ), VertexRenderingFunction -> ({}& )], 
           If[$CellContext`show, 
            
            GraphPlot[$CellContext`cyEdgesIndexed, 
             EdgeRenderingFunction -> (($CellContext`\[Rho] = #3/
                Length[$CellContext`cy]; {
                Thickness[$CellContext`th], 
                Arrowheads[4 $CellContext`th], 
                Hue[1 - $CellContext`\[Rho]/2, 0.7, 1], 
                If[
                 And[
                  MemberQ[$CellContext`mat, 
                   Apply[UndirectedEdge, #2]], 
                  Part[$CellContext`pathData, #3]], 
                 Dashing[{0.01, 0.01}]], 
                
                Arrow[#, 
                 Norm[Part[#, 1] - Part[#, -1]] {$CellContext`pull/
                   5, $CellContext`pull}]})& ), VertexCoordinateRules -> 
             Thread[Range[
                 VertexCount[$CellContext`g]] -> $CellContext`locs]], {}], 
           Graphics[{
             Thickness[0.01], 
             
             Map[{$CellContext`v = 
                Part[$CellContext`locs, #]; $CellContext`odds, 
               RGBColor[1, 0.8, 0.5], White, 
               EdgeForm[
                Directive[
                 Thickness[0.002], Black]], 
               
               Disk[$CellContext`v, $CellContext`xR 
                If[$CellContext`v == Part[$CellContext`locs, 
                    Part[$CellContext`cy, 1]], 0.02 1.5, 0.02]]}& , 
              Complement[
               Range[$CellContext`nv], 
               Flatten[$CellContext`matchedverts]]]}], 
           Apply[Sequence, 
            FilterRules[{$CellContext`opts}, $CellContext`gropts]], 
           PlotRange -> $CellContext`pr, Frame -> True, ImageSize -> 350, 
           Background -> GrayLevel[0.], PlotRangePadding -> 
           Scaled[0.05]]]; \
$CellContext`options[$CellContext`ShortestHamiltonianCycleImage] = \
{$CellContext`ArrowPullback -> Automatic, EdgeThickness -> 
         0.008, $CellContext`ShowTour -> 
         True}; $CellContext`ShortestHamiltonianCycleImage[
         Pattern[$CellContext`jj, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`tourAns, $CellContext`locs, $CellContext`pr, \
$CellContext`n, $CellContext`th, $CellContext`pull, $CellContext`G, \
$CellContext`cyEdgesIndexed, $CellContext`xR, $CellContext`i, $CellContext`\
\[Rho]}, $CellContext`G = 
          Part[$CellContext`graphs, $CellContext`jj]; {$CellContext`th, \
$CellContext`pull, $CellContext`show} = ReplaceAll[
            
            ReplaceAll[{
             EdgeThickness, $CellContext`ArrowPullback, \
$CellContext`ShowTour}, {$CellContext`opts}], 
            $CellContext`options[$CellContext`ShortestHamiltonianCycleImage]]; \
$CellContext`pull = 
          ReplaceAll[$CellContext`pull, {
            Automatic -> 0.05, None -> 0}]; $CellContext`tourAns = 
          Apply[UndirectedEdge, 
            Partition[
             $CellContext`Extend[$CellContext`tour], 2, 1], {
            1}]; $CellContext`locs = 
          Part[$CellContext`locData, $CellContext`jj]; $CellContext`n = 
          VertexCount[$CellContext`G]; $CellContext`pr = {{
             Min[
              Map[First, $CellContext`locs]], 
             Max[
              Map[First, $CellContext`locs]]}, {
             Min[
              Map[Last, $CellContext`locs]], 
             Max[
              Map[Last, $CellContext`locs]]}}; $CellContext`xR = 
          Part[$CellContext`pr, 1, 2] - 
           Part[$CellContext`pr, 1, 1]; $CellContext`cyEdgesIndexed = 
          MapIndexed[{
             Apply[Rule, #], 
             Part[#2, 1]}& , $CellContext`tourAns]; Show[
           GraphPlot[
            Apply[Rule, 
             EdgeList[$CellContext`G], {1}], VertexCoordinateRules -> 
            Thread[Range[$CellContext`n] -> $CellContext`locs], 
            EdgeRenderingFunction -> ({
              Thickness[0.025 1.2], 
              CapForm["Round"], 
              GrayLevel[1], 
              Line[#]}& ), VertexRenderingFunction -> ({}& )], 
           If[$CellContext`show, 
            
            GraphPlot[$CellContext`cyEdgesIndexed, 
             EdgeRenderingFunction -> (($CellContext`i = #3; $CellContext`\
\[Rho] = $CellContext`i/Length[$CellContext`tourAns]; {
                Thickness[$CellContext`th], 
                Arrowheads[4 $CellContext`th], 
                Hue[1 - $CellContext`\[Rho]/2, 0.7, 1], 
                
                Arrow[#, 
                 Norm[Part[#, 1] - Part[#, -1]] {$CellContext`pull 0/
                   5, $CellContext`pull}]})& ), VertexCoordinateRules -> 
             Thread[Range[$CellContext`n] -> $CellContext`locs]], {}], 
           Graphics[{
             Thickness[0.01], 
             Map[{
               If[# == Part[$CellContext`locs, 
                  Part[$CellContext`tourAns, 1, 1]], 
                GrayLevel[0.85], 
                Lighter[Orange]], 
               EdgeForm[
                Directive[
                 Thickness[0.002], Black]], 
               Disk[#, $CellContext`xR If[# == Part[$CellContext`locs, 
                    Part[$CellContext`tourAns, 1, 1]], 0.02 1.5, 
                  0.02]]}& , $CellContext`locs]}], {}, 
           Apply[Sequence, 
            FilterRules[{$CellContext`opts}, $CellContext`gropts]], 
           Background -> Black, PlotRange -> $CellContext`pr, ImageSize -> 
           500, PlotRangePadding -> Scaled[0.05], Frame -> True, FrameTicks -> 
           False]]; \
$CellContext`options[$CellContext`RoutingProblemTourImage] = \
{$CellContext`ArrowPullback -> Automatic, EdgeThickness -> 
         0.008, $CellContext`ShowTour -> 
         True}; $CellContext`RoutingProblemTourImage[
         Pattern[$CellContext`jj, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`pr, $CellContext`G1, $CellContext`n, \
$CellContext`edges, $CellContext`locs, $CellContext`g2, $CellContext`tourAns, \
$CellContext`tourbadEdges, $CellContext`tourbad, $CellContext`tourgood, \
$CellContext`G, $CellContext`th, $CellContext`pull, $CellContext`show, \
$CellContext`xR, $CellContext`cy, $CellContext`cyEdges, \
$CellContext`cyEdgesSorted, $CellContext`cyEdgesIndexed, \
$CellContext`\[Rho]}, $CellContext`G = 
          Part[$CellContext`graphs, $CellContext`jj]; {$CellContext`th, \
$CellContext`pull, $CellContext`show} = ReplaceAll[
            
            ReplaceAll[{
             EdgeThickness, $CellContext`ArrowPullback, \
$CellContext`ShowTour}, {$CellContext`opts}], 
            $CellContext`options[$CellContext`RoutingProblemTourImage]]; \
$CellContext`pull = 
          ReplaceAll[$CellContext`pull, {
            Automatic -> 0.0002, None -> 0}]; $CellContext`n = 
          VertexCount[$CellContext`G]; $CellContext`edges = 
          EdgeList[$CellContext`G]; $CellContext`locs = 
          Part[$CellContext`locData, $CellContext`jj]; $CellContext`pr = {{
             Min[
              Map[First, $CellContext`locs]], 
             Max[
              Map[First, $CellContext`locs]]}, {
             Min[
              Map[Last, $CellContext`locs]], 
             Max[
              Map[Last, $CellContext`locs]]}}; $CellContext`xR = 
          Part[$CellContext`pr, 1, 2] - 
           Part[$CellContext`pr, 1, 
            1]; $CellContext`cy = $CellContext`Extend[$CellContext`tour]; \
$CellContext`cyEdges = 
          Partition[$CellContext`cy, 2, 1]; $CellContext`cyEdgesSorted = 
          Map[Sort, $CellContext`cyEdges]; $CellContext`cyEdgesIndexed = 
          MapIndexed[{
             Apply[Rule, #], 
             Part[#2, 1]}& , $CellContext`cyEdges]; Show[
           GraphPlot[$CellContext`G, EdgeRenderingFunction -> ({
              Thickness[0.025 1.2], 
              CapForm["Round"], 
              GrayLevel[1], 
              Line[#]}& ), VertexRenderingFunction -> ({}& )], 
           If[$CellContext`show, 
            
            GraphPlot[$CellContext`cyEdgesIndexed, 
             EdgeRenderingFunction -> (($CellContext`i = #3; $CellContext`\
\[Rho] = $CellContext`i/Length[$CellContext`cy]; {
                Thickness[$CellContext`th], 
                Arrowheads[4 $CellContext`th], 
                Hue[1 - $CellContext`\[Rho]/2, 0.7, 1], 
                
                Arrow[#, 
                 Norm[Part[#, 1] - Part[#, -1]] {$CellContext`pull 0/
                   5, $CellContext`pull}]})& ), VertexCoordinateRules -> 
             Thread[Range[$CellContext`n] -> $CellContext`locs]], {}], 
           Graphics[{
             Thickness[0.01], 
             Map[{
               If[# == Part[$CellContext`locs, 
                  Part[$CellContext`cy, 1]], 
                GrayLevel[0.85], 
                Lighter[Orange]], 
               EdgeForm[
                Directive[
                 Thickness[0.002], Black]], 
               Disk[#, $CellContext`xR If[# == Part[$CellContext`locs, 
                    Part[$CellContext`cy, 1]], 0.02 1.5, 
                  0.02]]}& , $CellContext`locs]}], 
           Apply[Sequence, 
            FilterRules[{$CellContext`opts}, $CellContext`gropts]], 
           Background -> Black, PlotRange -> $CellContext`pr, ImageSize -> 
           500, PlotRangePadding -> Scaled[0.05], Frame -> True, FrameTicks -> 
           False]]; $CellContext`plottermatdata = {{
          UndirectedEdge[2, 4], 
          UndirectedEdge[3, 5]}, {
          UndirectedEdge[2, 3], 
          UndirectedEdge[5, 6], 
          UndirectedEdge[7, 10], 
          UndirectedEdge[11, 22], 
          UndirectedEdge[13, 18], 
          UndirectedEdge[14, 19]}, {
          UndirectedEdge[5, 7], 
          UndirectedEdge[6, 8]}, {
          UndirectedEdge[2, 4], 
          UndirectedEdge[5, 6], 
          UndirectedEdge[8, 10], 
          UndirectedEdge[11, 15], 
          UndirectedEdge[12, 20], 
          UndirectedEdge[13, 17]}}; $CellContext`cppmatdata = {{
          UndirectedEdge[2, 5], 
          UndirectedEdge[3, 4]}, {
          UndirectedEdge[2, 5], 
          UndirectedEdge[3, 13], 
          UndirectedEdge[6, 7], 
          UndirectedEdge[10, 14], 
          UndirectedEdge[11, 18], 
          UndirectedEdge[19, 22]}, {
          UndirectedEdge[5, 7], 
          UndirectedEdge[6, 8]}, {
          UndirectedEdge[2, 11], 
          UndirectedEdge[4, 15], 
          UndirectedEdge[5, 6], 
          UndirectedEdge[8, 13], 
          UndirectedEdge[10, 17], 
          UndirectedEdge[12, 20]}}; $CellContext`tourdata = {{{1, 4, 3, 5, 2, 
          4}, {1, 4, 2, 3, 5}, {1, 5, 3, 5, 2, 4, 3, 2, 4}, {1, 5, 2, 5, 3, 4,
           3, 2, 4}}, {{1, 2, 1, 6, 5, 6, 7, 11, 16, 10, 15, 20, 19, 20, 15, 
          10, 9, 14, 9, 10, 16, 21, 22, 23, 17, 18, 17, 12, 7, 3, 4, 8, 13, 8,
           7, 6}, {}, {1, 6, 5, 6, 7, 10, 15, 20, 19, 14, 9, 10, 16, 21, 22, 
          11, 16, 22, 23, 17, 12, 7, 11, 17, 18, 13, 8, 7, 3, 8, 4, 3, 2}, {1,
           6, 7, 12, 17, 18, 17, 11, 17, 23, 22, 21, 16, 22, 16, 10, 15, 20, 
          19, 20, 15, 10, 9, 14, 9, 10, 16, 11, 7, 8, 13, 8, 3, 8, 4, 3, 7, 6,
           5, 6, 1, 2}}, {{1, 3, 9, 7, 5, 8, 2, 8, 6, 4}, {1, 2, 4, 6, 8, 5, 
          7, 9, 3}, {1, 9, 7, 5, 9, 8, 6, 8, 5, 7, 4, 6, 5, 4, 8, 2, 9, 3, 1, 
          4, 2}, {1, 9, 7, 5, 9, 8, 6, 8, 5, 7, 4, 6, 5, 4, 8, 2, 9, 3, 1, 4, 
          2}}, {{1, 16, 8, 9, 18, 10, 5, 12, 20, 14, 15, 11, 2, 4, 2, 19, 6, 
          3, 7, 13, 17}, {1, 3, 6, 5, 16, 8, 9, 10, 18, 12, 20, 14, 15, 11, 
          19, 2, 4, 7, 13, 17}, {1, 17, 13, 17, 16, 9, 18, 14, 20, 12, 20, 6, 
          5, 20, 15, 11, 19, 15, 14, 12, 18, 10, 8, 16, 13, 7, 19, 6, 16, 10, 
          12, 5, 16, 1, 13, 8, 9, 10, 5, 6, 15, 4, 2, 15, 11, 2, 19, 3, 7, 4, 
          2, 7, 1, 6, 3}, {1, 17, 16, 13, 17, 16, 10, 18, 14, 20, 12, 20, 6, 
          5, 20, 15, 19, 7, 13, 8, 16, 9, 18, 12, 14, 15, 4, 15, 6, 16, 10, 
          12, 5, 16, 1, 13, 8, 9, 10, 5, 6, 19, 11, 2, 15, 11, 2, 19, 3, 7, 4,
           2, 7, 1, 6, 3}}}; $CellContext`locData = {{{0., 0.5}, {0.15, 
         0.18}, {0., 0.}, {0., 0.3}, {0.4, 0.}}, CompressedData["
1:eJxTTMoPSmViYGAQB2IQDQEf7LHTDA6ofA40voADdnUMDthpDjS+AJo4uj3o
+tBpdP0iaOK43ImuTwAHLYJGw8yD8RnQ5HG5A2EOAGJbFzw=
         "], {{0.309, 0.951}, {0.18, 0.033}, {-0.809, 0.588}, {1., 0.}, {
         0.241, -0.396}, {0.487, -0.209}, {0.309, -0.951}, {
         0.22, -0.232}, {-0.809, -0.588}}, CompressedData["
1:eJxTTMoPSmViYGAQAWIQverjJd8kgRP2kixhfLqb7u7fUJQx8W3Nc3vNmP5D
XzXW2Le+Dtwh13rb/sPyY97mnRf3M4DBB3sGKKh8qWbIsWbPfsstJ8r2zT9l
z8Ok3S5285w9yBR703X2EPFnMHo/Og01bz/MvJNAUSn9u/tzn/9e+fHSWfuj
CiAXPbVfUmDLdX3xBSj/7P5vGiAHPoC7A90cmDvR7LeHmrvf3jRulyfPpf1A
zwF92Ad1zyN090H1PbKfcwRssX3C0wtKt3/us79aAfL4A3sAlQaXOw==
         "]}; Null); Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->875281997],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`graphtype$$ = 
    "graph based on grid", $CellContext`problemtype$$ = 
    3, $CellContext`showtour$$ = True, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`graphtype$$], "graph based on grid", "graph type"}, {
      "small", "graph based on grid", "small planar graph", 
       "large planar graph"}}, {{
       Hold[$CellContext`showtour$$], True, "show tour"}, {False, True}}, {
      Hold[
       Row[{
         Manipulate`Place[1], 
         Spacer[20], 
         Manipulate`Place[2]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`problemtype$$], 3, "problem type"}, {
      1 -> "vehicle routing problem", 2 -> 
       "traveling salesman problem on graph", 3 -> "plotter problem", 4 -> 
       "Chinese postman problem"}}}, Typeset`size$$ = {400., {217., 223.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`graphtype$187592$$ = 
    0, $CellContext`showtour$187593$$ = 
    False, $CellContext`problemtype$187594$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`graphtype$$ = 
        "graph based on grid", $CellContext`problemtype$$ = 
        3, $CellContext`showtour$$ = True}, "ControllerVariables" :> {
        Hold[$CellContext`graphtype$$, $CellContext`graphtype$187592$$, 0], 
        Hold[$CellContext`showtour$$, $CellContext`showtour$187593$$, False], 
        Hold[$CellContext`problemtype$$, $CellContext`problemtype$187594$$, 
         False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`pull$, $CellContext`is$, $CellContext`thicks$, \
$CellContext`jj$, $CellContext`G$, $CellContext`tour$, $CellContext`mat$, \
$CellContext`locs$}, 
        SeedRandom[1]; $CellContext`pull$ = 0.1; $CellContext`is$ = 
         330; $CellContext`thicks$ = {0.014, 0.014, 0.012, 
          0.01}; $CellContext`jj$ = ReplaceAll[$CellContext`graphtype$$, 
           
           Thread[{"small", "graph based on grid", "small planar graph", 
              "large planar graph"} -> Range[4]]]; $CellContext`G$ = 
         Part[$CellContext`graphs, $CellContext`jj$]; $CellContext`locs$ = 
         Part[$CellContext`locData, $CellContext`jj$]; $CellContext`tour$ = 
         Part[$CellContext`tourdata, $CellContext`jj$, \
$CellContext`problemtype$$]; 
        If[$CellContext`problemtype$$ == 4, $CellContext`mat$ = 
          Part[$CellContext`cppmatdata, $CellContext`jj$]]; Pane[
          Which[$CellContext`problemtype$$ == 1, 
           Column[{
             Style[
             " Shortest cycle through all vertices, staying on graph edges, \
with vertex and \n edge repetition allowed", FontFamily -> "Times"], 
             $CellContext`RoutingProblemTourImage[$CellContext`jj$, \
$CellContext`tour$, EdgeThickness -> 
              Part[$CellContext`thicks$, $CellContext`jj$], \
$CellContext`ShowTour -> $CellContext`showtour$$, 
              ImageSize -> $CellContext`is$, AspectRatio -> 
              Automatic, $CellContext`ArrowPullback -> 
              0.1]}], $CellContext`problemtype$$ == 2, 
           Column[{
             Style[
             " Shortest Hamiltonian cycle: a cycle through all vertices, \
staying on graph edges\n and visiting each vertex once", FontFamily -> 
              "Times"], 
             If[$CellContext`graphtype$$ === "graph based on grid", 
              Column[{
                Style[
                " There is no Hamiltonian cycle for this graph", FontFamily -> 
                 "Times", Red], 
                
                GraphPlot[$CellContext`G$, ImageSize -> $CellContext`is$, 
                 EdgeRenderingFunction -> ({
                   Thickness[0.025 1.2], 
                   CapForm["Round"], 
                   GrayLevel[1], 
                   Line[#]}& ), Background -> Black, PlotRangePadding -> 
                 Scaled[0.05], PlotRange -> {{1, 5}, {1, 5}}, 
                 VertexRenderingFunction -> ({
                   EdgeForm[
                    Directive[
                    Thickness[0.003], Black]], 
                   FaceForm[
                    RGBColor[1, 0.8, 0.5]], 
                   Disk[#, 0.09]}& )]}], 
              $CellContext`ShortestHamiltonianCycleImage[$CellContext`jj$, \
$CellContext`tour$, 
               ImageSize -> $CellContext`is$, $CellContext`ShowTour -> \
$CellContext`showtour$$, AspectRatio -> Automatic, $CellContext`ArrowPullback -> 
               0.1, EdgeThickness -> 
               Part[$CellContext`thicks$, $CellContext`jj$]]]}], \
$CellContext`problemtype$$ == 3, 
           Column[{
             Style[
             " Shortest cycle through all edges, with travel off the edges \
allowed\n and vertex repetition allowed; pen\[Hyphen]up segments are dashed", 
              FontFamily -> "Times"], 
             $CellContext`PlotterProblemImage[$CellContext`jj$, \
$CellContext`tour$, 
              Part[$CellContext`plottermatdata, $CellContext`jj$], 
              EdgeThickness -> Part[$CellContext`thicks$, $CellContext`jj$], 
              ImageSize -> $CellContext`is$, AspectRatio -> 
              Automatic, $CellContext`ShowTour -> $CellContext`showtour$$, \
$CellContext`ArrowPullback -> $CellContext`pull$]}], \
$CellContext`problemtype$$ == 4, 
           Column[{
             Style[
             " Shortest cycle through all edges, staying on graph edges, with \
vertex and\n edge repetition allowed; like a mailman using streets", 
              FontFamily -> "Times"], 
             $CellContext`ChinesePostmanTourImage[$CellContext`jj$, \
$CellContext`tour$, $CellContext`mat$, ImageSize -> $CellContext`is$, 
              EdgeThickness -> Part[$CellContext`thicks$, $CellContext`jj$], 
              AspectRatio -> 
              Automatic, $CellContext`ShowTour -> $CellContext`showtour$$, \
$CellContext`ArrowPullback -> $CellContext`pull$]}]], 
          ImageSize -> {400, 440}]], 
      "Specifications" :> {{{$CellContext`graphtype$$, "graph based on grid", 
          "graph type"}, {
         "small", "graph based on grid", "small planar graph", 
          "large planar graph"}, ControlPlacement -> 
         1}, {{$CellContext`showtour$$, True, "show tour"}, {False, True}, 
         ControlPlacement -> 2}, 
        Row[{
          Manipulate`Place[1], 
          Spacer[20], 
          Manipulate`Place[2]}], {{$CellContext`problemtype$$, 3, 
          "problem type"}, {
         1 -> "vehicle routing problem", 2 -> 
          "traveling salesman problem on graph", 3 -> "plotter problem", 4 -> 
          "Chinese postman problem"}}}, "Options" :> {TrackedSymbols -> True},
       "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{664., {274., 279.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>(($CellContext`gropts = {
        AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> False, 
         AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, 
         Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, 
         ColorOutput -> Automatic, ContentSelectable -> Automatic, 
         CoordinatesToolOptions -> Automatic, 
         DisplayFunction :> $DisplayFunction, Epilog -> {}, FormatType :> 
         TraditionalForm, Frame -> False, FrameLabel -> None, 
         FrameStyle -> {}, FrameTicks -> Automatic, FrameTicksStyle -> {}, 
         GridLines -> None, GridLinesStyle -> {}, ImageMargins -> 0., 
         ImagePadding -> All, ImageSize -> Automatic, ImageSizeRaw -> 
         Automatic, LabelStyle -> {}, Method -> Automatic, PlotLabel -> None, 
         PlotRange -> All, PlotRangeClipping -> False, PlotRangePadding -> 
         Automatic, PlotRegion -> Automatic, PreserveImageOptions -> 
         Automatic, Prolog -> {}, RotateLabel -> True, Ticks -> Automatic, 
         TicksStyle -> {}}; $CellContext`graphs = 
       Apply[Graph, {{{1, 2, 3, 4, 5}, {
            UndirectedEdge[1, 4], 
            UndirectedEdge[1, 5], 
            UndirectedEdge[2, 3], 
            UndirectedEdge[2, 4], 
            UndirectedEdge[2, 5], 
            UndirectedEdge[3, 4], 
            UndirectedEdge[3, 5]}, 
           VertexCoordinates -> {{0., 0.5}, {0.15, 0.18}, {0., 0.}, {0., 
            0.3}, {0.4, 0.}}}, {{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 
           14, 15, 16, 17, 18, 19, 20, 21, 22, 23}, {
            UndirectedEdge[1, 2], 
            UndirectedEdge[1, 6], 
            UndirectedEdge[3, 4], 
            UndirectedEdge[3, 7], 
            UndirectedEdge[3, 8], 
            UndirectedEdge[4, 8], 
            UndirectedEdge[5, 6], 
            UndirectedEdge[6, 7], 
            UndirectedEdge[7, 8], 
            UndirectedEdge[7, 11], 
            UndirectedEdge[7, 12], 
            UndirectedEdge[8, 13], 
            UndirectedEdge[9, 10], 
            UndirectedEdge[9, 14], 
            UndirectedEdge[10, 15], 
            UndirectedEdge[10, 16], 
            UndirectedEdge[11, 16], 
            UndirectedEdge[11, 17], 
            UndirectedEdge[12, 17], 
            UndirectedEdge[15, 20], 
            UndirectedEdge[16, 21], 
            UndirectedEdge[16, 22], 
            UndirectedEdge[17, 18], 
            UndirectedEdge[17, 23], 
            UndirectedEdge[19, 20], 
            UndirectedEdge[21, 22], 
            UndirectedEdge[22, 23]}, VertexCoordinates -> CompressedData["
1:eJxTTMoPSmViYGAQB2IQDQEf7LHTDA6ofA40voADdnUMDthpDjS+AJo4uj3o
+tBpdP0iaOK43ImuTwAHLYJGw8yD8RnQ5HG5A2EOAGJbFzw=
            "]}, {{1, 2, 3, 4, 5, 6, 7, 8, 9}, {
            UndirectedEdge[1, 2], 
            UndirectedEdge[1, 3], 
            UndirectedEdge[1, 4], 
            UndirectedEdge[1, 9], 
            UndirectedEdge[2, 4], 
            UndirectedEdge[2, 8], 
            UndirectedEdge[2, 9], 
            UndirectedEdge[3, 9], 
            UndirectedEdge[4, 5], 
            UndirectedEdge[4, 6], 
            UndirectedEdge[4, 7], 
            UndirectedEdge[4, 8], 
            UndirectedEdge[5, 6], 
            UndirectedEdge[5, 7], 
            UndirectedEdge[5, 8], 
            UndirectedEdge[5, 9], 
            UndirectedEdge[6, 8], 
            UndirectedEdge[7, 9], 
            UndirectedEdge[8, 9]}, 
           VertexCoordinates -> {{0.309, 0.951}, {0.18, 0.033}, {-0.809, 
            0.588}, {1., 0.}, {0.241, -0.396}, {0.487, -0.209}, {
            0.309, -0.951}, {0.22, -0.232}, {-0.809, -0.588}}}, {{1, 2, 3, 4, 
           5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {
            UndirectedEdge[1, 3], 
            UndirectedEdge[1, 6], 
            UndirectedEdge[1, 7], 
            UndirectedEdge[1, 13], 
            UndirectedEdge[1, 16], 
            UndirectedEdge[1, 17], 
            UndirectedEdge[2, 4], 
            UndirectedEdge[2, 7], 
            UndirectedEdge[2, 11], 
            UndirectedEdge[2, 15], 
            UndirectedEdge[2, 19], 
            UndirectedEdge[3, 6], 
            UndirectedEdge[3, 7], 
            UndirectedEdge[3, 19], 
            UndirectedEdge[4, 7], 
            UndirectedEdge[4, 15], 
            UndirectedEdge[5, 6], 
            UndirectedEdge[5, 10], 
            UndirectedEdge[5, 12], 
            UndirectedEdge[5, 16], 
            UndirectedEdge[5, 20], 
            UndirectedEdge[6, 15], 
            UndirectedEdge[6, 16], 
            UndirectedEdge[6, 19], 
            UndirectedEdge[6, 20], 
            UndirectedEdge[7, 13], 
            UndirectedEdge[7, 19], 
            UndirectedEdge[8, 9], 
            UndirectedEdge[8, 13], 
            UndirectedEdge[8, 16], 
            UndirectedEdge[9, 10], 
            UndirectedEdge[9, 16], 
            UndirectedEdge[9, 18], 
            UndirectedEdge[10, 12], 
            UndirectedEdge[10, 16], 
            UndirectedEdge[10, 18], 
            UndirectedEdge[11, 15], 
            UndirectedEdge[11, 19], 
            UndirectedEdge[12, 14], 
            UndirectedEdge[12, 18], 
            UndirectedEdge[12, 20], 
            UndirectedEdge[13, 16], 
            UndirectedEdge[13, 17], 
            UndirectedEdge[14, 15], 
            UndirectedEdge[14, 18], 
            UndirectedEdge[14, 20], 
            UndirectedEdge[15, 19], 
            UndirectedEdge[15, 20], 
            UndirectedEdge[16, 17]}, VertexCoordinates -> CompressedData["
1:eJxTTMoPSmViYGAQAWIQverjJd8kgRP2kixhfLqb7u7fUJQx8W3Nc3vNmP5D
XzXW2Le+Dtwh13rb/sPyY97mnRf3M4DBB3sGKKh8qWbIsWbPfsstJ8r2zT9l
z8Ok3S5285w9yBR703X2EPFnMHo/Og01bz/MvJNAUSn9u/tzn/9e+fHSWfuj
CiAXPbVfUmDLdX3xBSj/7P5vGiAHPoC7A90cmDvR7LeHmrvf3jRulyfPpf1A
zwF92Ad1zyN090H1PbKfcwRssX3C0wtKt3/us79aAfL4A3sAlQaXOw==
            "]}}, {1}]; $CellContext`Extend[
         Pattern[$CellContext`a, 
          Blank[]]] := Append[$CellContext`a, 
         Part[$CellContext`a, 1]]; $CellContext`ColorsForColoring = 
       Join[{Red, Green, Blue, Cyan, Magenta, Yellow, Orange, Purple, Brown, 
          Black}, 
         Table[
          ColorData[
          "Legacy", $CellContext`i], {$CellContext`i, 
           40}]]; $CellContext`options[$CellContext`ChinesePostmanTourImage] = \
{$CellContext`ArrowPullback -> Automatic, EdgeThickness -> 
         0.008, $CellContext`ShowTour -> 
         True}; $CellContext`ChinesePostmanTourImage[
         Pattern[$CellContext`jj, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`mat, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`G, $CellContext`nv, $CellContext`pull, \
$CellContext`th, $CellContext`show, $CellContext`cy, $CellContext`n, \
$CellContext`locs, $CellContext`pr, $CellContext`xR, $CellContext`cyEdges, \
$CellContext`cyEdgesSorted, $CellContext`cyEdgesIndexed, \
$CellContext`matchedverts, $CellContext`odds, $CellContext`v, \
$CellContext`i}, $CellContext`G = 
          Part[$CellContext`graphs, $CellContext`jj]; $CellContext`nv = 
          VertexCount[$CellContext`G]; {$CellContext`th, $CellContext`pull, \
$CellContext`show} = ReplaceAll[
            
            ReplaceAll[{
             EdgeThickness, $CellContext`ArrowPullback, \
$CellContext`ShowTour}, {$CellContext`opts}], 
            $CellContext`options[$CellContext`ChinesePostmanTourImage]]; \
$CellContext`pull = 
          ReplaceAll[$CellContext`pull, {
            Automatic -> 0.05, None -> 
             0}]; $CellContext`cy = $CellContext`Extend[$CellContext`tour]; \
$CellContext`n = VertexCount[$CellContext`G]; $CellContext`locs = 
          Part[$CellContext`locData, $CellContext`jj]; $CellContext`pr = {{
             Min[
              Map[First, $CellContext`locs]], 
             Max[
              Map[First, $CellContext`locs]]}, {
             Min[
              Map[Last, $CellContext`locs]], 
             Max[
              Map[Last, $CellContext`locs]]}}; $CellContext`xR = 
          Part[$CellContext`pr, 1, 2] - 
           Part[$CellContext`pr, 1, 1]; $CellContext`cyEdges = 
          Partition[$CellContext`cy, 2, 1]; $CellContext`cyEdgesSorted = 
          Map[Sort, $CellContext`cyEdges]; $CellContext`cyEdgesIndexed = 
          MapIndexed[{
             Apply[Rule, #], 
             Part[#2, 1]}& , $CellContext`cyEdges]; $CellContext`matchedverts = 
          Apply[List, $CellContext`mat, {1}]; $CellContext`odds = {
            EdgeForm[
             Directive[
              Thickness[0.002], Black]], 
            MapIndexed[{
              Part[$CellContext`ColorsForColoring, 
               Part[#2, 1]], 
              Disk[
               Part[$CellContext`locs, 
                Part[#, 1]], $CellContext`xR 0.02], 
              Disk[
               Part[$CellContext`locs, 
                Part[#, 2]], $CellContext`xR 
               0.02]}& , $CellContext`matchedverts]}; Show[
           Graphics[
            Apply[Rectangle, 
             Transpose[$CellContext`pr]]], 
           GraphPlot[$CellContext`G, EdgeRenderingFunction -> ({
              Thickness[0.025 1.2], 
              CapForm["Round"], 
              GrayLevel[1], 
              Line[#]}& ), VertexRenderingFunction -> ({}& )], 
           If[$CellContext`show, 
            
            GraphPlot[$CellContext`cyEdgesIndexed, 
             EdgeRenderingFunction -> (($CellContext`i = #3; $CellContext`\
\[Rho] = $CellContext`i/Length[$CellContext`cy]; {
                Thickness[$CellContext`th], 
                Arrowheads[4 $CellContext`th], 
                Hue[1 - $CellContext`\[Rho]/2, 0.7, 1], 
                
                Arrow[#, 
                 Norm[Part[#, 1] - Part[#, -1]] {$CellContext`pull/
                   5, $CellContext`pull}]})& ), VertexCoordinateRules -> 
             Thread[Range[$CellContext`n] -> $CellContext`locs]], {}], 
           Graphics[{
             Thickness[0.01], 
             
             Map[{$CellContext`v = 
                Part[$CellContext`locs, #]; $CellContext`odds, 
               RGBColor[1, 0.8, 0.5], White, 
               EdgeForm[
                Directive[
                 Thickness[0.002], Black]], 
               
               Disk[$CellContext`v, $CellContext`xR 
                If[$CellContext`v == Part[$CellContext`locs, 
                    Part[$CellContext`cy, 1]], 0.02 1.5, 0.02]]}& , 
              Complement[
               Range[$CellContext`nv], 
               Flatten[$CellContext`matchedverts]]]}], 
           Apply[Sequence, 
            FilterRules[{$CellContext`opts}, $CellContext`gropts]], 
           Background -> Black, PlotRange -> $CellContext`pr, 
           ImageSize -> {500, 500}, PlotRangePadding -> Scaled[0.05], Frame -> 
           True, FrameTicks -> 
           False]]; $CellContext`options[$CellContext`PlotterProblemImage] = \
{$CellContext`ArrowPullback -> Automatic, EdgeThickness -> 
         0.008, $CellContext`ShowTour -> 
         True}; $CellContext`PlotterProblemImage[
         Pattern[$CellContext`jj, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`mat1, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`odds, $CellContext`locs, $CellContext`pr, \
$CellContext`GOdd, $CellContext`XXedges, $CellContext`len, $CellContext`mat, \
$CellContext`i, $CellContext`cy, $CellContext`edgesg, $CellContext`cyEdges, \
$CellContext`pathData, $CellContext`edge, $CellContext`newAdj, \
$CellContext`wts, $CellContext`reordermat, $CellContext`g, $CellContext`nv, \
$CellContext`th, $CellContext`pull, $CellContext`show, $CellContext`xR, \
$CellContext`matchedverts, $CellContext`cyEdgesSorted, $CellContext`dashed, \
$CellContext`v, $CellContext`\[Rho], $CellContext`cyEdgesIndexed}, \
$CellContext`g = Part[$CellContext`graphs, $CellContext`jj]; $CellContext`nv = 
          VertexCount[$CellContext`g]; {$CellContext`th, $CellContext`pull, \
$CellContext`show} = ReplaceAll[
            
            ReplaceAll[{
             EdgeThickness, $CellContext`ArrowPullback, \
$CellContext`ShowTour}, {$CellContext`opts}], 
            $CellContext`options[$CellContext`PlotterProblemImage]]; \
$CellContext`pull = 
          ReplaceAll[$CellContext`pull, {
            Automatic -> 0.05, None -> 0}]; $CellContext`odds = Flatten[
            Position[
             VertexDegree[$CellContext`g], 
             PatternTest[
              Pattern[$CellContext`x, 
               Blank[]], OddQ]]]; $CellContext`locs = 
          Part[$CellContext`locData, $CellContext`jj]; $CellContext`pr = {{
             Min[
              Map[First, $CellContext`locs]], 
             Max[
              Map[First, $CellContext`locs]]}, {
             Min[
              Map[Last, $CellContext`locs]], 
             Max[
              Map[Last, $CellContext`locs]]}}; $CellContext`xR = 
          Part[$CellContext`pr, 1, 2] - 
           Part[$CellContext`pr, 1, 
            1]; $CellContext`cy = $CellContext`Extend[$CellContext`tour]; \
$CellContext`mat = ReplaceAll[$CellContext`mat1, UndirectedEdge[
              Pattern[$CellContext`i, 
               Blank[]], 
              Pattern[$CellContext`j, 
               Blank[]]] :> If[Part[
                Position[$CellContext`cy, $CellContext`i], 1, 1] < Part[
                Position[$CellContext`cy, $CellContext`j], 1, 1], 
              UndirectedEdge[$CellContext`i, $CellContext`j], 
              
              UndirectedEdge[$CellContext`j, $CellContext`i]]]; \
$CellContext`matchedverts = 
          Apply[List, $CellContext`mat1, {1}]; $CellContext`odds = {
            EdgeForm[
             Directive[
              Thickness[0.002], Black]], 
            MapIndexed[{
              Part[$CellContext`ColorsForColoring, 
               Part[#2, 1]], 
              Disk[
               Part[$CellContext`locs, 
                Part[#, 1]], $CellContext`xR 0.02], 
              Disk[
               Part[$CellContext`locs, 
                Part[#, 2]], $CellContext`xR 
               0.02]}& , $CellContext`matchedverts]}; $CellContext`edgesg = 
          EdgeList[$CellContext`g]; $CellContext`cyEdges = 
          Partition[$CellContext`cy, 2, 1]; $CellContext`cyEdgesSorted = 
          Map[Sort, $CellContext`cyEdges]; $CellContext`cyEdgesIndexed = 
          MapIndexed[{
             Apply[Rule, #], 
             Part[#2, 1]}& , $CellContext`cyEdges]; $CellContext`pathData = 
          Table[
            Not[Position[
               Take[$CellContext`cyEdges, $CellContext`i - 1], 
               
               Part[$CellContext`cyEdges, $CellContext`i]] != {}], \
{$CellContext`i, 
             Length[$CellContext`cyEdges]}]; $CellContext`dashed = 
          Map[False& , $CellContext`cyEdgesIndexed]; Show[
           GraphPlot[$CellContext`g, EdgeRenderingFunction -> ({
              Thickness[0.025 1.2], 
              CapForm["Round"], 
              GrayLevel[1], 
              Line[#]}& ), VertexRenderingFunction -> ({}& )], 
           If[$CellContext`show, 
            
            GraphPlot[$CellContext`cyEdgesIndexed, 
             EdgeRenderingFunction -> (($CellContext`\[Rho] = #3/
                Length[$CellContext`cy]; {
                Thickness[$CellContext`th], 
                Arrowheads[4 $CellContext`th], 
                Hue[1 - $CellContext`\[Rho]/2, 0.7, 1], 
                If[
                 And[
                  MemberQ[$CellContext`mat, 
                   Apply[UndirectedEdge, #2]], 
                  Part[$CellContext`pathData, #3]], 
                 Dashing[{0.01, 0.01}]], 
                
                Arrow[#, 
                 Norm[Part[#, 1] - Part[#, -1]] {$CellContext`pull/
                   5, $CellContext`pull}]})& ), VertexCoordinateRules -> 
             Thread[Range[
                 VertexCount[$CellContext`g]] -> $CellContext`locs]], {}], 
           Graphics[{
             Thickness[0.01], 
             
             Map[{$CellContext`v = 
                Part[$CellContext`locs, #]; $CellContext`odds, 
               RGBColor[1, 0.8, 0.5], White, 
               EdgeForm[
                Directive[
                 Thickness[0.002], Black]], 
               
               Disk[$CellContext`v, $CellContext`xR 
                If[$CellContext`v == Part[$CellContext`locs, 
                    Part[$CellContext`cy, 1]], 0.02 1.5, 0.02]]}& , 
              Complement[
               Range[$CellContext`nv], 
               Flatten[$CellContext`matchedverts]]]}], 
           Apply[Sequence, 
            FilterRules[{$CellContext`opts}, $CellContext`gropts]], 
           PlotRange -> $CellContext`pr, Frame -> True, ImageSize -> 350, 
           Background -> GrayLevel[0.], PlotRangePadding -> 
           Scaled[0.05]]]; \
$CellContext`options[$CellContext`ShortestHamiltonianCycleImage] = \
{$CellContext`ArrowPullback -> Automatic, EdgeThickness -> 
         0.008, $CellContext`ShowTour -> 
         True}; $CellContext`ShortestHamiltonianCycleImage[
         Pattern[$CellContext`jj, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`tourAns, $CellContext`locs, $CellContext`pr, \
$CellContext`n, $CellContext`th, $CellContext`pull, $CellContext`G, \
$CellContext`cyEdgesIndexed, $CellContext`xR, $CellContext`i, $CellContext`\
\[Rho]}, $CellContext`G = 
          Part[$CellContext`graphs, $CellContext`jj]; {$CellContext`th, \
$CellContext`pull, $CellContext`show} = ReplaceAll[
            
            ReplaceAll[{
             EdgeThickness, $CellContext`ArrowPullback, \
$CellContext`ShowTour}, {$CellContext`opts}], 
            $CellContext`options[$CellContext`ShortestHamiltonianCycleImage]]; \
$CellContext`pull = 
          ReplaceAll[$CellContext`pull, {
            Automatic -> 0.05, None -> 0}]; $CellContext`tourAns = 
          Apply[UndirectedEdge, 
            Partition[
             $CellContext`Extend[$CellContext`tour], 2, 1], {
            1}]; $CellContext`locs = 
          Part[$CellContext`locData, $CellContext`jj]; $CellContext`n = 
          VertexCount[$CellContext`G]; $CellContext`pr = {{
             Min[
              Map[First, $CellContext`locs]], 
             Max[
              Map[First, $CellContext`locs]]}, {
             Min[
              Map[Last, $CellContext`locs]], 
             Max[
              Map[Last, $CellContext`locs]]}}; $CellContext`xR = 
          Part[$CellContext`pr, 1, 2] - 
           Part[$CellContext`pr, 1, 1]; $CellContext`cyEdgesIndexed = 
          MapIndexed[{
             Apply[Rule, #], 
             Part[#2, 1]}& , $CellContext`tourAns]; Show[
           GraphPlot[
            Apply[Rule, 
             EdgeList[$CellContext`G], {1}], VertexCoordinateRules -> 
            Thread[Range[$CellContext`n] -> $CellContext`locs], 
            EdgeRenderingFunction -> ({
              Thickness[0.025 1.2], 
              CapForm["Round"], 
              GrayLevel[1], 
              Line[#]}& ), VertexRenderingFunction -> ({}& )], 
           If[$CellContext`show, 
            
            GraphPlot[$CellContext`cyEdgesIndexed, 
             EdgeRenderingFunction -> (($CellContext`i = #3; $CellContext`\
\[Rho] = $CellContext`i/Length[$CellContext`tourAns]; {
                Thickness[$CellContext`th], 
                Arrowheads[4 $CellContext`th], 
                Hue[1 - $CellContext`\[Rho]/2, 0.7, 1], 
                
                Arrow[#, 
                 Norm[Part[#, 1] - Part[#, -1]] {$CellContext`pull 0/
                   5, $CellContext`pull}]})& ), VertexCoordinateRules -> 
             Thread[Range[$CellContext`n] -> $CellContext`locs]], {}], 
           Graphics[{
             Thickness[0.01], 
             Map[{
               If[# == Part[$CellContext`locs, 
                  Part[$CellContext`tourAns, 1, 1]], 
                GrayLevel[0.85], 
                Lighter[Orange]], 
               EdgeForm[
                Directive[
                 Thickness[0.002], Black]], 
               Disk[#, $CellContext`xR If[# == Part[$CellContext`locs, 
                    Part[$CellContext`tourAns, 1, 1]], 0.02 1.5, 
                  0.02]]}& , $CellContext`locs]}], {}, 
           Apply[Sequence, 
            FilterRules[{$CellContext`opts}, $CellContext`gropts]], 
           Background -> Black, PlotRange -> $CellContext`pr, ImageSize -> 
           500, PlotRangePadding -> Scaled[0.05], Frame -> True, FrameTicks -> 
           False]]; \
$CellContext`options[$CellContext`RoutingProblemTourImage] = \
{$CellContext`ArrowPullback -> Automatic, EdgeThickness -> 
         0.008, $CellContext`ShowTour -> 
         True}; $CellContext`RoutingProblemTourImage[
         Pattern[$CellContext`jj, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`pr, $CellContext`G1, $CellContext`n, \
$CellContext`edges, $CellContext`locs, $CellContext`g2, $CellContext`tourAns, \
$CellContext`tourbadEdges, $CellContext`tourbad, $CellContext`tourgood, \
$CellContext`G, $CellContext`th, $CellContext`pull, $CellContext`show, \
$CellContext`xR, $CellContext`cy, $CellContext`cyEdges, \
$CellContext`cyEdgesSorted, $CellContext`cyEdgesIndexed, \
$CellContext`\[Rho]}, $CellContext`G = 
          Part[$CellContext`graphs, $CellContext`jj]; {$CellContext`th, \
$CellContext`pull, $CellContext`show} = ReplaceAll[
            
            ReplaceAll[{
             EdgeThickness, $CellContext`ArrowPullback, \
$CellContext`ShowTour}, {$CellContext`opts}], 
            $CellContext`options[$CellContext`RoutingProblemTourImage]]; \
$CellContext`pull = 
          ReplaceAll[$CellContext`pull, {
            Automatic -> 0.0002, None -> 0}]; $CellContext`n = 
          VertexCount[$CellContext`G]; $CellContext`edges = 
          EdgeList[$CellContext`G]; $CellContext`locs = 
          Part[$CellContext`locData, $CellContext`jj]; $CellContext`pr = {{
             Min[
              Map[First, $CellContext`locs]], 
             Max[
              Map[First, $CellContext`locs]]}, {
             Min[
              Map[Last, $CellContext`locs]], 
             Max[
              Map[Last, $CellContext`locs]]}}; $CellContext`xR = 
          Part[$CellContext`pr, 1, 2] - 
           Part[$CellContext`pr, 1, 
            1]; $CellContext`cy = $CellContext`Extend[$CellContext`tour]; \
$CellContext`cyEdges = 
          Partition[$CellContext`cy, 2, 1]; $CellContext`cyEdgesSorted = 
          Map[Sort, $CellContext`cyEdges]; $CellContext`cyEdgesIndexed = 
          MapIndexed[{
             Apply[Rule, #], 
             Part[#2, 1]}& , $CellContext`cyEdges]; Show[
           GraphPlot[$CellContext`G, EdgeRenderingFunction -> ({
              Thickness[0.025 1.2], 
              CapForm["Round"], 
              GrayLevel[1], 
              Line[#]}& ), VertexRenderingFunction -> ({}& )], 
           If[$CellContext`show, 
            
            GraphPlot[$CellContext`cyEdgesIndexed, 
             EdgeRenderingFunction -> (($CellContext`i = #3; $CellContext`\
\[Rho] = $CellContext`i/Length[$CellContext`cy]; {
                Thickness[$CellContext`th], 
                Arrowheads[4 $CellContext`th], 
                Hue[1 - $CellContext`\[Rho]/2, 0.7, 1], 
                
                Arrow[#, 
                 Norm[Part[#, 1] - Part[#, -1]] {$CellContext`pull 0/
                   5, $CellContext`pull}]})& ), VertexCoordinateRules -> 
             Thread[Range[$CellContext`n] -> $CellContext`locs]], {}], 
           Graphics[{
             Thickness[0.01], 
             Map[{
               If[# == Part[$CellContext`locs, 
                  Part[$CellContext`cy, 1]], 
                GrayLevel[0.85], 
                Lighter[Orange]], 
               EdgeForm[
                Directive[
                 Thickness[0.002], Black]], 
               Disk[#, $CellContext`xR If[# == Part[$CellContext`locs, 
                    Part[$CellContext`cy, 1]], 0.02 1.5, 
                  0.02]]}& , $CellContext`locs]}], 
           Apply[Sequence, 
            FilterRules[{$CellContext`opts}, $CellContext`gropts]], 
           Background -> Black, PlotRange -> $CellContext`pr, ImageSize -> 
           500, PlotRangePadding -> Scaled[0.05], Frame -> True, FrameTicks -> 
           False]]; $CellContext`plottermatdata = {{
          UndirectedEdge[2, 4], 
          UndirectedEdge[3, 5]}, {
          UndirectedEdge[2, 3], 
          UndirectedEdge[5, 6], 
          UndirectedEdge[7, 10], 
          UndirectedEdge[11, 22], 
          UndirectedEdge[13, 18], 
          UndirectedEdge[14, 19]}, {
          UndirectedEdge[5, 7], 
          UndirectedEdge[6, 8]}, {
          UndirectedEdge[2, 4], 
          UndirectedEdge[5, 6], 
          UndirectedEdge[8, 10], 
          UndirectedEdge[11, 15], 
          UndirectedEdge[12, 20], 
          UndirectedEdge[13, 17]}}; $CellContext`cppmatdata = {{
          UndirectedEdge[2, 5], 
          UndirectedEdge[3, 4]}, {
          UndirectedEdge[2, 5], 
          UndirectedEdge[3, 13], 
          UndirectedEdge[6, 7], 
          UndirectedEdge[10, 14], 
          UndirectedEdge[11, 18], 
          UndirectedEdge[19, 22]}, {
          UndirectedEdge[5, 7], 
          UndirectedEdge[6, 8]}, {
          UndirectedEdge[2, 11], 
          UndirectedEdge[4, 15], 
          UndirectedEdge[5, 6], 
          UndirectedEdge[8, 13], 
          UndirectedEdge[10, 17], 
          UndirectedEdge[12, 20]}}; $CellContext`tourdata = {{{1, 4, 3, 5, 2, 
          4}, {1, 4, 2, 3, 5}, {1, 5, 3, 5, 2, 4, 3, 2, 4}, {1, 5, 2, 5, 3, 4,
           3, 2, 4}}, {{1, 2, 1, 6, 5, 6, 7, 11, 16, 10, 15, 20, 19, 20, 15, 
          10, 9, 14, 9, 10, 16, 21, 22, 23, 17, 18, 17, 12, 7, 3, 4, 8, 13, 8,
           7, 6}, {}, {1, 6, 5, 6, 7, 10, 15, 20, 19, 14, 9, 10, 16, 21, 22, 
          11, 16, 22, 23, 17, 12, 7, 11, 17, 18, 13, 8, 7, 3, 8, 4, 3, 2}, {1,
           6, 7, 12, 17, 18, 17, 11, 17, 23, 22, 21, 16, 22, 16, 10, 15, 20, 
          19, 20, 15, 10, 9, 14, 9, 10, 16, 11, 7, 8, 13, 8, 3, 8, 4, 3, 7, 6,
           5, 6, 1, 2}}, {{1, 3, 9, 7, 5, 8, 2, 8, 6, 4}, {1, 2, 4, 6, 8, 5, 
          7, 9, 3}, {1, 9, 7, 5, 9, 8, 6, 8, 5, 7, 4, 6, 5, 4, 8, 2, 9, 3, 1, 
          4, 2}, {1, 9, 7, 5, 9, 8, 6, 8, 5, 7, 4, 6, 5, 4, 8, 2, 9, 3, 1, 4, 
          2}}, {{1, 16, 8, 9, 18, 10, 5, 12, 20, 14, 15, 11, 2, 4, 2, 19, 6, 
          3, 7, 13, 17}, {1, 3, 6, 5, 16, 8, 9, 10, 18, 12, 20, 14, 15, 11, 
          19, 2, 4, 7, 13, 17}, {1, 17, 13, 17, 16, 9, 18, 14, 20, 12, 20, 6, 
          5, 20, 15, 11, 19, 15, 14, 12, 18, 10, 8, 16, 13, 7, 19, 6, 16, 10, 
          12, 5, 16, 1, 13, 8, 9, 10, 5, 6, 15, 4, 2, 15, 11, 2, 19, 3, 7, 4, 
          2, 7, 1, 6, 3}, {1, 17, 16, 13, 17, 16, 10, 18, 14, 20, 12, 20, 6, 
          5, 20, 15, 19, 7, 13, 8, 16, 9, 18, 12, 14, 15, 4, 15, 6, 16, 10, 
          12, 5, 16, 1, 13, 8, 9, 10, 5, 6, 19, 11, 2, 15, 11, 2, 19, 3, 7, 4,
           2, 7, 1, 6, 3}}}; $CellContext`locData = {{{0., 0.5}, {0.15, 
         0.18}, {0., 0.}, {0., 0.3}, {0.4, 0.}}, CompressedData["
1:eJxTTMoPSmViYGAQB2IQDQEf7LHTDA6ofA40voADdnUMDthpDjS+AJo4uj3o
+tBpdP0iaOK43ImuTwAHLYJGw8yD8RnQ5HG5A2EOAGJbFzw=
         "], {{0.309, 0.951}, {0.18, 0.033}, {-0.809, 0.588}, {1., 0.}, {
         0.241, -0.396}, {0.487, -0.209}, {0.309, -0.951}, {
         0.22, -0.232}, {-0.809, -0.588}}, CompressedData["
1:eJxTTMoPSmViYGAQAWIQverjJd8kgRP2kixhfLqb7u7fUJQx8W3Nc3vNmP5D
XzXW2Le+Dtwh13rb/sPyY97mnRf3M4DBB3sGKKh8qWbIsWbPfsstJ8r2zT9l
z8Ok3S5285w9yBR703X2EPFnMHo/Og01bz/MvJNAUSn9u/tzn/9e+fHSWfuj
CiAXPbVfUmDLdX3xBSj/7P5vGiAHPoC7A90cmDvR7LeHmrvf3jRulyfPpf1A
zwF92Ad1zyN090H1PbKfcwRssX3C0wtKt3/us79aAfL4A3sAlQaXOw==
         "]}; Null); Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->233507806],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`graphtype$$ = 
    "graph based on grid", $CellContext`problemtype$$ = 
    4, $CellContext`showtour$$ = True, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`graphtype$$], "graph based on grid", "graph type"}, {
      "small", "graph based on grid", "small planar graph", 
       "large planar graph"}}, {{
       Hold[$CellContext`showtour$$], True, "show tour"}, {False, True}}, {
      Hold[
       Row[{
         Manipulate`Place[1], 
         Spacer[20], 
         Manipulate`Place[2]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`problemtype$$], 4, "problem type"}, {
      1 -> "vehicle routing problem", 2 -> 
       "traveling salesman problem on graph", 3 -> "plotter problem", 4 -> 
       "Chinese postman problem"}}}, Typeset`size$$ = {400., {217., 223.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`graphtype$187654$$ = 
    0, $CellContext`showtour$187655$$ = 
    False, $CellContext`problemtype$187656$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`graphtype$$ = 
        "graph based on grid", $CellContext`problemtype$$ = 
        4, $CellContext`showtour$$ = True}, "ControllerVariables" :> {
        Hold[$CellContext`graphtype$$, $CellContext`graphtype$187654$$, 0], 
        Hold[$CellContext`showtour$$, $CellContext`showtour$187655$$, False], 
        Hold[$CellContext`problemtype$$, $CellContext`problemtype$187656$$, 
         False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`pull$, $CellContext`is$, $CellContext`thicks$, \
$CellContext`jj$, $CellContext`G$, $CellContext`tour$, $CellContext`mat$, \
$CellContext`locs$}, 
        SeedRandom[1]; $CellContext`pull$ = 0.1; $CellContext`is$ = 
         330; $CellContext`thicks$ = {0.014, 0.014, 0.012, 
          0.01}; $CellContext`jj$ = ReplaceAll[$CellContext`graphtype$$, 
           
           Thread[{"small", "graph based on grid", "small planar graph", 
              "large planar graph"} -> Range[4]]]; $CellContext`G$ = 
         Part[$CellContext`graphs, $CellContext`jj$]; $CellContext`locs$ = 
         Part[$CellContext`locData, $CellContext`jj$]; $CellContext`tour$ = 
         Part[$CellContext`tourdata, $CellContext`jj$, \
$CellContext`problemtype$$]; 
        If[$CellContext`problemtype$$ == 4, $CellContext`mat$ = 
          Part[$CellContext`cppmatdata, $CellContext`jj$]]; Pane[
          Which[$CellContext`problemtype$$ == 1, 
           Column[{
             Style[
             " Shortest cycle through all vertices, staying on graph edges, \
with vertex and \n edge repetition allowed", FontFamily -> "Times"], 
             $CellContext`RoutingProblemTourImage[$CellContext`jj$, \
$CellContext`tour$, EdgeThickness -> 
              Part[$CellContext`thicks$, $CellContext`jj$], \
$CellContext`ShowTour -> $CellContext`showtour$$, 
              ImageSize -> $CellContext`is$, AspectRatio -> 
              Automatic, $CellContext`ArrowPullback -> 
              0.1]}], $CellContext`problemtype$$ == 2, 
           Column[{
             Style[
             " Shortest Hamiltonian cycle: a cycle through all vertices, \
staying on graph edges\n and visiting each vertex once", FontFamily -> 
              "Times"], 
             If[$CellContext`graphtype$$ === "graph based on grid", 
              Column[{
                Style[
                " There is no Hamiltonian cycle for this graph", FontFamily -> 
                 "Times", Red], 
                
                GraphPlot[$CellContext`G$, ImageSize -> $CellContext`is$, 
                 EdgeRenderingFunction -> ({
                   Thickness[0.025 1.2], 
                   CapForm["Round"], 
                   GrayLevel[1], 
                   Line[#]}& ), Background -> Black, PlotRangePadding -> 
                 Scaled[0.05], PlotRange -> {{1, 5}, {1, 5}}, 
                 VertexRenderingFunction -> ({
                   EdgeForm[
                    Directive[
                    Thickness[0.003], Black]], 
                   FaceForm[
                    RGBColor[1, 0.8, 0.5]], 
                   Disk[#, 0.09]}& )]}], 
              $CellContext`ShortestHamiltonianCycleImage[$CellContext`jj$, \
$CellContext`tour$, 
               ImageSize -> $CellContext`is$, $CellContext`ShowTour -> \
$CellContext`showtour$$, AspectRatio -> Automatic, $CellContext`ArrowPullback -> 
               0.1, EdgeThickness -> 
               Part[$CellContext`thicks$, $CellContext`jj$]]]}], \
$CellContext`problemtype$$ == 3, 
           Column[{
             Style[
             " Shortest cycle through all edges, with travel off the edges \
allowed\n and vertex repetition allowed; pen\[Hyphen]up segments are dashed", 
              FontFamily -> "Times"], 
             $CellContext`PlotterProblemImage[$CellContext`jj$, \
$CellContext`tour$, 
              Part[$CellContext`plottermatdata, $CellContext`jj$], 
              EdgeThickness -> Part[$CellContext`thicks$, $CellContext`jj$], 
              ImageSize -> $CellContext`is$, AspectRatio -> 
              Automatic, $CellContext`ShowTour -> $CellContext`showtour$$, \
$CellContext`ArrowPullback -> $CellContext`pull$]}], \
$CellContext`problemtype$$ == 4, 
           Column[{
             Style[
             " Shortest cycle through all edges, staying on graph edges, with \
vertex and\n edge repetition allowed; like a mailman using streets", 
              FontFamily -> "Times"], 
             $CellContext`ChinesePostmanTourImage[$CellContext`jj$, \
$CellContext`tour$, $CellContext`mat$, ImageSize -> $CellContext`is$, 
              EdgeThickness -> Part[$CellContext`thicks$, $CellContext`jj$], 
              AspectRatio -> 
              Automatic, $CellContext`ShowTour -> $CellContext`showtour$$, \
$CellContext`ArrowPullback -> $CellContext`pull$]}]], 
          ImageSize -> {400, 440}]], 
      "Specifications" :> {{{$CellContext`graphtype$$, "graph based on grid", 
          "graph type"}, {
         "small", "graph based on grid", "small planar graph", 
          "large planar graph"}, ControlPlacement -> 
         1}, {{$CellContext`showtour$$, True, "show tour"}, {False, True}, 
         ControlPlacement -> 2}, 
        Row[{
          Manipulate`Place[1], 
          Spacer[20], 
          Manipulate`Place[2]}], {{$CellContext`problemtype$$, 4, 
          "problem type"}, {
         1 -> "vehicle routing problem", 2 -> 
          "traveling salesman problem on graph", 3 -> "plotter problem", 4 -> 
          "Chinese postman problem"}}}, "Options" :> {TrackedSymbols -> True},
       "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{664., {274., 279.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>(($CellContext`gropts = {
        AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> False, 
         AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, 
         Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, 
         ColorOutput -> Automatic, ContentSelectable -> Automatic, 
         CoordinatesToolOptions -> Automatic, 
         DisplayFunction :> $DisplayFunction, Epilog -> {}, FormatType :> 
         TraditionalForm, Frame -> False, FrameLabel -> None, 
         FrameStyle -> {}, FrameTicks -> Automatic, FrameTicksStyle -> {}, 
         GridLines -> None, GridLinesStyle -> {}, ImageMargins -> 0., 
         ImagePadding -> All, ImageSize -> Automatic, ImageSizeRaw -> 
         Automatic, LabelStyle -> {}, Method -> Automatic, PlotLabel -> None, 
         PlotRange -> All, PlotRangeClipping -> False, PlotRangePadding -> 
         Automatic, PlotRegion -> Automatic, PreserveImageOptions -> 
         Automatic, Prolog -> {}, RotateLabel -> True, Ticks -> Automatic, 
         TicksStyle -> {}}; $CellContext`graphs = 
       Apply[Graph, {{{1, 2, 3, 4, 5}, {
            UndirectedEdge[1, 4], 
            UndirectedEdge[1, 5], 
            UndirectedEdge[2, 3], 
            UndirectedEdge[2, 4], 
            UndirectedEdge[2, 5], 
            UndirectedEdge[3, 4], 
            UndirectedEdge[3, 5]}, 
           VertexCoordinates -> {{0., 0.5}, {0.15, 0.18}, {0., 0.}, {0., 
            0.3}, {0.4, 0.}}}, {{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 
           14, 15, 16, 17, 18, 19, 20, 21, 22, 23}, {
            UndirectedEdge[1, 2], 
            UndirectedEdge[1, 6], 
            UndirectedEdge[3, 4], 
            UndirectedEdge[3, 7], 
            UndirectedEdge[3, 8], 
            UndirectedEdge[4, 8], 
            UndirectedEdge[5, 6], 
            UndirectedEdge[6, 7], 
            UndirectedEdge[7, 8], 
            UndirectedEdge[7, 11], 
            UndirectedEdge[7, 12], 
            UndirectedEdge[8, 13], 
            UndirectedEdge[9, 10], 
            UndirectedEdge[9, 14], 
            UndirectedEdge[10, 15], 
            UndirectedEdge[10, 16], 
            UndirectedEdge[11, 16], 
            UndirectedEdge[11, 17], 
            UndirectedEdge[12, 17], 
            UndirectedEdge[15, 20], 
            UndirectedEdge[16, 21], 
            UndirectedEdge[16, 22], 
            UndirectedEdge[17, 18], 
            UndirectedEdge[17, 23], 
            UndirectedEdge[19, 20], 
            UndirectedEdge[21, 22], 
            UndirectedEdge[22, 23]}, VertexCoordinates -> CompressedData["
1:eJxTTMoPSmViYGAQB2IQDQEf7LHTDA6ofA40voADdnUMDthpDjS+AJo4uj3o
+tBpdP0iaOK43ImuTwAHLYJGw8yD8RnQ5HG5A2EOAGJbFzw=
            "]}, {{1, 2, 3, 4, 5, 6, 7, 8, 9}, {
            UndirectedEdge[1, 2], 
            UndirectedEdge[1, 3], 
            UndirectedEdge[1, 4], 
            UndirectedEdge[1, 9], 
            UndirectedEdge[2, 4], 
            UndirectedEdge[2, 8], 
            UndirectedEdge[2, 9], 
            UndirectedEdge[3, 9], 
            UndirectedEdge[4, 5], 
            UndirectedEdge[4, 6], 
            UndirectedEdge[4, 7], 
            UndirectedEdge[4, 8], 
            UndirectedEdge[5, 6], 
            UndirectedEdge[5, 7], 
            UndirectedEdge[5, 8], 
            UndirectedEdge[5, 9], 
            UndirectedEdge[6, 8], 
            UndirectedEdge[7, 9], 
            UndirectedEdge[8, 9]}, 
           VertexCoordinates -> {{0.309, 0.951}, {0.18, 0.033}, {-0.809, 
            0.588}, {1., 0.}, {0.241, -0.396}, {0.487, -0.209}, {
            0.309, -0.951}, {0.22, -0.232}, {-0.809, -0.588}}}, {{1, 2, 3, 4, 
           5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {
            UndirectedEdge[1, 3], 
            UndirectedEdge[1, 6], 
            UndirectedEdge[1, 7], 
            UndirectedEdge[1, 13], 
            UndirectedEdge[1, 16], 
            UndirectedEdge[1, 17], 
            UndirectedEdge[2, 4], 
            UndirectedEdge[2, 7], 
            UndirectedEdge[2, 11], 
            UndirectedEdge[2, 15], 
            UndirectedEdge[2, 19], 
            UndirectedEdge[3, 6], 
            UndirectedEdge[3, 7], 
            UndirectedEdge[3, 19], 
            UndirectedEdge[4, 7], 
            UndirectedEdge[4, 15], 
            UndirectedEdge[5, 6], 
            UndirectedEdge[5, 10], 
            UndirectedEdge[5, 12], 
            UndirectedEdge[5, 16], 
            UndirectedEdge[5, 20], 
            UndirectedEdge[6, 15], 
            UndirectedEdge[6, 16], 
            UndirectedEdge[6, 19], 
            UndirectedEdge[6, 20], 
            UndirectedEdge[7, 13], 
            UndirectedEdge[7, 19], 
            UndirectedEdge[8, 9], 
            UndirectedEdge[8, 13], 
            UndirectedEdge[8, 16], 
            UndirectedEdge[9, 10], 
            UndirectedEdge[9, 16], 
            UndirectedEdge[9, 18], 
            UndirectedEdge[10, 12], 
            UndirectedEdge[10, 16], 
            UndirectedEdge[10, 18], 
            UndirectedEdge[11, 15], 
            UndirectedEdge[11, 19], 
            UndirectedEdge[12, 14], 
            UndirectedEdge[12, 18], 
            UndirectedEdge[12, 20], 
            UndirectedEdge[13, 16], 
            UndirectedEdge[13, 17], 
            UndirectedEdge[14, 15], 
            UndirectedEdge[14, 18], 
            UndirectedEdge[14, 20], 
            UndirectedEdge[15, 19], 
            UndirectedEdge[15, 20], 
            UndirectedEdge[16, 17]}, VertexCoordinates -> CompressedData["
1:eJxTTMoPSmViYGAQAWIQverjJd8kgRP2kixhfLqb7u7fUJQx8W3Nc3vNmP5D
XzXW2Le+Dtwh13rb/sPyY97mnRf3M4DBB3sGKKh8qWbIsWbPfsstJ8r2zT9l
z8Ok3S5285w9yBR703X2EPFnMHo/Og01bz/MvJNAUSn9u/tzn/9e+fHSWfuj
CiAXPbVfUmDLdX3xBSj/7P5vGiAHPoC7A90cmDvR7LeHmrvf3jRulyfPpf1A
zwF92Ad1zyN090H1PbKfcwRssX3C0wtKt3/us79aAfL4A3sAlQaXOw==
            "]}}, {1}]; $CellContext`Extend[
         Pattern[$CellContext`a, 
          Blank[]]] := Append[$CellContext`a, 
         Part[$CellContext`a, 1]]; $CellContext`ColorsForColoring = 
       Join[{Red, Green, Blue, Cyan, Magenta, Yellow, Orange, Purple, Brown, 
          Black}, 
         Table[
          ColorData[
          "Legacy", $CellContext`i], {$CellContext`i, 
           40}]]; $CellContext`options[$CellContext`ChinesePostmanTourImage] = \
{$CellContext`ArrowPullback -> Automatic, EdgeThickness -> 
         0.008, $CellContext`ShowTour -> 
         True}; $CellContext`ChinesePostmanTourImage[
         Pattern[$CellContext`jj, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`mat, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`G, $CellContext`nv, $CellContext`pull, \
$CellContext`th, $CellContext`show, $CellContext`cy, $CellContext`n, \
$CellContext`locs, $CellContext`pr, $CellContext`xR, $CellContext`cyEdges, \
$CellContext`cyEdgesSorted, $CellContext`cyEdgesIndexed, \
$CellContext`matchedverts, $CellContext`odds, $CellContext`v, \
$CellContext`i}, $CellContext`G = 
          Part[$CellContext`graphs, $CellContext`jj]; $CellContext`nv = 
          VertexCount[$CellContext`G]; {$CellContext`th, $CellContext`pull, \
$CellContext`show} = ReplaceAll[
            
            ReplaceAll[{
             EdgeThickness, $CellContext`ArrowPullback, \
$CellContext`ShowTour}, {$CellContext`opts}], 
            $CellContext`options[$CellContext`ChinesePostmanTourImage]]; \
$CellContext`pull = 
          ReplaceAll[$CellContext`pull, {
            Automatic -> 0.05, None -> 
             0}]; $CellContext`cy = $CellContext`Extend[$CellContext`tour]; \
$CellContext`n = VertexCount[$CellContext`G]; $CellContext`locs = 
          Part[$CellContext`locData, $CellContext`jj]; $CellContext`pr = {{
             Min[
              Map[First, $CellContext`locs]], 
             Max[
              Map[First, $CellContext`locs]]}, {
             Min[
              Map[Last, $CellContext`locs]], 
             Max[
              Map[Last, $CellContext`locs]]}}; $CellContext`xR = 
          Part[$CellContext`pr, 1, 2] - 
           Part[$CellContext`pr, 1, 1]; $CellContext`cyEdges = 
          Partition[$CellContext`cy, 2, 1]; $CellContext`cyEdgesSorted = 
          Map[Sort, $CellContext`cyEdges]; $CellContext`cyEdgesIndexed = 
          MapIndexed[{
             Apply[Rule, #], 
             Part[#2, 1]}& , $CellContext`cyEdges]; $CellContext`matchedverts = 
          Apply[List, $CellContext`mat, {1}]; $CellContext`odds = {
            EdgeForm[
             Directive[
              Thickness[0.002], Black]], 
            MapIndexed[{
              Part[$CellContext`ColorsForColoring, 
               Part[#2, 1]], 
              Disk[
               Part[$CellContext`locs, 
                Part[#, 1]], $CellContext`xR 0.02], 
              Disk[
               Part[$CellContext`locs, 
                Part[#, 2]], $CellContext`xR 
               0.02]}& , $CellContext`matchedverts]}; Show[
           Graphics[
            Apply[Rectangle, 
             Transpose[$CellContext`pr]]], 
           GraphPlot[$CellContext`G, EdgeRenderingFunction -> ({
              Thickness[0.025 1.2], 
              CapForm["Round"], 
              GrayLevel[1], 
              Line[#]}& ), VertexRenderingFunction -> ({}& )], 
           If[$CellContext`show, 
            
            GraphPlot[$CellContext`cyEdgesIndexed, 
             EdgeRenderingFunction -> (($CellContext`i = #3; $CellContext`\
\[Rho] = $CellContext`i/Length[$CellContext`cy]; {
                Thickness[$CellContext`th], 
                Arrowheads[4 $CellContext`th], 
                Hue[1 - $CellContext`\[Rho]/2, 0.7, 1], 
                
                Arrow[#, 
                 Norm[Part[#, 1] - Part[#, -1]] {$CellContext`pull/
                   5, $CellContext`pull}]})& ), VertexCoordinateRules -> 
             Thread[Range[$CellContext`n] -> $CellContext`locs]], {}], 
           Graphics[{
             Thickness[0.01], 
             
             Map[{$CellContext`v = 
                Part[$CellContext`locs, #]; $CellContext`odds, 
               RGBColor[1, 0.8, 0.5], White, 
               EdgeForm[
                Directive[
                 Thickness[0.002], Black]], 
               
               Disk[$CellContext`v, $CellContext`xR 
                If[$CellContext`v == Part[$CellContext`locs, 
                    Part[$CellContext`cy, 1]], 0.02 1.5, 0.02]]}& , 
              Complement[
               Range[$CellContext`nv], 
               Flatten[$CellContext`matchedverts]]]}], 
           Apply[Sequence, 
            FilterRules[{$CellContext`opts}, $CellContext`gropts]], 
           Background -> Black, PlotRange -> $CellContext`pr, 
           ImageSize -> {500, 500}, PlotRangePadding -> Scaled[0.05], Frame -> 
           True, FrameTicks -> 
           False]]; $CellContext`options[$CellContext`PlotterProblemImage] = \
{$CellContext`ArrowPullback -> Automatic, EdgeThickness -> 
         0.008, $CellContext`ShowTour -> 
         True}; $CellContext`PlotterProblemImage[
         Pattern[$CellContext`jj, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`mat1, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`odds, $CellContext`locs, $CellContext`pr, \
$CellContext`GOdd, $CellContext`XXedges, $CellContext`len, $CellContext`mat, \
$CellContext`i, $CellContext`cy, $CellContext`edgesg, $CellContext`cyEdges, \
$CellContext`pathData, $CellContext`edge, $CellContext`newAdj, \
$CellContext`wts, $CellContext`reordermat, $CellContext`g, $CellContext`nv, \
$CellContext`th, $CellContext`pull, $CellContext`show, $CellContext`xR, \
$CellContext`matchedverts, $CellContext`cyEdgesSorted, $CellContext`dashed, \
$CellContext`v, $CellContext`\[Rho], $CellContext`cyEdgesIndexed}, \
$CellContext`g = Part[$CellContext`graphs, $CellContext`jj]; $CellContext`nv = 
          VertexCount[$CellContext`g]; {$CellContext`th, $CellContext`pull, \
$CellContext`show} = ReplaceAll[
            
            ReplaceAll[{
             EdgeThickness, $CellContext`ArrowPullback, \
$CellContext`ShowTour}, {$CellContext`opts}], 
            $CellContext`options[$CellContext`PlotterProblemImage]]; \
$CellContext`pull = 
          ReplaceAll[$CellContext`pull, {
            Automatic -> 0.05, None -> 0}]; $CellContext`odds = Flatten[
            Position[
             VertexDegree[$CellContext`g], 
             PatternTest[
              Pattern[$CellContext`x, 
               Blank[]], OddQ]]]; $CellContext`locs = 
          Part[$CellContext`locData, $CellContext`jj]; $CellContext`pr = {{
             Min[
              Map[First, $CellContext`locs]], 
             Max[
              Map[First, $CellContext`locs]]}, {
             Min[
              Map[Last, $CellContext`locs]], 
             Max[
              Map[Last, $CellContext`locs]]}}; $CellContext`xR = 
          Part[$CellContext`pr, 1, 2] - 
           Part[$CellContext`pr, 1, 
            1]; $CellContext`cy = $CellContext`Extend[$CellContext`tour]; \
$CellContext`mat = ReplaceAll[$CellContext`mat1, UndirectedEdge[
              Pattern[$CellContext`i, 
               Blank[]], 
              Pattern[$CellContext`j, 
               Blank[]]] :> If[Part[
                Position[$CellContext`cy, $CellContext`i], 1, 1] < Part[
                Position[$CellContext`cy, $CellContext`j], 1, 1], 
              UndirectedEdge[$CellContext`i, $CellContext`j], 
              
              UndirectedEdge[$CellContext`j, $CellContext`i]]]; \
$CellContext`matchedverts = 
          Apply[List, $CellContext`mat1, {1}]; $CellContext`odds = {
            EdgeForm[
             Directive[
              Thickness[0.002], Black]], 
            MapIndexed[{
              Part[$CellContext`ColorsForColoring, 
               Part[#2, 1]], 
              Disk[
               Part[$CellContext`locs, 
                Part[#, 1]], $CellContext`xR 0.02], 
              Disk[
               Part[$CellContext`locs, 
                Part[#, 2]], $CellContext`xR 
               0.02]}& , $CellContext`matchedverts]}; $CellContext`edgesg = 
          EdgeList[$CellContext`g]; $CellContext`cyEdges = 
          Partition[$CellContext`cy, 2, 1]; $CellContext`cyEdgesSorted = 
          Map[Sort, $CellContext`cyEdges]; $CellContext`cyEdgesIndexed = 
          MapIndexed[{
             Apply[Rule, #], 
             Part[#2, 1]}& , $CellContext`cyEdges]; $CellContext`pathData = 
          Table[
            Not[Position[
               Take[$CellContext`cyEdges, $CellContext`i - 1], 
               
               Part[$CellContext`cyEdges, $CellContext`i]] != {}], \
{$CellContext`i, 
             Length[$CellContext`cyEdges]}]; $CellContext`dashed = 
          Map[False& , $CellContext`cyEdgesIndexed]; Show[
           GraphPlot[$CellContext`g, EdgeRenderingFunction -> ({
              Thickness[0.025 1.2], 
              CapForm["Round"], 
              GrayLevel[1], 
              Line[#]}& ), VertexRenderingFunction -> ({}& )], 
           If[$CellContext`show, 
            
            GraphPlot[$CellContext`cyEdgesIndexed, 
             EdgeRenderingFunction -> (($CellContext`\[Rho] = #3/
                Length[$CellContext`cy]; {
                Thickness[$CellContext`th], 
                Arrowheads[4 $CellContext`th], 
                Hue[1 - $CellContext`\[Rho]/2, 0.7, 1], 
                If[
                 And[
                  MemberQ[$CellContext`mat, 
                   Apply[UndirectedEdge, #2]], 
                  Part[$CellContext`pathData, #3]], 
                 Dashing[{0.01, 0.01}]], 
                
                Arrow[#, 
                 Norm[Part[#, 1] - Part[#, -1]] {$CellContext`pull/
                   5, $CellContext`pull}]})& ), VertexCoordinateRules -> 
             Thread[Range[
                 VertexCount[$CellContext`g]] -> $CellContext`locs]], {}], 
           Graphics[{
             Thickness[0.01], 
             
             Map[{$CellContext`v = 
                Part[$CellContext`locs, #]; $CellContext`odds, 
               RGBColor[1, 0.8, 0.5], White, 
               EdgeForm[
                Directive[
                 Thickness[0.002], Black]], 
               
               Disk[$CellContext`v, $CellContext`xR 
                If[$CellContext`v == Part[$CellContext`locs, 
                    Part[$CellContext`cy, 1]], 0.02 1.5, 0.02]]}& , 
              Complement[
               Range[$CellContext`nv], 
               Flatten[$CellContext`matchedverts]]]}], 
           Apply[Sequence, 
            FilterRules[{$CellContext`opts}, $CellContext`gropts]], 
           PlotRange -> $CellContext`pr, Frame -> True, ImageSize -> 350, 
           Background -> GrayLevel[0.], PlotRangePadding -> 
           Scaled[0.05]]]; \
$CellContext`options[$CellContext`ShortestHamiltonianCycleImage] = \
{$CellContext`ArrowPullback -> Automatic, EdgeThickness -> 
         0.008, $CellContext`ShowTour -> 
         True}; $CellContext`ShortestHamiltonianCycleImage[
         Pattern[$CellContext`jj, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`tourAns, $CellContext`locs, $CellContext`pr, \
$CellContext`n, $CellContext`th, $CellContext`pull, $CellContext`G, \
$CellContext`cyEdgesIndexed, $CellContext`xR, $CellContext`i, $CellContext`\
\[Rho]}, $CellContext`G = 
          Part[$CellContext`graphs, $CellContext`jj]; {$CellContext`th, \
$CellContext`pull, $CellContext`show} = ReplaceAll[
            
            ReplaceAll[{
             EdgeThickness, $CellContext`ArrowPullback, \
$CellContext`ShowTour}, {$CellContext`opts}], 
            $CellContext`options[$CellContext`ShortestHamiltonianCycleImage]]; \
$CellContext`pull = 
          ReplaceAll[$CellContext`pull, {
            Automatic -> 0.05, None -> 0}]; $CellContext`tourAns = 
          Apply[UndirectedEdge, 
            Partition[
             $CellContext`Extend[$CellContext`tour], 2, 1], {
            1}]; $CellContext`locs = 
          Part[$CellContext`locData, $CellContext`jj]; $CellContext`n = 
          VertexCount[$CellContext`G]; $CellContext`pr = {{
             Min[
              Map[First, $CellContext`locs]], 
             Max[
              Map[First, $CellContext`locs]]}, {
             Min[
              Map[Last, $CellContext`locs]], 
             Max[
              Map[Last, $CellContext`locs]]}}; $CellContext`xR = 
          Part[$CellContext`pr, 1, 2] - 
           Part[$CellContext`pr, 1, 1]; $CellContext`cyEdgesIndexed = 
          MapIndexed[{
             Apply[Rule, #], 
             Part[#2, 1]}& , $CellContext`tourAns]; Show[
           GraphPlot[
            Apply[Rule, 
             EdgeList[$CellContext`G], {1}], VertexCoordinateRules -> 
            Thread[Range[$CellContext`n] -> $CellContext`locs], 
            EdgeRenderingFunction -> ({
              Thickness[0.025 1.2], 
              CapForm["Round"], 
              GrayLevel[1], 
              Line[#]}& ), VertexRenderingFunction -> ({}& )], 
           If[$CellContext`show, 
            
            GraphPlot[$CellContext`cyEdgesIndexed, 
             EdgeRenderingFunction -> (($CellContext`i = #3; $CellContext`\
\[Rho] = $CellContext`i/Length[$CellContext`tourAns]; {
                Thickness[$CellContext`th], 
                Arrowheads[4 $CellContext`th], 
                Hue[1 - $CellContext`\[Rho]/2, 0.7, 1], 
                
                Arrow[#, 
                 Norm[Part[#, 1] - Part[#, -1]] {$CellContext`pull 0/
                   5, $CellContext`pull}]})& ), VertexCoordinateRules -> 
             Thread[Range[$CellContext`n] -> $CellContext`locs]], {}], 
           Graphics[{
             Thickness[0.01], 
             Map[{
               If[# == Part[$CellContext`locs, 
                  Part[$CellContext`tourAns, 1, 1]], 
                GrayLevel[0.85], 
                Lighter[Orange]], 
               EdgeForm[
                Directive[
                 Thickness[0.002], Black]], 
               Disk[#, $CellContext`xR If[# == Part[$CellContext`locs, 
                    Part[$CellContext`tourAns, 1, 1]], 0.02 1.5, 
                  0.02]]}& , $CellContext`locs]}], {}, 
           Apply[Sequence, 
            FilterRules[{$CellContext`opts}, $CellContext`gropts]], 
           Background -> Black, PlotRange -> $CellContext`pr, ImageSize -> 
           500, PlotRangePadding -> Scaled[0.05], Frame -> True, FrameTicks -> 
           False]]; \
$CellContext`options[$CellContext`RoutingProblemTourImage] = \
{$CellContext`ArrowPullback -> Automatic, EdgeThickness -> 
         0.008, $CellContext`ShowTour -> 
         True}; $CellContext`RoutingProblemTourImage[
         Pattern[$CellContext`jj, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`pr, $CellContext`G1, $CellContext`n, \
$CellContext`edges, $CellContext`locs, $CellContext`g2, $CellContext`tourAns, \
$CellContext`tourbadEdges, $CellContext`tourbad, $CellContext`tourgood, \
$CellContext`G, $CellContext`th, $CellContext`pull, $CellContext`show, \
$CellContext`xR, $CellContext`cy, $CellContext`cyEdges, \
$CellContext`cyEdgesSorted, $CellContext`cyEdgesIndexed, \
$CellContext`\[Rho]}, $CellContext`G = 
          Part[$CellContext`graphs, $CellContext`jj]; {$CellContext`th, \
$CellContext`pull, $CellContext`show} = ReplaceAll[
            
            ReplaceAll[{
             EdgeThickness, $CellContext`ArrowPullback, \
$CellContext`ShowTour}, {$CellContext`opts}], 
            $CellContext`options[$CellContext`RoutingProblemTourImage]]; \
$CellContext`pull = 
          ReplaceAll[$CellContext`pull, {
            Automatic -> 0.0002, None -> 0}]; $CellContext`n = 
          VertexCount[$CellContext`G]; $CellContext`edges = 
          EdgeList[$CellContext`G]; $CellContext`locs = 
          Part[$CellContext`locData, $CellContext`jj]; $CellContext`pr = {{
             Min[
              Map[First, $CellContext`locs]], 
             Max[
              Map[First, $CellContext`locs]]}, {
             Min[
              Map[Last, $CellContext`locs]], 
             Max[
              Map[Last, $CellContext`locs]]}}; $CellContext`xR = 
          Part[$CellContext`pr, 1, 2] - 
           Part[$CellContext`pr, 1, 
            1]; $CellContext`cy = $CellContext`Extend[$CellContext`tour]; \
$CellContext`cyEdges = 
          Partition[$CellContext`cy, 2, 1]; $CellContext`cyEdgesSorted = 
          Map[Sort, $CellContext`cyEdges]; $CellContext`cyEdgesIndexed = 
          MapIndexed[{
             Apply[Rule, #], 
             Part[#2, 1]}& , $CellContext`cyEdges]; Show[
           GraphPlot[$CellContext`G, EdgeRenderingFunction -> ({
              Thickness[0.025 1.2], 
              CapForm["Round"], 
              GrayLevel[1], 
              Line[#]}& ), VertexRenderingFunction -> ({}& )], 
           If[$CellContext`show, 
            
            GraphPlot[$CellContext`cyEdgesIndexed, 
             EdgeRenderingFunction -> (($CellContext`i = #3; $CellContext`\
\[Rho] = $CellContext`i/Length[$CellContext`cy]; {
                Thickness[$CellContext`th], 
                Arrowheads[4 $CellContext`th], 
                Hue[1 - $CellContext`\[Rho]/2, 0.7, 1], 
                
                Arrow[#, 
                 Norm[Part[#, 1] - Part[#, -1]] {$CellContext`pull 0/
                   5, $CellContext`pull}]})& ), VertexCoordinateRules -> 
             Thread[Range[$CellContext`n] -> $CellContext`locs]], {}], 
           Graphics[{
             Thickness[0.01], 
             Map[{
               If[# == Part[$CellContext`locs, 
                  Part[$CellContext`cy, 1]], 
                GrayLevel[0.85], 
                Lighter[Orange]], 
               EdgeForm[
                Directive[
                 Thickness[0.002], Black]], 
               Disk[#, $CellContext`xR If[# == Part[$CellContext`locs, 
                    Part[$CellContext`cy, 1]], 0.02 1.5, 
                  0.02]]}& , $CellContext`locs]}], 
           Apply[Sequence, 
            FilterRules[{$CellContext`opts}, $CellContext`gropts]], 
           Background -> Black, PlotRange -> $CellContext`pr, ImageSize -> 
           500, PlotRangePadding -> Scaled[0.05], Frame -> True, FrameTicks -> 
           False]]; $CellContext`plottermatdata = {{
          UndirectedEdge[2, 4], 
          UndirectedEdge[3, 5]}, {
          UndirectedEdge[2, 3], 
          UndirectedEdge[5, 6], 
          UndirectedEdge[7, 10], 
          UndirectedEdge[11, 22], 
          UndirectedEdge[13, 18], 
          UndirectedEdge[14, 19]}, {
          UndirectedEdge[5, 7], 
          UndirectedEdge[6, 8]}, {
          UndirectedEdge[2, 4], 
          UndirectedEdge[5, 6], 
          UndirectedEdge[8, 10], 
          UndirectedEdge[11, 15], 
          UndirectedEdge[12, 20], 
          UndirectedEdge[13, 17]}}; $CellContext`cppmatdata = {{
          UndirectedEdge[2, 5], 
          UndirectedEdge[3, 4]}, {
          UndirectedEdge[2, 5], 
          UndirectedEdge[3, 13], 
          UndirectedEdge[6, 7], 
          UndirectedEdge[10, 14], 
          UndirectedEdge[11, 18], 
          UndirectedEdge[19, 22]}, {
          UndirectedEdge[5, 7], 
          UndirectedEdge[6, 8]}, {
          UndirectedEdge[2, 11], 
          UndirectedEdge[4, 15], 
          UndirectedEdge[5, 6], 
          UndirectedEdge[8, 13], 
          UndirectedEdge[10, 17], 
          UndirectedEdge[12, 20]}}; $CellContext`tourdata = {{{1, 4, 3, 5, 2, 
          4}, {1, 4, 2, 3, 5}, {1, 5, 3, 5, 2, 4, 3, 2, 4}, {1, 5, 2, 5, 3, 4,
           3, 2, 4}}, {{1, 2, 1, 6, 5, 6, 7, 11, 16, 10, 15, 20, 19, 20, 15, 
          10, 9, 14, 9, 10, 16, 21, 22, 23, 17, 18, 17, 12, 7, 3, 4, 8, 13, 8,
           7, 6}, {}, {1, 6, 5, 6, 7, 10, 15, 20, 19, 14, 9, 10, 16, 21, 22, 
          11, 16, 22, 23, 17, 12, 7, 11, 17, 18, 13, 8, 7, 3, 8, 4, 3, 2}, {1,
           6, 7, 12, 17, 18, 17, 11, 17, 23, 22, 21, 16, 22, 16, 10, 15, 20, 
          19, 20, 15, 10, 9, 14, 9, 10, 16, 11, 7, 8, 13, 8, 3, 8, 4, 3, 7, 6,
           5, 6, 1, 2}}, {{1, 3, 9, 7, 5, 8, 2, 8, 6, 4}, {1, 2, 4, 6, 8, 5, 
          7, 9, 3}, {1, 9, 7, 5, 9, 8, 6, 8, 5, 7, 4, 6, 5, 4, 8, 2, 9, 3, 1, 
          4, 2}, {1, 9, 7, 5, 9, 8, 6, 8, 5, 7, 4, 6, 5, 4, 8, 2, 9, 3, 1, 4, 
          2}}, {{1, 16, 8, 9, 18, 10, 5, 12, 20, 14, 15, 11, 2, 4, 2, 19, 6, 
          3, 7, 13, 17}, {1, 3, 6, 5, 16, 8, 9, 10, 18, 12, 20, 14, 15, 11, 
          19, 2, 4, 7, 13, 17}, {1, 17, 13, 17, 16, 9, 18, 14, 20, 12, 20, 6, 
          5, 20, 15, 11, 19, 15, 14, 12, 18, 10, 8, 16, 13, 7, 19, 6, 16, 10, 
          12, 5, 16, 1, 13, 8, 9, 10, 5, 6, 15, 4, 2, 15, 11, 2, 19, 3, 7, 4, 
          2, 7, 1, 6, 3}, {1, 17, 16, 13, 17, 16, 10, 18, 14, 20, 12, 20, 6, 
          5, 20, 15, 19, 7, 13, 8, 16, 9, 18, 12, 14, 15, 4, 15, 6, 16, 10, 
          12, 5, 16, 1, 13, 8, 9, 10, 5, 6, 19, 11, 2, 15, 11, 2, 19, 3, 7, 4,
           2, 7, 1, 6, 3}}}; $CellContext`locData = {{{0., 0.5}, {0.15, 
         0.18}, {0., 0.}, {0., 0.3}, {0.4, 0.}}, CompressedData["
1:eJxTTMoPSmViYGAQB2IQDQEf7LHTDA6ofA40voADdnUMDthpDjS+AJo4uj3o
+tBpdP0iaOK43ImuTwAHLYJGw8yD8RnQ5HG5A2EOAGJbFzw=
         "], {{0.309, 0.951}, {0.18, 0.033}, {-0.809, 0.588}, {1., 0.}, {
         0.241, -0.396}, {0.487, -0.209}, {0.309, -0.951}, {
         0.22, -0.232}, {-0.809, -0.588}}, CompressedData["
1:eJxTTMoPSmViYGAQAWIQverjJd8kgRP2kixhfLqb7u7fUJQx8W3Nc3vNmP5D
XzXW2Le+Dtwh13rb/sPyY97mnRf3M4DBB3sGKKh8qWbIsWbPfsstJ8r2zT9l
z8Ok3S5285w9yBR703X2EPFnMHo/Og01bz/MvJNAUSn9u/tzn/9e+fHSWfuj
CiAXPbVfUmDLdX3xBSj/7P5vGiAHPoC7A90cmDvR7LeHmrvf3jRulyfPpf1A
zwF92Ad1zyN090H1PbKfcwRssX3C0wtKt3/us79aAfL4A3sAlQaXOw==
         "]}; Null); Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->19930439]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "DetailsSection"],

Cell["\<\
For graphs of modest size, the method of integer linear programming can be \
used to solve the routing problem and the traveling salesman problem. The \
other two problems can be solved even for graphs of very large size by using \
the blossom algorithm for finding a perfect matching of minimal weight.\
\>", "DetailNotes",
 CellChangeTimes->{{3.548525263656231*^9, 3.54852542093147*^9}, {
  3.5487737646278877`*^9, 3.5487737994344263`*^9}, {3.5491293082515306`*^9, 
  3.549129314910611*^9}},
 CellID->695565192],

Cell["\<\
For the plotter problem, we form the complete graph whose vertices are all \
odd-degree vertices, with weights being the straight-line distance between \
the vertices. Then a minimal-weight perfect matching of this graph tells us \
which edges can be added so that the resulting graph (possibly with multiple \
edges) has only vertices of even degree. An Eulerian tour of the resulting \
graph gives the optimal plotter path, since the pen-up distance is minimized.\
\>", "DetailNotes",
 CellChangeTimes->{{3.548525263656231*^9, 3.54852542093147*^9}, {
   3.5487737646278877`*^9, 3.5487737994344263`*^9}, 3.549129330177087*^9},
 CellID->1028821715],

Cell["\<\
For the Chinese postman problem, one takes a similar approach, but the weight \
of an edge joining two odd-degree vertices is taken to be the length of the \
shortest path between them in the original network. Again, the blossom \
algorithm can find a minimal perfect matching, and the resulting even-degree \
graph is Eulerian. We find an Eulerian cycle and then replace each non-edge \
by the corresponding shortest path in the original network. \
\>", "DetailNotes",
 CellChangeTimes->{{3.548525421216495*^9, 3.5485255014405117`*^9}, {
   3.548773809947976*^9, 3.548773817698676*^9}, 3.549129355230179*^9, 
   3.5493880798290987`*^9},
 CellID->1857695226]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ControlSuggestionsSection"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Resize Images"]}],
  "\"Click inside an image to reveal its orange resize frame.\\nDrag any of \
the orange resize handles to resize the image.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.5491184366401157`*^9},
 FontFamily->"Verdana",
 CellTags->"ResizeImages"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Rotate and Zoom in 3D"]}],
  RowBox[{
   "\"Drag a 3D graphic to rotate it. Starting the drag near the center \
tumbles\\nthe graphic; starting near a corner turns it parallel to the plane \
of the screen.\\nHold down \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" (or \"", 
    FrameBox[
    "Cmd", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" on Mac) and drag up and down to zoom.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"RotateAndZoomIn3D"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Drag Locators"]}],
  RowBox[{"\"Drag any locator (\"", 
    GraphicsBox[
     LocatorBox[
      Scaled[{0.5, 0.5}]], ImageSize -> 20], 
    "\", etc.) to move it around.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"DragLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Create and Delete Locators"]}],
  RowBox[{"\"Insert a new locator in the graphic by holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key\\nand clicking where you want it to be. Delete a locator by \
clicking it\\nwhile holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" key.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"CreateAndDeleteLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Slider Zoom"]}],
  RowBox[{"\"Hold down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key while moving a slider to make fine adjustments in the slider \
value.\\nHold \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" and/or \"", 
    FrameBox[
    "Shift", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" at the same time as \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" to make ever finer adjustments.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"SliderZoom"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Gamepad Controls"]}],
  "\"Control this Demonstration with a gamepad or other\\nhuman interface \
device connected to your computer.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.35696210375764*^9, 3.3895522232313623`*^9},
 FontFamily->"Verdana",
 CellTags->"GamepadControls"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Automatic Animation"]}],
  RowBox[{"\"Animate a slider in this Demonstration by clicking the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJzzTSzJSM1NLMlMTlRwL0osyMhMLlZwyy8CCjEzMjAwcIKwAgOI/R/IhBKc\n\
/4EAyGAG0f+nTZsGwgysIJIRKsWKLAXGIHFmEpUgLADxWUAkI24jZs+eTaEt\n\
IG+wQKRmzJgBlYf5lhEA30OqWA=="], "Graphics", ImageSize -> {9, 9}, ImageMargins -> 
      0, CellBaseline -> Baseline], BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"button\\nnext to the slider, and then clicking the play button that \
appears.\\nAnimate all controls by selecting \"", 
    StyleBox["Autorun", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"AutomaticAnimation"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Bookmark Animation"]}],
  RowBox[{
   "\"See a prepared animation of this Demonstration by selecting\\n\"", 
    StyleBox["Animate Bookmarks", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"BookmarkAnimation"]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SearchTermsSection"],

Cell["traveling salesman problem", "SearchTerms",
 CellChangeTimes->{{3.54880245334231*^9, 3.548802457319331*^9}},
 CellID->683196458],

Cell["Hamiltonian tour", "SearchTerms",
 CellChangeTimes->{{3.548802457613658*^9, 3.5488024602472553`*^9}},
 CellID->2035292744],

Cell["Hamiltonian cycle", "SearchTerms",
 CellChangeTimes->{{3.54880246065386*^9, 3.54880246423906*^9}},
 CellID->2045618992],

Cell["network", "SearchTerms",
 CellChangeTimes->{{3.5488024642724867`*^9, 3.548802466751211*^9}},
 CellID->1652693721],

Cell["routing problem", "SearchTerms",
 CellChangeTimes->{{3.5488024680379047`*^9, 3.548802469815222*^9}},
 CellID->1269878549],

Cell["Chinese postman problem", "SearchTerms",
 CellChangeTimes->{{3.548802470837769*^9, 3.548802490719318*^9}},
 CellID->1156289157],

Cell["plotter problem", "SearchTerms",
 CellChangeTimes->{{3.548802490973205*^9, 3.548802501886346*^9}},
 CellID->858357728],

Cell["planar graphs", "SearchTerms",
 CellChangeTimes->{{3.5488025022537613`*^9, 3.548802503652728*^9}},
 CellID->2097476300],

Cell["matching", "SearchTerms",
 CellChangeTimes->{{3.5488024765335073`*^9, 3.548802485246817*^9}},
 CellID->1172339996],

Cell["", "SearchTerms",
 CellID->355851547]
}, Open  ]],

Cell["", "RelatedLinksSection"],

Cell[CellGroupData[{

Cell["", "AuthorSection"],

Cell[TextData[{
 "Contributed by: ",
 ButtonBox["Stan Wagon",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/author.html?author=Stan+Wagon"], 
    None},
  ButtonNote->
   "http://demonstrations.wolfram.com/author.html?author=Stan+Wagon"]
}], "Author",
 CellChangeTimes->{{3.5468690110183077`*^9, 3.546869017991136*^9}, {
  3.549129382434812*^9, 3.54912938273669*^9}}],

Cell["(Macalester College)", "Author",
 CellID->306513679]
}, Open  ]]
}, Open  ]]
},
CellGrouping->Automatic,
WindowSize->{890, 871},
WindowMargins->{{82, Automatic}, {Automatic, 8}},
FrontEndVersion->"8.0 for Microsoft Windows (64-bit) (October 6, 2011)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "Demonstration.nb", 
  CharacterEncoding -> "WindowsANSI"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "AutomaticAnimation"->{
  Cell[309065, 6711, 1464, 31, 22, "ControlSuggestions",
   CellTags->"AutomaticAnimation"]},
 "BookmarkAnimation"->{
  Cell[310532, 6744, 908, 21, 22, "ControlSuggestions",
   CellTags->"BookmarkAnimation"]},
 "CreateAndDeleteLocators"->{
  Cell[307206, 6660, 637, 15, 22, "ControlSuggestions",
   CellTags->"CreateAndDeleteLocators"]},
 "DragLocators"->{
  Cell[306863, 6647, 340, 11, 22, "ControlSuggestions",
   CellTags->"DragLocators"]},
 "GamepadControls"->{
  Cell[308693, 6700, 369, 9, 22, "ControlSuggestions",
   CellTags->"GamepadControls"]},
 "ResizeImages"->{
  Cell[305824, 6618, 355, 9, 22, "ControlSuggestions",
   CellTags->"ResizeImages"]},
 "RotateAndZoomIn3D"->{
  Cell[306182, 6629, 678, 16, 22, "ControlSuggestions",
   CellTags->"RotateAndZoomIn3D"]},
 "SliderZoom"->{
  Cell[307846, 6677, 844, 21, 22, "ControlSuggestions",
   CellTags->"SliderZoom"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"AutomaticAnimation", 313713, 6848},
 {"BookmarkAnimation", 313831, 6851},
 {"CreateAndDeleteLocators", 313953, 6854},
 {"DragLocators", 314070, 6857},
 {"GamepadControls", 314179, 6860},
 {"ResizeImages", 314287, 6863},
 {"RotateAndZoomIn3D", 314397, 6866},
 {"SliderZoom", 314506, 6869}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 161, 2, 74, "DemoTitle"],
Cell[743, 26, 33, 0, 287, "InitializationSection"],
Cell[CellGroupData[{
Cell[801, 30, 29, 0, 194, "ManipulateSection"],
Cell[CellGroupData[{
Cell[855, 34, 86657, 1901, 4541, "Input"],
Cell[87515, 1937, 35495, 756, 565, "Output",
 CellID->206214771]
}, {2}]]
}, Open  ]],
Cell[CellGroupData[{
Cell[123056, 2699, 36, 0, 169, "ManipulateCaptionSection"],
Cell[123095, 2701, 598, 9, 52, "ManipulateCaption"],
Cell[123696, 2712, 362, 7, 22, "ManipulateCaption",
 CellID->118989346],
Cell[124061, 2721, 405, 8, 37, "ManipulateCaption",
 CellID->1546445741],
Cell[124469, 2731, 450, 8, 37, "ManipulateCaption",
 CellID->546662865],
Cell[124922, 2741, 292, 6, 22, "ManipulateCaption",
 CellID->183397544],
Cell[125217, 2749, 514, 9, 52, "ManipulateCaption",
 CellID->723488563],
Cell[125734, 2760, 311, 7, 22, "ManipulateCaption",
 CellID->305311314]
}, Open  ]],
Cell[CellGroupData[{
Cell[126082, 2772, 28, 0, 173, "ThumbnailSection"],
Cell[126113, 2774, 35551, 757, 565, "Output",
 CellID->36818168]
}, Open  ]],
Cell[CellGroupData[{
Cell[161701, 3536, 28, 0, 143, "SnapshotsSection"],
Cell[161732, 3538, 35491, 756, 565, "Output",
 CellID->226923352],
Cell[197226, 4296, 35491, 756, 565, "Output",
 CellID->875281997],
Cell[232720, 5054, 35552, 757, 565, "Output",
 CellID->233507806],
Cell[268275, 5813, 35551, 757, 565, "Output",
 CellID->19930439]
}, Open  ]],
Cell[CellGroupData[{
Cell[303863, 6575, 26, 0, 336, "DetailsSection"],
Cell[303892, 6577, 523, 9, 52, "DetailNotes",
 CellID->695565192],
Cell[304418, 6588, 658, 10, 67, "DetailNotes",
 CellID->1028821715],
Cell[305079, 6600, 668, 11, 67, "DetailNotes",
 CellID->1857695226]
}, Open  ]],
Cell[CellGroupData[{
Cell[305784, 6616, 37, 0, 126, "ControlSuggestionsSection"],
Cell[305824, 6618, 355, 9, 22, "ControlSuggestions",
 CellTags->"ResizeImages"],
Cell[306182, 6629, 678, 16, 22, "ControlSuggestions",
 CellTags->"RotateAndZoomIn3D"],
Cell[306863, 6647, 340, 11, 22, "ControlSuggestions",
 CellTags->"DragLocators"],
Cell[307206, 6660, 637, 15, 22, "ControlSuggestions",
 CellTags->"CreateAndDeleteLocators"],
Cell[307846, 6677, 844, 21, 22, "ControlSuggestions",
 CellTags->"SliderZoom"],
Cell[308693, 6700, 369, 9, 22, "ControlSuggestions",
 CellTags->"GamepadControls"],
Cell[309065, 6711, 1464, 31, 22, "ControlSuggestions",
 CellTags->"AutomaticAnimation"],
Cell[310532, 6744, 908, 21, 22, "ControlSuggestions",
 CellTags->"BookmarkAnimation"]
}, Open  ]],
Cell[CellGroupData[{
Cell[311477, 6770, 30, 0, 155, "SearchTermsSection"],
Cell[311510, 6772, 134, 2, 22, "SearchTerms",
 CellID->683196458],
Cell[311647, 6776, 128, 2, 22, "SearchTerms",
 CellID->2035292744],
Cell[311778, 6780, 125, 2, 22, "SearchTerms",
 CellID->2045618992],
Cell[311906, 6784, 119, 2, 22, "SearchTerms",
 CellID->1652693721],
Cell[312028, 6788, 127, 2, 22, "SearchTerms",
 CellID->1269878549],
Cell[312158, 6792, 133, 2, 22, "SearchTerms",
 CellID->1156289157],
Cell[312294, 6796, 124, 2, 22, "SearchTerms",
 CellID->858357728],
Cell[312421, 6800, 125, 2, 22, "SearchTerms",
 CellID->2097476300],
Cell[312549, 6804, 120, 2, 22, "SearchTerms",
 CellID->1172339996],
Cell[312672, 6808, 43, 1, 22, "SearchTerms",
 CellID->355851547]
}, Open  ]],
Cell[312730, 6812, 31, 0, 141, "RelatedLinksSection"],
Cell[CellGroupData[{
Cell[312786, 6816, 25, 0, 129, "AuthorSection"],
Cell[312814, 6818, 406, 11, 22, "Author"],
Cell[313223, 6831, 58, 1, 22, "Author",
 CellID->306513679]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
