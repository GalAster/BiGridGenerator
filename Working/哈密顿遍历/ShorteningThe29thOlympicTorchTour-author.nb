(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 7.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[    394864,       7923]
NotebookOptionsPosition[    389427,       7758]
NotebookOutlinePosition[    391045,       7808]
CellTagsIndexPosition[    390709,       7796]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Shortening the 29th Olympic Torch Tour", "DemoTitle",
 CellChangeTimes->{
  3.35696210375764*^9, {3.4941819883154917`*^9, 3.494181988344734*^9}, {
   3.507057206443307*^9, 3.507057206805343*^9}, {3.5070608660822344`*^9, 
   3.507060866477274*^9}}],

Cell["", "InitializationSection"],

Cell[CellGroupData[{

Cell["", "ManipulateSection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "result", ",", "route", ",", "steps", ",", "map2D", ",", "map3D"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"result", "=", 
       RowBox[{"Switch", "[", 
        RowBox[{
        "method", ",", "\"\<ThreeOpt\>\"", ",", "ThreeOptTour", ",", 
         "\"\<TwoOpt\>\"", ",", "TwoOptTour", ",", "\"\<OrOpt\>\"", ",", 
         "OrOptTour", ",", "\"\<CCA\>\"", ",", "CCATour", ",", 
         "\"\<OrZweig\>\"", ",", "OrZweigTour", ",", "\"\<Official\>\"", ",", 
         "officialTour"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"control", " ", "route", " ", "direction"}], ",", " ", 
        RowBox[{
        "make", " ", "sure", " ", "the", " ", "second", " ", "city", " ", 
         "is", " ", "an", " ", "international", " ", "city"}], ",", " ", 
        RowBox[{"otherwise", " ", "reverse"}]}], " ", "*)"}], "   ", 
      "\[IndentingNewLine]", 
      RowBox[{"route", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"result", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "<", "20"}], ",", "result", ",", 
         RowBox[{"Reverse", "[", "result", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"steps", "=", 
       RowBox[{"allCitiesGPS", "[", 
        RowBox[{"[", "route", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"map2D", "=", 
       RowBox[{"Graphics", "[", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"plot", " ", 
            RowBox[{"World", "/", "Asia"}], " ", "Map"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"LightGreen", ",", 
           RowBox[{"EdgeForm", "[", "Gray", "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"view", "==", "\"\<2D world\>\""}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"CountryData", "[", 
                RowBox[{"#", ",", "\"\<SchematicPolygon\>\""}], "]"}], "&"}], 
              "/@", 
              RowBox[{"CountryData", "[", "]"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"CountryData", "[", 
                RowBox[{"#", ",", "\"\<SchematicPolygon\>\""}], "]"}], "&"}], 
              "/@", 
              RowBox[{"CountryData", "[", "\"\<Asia\>\"", "]"}]}]}], "]"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"plot", " ", "China", " ", "Map"}], " ", "*)"}], 
           "\[IndentingNewLine]", "LightPink", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"CountryData", "[", 
              RowBox[{"#", ",", " ", "\"\<SchematicPolygon\>\""}], "]"}], 
             "&"}], "/@", 
            RowBox[{"{", 
             RowBox[{
             "\"\<China\>\"", ",", "\"\<HongKong\>\"", ",", "\"\<Macau\>\"", 
              ",", "\"\<Taiwan\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"mark", " ", "Beijing"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"Text", "[", 
            RowBox[{
             RowBox[{"Style", "[", 
              RowBox[{"\"\<Beijing\>\"", ",", "Bold", ",", "Red"}], "]"}], 
             ",", 
             RowBox[{"{", 
              RowBox[{"116.5", ",", "42"}], "}"}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"plot", " ", "Torch", " ", 
             RowBox[{"cities", "/", "points"}]}], "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"Text", "[", 
              RowBox[{
               RowBox[{"Style", "[", 
                RowBox[{"\"\<\[Neptune]\>\"", ",", 
                 RowBox[{"RGBColor", "[", 
                  RowBox[{"1", ",", ".47", ",", "0"}], "]"}]}], "]"}], ",", 
               "#"}], "]"}], "&"}], "/@", 
            RowBox[{"Take", "[", 
             RowBox[{"steps", ",", "TorchOnCity"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"plot", " ", "Torch", " ", 
             RowBox[{"route", "/", "lines"}]}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"ColorData", "[", 
            RowBox[{"1", ",", "1"}], "]"}], ",", 
           RowBox[{"Dashing", "[", "0.005", "]"}], ",", 
           RowBox[{"Thickness", "[", "0.003", "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"GeometricTransformation", "[", 
            RowBox[{
             RowBox[{"Map", "[", 
              RowBox[{"greatcircleschart", ",", 
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{"Take", "[", 
                  RowBox[{
                   RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{"steps", ",", "TorchOnCity"}], "]"}], ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"Take", "[", 
                    RowBox[{"steps", ",", "TorchOnCity"}], "]"}], "]"}]}], 
                    "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"i", "+", "1"}]}], "}"}]}], "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"i", ",", "1", ",", 
                   RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"Take", "[", 
                    RowBox[{"steps", ",", "TorchOnCity"}], "]"}], "]"}], "-", 
                    "1"}]}], "}"}]}], "]"}]}], "]"}], ",", 
             RowBox[{"RotationTransform", "[", 
              RowBox[{
               RowBox[{"90", "\[Degree]"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], "]"}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"Tooltip", " ", "all", " ", "cities"}], " ", "&"}], " ",
              "countries", " ", "name"}], "*)"}], "\[IndentingNewLine]", 
           RowBox[{"Opacity", "[", "0.05", "]"}], ",", 
           RowBox[{"PointSize", "[", "Medium", "]"}], ",", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"Tooltip", "[", 
              RowBox[{
               RowBox[{"Point", "[", 
                RowBox[{"allCitiesGPS", "[", 
                 RowBox[{"[", "k", "]"}], "]"}], "]"}], ",", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"allCities", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "[", 
                   RowBox[{"[", "3", "]"}], "]"}], ",", "\"\<, \>\"", ",", 
                  RowBox[{
                   RowBox[{"allCities", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "[", 
                   RowBox[{"[", "4", "]"}], "]"}]}], "}"}], "]"}]}], "]"}], 
             ",", 
             RowBox[{"{", 
              RowBox[{"k", ",", "1", ",", 
               RowBox[{"Length", "[", "allCities", "]"}]}], "}"}]}], "]"}]}], 
          "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"view", "==", "\"\<2D world\>\""}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "180"}], ",", "180"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "90"}], ",", "90"}], "}"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"40", ",", "160"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "2"}], ",", "58"}], "}"}]}], "}"}]}], "]"}]}], 
         ",", 
         RowBox[{"ImageSize", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"510", ",", "290"}], "}"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"FrameTicks", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"45", "i"}], ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", 
                  RowBox[{"-", "2"}], ",", "2"}], "}"}]}], "]"}], ",", 
              "None"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"45", "i"}], ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", 
                  RowBox[{"-", "4"}], ",", "4"}], "}"}]}], "]"}], ",", 
              "None"}], "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"Prolog", "\[Rule]", 
          RowBox[{"Raster", "[", 
           RowBox[{
            RowBox[{"Table", "[", 
             RowBox[{"i", ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "100"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"j", ",", "100"}], "}"}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Scaled", "[", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}], "]"}], ",", 
              RowBox[{"Scaled", "[", 
               RowBox[{"{", 
                RowBox[{"1", ",", "1"}], "}"}], "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "100"}], "}"}], ",", 
            RowBox[{"ColorFunction", "\[Rule]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Blend", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"LightBlue", ",", "White"}], "}"}], ",", "#"}], 
                "]"}], "&"}], ")"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"total", " ", "distance", " ", "indicator"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"PlotLabel", "\[Rule]", 
          RowBox[{"Style", "[", 
           RowBox[{
            RowBox[{"Grid", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"CountDist", "[", 
                  RowBox[{"groupAll", ",", "route", ",", "TorchOnCity"}], 
                  "]"}], ",", "\"\<km   total distance \>\""}], "}"}], "}"}], 
              ",", 
              RowBox[{"Alignment", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"Right", ",", "Left"}], "}"}]}]}], "]"}], ",", 
            "Italic", ",", "21"}], "]"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"map3D", "=", 
       RowBox[{"Graphics3D", "[", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"view", "\[Equal]", "\"\<3D world\>\""}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Sphere", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
                 RowBox[{"0.99", " ", "r"}]}], "]"}], ",", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Line", "[", 
                   RowBox[{"Map", "[", 
                    RowBox[{"SCPlot", ",", 
                    RowBox[{"CountryData", "[", 
                    RowBox[{"#", ",", "\"\<SchematicCoordinates\>\""}], "]"}],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{"-", "2"}], "}"}]}], "]"}], "]"}], "&"}], ",", 
                 RowBox[{"CountryData", "[", "]"}]}], "]"}]}], "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"earth", "[", 
              RowBox[{"rasterdata", ",", "100"}], "]"}]}], "]"}], ",", 
           "\[IndentingNewLine]", "Red", ",", "Thick", ",", 
           RowBox[{"Line", "[", 
            RowBox[{"TourLine", "[", 
             RowBox[{"Take", "[", 
              RowBox[{"route", ",", "TorchOnCity"}], "]"}], "]"}], "]"}], ",",
            "\[IndentingNewLine]", "Yellow", ",", 
           RowBox[{"PointSize", "[", "Medium", "]"}], ",", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Tooltip", "[", 
               RowBox[{
                RowBox[{"Point", "[", 
                 RowBox[{"SCPlot", "[", "#", " ", "]"}], "]"}], ",", "#"}], 
               "]"}], "&"}], ",", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Reverse", "[", "#", "]"}], "&"}], ",", 
               RowBox[{"Take", "[", 
                RowBox[{"steps", ",", "TorchOnCity"}], "]"}]}], "]"}]}], 
            "]"}], ",", "\[IndentingNewLine]", "White", ",", 
           RowBox[{"PointSize", "[", ".001", "]"}], ",", 
           RowBox[{"Point", "[", "stars", "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Background", "\[Rule]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"view", "\[Equal]", "\"\<3D world\>\""}], ",", 
            "LightGray", ",", "Black"}], "]"}]}], ",", 
         RowBox[{"Lighting", "\[Rule]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"view", "\[Equal]", "\"\<3D world\>\""}], ",", 
            "Automatic", ",", "\"\<Neutral\>\""}], "]"}]}], ",", 
         RowBox[{"Boxed", "\[Rule]", "False"}], ",", 
         RowBox[{"SphericalRegion", "\[Rule]", "True"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"510", ",", "290"}], "}"}]}], ",", 
         RowBox[{"ViewPoint", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"0", ",", ".75", ",", ".5"}], "}"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Show", "[", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"view", "==", "\"\<2D world\>\""}], "||", 
          RowBox[{"view", "==", "\"\<2D China\>\""}]}], ",", "map2D", ",", 
         "map3D"}], "]"}], "]"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"method", ",", "\"\<ThreeOpt\>\"", ",", "\"\<tour option\>\""}],
       "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<ThreeOpt\>\"", ",", "\"\<TwoOpt\>\"", ",", "\"\<OrOpt\>\"", ",", 
       "\"\<CCA\>\"", ",", "\"\<OrZweig\>\"", ",", "\"\<Official\>\""}], 
      "}"}], ",", 
     RowBox[{"ControlType", " ", "\[Rule]", "Setter"}]}], "}"}], ",", 
   "\[IndentingNewLine]", "Delimiter", ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"view", ",", "\"\<2D world\>\"", ",", "\"\<model maps\>\""}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<2D world\>\"", ",", "\"\<2D China\>\"", ",", "\"\<3D world\>\"", 
       ",", "\"\<3D Earth\>\""}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "Setter"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"TorchOnCity", ",", "20", ",", "\"\<cities along path\>\""}], 
      "}"}], ",", "1", ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"method", "===", "\"\<Official\>\""}], ",", "53", ",", "54"}], 
      "]"}], ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"ControlPlacement", "\[Rule]", "Top"}], ",", "\[IndentingNewLine]", 
   RowBox[{"TrackedSymbols", "\[RuleDelayed]", " ", 
    RowBox[{"{", 
     RowBox[{"method", ",", " ", "view", ",", " ", "TorchOnCity"}], "}"}]}], 
   ",", "\[IndentingNewLine]", 
   RowBox[{"SynchronousUpdating", "\[Rule]", "False"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"SynchronousInitialization", "\[Rule]", "False"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"AutorunSequencing", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "25"}], "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"Initialization", "\[RuleDelayed]", 
    RowBox[{"(", "\[IndentingNewLine]", " ", 
     RowBox[{"(*", " ", 
      RowBox[{"orignial", " ", 
       RowBox[{"data", ":", " ", 
        RowBox[{
        "all", " ", "Olympic", " ", "cities", " ", "classify", " ", "into", 
         " ", "three", " ", "groups"}]}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      StyleBox[
       RowBox[{"holdingCity", "=", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
          "116.4", ",", "39.93", ",", "\"\<Beijing\>\"", ",", 
           "\"\<China\>\""}], "}"}], "}"}]}],
       FontColor->GrayLevel[0]], 
      StyleBox[";",
       FontColor->GrayLevel[0]], 
      StyleBox["\[IndentingNewLine]",
       FontColor->GrayLevel[0]], 
      RowBox[{"internationalCities", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "76.92", ",", "43.32", ",", "\"\<Almaty\>\"", ",", 
           "\"\<Kazakhstan\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "29.00", ",", "41.10", ",", "\"\<Istanbul\>\"", ",", 
           "\"\<Turkish\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "30.32", ",", "59.93", ",", "\"\<Saint Petersburg\>\"", ",", 
           "\"\<Russia\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "0.12"}], ",", "51.50", ",", "\"\<London\>\"", ",", 
           "\"\<United Kingdom\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "2.34", ",", "48.86", ",", "\"\<Paris\>\"", ",", "\"\<France\>\""}],
           "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "122.44"}], ",", "37.76", ",", 
           "\"\<San Francisco\>\"", ",", "\"\<United States\>\""}], "}"}], 
         ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "58.37"}], ",", 
           RowBox[{"-", "34.61"}], ",", "\"\<Buenos Aires\>\"", ",", 
           "\"\<Argentina\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"39.28", ",", 
           RowBox[{"-", "6.82"}], ",", "\"\<Dar es Salaam\>\"", ",", 
           "\"\<Tanzania\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "58.54", ",", "23.61", ",", "\"\<Muscat\>\"", ",", "\"\<Oman\>\""}],
           "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "73.06", ",", "33.72", ",", "\"\<Islamabad\>\"", ",", 
           "\"\<Pakistan\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "77.21", ",", "28.67", ",", "\"\<Delhi\>\"", ",", "\"\<India\>\""}],
           "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "100.50", ",", "13.73", ",", "\"\<Bangkok\>\"", ",", 
           "\"\<Thailand\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "101.71", ",", "3.16", ",", "\"\<Kuala Lumpur\>\"", ",", 
           "\"\<Malaysia\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"106.83", ",", 
           RowBox[{"-", "6.18"}], ",", "\"\<Jakarta\>\"", ",", 
           "\"\<Indonesia\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"149.22", ",", 
           RowBox[{"-", "35.28"}], ",", "\"\<Canberra\>\"", ",", 
           "\"\<Australia\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "136.91", ",", "35.15", ",", "\"\<Nagoya\>\"", ",", 
           "\"\<Japan\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "127.00", ",", "37.57", ",", "\"\<Seoul\>\"", ",", 
           "\"\<South Korea\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "125.75", ",", "39.02", ",", "\"\<Pyongyang\>\"", ",", 
           "\"\<North Korea \>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "106.69", ",", "10.78", ",", "\"\<Ho Chi Minh City\>\"", ",", 
           "\"\<Vietnam\>\""}], "}"}]}], "}"}]}], ";", 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{"chinaCities", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "110.32", ",", "20.05", ",", "\"\<Haikou\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "117.28", ",", "31.85", ",", "\"\<Hefei\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "113.55", ",", "22.20", ",", "\"\<Macau\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "119.30", ",", "26.08", ",", "\"\<Fuzhou\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "103.68", ",", "36.05", ",", "\"\<Lanzhou\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "113.25", ",", "23.12", ",", "\"\<Guangzhou\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "108.32", ",", "22.82", ",", "\"\<Nanning\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "106.72", ",", "26.58", ",", "\"\<Guiyang\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "114.48", ",", "38.05", ",", "\"\<Shijiazhuang\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "113.67", ",", "34.75", ",", "\"\<Zhengzhou\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "126.65", ",", "45.75", ",", "\"\<Harbin\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "114.27", ",", "30.58", ",", "\"\<Wuhan\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "112.97", ",", "28.20", ",", "\"\<Changsha\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "125.35", ",", "43.87", ",", "\"\<Changchun\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "118.78", ",", "32.05", ",", "\"\<Nanjing\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "115.88", ",", "28.68", ",", "\"\<Nanchang\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "123.45", ",", "41.80", ",", "\"\<Shenyang\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "111.64", ",", "40.82", ",", "\"\<Hohhot\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "106.27", ",", "38.47", ",", "\"\<Yingchua\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "101.77", ",", "36.62", ",", "\"\<Xining\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "117.00", ",", "36.67", ",", "\"\<Jinan\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "112.55", ",", "37.87", ",", "\"\<Taiyuan\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "108.90", ",", "34.27", ",", "\"\<Xian\>\"", ",", "\"\<China\>\""}],
           "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "121.47", ",", "31.23", ",", "\"\<Shanghai\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "104.07", ",", "30.67", ",", "\"\<Chengdu\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "121.45", ",", "25.02", ",", "\"\<Taibei\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "117.20", ",", "39.13", ",", "\"\<Tianjin\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "91.00", ",", "29.60", ",", "\"\<Lasa\>\"", ",", "\"\<China\>\""}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "114.15", ",", "22.28", ",", "\"\<Hongkong\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "87.58", ",", "43.80", ",", "\"\<Urumqi\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "102.70", ",", "25.05", ",", "\"\<Kunming\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "120.17", ",", "30.25", ",", "\"\<Hangzhou\>\"", ",", 
           "\"\<China\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "106.58", ",", "29.57", ",", "\"\<Chongqing\>\"", ",", 
           "\"\<China\>\""}], "}"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"allCities", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "holdingCity", ",", "internationalCities", ",", "chinaCities"}], 
          "}"}], ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"CPS", " ", 
        RowBox[{"data", ":", " ", 
         RowBox[{"all", " ", "Olympic", " ", "cities"}]}]}], " ", "*)"}], 
      "\n", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "holdingCityGPS", ",", "internationalCitiesGPS", ",", 
         "chinaCitiesGPS"}], "}"}], "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Take", "[", 
           RowBox[{"#", ",", "All", ",", "2"}], "]"}], "&"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "holdingCity", ",", "internationalCities", ",", "chinaCities"}], 
          "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"allCitiesGPS", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "holdingCityGPS", ",", "internationalCitiesGPS", ",", 
           "chinaCitiesGPS"}], "}"}], ",", "1"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"group1", ",", "group2", ",", "group3"}], "}"}], "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Reverse", "/@", "#"}], "&"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "holdingCityGPS", ",", "internationalCitiesGPS", ",", 
           "chinaCitiesGPS"}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"groupAll", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"group1", ",", "group2", ",", "group3"}], "}"}], ",", "1"}],
         "]"}]}], ";", "\n", 
      RowBox[{"(*", " ", 
       RowBox[{"use", " ", "FindShortestTour", " ", "search"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"solver", "[", 
        RowBox[{
        "pts_List", ",", "method_", ",", "distFun_", ",", "group1_", ",", 
         "group2_"}], "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"dist", ",", "tour", ",", "constrainFun"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"constrainFun", "=", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"MemberQ", "[", 
                  RowBox[{"group1", ",", "#1"}], "]"}], "&&", 
                 RowBox[{"MemberQ", "[", 
                  RowBox[{"group2", ",", "#2"}], "]"}]}], "||", 
                RowBox[{
                 RowBox[{"MemberQ", "[", 
                  RowBox[{"group1", ",", "#2"}], "]"}], "&&", 
                 RowBox[{"MemberQ", "[", 
                  RowBox[{"group2", ",", "#1"}], "]"}]}]}], ")"}], ",", 
              RowBox[{
               RowBox[{"distFun", "[", 
                RowBox[{"#1", ",", "#2"}], "]"}], "+", 
               RowBox[{"10", "^", "9"}]}], ",", 
              RowBox[{"distFun", "[", 
               RowBox[{"#1", ",", "#2"}], "]"}]}], "]"}], "&"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"dist", ",", "tour"}], "}"}], "=", 
           RowBox[{"Quiet", "@", 
            RowBox[{"FindShortestTour", "[", 
             RowBox[{
              RowBox[{"N", "@", "pts"}], ",", 
              RowBox[{"Method", "\[Rule]", "method"}], ",", 
              RowBox[{"DistanceFunction", "\[Rule]", "constrainFun"}]}], 
             "]"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"Append", "[", 
           RowBox[{"tour", ",", 
            RowBox[{"First", "@", "tour"}]}], "]"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"methods", " ", "=", 
       RowBox[{"{", 
        RowBox[{
        "\"\<TwoOpt\>\"", ",", "\"\<OrOpt\>\"", ",", "\"\<CCA\>\"", ",", 
         "\"\<OrZweig\>\""}], "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "TwoOptTour", ",", "OrOptTour", ",", "CCATour", ",", "OrZweigTour"}], 
        "}"}], "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"solver", "[", 
           RowBox[{
           "groupAll", ",", "#", ",", "GeoDistance", ",", "group2", ",", 
            "group3"}], "]"}], "&"}], ",", "methods"}], "]"}]}], ";", "\n", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"--", 
          RowBox[{"-", " ", "ThreeOpt"}]}], " ", 
         RowBox[{"Algorithm", " ", "--"}]}], "-"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"threeOpt", "[", 
        RowBox[{
        "pts_List", ",", "distFunction_", ",", "group1_", ",", "group2_"}], 
        "]"}], ":=", 
       RowBox[{"Module", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"n", "=", 
            RowBox[{"Length", "[", "pts", "]"}]}], ",", "randInit", ",", 
           "tour", ",", "distFun", ",", "constrainFun", ",", "pairsDistTable",
            " ", ",", "pairsDist", ",", "tourLength", ",", "len", ",", 
           "adjacencyList", ",", "triples", ",", 
           RowBox[{"changed", "=", "True"}], ",", "tuple", ",", "loss", ",", 
           "gain", ",", "c1", ",", "c2", ",", "c3", ",", "c4"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"SeedRandom", "[", "321", "]"}], ";", 
          RowBox[{
           RowBox[{"randInit", "[", "k_", "]"}], ":=", " ", 
           RowBox[{"Flatten", "[", 
            RowBox[{"{", 
             RowBox[{"1", ",", " ", 
              RowBox[{
               RowBox[{"RandomSample", "[", 
                RowBox[{"Range", "[", 
                 RowBox[{"k", " ", "-", "1"}], "]"}], "]"}], " ", "+", " ", 
               "1"}], ",", " ", "1"}], "}"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"tour", "=", 
           RowBox[{"randInit", "[", "n", "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"distFun", "[", 
            RowBox[{"p1_", ",", " ", "p2_"}], "]"}], ":=", 
           RowBox[{"distFunction", "[", 
            RowBox[{"p1", ",", "p2"}], "]"}]}], ";", " ", 
          RowBox[{"(*", " ", 
           RowBox[{"user", " ", "define", " ", "distance", " ", "function"}], 
           " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"constrainFun", "[", 
            RowBox[{"p1_", ",", "p2_"}], "]"}], ":=", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"MemberQ", "[", 
                 RowBox[{"group1", ",", "p1"}], "]"}], "&&", 
                RowBox[{"MemberQ", "[", 
                 RowBox[{"group2", ",", "p2"}], "]"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"MemberQ", "[", 
                 RowBox[{"group1", ",", "p2"}], "]"}], "&&", 
                RowBox[{"MemberQ", "[", 
                 RowBox[{"group2", ",", "p1"}], "]"}]}], ")"}]}], ",", 
             RowBox[{
              RowBox[{"10", "^", "9"}], "+", 
              RowBox[{"distFun", "[", 
               RowBox[{"p1", ",", "p2"}], "]"}]}], ",", 
             RowBox[{"distFun", "[", 
              RowBox[{"p1", ",", "p2"}], "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"set", " ", "penalty", " ", "add", " ", 
             RowBox[{"10", "^", "9"}]}], ",", " ", 
            RowBox[{
            "if", " ", "result", " ", "cross", " ", "from", " ", "two", " ", 
             "constrained", " ", "group"}]}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"pairsDistTable", "=", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"constrainFun", "[", 
              RowBox[{
               RowBox[{"pts", "[", 
                RowBox[{"[", "j", "]"}], "]"}], ",", 
               RowBox[{"pts", "[", 
                RowBox[{"[", "k", "]"}], "]"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"j", ",", "n"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"k", ",", "n"}], "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"pairsDist", "[", 
            RowBox[{"j_", ",", "k_"}], "]"}], ":=", 
           RowBox[{"pairsDistTable", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"tour", "[", 
               RowBox[{"[", "j", "]"}], "]"}], ",", 
              RowBox[{"tour", "[", 
               RowBox[{"[", "k", "]"}], "]"}]}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"tourLength", "[", "l_", "]"}], ":=", " ", 
           RowBox[{"Sum", "[", 
            RowBox[{
             RowBox[{"pairsDistTable", "[", 
              RowBox[{"[", 
               RowBox[{
                RowBox[{"l", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", 
                RowBox[{"l", "[", 
                 RowBox[{"[", 
                  RowBox[{"i", "+", "1"}], "]"}], "]"}]}], "]"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", 
               RowBox[{
                RowBox[{"Length", "[", "l", "]"}], "-", "1"}]}], "}"}]}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"len", "=", 
           RowBox[{"tourLength", "[", "tour", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"triples", "=", 
           RowBox[{"Subsets", "[", 
            RowBox[{
             RowBox[{"Range", "[", "n", "]"}], ",", 
             RowBox[{"{", "3", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"While", "[", 
           RowBox[{"changed", ",", 
            RowBox[{
             RowBox[{"changed", "=", "False"}], ";", "\[IndentingNewLine]", 
             RowBox[{"Do", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"tuple", "=", 
                 RowBox[{"triples", "[", 
                  RowBox[{"[", "j", "]"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"loss", "=", 
                 RowBox[{"Sum", "[", 
                  RowBox[{
                   RowBox[{"pairsDist", "[", 
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "+", "1"}]}], "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"k", ",", "3"}], "}"}]}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"c1", "=", 
                 RowBox[{
                  RowBox[{"pairsDist", "[", 
                   RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "+", 
                  RowBox[{"pairsDist", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ",", 
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "+", 
                  RowBox[{"pairsDist", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", "1"}], ",", 
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "+", "1"}]}], "]"}]}]}], 
                ";", "\[IndentingNewLine]", 
                RowBox[{"c2", "=", 
                 RowBox[{
                  RowBox[{"pairsDist", "[", 
                   RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", "1"}]}], "]"}], "+", 
                  RowBox[{"pairsDist", "[", 
                   RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", "1"}]}], "]"}], "+", 
                  RowBox[{"pairsDist", "[", 
                   RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "+", "1"}]}], "]"}]}]}], 
                ";", "\[IndentingNewLine]", 
                RowBox[{"c3", "=", 
                 RowBox[{
                  RowBox[{"pairsDist", "[", 
                   RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", "1"}]}], "]"}], "+", 
                  RowBox[{"pairsDist", "[", 
                   RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], ",", 
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "+", 
                  RowBox[{"pairsDist", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ",", 
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "+", "1"}]}], "]"}]}]}], 
                ";", "\[IndentingNewLine]", 
                RowBox[{"c4", "=", 
                 RowBox[{
                  RowBox[{"pairsDist", "[", 
                   RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "+", 
                  RowBox[{"pairsDist", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", "1"}], ",", 
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", "1"}]}], "]"}], "+", 
                  RowBox[{"pairsDist", "[", 
                   RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "+", "1"}]}], "]"}]}]}], 
                ";", "\[IndentingNewLine]", 
                RowBox[{"gain", "=", 
                 RowBox[{"Min", "[", 
                  RowBox[{"c1", ",", "c2", ",", "c3", ",", "c4"}], "]"}]}], 
                ";", "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"gain", "<", "loss"}], ",", 
                  RowBox[{
                   RowBox[{"len", "=", 
                    RowBox[{"len", "-", "loss", "+", "gain"}]}], ";", 
                   RowBox[{"changed", "=", "True"}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"Which", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"gain", "==", "c1"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"tour", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"tour", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", 
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "]"}], ",", 
                    RowBox[{"tour", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ";;", 
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}], ",", 
                    RowBox[{"tour", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], ";;", 
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", "1"}], ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}], ",", 
                    RowBox[{"tour", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "+", "1"}], ";;", 
                    RowBox[{"n", "+", "1"}]}], "]"}], "]"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"gain", "==", "c2"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"tour", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"tour", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", 
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "]"}], ",", 
                    RowBox[{"tour", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", "1"}], ";;", 
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "]"}], ",", 
                    RowBox[{"tour", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ";;", 
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}], ",", 
                    RowBox[{"tour", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "+", "1"}], ";;", 
                    RowBox[{"n", "+", "1"}]}], "]"}], "]"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"gain", "==", "c3"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"tour", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"tour", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", 
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "]"}], ",", 
                    RowBox[{"tour", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", "1"}], ";;", 
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "]"}], ",", 
                    RowBox[{"tour", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ";;", 
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}], ",", 
                    RowBox[{"tour", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "+", "1"}], ";;", 
                    RowBox[{"n", "+", "1"}]}], "]"}], "]"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"gain", "==", "c4"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"tour", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"tour", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", 
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "]"}], ",", 
                    RowBox[{"tour", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], ";;", 
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", "1"}], ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}], ",", 
                    RowBox[{"tour", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ";;", 
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}], ",", 
                    RowBox[{"tour", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"tuple", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "+", "1"}], ";;", 
                    RowBox[{"n", "+", "1"}]}], "]"}], "]"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", "True", ",", 
                    RowBox[{"Print", "[", "\"\<trouble\>\"", "]"}]}], "]"}], 
                   ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
               "\[IndentingNewLine]", ",", 
               RowBox[{"{", 
                RowBox[{"j", ",", 
                 RowBox[{"Length", "[", "triples", "]"}]}], "}"}]}], 
              "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
          "\[IndentingNewLine]", " ", 
          RowBox[{"{", 
           RowBox[{"len", ",", "tour"}], "}"}]}]}], "\[IndentingNewLine]", 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"ThreeOptTour", "=", 
       RowBox[{"Last", "@", 
        RowBox[{"threeOpt", "[", 
         RowBox[{
         "groupAll", ",", "GeoDistance", ",", "group2", ",", "group3"}], 
         "]"}]}]}], ";", "\n", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"official", " ", "tour"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"officialTour", "=", 
       RowBox[{"{", 
        RowBox[{
        "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
         "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14",
          ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", 
         ",", "49", ",", "23", ",", "21", ",", "26", ",", "24", ",", "36", 
         ",", "52", ",", "44", ",", "35", ",", "22", ",", "32", ",", "33", 
         ",", "27", ",", "51", ",", "28", ",", "53", ",", "45", ",", "48", 
         ",", "40", ",", "50", ",", "25", ",", "39", ",", "43", ",", "42", 
         ",", "38", ",", "31", ",", "34", ",", "37", ",", "41", ",", "30", 
         ",", "29", ",", "47", ",", "1"}], "}"}]}], ";", 
      RowBox[{
       RowBox[{"CountDist", "[", 
        RowBox[{"pts_", ",", "tour_", ",", "torchOnCity_"}], "]"}], ":=", 
       RowBox[{"NumberForm", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"10", "^", 
           RowBox[{"-", "3"}]}], "*", 
          RowBox[{"Sum", "[", 
           RowBox[{
            RowBox[{"GeoDistance", "[", 
             RowBox[{
              RowBox[{"pts", "[", 
               RowBox[{"[", 
                RowBox[{"tour", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}], ",", 
              RowBox[{"pts", "[", 
               RowBox[{"[", 
                RowBox[{"tour", "[", 
                 RowBox[{"[", 
                  RowBox[{"i", "+", "1"}], "]"}], "]"}], "]"}], "]"}]}], 
             "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"torchOnCity", "-", "1"}]}], "}"}]}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"6", ",", "2"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"(*", " ", 
       RowBox[{
       "plot", " ", "great", " ", "circles", " ", "arc", " ", "in", " ", "2", 
        "D", " ", "map"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"greatcircleschart", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"lon1_", ",", "lat1_"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"lon2_", ",", "lat2_"}], "}"}]}], "}"}], "]"}], ":=", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "places", ",", "L0", ",", "L1", ",", "L2", ",", "\[Phi]1", ",", 
           "\[Phi]2", ",", "tani", ",", "sf", ",", "\[Phi]L", ",", 
           RowBox[{"points", "=", "20"}], ",", "distance"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lat1", "\[Equal]", "lat2"}], ",", 
            RowBox[{
             RowBox[{"lat2", "=", 
              RowBox[{"lat2", "+", "0.0003"}]}], ";"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"places", "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", "lon1"}], ",", "lat1"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", "lon2"}], ",", "lat2"}], "}"}]}], "}"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"places", "=", 
           RowBox[{
            RowBox[{"Sort", "[", "places", "]"}], "2", 
            RowBox[{"\[Pi]", "/", "360"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"L1", "=", 
           RowBox[{"places", "\[LeftDoubleBracket]", 
            RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}]}], ";", "  ", 
          RowBox[{"\[Phi]1", "=", 
           RowBox[{"places", "\[LeftDoubleBracket]", 
            RowBox[{"2", ",", "2"}], "\[RightDoubleBracket]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"L2", "=", 
           RowBox[{"places", "\[LeftDoubleBracket]", 
            RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}]}], ";", " ", 
          RowBox[{"\[Phi]2", "=", 
           RowBox[{"places", "\[LeftDoubleBracket]", 
            RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"\[Phi]1", "\[Equal]", "\[Phi]2"}], ",", 
            RowBox[{
             RowBox[{"\[Phi]2", "=", 
              RowBox[{"\[Phi]2", "+", "0.0003"}]}], ";"}]}], "]"}], ";", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"L1", "\[Equal]", "L2"}], ",", 
            RowBox[{
             RowBox[{"L2", "=", 
              RowBox[{"L2", "+", "0.0003"}]}], ";"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"L0", "=", 
           RowBox[{
            FractionBox["1", "2"], " ", 
            RowBox[{"(", 
             RowBox[{"L1", "+", "L2", "-", 
              RowBox[{"2", " ", 
               RowBox[{"ArcCot", "[", 
                RowBox[{
                 RowBox[{"Cot", "[", 
                  FractionBox[
                   RowBox[{"L1", "-", "L2"}], "2"], "]"}], " ", 
                 RowBox[{"Csc", "[", 
                  RowBox[{"\[Phi]1", "+", "\[Phi]2"}], "]"}], " ", 
                 RowBox[{"Sin", "[", 
                  RowBox[{"\[Phi]1", "-", "\[Phi]2"}], "]"}]}], "]"}]}]}], 
             ")"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"L0", "\[Equal]", "L1"}], ",", 
            RowBox[{
             RowBox[{"L1", "=", 
              RowBox[{"L1", "+", "0.0003"}]}], ";"}]}], "]"}], ";", 
          RowBox[{"tani", "=", 
           RowBox[{
            RowBox[{"-", 
             RowBox[{"Csc", "[", 
              RowBox[{"L0", "-", "L1"}], "]"}]}], " ", 
            RowBox[{"Tan", "[", "\[Phi]1", "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Abs", "[", 
              RowBox[{"L1", "-", "L2"}], "]"}], "\[LessEqual]", "Pi"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"\[Phi]L", "=", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"ArcTan", "[", 
                   RowBox[{
                    RowBox[{"Sin", "[", 
                    RowBox[{"t", "-", "L0"}], "]"}], "tani"}], "]"}], ",", 
                  "t"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"t", ",", 
                  RowBox[{"Min", "[", 
                   RowBox[{"L1", ",", "L2"}], "]"}], ",", 
                  RowBox[{"Max", "[", 
                   RowBox[{"L1", ",", "L2"}], "]"}], ",", 
                  RowBox[{
                   RowBox[{"Abs", "[", 
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"L1", ",", "L2"}], "]"}], "-", 
                    RowBox[{"Min", "[", 
                    RowBox[{"L1", ",", "L2"}], "]"}]}], "]"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"points", "-", "1"}], ")"}]}]}], "}"}]}], "]"}]}],
              ";"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"\[Phi]L", "=", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"ArcTan", "[", 
                   RowBox[{
                    RowBox[{"Sin", "[", 
                    RowBox[{"t", "-", "L0"}], "]"}], "tani"}], "]"}], ",", 
                  "t"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"t", ",", 
                  RowBox[{"Min", "[", 
                   RowBox[{"L1", ",", 
                    RowBox[{
                    RowBox[{"Sign", "[", "L1", "]"}], "\[Pi]"}]}], "]"}], ",", 
                  RowBox[{"Max", "[", 
                   RowBox[{"L1", ",", 
                    RowBox[{
                    RowBox[{"Sign", "[", "L1", "]"}], "\[Pi]"}]}], "]"}], ",", 
                  RowBox[{
                   RowBox[{"Abs", "[", 
                    RowBox[{"L1", "-", 
                    RowBox[{
                    RowBox[{"Sign", "[", "L1", "]"}], "\[Pi]"}]}], "]"}], "/", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"points", "/", "2"}], "-", "1"}], ")"}]}]}], 
                 "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"\[Phi]L", "=", 
              RowBox[{"Join", "[", 
               RowBox[{
                RowBox[{"{", "\[Phi]L", "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"ArcTan", "[", 
                    RowBox[{
                    RowBox[{"Sin", "[", 
                    RowBox[{"t", "-", "L0"}], "]"}], "tani"}], "]"}], ",", 
                    "t"}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"t", ",", 
                    RowBox[{"Min", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sign", "[", "L1", "]"}]}], "\[Pi]"}], ",", 
                    "L2"}], "]"}], ",", 
                    RowBox[{"Max", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sign", "[", "L1", "]"}]}], "\[Pi]"}], ",", 
                    "L2"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"Abs", "[", 
                    RowBox[{"L2", "+", 
                    RowBox[{
                    RowBox[{"Sign", "[", "L1", "]"}], "\[Pi]"}]}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"points", "/", "2"}], "-", "1"}], ")"}]}]}], 
                    "}"}]}], "]"}], "}"}]}], "]"}]}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Graphics", "[", 
            RowBox[{"{", 
             RowBox[{"Line", "[", 
              RowBox[{
               RowBox[{"360", "/", 
                RowBox[{"(", 
                 RowBox[{"2", " ", "Pi"}], ")"}]}], "\[Phi]L"}], "]"}], "}"}],
             "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"3", "D", " ", "graphics", " ", "plot", " ", 
        RowBox[{"only", ":", " ", 
         RowBox[{"From", " ", 
          RowBox[{"Latitude", "/", "Longitude"}], " ", "to", " ", "spherical",
           " ", "coordinate"}]}]}], " ", "*)"}], 
      RowBox[{"r", "=", "6367.5"}], " ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"AstronomicalData", "[", 
         RowBox[{"\"\<Earth\>\"", ",", " ", "\"\<Radius\>\""}], "]"}], "*", 
        SuperscriptBox["10", 
         RowBox[{"-", "3"}]]}], " ", "*)"}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"SCPlot", "[", 
        RowBox[{"{", 
         RowBox[{"lat_", ",", "lon_"}], "}"}], "]"}], ":=", 
       RowBox[{"r", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"Cos", "[", 
            RowBox[{"lon", " ", "\[Degree]"}], "]"}], " ", 
           RowBox[{"Cos", "[", 
            RowBox[{"lat", " ", "\[Degree]"}], "]"}]}], ",", 
          RowBox[{
           RowBox[{"Sin", "[", 
            RowBox[{"lon", "  ", "\[Degree]"}], "]"}], " ", 
           RowBox[{"Cos", "[", 
            RowBox[{"lat", " ", "\[Degree]"}], "]"}]}], ",", 
          RowBox[{"Sin", "[", 
           RowBox[{"lat", " ", "\[Degree]"}], "]"}]}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"centers", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Reverse", "[", "#", "]"}], "&"}], ",", "allCitiesGPS"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"GreatCircleArc", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"lat1_", ",", "lon1_"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"lat2_", ",", "lon2_"}], "}"}]}], "]"}], ":=", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"u", "=", 
            RowBox[{"SCPlot", "[", 
             RowBox[{"{", 
              RowBox[{"lat1", ",", "lon1"}], "}"}], "]"}]}], ",", 
           RowBox[{"v", "=", 
            RowBox[{"SCPlot", "[", 
             RowBox[{"{", 
              RowBox[{"lat2", ",", "lon2"}], "}"}], "]"}]}], ",", "a"}], 
          "}"}], ",", 
         RowBox[{
          RowBox[{"a", "=", 
           RowBox[{"VectorAngle", "[", 
            RowBox[{"u", ",", "v"}], "]"}]}], ";", "\[IndentingNewLine]", " ", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Evaluate", "[", 
             RowBox[{
              RowBox[{"RotationTransform", "[", 
               RowBox[{"\[Theta]", ",", 
                RowBox[{"{", 
                 RowBox[{"u", ",", "v"}], "}"}]}], "]"}], "[", "u", "]"}], 
             "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"\[Theta]", ",", "0", ",", "a", ",", 
              RowBox[{"a", "/", 
               RowBox[{"Ceiling", "[", 
                RowBox[{"10", "a"}], "]"}]}]}], "}"}]}], "]"}]}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"TourLine", "[", "rou_", "]"}], ":=", 
       RowBox[{"Apply", "[", 
        RowBox[{"GreatCircleArc", ",", 
         RowBox[{"Partition", "[", 
          RowBox[{
           RowBox[{"centers", "[", 
            RowBox[{"[", "rou", "]"}], "]"}], ",", "2", ",", "1"}], "]"}], 
         ",", 
         RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", "  ", 
       RowBox[{"3", "D", " ", "Earth", " ", "graphics"}], "  ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"rasterdata", "=", 
       RowBox[{"N", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"First", "[", 
           RowBox[{"First", "[", 
            GraphicsBox[RasterBox[CompressedData["
1:eJzsvQV0VFm+N3rXs/Xeet93504PlpScVRojEDQEhwAB4q7l7paqVKWSVCWp
irtCCAR3SIi7u7sRg6CLQAu9uqGRvF1Jdw/dQzMt9DD3rS/rR3FKzj777N9f
tx0UVeRG/d//4z/+wwX8ywP/DMcP5yYfzE48uHP7/tzkMh7duQ3w8O4UOH44
P/74/uSjexPg4P6d0cd3pwDAtwvzkwt3Jx7Njj6eG3s8O/oEvM6NPbkzDj5/
9nAa4PNHM4/uzz1+cGf53Pn5sacPZhbuTRlwf/rpo7vLWHg4/+zx/YUHd588
nHswP/X43gzAwoO5hYd3Pn9y78n92ceP7i08ebDw5P7CwoNnD+YBQJkLj+89
vDcLDgyv9+8uf2LAo3mAp0/uP3l499nCA8PV7889fHD33vwsKAoUC24KANzs
vdmJZdydHgNvl2G436Vv3329Mzl49/YQwP2ZUfD6cG783vTIg9kx8Hbpk4H7
M8P3poce3Rl7MDtyb25kfnb4+9dZcBVQJmjGKfAJAGhAA8DbHz6fn5kEWH67
fPxwbhSUA0q+Nzd2/874g7sT4IrgcvfuTM3PgUpOLxe7XNsf7wJgfmYcnH53
GlA5/XCJREBreXXd2Pjk+PDAzG3Dpe/MjJzMPZuWmt3cORoRcyo7Oy839/Ll
4sasU1dUoTGTt2cnJmc6u/q6uvtHRiera+oqq2pKymuGhkYGhidGxoYHhwf6
+3t7e7tbWprqaisBWprrOztaZqYnFp48evzowdzsdH9fz8joAPhRR0dHW0d7
e2dHR09v//BYRUNzYWXNpYKKvMv5F/NLL98qraqrLyqrLKuqLamq6Ojs7hvo
Hxweauvs6+3sGB8bGR0ZmpmdHBnuA1ccHOzv6+trbW3t7Gzv6W3v72ltbaru
6W7r7Gju7WkfHenv7+tsbalvbKptaKyprausr6syVK+uDKC+vryxoRqgobai
pbGmuaEaoKm+qqm+YhntLbWgNPBha1NtfX1tY2N9Q1Njc2tLa3tbfWNDU1MD
uNmmlsaWtmbwCcDyTYGaABhucQldXR1d4G17a093e1cn+FUTaJb2tkYAcNDR
3tze0dzS2gDK6ehq7+wCP2sDNQfo624bHuge7Gkb6m2fGOkGGBvsBu03OtAz
PT4IPpwc6Rsd6gU/a2xr6h3t6u3tB21VVFZeWVvX1jHCCEpWhSedvVqSe+pG
fFJedVVHT/dkXdtwXdftjpE7p69X596oOX6pWJd56dT1sovFdYX1XZdLGy4U
1TZ2j9e2D5e39FY1d90qra6uay4sqSwor7pWVAqYqmlsKa2qLauuq28BN9UM
7quttRncYG9PV3dPe3d3d09PT/6tgivXrlbXN9Q0NFc2ttS0tFfUt569Vniz
rPb89bLrhbXldW3VTV1N7d3N7V2gRfoHB/qHh8Dt9/f3D4C/4Yn+gZHxiemB
wdHR0fHOTlBqd29f5/DgUEdbe0sLaNWu4uLCgoKb+QXXCm5dr64orqksaayr
bK6rMqC+eBktDeVtTZUtdbcaqm40Vd5qrioEr031ZQD11UXN9WXg2+YGA6oq
SyorikGZt27lA1RVVQCuAb+AlMbmhsbmJkA3oN7w2lAHUFdXU1tbDQAO6sBB
TVV1VVlVZWllRUltTQX4D7wBTQRQUVFVV9dQV9vU3NTe3FIPWgyQDsSguwuw
3DHQa8BQf8fwQCfgemCgbWCgY3io1yDbfZ3hkSn6qGORsVeiUq7U1jXX1LeA
Fqura8uvaiutqL1Z3ni1pKqmvq2ytq20pqmqsR3Qd+pW2flbZWfzy09eKrhc
UHTm4pUzly6dvnjx0o0b4ODyzZtXi0svFxbfrKgpqawpb+yubG6paGpuaWsF
otvU0gzEta2tBYg6EODmprqB/i5QjWVt6uhsMXzX0lJVU11WUX6rpPRWSfmN
kvL8wrLiiuqCkor84nJQcurZq2duVIXFHTt1oeTC1Zvgx7eKCkvK6zSxmYFR
GSlnC64UApkCzV18o/B64a2y2pom0ESgSZuaa5tb6to7Wyqryzo6e1tagaq0
gPYvKKkCJ+QXV14vqbxWXHGttADgVmlhQXFJflFxflHpTVB8WRFofICW2mID
qosAWmuKm6oLGyoLAMCHtRVFdZXF9VUGggC/1dWV1bVVdQ21y8wCikEjAHVu
bW1eussmg2o3NTQ31TY11jQ11jY21IATgeloa66pqSwC4lFWVlLfUNXV3Wqg
bBjIfXtLcyNAZ0dbD9CF7k6gFN1dHYBuwDU4AEoKanvqfCGDp0o7dvHUqYtR
0Qn5hQ03S2pulTUVVTZfK6y+VtE8MNQPzOnQyPD45AQwekA1uvoGAYCQlZaX
FZdXlQLi6psqQDNVVReWlgEAlS+vrikDRrepraG1s3tgpLNvqLt/qKUDWKIO
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
skZbsu/0XWqoSRntPLswXvBg6MriveonY9cf9Jx/+0XT4uvuxcXbbxenFxfv
fXGn/Ml4wcv5yle3S14v1L8ZK3oxcKOtNn1y9EpYuBJvYd9TfmLxy95v7tQv
zNYgYWQcigeuhcf8XU2WOmOZpia0/NOxrYXJV88fgxkHmOK+FwOQyGzd4Wtt
46aMt4k85ph7mpGZR5VG74eMRMCILf8GYcSIyLWFMG4olPsv3ePH9aeA2Y+y
5hQBp9r7EaS67WzddmHsToZmr7uQsBpn6NzGQSwUmmGCl6IREhD8w1ZT0CgW
Bu8M5NDK6jfMdQStvc5CbGHGBuQiYEyxIOHLgcsL3Rdnu89/MVny3b2qxaf1
LyeKXt6teD1Tvvhi+MXLgVeLU68Wb3/9fGbxZderhYbF79pePql49XUrIHdx
suzZROXCeI2RsR9JKBmrPb34eefbJ21f3G1TSPSIv/nA19CNjd5NtJmA3wBf
asV5eW9lZuH14M/+kwphv+cCbkT0oYirWnUyrVVomp0m1iHnkijimLMJRgCH
kZYpAw6Lp1/LVDr9qQvfcCD9QRraCodmoEDK/Hv7QICxRSBJCIjPjNwn0tnE
ZXlFR3subw1kJ3QmhXy29Yi3GdoTGCucMWk/n8cKdfLyiELjXD7CtC4EOeZW
9Kv71U+Grrx53fvqq7a3iyOLb8a+nK58udD89mnD26/aFxcHFr/r/+arls/n
axa/6VxcqF182vjm2/bFb3oWXw69/rrvy3sNo02F7o6imZ78xYXuxa+6Fl8O
LL7qfXWnfvHto+MnjkHGBAjyXaYGuYq3aY9vQb7m5jnFsWzK1avK03mcrGOc
v34GghypJV6hiD9UXhGqjj8aluUgijvIibSxc/FmxBzYcRRICB+NCViz2h+J
oOFxHPyfMMXlXVJQy6EagoxGkCxNflX+/h6sZkIriOD2JfpD7eXZYeGHs67y
ljcfQxoJjGE8GMQhRhCdI7yjs1wt3dkYGNt8rcIYR/vj5EIwVkdX++JC1/PZ
6sWv2haf1L+sz3sxfHPxacviy/7vnrS//qL15YuO76aLFp/UvP1mePFp85e3
C98u1C8+aVhcHP3mUcu94cL5yQ6VMKH2ZvaLB92vHnS8+bz71Zc9r99OvJqu
ej5V+WSm9OndRsNue0v+ThSUVFmsu1WgK7+uK7kemZPHKStJLi9OzbxKSrvC
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
              "], {{0, 0}, {159., 80.}}, {0, 255},
              ColorFunction->RGBColor],
             ImageSize->{98., 49.},
             PlotRange->{{0, 159.}, {0, 80.}}], "]"}], "]"}], "/", "255"}], 
         ",", "4"}], "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "depends", " ", "on", " ", "inital", " ", "image", " ", "format"}], 
        ",", " ", 
        RowBox[{"divide", " ", "255", " ", "if", " ", "necessary"}]}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"earth", "[", 
        RowBox[{"rasterdata_", ",", "resolution_"}], "]"}], ":=", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "size", ",", "coords", ",", "MakePointSet", ",", "redpts", ",", 
           "redfnpts", ",", "redfun", ",", "grnpts", ",", "greenfnpts", ",", 
           "greenfun", ",", "blupts", ",", "bluefnpts", ",", "bluefun", ",", 
           "r", ",", "planetdraft", ",", "planet"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"size", "=", 
           RowBox[{"Dimensions", "[", "rasterdata", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"coords", " ", "=", " ", 
           RowBox[{"N", "[", 
            RowBox[{
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"i", ",", "j"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"i", ",", "0", ",", 
                 RowBox[{"2", " ", "\[Pi]"}], ",", 
                 RowBox[{"2", " ", 
                  RowBox[{"\[Pi]", "/", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"size", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "-", "1"}], ")"}]}]}]}], 
                "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"j", ",", "0", ",", "\[Pi]", ",", 
                 RowBox[{"\[Pi]", "/", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"size", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "-", "1"}], ")"}]}]}], 
                "}"}]}], "]"}], ",", "4"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"MakePointSet", "[", 
            RowBox[{"lis1_List", ",", "lis2_List"}], "]"}], ":=", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"MapThread", "[", 
               RowBox[{"Append", ",", "#"}], "]"}], "&"}], ",", 
             RowBox[{"MapThread", "[", 
              RowBox[{"List", ",", 
               RowBox[{"{", 
                RowBox[{"lis1", ",", "lis2"}], "}"}]}], "]"}]}], "]"}]}], ";",
           "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"redpts", ",", "grnpts", ",", "blupts"}], "}"}], "=", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Partition", "[", 
               RowBox[{"#", ",", 
                RowBox[{"size", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "&"}], ",", 
             RowBox[{"Transpose", "[", 
              RowBox[{"Flatten", "[", 
               RowBox[{
                RowBox[{"Transpose", "[", "rasterdata", "]"}], ",", "1"}], 
               "]"}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"redfnpts", ",", "greenfnpts", ",", "bluefnpts"}], "}"}], 
           "=", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"MakePointSet", "[", 
               RowBox[{"coords", ",", "#"}], "]"}], "&"}], ",", 
             RowBox[{"{", 
              RowBox[{"redpts", ",", "grnpts", ",", "blupts"}], "}"}]}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"redfun", ",", "greenfun", ",", "bluefun"}], "}"}], " ", 
           "=", " ", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Interpolation", "[", 
               RowBox[{
                RowBox[{"Flatten", "[", 
                 RowBox[{"#", ",", "1"}], "]"}], ",", 
                RowBox[{"InterpolationOrder", "\[Rule]", " ", "1"}]}], "]"}], 
              "&"}], ",", 
             RowBox[{"{", 
              RowBox[{"redfnpts", ",", "greenfnpts", ",", "bluefnpts"}], 
              "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"r", "=", "6367.5"}], " ", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"AstronomicalData", "[", 
             RowBox[{"\"\<Earth\>\"", ",", " ", "\"\<Radius\>\""}], "]"}], 
            "*", 
            SuperscriptBox["10", 
             RowBox[{"-", "3"}]]}], " ", "*)"}], ";", "\[IndentingNewLine]", 
          RowBox[{"SeedRandom", "[", "12345", "]"}], ";", 
          RowBox[{"stars", "=", 
           RowBox[{"3.5", " ", "r", " ", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Cos", "[", "#1", "]"}], 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"#2", "^", "2"}]}], "]"}]}], ",", 
                  RowBox[{
                   RowBox[{"Sin", "[", "#1", "]"}], 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"#2", "^", "2"}]}], "]"}]}], ",", "#2"}], "}"}], 
                "&"}], "[", 
               RowBox[{
                RowBox[{"RandomReal", "[", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", 
                   RowBox[{"2", "Pi"}]}], "}"}], "]"}], ",", 
                RowBox[{"RandomReal", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"-", "1"}], ",", "1"}], "}"}], "]"}]}], "]"}], ",", 
              RowBox[{"{", "50", "}"}]}], "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"planetdraft", ":=", 
           RowBox[{"ParametricPlot3D", "[", 
            RowBox[{
             RowBox[{"0.99", "r", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"Cos", "[", "theta", "]"}], " ", 
                 RowBox[{"Sin", "[", "p", "]"}]}], ",", 
                RowBox[{
                 RowBox[{"Sin", "[", "theta", "]"}], " ", 
                 RowBox[{"Sin", "[", "p", "]"}]}], ",", 
                RowBox[{"-", 
                 RowBox[{"Cos", "[", "p", "]"}]}]}], "}"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"theta", ",", "0", ",", 
               RowBox[{"2", " ", "\[Pi]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"p", ",", "0", ",", "\[Pi]"}], "}"}], ",", 
             RowBox[{"Mesh", "\[Rule]", "6"}], ",", 
             RowBox[{"MaxRecursion", "\[Rule]", "0"}], ",", 
             RowBox[{"BoundaryStyle", "\[Rule]", "Black"}], ",", 
             RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Speed\>\""}]}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"planet", "=", 
           RowBox[{"ParametricPlot3D", "[", 
            RowBox[{
             RowBox[{"0.99", "r", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"Cos", "[", "theta", "]"}], " ", 
                 RowBox[{"Sin", "[", "p", "]"}]}], ",", 
                RowBox[{
                 RowBox[{"Sin", "[", "theta", "]"}], " ", 
                 RowBox[{"Sin", "[", "p", "]"}]}], ",", 
                RowBox[{"-", 
                 RowBox[{"Cos", "[", "p", "]"}]}]}], "}"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"theta", ",", "0", ",", 
               RowBox[{"2", " ", "\[Pi]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"p", ",", "0", ",", "\[Pi]"}], "}"}], ",", 
             RowBox[{"Mesh", "\[Rule]", "None"}], ",", 
             RowBox[{"ColorFunction", "\[Rule]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"RGBColor", "[", 
                 RowBox[{
                  RowBox[{"redfun", "[", 
                   RowBox[{"#4", ",", "#5"}], "]"}], ",", 
                  RowBox[{"greenfun", "[", 
                   RowBox[{"#4", ",", "#5"}], "]"}], ",", 
                  RowBox[{"bluefun", "[", 
                   RowBox[{"#4", ",", "#5"}], "]"}]}], "]"}], "&"}], ")"}]}], 
             ",", 
             RowBox[{"ColorFunctionScaling", "\[Rule]", "False"}], ",", 
             RowBox[{"PlotPoints", "\[Rule]", "resolution"}], ",", 
             RowBox[{"MaxRecursion", "\[Rule]", "0"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"GeometricTransformation", "[", 
           RowBox[{
            RowBox[{"ControlActive", "[", 
             RowBox[{
              RowBox[{"planetdraft", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"planet", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
            RowBox[{"RotationTransform", "[", 
             RowBox[{
              RowBox[{"180", "Degree"}], ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "]"}]}], "]"}]}]}],
         "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
     ")"}]}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.35696210375764*^9, {3.4946117822589808`*^9, 3.4946117827380285`*^9}, {
   3.4946118144522*^9, 3.4946118579375477`*^9}, {3.4946118981065645`*^9, 
   3.4946119171874723`*^9}, {3.4946119594376965`*^9, 
   3.4946119693656893`*^9}, {3.4946120878035316`*^9, 3.494612096468398*^9}, {
   3.4946121312538767`*^9, 3.494612141609912*^9}, {3.4946803904467087`*^9, 
   3.4946804037570395`*^9}, {3.5062599619287834`*^9, 
   3.5062599840959997`*^9}, {3.5070606952571535`*^9, 
   3.5070606954461727`*^9}, {3.5070609167613015`*^9, 3.507060918028428*^9}, {
   3.577034669847786*^9, 3.5770347236431646`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`method$$ = 
    "ThreeOpt", $CellContext`TorchOnCity$$ = 20, $CellContext`view$$ = 
    "2D world", Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`method$$], "ThreeOpt", "tour option"}, {
      "ThreeOpt", "TwoOpt", "OrOpt", "CCA", "OrZweig", "Official"}}, {{
       Hold[$CellContext`view$$], "2D world", "model maps"}, {
      "2D world", "2D China", "3D world", "3D Earth"}}, {{
       Hold[$CellContext`TorchOnCity$$], 20, "cities along path"}, 1, 
      Dynamic[
       If[$CellContext`method$$ === "Official", 53, 54]], 1}}, 
    Typeset`size$$ = {510., {143., 147.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`method$384737$$ = 0, $CellContext`view$384738$$ = 
    0, $CellContext`TorchOnCity$384739$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`method$$ = 
        "ThreeOpt", $CellContext`TorchOnCity$$ = 20, $CellContext`view$$ = 
        "2D world"}, "ControllerVariables" :> {
        Hold[$CellContext`method$$, $CellContext`method$384737$$, 0], 
        Hold[$CellContext`view$$, $CellContext`view$384738$$, 0], 
        Hold[$CellContext`TorchOnCity$$, $CellContext`TorchOnCity$384739$$, 
         0]}, "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`result$, $CellContext`route$, $CellContext`steps$, \
$CellContext`map2D$, $CellContext`map3D$}, $CellContext`result$ = 
         Switch[$CellContext`method$$, "ThreeOpt", $CellContext`ThreeOptTour, 
           "TwoOpt", $CellContext`TwoOptTour, "OrOpt", $CellContext`OrOptTour,
            "CCA", $CellContext`CCATour, "OrZweig", $CellContext`OrZweigTour, 
           "Official", $CellContext`officialTour]; $CellContext`route$ = 
         If[Part[$CellContext`result$, 2] < 20, $CellContext`result$, 
           Reverse[$CellContext`result$]]; $CellContext`steps$ = 
         Part[$CellContext`allCitiesGPS, $CellContext`route$]; \
$CellContext`map2D$ = Graphics[{LightGreen, 
            EdgeForm[Gray], 
            If[$CellContext`view$$ == "2D world", 
             Map[CountryData[#, "SchematicPolygon"]& , 
              CountryData[]], 
             Map[CountryData[#, "SchematicPolygon"]& , 
              CountryData["Asia"]]], LightPink, 
            Map[
            CountryData[#, "SchematicPolygon"]& , {
             "China", "HongKong", "Macau", "Taiwan"}], 
            Text[
             Style["Beijing", Bold, Red], {116.5, 42}], 
            Map[Text[
              Style["\[Neptune]", 
               RGBColor[1, 0.47, 0]], #]& , 
             Take[$CellContext`steps$, $CellContext`TorchOnCity$$]], 
            ColorData[1, 1], 
            Dashing[0.005], 
            Thickness[0.003], 
            GeometricTransformation[
             Map[$CellContext`greatcircleschart, 
              Table[
               Take[
                Take[
                 Take[$CellContext`steps$, $CellContext`TorchOnCity$$], 
                 Length[
                  
                  Take[$CellContext`steps$, $CellContext`TorchOnCity$$]]], \
{$CellContext`i, $CellContext`i + 1}], {$CellContext`i, 1, Length[
                  Take[$CellContext`steps$, $CellContext`TorchOnCity$$]] - 
                1}]], 
             RotationTransform[90 Degree, {0, 0}]], 
            Opacity[0.05], 
            PointSize[Medium], 
            Table[
             Tooltip[
              Point[
               Part[$CellContext`allCitiesGPS, $CellContext`k]], 
              Row[{
                Part[
                 Part[$CellContext`allCities, $CellContext`k], 3], ", ", 
                Part[
                 Part[$CellContext`allCities, $CellContext`k], 
                 4]}]], {$CellContext`k, 1, 
              Length[$CellContext`allCities]}]}, PlotRange -> 
           If[$CellContext`view$$ == "2D world", {{-180, 180}, {-90, 90}}, {{
             40, 160}, {-2, 58}}], ImageSize -> {510, 290}, Frame -> True, 
           FrameTicks -> {{
              Table[45 $CellContext`i, {$CellContext`i, -2, 2}], None}, {
              Table[45 $CellContext`i, {$CellContext`i, -4, 4}], None}}, 
           Prolog -> Raster[
             
             Table[$CellContext`i, {$CellContext`i, 100}, {$CellContext`j, 
               100}], {
              Scaled[{0, 0}], 
              Scaled[{1, 1}]}, {1, 100}, 
             ColorFunction -> (Blend[{LightBlue, White}, #]& )], PlotLabel -> 
           Style[
             Grid[{{
                $CellContext`CountDist[$CellContext`groupAll, \
$CellContext`route$, $CellContext`TorchOnCity$$], "km   total distance "}}, 
              Alignment -> {Right, Left}], Italic, 21]]; $CellContext`map3D$ = 
         Graphics3D[{
            If[$CellContext`view$$ == "3D world", {
              Sphere[{0, 0, 0}, 0.99 $CellContext`r], 
              Map[Line[
                Map[$CellContext`SCPlot, 
                 CountryData[#, "SchematicCoordinates"], {-2}]]& , 
               CountryData[]]}, 
             $CellContext`earth[$CellContext`rasterdata, 100]], Red, Thick, 
            Line[
             $CellContext`TourLine[
              Take[$CellContext`route$, $CellContext`TorchOnCity$$]]], Yellow, 
            PointSize[Medium], 
            Map[Tooltip[
              Point[
               $CellContext`SCPlot[#]], #]& , 
             Map[Reverse[#]& , 
              Take[$CellContext`steps$, $CellContext`TorchOnCity$$]]], White, 
            PointSize[0.001], 
            Point[$CellContext`stars]}, Background -> 
           If[$CellContext`view$$ == "3D world", LightGray, Black], Lighting -> 
           If[$CellContext`view$$ == "3D world", Automatic, "Neutral"], Boxed -> 
           False, SphericalRegion -> True, ImageSize -> {510, 290}, 
           ViewPoint -> {0, 0.75, 0.5}]; Show[
          If[
           
           Or[$CellContext`view$$ == "2D world", $CellContext`view$$ == 
            "2D China"], $CellContext`map2D$, $CellContext`map3D$]]], 
      "Specifications" :> {{{$CellContext`method$$, "ThreeOpt", 
          "tour option"}, {
         "ThreeOpt", "TwoOpt", "OrOpt", "CCA", "OrZweig", "Official"}, 
         ControlType -> Setter}, 
        Delimiter, {{$CellContext`view$$, "2D world", "model maps"}, {
         "2D world", "2D China", "3D world", "3D Earth"}, ControlType -> 
         Setter}, {{$CellContext`TorchOnCity$$, 20, "cities along path"}, 1, 
         Dynamic[
          If[$CellContext`method$$ === "Official", 53, 54]], 1, Appearance -> 
         "Labeled"}}, 
      "Options" :> {
       ControlPlacement -> Top, 
        TrackedSymbols :> {$CellContext`method$$, $CellContext`view$$, \
$CellContext`TorchOnCity$$}, SynchronousUpdating -> False, 
        SynchronousInitialization -> False, 
        AutorunSequencing -> {1, 2, {3, 25}}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{559., {221., 226.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>(($CellContext`holdingCity = {{
         116.4, 39.93, "Beijing", 
          "China"}}; $CellContext`internationalCities = {{
         76.92, 43.32, "Almaty", "Kazakhstan"}, {
         29., 41.1, "Istanbul", "Turkish"}, {
         30.32, 59.93, "Saint Petersburg", "Russia"}, {-0.12, 51.5, "London", 
          "United Kingdom"}, {
         2.34, 48.86, "Paris", "France"}, {-122.44, 37.76, "San Francisco", 
          "United States"}, {-58.37, -34.61, "Buenos Aires", "Argentina"}, {
         39.28, -6.82, "Dar es Salaam", "Tanzania"}, {
         58.54, 23.61, "Muscat", "Oman"}, {
         73.06, 33.72, "Islamabad", "Pakistan"}, {
         77.21, 28.67, "Delhi", "India"}, {
         100.5, 13.73, "Bangkok", "Thailand"}, {
         101.71, 3.16, "Kuala Lumpur", "Malaysia"}, {
         106.83, -6.18, "Jakarta", "Indonesia"}, {
         149.22, -35.28, "Canberra", "Australia"}, {
         136.91, 35.15, "Nagoya", "Japan"}, {
         127., 37.57, "Seoul", "South Korea"}, {
         125.75, 39.02, "Pyongyang", "North Korea "}, {
         106.69, 10.78, "Ho Chi Minh City", 
          "Vietnam"}}; $CellContext`chinaCities = {{
         110.32, 20.05, "Haikou", "China"}, {
         117.28, 31.85, "Hefei", "China"}, {113.55, 22.2, "Macau", "China"}, {
         119.3, 26.08, "Fuzhou", "China"}, {
         103.68, 36.05, "Lanzhou", "China"}, {
         113.25, 23.12, "Guangzhou", "China"}, {
         108.32, 22.82, "Nanning", "China"}, {
         106.72, 26.58, "Guiyang", "China"}, {
         114.48, 38.05, "Shijiazhuang", "China"}, {
         113.67, 34.75, "Zhengzhou", "China"}, {
         126.65, 45.75, "Harbin", "China"}, {
         114.27, 30.58, "Wuhan", "China"}, {
         112.97, 28.2, "Changsha", "China"}, {
         125.35, 43.87, "Changchun", "China"}, {
         118.78, 32.05, "Nanjing", "China"}, {
         115.88, 28.68, "Nanchang", "China"}, {
         123.45, 41.8, "Shenyang", "China"}, {
         111.64, 40.82, "Hohhot", "China"}, {
         106.27, 38.47, "Yingchua", "China"}, {
         101.77, 36.62, "Xining", "China"}, {117., 36.67, "Jinan", "China"}, {
         112.55, 37.87, "Taiyuan", "China"}, {
         108.9, 34.27, "Xian", "China"}, {
         121.47, 31.23, "Shanghai", "China"}, {
         104.07, 30.67, "Chengdu", "China"}, {
         121.45, 25.02, "Taibei", "China"}, {
         117.2, 39.13, "Tianjin", "China"}, {91., 29.6, "Lasa", "China"}, {
         114.15, 22.28, "Hongkong", "China"}, {
         87.58, 43.8, "Urumqi", "China"}, {
         102.7, 25.05, "Kunming", "China"}, {
         120.17, 30.25, "Hangzhou", "China"}, {
         106.58, 29.57, "Chongqing", "China"}}; $CellContext`allCities = 
       Flatten[{$CellContext`holdingCity, $CellContext`internationalCities, \
$CellContext`chinaCities}, 
         1]; {$CellContext`holdingCityGPS, \
$CellContext`internationalCitiesGPS, $CellContext`chinaCitiesGPS} = 
       Map[Take[#, All, 
          2]& , {$CellContext`holdingCity, $CellContext`internationalCities, \
$CellContext`chinaCities}]; $CellContext`allCitiesGPS = 
       Flatten[{$CellContext`holdingCityGPS, \
$CellContext`internationalCitiesGPS, $CellContext`chinaCitiesGPS}, 
         1]; {$CellContext`group1, $CellContext`group2, $CellContext`group3} = 
       Map[Map[Reverse, #]& , {$CellContext`holdingCityGPS, \
$CellContext`internationalCitiesGPS, $CellContext`chinaCitiesGPS}]; \
$CellContext`groupAll = 
       Flatten[{$CellContext`group1, $CellContext`group2, \
$CellContext`group3}, 1]; $CellContext`solver[
         Pattern[$CellContext`pts, 
          Blank[List]], 
         Pattern[$CellContext`method, 
          Blank[]], 
         Pattern[$CellContext`distFun, 
          Blank[]], 
         Pattern[$CellContext`group1, 
          Blank[]], 
         Pattern[$CellContext`group2, 
          Blank[]]] := 
       Module[{$CellContext`dist, $CellContext`tour, \
$CellContext`constrainFun}, $CellContext`constrainFun = If[
            Or[
             And[
              MemberQ[$CellContext`group1, #], 
              MemberQ[$CellContext`group2, #2]], 
             And[
              MemberQ[$CellContext`group1, #2], 
              MemberQ[$CellContext`group2, #]]], $CellContext`distFun[#, #2] + 
            10^9, 
            $CellContext`distFun[#, #2]]& ; {$CellContext`dist, \
$CellContext`tour} = Quiet[
            FindShortestTour[
             N[$CellContext`pts], Method -> $CellContext`method, 
             DistanceFunction -> $CellContext`constrainFun]]; 
         Append[$CellContext`tour, 
           First[$CellContext`tour]]]; $CellContext`methods = {
        "TwoOpt", "OrOpt", "CCA", 
         "OrZweig"}; {$CellContext`TwoOptTour, $CellContext`OrOptTour, \
$CellContext`CCATour, $CellContext`OrZweigTour} = 
       Map[$CellContext`solver[$CellContext`groupAll, #, 
          GeoDistance, $CellContext`group2, $CellContext`group3]& , \
$CellContext`methods]; $CellContext`threeOpt[
         Pattern[$CellContext`pts, 
          Blank[List]], 
         Pattern[$CellContext`distFunction, 
          Blank[]], 
         Pattern[$CellContext`group1, 
          Blank[]], 
         Pattern[$CellContext`group2, 
          Blank[]]] := 
       Module[{$CellContext`n = 
          Length[$CellContext`pts], $CellContext`randInit, $CellContext`tour, \
$CellContext`distFun, $CellContext`constrainFun, $CellContext`pairsDistTable, \
$CellContext`pairsDist, $CellContext`tourLength, $CellContext`len, \
$CellContext`adjacencyList, $CellContext`triples, $CellContext`changed = 
          True, $CellContext`tuple, $CellContext`loss, $CellContext`gain, \
$CellContext`c1, $CellContext`c2, $CellContext`c3, $CellContext`c4}, 
         SeedRandom[321]; $CellContext`randInit[
            Pattern[$CellContext`k, 
             Blank[]]] := Flatten[{1, RandomSample[
               Range[$CellContext`k - 1]] + 1, 
             1}]; $CellContext`tour = $CellContext`randInit[$CellContext`n]; \
$CellContext`distFun[
            Pattern[$CellContext`p1, 
             Blank[]], 
            Pattern[$CellContext`p2, 
             
             Blank[]]] := $CellContext`distFunction[$CellContext`p1, \
$CellContext`p2]; $CellContext`constrainFun[
            Pattern[$CellContext`p1, 
             Blank[]], 
            Pattern[$CellContext`p2, 
             Blank[]]] := If[
            Or[
             And[
              MemberQ[$CellContext`group1, $CellContext`p1], 
              MemberQ[$CellContext`group2, $CellContext`p2]], 
             And[
              MemberQ[$CellContext`group1, $CellContext`p2], 
              MemberQ[$CellContext`group2, $CellContext`p1]]], 
            10^9 + $CellContext`distFun[$CellContext`p1, $CellContext`p2], 
            $CellContext`distFun[$CellContext`p1, $CellContext`p2]]; \
$CellContext`pairsDistTable = Table[
            $CellContext`constrainFun[
             Part[$CellContext`pts, $CellContext`j], 
             
             Part[$CellContext`pts, $CellContext`k]], {$CellContext`j, \
$CellContext`n}, {$CellContext`k, $CellContext`n}]; $CellContext`pairsDist[
            Pattern[$CellContext`j, 
             Blank[]], 
            Pattern[$CellContext`k, 
             Blank[]]] := Part[$CellContext`pairsDistTable, 
            Part[$CellContext`tour, $CellContext`j], 
            Part[$CellContext`tour, $CellContext`k]]; $CellContext`tourLength[
            Pattern[$CellContext`l, 
             Blank[]]] := Sum[
            Part[$CellContext`pairsDistTable, 
             Part[$CellContext`l, $CellContext`i], 
             Part[$CellContext`l, $CellContext`i + 1]], {$CellContext`i, 
             Length[$CellContext`l] - 
             1}]; $CellContext`len = \
$CellContext`tourLength[$CellContext`tour]; $CellContext`triples = Subsets[
            Range[$CellContext`n], {3}]; 
         While[$CellContext`changed, $CellContext`changed = False; 
           Do[$CellContext`tuple = 
              Part[$CellContext`triples, $CellContext`j]; $CellContext`loss = 
              Sum[
                $CellContext`pairsDist[
                 Part[$CellContext`tuple, $CellContext`k], 
                 Part[$CellContext`tuple, $CellContext`k] + 
                 1], {$CellContext`k, 
                 3}]; $CellContext`c1 = $CellContext`pairsDist[
                 Part[$CellContext`tuple, 1], 
                 Part[$CellContext`tuple, 2]] + $CellContext`pairsDist[
                Part[$CellContext`tuple, 1] + 1, 
                 Part[$CellContext`tuple, 3]] + $CellContext`pairsDist[
                Part[$CellContext`tuple, 2] + 1, Part[$CellContext`tuple, 3] + 
                 1]; $CellContext`c2 = $CellContext`pairsDist[
                 Part[$CellContext`tuple, 1], Part[$CellContext`tuple, 2] + 
                 1] + $CellContext`pairsDist[
                 Part[$CellContext`tuple, 3], Part[$CellContext`tuple, 1] + 
                 1] + $CellContext`pairsDist[
                 Part[$CellContext`tuple, 2], Part[$CellContext`tuple, 3] + 
                 1]; $CellContext`c3 = $CellContext`pairsDist[
                 Part[$CellContext`tuple, 1], Part[$CellContext`tuple, 2] + 
                 1] + $CellContext`pairsDist[
                 Part[$CellContext`tuple, 3], 
                 Part[$CellContext`tuple, 2]] + $CellContext`pairsDist[
                Part[$CellContext`tuple, 1] + 1, Part[$CellContext`tuple, 3] + 
                 1]; $CellContext`c4 = $CellContext`pairsDist[
                 Part[$CellContext`tuple, 1], 
                 Part[$CellContext`tuple, 3]] + $CellContext`pairsDist[
                Part[$CellContext`tuple, 2] + 1, Part[$CellContext`tuple, 1] + 
                 1] + $CellContext`pairsDist[
                 Part[$CellContext`tuple, 2], Part[$CellContext`tuple, 3] + 
                 1]; $CellContext`gain = 
              Min[$CellContext`c1, $CellContext`c2, $CellContext`c3, \
$CellContext`c4]; 
             If[$CellContext`gain < $CellContext`loss, $CellContext`len = \
$CellContext`len - $CellContext`loss + $CellContext`gain; \
$CellContext`changed = True; 
               Which[$CellContext`gain == $CellContext`c1, $CellContext`tour = 
                 Join[
                   Part[$CellContext`tour, 
                    Span[1, 
                    Part[$CellContext`tuple, 1]]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 2], Part[$CellContext`tuple, 1] + 
                    1, -1]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3], Part[$CellContext`tuple, 2] + 
                    1, -1]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3] + 1, $CellContext`n + 
                    1]]], $CellContext`gain == $CellContext`c2, \
$CellContext`tour = Join[
                   Part[$CellContext`tour, 
                    Span[1, 
                    Part[$CellContext`tuple, 1]]], 
                   Part[$CellContext`tour, 
                    Span[Part[$CellContext`tuple, 2] + 1, 
                    Part[$CellContext`tuple, 3]]], 
                   Part[$CellContext`tour, 
                    Span[Part[$CellContext`tuple, 1] + 1, 
                    Part[$CellContext`tuple, 2]]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3] + 1, $CellContext`n + 
                    1]]], $CellContext`gain == $CellContext`c3, \
$CellContext`tour = Join[
                   Part[$CellContext`tour, 
                    Span[1, 
                    Part[$CellContext`tuple, 1]]], 
                   Part[$CellContext`tour, 
                    Span[Part[$CellContext`tuple, 2] + 1, 
                    Part[$CellContext`tuple, 3]]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 2], Part[$CellContext`tuple, 1] + 
                    1, -1]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3] + 1, $CellContext`n + 
                    1]]], $CellContext`gain == $CellContext`c4, \
$CellContext`tour = Join[
                   Part[$CellContext`tour, 
                    Span[1, 
                    Part[$CellContext`tuple, 1]]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3], Part[$CellContext`tuple, 2] + 
                    1, -1]], 
                   Part[$CellContext`tour, 
                    Span[Part[$CellContext`tuple, 1] + 1, 
                    Part[$CellContext`tuple, 2]]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3] + 1, $CellContext`n + 1]]], 
                 True, 
                 Print["trouble"]]; Null]; Null, {$CellContext`j, 
              
              Length[$CellContext`triples]}]]; {$CellContext`len, \
$CellContext`tour}]; $CellContext`ThreeOptTour = Last[
         $CellContext`threeOpt[$CellContext`groupAll, 
          GeoDistance, $CellContext`group2, $CellContext`group3]]; \
$CellContext`officialTour = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 
        15, 16, 17, 18, 19, 20, 49, 23, 21, 26, 24, 36, 52, 44, 35, 22, 32, 
        33, 27, 51, 28, 53, 45, 48, 40, 50, 25, 39, 43, 42, 38, 31, 34, 37, 
        41, 30, 29, 47, 1}; $CellContext`CountDist[
         Pattern[$CellContext`pts, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`torchOnCity, 
          Blank[]]] := NumberForm[10^(-3) Sum[
           GeoDistance[
            Part[$CellContext`pts, 
             Part[$CellContext`tour, $CellContext`i]], 
            Part[$CellContext`pts, 
             
             Part[$CellContext`tour, $CellContext`i + 
              1]]], {$CellContext`i, $CellContext`torchOnCity - 1}], {6, 
         2}]; $CellContext`greatcircleschart[{{
           Pattern[$CellContext`lon1, 
            Blank[]], 
           Pattern[$CellContext`lat1, 
            Blank[]]}, {
           Pattern[$CellContext`lon2, 
            Blank[]], 
           Pattern[$CellContext`lat2, 
            Blank[]]}}] := 
       Module[{$CellContext`places, $CellContext`L0, $CellContext`L1, \
$CellContext`L2, $CellContext`\[Phi]1, $CellContext`\[Phi]2, \
$CellContext`tani, $CellContext`sf, $CellContext`\[Phi]L, $CellContext`points = 
          20, $CellContext`distance}, 
         If[$CellContext`lat1 == $CellContext`lat2, $CellContext`lat2 = \
$CellContext`lat2 + 0.0003; 
           Null]; $CellContext`places = {{-$CellContext`lon1, \
$CellContext`lat1}, {-$CellContext`lon2, $CellContext`lat2}}; \
$CellContext`places = Sort[$CellContext`places] 2 (Pi/360); $CellContext`L1 = 
          Part[$CellContext`places, 2, 1]; $CellContext`\[Phi]1 = 
          Part[$CellContext`places, 2, 2]; $CellContext`L2 = 
          Part[$CellContext`places, 1, 1]; $CellContext`\[Phi]2 = 
          Part[$CellContext`places, 1, 2]; 
         If[$CellContext`\[Phi]1 == $CellContext`\[Phi]2, \
$CellContext`\[Phi]2 = $CellContext`\[Phi]2 + 0.0003; Null]; 
         If[$CellContext`L1 == $CellContext`L2, $CellContext`L2 = \
$CellContext`L2 + 0.0003; 
           Null]; $CellContext`L0 = (1/2) ($CellContext`L1 + $CellContext`L2 - 
            2 
            ArcCot[Cot[($CellContext`L1 - $CellContext`L2)/2] 
              Csc[$CellContext`\[Phi]1 + $CellContext`\[Phi]2] 
              Sin[$CellContext`\[Phi]1 - $CellContext`\[Phi]2]]); 
         If[$CellContext`L0 == $CellContext`L1, $CellContext`L1 = \
$CellContext`L1 + 0.0003; 
           Null]; $CellContext`tani = (-
            Csc[$CellContext`L0 - $CellContext`L1]) Tan[$CellContext`\[Phi]1]; 
         If[Abs[$CellContext`L1 - $CellContext`L2] <= 
           Pi, $CellContext`\[Phi]L = Table[{
               ArcTan[
               Sin[$CellContext`t - $CellContext`L0] $CellContext`tani], \
$CellContext`t}, {$CellContext`t, 
               Min[$CellContext`L1, $CellContext`L2], 
               Max[$CellContext`L1, $CellContext`L2], 
               Abs[Max[$CellContext`L1, $CellContext`L2] - 
                 Min[$CellContext`L1, $CellContext`L2]]/($CellContext`points - 
               1)}]; Null, $CellContext`\[Phi]L = Table[{
               ArcTan[
               Sin[$CellContext`t - $CellContext`L0] $CellContext`tani], \
$CellContext`t}, {$CellContext`t, 
               Min[$CellContext`L1, Sign[$CellContext`L1] Pi], 
               Max[$CellContext`L1, Sign[$CellContext`L1] Pi], 
               Abs[$CellContext`L1 - Sign[$CellContext`L1] 
                 Pi]/($CellContext`points/2 - 1)}]; $CellContext`\[Phi]L = 
            Join[{$CellContext`\[Phi]L}, {
               Table[{
                 ArcTan[
                 Sin[$CellContext`t - $CellContext`L0] $CellContext`tani], \
$CellContext`t}, {$CellContext`t, 
                 Min[(-Sign[$CellContext`L1]) Pi, $CellContext`L2], 
                 Max[(-Sign[$CellContext`L1]) Pi, $CellContext`L2], 
                 Abs[$CellContext`L2 + 
                   Sign[$CellContext`L1] Pi]/($CellContext`points/2 - 1)}]}]; 
           Null]; Part[
           Graphics[{
             Line[(360/(2 Pi)) $CellContext`\[Phi]L]}], 1]]; $CellContext`r = 
       6367.5; $CellContext`SCPlot[{
          Pattern[$CellContext`lat, 
           Blank[]], 
          Pattern[$CellContext`lon, 
           Blank[]]}] := $CellContext`r {
         Cos[$CellContext`lon Degree] Cos[$CellContext`lat Degree], 
          Sin[$CellContext`lon Degree] Cos[$CellContext`lat Degree], 
          Sin[$CellContext`lat Degree]}; $CellContext`centers = 
       Map[Reverse[#]& , $CellContext`allCitiesGPS]; \
$CellContext`GreatCircleArc[{
          Pattern[$CellContext`lat1, 
           Blank[]], 
          Pattern[$CellContext`lon1, 
           Blank[]]}, {
          Pattern[$CellContext`lat2, 
           Blank[]], 
          Pattern[$CellContext`lon2, 
           Blank[]]}] := 
       Module[{$CellContext`u = $CellContext`SCPlot[{$CellContext`lat1, \
$CellContext`lon1}], $CellContext`v = $CellContext`SCPlot[{$CellContext`lat2, \
$CellContext`lon2}], $CellContext`a}, $CellContext`a = 
          VectorAngle[$CellContext`u, $CellContext`v]; Table[
           Evaluate[
            
            RotationTransform[$CellContext`\[Theta], {$CellContext`u, \
$CellContext`v}][$CellContext`u]], {$CellContext`\[Theta], 
            0, $CellContext`a, $CellContext`a/Ceiling[
            10 $CellContext`a]}]]; $CellContext`TourLine[
         Pattern[$CellContext`rou, 
          Blank[]]] := Apply[$CellContext`GreatCircleArc, 
         Partition[
          Part[$CellContext`centers, $CellContext`rou], 2, 1], {
         1}]; $CellContext`rasterdata = N[First[
           First[
            Graphics[
             Raster[CompressedData["
1:eJzsvQV0VFm+N3rXs/Xeet93504PlpScVRojEDQEhwAB4q7l7paqVKWSVCWp
irtCCAR3SIi7u7sRg6CLQAu9uqGRvF1Jdw/dQzMt9DD3rS/rR3FKzj777N9f
tx0UVeRG/d//4z/+wwX8ywP/DMcP5yYfzE48uHP7/tzkMh7duQ3w8O4UOH44
P/74/uSjexPg4P6d0cd3pwDAtwvzkwt3Jx7Njj6eG3s8O/oEvM6NPbkzDj5/
9nAa4PNHM4/uzz1+cGf53Pn5sacPZhbuTRlwf/rpo7vLWHg4/+zx/YUHd588
nHswP/X43gzAwoO5hYd3Pn9y78n92ceP7i08ebDw5P7CwoNnD+YBQJkLj+89
vDcLDgyv9+8uf2LAo3mAp0/uP3l499nCA8PV7889fHD33vwsKAoUC24KANzs
vdmJZdydHgNvl2G436Vv3329Mzl49/YQwP2ZUfD6cG783vTIg9kx8Hbpk4H7
M8P3poce3Rl7MDtyb25kfnb4+9dZcBVQJmjGKfAJAGhAA8DbHz6fn5kEWH67
fPxwbhSUA0q+Nzd2/874g7sT4IrgcvfuTM3PgUpOLxe7XNsf7wJgfmYcnH53
GlA5/XCJREBreXXd2Pjk+PDAzG3Dpe/MjJzMPZuWmt3cORoRcyo7Oy839/Ll
4sasU1dUoTGTt2cnJmc6u/q6uvtHRiera+oqq2pKymuGhkYGhidGxoYHhwf6
+3t7e7tbWprqaisBWprrOztaZqYnFp48evzowdzsdH9fz8joAPhRR0dHW0d7
e2dHR09v//BYRUNzYWXNpYKKvMv5F/NLL98qraqrLyqrLKuqLamq6Ojs7hvo
Hxweauvs6+3sGB8bGR0ZmpmdHBnuA1ccHOzv6+trbW3t7Gzv6W3v72ltbaru
6W7r7Gju7WkfHenv7+tsbalvbKptaKyprausr6syVK+uDKC+vryxoRqgobai
pbGmuaEaoKm+qqm+YhntLbWgNPBha1NtfX1tY2N9Q1Njc2tLa3tbfWNDU1MD
uNmmlsaWtmbwCcDyTYGaABhucQldXR1d4G17a093e1cn+FUTaJb2tkYAcNDR
3tze0dzS2gDK6ehq7+wCP2sDNQfo624bHuge7Gkb6m2fGOkGGBvsBu03OtAz
PT4IPpwc6Rsd6gU/a2xr6h3t6u3tB21VVFZeWVvX1jHCCEpWhSedvVqSe+pG
fFJedVVHT/dkXdtwXdftjpE7p69X596oOX6pWJd56dT1sovFdYX1XZdLGy4U
1TZ2j9e2D5e39FY1d90qra6uay4sqSwor7pWVAqYqmlsKa2qLauuq28BN9UM
7quttRncYG9PV3dPe3d3d09PT/6tgivXrlbXN9Q0NFc2ttS0tFfUt569Vniz
rPb89bLrhbXldW3VTV1N7d3N7V2gRfoHB/qHh8Dt9/f3D4C/4Yn+gZHxiemB
wdHR0fHOTlBqd29f5/DgUEdbe0sLaNWu4uLCgoKb+QXXCm5dr64orqksaayr
bK6rMqC+eBktDeVtTZUtdbcaqm40Vd5qrioEr031ZQD11UXN9WXg2+YGA6oq
SyorikGZt27lA1RVVQCuAb+AlMbmhsbmJkA3oN7w2lAHUFdXU1tbDQAO6sBB
TVV1VVlVZWllRUltTQX4D7wBTQRQUVFVV9dQV9vU3NTe3FIPWgyQDsSguwuw
3DHQa8BQf8fwQCfgemCgbWCgY3io1yDbfZ3hkSn6qGORsVeiUq7U1jXX1LeA
Fqura8uvaiutqL1Z3ni1pKqmvq2ytq20pqmqsR3Qd+pW2flbZWfzy09eKrhc
UHTm4pUzly6dvnjx0o0b4ODyzZtXi0svFxbfrKgpqawpb+yubG6paGpuaWsF
otvU0gzEta2tBYg6EODmprqB/i5QjWVt6uhsMXzX0lJVU11WUX6rpPRWSfmN
kvL8wrLiiuqCkor84nJQcurZq2duVIXFHTt1oeTC1Zvgx7eKCkvK6zSxmYFR
GSlnC64UApkCzV18o/B64a2y2pom0ESgSZuaa5tb6to7Wyqryzo6e1tagaq0
gPYvKKkCJ+QXV14vqbxWXHGttADgVmlhQXFJflFxflHpTVB8WRFofICW2mID
qosAWmuKm6oLGyoLAMCHtRVFdZXF9VUGggC/1dWV1bVVdQ21y8wCikEjAHVu
bW1eussmg2o3NTQ31TY11jQ11jY21IATgeloa66pqSwC4lFWVlLfUNXV3Wqg
bBjIfXtLcyNAZ0dbD9CF7k6gFN1dHYBuwDU4AEoKanvqfCGDp0o7dvHUqYtR
0Qn5hQ03S2pulTUVVTZfK6y+VtE8MNQPzOnQyPD45AQwekA1uvoGAYCQlZaX
FZdXlQLi6psqQDNVVReWlgEAlS+vrikDRrepraG1s3tgpLNvqLt/qKUDWKIO
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
skZbsu/0XWqoSRntPLswXvBg6MriveonY9cf9Jx/+0XT4uvuxcXbbxenFxfv
fXGn/Ml4wcv5yle3S14v1L8ZK3oxcKOtNn1y9EpYuBJvYd9TfmLxy95v7tQv
zNYgYWQcigeuhcf8XU2WOmOZpia0/NOxrYXJV88fgxkHmOK+FwOQyGzd4Wtt
46aMt4k85ph7mpGZR5VG74eMRMCILf8GYcSIyLWFMG4olPsv3ePH9aeA2Y+y
5hQBp9r7EaS67WzddmHsToZmr7uQsBpn6NzGQSwUmmGCl6IREhD8w1ZT0CgW
Bu8M5NDK6jfMdQStvc5CbGHGBuQiYEyxIOHLgcsL3Rdnu89/MVny3b2qxaf1
LyeKXt6teD1Tvvhi+MXLgVeLU68Wb3/9fGbxZderhYbF79pePql49XUrIHdx
suzZROXCeI2RsR9JKBmrPb34eefbJ21f3G1TSPSIv/nA19CNjd5NtJmA3wBf
asV5eW9lZuH14M/+kwphv+cCbkT0oYirWnUyrVVomp0m1iHnkijimLMJRgCH
kZYpAw6Lp1/LVDr9qQvfcCD9QRraCodmoEDK/Hv7QICxRSBJCIjPjNwn0tnE
ZXlFR3subw1kJ3QmhXy29Yi3GdoTGCucMWk/n8cKdfLyiELjXD7CtC4EOeZW
9Kv71U+Grrx53fvqq7a3iyOLb8a+nK58udD89mnD26/aFxcHFr/r/+arls/n
axa/6VxcqF182vjm2/bFb3oWXw69/rrvy3sNo02F7o6imZ78xYXuxa+6Fl8O
LL7qfXWnfvHto+MnjkHGBAjyXaYGuYq3aY9vQb7m5jnFsWzK1avK03mcrGOc
v34GghypJV6hiD9UXhGqjj8aluUgijvIibSxc/FmxBzYcRRICB+NCViz2h+J
oOFxHPyfMMXlXVJQy6EagoxGkCxNflX+/h6sZkIriOD2JfpD7eXZYeGHs67y
ljcfQxoJjGE8GMQhRhCdI7yjs1wt3dkYGNt8rcIYR/vj5EIwVkdX++JC1/PZ
6sWv2haf1L+sz3sxfHPxacviy/7vnrS//qL15YuO76aLFp/UvP1mePFp85e3
C98u1C8+aVhcHP3mUcu94cL5yQ6VMKH2ZvaLB92vHnS8+bz71Zc9r99OvJqu
ej5V+WSm9OndRsNue0v+ThSUVFmsu1WgK7+uK7kemZPHKStJLi9OzbxKSrvC
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
              "], {{0, 0}, {159., 80.}}, {0, 255}, ColorFunction -> RGBColor],
              ImageSize -> {98., 49.}, PlotRange -> {{0, 159.}, {0, 80.}}]]]/
         255, 4]; $CellContext`earth[
         Pattern[$CellContext`rasterdata, 
          Blank[]], 
         Pattern[$CellContext`resolution, 
          Blank[]]] := 
       Module[{$CellContext`size, $CellContext`coords, \
$CellContext`MakePointSet, $CellContext`redpts, $CellContext`redfnpts, \
$CellContext`redfun, $CellContext`grnpts, $CellContext`greenfnpts, \
$CellContext`greenfun, $CellContext`blupts, $CellContext`bluefnpts, \
$CellContext`bluefun, $CellContext`r, $CellContext`planetdraft, \
$CellContext`planet}, $CellContext`size = 
          Dimensions[$CellContext`rasterdata]; $CellContext`coords = N[
            
            Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, 0, 2 Pi, 
              2 (Pi/(Part[$CellContext`size, 2] - 1))}, {$CellContext`j, 0, 
              Pi, Pi/(Part[$CellContext`size, 1] - 1)}], 
            4]; $CellContext`MakePointSet[
            Pattern[$CellContext`lis1, 
             Blank[List]], 
            Pattern[$CellContext`lis2, 
             Blank[List]]] := Map[MapThread[Append, #]& , 
            MapThread[
            List, {$CellContext`lis1, $CellContext`lis2}]]; \
{$CellContext`redpts, $CellContext`grnpts, $CellContext`blupts} = 
          Map[Partition[#, 
             Part[$CellContext`size, 1]]& , 
            Transpose[
             Flatten[
              Transpose[$CellContext`rasterdata], 
              1]]]; {$CellContext`redfnpts, $CellContext`greenfnpts, \
$CellContext`bluefnpts} = 
          Map[$CellContext`MakePointSet[$CellContext`coords, #]& , \
{$CellContext`redpts, $CellContext`grnpts, $CellContext`blupts}]; \
{$CellContext`redfun, $CellContext`greenfun, $CellContext`bluefun} = 
          Map[Interpolation[
             Flatten[#, 1], InterpolationOrder -> 
             1]& , {$CellContext`redfnpts, $CellContext`greenfnpts, \
$CellContext`bluefnpts}]; $CellContext`r = 6367.5; 
         SeedRandom[12345]; $CellContext`stars = 3.5 $CellContext`r Table[
             ({Cos[#] Sqrt[1 - #2^2], Sin[#] Sqrt[1 - #2^2], #2}& )[
              RandomReal[{0, 2 Pi}], 
              RandomReal[{-1, 1}]], {50}]; $CellContext`planetdraft := 
          ParametricPlot3D[
           0.99 $CellContext`r {
             Cos[$CellContext`theta] Sin[$CellContext`p], 
              Sin[$CellContext`theta] Sin[$CellContext`p], -
              Cos[$CellContext`p]}, {$CellContext`theta, 0, 2 
             Pi}, {$CellContext`p, 0, Pi}, Mesh -> 6, MaxRecursion -> 0, 
            BoundaryStyle -> Black, PerformanceGoal -> 
            "Speed"]; $CellContext`planet = 
          ParametricPlot3D[
           0.99 $CellContext`r {
             Cos[$CellContext`theta] Sin[$CellContext`p], 
              Sin[$CellContext`theta] Sin[$CellContext`p], -
              Cos[$CellContext`p]}, {$CellContext`theta, 0, 2 
             Pi}, {$CellContext`p, 0, Pi}, Mesh -> None, 
            ColorFunction -> (RGBColor[
              $CellContext`redfun[#4, #5], 
              $CellContext`greenfun[#4, #5], 
              $CellContext`bluefun[#4, #5]]& ), ColorFunctionScaling -> False,
             PlotPoints -> $CellContext`resolution, MaxRecursion -> 0]; 
         GeometricTransformation[
           ControlActive[
            Part[$CellContext`planetdraft, 1], 
            Part[$CellContext`planet, 1]], 
           RotationTransform[180 Degree, {0, 0, 1}]]]; Null); 
     Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->363391025]
}, {2}]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateCaptionSection"],

Cell[TextData[{
 "The ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["29", "th"], TraditionalForm]], "InlineMath"],
 " Olympic games were held in Beijing, China. According to Olympic tradition, \
the torch is lit at Olympia and then handed over to the city holding the \
games, in this case Beijing. The torch was carried from Beijing and went \
around the world, then traveled through the major cities of China, making a \
tour of about 90,000 kilometers."
}], "ManipulateCaption",
 CellChangeTimes->{
  3.35696210375764*^9, {3.4941603430113707`*^9, 3.4941604102296906`*^9}, {
   3.494182022491816*^9, 3.494182046222095*^9}, {3.4941821519835043`*^9, 
   3.494182156284775*^9}},
 CellID->809479904],

Cell["\<\
This Demonstration, using algorithms for the traveling salesman problem, \
optimizes the international and China torch's tour to about 78,191 \
kilometers, which is shorter than the official tour by 11,721 kilometers \
(about 15%). It includes all 54 cities (19 international, 33 China and \
Beijing), starting and finishing in Beijing.\
\>", "ManipulateCaption",
 CellChangeTimes->{
  3.35696210375764*^9, {3.4941604203546257`*^9, 3.494160432917045*^9}, {
   3.494160478260505*^9, 3.4941604813386106`*^9}, {3.4941652144020686`*^9, 
   3.4941652349956865`*^9}},
 CellID->260561711]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ThumbnailSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`method$$ = 
    "ThreeOpt", $CellContext`TorchOnCity$$ = 54, $CellContext`view$$ = 
    "3D Earth", Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`method$$], "ThreeOpt", "tour option"}, {
      "ThreeOpt", "TwoOpt", "OrOpt", "CCA", "OrZweig", "Official"}}, {{
       Hold[$CellContext`view$$], "3D Earth", "model maps"}, {
      "2D world", "2D China", "3D world", "3D Earth"}}, {{
       Hold[$CellContext`TorchOnCity$$], 54, "cities along path"}, 1, 
      Dynamic[
       If[$CellContext`method$$ === "Official", 53, 54]], 1}}, 
    Typeset`size$$ = {510., {143., 147.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`method$384799$$ = 0, $CellContext`view$384800$$ = 
    0, $CellContext`TorchOnCity$384801$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`method$$ = 
        "ThreeOpt", $CellContext`TorchOnCity$$ = 54, $CellContext`view$$ = 
        "3D Earth"}, "ControllerVariables" :> {
        Hold[$CellContext`method$$, $CellContext`method$384799$$, 0], 
        Hold[$CellContext`view$$, $CellContext`view$384800$$, 0], 
        Hold[$CellContext`TorchOnCity$$, $CellContext`TorchOnCity$384801$$, 
         0]}, "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`result$, $CellContext`route$, $CellContext`steps$, \
$CellContext`map2D$, $CellContext`map3D$}, $CellContext`result$ = 
         Switch[$CellContext`method$$, "ThreeOpt", $CellContext`ThreeOptTour, 
           "TwoOpt", $CellContext`TwoOptTour, "OrOpt", $CellContext`OrOptTour,
            "CCA", $CellContext`CCATour, "OrZweig", $CellContext`OrZweigTour, 
           "Official", $CellContext`officialTour]; $CellContext`route$ = 
         If[Part[$CellContext`result$, 2] < 20, $CellContext`result$, 
           Reverse[$CellContext`result$]]; $CellContext`steps$ = 
         Part[$CellContext`allCitiesGPS, $CellContext`route$]; \
$CellContext`map2D$ = Graphics[{LightGreen, 
            EdgeForm[Gray], 
            If[$CellContext`view$$ == "2D world", 
             Map[CountryData[#, "SchematicPolygon"]& , 
              CountryData[]], 
             Map[CountryData[#, "SchematicPolygon"]& , 
              CountryData["Asia"]]], LightPink, 
            Map[
            CountryData[#, "SchematicPolygon"]& , {
             "China", "HongKong", "Macau", "Taiwan"}], 
            Text[
             Style["Beijing", Bold, Red], {116.5, 42}], 
            Map[Text[
              Style["\[Neptune]", 
               RGBColor[1, 0.47, 0]], #]& , 
             Take[$CellContext`steps$, $CellContext`TorchOnCity$$]], 
            ColorData[1, 1], 
            Dashing[0.005], 
            Thickness[0.003], 
            GeometricTransformation[
             Map[$CellContext`greatcircleschart, 
              Table[
               Take[
                Take[
                 Take[$CellContext`steps$, $CellContext`TorchOnCity$$], 
                 Length[
                  
                  Take[$CellContext`steps$, $CellContext`TorchOnCity$$]]], \
{$CellContext`i, $CellContext`i + 1}], {$CellContext`i, 1, Length[
                  Take[$CellContext`steps$, $CellContext`TorchOnCity$$]] - 
                1}]], 
             RotationTransform[90 Degree, {0, 0}]], 
            Opacity[0.05], 
            PointSize[Medium], 
            Table[
             Tooltip[
              Point[
               Part[$CellContext`allCitiesGPS, $CellContext`k]], 
              Row[{
                Part[
                 Part[$CellContext`allCities, $CellContext`k], 3], ", ", 
                Part[
                 Part[$CellContext`allCities, $CellContext`k], 
                 4]}]], {$CellContext`k, 1, 
              Length[$CellContext`allCities]}]}, PlotRange -> 
           If[$CellContext`view$$ == "2D world", {{-180, 180}, {-90, 90}}, {{
             40, 160}, {-2, 58}}], ImageSize -> {510, 290}, Frame -> True, 
           FrameTicks -> {{
              Table[45 $CellContext`i, {$CellContext`i, -2, 2}], None}, {
              Table[45 $CellContext`i, {$CellContext`i, -4, 4}], None}}, 
           Prolog -> Raster[
             
             Table[$CellContext`i, {$CellContext`i, 100}, {$CellContext`j, 
               100}], {
              Scaled[{0, 0}], 
              Scaled[{1, 1}]}, {1, 100}, 
             ColorFunction -> (Blend[{LightBlue, White}, #]& )], PlotLabel -> 
           Style[
             Grid[{{
                $CellContext`CountDist[$CellContext`groupAll, \
$CellContext`route$, $CellContext`TorchOnCity$$], "km   total distance "}}, 
              Alignment -> {Right, Left}], Italic, 21]]; $CellContext`map3D$ = 
         Graphics3D[{
            If[$CellContext`view$$ == "3D world", {
              Sphere[{0, 0, 0}, 0.99 $CellContext`r], 
              Map[Line[
                Map[$CellContext`SCPlot, 
                 CountryData[#, "SchematicCoordinates"], {-2}]]& , 
               CountryData[]]}, 
             $CellContext`earth[$CellContext`rasterdata, 100]], Red, Thick, 
            Line[
             $CellContext`TourLine[
              Take[$CellContext`route$, $CellContext`TorchOnCity$$]]], Yellow, 
            PointSize[Medium], 
            Map[Tooltip[
              Point[
               $CellContext`SCPlot[#]], #]& , 
             Map[Reverse[#]& , 
              Take[$CellContext`steps$, $CellContext`TorchOnCity$$]]], White, 
            PointSize[0.001], 
            Point[$CellContext`stars]}, Background -> 
           If[$CellContext`view$$ == "3D world", LightGray, Black], Lighting -> 
           If[$CellContext`view$$ == "3D world", Automatic, "Neutral"], Boxed -> 
           False, SphericalRegion -> True, ImageSize -> {510, 290}, 
           ViewPoint -> {0, 0.75, 0.5}]; Show[
          If[
           
           Or[$CellContext`view$$ == "2D world", $CellContext`view$$ == 
            "2D China"], $CellContext`map2D$, $CellContext`map3D$]]], 
      "Specifications" :> {{{$CellContext`method$$, "ThreeOpt", 
          "tour option"}, {
         "ThreeOpt", "TwoOpt", "OrOpt", "CCA", "OrZweig", "Official"}, 
         ControlType -> Setter}, 
        Delimiter, {{$CellContext`view$$, "3D Earth", "model maps"}, {
         "2D world", "2D China", "3D world", "3D Earth"}, ControlType -> 
         Setter}, {{$CellContext`TorchOnCity$$, 54, "cities along path"}, 1, 
         Dynamic[
          If[$CellContext`method$$ === "Official", 53, 54]], 1, Appearance -> 
         "Labeled"}}, 
      "Options" :> {
       ControlPlacement -> Top, 
        TrackedSymbols :> {$CellContext`method$$, $CellContext`view$$, \
$CellContext`TorchOnCity$$}, SynchronousUpdating -> False, 
        SynchronousInitialization -> False, 
        AutorunSequencing -> {1, 2, {3, 25}}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{559., {221., 226.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>(($CellContext`holdingCity = {{
         116.4, 39.93, "Beijing", 
          "China"}}; $CellContext`internationalCities = {{
         76.92, 43.32, "Almaty", "Kazakhstan"}, {
         29., 41.1, "Istanbul", "Turkish"}, {
         30.32, 59.93, "Saint Petersburg", "Russia"}, {-0.12, 51.5, "London", 
          "United Kingdom"}, {
         2.34, 48.86, "Paris", "France"}, {-122.44, 37.76, "San Francisco", 
          "United States"}, {-58.37, -34.61, "Buenos Aires", "Argentina"}, {
         39.28, -6.82, "Dar es Salaam", "Tanzania"}, {
         58.54, 23.61, "Muscat", "Oman"}, {
         73.06, 33.72, "Islamabad", "Pakistan"}, {
         77.21, 28.67, "Delhi", "India"}, {
         100.5, 13.73, "Bangkok", "Thailand"}, {
         101.71, 3.16, "Kuala Lumpur", "Malaysia"}, {
         106.83, -6.18, "Jakarta", "Indonesia"}, {
         149.22, -35.28, "Canberra", "Australia"}, {
         136.91, 35.15, "Nagoya", "Japan"}, {
         127., 37.57, "Seoul", "South Korea"}, {
         125.75, 39.02, "Pyongyang", "North Korea "}, {
         106.69, 10.78, "Ho Chi Minh City", 
          "Vietnam"}}; $CellContext`chinaCities = {{
         110.32, 20.05, "Haikou", "China"}, {
         117.28, 31.85, "Hefei", "China"}, {113.55, 22.2, "Macau", "China"}, {
         119.3, 26.08, "Fuzhou", "China"}, {
         103.68, 36.05, "Lanzhou", "China"}, {
         113.25, 23.12, "Guangzhou", "China"}, {
         108.32, 22.82, "Nanning", "China"}, {
         106.72, 26.58, "Guiyang", "China"}, {
         114.48, 38.05, "Shijiazhuang", "China"}, {
         113.67, 34.75, "Zhengzhou", "China"}, {
         126.65, 45.75, "Harbin", "China"}, {
         114.27, 30.58, "Wuhan", "China"}, {
         112.97, 28.2, "Changsha", "China"}, {
         125.35, 43.87, "Changchun", "China"}, {
         118.78, 32.05, "Nanjing", "China"}, {
         115.88, 28.68, "Nanchang", "China"}, {
         123.45, 41.8, "Shenyang", "China"}, {
         111.64, 40.82, "Hohhot", "China"}, {
         106.27, 38.47, "Yingchua", "China"}, {
         101.77, 36.62, "Xining", "China"}, {117., 36.67, "Jinan", "China"}, {
         112.55, 37.87, "Taiyuan", "China"}, {
         108.9, 34.27, "Xian", "China"}, {
         121.47, 31.23, "Shanghai", "China"}, {
         104.07, 30.67, "Chengdu", "China"}, {
         121.45, 25.02, "Taibei", "China"}, {
         117.2, 39.13, "Tianjin", "China"}, {91., 29.6, "Lasa", "China"}, {
         114.15, 22.28, "Hongkong", "China"}, {
         87.58, 43.8, "Urumqi", "China"}, {
         102.7, 25.05, "Kunming", "China"}, {
         120.17, 30.25, "Hangzhou", "China"}, {
         106.58, 29.57, "Chongqing", "China"}}; $CellContext`allCities = 
       Flatten[{$CellContext`holdingCity, $CellContext`internationalCities, \
$CellContext`chinaCities}, 
         1]; {$CellContext`holdingCityGPS, \
$CellContext`internationalCitiesGPS, $CellContext`chinaCitiesGPS} = 
       Map[Take[#, All, 
          2]& , {$CellContext`holdingCity, $CellContext`internationalCities, \
$CellContext`chinaCities}]; $CellContext`allCitiesGPS = 
       Flatten[{$CellContext`holdingCityGPS, \
$CellContext`internationalCitiesGPS, $CellContext`chinaCitiesGPS}, 
         1]; {$CellContext`group1, $CellContext`group2, $CellContext`group3} = 
       Map[Map[Reverse, #]& , {$CellContext`holdingCityGPS, \
$CellContext`internationalCitiesGPS, $CellContext`chinaCitiesGPS}]; \
$CellContext`groupAll = 
       Flatten[{$CellContext`group1, $CellContext`group2, \
$CellContext`group3}, 1]; $CellContext`solver[
         Pattern[$CellContext`pts, 
          Blank[List]], 
         Pattern[$CellContext`method, 
          Blank[]], 
         Pattern[$CellContext`distFun, 
          Blank[]], 
         Pattern[$CellContext`group1, 
          Blank[]], 
         Pattern[$CellContext`group2, 
          Blank[]]] := 
       Module[{$CellContext`dist, $CellContext`tour, \
$CellContext`constrainFun}, $CellContext`constrainFun = If[
            Or[
             And[
              MemberQ[$CellContext`group1, #], 
              MemberQ[$CellContext`group2, #2]], 
             And[
              MemberQ[$CellContext`group1, #2], 
              MemberQ[$CellContext`group2, #]]], $CellContext`distFun[#, #2] + 
            10^9, 
            $CellContext`distFun[#, #2]]& ; {$CellContext`dist, \
$CellContext`tour} = Quiet[
            FindShortestTour[
             N[$CellContext`pts], Method -> $CellContext`method, 
             DistanceFunction -> $CellContext`constrainFun]]; 
         Append[$CellContext`tour, 
           First[$CellContext`tour]]]; $CellContext`methods = {
        "TwoOpt", "OrOpt", "CCA", 
         "OrZweig"}; {$CellContext`TwoOptTour, $CellContext`OrOptTour, \
$CellContext`CCATour, $CellContext`OrZweigTour} = 
       Map[$CellContext`solver[$CellContext`groupAll, #, 
          GeoDistance, $CellContext`group2, $CellContext`group3]& , \
$CellContext`methods]; $CellContext`threeOpt[
         Pattern[$CellContext`pts, 
          Blank[List]], 
         Pattern[$CellContext`distFunction, 
          Blank[]], 
         Pattern[$CellContext`group1, 
          Blank[]], 
         Pattern[$CellContext`group2, 
          Blank[]]] := 
       Module[{$CellContext`n = 
          Length[$CellContext`pts], $CellContext`randInit, $CellContext`tour, \
$CellContext`distFun, $CellContext`constrainFun, $CellContext`pairsDistTable, \
$CellContext`pairsDist, $CellContext`tourLength, $CellContext`len, \
$CellContext`adjacencyList, $CellContext`triples, $CellContext`changed = 
          True, $CellContext`tuple, $CellContext`loss, $CellContext`gain, \
$CellContext`c1, $CellContext`c2, $CellContext`c3, $CellContext`c4}, 
         SeedRandom[321]; $CellContext`randInit[
            Pattern[$CellContext`k, 
             Blank[]]] := Flatten[{1, RandomSample[
               Range[$CellContext`k - 1]] + 1, 
             1}]; $CellContext`tour = $CellContext`randInit[$CellContext`n]; \
$CellContext`distFun[
            Pattern[$CellContext`p1, 
             Blank[]], 
            Pattern[$CellContext`p2, 
             
             Blank[]]] := $CellContext`distFunction[$CellContext`p1, \
$CellContext`p2]; $CellContext`constrainFun[
            Pattern[$CellContext`p1, 
             Blank[]], 
            Pattern[$CellContext`p2, 
             Blank[]]] := If[
            Or[
             And[
              MemberQ[$CellContext`group1, $CellContext`p1], 
              MemberQ[$CellContext`group2, $CellContext`p2]], 
             And[
              MemberQ[$CellContext`group1, $CellContext`p2], 
              MemberQ[$CellContext`group2, $CellContext`p1]]], 
            10^9 + $CellContext`distFun[$CellContext`p1, $CellContext`p2], 
            $CellContext`distFun[$CellContext`p1, $CellContext`p2]]; \
$CellContext`pairsDistTable = Table[
            $CellContext`constrainFun[
             Part[$CellContext`pts, $CellContext`j], 
             
             Part[$CellContext`pts, $CellContext`k]], {$CellContext`j, \
$CellContext`n}, {$CellContext`k, $CellContext`n}]; $CellContext`pairsDist[
            Pattern[$CellContext`j, 
             Blank[]], 
            Pattern[$CellContext`k, 
             Blank[]]] := Part[$CellContext`pairsDistTable, 
            Part[$CellContext`tour, $CellContext`j], 
            Part[$CellContext`tour, $CellContext`k]]; $CellContext`tourLength[
            Pattern[$CellContext`l, 
             Blank[]]] := Sum[
            Part[$CellContext`pairsDistTable, 
             Part[$CellContext`l, $CellContext`i], 
             Part[$CellContext`l, $CellContext`i + 1]], {$CellContext`i, 
             Length[$CellContext`l] - 
             1}]; $CellContext`len = \
$CellContext`tourLength[$CellContext`tour]; $CellContext`triples = Subsets[
            Range[$CellContext`n], {3}]; 
         While[$CellContext`changed, $CellContext`changed = False; 
           Do[$CellContext`tuple = 
              Part[$CellContext`triples, $CellContext`j]; $CellContext`loss = 
              Sum[
                $CellContext`pairsDist[
                 Part[$CellContext`tuple, $CellContext`k], 
                 Part[$CellContext`tuple, $CellContext`k] + 
                 1], {$CellContext`k, 
                 3}]; $CellContext`c1 = $CellContext`pairsDist[
                 Part[$CellContext`tuple, 1], 
                 Part[$CellContext`tuple, 2]] + $CellContext`pairsDist[
                Part[$CellContext`tuple, 1] + 1, 
                 Part[$CellContext`tuple, 3]] + $CellContext`pairsDist[
                Part[$CellContext`tuple, 2] + 1, Part[$CellContext`tuple, 3] + 
                 1]; $CellContext`c2 = $CellContext`pairsDist[
                 Part[$CellContext`tuple, 1], Part[$CellContext`tuple, 2] + 
                 1] + $CellContext`pairsDist[
                 Part[$CellContext`tuple, 3], Part[$CellContext`tuple, 1] + 
                 1] + $CellContext`pairsDist[
                 Part[$CellContext`tuple, 2], Part[$CellContext`tuple, 3] + 
                 1]; $CellContext`c3 = $CellContext`pairsDist[
                 Part[$CellContext`tuple, 1], Part[$CellContext`tuple, 2] + 
                 1] + $CellContext`pairsDist[
                 Part[$CellContext`tuple, 3], 
                 Part[$CellContext`tuple, 2]] + $CellContext`pairsDist[
                Part[$CellContext`tuple, 1] + 1, Part[$CellContext`tuple, 3] + 
                 1]; $CellContext`c4 = $CellContext`pairsDist[
                 Part[$CellContext`tuple, 1], 
                 Part[$CellContext`tuple, 3]] + $CellContext`pairsDist[
                Part[$CellContext`tuple, 2] + 1, Part[$CellContext`tuple, 1] + 
                 1] + $CellContext`pairsDist[
                 Part[$CellContext`tuple, 2], Part[$CellContext`tuple, 3] + 
                 1]; $CellContext`gain = 
              Min[$CellContext`c1, $CellContext`c2, $CellContext`c3, \
$CellContext`c4]; 
             If[$CellContext`gain < $CellContext`loss, $CellContext`len = \
$CellContext`len - $CellContext`loss + $CellContext`gain; \
$CellContext`changed = True; 
               Which[$CellContext`gain == $CellContext`c1, $CellContext`tour = 
                 Join[
                   Part[$CellContext`tour, 
                    Span[1, 
                    Part[$CellContext`tuple, 1]]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 2], Part[$CellContext`tuple, 1] + 
                    1, -1]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3], Part[$CellContext`tuple, 2] + 
                    1, -1]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3] + 1, $CellContext`n + 
                    1]]], $CellContext`gain == $CellContext`c2, \
$CellContext`tour = Join[
                   Part[$CellContext`tour, 
                    Span[1, 
                    Part[$CellContext`tuple, 1]]], 
                   Part[$CellContext`tour, 
                    Span[Part[$CellContext`tuple, 2] + 1, 
                    Part[$CellContext`tuple, 3]]], 
                   Part[$CellContext`tour, 
                    Span[Part[$CellContext`tuple, 1] + 1, 
                    Part[$CellContext`tuple, 2]]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3] + 1, $CellContext`n + 
                    1]]], $CellContext`gain == $CellContext`c3, \
$CellContext`tour = Join[
                   Part[$CellContext`tour, 
                    Span[1, 
                    Part[$CellContext`tuple, 1]]], 
                   Part[$CellContext`tour, 
                    Span[Part[$CellContext`tuple, 2] + 1, 
                    Part[$CellContext`tuple, 3]]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 2], Part[$CellContext`tuple, 1] + 
                    1, -1]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3] + 1, $CellContext`n + 
                    1]]], $CellContext`gain == $CellContext`c4, \
$CellContext`tour = Join[
                   Part[$CellContext`tour, 
                    Span[1, 
                    Part[$CellContext`tuple, 1]]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3], Part[$CellContext`tuple, 2] + 
                    1, -1]], 
                   Part[$CellContext`tour, 
                    Span[Part[$CellContext`tuple, 1] + 1, 
                    Part[$CellContext`tuple, 2]]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3] + 1, $CellContext`n + 1]]], 
                 True, 
                 Print["trouble"]]; Null]; Null, {$CellContext`j, 
              
              Length[$CellContext`triples]}]]; {$CellContext`len, \
$CellContext`tour}]; $CellContext`ThreeOptTour = Last[
         $CellContext`threeOpt[$CellContext`groupAll, 
          GeoDistance, $CellContext`group2, $CellContext`group3]]; \
$CellContext`officialTour = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 
        15, 16, 17, 18, 19, 20, 49, 23, 21, 26, 24, 36, 52, 44, 35, 22, 32, 
        33, 27, 51, 28, 53, 45, 48, 40, 50, 25, 39, 43, 42, 38, 31, 34, 37, 
        41, 30, 29, 47, 1}; $CellContext`CountDist[
         Pattern[$CellContext`pts, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`torchOnCity, 
          Blank[]]] := NumberForm[10^(-3) Sum[
           GeoDistance[
            Part[$CellContext`pts, 
             Part[$CellContext`tour, $CellContext`i]], 
            Part[$CellContext`pts, 
             
             Part[$CellContext`tour, $CellContext`i + 
              1]]], {$CellContext`i, $CellContext`torchOnCity - 1}], {6, 
         2}]; $CellContext`greatcircleschart[{{
           Pattern[$CellContext`lon1, 
            Blank[]], 
           Pattern[$CellContext`lat1, 
            Blank[]]}, {
           Pattern[$CellContext`lon2, 
            Blank[]], 
           Pattern[$CellContext`lat2, 
            Blank[]]}}] := 
       Module[{$CellContext`places, $CellContext`L0, $CellContext`L1, \
$CellContext`L2, $CellContext`\[Phi]1, $CellContext`\[Phi]2, \
$CellContext`tani, $CellContext`sf, $CellContext`\[Phi]L, $CellContext`points = 
          20, $CellContext`distance}, 
         If[$CellContext`lat1 == $CellContext`lat2, $CellContext`lat2 = \
$CellContext`lat2 + 0.0003; 
           Null]; $CellContext`places = {{-$CellContext`lon1, \
$CellContext`lat1}, {-$CellContext`lon2, $CellContext`lat2}}; \
$CellContext`places = Sort[$CellContext`places] 2 (Pi/360); $CellContext`L1 = 
          Part[$CellContext`places, 2, 1]; $CellContext`\[Phi]1 = 
          Part[$CellContext`places, 2, 2]; $CellContext`L2 = 
          Part[$CellContext`places, 1, 1]; $CellContext`\[Phi]2 = 
          Part[$CellContext`places, 1, 2]; 
         If[$CellContext`\[Phi]1 == $CellContext`\[Phi]2, \
$CellContext`\[Phi]2 = $CellContext`\[Phi]2 + 0.0003; Null]; 
         If[$CellContext`L1 == $CellContext`L2, $CellContext`L2 = \
$CellContext`L2 + 0.0003; 
           Null]; $CellContext`L0 = (1/2) ($CellContext`L1 + $CellContext`L2 - 
            2 
            ArcCot[Cot[($CellContext`L1 - $CellContext`L2)/2] 
              Csc[$CellContext`\[Phi]1 + $CellContext`\[Phi]2] 
              Sin[$CellContext`\[Phi]1 - $CellContext`\[Phi]2]]); 
         If[$CellContext`L0 == $CellContext`L1, $CellContext`L1 = \
$CellContext`L1 + 0.0003; 
           Null]; $CellContext`tani = (-
            Csc[$CellContext`L0 - $CellContext`L1]) Tan[$CellContext`\[Phi]1]; 
         If[Abs[$CellContext`L1 - $CellContext`L2] <= 
           Pi, $CellContext`\[Phi]L = Table[{
               ArcTan[
               Sin[$CellContext`t - $CellContext`L0] $CellContext`tani], \
$CellContext`t}, {$CellContext`t, 
               Min[$CellContext`L1, $CellContext`L2], 
               Max[$CellContext`L1, $CellContext`L2], 
               Abs[Max[$CellContext`L1, $CellContext`L2] - 
                 Min[$CellContext`L1, $CellContext`L2]]/($CellContext`points - 
               1)}]; Null, $CellContext`\[Phi]L = Table[{
               ArcTan[
               Sin[$CellContext`t - $CellContext`L0] $CellContext`tani], \
$CellContext`t}, {$CellContext`t, 
               Min[$CellContext`L1, Sign[$CellContext`L1] Pi], 
               Max[$CellContext`L1, Sign[$CellContext`L1] Pi], 
               Abs[$CellContext`L1 - Sign[$CellContext`L1] 
                 Pi]/($CellContext`points/2 - 1)}]; $CellContext`\[Phi]L = 
            Join[{$CellContext`\[Phi]L}, {
               Table[{
                 ArcTan[
                 Sin[$CellContext`t - $CellContext`L0] $CellContext`tani], \
$CellContext`t}, {$CellContext`t, 
                 Min[(-Sign[$CellContext`L1]) Pi, $CellContext`L2], 
                 Max[(-Sign[$CellContext`L1]) Pi, $CellContext`L2], 
                 Abs[$CellContext`L2 + 
                   Sign[$CellContext`L1] Pi]/($CellContext`points/2 - 1)}]}]; 
           Null]; Part[
           Graphics[{
             Line[(360/(2 Pi)) $CellContext`\[Phi]L]}], 1]]; $CellContext`r = 
       6367.5; $CellContext`SCPlot[{
          Pattern[$CellContext`lat, 
           Blank[]], 
          Pattern[$CellContext`lon, 
           Blank[]]}] := $CellContext`r {
         Cos[$CellContext`lon Degree] Cos[$CellContext`lat Degree], 
          Sin[$CellContext`lon Degree] Cos[$CellContext`lat Degree], 
          Sin[$CellContext`lat Degree]}; $CellContext`centers = 
       Map[Reverse[#]& , $CellContext`allCitiesGPS]; \
$CellContext`GreatCircleArc[{
          Pattern[$CellContext`lat1, 
           Blank[]], 
          Pattern[$CellContext`lon1, 
           Blank[]]}, {
          Pattern[$CellContext`lat2, 
           Blank[]], 
          Pattern[$CellContext`lon2, 
           Blank[]]}] := 
       Module[{$CellContext`u = $CellContext`SCPlot[{$CellContext`lat1, \
$CellContext`lon1}], $CellContext`v = $CellContext`SCPlot[{$CellContext`lat2, \
$CellContext`lon2}], $CellContext`a}, $CellContext`a = 
          VectorAngle[$CellContext`u, $CellContext`v]; Table[
           Evaluate[
            
            RotationTransform[$CellContext`\[Theta], {$CellContext`u, \
$CellContext`v}][$CellContext`u]], {$CellContext`\[Theta], 
            0, $CellContext`a, $CellContext`a/Ceiling[
            10 $CellContext`a]}]]; $CellContext`TourLine[
         Pattern[$CellContext`rou, 
          Blank[]]] := Apply[$CellContext`GreatCircleArc, 
         Partition[
          Part[$CellContext`centers, $CellContext`rou], 2, 1], {
         1}]; $CellContext`rasterdata = N[First[
           First[
            Graphics[
             Raster[CompressedData["
1:eJzsvQV0VFm+N3rXs/Xeet93504PlpScVRojEDQEhwAB4q7l7paqVKWSVCWp
irtCCAR3SIi7u7sRg6CLQAu9uqGRvF1Jdw/dQzMt9DD3rS/rR3FKzj777N9f
tx0UVeRG/d//4z/+wwX8ywP/DMcP5yYfzE48uHP7/tzkMh7duQ3w8O4UOH44
P/74/uSjexPg4P6d0cd3pwDAtwvzkwt3Jx7Njj6eG3s8O/oEvM6NPbkzDj5/
9nAa4PNHM4/uzz1+cGf53Pn5sacPZhbuTRlwf/rpo7vLWHg4/+zx/YUHd588
nHswP/X43gzAwoO5hYd3Pn9y78n92ceP7i08ebDw5P7CwoNnD+YBQJkLj+89
vDcLDgyv9+8uf2LAo3mAp0/uP3l499nCA8PV7889fHD33vwsKAoUC24KANzs
vdmJZdydHgNvl2G436Vv3329Mzl49/YQwP2ZUfD6cG783vTIg9kx8Hbpk4H7
M8P3poce3Rl7MDtyb25kfnb4+9dZcBVQJmjGKfAJAGhAA8DbHz6fn5kEWH67
fPxwbhSUA0q+Nzd2/874g7sT4IrgcvfuTM3PgUpOLxe7XNsf7wJgfmYcnH53
GlA5/XCJREBreXXd2Pjk+PDAzG3Dpe/MjJzMPZuWmt3cORoRcyo7Oy839/Ll
4sasU1dUoTGTt2cnJmc6u/q6uvtHRiera+oqq2pKymuGhkYGhidGxoYHhwf6
+3t7e7tbWprqaisBWprrOztaZqYnFp48evzowdzsdH9fz8joAPhRR0dHW0d7
e2dHR09v//BYRUNzYWXNpYKKvMv5F/NLL98qraqrLyqrLKuqLamq6Ojs7hvo
Hxweauvs6+3sGB8bGR0ZmpmdHBnuA1ccHOzv6+trbW3t7Gzv6W3v72ltbaru
6W7r7Gju7WkfHenv7+tsbalvbKptaKyprausr6syVK+uDKC+vryxoRqgobai
pbGmuaEaoKm+qqm+YhntLbWgNPBha1NtfX1tY2N9Q1Njc2tLa3tbfWNDU1MD
uNmmlsaWtmbwCcDyTYGaABhucQldXR1d4G17a093e1cn+FUTaJb2tkYAcNDR
3tze0dzS2gDK6ehq7+wCP2sDNQfo624bHuge7Gkb6m2fGOkGGBvsBu03OtAz
PT4IPpwc6Rsd6gU/a2xr6h3t6u3tB21VVFZeWVvX1jHCCEpWhSedvVqSe+pG
fFJedVVHT/dkXdtwXdftjpE7p69X596oOX6pWJd56dT1sovFdYX1XZdLGy4U
1TZ2j9e2D5e39FY1d90qra6uay4sqSwor7pWVAqYqmlsKa2qLauuq28BN9UM
7quttRncYG9PV3dPe3d3d09PT/6tgivXrlbXN9Q0NFc2ttS0tFfUt569Vniz
rPb89bLrhbXldW3VTV1N7d3N7V2gRfoHB/qHh8Dt9/f3D4C/4Yn+gZHxiemB
wdHR0fHOTlBqd29f5/DgUEdbe0sLaNWu4uLCgoKb+QXXCm5dr64orqksaayr
bK6rMqC+eBktDeVtTZUtdbcaqm40Vd5qrioEr031ZQD11UXN9WXg2+YGA6oq
SyorikGZt27lA1RVVQCuAb+AlMbmhsbmJkA3oN7w2lAHUFdXU1tbDQAO6sBB
TVV1VVlVZWllRUltTQX4D7wBTQRQUVFVV9dQV9vU3NTe3FIPWgyQDsSguwuw
3DHQa8BQf8fwQCfgemCgbWCgY3io1yDbfZ3hkSn6qGORsVeiUq7U1jXX1LeA
Fqura8uvaiutqL1Z3ni1pKqmvq2ytq20pqmqsR3Qd+pW2flbZWfzy09eKrhc
UHTm4pUzly6dvnjx0o0b4ODyzZtXi0svFxbfrKgpqawpb+yubG6paGpuaWsF
otvU0gzEta2tBYg6EODmprqB/i5QjWVt6uhsMXzX0lJVU11WUX6rpPRWSfmN
kvL8wrLiiuqCkor84nJQcurZq2duVIXFHTt1oeTC1Zvgx7eKCkvK6zSxmYFR
GSlnC64UApkCzV18o/B64a2y2pom0ESgSZuaa5tb6to7Wyqryzo6e1tagaq0
gPYvKKkCJ+QXV14vqbxWXHGttADgVmlhQXFJflFxflHpTVB8WRFofICW2mID
qosAWmuKm6oLGyoLAMCHtRVFdZXF9VUGggC/1dWV1bVVdQ21y8wCikEjAHVu
bW1eussmg2o3NTQ31TY11jQ11jY21IATgeloa66pqSwC4lFWVlLfUNXV3Wqg
bBjIfXtLcyNAZ0dbD9CF7k6gFN1dHYBuwDU4AEoKanvqfCGDp0o7dvHUqYtR
0Qn5hQ03S2pulTUVVTZfK6y+VtE8MNQPzOnQyPD45AQwekA1uvoGAYCQlZaX
FZdXlQLi6psqQDNVVReWlgEAlS+vrikDRrepraG1s3tgpLNvqLt/qKUDWKIO
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
skZbsu/0XWqoSRntPLswXvBg6MriveonY9cf9Jx/+0XT4uvuxcXbbxenFxfv
fXGn/Ml4wcv5yle3S14v1L8ZK3oxcKOtNn1y9EpYuBJvYd9TfmLxy95v7tQv
zNYgYWQcigeuhcf8XU2WOmOZpia0/NOxrYXJV88fgxkHmOK+FwOQyGzd4Wtt
46aMt4k85ph7mpGZR5VG74eMRMCILf8GYcSIyLWFMG4olPsv3ePH9aeA2Y+y
5hQBp9r7EaS67WzddmHsToZmr7uQsBpn6NzGQSwUmmGCl6IREhD8w1ZT0CgW
Bu8M5NDK6jfMdQStvc5CbGHGBuQiYEyxIOHLgcsL3Rdnu89/MVny3b2qxaf1
LyeKXt6teD1Tvvhi+MXLgVeLU68Wb3/9fGbxZderhYbF79pePql49XUrIHdx
suzZROXCeI2RsR9JKBmrPb34eefbJ21f3G1TSPSIv/nA19CNjd5NtJmA3wBf
asV5eW9lZuH14M/+kwphv+cCbkT0oYirWnUyrVVomp0m1iHnkijimLMJRgCH
kZYpAw6Lp1/LVDr9qQvfcCD9QRraCodmoEDK/Hv7QICxRSBJCIjPjNwn0tnE
ZXlFR3subw1kJ3QmhXy29Yi3GdoTGCucMWk/n8cKdfLyiELjXD7CtC4EOeZW
9Kv71U+Grrx53fvqq7a3iyOLb8a+nK58udD89mnD26/aFxcHFr/r/+arls/n
axa/6VxcqF182vjm2/bFb3oWXw69/rrvy3sNo02F7o6imZ78xYXuxa+6Fl8O
LL7qfXWnfvHto+MnjkHGBAjyXaYGuYq3aY9vQb7m5jnFsWzK1avK03mcrGOc
v34GghypJV6hiD9UXhGqjj8aluUgijvIibSxc/FmxBzYcRRICB+NCViz2h+J
oOFxHPyfMMXlXVJQy6EagoxGkCxNflX+/h6sZkIriOD2JfpD7eXZYeGHs67y
ljcfQxoJjGE8GMQhRhCdI7yjs1wt3dkYGNt8rcIYR/vj5EIwVkdX++JC1/PZ
6sWv2haf1L+sz3sxfHPxacviy/7vnrS//qL15YuO76aLFp/UvP1mePFp85e3
C98u1C8+aVhcHP3mUcu94cL5yQ6VMKH2ZvaLB92vHnS8+bz71Zc9r99OvJqu
ej5V+WSm9OndRsNue0v+ThSUVFmsu1WgK7+uK7kemZPHKStJLi9OzbxKSrvC
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
              "], {{0, 0}, {159., 80.}}, {0, 255}, ColorFunction -> RGBColor],
              ImageSize -> {98., 49.}, PlotRange -> {{0, 159.}, {0, 80.}}]]]/
         255, 4]; $CellContext`earth[
         Pattern[$CellContext`rasterdata, 
          Blank[]], 
         Pattern[$CellContext`resolution, 
          Blank[]]] := 
       Module[{$CellContext`size, $CellContext`coords, \
$CellContext`MakePointSet, $CellContext`redpts, $CellContext`redfnpts, \
$CellContext`redfun, $CellContext`grnpts, $CellContext`greenfnpts, \
$CellContext`greenfun, $CellContext`blupts, $CellContext`bluefnpts, \
$CellContext`bluefun, $CellContext`r, $CellContext`planetdraft, \
$CellContext`planet}, $CellContext`size = 
          Dimensions[$CellContext`rasterdata]; $CellContext`coords = N[
            
            Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, 0, 2 Pi, 
              2 (Pi/(Part[$CellContext`size, 2] - 1))}, {$CellContext`j, 0, 
              Pi, Pi/(Part[$CellContext`size, 1] - 1)}], 
            4]; $CellContext`MakePointSet[
            Pattern[$CellContext`lis1, 
             Blank[List]], 
            Pattern[$CellContext`lis2, 
             Blank[List]]] := Map[MapThread[Append, #]& , 
            MapThread[
            List, {$CellContext`lis1, $CellContext`lis2}]]; \
{$CellContext`redpts, $CellContext`grnpts, $CellContext`blupts} = 
          Map[Partition[#, 
             Part[$CellContext`size, 1]]& , 
            Transpose[
             Flatten[
              Transpose[$CellContext`rasterdata], 
              1]]]; {$CellContext`redfnpts, $CellContext`greenfnpts, \
$CellContext`bluefnpts} = 
          Map[$CellContext`MakePointSet[$CellContext`coords, #]& , \
{$CellContext`redpts, $CellContext`grnpts, $CellContext`blupts}]; \
{$CellContext`redfun, $CellContext`greenfun, $CellContext`bluefun} = 
          Map[Interpolation[
             Flatten[#, 1], InterpolationOrder -> 
             1]& , {$CellContext`redfnpts, $CellContext`greenfnpts, \
$CellContext`bluefnpts}]; $CellContext`r = 6367.5; 
         SeedRandom[12345]; $CellContext`stars = 3.5 $CellContext`r Table[
             ({Cos[#] Sqrt[1 - #2^2], Sin[#] Sqrt[1 - #2^2], #2}& )[
              RandomReal[{0, 2 Pi}], 
              RandomReal[{-1, 1}]], {50}]; $CellContext`planetdraft := 
          ParametricPlot3D[
           0.99 $CellContext`r {
             Cos[$CellContext`theta] Sin[$CellContext`p], 
              Sin[$CellContext`theta] Sin[$CellContext`p], -
              Cos[$CellContext`p]}, {$CellContext`theta, 0, 2 
             Pi}, {$CellContext`p, 0, Pi}, Mesh -> 6, MaxRecursion -> 0, 
            BoundaryStyle -> Black, PerformanceGoal -> 
            "Speed"]; $CellContext`planet = 
          ParametricPlot3D[
           0.99 $CellContext`r {
             Cos[$CellContext`theta] Sin[$CellContext`p], 
              Sin[$CellContext`theta] Sin[$CellContext`p], -
              Cos[$CellContext`p]}, {$CellContext`theta, 0, 2 
             Pi}, {$CellContext`p, 0, Pi}, Mesh -> None, 
            ColorFunction -> (RGBColor[
              $CellContext`redfun[#4, #5], 
              $CellContext`greenfun[#4, #5], 
              $CellContext`bluefun[#4, #5]]& ), ColorFunctionScaling -> False,
             PlotPoints -> $CellContext`resolution, MaxRecursion -> 0]; 
         GeometricTransformation[
           ControlActive[
            Part[$CellContext`planetdraft, 1], 
            Part[$CellContext`planet, 1]], 
           RotationTransform[180 Degree, {0, 0, 1}]]]; Null); 
     Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->258982888]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SnapshotsSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`method$$ = 
    "ThreeOpt", $CellContext`TorchOnCity$$ = 20, $CellContext`view$$ = 
    "2D world", Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`method$$], "ThreeOpt", "tour option"}, {
      "ThreeOpt", "TwoOpt", "OrOpt", "CCA", "OrZweig", "Official"}}, {{
       Hold[$CellContext`view$$], "2D world", "model maps"}, {
      "2D world", "2D China", "3D world", "3D Earth"}}, {{
       Hold[$CellContext`TorchOnCity$$], 20, "cities along path"}, 1, 
      Dynamic[
       If[$CellContext`method$$ === "Official", 53, 54]], 1}}, 
    Typeset`size$$ = {510., {143., 147.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`method$384861$$ = 0, $CellContext`view$384862$$ = 
    0, $CellContext`TorchOnCity$384863$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`method$$ = 
        "ThreeOpt", $CellContext`TorchOnCity$$ = 20, $CellContext`view$$ = 
        "2D world"}, "ControllerVariables" :> {
        Hold[$CellContext`method$$, $CellContext`method$384861$$, 0], 
        Hold[$CellContext`view$$, $CellContext`view$384862$$, 0], 
        Hold[$CellContext`TorchOnCity$$, $CellContext`TorchOnCity$384863$$, 
         0]}, "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`result$, $CellContext`route$, $CellContext`steps$, \
$CellContext`map2D$, $CellContext`map3D$}, $CellContext`result$ = 
         Switch[$CellContext`method$$, "ThreeOpt", $CellContext`ThreeOptTour, 
           "TwoOpt", $CellContext`TwoOptTour, "OrOpt", $CellContext`OrOptTour,
            "CCA", $CellContext`CCATour, "OrZweig", $CellContext`OrZweigTour, 
           "Official", $CellContext`officialTour]; $CellContext`route$ = 
         If[Part[$CellContext`result$, 2] < 20, $CellContext`result$, 
           Reverse[$CellContext`result$]]; $CellContext`steps$ = 
         Part[$CellContext`allCitiesGPS, $CellContext`route$]; \
$CellContext`map2D$ = Graphics[{LightGreen, 
            EdgeForm[Gray], 
            If[$CellContext`view$$ == "2D world", 
             Map[CountryData[#, "SchematicPolygon"]& , 
              CountryData[]], 
             Map[CountryData[#, "SchematicPolygon"]& , 
              CountryData["Asia"]]], LightPink, 
            Map[
            CountryData[#, "SchematicPolygon"]& , {
             "China", "HongKong", "Macau", "Taiwan"}], 
            Text[
             Style["Beijing", Bold, Red], {116.5, 42}], 
            Map[Text[
              Style["\[Neptune]", 
               RGBColor[1, 0.47, 0]], #]& , 
             Take[$CellContext`steps$, $CellContext`TorchOnCity$$]], 
            ColorData[1, 1], 
            Dashing[0.005], 
            Thickness[0.003], 
            GeometricTransformation[
             Map[$CellContext`greatcircleschart, 
              Table[
               Take[
                Take[
                 Take[$CellContext`steps$, $CellContext`TorchOnCity$$], 
                 Length[
                  
                  Take[$CellContext`steps$, $CellContext`TorchOnCity$$]]], \
{$CellContext`i, $CellContext`i + 1}], {$CellContext`i, 1, Length[
                  Take[$CellContext`steps$, $CellContext`TorchOnCity$$]] - 
                1}]], 
             RotationTransform[90 Degree, {0, 0}]], 
            Opacity[0.05], 
            PointSize[Medium], 
            Table[
             Tooltip[
              Point[
               Part[$CellContext`allCitiesGPS, $CellContext`k]], 
              Row[{
                Part[
                 Part[$CellContext`allCities, $CellContext`k], 3], ", ", 
                Part[
                 Part[$CellContext`allCities, $CellContext`k], 
                 4]}]], {$CellContext`k, 1, 
              Length[$CellContext`allCities]}]}, PlotRange -> 
           If[$CellContext`view$$ == "2D world", {{-180, 180}, {-90, 90}}, {{
             40, 160}, {-2, 58}}], ImageSize -> {510, 290}, Frame -> True, 
           FrameTicks -> {{
              Table[45 $CellContext`i, {$CellContext`i, -2, 2}], None}, {
              Table[45 $CellContext`i, {$CellContext`i, -4, 4}], None}}, 
           Prolog -> Raster[
             
             Table[$CellContext`i, {$CellContext`i, 100}, {$CellContext`j, 
               100}], {
              Scaled[{0, 0}], 
              Scaled[{1, 1}]}, {1, 100}, 
             ColorFunction -> (Blend[{LightBlue, White}, #]& )], PlotLabel -> 
           Style[
             Grid[{{
                $CellContext`CountDist[$CellContext`groupAll, \
$CellContext`route$, $CellContext`TorchOnCity$$], "km   total distance "}}, 
              Alignment -> {Right, Left}], Italic, 21]]; $CellContext`map3D$ = 
         Graphics3D[{
            If[$CellContext`view$$ == "3D world", {
              Sphere[{0, 0, 0}, 0.99 $CellContext`r], 
              Map[Line[
                Map[$CellContext`SCPlot, 
                 CountryData[#, "SchematicCoordinates"], {-2}]]& , 
               CountryData[]]}, 
             $CellContext`earth[$CellContext`rasterdata, 100]], Red, Thick, 
            Line[
             $CellContext`TourLine[
              Take[$CellContext`route$, $CellContext`TorchOnCity$$]]], Yellow, 
            PointSize[Medium], 
            Map[Tooltip[
              Point[
               $CellContext`SCPlot[#]], #]& , 
             Map[Reverse[#]& , 
              Take[$CellContext`steps$, $CellContext`TorchOnCity$$]]], White, 
            PointSize[0.001], 
            Point[$CellContext`stars]}, Background -> 
           If[$CellContext`view$$ == "3D world", LightGray, Black], Lighting -> 
           If[$CellContext`view$$ == "3D world", Automatic, "Neutral"], Boxed -> 
           False, SphericalRegion -> True, ImageSize -> {510, 290}, 
           ViewPoint -> {0, 0.75, 0.5}]; Show[
          If[
           
           Or[$CellContext`view$$ == "2D world", $CellContext`view$$ == 
            "2D China"], $CellContext`map2D$, $CellContext`map3D$]]], 
      "Specifications" :> {{{$CellContext`method$$, "ThreeOpt", 
          "tour option"}, {
         "ThreeOpt", "TwoOpt", "OrOpt", "CCA", "OrZweig", "Official"}, 
         ControlType -> Setter}, 
        Delimiter, {{$CellContext`view$$, "2D world", "model maps"}, {
         "2D world", "2D China", "3D world", "3D Earth"}, ControlType -> 
         Setter}, {{$CellContext`TorchOnCity$$, 20, "cities along path"}, 1, 
         Dynamic[
          If[$CellContext`method$$ === "Official", 53, 54]], 1, Appearance -> 
         "Labeled"}}, 
      "Options" :> {
       ControlPlacement -> Top, 
        TrackedSymbols :> {$CellContext`method$$, $CellContext`view$$, \
$CellContext`TorchOnCity$$}, SynchronousUpdating -> False, 
        SynchronousInitialization -> False, 
        AutorunSequencing -> {1, 2, {3, 25}}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{559., {221., 226.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>(($CellContext`holdingCity = {{
         116.4, 39.93, "Beijing", 
          "China"}}; $CellContext`internationalCities = {{
         76.92, 43.32, "Almaty", "Kazakhstan"}, {
         29., 41.1, "Istanbul", "Turkish"}, {
         30.32, 59.93, "Saint Petersburg", "Russia"}, {-0.12, 51.5, "London", 
          "United Kingdom"}, {
         2.34, 48.86, "Paris", "France"}, {-122.44, 37.76, "San Francisco", 
          "United States"}, {-58.37, -34.61, "Buenos Aires", "Argentina"}, {
         39.28, -6.82, "Dar es Salaam", "Tanzania"}, {
         58.54, 23.61, "Muscat", "Oman"}, {
         73.06, 33.72, "Islamabad", "Pakistan"}, {
         77.21, 28.67, "Delhi", "India"}, {
         100.5, 13.73, "Bangkok", "Thailand"}, {
         101.71, 3.16, "Kuala Lumpur", "Malaysia"}, {
         106.83, -6.18, "Jakarta", "Indonesia"}, {
         149.22, -35.28, "Canberra", "Australia"}, {
         136.91, 35.15, "Nagoya", "Japan"}, {
         127., 37.57, "Seoul", "South Korea"}, {
         125.75, 39.02, "Pyongyang", "North Korea "}, {
         106.69, 10.78, "Ho Chi Minh City", 
          "Vietnam"}}; $CellContext`chinaCities = {{
         110.32, 20.05, "Haikou", "China"}, {
         117.28, 31.85, "Hefei", "China"}, {113.55, 22.2, "Macau", "China"}, {
         119.3, 26.08, "Fuzhou", "China"}, {
         103.68, 36.05, "Lanzhou", "China"}, {
         113.25, 23.12, "Guangzhou", "China"}, {
         108.32, 22.82, "Nanning", "China"}, {
         106.72, 26.58, "Guiyang", "China"}, {
         114.48, 38.05, "Shijiazhuang", "China"}, {
         113.67, 34.75, "Zhengzhou", "China"}, {
         126.65, 45.75, "Harbin", "China"}, {
         114.27, 30.58, "Wuhan", "China"}, {
         112.97, 28.2, "Changsha", "China"}, {
         125.35, 43.87, "Changchun", "China"}, {
         118.78, 32.05, "Nanjing", "China"}, {
         115.88, 28.68, "Nanchang", "China"}, {
         123.45, 41.8, "Shenyang", "China"}, {
         111.64, 40.82, "Hohhot", "China"}, {
         106.27, 38.47, "Yingchua", "China"}, {
         101.77, 36.62, "Xining", "China"}, {117., 36.67, "Jinan", "China"}, {
         112.55, 37.87, "Taiyuan", "China"}, {
         108.9, 34.27, "Xian", "China"}, {
         121.47, 31.23, "Shanghai", "China"}, {
         104.07, 30.67, "Chengdu", "China"}, {
         121.45, 25.02, "Taibei", "China"}, {
         117.2, 39.13, "Tianjin", "China"}, {91., 29.6, "Lasa", "China"}, {
         114.15, 22.28, "Hongkong", "China"}, {
         87.58, 43.8, "Urumqi", "China"}, {
         102.7, 25.05, "Kunming", "China"}, {
         120.17, 30.25, "Hangzhou", "China"}, {
         106.58, 29.57, "Chongqing", "China"}}; $CellContext`allCities = 
       Flatten[{$CellContext`holdingCity, $CellContext`internationalCities, \
$CellContext`chinaCities}, 
         1]; {$CellContext`holdingCityGPS, \
$CellContext`internationalCitiesGPS, $CellContext`chinaCitiesGPS} = 
       Map[Take[#, All, 
          2]& , {$CellContext`holdingCity, $CellContext`internationalCities, \
$CellContext`chinaCities}]; $CellContext`allCitiesGPS = 
       Flatten[{$CellContext`holdingCityGPS, \
$CellContext`internationalCitiesGPS, $CellContext`chinaCitiesGPS}, 
         1]; {$CellContext`group1, $CellContext`group2, $CellContext`group3} = 
       Map[Map[Reverse, #]& , {$CellContext`holdingCityGPS, \
$CellContext`internationalCitiesGPS, $CellContext`chinaCitiesGPS}]; \
$CellContext`groupAll = 
       Flatten[{$CellContext`group1, $CellContext`group2, \
$CellContext`group3}, 1]; $CellContext`solver[
         Pattern[$CellContext`pts, 
          Blank[List]], 
         Pattern[$CellContext`method, 
          Blank[]], 
         Pattern[$CellContext`distFun, 
          Blank[]], 
         Pattern[$CellContext`group1, 
          Blank[]], 
         Pattern[$CellContext`group2, 
          Blank[]]] := 
       Module[{$CellContext`dist, $CellContext`tour, \
$CellContext`constrainFun}, $CellContext`constrainFun = If[
            Or[
             And[
              MemberQ[$CellContext`group1, #], 
              MemberQ[$CellContext`group2, #2]], 
             And[
              MemberQ[$CellContext`group1, #2], 
              MemberQ[$CellContext`group2, #]]], $CellContext`distFun[#, #2] + 
            10^9, 
            $CellContext`distFun[#, #2]]& ; {$CellContext`dist, \
$CellContext`tour} = Quiet[
            FindShortestTour[
             N[$CellContext`pts], Method -> $CellContext`method, 
             DistanceFunction -> $CellContext`constrainFun]]; 
         Append[$CellContext`tour, 
           First[$CellContext`tour]]]; $CellContext`methods = {
        "TwoOpt", "OrOpt", "CCA", 
         "OrZweig"}; {$CellContext`TwoOptTour, $CellContext`OrOptTour, \
$CellContext`CCATour, $CellContext`OrZweigTour} = 
       Map[$CellContext`solver[$CellContext`groupAll, #, 
          GeoDistance, $CellContext`group2, $CellContext`group3]& , \
$CellContext`methods]; $CellContext`threeOpt[
         Pattern[$CellContext`pts, 
          Blank[List]], 
         Pattern[$CellContext`distFunction, 
          Blank[]], 
         Pattern[$CellContext`group1, 
          Blank[]], 
         Pattern[$CellContext`group2, 
          Blank[]]] := 
       Module[{$CellContext`n = 
          Length[$CellContext`pts], $CellContext`randInit, $CellContext`tour, \
$CellContext`distFun, $CellContext`constrainFun, $CellContext`pairsDistTable, \
$CellContext`pairsDist, $CellContext`tourLength, $CellContext`len, \
$CellContext`adjacencyList, $CellContext`triples, $CellContext`changed = 
          True, $CellContext`tuple, $CellContext`loss, $CellContext`gain, \
$CellContext`c1, $CellContext`c2, $CellContext`c3, $CellContext`c4}, 
         SeedRandom[321]; $CellContext`randInit[
            Pattern[$CellContext`k, 
             Blank[]]] := Flatten[{1, RandomSample[
               Range[$CellContext`k - 1]] + 1, 
             1}]; $CellContext`tour = $CellContext`randInit[$CellContext`n]; \
$CellContext`distFun[
            Pattern[$CellContext`p1, 
             Blank[]], 
            Pattern[$CellContext`p2, 
             
             Blank[]]] := $CellContext`distFunction[$CellContext`p1, \
$CellContext`p2]; $CellContext`constrainFun[
            Pattern[$CellContext`p1, 
             Blank[]], 
            Pattern[$CellContext`p2, 
             Blank[]]] := If[
            Or[
             And[
              MemberQ[$CellContext`group1, $CellContext`p1], 
              MemberQ[$CellContext`group2, $CellContext`p2]], 
             And[
              MemberQ[$CellContext`group1, $CellContext`p2], 
              MemberQ[$CellContext`group2, $CellContext`p1]]], 
            10^9 + $CellContext`distFun[$CellContext`p1, $CellContext`p2], 
            $CellContext`distFun[$CellContext`p1, $CellContext`p2]]; \
$CellContext`pairsDistTable = Table[
            $CellContext`constrainFun[
             Part[$CellContext`pts, $CellContext`j], 
             
             Part[$CellContext`pts, $CellContext`k]], {$CellContext`j, \
$CellContext`n}, {$CellContext`k, $CellContext`n}]; $CellContext`pairsDist[
            Pattern[$CellContext`j, 
             Blank[]], 
            Pattern[$CellContext`k, 
             Blank[]]] := Part[$CellContext`pairsDistTable, 
            Part[$CellContext`tour, $CellContext`j], 
            Part[$CellContext`tour, $CellContext`k]]; $CellContext`tourLength[
            Pattern[$CellContext`l, 
             Blank[]]] := Sum[
            Part[$CellContext`pairsDistTable, 
             Part[$CellContext`l, $CellContext`i], 
             Part[$CellContext`l, $CellContext`i + 1]], {$CellContext`i, 
             Length[$CellContext`l] - 
             1}]; $CellContext`len = \
$CellContext`tourLength[$CellContext`tour]; $CellContext`triples = Subsets[
            Range[$CellContext`n], {3}]; 
         While[$CellContext`changed, $CellContext`changed = False; 
           Do[$CellContext`tuple = 
              Part[$CellContext`triples, $CellContext`j]; $CellContext`loss = 
              Sum[
                $CellContext`pairsDist[
                 Part[$CellContext`tuple, $CellContext`k], 
                 Part[$CellContext`tuple, $CellContext`k] + 
                 1], {$CellContext`k, 
                 3}]; $CellContext`c1 = $CellContext`pairsDist[
                 Part[$CellContext`tuple, 1], 
                 Part[$CellContext`tuple, 2]] + $CellContext`pairsDist[
                Part[$CellContext`tuple, 1] + 1, 
                 Part[$CellContext`tuple, 3]] + $CellContext`pairsDist[
                Part[$CellContext`tuple, 2] + 1, Part[$CellContext`tuple, 3] + 
                 1]; $CellContext`c2 = $CellContext`pairsDist[
                 Part[$CellContext`tuple, 1], Part[$CellContext`tuple, 2] + 
                 1] + $CellContext`pairsDist[
                 Part[$CellContext`tuple, 3], Part[$CellContext`tuple, 1] + 
                 1] + $CellContext`pairsDist[
                 Part[$CellContext`tuple, 2], Part[$CellContext`tuple, 3] + 
                 1]; $CellContext`c3 = $CellContext`pairsDist[
                 Part[$CellContext`tuple, 1], Part[$CellContext`tuple, 2] + 
                 1] + $CellContext`pairsDist[
                 Part[$CellContext`tuple, 3], 
                 Part[$CellContext`tuple, 2]] + $CellContext`pairsDist[
                Part[$CellContext`tuple, 1] + 1, Part[$CellContext`tuple, 3] + 
                 1]; $CellContext`c4 = $CellContext`pairsDist[
                 Part[$CellContext`tuple, 1], 
                 Part[$CellContext`tuple, 3]] + $CellContext`pairsDist[
                Part[$CellContext`tuple, 2] + 1, Part[$CellContext`tuple, 1] + 
                 1] + $CellContext`pairsDist[
                 Part[$CellContext`tuple, 2], Part[$CellContext`tuple, 3] + 
                 1]; $CellContext`gain = 
              Min[$CellContext`c1, $CellContext`c2, $CellContext`c3, \
$CellContext`c4]; 
             If[$CellContext`gain < $CellContext`loss, $CellContext`len = \
$CellContext`len - $CellContext`loss + $CellContext`gain; \
$CellContext`changed = True; 
               Which[$CellContext`gain == $CellContext`c1, $CellContext`tour = 
                 Join[
                   Part[$CellContext`tour, 
                    Span[1, 
                    Part[$CellContext`tuple, 1]]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 2], Part[$CellContext`tuple, 1] + 
                    1, -1]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3], Part[$CellContext`tuple, 2] + 
                    1, -1]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3] + 1, $CellContext`n + 
                    1]]], $CellContext`gain == $CellContext`c2, \
$CellContext`tour = Join[
                   Part[$CellContext`tour, 
                    Span[1, 
                    Part[$CellContext`tuple, 1]]], 
                   Part[$CellContext`tour, 
                    Span[Part[$CellContext`tuple, 2] + 1, 
                    Part[$CellContext`tuple, 3]]], 
                   Part[$CellContext`tour, 
                    Span[Part[$CellContext`tuple, 1] + 1, 
                    Part[$CellContext`tuple, 2]]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3] + 1, $CellContext`n + 
                    1]]], $CellContext`gain == $CellContext`c3, \
$CellContext`tour = Join[
                   Part[$CellContext`tour, 
                    Span[1, 
                    Part[$CellContext`tuple, 1]]], 
                   Part[$CellContext`tour, 
                    Span[Part[$CellContext`tuple, 2] + 1, 
                    Part[$CellContext`tuple, 3]]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 2], Part[$CellContext`tuple, 1] + 
                    1, -1]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3] + 1, $CellContext`n + 
                    1]]], $CellContext`gain == $CellContext`c4, \
$CellContext`tour = Join[
                   Part[$CellContext`tour, 
                    Span[1, 
                    Part[$CellContext`tuple, 1]]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3], Part[$CellContext`tuple, 2] + 
                    1, -1]], 
                   Part[$CellContext`tour, 
                    Span[Part[$CellContext`tuple, 1] + 1, 
                    Part[$CellContext`tuple, 2]]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3] + 1, $CellContext`n + 1]]], 
                 True, 
                 Print["trouble"]]; Null]; Null, {$CellContext`j, 
              
              Length[$CellContext`triples]}]]; {$CellContext`len, \
$CellContext`tour}]; $CellContext`ThreeOptTour = Last[
         $CellContext`threeOpt[$CellContext`groupAll, 
          GeoDistance, $CellContext`group2, $CellContext`group3]]; \
$CellContext`officialTour = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 
        15, 16, 17, 18, 19, 20, 49, 23, 21, 26, 24, 36, 52, 44, 35, 22, 32, 
        33, 27, 51, 28, 53, 45, 48, 40, 50, 25, 39, 43, 42, 38, 31, 34, 37, 
        41, 30, 29, 47, 1}; $CellContext`CountDist[
         Pattern[$CellContext`pts, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`torchOnCity, 
          Blank[]]] := NumberForm[10^(-3) Sum[
           GeoDistance[
            Part[$CellContext`pts, 
             Part[$CellContext`tour, $CellContext`i]], 
            Part[$CellContext`pts, 
             
             Part[$CellContext`tour, $CellContext`i + 
              1]]], {$CellContext`i, $CellContext`torchOnCity - 1}], {6, 
         2}]; $CellContext`greatcircleschart[{{
           Pattern[$CellContext`lon1, 
            Blank[]], 
           Pattern[$CellContext`lat1, 
            Blank[]]}, {
           Pattern[$CellContext`lon2, 
            Blank[]], 
           Pattern[$CellContext`lat2, 
            Blank[]]}}] := 
       Module[{$CellContext`places, $CellContext`L0, $CellContext`L1, \
$CellContext`L2, $CellContext`\[Phi]1, $CellContext`\[Phi]2, \
$CellContext`tani, $CellContext`sf, $CellContext`\[Phi]L, $CellContext`points = 
          20, $CellContext`distance}, 
         If[$CellContext`lat1 == $CellContext`lat2, $CellContext`lat2 = \
$CellContext`lat2 + 0.0003; 
           Null]; $CellContext`places = {{-$CellContext`lon1, \
$CellContext`lat1}, {-$CellContext`lon2, $CellContext`lat2}}; \
$CellContext`places = Sort[$CellContext`places] 2 (Pi/360); $CellContext`L1 = 
          Part[$CellContext`places, 2, 1]; $CellContext`\[Phi]1 = 
          Part[$CellContext`places, 2, 2]; $CellContext`L2 = 
          Part[$CellContext`places, 1, 1]; $CellContext`\[Phi]2 = 
          Part[$CellContext`places, 1, 2]; 
         If[$CellContext`\[Phi]1 == $CellContext`\[Phi]2, \
$CellContext`\[Phi]2 = $CellContext`\[Phi]2 + 0.0003; Null]; 
         If[$CellContext`L1 == $CellContext`L2, $CellContext`L2 = \
$CellContext`L2 + 0.0003; 
           Null]; $CellContext`L0 = (1/2) ($CellContext`L1 + $CellContext`L2 - 
            2 
            ArcCot[Cot[($CellContext`L1 - $CellContext`L2)/2] 
              Csc[$CellContext`\[Phi]1 + $CellContext`\[Phi]2] 
              Sin[$CellContext`\[Phi]1 - $CellContext`\[Phi]2]]); 
         If[$CellContext`L0 == $CellContext`L1, $CellContext`L1 = \
$CellContext`L1 + 0.0003; 
           Null]; $CellContext`tani = (-
            Csc[$CellContext`L0 - $CellContext`L1]) Tan[$CellContext`\[Phi]1]; 
         If[Abs[$CellContext`L1 - $CellContext`L2] <= 
           Pi, $CellContext`\[Phi]L = Table[{
               ArcTan[
               Sin[$CellContext`t - $CellContext`L0] $CellContext`tani], \
$CellContext`t}, {$CellContext`t, 
               Min[$CellContext`L1, $CellContext`L2], 
               Max[$CellContext`L1, $CellContext`L2], 
               Abs[Max[$CellContext`L1, $CellContext`L2] - 
                 Min[$CellContext`L1, $CellContext`L2]]/($CellContext`points - 
               1)}]; Null, $CellContext`\[Phi]L = Table[{
               ArcTan[
               Sin[$CellContext`t - $CellContext`L0] $CellContext`tani], \
$CellContext`t}, {$CellContext`t, 
               Min[$CellContext`L1, Sign[$CellContext`L1] Pi], 
               Max[$CellContext`L1, Sign[$CellContext`L1] Pi], 
               Abs[$CellContext`L1 - Sign[$CellContext`L1] 
                 Pi]/($CellContext`points/2 - 1)}]; $CellContext`\[Phi]L = 
            Join[{$CellContext`\[Phi]L}, {
               Table[{
                 ArcTan[
                 Sin[$CellContext`t - $CellContext`L0] $CellContext`tani], \
$CellContext`t}, {$CellContext`t, 
                 Min[(-Sign[$CellContext`L1]) Pi, $CellContext`L2], 
                 Max[(-Sign[$CellContext`L1]) Pi, $CellContext`L2], 
                 Abs[$CellContext`L2 + 
                   Sign[$CellContext`L1] Pi]/($CellContext`points/2 - 1)}]}]; 
           Null]; Part[
           Graphics[{
             Line[(360/(2 Pi)) $CellContext`\[Phi]L]}], 1]]; $CellContext`r = 
       6367.5; $CellContext`SCPlot[{
          Pattern[$CellContext`lat, 
           Blank[]], 
          Pattern[$CellContext`lon, 
           Blank[]]}] := $CellContext`r {
         Cos[$CellContext`lon Degree] Cos[$CellContext`lat Degree], 
          Sin[$CellContext`lon Degree] Cos[$CellContext`lat Degree], 
          Sin[$CellContext`lat Degree]}; $CellContext`centers = 
       Map[Reverse[#]& , $CellContext`allCitiesGPS]; \
$CellContext`GreatCircleArc[{
          Pattern[$CellContext`lat1, 
           Blank[]], 
          Pattern[$CellContext`lon1, 
           Blank[]]}, {
          Pattern[$CellContext`lat2, 
           Blank[]], 
          Pattern[$CellContext`lon2, 
           Blank[]]}] := 
       Module[{$CellContext`u = $CellContext`SCPlot[{$CellContext`lat1, \
$CellContext`lon1}], $CellContext`v = $CellContext`SCPlot[{$CellContext`lat2, \
$CellContext`lon2}], $CellContext`a}, $CellContext`a = 
          VectorAngle[$CellContext`u, $CellContext`v]; Table[
           Evaluate[
            
            RotationTransform[$CellContext`\[Theta], {$CellContext`u, \
$CellContext`v}][$CellContext`u]], {$CellContext`\[Theta], 
            0, $CellContext`a, $CellContext`a/Ceiling[
            10 $CellContext`a]}]]; $CellContext`TourLine[
         Pattern[$CellContext`rou, 
          Blank[]]] := Apply[$CellContext`GreatCircleArc, 
         Partition[
          Part[$CellContext`centers, $CellContext`rou], 2, 1], {
         1}]; $CellContext`rasterdata = N[First[
           First[
            Graphics[
             Raster[CompressedData["
1:eJzsvQV0VFm+N3rXs/Xeet93504PlpScVRojEDQEhwAB4q7l7paqVKWSVCWp
irtCCAR3SIi7u7sRg6CLQAu9uqGRvF1Jdw/dQzMt9DD3rS/rR3FKzj777N9f
tx0UVeRG/d//4z/+wwX8ywP/DMcP5yYfzE48uHP7/tzkMh7duQ3w8O4UOH44
P/74/uSjexPg4P6d0cd3pwDAtwvzkwt3Jx7Njj6eG3s8O/oEvM6NPbkzDj5/
9nAa4PNHM4/uzz1+cGf53Pn5sacPZhbuTRlwf/rpo7vLWHg4/+zx/YUHd588
nHswP/X43gzAwoO5hYd3Pn9y78n92ceP7i08ebDw5P7CwoNnD+YBQJkLj+89
vDcLDgyv9+8uf2LAo3mAp0/uP3l499nCA8PV7889fHD33vwsKAoUC24KANzs
vdmJZdydHgNvl2G436Vv3329Mzl49/YQwP2ZUfD6cG783vTIg9kx8Hbpk4H7
M8P3poce3Rl7MDtyb25kfnb4+9dZcBVQJmjGKfAJAGhAA8DbHz6fn5kEWH67
fPxwbhSUA0q+Nzd2/874g7sT4IrgcvfuTM3PgUpOLxe7XNsf7wJgfmYcnH53
GlA5/XCJREBreXXd2Pjk+PDAzG3Dpe/MjJzMPZuWmt3cORoRcyo7Oy839/Ll
4sasU1dUoTGTt2cnJmc6u/q6uvtHRiera+oqq2pKymuGhkYGhidGxoYHhwf6
+3t7e7tbWprqaisBWprrOztaZqYnFp48evzowdzsdH9fz8joAPhRR0dHW0d7
e2dHR09v//BYRUNzYWXNpYKKvMv5F/NLL98qraqrLyqrLKuqLamq6Ojs7hvo
Hxweauvs6+3sGB8bGR0ZmpmdHBnuA1ccHOzv6+trbW3t7Gzv6W3v72ltbaru
6W7r7Gju7WkfHenv7+tsbalvbKptaKyprausr6syVK+uDKC+vryxoRqgobai
pbGmuaEaoKm+qqm+YhntLbWgNPBha1NtfX1tY2N9Q1Njc2tLa3tbfWNDU1MD
uNmmlsaWtmbwCcDyTYGaABhucQldXR1d4G17a093e1cn+FUTaJb2tkYAcNDR
3tze0dzS2gDK6ehq7+wCP2sDNQfo624bHuge7Gkb6m2fGOkGGBvsBu03OtAz
PT4IPpwc6Rsd6gU/a2xr6h3t6u3tB21VVFZeWVvX1jHCCEpWhSedvVqSe+pG
fFJedVVHT/dkXdtwXdftjpE7p69X596oOX6pWJd56dT1sovFdYX1XZdLGy4U
1TZ2j9e2D5e39FY1d90qra6uay4sqSwor7pWVAqYqmlsKa2qLauuq28BN9UM
7quttRncYG9PV3dPe3d3d09PT/6tgivXrlbXN9Q0NFc2ttS0tFfUt569Vniz
rPb89bLrhbXldW3VTV1N7d3N7V2gRfoHB/qHh8Dt9/f3D4C/4Yn+gZHxiemB
wdHR0fHOTlBqd29f5/DgUEdbe0sLaNWu4uLCgoKb+QXXCm5dr64orqksaayr
bK6rMqC+eBktDeVtTZUtdbcaqm40Vd5qrioEr031ZQD11UXN9WXg2+YGA6oq
SyorikGZt27lA1RVVQCuAb+AlMbmhsbmJkA3oN7w2lAHUFdXU1tbDQAO6sBB
TVV1VVlVZWllRUltTQX4D7wBTQRQUVFVV9dQV9vU3NTe3FIPWgyQDsSguwuw
3DHQa8BQf8fwQCfgemCgbWCgY3io1yDbfZ3hkSn6qGORsVeiUq7U1jXX1LeA
Fqura8uvaiutqL1Z3ni1pKqmvq2ytq20pqmqsR3Qd+pW2flbZWfzy09eKrhc
UHTm4pUzly6dvnjx0o0b4ODyzZtXi0svFxbfrKgpqawpb+yubG6paGpuaWsF
otvU0gzEta2tBYg6EODmprqB/i5QjWVt6uhsMXzX0lJVU11WUX6rpPRWSfmN
kvL8wrLiiuqCkor84nJQcurZq2duVIXFHTt1oeTC1Zvgx7eKCkvK6zSxmYFR
GSlnC64UApkCzV18o/B64a2y2pom0ESgSZuaa5tb6to7Wyqryzo6e1tagaq0
gPYvKKkCJ+QXV14vqbxWXHGttADgVmlhQXFJflFxflHpTVB8WRFofICW2mID
qosAWmuKm6oLGyoLAMCHtRVFdZXF9VUGggC/1dWV1bVVdQ21y8wCikEjAHVu
bW1eussmg2o3NTQ31TY11jQ11jY21IATgeloa66pqSwC4lFWVlLfUNXV3Wqg
bBjIfXtLcyNAZ0dbD9CF7k6gFN1dHYBuwDU4AEoKanvqfCGDp0o7dvHUqYtR
0Qn5hQ03S2pulTUVVTZfK6y+VtE8MNQPzOnQyPD45AQwekA1uvoGAYCQlZaX
FZdXlQLi6psqQDNVVReWlgEAlS+vrikDRrepraG1s3tgpLNvqLt/qKUDWKIO
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
skZbsu/0XWqoSRntPLswXvBg6MriveonY9cf9Jx/+0XT4uvuxcXbbxenFxfv
fXGn/Ml4wcv5yle3S14v1L8ZK3oxcKOtNn1y9EpYuBJvYd9TfmLxy95v7tQv
zNYgYWQcigeuhcf8XU2WOmOZpia0/NOxrYXJV88fgxkHmOK+FwOQyGzd4Wtt
46aMt4k85ph7mpGZR5VG74eMRMCILf8GYcSIyLWFMG4olPsv3ePH9aeA2Y+y
5hQBp9r7EaS67WzddmHsToZmr7uQsBpn6NzGQSwUmmGCl6IREhD8w1ZT0CgW
Bu8M5NDK6jfMdQStvc5CbGHGBuQiYEyxIOHLgcsL3Rdnu89/MVny3b2qxaf1
LyeKXt6teD1Tvvhi+MXLgVeLU68Wb3/9fGbxZderhYbF79pePql49XUrIHdx
suzZROXCeI2RsR9JKBmrPb34eefbJ21f3G1TSPSIv/nA19CNjd5NtJmA3wBf
asV5eW9lZuH14M/+kwphv+cCbkT0oYirWnUyrVVomp0m1iHnkijimLMJRgCH
kZYpAw6Lp1/LVDr9qQvfcCD9QRraCodmoEDK/Hv7QICxRSBJCIjPjNwn0tnE
ZXlFR3subw1kJ3QmhXy29Yi3GdoTGCucMWk/n8cKdfLyiELjXD7CtC4EOeZW
9Kv71U+Grrx53fvqq7a3iyOLb8a+nK58udD89mnD26/aFxcHFr/r/+arls/n
axa/6VxcqF182vjm2/bFb3oWXw69/rrvy3sNo02F7o6imZ78xYXuxa+6Fl8O
LL7qfXWnfvHto+MnjkHGBAjyXaYGuYq3aY9vQb7m5jnFsWzK1avK03mcrGOc
v34GghypJV6hiD9UXhGqjj8aluUgijvIibSxc/FmxBzYcRRICB+NCViz2h+J
oOFxHPyfMMXlXVJQy6EagoxGkCxNflX+/h6sZkIriOD2JfpD7eXZYeGHs67y
ljcfQxoJjGE8GMQhRhCdI7yjs1wt3dkYGNt8rcIYR/vj5EIwVkdX++JC1/PZ
6sWv2haf1L+sz3sxfHPxacviy/7vnrS//qL15YuO76aLFp/UvP1mePFp85e3
C98u1C8+aVhcHP3mUcu94cL5yQ6VMKH2ZvaLB92vHnS8+bz71Zc9r99OvJqu
ej5V+WSm9OndRsNue0v+ThSUVFmsu1WgK7+uK7kemZPHKStJLi9OzbxKSrvC
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
              "], {{0, 0}, {159., 80.}}, {0, 255}, ColorFunction -> RGBColor],
              ImageSize -> {98., 49.}, PlotRange -> {{0, 159.}, {0, 80.}}]]]/
         255, 4]; $CellContext`earth[
         Pattern[$CellContext`rasterdata, 
          Blank[]], 
         Pattern[$CellContext`resolution, 
          Blank[]]] := 
       Module[{$CellContext`size, $CellContext`coords, \
$CellContext`MakePointSet, $CellContext`redpts, $CellContext`redfnpts, \
$CellContext`redfun, $CellContext`grnpts, $CellContext`greenfnpts, \
$CellContext`greenfun, $CellContext`blupts, $CellContext`bluefnpts, \
$CellContext`bluefun, $CellContext`r, $CellContext`planetdraft, \
$CellContext`planet}, $CellContext`size = 
          Dimensions[$CellContext`rasterdata]; $CellContext`coords = N[
            
            Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, 0, 2 Pi, 
              2 (Pi/(Part[$CellContext`size, 2] - 1))}, {$CellContext`j, 0, 
              Pi, Pi/(Part[$CellContext`size, 1] - 1)}], 
            4]; $CellContext`MakePointSet[
            Pattern[$CellContext`lis1, 
             Blank[List]], 
            Pattern[$CellContext`lis2, 
             Blank[List]]] := Map[MapThread[Append, #]& , 
            MapThread[
            List, {$CellContext`lis1, $CellContext`lis2}]]; \
{$CellContext`redpts, $CellContext`grnpts, $CellContext`blupts} = 
          Map[Partition[#, 
             Part[$CellContext`size, 1]]& , 
            Transpose[
             Flatten[
              Transpose[$CellContext`rasterdata], 
              1]]]; {$CellContext`redfnpts, $CellContext`greenfnpts, \
$CellContext`bluefnpts} = 
          Map[$CellContext`MakePointSet[$CellContext`coords, #]& , \
{$CellContext`redpts, $CellContext`grnpts, $CellContext`blupts}]; \
{$CellContext`redfun, $CellContext`greenfun, $CellContext`bluefun} = 
          Map[Interpolation[
             Flatten[#, 1], InterpolationOrder -> 
             1]& , {$CellContext`redfnpts, $CellContext`greenfnpts, \
$CellContext`bluefnpts}]; $CellContext`r = 6367.5; 
         SeedRandom[12345]; $CellContext`stars = 3.5 $CellContext`r Table[
             ({Cos[#] Sqrt[1 - #2^2], Sin[#] Sqrt[1 - #2^2], #2}& )[
              RandomReal[{0, 2 Pi}], 
              RandomReal[{-1, 1}]], {50}]; $CellContext`planetdraft := 
          ParametricPlot3D[
           0.99 $CellContext`r {
             Cos[$CellContext`theta] Sin[$CellContext`p], 
              Sin[$CellContext`theta] Sin[$CellContext`p], -
              Cos[$CellContext`p]}, {$CellContext`theta, 0, 2 
             Pi}, {$CellContext`p, 0, Pi}, Mesh -> 6, MaxRecursion -> 0, 
            BoundaryStyle -> Black, PerformanceGoal -> 
            "Speed"]; $CellContext`planet = 
          ParametricPlot3D[
           0.99 $CellContext`r {
             Cos[$CellContext`theta] Sin[$CellContext`p], 
              Sin[$CellContext`theta] Sin[$CellContext`p], -
              Cos[$CellContext`p]}, {$CellContext`theta, 0, 2 
             Pi}, {$CellContext`p, 0, Pi}, Mesh -> None, 
            ColorFunction -> (RGBColor[
              $CellContext`redfun[#4, #5], 
              $CellContext`greenfun[#4, #5], 
              $CellContext`bluefun[#4, #5]]& ), ColorFunctionScaling -> False,
             PlotPoints -> $CellContext`resolution, MaxRecursion -> 0]; 
         GeometricTransformation[
           ControlActive[
            Part[$CellContext`planetdraft, 1], 
            Part[$CellContext`planet, 1]], 
           RotationTransform[180 Degree, {0, 0, 1}]]]; Null); 
     Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->46535302],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`method$$ = 
    "ThreeOpt", $CellContext`TorchOnCity$$ = 54, $CellContext`view$$ = 
    "2D China", Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`method$$], "ThreeOpt", "tour option"}, {
      "ThreeOpt", "TwoOpt", "OrOpt", "CCA", "OrZweig", "Official"}}, {{
       Hold[$CellContext`view$$], "2D China", "model maps"}, {
      "2D world", "2D China", "3D world", "3D Earth"}}, {{
       Hold[$CellContext`TorchOnCity$$], 54, "cities along path"}, 1, 
      Dynamic[
       If[$CellContext`method$$ === "Official", 53, 54]], 1}}, 
    Typeset`size$$ = {510., {143., 147.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`method$384923$$ = 0, $CellContext`view$384924$$ = 
    0, $CellContext`TorchOnCity$384925$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`method$$ = 
        "ThreeOpt", $CellContext`TorchOnCity$$ = 54, $CellContext`view$$ = 
        "2D China"}, "ControllerVariables" :> {
        Hold[$CellContext`method$$, $CellContext`method$384923$$, 0], 
        Hold[$CellContext`view$$, $CellContext`view$384924$$, 0], 
        Hold[$CellContext`TorchOnCity$$, $CellContext`TorchOnCity$384925$$, 
         0]}, "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`result$, $CellContext`route$, $CellContext`steps$, \
$CellContext`map2D$, $CellContext`map3D$}, $CellContext`result$ = 
         Switch[$CellContext`method$$, "ThreeOpt", $CellContext`ThreeOptTour, 
           "TwoOpt", $CellContext`TwoOptTour, "OrOpt", $CellContext`OrOptTour,
            "CCA", $CellContext`CCATour, "OrZweig", $CellContext`OrZweigTour, 
           "Official", $CellContext`officialTour]; $CellContext`route$ = 
         If[Part[$CellContext`result$, 2] < 20, $CellContext`result$, 
           Reverse[$CellContext`result$]]; $CellContext`steps$ = 
         Part[$CellContext`allCitiesGPS, $CellContext`route$]; \
$CellContext`map2D$ = Graphics[{LightGreen, 
            EdgeForm[Gray], 
            If[$CellContext`view$$ == "2D world", 
             Map[CountryData[#, "SchematicPolygon"]& , 
              CountryData[]], 
             Map[CountryData[#, "SchematicPolygon"]& , 
              CountryData["Asia"]]], LightPink, 
            Map[
            CountryData[#, "SchematicPolygon"]& , {
             "China", "HongKong", "Macau", "Taiwan"}], 
            Text[
             Style["Beijing", Bold, Red], {116.5, 42}], 
            Map[Text[
              Style["\[Neptune]", 
               RGBColor[1, 0.47, 0]], #]& , 
             Take[$CellContext`steps$, $CellContext`TorchOnCity$$]], 
            ColorData[1, 1], 
            Dashing[0.005], 
            Thickness[0.003], 
            GeometricTransformation[
             Map[$CellContext`greatcircleschart, 
              Table[
               Take[
                Take[
                 Take[$CellContext`steps$, $CellContext`TorchOnCity$$], 
                 Length[
                  
                  Take[$CellContext`steps$, $CellContext`TorchOnCity$$]]], \
{$CellContext`i, $CellContext`i + 1}], {$CellContext`i, 1, Length[
                  Take[$CellContext`steps$, $CellContext`TorchOnCity$$]] - 
                1}]], 
             RotationTransform[90 Degree, {0, 0}]], 
            Opacity[0.05], 
            PointSize[Medium], 
            Table[
             Tooltip[
              Point[
               Part[$CellContext`allCitiesGPS, $CellContext`k]], 
              Row[{
                Part[
                 Part[$CellContext`allCities, $CellContext`k], 3], ", ", 
                Part[
                 Part[$CellContext`allCities, $CellContext`k], 
                 4]}]], {$CellContext`k, 1, 
              Length[$CellContext`allCities]}]}, PlotRange -> 
           If[$CellContext`view$$ == "2D world", {{-180, 180}, {-90, 90}}, {{
             40, 160}, {-2, 58}}], ImageSize -> {510, 290}, Frame -> True, 
           FrameTicks -> {{
              Table[45 $CellContext`i, {$CellContext`i, -2, 2}], None}, {
              Table[45 $CellContext`i, {$CellContext`i, -4, 4}], None}}, 
           Prolog -> Raster[
             
             Table[$CellContext`i, {$CellContext`i, 100}, {$CellContext`j, 
               100}], {
              Scaled[{0, 0}], 
              Scaled[{1, 1}]}, {1, 100}, 
             ColorFunction -> (Blend[{LightBlue, White}, #]& )], PlotLabel -> 
           Style[
             Grid[{{
                $CellContext`CountDist[$CellContext`groupAll, \
$CellContext`route$, $CellContext`TorchOnCity$$], "km   total distance "}}, 
              Alignment -> {Right, Left}], Italic, 21]]; $CellContext`map3D$ = 
         Graphics3D[{
            If[$CellContext`view$$ == "3D world", {
              Sphere[{0, 0, 0}, 0.99 $CellContext`r], 
              Map[Line[
                Map[$CellContext`SCPlot, 
                 CountryData[#, "SchematicCoordinates"], {-2}]]& , 
               CountryData[]]}, 
             $CellContext`earth[$CellContext`rasterdata, 100]], Red, Thick, 
            Line[
             $CellContext`TourLine[
              Take[$CellContext`route$, $CellContext`TorchOnCity$$]]], Yellow, 
            PointSize[Medium], 
            Map[Tooltip[
              Point[
               $CellContext`SCPlot[#]], #]& , 
             Map[Reverse[#]& , 
              Take[$CellContext`steps$, $CellContext`TorchOnCity$$]]], White, 
            PointSize[0.001], 
            Point[$CellContext`stars]}, Background -> 
           If[$CellContext`view$$ == "3D world", LightGray, Black], Lighting -> 
           If[$CellContext`view$$ == "3D world", Automatic, "Neutral"], Boxed -> 
           False, SphericalRegion -> True, ImageSize -> {510, 290}, 
           ViewPoint -> {0, 0.75, 0.5}]; Show[
          If[
           
           Or[$CellContext`view$$ == "2D world", $CellContext`view$$ == 
            "2D China"], $CellContext`map2D$, $CellContext`map3D$]]], 
      "Specifications" :> {{{$CellContext`method$$, "ThreeOpt", 
          "tour option"}, {
         "ThreeOpt", "TwoOpt", "OrOpt", "CCA", "OrZweig", "Official"}, 
         ControlType -> Setter}, 
        Delimiter, {{$CellContext`view$$, "2D China", "model maps"}, {
         "2D world", "2D China", "3D world", "3D Earth"}, ControlType -> 
         Setter}, {{$CellContext`TorchOnCity$$, 54, "cities along path"}, 1, 
         Dynamic[
          If[$CellContext`method$$ === "Official", 53, 54]], 1, Appearance -> 
         "Labeled"}}, 
      "Options" :> {
       ControlPlacement -> Top, 
        TrackedSymbols :> {$CellContext`method$$, $CellContext`view$$, \
$CellContext`TorchOnCity$$}, SynchronousUpdating -> False, 
        SynchronousInitialization -> False, 
        AutorunSequencing -> {1, 2, {3, 25}}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{559., {221., 226.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>(($CellContext`holdingCity = {{
         116.4, 39.93, "Beijing", 
          "China"}}; $CellContext`internationalCities = {{
         76.92, 43.32, "Almaty", "Kazakhstan"}, {
         29., 41.1, "Istanbul", "Turkish"}, {
         30.32, 59.93, "Saint Petersburg", "Russia"}, {-0.12, 51.5, "London", 
          "United Kingdom"}, {
         2.34, 48.86, "Paris", "France"}, {-122.44, 37.76, "San Francisco", 
          "United States"}, {-58.37, -34.61, "Buenos Aires", "Argentina"}, {
         39.28, -6.82, "Dar es Salaam", "Tanzania"}, {
         58.54, 23.61, "Muscat", "Oman"}, {
         73.06, 33.72, "Islamabad", "Pakistan"}, {
         77.21, 28.67, "Delhi", "India"}, {
         100.5, 13.73, "Bangkok", "Thailand"}, {
         101.71, 3.16, "Kuala Lumpur", "Malaysia"}, {
         106.83, -6.18, "Jakarta", "Indonesia"}, {
         149.22, -35.28, "Canberra", "Australia"}, {
         136.91, 35.15, "Nagoya", "Japan"}, {
         127., 37.57, "Seoul", "South Korea"}, {
         125.75, 39.02, "Pyongyang", "North Korea "}, {
         106.69, 10.78, "Ho Chi Minh City", 
          "Vietnam"}}; $CellContext`chinaCities = {{
         110.32, 20.05, "Haikou", "China"}, {
         117.28, 31.85, "Hefei", "China"}, {113.55, 22.2, "Macau", "China"}, {
         119.3, 26.08, "Fuzhou", "China"}, {
         103.68, 36.05, "Lanzhou", "China"}, {
         113.25, 23.12, "Guangzhou", "China"}, {
         108.32, 22.82, "Nanning", "China"}, {
         106.72, 26.58, "Guiyang", "China"}, {
         114.48, 38.05, "Shijiazhuang", "China"}, {
         113.67, 34.75, "Zhengzhou", "China"}, {
         126.65, 45.75, "Harbin", "China"}, {
         114.27, 30.58, "Wuhan", "China"}, {
         112.97, 28.2, "Changsha", "China"}, {
         125.35, 43.87, "Changchun", "China"}, {
         118.78, 32.05, "Nanjing", "China"}, {
         115.88, 28.68, "Nanchang", "China"}, {
         123.45, 41.8, "Shenyang", "China"}, {
         111.64, 40.82, "Hohhot", "China"}, {
         106.27, 38.47, "Yingchua", "China"}, {
         101.77, 36.62, "Xining", "China"}, {117., 36.67, "Jinan", "China"}, {
         112.55, 37.87, "Taiyuan", "China"}, {
         108.9, 34.27, "Xian", "China"}, {
         121.47, 31.23, "Shanghai", "China"}, {
         104.07, 30.67, "Chengdu", "China"}, {
         121.45, 25.02, "Taibei", "China"}, {
         117.2, 39.13, "Tianjin", "China"}, {91., 29.6, "Lasa", "China"}, {
         114.15, 22.28, "Hongkong", "China"}, {
         87.58, 43.8, "Urumqi", "China"}, {
         102.7, 25.05, "Kunming", "China"}, {
         120.17, 30.25, "Hangzhou", "China"}, {
         106.58, 29.57, "Chongqing", "China"}}; $CellContext`allCities = 
       Flatten[{$CellContext`holdingCity, $CellContext`internationalCities, \
$CellContext`chinaCities}, 
         1]; {$CellContext`holdingCityGPS, \
$CellContext`internationalCitiesGPS, $CellContext`chinaCitiesGPS} = 
       Map[Take[#, All, 
          2]& , {$CellContext`holdingCity, $CellContext`internationalCities, \
$CellContext`chinaCities}]; $CellContext`allCitiesGPS = 
       Flatten[{$CellContext`holdingCityGPS, \
$CellContext`internationalCitiesGPS, $CellContext`chinaCitiesGPS}, 
         1]; {$CellContext`group1, $CellContext`group2, $CellContext`group3} = 
       Map[Map[Reverse, #]& , {$CellContext`holdingCityGPS, \
$CellContext`internationalCitiesGPS, $CellContext`chinaCitiesGPS}]; \
$CellContext`groupAll = 
       Flatten[{$CellContext`group1, $CellContext`group2, \
$CellContext`group3}, 1]; $CellContext`solver[
         Pattern[$CellContext`pts, 
          Blank[List]], 
         Pattern[$CellContext`method, 
          Blank[]], 
         Pattern[$CellContext`distFun, 
          Blank[]], 
         Pattern[$CellContext`group1, 
          Blank[]], 
         Pattern[$CellContext`group2, 
          Blank[]]] := 
       Module[{$CellContext`dist, $CellContext`tour, \
$CellContext`constrainFun}, $CellContext`constrainFun = If[
            Or[
             And[
              MemberQ[$CellContext`group1, #], 
              MemberQ[$CellContext`group2, #2]], 
             And[
              MemberQ[$CellContext`group1, #2], 
              MemberQ[$CellContext`group2, #]]], $CellContext`distFun[#, #2] + 
            10^9, 
            $CellContext`distFun[#, #2]]& ; {$CellContext`dist, \
$CellContext`tour} = Quiet[
            FindShortestTour[
             N[$CellContext`pts], Method -> $CellContext`method, 
             DistanceFunction -> $CellContext`constrainFun]]; 
         Append[$CellContext`tour, 
           First[$CellContext`tour]]]; $CellContext`methods = {
        "TwoOpt", "OrOpt", "CCA", 
         "OrZweig"}; {$CellContext`TwoOptTour, $CellContext`OrOptTour, \
$CellContext`CCATour, $CellContext`OrZweigTour} = 
       Map[$CellContext`solver[$CellContext`groupAll, #, 
          GeoDistance, $CellContext`group2, $CellContext`group3]& , \
$CellContext`methods]; $CellContext`threeOpt[
         Pattern[$CellContext`pts, 
          Blank[List]], 
         Pattern[$CellContext`distFunction, 
          Blank[]], 
         Pattern[$CellContext`group1, 
          Blank[]], 
         Pattern[$CellContext`group2, 
          Blank[]]] := 
       Module[{$CellContext`n = 
          Length[$CellContext`pts], $CellContext`randInit, $CellContext`tour, \
$CellContext`distFun, $CellContext`constrainFun, $CellContext`pairsDistTable, \
$CellContext`pairsDist, $CellContext`tourLength, $CellContext`len, \
$CellContext`adjacencyList, $CellContext`triples, $CellContext`changed = 
          True, $CellContext`tuple, $CellContext`loss, $CellContext`gain, \
$CellContext`c1, $CellContext`c2, $CellContext`c3, $CellContext`c4}, 
         SeedRandom[321]; $CellContext`randInit[
            Pattern[$CellContext`k, 
             Blank[]]] := Flatten[{1, RandomSample[
               Range[$CellContext`k - 1]] + 1, 
             1}]; $CellContext`tour = $CellContext`randInit[$CellContext`n]; \
$CellContext`distFun[
            Pattern[$CellContext`p1, 
             Blank[]], 
            Pattern[$CellContext`p2, 
             
             Blank[]]] := $CellContext`distFunction[$CellContext`p1, \
$CellContext`p2]; $CellContext`constrainFun[
            Pattern[$CellContext`p1, 
             Blank[]], 
            Pattern[$CellContext`p2, 
             Blank[]]] := If[
            Or[
             And[
              MemberQ[$CellContext`group1, $CellContext`p1], 
              MemberQ[$CellContext`group2, $CellContext`p2]], 
             And[
              MemberQ[$CellContext`group1, $CellContext`p2], 
              MemberQ[$CellContext`group2, $CellContext`p1]]], 
            10^9 + $CellContext`distFun[$CellContext`p1, $CellContext`p2], 
            $CellContext`distFun[$CellContext`p1, $CellContext`p2]]; \
$CellContext`pairsDistTable = Table[
            $CellContext`constrainFun[
             Part[$CellContext`pts, $CellContext`j], 
             
             Part[$CellContext`pts, $CellContext`k]], {$CellContext`j, \
$CellContext`n}, {$CellContext`k, $CellContext`n}]; $CellContext`pairsDist[
            Pattern[$CellContext`j, 
             Blank[]], 
            Pattern[$CellContext`k, 
             Blank[]]] := Part[$CellContext`pairsDistTable, 
            Part[$CellContext`tour, $CellContext`j], 
            Part[$CellContext`tour, $CellContext`k]]; $CellContext`tourLength[
            Pattern[$CellContext`l, 
             Blank[]]] := Sum[
            Part[$CellContext`pairsDistTable, 
             Part[$CellContext`l, $CellContext`i], 
             Part[$CellContext`l, $CellContext`i + 1]], {$CellContext`i, 
             Length[$CellContext`l] - 
             1}]; $CellContext`len = \
$CellContext`tourLength[$CellContext`tour]; $CellContext`triples = Subsets[
            Range[$CellContext`n], {3}]; 
         While[$CellContext`changed, $CellContext`changed = False; 
           Do[$CellContext`tuple = 
              Part[$CellContext`triples, $CellContext`j]; $CellContext`loss = 
              Sum[
                $CellContext`pairsDist[
                 Part[$CellContext`tuple, $CellContext`k], 
                 Part[$CellContext`tuple, $CellContext`k] + 
                 1], {$CellContext`k, 
                 3}]; $CellContext`c1 = $CellContext`pairsDist[
                 Part[$CellContext`tuple, 1], 
                 Part[$CellContext`tuple, 2]] + $CellContext`pairsDist[
                Part[$CellContext`tuple, 1] + 1, 
                 Part[$CellContext`tuple, 3]] + $CellContext`pairsDist[
                Part[$CellContext`tuple, 2] + 1, Part[$CellContext`tuple, 3] + 
                 1]; $CellContext`c2 = $CellContext`pairsDist[
                 Part[$CellContext`tuple, 1], Part[$CellContext`tuple, 2] + 
                 1] + $CellContext`pairsDist[
                 Part[$CellContext`tuple, 3], Part[$CellContext`tuple, 1] + 
                 1] + $CellContext`pairsDist[
                 Part[$CellContext`tuple, 2], Part[$CellContext`tuple, 3] + 
                 1]; $CellContext`c3 = $CellContext`pairsDist[
                 Part[$CellContext`tuple, 1], Part[$CellContext`tuple, 2] + 
                 1] + $CellContext`pairsDist[
                 Part[$CellContext`tuple, 3], 
                 Part[$CellContext`tuple, 2]] + $CellContext`pairsDist[
                Part[$CellContext`tuple, 1] + 1, Part[$CellContext`tuple, 3] + 
                 1]; $CellContext`c4 = $CellContext`pairsDist[
                 Part[$CellContext`tuple, 1], 
                 Part[$CellContext`tuple, 3]] + $CellContext`pairsDist[
                Part[$CellContext`tuple, 2] + 1, Part[$CellContext`tuple, 1] + 
                 1] + $CellContext`pairsDist[
                 Part[$CellContext`tuple, 2], Part[$CellContext`tuple, 3] + 
                 1]; $CellContext`gain = 
              Min[$CellContext`c1, $CellContext`c2, $CellContext`c3, \
$CellContext`c4]; 
             If[$CellContext`gain < $CellContext`loss, $CellContext`len = \
$CellContext`len - $CellContext`loss + $CellContext`gain; \
$CellContext`changed = True; 
               Which[$CellContext`gain == $CellContext`c1, $CellContext`tour = 
                 Join[
                   Part[$CellContext`tour, 
                    Span[1, 
                    Part[$CellContext`tuple, 1]]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 2], Part[$CellContext`tuple, 1] + 
                    1, -1]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3], Part[$CellContext`tuple, 2] + 
                    1, -1]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3] + 1, $CellContext`n + 
                    1]]], $CellContext`gain == $CellContext`c2, \
$CellContext`tour = Join[
                   Part[$CellContext`tour, 
                    Span[1, 
                    Part[$CellContext`tuple, 1]]], 
                   Part[$CellContext`tour, 
                    Span[Part[$CellContext`tuple, 2] + 1, 
                    Part[$CellContext`tuple, 3]]], 
                   Part[$CellContext`tour, 
                    Span[Part[$CellContext`tuple, 1] + 1, 
                    Part[$CellContext`tuple, 2]]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3] + 1, $CellContext`n + 
                    1]]], $CellContext`gain == $CellContext`c3, \
$CellContext`tour = Join[
                   Part[$CellContext`tour, 
                    Span[1, 
                    Part[$CellContext`tuple, 1]]], 
                   Part[$CellContext`tour, 
                    Span[Part[$CellContext`tuple, 2] + 1, 
                    Part[$CellContext`tuple, 3]]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 2], Part[$CellContext`tuple, 1] + 
                    1, -1]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3] + 1, $CellContext`n + 
                    1]]], $CellContext`gain == $CellContext`c4, \
$CellContext`tour = Join[
                   Part[$CellContext`tour, 
                    Span[1, 
                    Part[$CellContext`tuple, 1]]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3], Part[$CellContext`tuple, 2] + 
                    1, -1]], 
                   Part[$CellContext`tour, 
                    Span[Part[$CellContext`tuple, 1] + 1, 
                    Part[$CellContext`tuple, 2]]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3] + 1, $CellContext`n + 1]]], 
                 True, 
                 Print["trouble"]]; Null]; Null, {$CellContext`j, 
              
              Length[$CellContext`triples]}]]; {$CellContext`len, \
$CellContext`tour}]; $CellContext`ThreeOptTour = Last[
         $CellContext`threeOpt[$CellContext`groupAll, 
          GeoDistance, $CellContext`group2, $CellContext`group3]]; \
$CellContext`officialTour = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 
        15, 16, 17, 18, 19, 20, 49, 23, 21, 26, 24, 36, 52, 44, 35, 22, 32, 
        33, 27, 51, 28, 53, 45, 48, 40, 50, 25, 39, 43, 42, 38, 31, 34, 37, 
        41, 30, 29, 47, 1}; $CellContext`CountDist[
         Pattern[$CellContext`pts, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`torchOnCity, 
          Blank[]]] := NumberForm[10^(-3) Sum[
           GeoDistance[
            Part[$CellContext`pts, 
             Part[$CellContext`tour, $CellContext`i]], 
            Part[$CellContext`pts, 
             
             Part[$CellContext`tour, $CellContext`i + 
              1]]], {$CellContext`i, $CellContext`torchOnCity - 1}], {6, 
         2}]; $CellContext`greatcircleschart[{{
           Pattern[$CellContext`lon1, 
            Blank[]], 
           Pattern[$CellContext`lat1, 
            Blank[]]}, {
           Pattern[$CellContext`lon2, 
            Blank[]], 
           Pattern[$CellContext`lat2, 
            Blank[]]}}] := 
       Module[{$CellContext`places, $CellContext`L0, $CellContext`L1, \
$CellContext`L2, $CellContext`\[Phi]1, $CellContext`\[Phi]2, \
$CellContext`tani, $CellContext`sf, $CellContext`\[Phi]L, $CellContext`points = 
          20, $CellContext`distance}, 
         If[$CellContext`lat1 == $CellContext`lat2, $CellContext`lat2 = \
$CellContext`lat2 + 0.0003; 
           Null]; $CellContext`places = {{-$CellContext`lon1, \
$CellContext`lat1}, {-$CellContext`lon2, $CellContext`lat2}}; \
$CellContext`places = Sort[$CellContext`places] 2 (Pi/360); $CellContext`L1 = 
          Part[$CellContext`places, 2, 1]; $CellContext`\[Phi]1 = 
          Part[$CellContext`places, 2, 2]; $CellContext`L2 = 
          Part[$CellContext`places, 1, 1]; $CellContext`\[Phi]2 = 
          Part[$CellContext`places, 1, 2]; 
         If[$CellContext`\[Phi]1 == $CellContext`\[Phi]2, \
$CellContext`\[Phi]2 = $CellContext`\[Phi]2 + 0.0003; Null]; 
         If[$CellContext`L1 == $CellContext`L2, $CellContext`L2 = \
$CellContext`L2 + 0.0003; 
           Null]; $CellContext`L0 = (1/2) ($CellContext`L1 + $CellContext`L2 - 
            2 
            ArcCot[Cot[($CellContext`L1 - $CellContext`L2)/2] 
              Csc[$CellContext`\[Phi]1 + $CellContext`\[Phi]2] 
              Sin[$CellContext`\[Phi]1 - $CellContext`\[Phi]2]]); 
         If[$CellContext`L0 == $CellContext`L1, $CellContext`L1 = \
$CellContext`L1 + 0.0003; 
           Null]; $CellContext`tani = (-
            Csc[$CellContext`L0 - $CellContext`L1]) Tan[$CellContext`\[Phi]1]; 
         If[Abs[$CellContext`L1 - $CellContext`L2] <= 
           Pi, $CellContext`\[Phi]L = Table[{
               ArcTan[
               Sin[$CellContext`t - $CellContext`L0] $CellContext`tani], \
$CellContext`t}, {$CellContext`t, 
               Min[$CellContext`L1, $CellContext`L2], 
               Max[$CellContext`L1, $CellContext`L2], 
               Abs[Max[$CellContext`L1, $CellContext`L2] - 
                 Min[$CellContext`L1, $CellContext`L2]]/($CellContext`points - 
               1)}]; Null, $CellContext`\[Phi]L = Table[{
               ArcTan[
               Sin[$CellContext`t - $CellContext`L0] $CellContext`tani], \
$CellContext`t}, {$CellContext`t, 
               Min[$CellContext`L1, Sign[$CellContext`L1] Pi], 
               Max[$CellContext`L1, Sign[$CellContext`L1] Pi], 
               Abs[$CellContext`L1 - Sign[$CellContext`L1] 
                 Pi]/($CellContext`points/2 - 1)}]; $CellContext`\[Phi]L = 
            Join[{$CellContext`\[Phi]L}, {
               Table[{
                 ArcTan[
                 Sin[$CellContext`t - $CellContext`L0] $CellContext`tani], \
$CellContext`t}, {$CellContext`t, 
                 Min[(-Sign[$CellContext`L1]) Pi, $CellContext`L2], 
                 Max[(-Sign[$CellContext`L1]) Pi, $CellContext`L2], 
                 Abs[$CellContext`L2 + 
                   Sign[$CellContext`L1] Pi]/($CellContext`points/2 - 1)}]}]; 
           Null]; Part[
           Graphics[{
             Line[(360/(2 Pi)) $CellContext`\[Phi]L]}], 1]]; $CellContext`r = 
       6367.5; $CellContext`SCPlot[{
          Pattern[$CellContext`lat, 
           Blank[]], 
          Pattern[$CellContext`lon, 
           Blank[]]}] := $CellContext`r {
         Cos[$CellContext`lon Degree] Cos[$CellContext`lat Degree], 
          Sin[$CellContext`lon Degree] Cos[$CellContext`lat Degree], 
          Sin[$CellContext`lat Degree]}; $CellContext`centers = 
       Map[Reverse[#]& , $CellContext`allCitiesGPS]; \
$CellContext`GreatCircleArc[{
          Pattern[$CellContext`lat1, 
           Blank[]], 
          Pattern[$CellContext`lon1, 
           Blank[]]}, {
          Pattern[$CellContext`lat2, 
           Blank[]], 
          Pattern[$CellContext`lon2, 
           Blank[]]}] := 
       Module[{$CellContext`u = $CellContext`SCPlot[{$CellContext`lat1, \
$CellContext`lon1}], $CellContext`v = $CellContext`SCPlot[{$CellContext`lat2, \
$CellContext`lon2}], $CellContext`a}, $CellContext`a = 
          VectorAngle[$CellContext`u, $CellContext`v]; Table[
           Evaluate[
            
            RotationTransform[$CellContext`\[Theta], {$CellContext`u, \
$CellContext`v}][$CellContext`u]], {$CellContext`\[Theta], 
            0, $CellContext`a, $CellContext`a/Ceiling[
            10 $CellContext`a]}]]; $CellContext`TourLine[
         Pattern[$CellContext`rou, 
          Blank[]]] := Apply[$CellContext`GreatCircleArc, 
         Partition[
          Part[$CellContext`centers, $CellContext`rou], 2, 1], {
         1}]; $CellContext`rasterdata = N[First[
           First[
            Graphics[
             Raster[CompressedData["
1:eJzsvQV0VFm+N3rXs/Xeet93504PlpScVRojEDQEhwAB4q7l7paqVKWSVCWp
irtCCAR3SIi7u7sRg6CLQAu9uqGRvF1Jdw/dQzMt9DD3rS/rR3FKzj777N9f
tx0UVeRG/d//4z/+wwX8ywP/DMcP5yYfzE48uHP7/tzkMh7duQ3w8O4UOH44
P/74/uSjexPg4P6d0cd3pwDAtwvzkwt3Jx7Njj6eG3s8O/oEvM6NPbkzDj5/
9nAa4PNHM4/uzz1+cGf53Pn5sacPZhbuTRlwf/rpo7vLWHg4/+zx/YUHd588
nHswP/X43gzAwoO5hYd3Pn9y78n92ceP7i08ebDw5P7CwoNnD+YBQJkLj+89
vDcLDgyv9+8uf2LAo3mAp0/uP3l499nCA8PV7889fHD33vwsKAoUC24KANzs
vdmJZdydHgNvl2G436Vv3329Mzl49/YQwP2ZUfD6cG783vTIg9kx8Hbpk4H7
M8P3poce3Rl7MDtyb25kfnb4+9dZcBVQJmjGKfAJAGhAA8DbHz6fn5kEWH67
fPxwbhSUA0q+Nzd2/874g7sT4IrgcvfuTM3PgUpOLxe7XNsf7wJgfmYcnH53
GlA5/XCJREBreXXd2Pjk+PDAzG3Dpe/MjJzMPZuWmt3cORoRcyo7Oy839/Ll
4sasU1dUoTGTt2cnJmc6u/q6uvtHRiera+oqq2pKymuGhkYGhidGxoYHhwf6
+3t7e7tbWprqaisBWprrOztaZqYnFp48evzowdzsdH9fz8joAPhRR0dHW0d7
e2dHR09v//BYRUNzYWXNpYKKvMv5F/NLL98qraqrLyqrLKuqLamq6Ojs7hvo
Hxweauvs6+3sGB8bGR0ZmpmdHBnuA1ccHOzv6+trbW3t7Gzv6W3v72ltbaru
6W7r7Gju7WkfHenv7+tsbalvbKptaKyprausr6syVK+uDKC+vryxoRqgobai
pbGmuaEaoKm+qqm+YhntLbWgNPBha1NtfX1tY2N9Q1Njc2tLa3tbfWNDU1MD
uNmmlsaWtmbwCcDyTYGaABhucQldXR1d4G17a093e1cn+FUTaJb2tkYAcNDR
3tze0dzS2gDK6ehq7+wCP2sDNQfo624bHuge7Gkb6m2fGOkGGBvsBu03OtAz
PT4IPpwc6Rsd6gU/a2xr6h3t6u3tB21VVFZeWVvX1jHCCEpWhSedvVqSe+pG
fFJedVVHT/dkXdtwXdftjpE7p69X596oOX6pWJd56dT1sovFdYX1XZdLGy4U
1TZ2j9e2D5e39FY1d90qra6uay4sqSwor7pWVAqYqmlsKa2qLauuq28BN9UM
7quttRncYG9PV3dPe3d3d09PT/6tgivXrlbXN9Q0NFc2ttS0tFfUt569Vniz
rPb89bLrhbXldW3VTV1N7d3N7V2gRfoHB/qHh8Dt9/f3D4C/4Yn+gZHxiemB
wdHR0fHOTlBqd29f5/DgUEdbe0sLaNWu4uLCgoKb+QXXCm5dr64orqksaayr
bK6rMqC+eBktDeVtTZUtdbcaqm40Vd5qrioEr031ZQD11UXN9WXg2+YGA6oq
SyorikGZt27lA1RVVQCuAb+AlMbmhsbmJkA3oN7w2lAHUFdXU1tbDQAO6sBB
TVV1VVlVZWllRUltTQX4D7wBTQRQUVFVV9dQV9vU3NTe3FIPWgyQDsSguwuw
3DHQa8BQf8fwQCfgemCgbWCgY3io1yDbfZ3hkSn6qGORsVeiUq7U1jXX1LeA
Fqura8uvaiutqL1Z3ni1pKqmvq2ytq20pqmqsR3Qd+pW2flbZWfzy09eKrhc
UHTm4pUzly6dvnjx0o0b4ODyzZtXi0svFxbfrKgpqawpb+yubG6paGpuaWsF
otvU0gzEta2tBYg6EODmprqB/i5QjWVt6uhsMXzX0lJVU11WUX6rpPRWSfmN
kvL8wrLiiuqCkor84nJQcurZq2duVIXFHTt1oeTC1Zvgx7eKCkvK6zSxmYFR
GSlnC64UApkCzV18o/B64a2y2pom0ESgSZuaa5tb6to7Wyqryzo6e1tagaq0
gPYvKKkCJ+QXV14vqbxWXHGttADgVmlhQXFJflFxflHpTVB8WRFofICW2mID
qosAWmuKm6oLGyoLAMCHtRVFdZXF9VUGggC/1dWV1bVVdQ21y8wCikEjAHVu
bW1eussmg2o3NTQ31TY11jQ11jY21IATgeloa66pqSwC4lFWVlLfUNXV3Wqg
bBjIfXtLcyNAZ0dbD9CF7k6gFN1dHYBuwDU4AEoKanvqfCGDp0o7dvHUqYtR
0Qn5hQ03S2pulTUVVTZfK6y+VtE8MNQPzOnQyPD45AQwekA1uvoGAYCQlZaX
FZdXlQLi6psqQDNVVReWlgEAlS+vrikDRrepraG1s3tgpLNvqLt/qKUDWKIO
cBetLQ3DfV0jg12jQ93dHY0drXW9Xc1A8Pp72tuawXFrb0dTa0NVU2355csX
b9y4lnk8t7ap9UZhSd6lq/HpWeExSVknz2WeOpeeey7l+Km0E6dTc8+evHwz
KTdPm5gZHZc8MDB06UppUXnh9aLrVfUVN4orL9wsO325CNjxqlrQiB0XbhZd
unb9WsH16tqK8xdOnzl78uH85J3xPlCl2+MDBuEf6R8aGVzWDgCgGsDWD/d1
jPR3jva1jfa1jPY393Y29HTUdzRWttaVtdSWttWXA4DjpdeSxqpb4LWtvhTo
dWNtSVN1cWNVUUMtMAulzTUl4Pf1FflAEoDuNzeUA3ve0drQ09kC7r2vq3G4
vw20z8RwP7CoAGPDPaBiIwO9Q33dQCu72psA+w311YB9IANtraA969uX0N3R
PDLYMzI8CIoCZjDvZOHVazVNbUMDff2D/QPARnd1twEDCSSpuroaeLGnD6ae
zE/Mzd4GFqCyoraivObM2fNT07NTU5NjYyMlpeUDg8Pjc/O9fQOt3d3t3T1t
QLw6u1o6e7r6h2tbuho7+qobWmoaW8EPDN92GBwKuBHQRKBlgDUDZq2q7Ca4
fVCr8ZH+wb5OwHJfez1oJdAgQD7KSqtKq8qAGb9eXHaxoLCkruH8tVvZp84n
Hz+RkJmbc/bCyQuXE7JPRKVmxuTkKmNTr5eWgZqcv55//mpp3rnr+pjkiqrK
azeLTl68VlRRVldVXV1eAcSv8NaNyrom4LIrGoC/bB3oab470T97e3BytAe0
7djoAPD7oIlAfcZGB6duj06MDz2YHr0/NXLv9uD87V4AQPFIb3NnUxVgE1AM
KGuoLBzpbZ2fGr47O3lnZmJqYhic3tvR2t/V3tNa295QAXQNGN5lamqrSoEX
aKgpbKorbqgubamvBA4dyHZHS2VvZ11vR0t/V9tYf/vUSM/c1ND0RP8yrcC/
z9we7u5qBbSCQkBRbW11TU1V7U01QB0MgURn00B7w1BPXUdrzUBfY1NTWX7B
5QtnTtWWFgMNAt9OjY/cnhwdHxt6fH8KA3EgOBOH5qCQDDREBzAcIzhYiIuB
eBg0G48zvJqhxas/83R1DqKQonURV+vreiYn746MdD14ODEy2t7VXTs81AeM
MVCBydn5kYmpnp6+tu6WobHR8anbt4rq6xq7Tl+7BSwAkNjJkQEQpdy7M/nw
3jTQo0f3ZwDvddUlFaX5IIwBsn17dHB8qK+ooOz+3adWa0lGf/NFI8gYmBCF
pEAIKgZiAaAQrKUaGuqJgugQRMFiWIePRNx7ODc4UN3Z1jgyMjQxMTEDrjA2
CKgEIcdwT8vEcO/4UA8ILGcmRgDA1UFLAtl+ODNiiPyn+57eGbo73n17rBvI
QF8fuInuubt3pqdvj44O9w30dgPN6GotK71VcOPyjasXyorzq8qLKspLgZUD
1hh4ImCHW1vbwYmzU2PgimPDfUCCAIAMgCoBZkHM1gBCtcaamckBEGB/8fjO
84V7L7548PqbhW+ePVjKJiYnhzqAdg/0tg32GSJDEOgCTE6MTN0emxgfBgfA
7ACNA9oEtBUEGGXlNXYHRJvWcyGMHxrng0aTkQgKABpi4jFsDARoZS5hmVwW
CiKjUCTQaFgk3QTFQmOYKIiIQlFQKA4EsZBIJtKIB1tD2mjJsN7IphATZ2a/
np+bePJk7v692ayMvLLimu62nl075Ss/8135mafxCq429iJwJXemB758evfz
hbl78zOPHt59ABKA8b7+7iYgkOPDQOPBWQ0g/OvrqJmd6OnqqquvaYdQVAhL
R6MYoDImKA4GQQN1g5AkCEHEYeh4iIlcQ8TCWQAoFAuLJ4UIU/sa+m+PtPV1
NwFDcvv20PT0yNzc+PTkyPRoLwgvQagJMDs5CgBs9d2ZkS8fzyzcGVu4O/7s
Tv+T6e5Ho+1Tgx2jPe2AGiAVEzN3ZmengR0DkjAx2gdEBUQOQ/1dwP4AY1t8
6/rZ8+dSMjKBnwXRMHCOIG4GjQ9aA6Rpc9Pj0+PDU2PAA/QAi7rML/BZIFYH
sTFQNJBbAULffLsAyH39zdPvni88X7g7PwWSr4GutloQ5gGDA8zd7fEhwOmy
PoLX6ZmJO9OT87NTdyYM6dLc1O3m5t6w0LxVf2Wg4GIsgotBkgFxgK9lQn83
gGAATUdDVNDOBiMAM8gJBKehDW8NKgZ0DQkj4yEubCUPDZdi0EDLaGgUC4mg
mZoIgHFAI9mQEQWHFCqVORO3+/sGqjraDT7o3tw0CBqtLAORMOKvrw8KSVt6
FUGQrwlGAM5lkPQN1VPAT4GEd2qya/7O8APA6f3h+QcjwJI0dLbV1FSlpGaB
aK23uaqu9EZTXf1AX9Oje/e7etuGp+99/uTZ9N0Hd+7ee/JgfimVnn2+MPfN
wvSrbx5/+/n9R3eHRwbagQonpcSfyMzsHWifmR14ODt8f3pwYXbg8/kRYMPn
JoZApgn8aX9fFwhsJianQIGz9x4OT0w1d/d1DAy3DwDLMgli/qdP73/9xcO3
33358qsnQJBAIwD9NTTFncmvni18vvDkiy+e3b07Nz4+egfkxbNThp6Ex9MP
5r/Nzjx3+XzJiv90Mv6MjYX4f5DTPwhzEz6wDxD876IFxAAJo0JGpPVrfY2N
qf29fcPDg5WV1bu3B0GQz0evAPBBAIYrIujL0ggOlj/EwOiQsceKvxzcs1OO
XCPcspVfUzf89NkXYxO937x4AqL9Z09mF+7MPro/+vjB0MP7Ew8f3x4d77k9
NWpvqzBBuKKAs8ARX7z4fGas7c5426M7wJn3DA+OTI7fnpicuf/g0eBIb9fI
WN/YZPfQxJXiypq2oepWkLxNT80vDE3eHZp6Cgh88GDmi88XJsZHQdIKAq2p
8Z5HDx7Ozd0dHOkcGpru7rkbFHw8Ke2G0Ro3mJGfKVYC7gho0Kfl9Gf6teQO
fvyQiUUBFabhkPzmxid1VZUdhiygz+iv9KX2/8hYtirgigb3DQhdervsm7BI
tilKhEUIEMYkLJqGRQtWrPQxgtkXFrRTqcKe3sGhgeFnTx5+9dVX7e2d/n4R
AYREPN4Ph6GCc3FwAdIY+DXGipVeIJt4vPBodLgdOIWJycGZ2bE783e7+5pb
huaKmsc7p+Y6hobLm/tLm7qWssj+4TuPO0Znqjt7nn753Tcvvn3x8isQP4ze
Hh4cHOzvb3/y+N63X39TUd2AMgICyQVhkvEaX9AywDCiIQrwrZ+c098ESxPa
5g3EsrImXXjBmpU+S8bf8DkOYuEMRHz6Gv5WGK/2g2Csn4r0+7FE2aev8J8H
4IWtNwSt+QvR7oBq7y4t5h1C/5veO5DP5Zr/Gn7//4u/h+7/iF9qGZgxEQTV
n7rm/wv/FB8iFwCLes+3IFdaSu4+eeX/F34OBJyIBekSgg2DiLxACd7CHgVR
gZJCcPZ7qVwGSKxQn7rm7+JfH7KCxlmOTtFLYeqPx/9WAGkRDO1TXN0WGhES
mxNshuSCdBiQC1tliKJ/8UQU7d+K3E1W8n/l5QCV74YfoLk+oAifEnDmjsPs
1Ezd6bOhziKhFVYIN6ZBkIeHPwODDvils3AYPhL+3zJy/lh4V1UBszj0v2Nr
4DFMpiSoZ2BwoLfmYobY4pD/D9VmohCcT169DwCDoIFA7uAhDcjQP31l3ok2
Qf4O0uF3e4o+GRAia1tCU0fLravnT6QzVsEIEJL67+BBflYHQy8r4pPVCgPn
4KBfFHVPrre9v9O7vbWAazOTT9+/YbSKgMAQAoTS8tJLF45LMtP9ICT5x4Gq
fx9gkXTcp8tSUUiR8UrRL31LYgpT0rUYC99P3ko/rzY8AIUU4K13ZxzPLD6n
P5Yo2X1QhkaoQAiNQwk/efX+HQBEHQHn8uQBJtCHGkQR44SGeKtWO3/yCv8I
ExQPxL1UxQ65ipiTKIgKpwlkjvE53jt2A5dB+uTV++Qws6AfOMrFWvogYHQs
9CE3ikH7E4O27PbFf/I6/wzerO1E1uHzmcrEGHZUJDkmmaaN9SALvTHQn+jm
gJPCYAkQ5I/+he6R34rf3rsI0hkqCiIun/gPXp6MQHHp2q28uN2iiKOu1G3r
djh9oDQIySXq7DYddfm3c2poL7bSLidVeixZHBNF4gfaBocS9anuEMoVMv6z
jDMGKTSBBGiYYVT6o4Rwv5VcFFyMw7utW0dFGnH+8VwjM3sfGT052vfUCXpe
tjQinqhQunygNMvNRCSCB30/AePPYgqDYABgkUyAX3kKwoi2aav3yeTAWD31
XK4mI5sfqnOJjvfRpZDp4gA8kmX6J/hfCOJkJwnyMgLzjsuTU9hGRr4YDMUE
zv3zWuZngENMSuDO9GNUueKoSuOKWAm4k2FRQggSGSEC0lNocceJJbmhF9OC
CnIik5Oo8pDDwPmCgPOHftp/dceFoecQogCgDAbn1w/iUPfsotZcT9OH+Kel
sBLSmLo4v7hEYmSUb1D4ATZPDKTlo1cVtTqg9EJ0yVnd9ROam7m6zCT6mhUU
CPnxZwj8IrkwSnRMQP45VWoE7Vys8HKG+nKK8FaOsO6ssu64tP9M6s0k1VB+
YvnxkNITYaezFSpJgI2tAwrJ+xXkfgLqfwkIOBmFYNUXnD6RLdFG+ejiAlSR
rhzJXpFynzLCiS21REGuH/FyQAIRxqTGa+EDBanDhVnHYvmF56Iup4WGa5xC
oh1RSAoWYdBfLGr5x7Q/aahRoeDX5UWVZAVfT5SU5YSUZwWXJSsqUoOqM4IL
YoQTVccnm/Nazkc2XtY35enPp6tOZasFKncUJP4Vhf8bkWuKFSOR9PKLaZWF
SUEaJ4nqsCLSSag8INEeVOtd2OJdeJTk45JrvDpgqi6z62rsnfoz10+F3zoX
dSEjWKukhUd7gyh9uccAglOwkAgJJ/xJcd3FY6EN56IBcYVJgTeTpfkJ4sIU
eUVG8K0EaVmacvhSzN3O851XYnqKUlouxSfr2Kezg118jkCIX0OuAe8NJH50
7sszUt79CgJi/CfcKQ4JVIM3VHF2pPGMJsotLNyNq9wljzwckegZk+onU+6P
jvdVhx/cuucwHk3C4n7DxLn3Xw6lKDh3Pf+8rvZafMXV2MKrUVfzNKfTgjJT
uLpwn727/EwxzKVa8VKjfKMiHexcvk/KQAy2NO3q4yhyw1l96XHVrRx1Uaaq
5pg6P0XScTEmPzPkQqLsYqqi/qSmqyix+Wp07fnI2usxWfGCpEQPCMOFUO/0
dmIMkYNhiu/7piShoPeMnf2YF/wwxegdclEGfHRy8Sg6Diuuu5RYfyWWwtik
DffkKXYGag6GRbtoo12T0kgReq9wjY8q0i443BP+yx1xvxLGK70XnwxdztPW
30guvxJ37VLEuRzVmXSlTuMbH0M6cJBuvNSVB1tNy06mxGp9/QU7lk80xbEN
iQby4/TsBXJlF5KZF1OlgN/GMxF1OaGNeeFFx9RFOSHXMuRleerOm9F1l8Lb
8mPrrsXkJkn4cUxArjH87/bWcIxjGyP9MRjBuyXDURSglTg85wNjZ1iIuzQb
/J1gBsX42NMeDN7BFEuBGVHrL0RXXtbJpAeiov05yi2aOKdgrUtSAi01mZkQ
TwCIBu44zG+D4x+tQGd5XP311Kx4XsPNlPzT4WePKy+dCs1KFOYkiM5mBKHx
DiiMGAmjgkSYxDiSG0PjSdcu1xOJIK1fJ0aj/nGa3+/B0vRg1iq4T05Weu/N
mJYTsvpzkbWnw9qvxVefiaw5HZh/UlB1PfxmdlCqlpmglxpv+j5jMugXhglM
6HobvhHkDAPm14SyzA4Oy8ViSBhTwwxAJET9gJkFhSCXuonwJlxDaaj3a/of
J1cTknp/pOh6jsKDhgwIMWNJ1/GCrRURB1Qa5/hYMuA3OYmcmchMiiJp9BR5
wsY/eNHUJMbxJOGxDEl2ujgrRXgshZcWx4jR+h+LZ6dEkmVhB2jSDdY7PCA4
SaZ2Ox7nfj3u+3qi4YZEDzI25MV/nNzvB9mNAlAwBnqrP9DiguOqG6eCjscy
MqJoV5MDHYICTkaLM5NVl5KYmyAihBH8eNEf/CnFHFC8WYhcMqcoOAmCuLZU
2+XJ/IYKo9k/8PX+EAtnzgVlLuOj0mqA0Rp6ED/rQqribDJDEeR8iPIZOdjK
TwKFJ7goNIdj4/0idT7xCeSkeHJaIis2jBgaekSegF2KYH//RTNjGPGx1PhY
GkC0zj8uihKp9Vap7JTKQ6Gh9lGRTmERLrIQWwyaDYN5EwikvFTucm/S777i
P206OJaamiMoyQm9nCXOTeCeTOZ7h4YZ4/zTU3mxem5srKc5lvwjO1ik4fVH
rUSZg/Sc9/fSlqzr8rcQxPswuT+63T+D3I3reOnxdGc6ypG60lcCIwfhfPg4
vn6zr9LciYHgqrZ5CLGioAOhGqdj2Tyt2j1GHxAS54BByP5IBLtrl506+Cig
VaG2lcudRYGbpYody+RGRXkIQ7crQu2CtHYgTzc3Z2NhXLSJ2hTHx/yZE2tx
aAYwp0hkgEdYYGCGSB1D8FUBSyskSd182buMzehwE8K75ALNBS71+3MxdBye
BCKlZfz6ocmfEYpaGqT4WHeEgtjnz15gcba5ceE+YnSAHOspRLhxYJLonb5y
c2KwJS/cxi/QQhx8UKV1yErlqIKdTqaLEuLdzDew/khct8HKT6GzUyj2hqjt
5XJbsXyHQrVfE+GuCTsYqnJQRe4MDN0u19j/Y5fvH7dgWDQFiCUOopqgQQxJ
RCO5eLyPGSQDPMKhwyiIaWbrt8VfjNtPxR2QoVGsLUKWhZ8Otp6yFitCoFxx
VkwIRzEFYa2xEI7hYdBMJNwfKOn7Zvv/HnI/4kIAh6NSBtXGmYf0lOAdOUgn
LgLAgQl3ZEEObIS7CO0lRbqIYfTw9eHhjpH6Q0Fhh7U6t3i9Z0ImW5G243df
NzjWBaRaugjnQJktUFhdqLNGYy8M3hYWworUH8jL5dAku5G4n8TkH2v+AArB
sjCn+Yu3iGKsdx7wNV4ViDVZilpxXhCSAyHYto5sE1MPU6xwhQmFHYWnhm4X
h1pL1L6eDgcRMOD0mVgMx3QrzXKXB4QVAO1AwAJwCLbJ0kKh5Ur+3VwvLan4
WGT9VsiUW93ZGNdAtAsPa89EObAge/YaVwEawIWPchVA7kKEpwThLYOCdLtZ
yo0c9QZlxEFt1KH0E2Qy8/dfNzhqpyL0qCTYOihiN0NmqlIfCVXbE9hWUoWt
RuuVGusTp3GDrw36+YkYJtAU9A8ubxm/XpFRSAoGTyDqvZCMcDyOY4RmoTEB
EORmZk6FMHzLbR44rBSPI0Foucla/pZdQiySGXZsH0e96zBhjRcPj8bQNh7Y
BoPRsDgGyGKwkAhC/OIcs2VAEAirPlk/FSsQ7inCuUggZx5kz0IA5XUXA51F
uvDRrjyUMxfhK0X5B6IICowg3IajtSIrsbxgG3mc5YrV9L8Z/X6ZDNUf0UZ6
SEKsCSJMgBRSxRykCzf60TbLgq31OnZGrH+a3n8N/OeqikJ/nwb+PnKBYEA4
gjL5iCkndh1CvRqEOhgiAqmGkN4rPpMFBB3AmdBhMDkKz0ZiWCYbnbxYB+l8
O2rIJrJqm49sHQ7LxplItu1nIJAUYMyBBfhUrP0SrLf7g4r9GHYWN5wjic1I
QShSoJmPwNxFZGbHRDuxITcu5ClAuXOQHjyEvxTrK4V40VYk1fb/+Vc/LEoI
Av7fXQES15euRnEUVonHvf1FJu7A14tQ4CruAgwxcKsuwx62hhUZvzs2wuHG
6YDNe0j4Xyn5H879Uf7b7NhGkAdduxblL/qLKduRu9mJBwtQ4YjB67fs8zXb
7OZI9ICvUWza72lt7+GuwB8gbcSvZa5aHYhD8jBIsgmeD4cHYFAfGrEC1tgE
z/0kM36XczoMcrlf9PsW23GUkpzFVUbvpymw7NCNXkLIS4j1FZsTZEBhMQSZ
KVFh7i8z4SlMEehAc3QQZExGoWkQkvC7q7HOQiiJhzjajSQV0kOE9hFBVJUZ
QYZ0oK105sPJIRt5kZYa/cFT6bKe0sTcZP/NmwS/plgshvUhp4xirLUR8PQ7
iAoIhvbBrxF4qv7iF4J35eMIgXhiuNFBP7t1O+3Wbra38XXCIOQ4lGGUGYcU
mmIpEGgrlMjQegjOcoLwS4bCbK3oh/T2Q1g2Nf+Cec4QnE2Vh6ijd4XHHdGl
HJaH7/PkQRT5OqLAlK2xdhMgXbmmPjIsGk1EwH/zlP41K8XrNwcYr/E2XsE1
QTOQxkwiRyTUeEri1ini9wbG7iQqUfxoc47OJECJJYeZ0mOwTJ25KGF9ySVt
ZVF0RmzAnbJLHZejx8qiii9e/PC1zLYK3rGTP88ot+4PgK/hwyC6txgOkh0E
nA3BRDi0aI+zw1GBJSFwNxLph0aQYQgfHO6fyNIHvMCvb6J/zQoFCE7yZTMo
ChNdnENI1L64DG+i3AQETlSJFSF0M1WznhiM2ePoiMVT4JDXby3cn8XSZHrG
n6TEntkHGTGxkCzzqkQUi5VEOgen7ZbFbmZo8HQNxNXjKWEomt6EHGkiiNsq
jN+RlUWNCXdMSferOSeeaT7zefWZxanqD1/LcrvkA+Qe8ibhMFQUnM+N2gFB
BDRKYOiEgQMTxHJT/W8+aoSptQ8WwbPZJTCw/MELLWeyv0TZn83XrxUeSAh8
xIoVgbKEo+KYzeywrZxwS2mKVUyafXa2Lzd0h5mFBxYFskKByW8vfBUywI5E
Eeh3iHUHo/NcNdmOqWf8jl+SatJcTl3kpZ8gCeKsGBGmgXF7GOHmHpLV7Cgs
M9JMELtZnmjDjjbn6deJo7dootxKL2lvX08Zuqifqz9uguIhEL/oDhAQC4OU
brDi8/UELJqGMP4+KgBpIxIiAwO1340ScRbIp9hoNdkML1hWQFNTJgLhjzAx
xFpbdlEEcRB8NUh46XgMG4JTfjIAt9TpZOhjXDpAQT/p5Dcz5RtS3U/HJmDK
YE/QVCyWjMOTQmMp//eKpfAAyd2yzT8swT9Q788Ui4zhzjY2gjVwh9/becvb
68aNzvTWJO6OzLSPzXJKyfQ/c16Uftr/eB6lqlx/7Lj7pcv07PPEY1eJGZdp
kSccA1N2VpRra6qjzl3i6k64J5z2ZURayOO3xSf6V11UIRA0K1PvMHF0ui4a
gX6/yhi2jsGJ1673K7kQ6eL+k/QED7ExEAdlzOalElGmXsjVQblnXJOzjkDG
QiSMCk403CaaDaG8vYV7dxM2fUgdfkExDVfHsgyd/5+OXAO/GBIWzYMbsc1N
JVG5xFUgZzfImy8OJVwJc4xIOGaxlgESeZB6r1sv/p3kwpnqU4HZeTR9pkNo
xgFNusOpi9ys4+TrVyW1FRGd9cnNtREdjfEVDcrrZeybpeqsc8STN+itlSmj
jSe7a9LOnRYU3AjmJ2+SnthyIVdy7SwHgTuKxguQEA8HUe0OB/6C3DKRyMDo
NL+8k1x50E+6Pgz9hAguCsYQnxVRpNQj7kJ94gFt+oHlvTiWF/gAU7xxr+3m
vUwn6odmrr53EHm5lSAk9TcN1X2sYQIkgoJBUSEEf8UKN6SlkzBsi69kHzeI
Yevjv2o9e6lbgG3on8F447AEFMobh1SbYDnmZr/BfYC2BUYMAfc0bGMCMQtL
skZbsu/0XWqoSRntPLswXvBg6MriveonY9cf9Jx/+0XT4uvuxcXbbxenFxfv
fXGn/Ml4wcv5yle3S14v1L8ZK3oxcKOtNn1y9EpYuBJvYd9TfmLxy95v7tQv
zNYgYWQcigeuhcf8XU2WOmOZpia0/NOxrYXJV88fgxkHmOK+FwOQyGzd4Wtt
46aMt4k85ph7mpGZR5VG74eMRMCILf8GYcSIyLWFMG4olPsv3ePH9aeA2Y+y
5hQBp9r7EaS67WzddmHsToZmr7uQsBpn6NzGQSwUmmGCl6IREhD8w1ZT0CgW
Bu8M5NDK6jfMdQStvc5CbGHGBuQiYEyxIOHLgcsL3Rdnu89/MVny3b2qxaf1
LyeKXt6teD1Tvvhi+MXLgVeLU68Wb3/9fGbxZderhYbF79pePql49XUrIHdx
suzZROXCeI2RsR9JKBmrPb34eefbJ21f3G1TSPSIv/nA19CNjd5NtJmA3wBf
asV5eW9lZuH14M/+kwphv+cCbkT0oYirWnUyrVVomp0m1iHnkijimLMJRgCH
kZYpAw6Lp1/LVDr9qQvfcCD9QRraCodmoEDK/Hv7QICxRSBJCIjPjNwn0tnE
ZXlFR3subw1kJ3QmhXy29Yi3GdoTGCucMWk/n8cKdfLyiELjXD7CtC4EOeZW
9Kv71U+Grrx53fvqq7a3iyOLb8a+nK58udD89mnD26/aFxcHFr/r/+arls/n
axa/6VxcqF182vjm2/bFb3oWXw69/rrvy3sNo02F7o6imZ78xYXuxa+6Fl8O
LL7qfXWnfvHto+MnjkHGBAjyXaYGuYq3aY9vQb7m5jnFsWzK1avK03mcrGOc
v34GghypJV6hiD9UXhGqjj8aluUgijvIibSxc/FmxBzYcRRICB+NCViz2h+J
oOFxHPyfMMXlXVJQy6EagoxGkCxNflX+/h6sZkIriOD2JfpD7eXZYeGHs67y
ljcfQxoJjGE8GMQhRhCdI7yjs1wt3dkYGNt8rcIYR/vj5EIwVkdX++JC1/PZ
6sWv2haf1L+sz3sxfHPxacviy/7vnrS//qL15YuO76aLFp/UvP1mePFp85e3
C98u1C8+aVhcHP3mUcu94cL5yQ6VMKH2ZvaLB92vHnS8+bz71Zc9r99OvJqu
ej5V+WSm9OndRsNue0v+ThSUVFmsu1WgK7+uK7kemZPHKStJLi9OzbxKSrvC
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
              "], {{0, 0}, {159., 80.}}, {0, 255}, ColorFunction -> RGBColor],
              ImageSize -> {98., 49.}, PlotRange -> {{0, 159.}, {0, 80.}}]]]/
         255, 4]; $CellContext`earth[
         Pattern[$CellContext`rasterdata, 
          Blank[]], 
         Pattern[$CellContext`resolution, 
          Blank[]]] := 
       Module[{$CellContext`size, $CellContext`coords, \
$CellContext`MakePointSet, $CellContext`redpts, $CellContext`redfnpts, \
$CellContext`redfun, $CellContext`grnpts, $CellContext`greenfnpts, \
$CellContext`greenfun, $CellContext`blupts, $CellContext`bluefnpts, \
$CellContext`bluefun, $CellContext`r, $CellContext`planetdraft, \
$CellContext`planet}, $CellContext`size = 
          Dimensions[$CellContext`rasterdata]; $CellContext`coords = N[
            
            Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, 0, 2 Pi, 
              2 (Pi/(Part[$CellContext`size, 2] - 1))}, {$CellContext`j, 0, 
              Pi, Pi/(Part[$CellContext`size, 1] - 1)}], 
            4]; $CellContext`MakePointSet[
            Pattern[$CellContext`lis1, 
             Blank[List]], 
            Pattern[$CellContext`lis2, 
             Blank[List]]] := Map[MapThread[Append, #]& , 
            MapThread[
            List, {$CellContext`lis1, $CellContext`lis2}]]; \
{$CellContext`redpts, $CellContext`grnpts, $CellContext`blupts} = 
          Map[Partition[#, 
             Part[$CellContext`size, 1]]& , 
            Transpose[
             Flatten[
              Transpose[$CellContext`rasterdata], 
              1]]]; {$CellContext`redfnpts, $CellContext`greenfnpts, \
$CellContext`bluefnpts} = 
          Map[$CellContext`MakePointSet[$CellContext`coords, #]& , \
{$CellContext`redpts, $CellContext`grnpts, $CellContext`blupts}]; \
{$CellContext`redfun, $CellContext`greenfun, $CellContext`bluefun} = 
          Map[Interpolation[
             Flatten[#, 1], InterpolationOrder -> 
             1]& , {$CellContext`redfnpts, $CellContext`greenfnpts, \
$CellContext`bluefnpts}]; $CellContext`r = 6367.5; 
         SeedRandom[12345]; $CellContext`stars = 3.5 $CellContext`r Table[
             ({Cos[#] Sqrt[1 - #2^2], Sin[#] Sqrt[1 - #2^2], #2}& )[
              RandomReal[{0, 2 Pi}], 
              RandomReal[{-1, 1}]], {50}]; $CellContext`planetdraft := 
          ParametricPlot3D[
           0.99 $CellContext`r {
             Cos[$CellContext`theta] Sin[$CellContext`p], 
              Sin[$CellContext`theta] Sin[$CellContext`p], -
              Cos[$CellContext`p]}, {$CellContext`theta, 0, 2 
             Pi}, {$CellContext`p, 0, Pi}, Mesh -> 6, MaxRecursion -> 0, 
            BoundaryStyle -> Black, PerformanceGoal -> 
            "Speed"]; $CellContext`planet = 
          ParametricPlot3D[
           0.99 $CellContext`r {
             Cos[$CellContext`theta] Sin[$CellContext`p], 
              Sin[$CellContext`theta] Sin[$CellContext`p], -
              Cos[$CellContext`p]}, {$CellContext`theta, 0, 2 
             Pi}, {$CellContext`p, 0, Pi}, Mesh -> None, 
            ColorFunction -> (RGBColor[
              $CellContext`redfun[#4, #5], 
              $CellContext`greenfun[#4, #5], 
              $CellContext`bluefun[#4, #5]]& ), ColorFunctionScaling -> False,
             PlotPoints -> $CellContext`resolution, MaxRecursion -> 0]; 
         GeometricTransformation[
           ControlActive[
            Part[$CellContext`planetdraft, 1], 
            Part[$CellContext`planet, 1]], 
           RotationTransform[180 Degree, {0, 0, 1}]]]; Null); 
     Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->77449163],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`method$$ = 
    "Official", $CellContext`TorchOnCity$$ = 53, $CellContext`view$$ = 
    "3D world", Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`method$$], "Official", "tour option"}, {
      "ThreeOpt", "TwoOpt", "OrOpt", "CCA", "OrZweig", "Official"}}, {{
       Hold[$CellContext`view$$], "3D world", "model maps"}, {
      "2D world", "2D China", "3D world", "3D Earth"}}, {{
       Hold[$CellContext`TorchOnCity$$], 53, "cities along path"}, 1, 
      Dynamic[
       If[$CellContext`method$$ === "Official", 53, 54]], 1}}, 
    Typeset`size$$ = {510., {143., 147.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`method$384985$$ = 0, $CellContext`view$384986$$ = 
    0, $CellContext`TorchOnCity$384987$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`method$$ = 
        "Official", $CellContext`TorchOnCity$$ = 53, $CellContext`view$$ = 
        "3D world"}, "ControllerVariables" :> {
        Hold[$CellContext`method$$, $CellContext`method$384985$$, 0], 
        Hold[$CellContext`view$$, $CellContext`view$384986$$, 0], 
        Hold[$CellContext`TorchOnCity$$, $CellContext`TorchOnCity$384987$$, 
         0]}, "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`result$, $CellContext`route$, $CellContext`steps$, \
$CellContext`map2D$, $CellContext`map3D$}, $CellContext`result$ = 
         Switch[$CellContext`method$$, "ThreeOpt", $CellContext`ThreeOptTour, 
           "TwoOpt", $CellContext`TwoOptTour, "OrOpt", $CellContext`OrOptTour,
            "CCA", $CellContext`CCATour, "OrZweig", $CellContext`OrZweigTour, 
           "Official", $CellContext`officialTour]; $CellContext`route$ = 
         If[Part[$CellContext`result$, 2] < 20, $CellContext`result$, 
           Reverse[$CellContext`result$]]; $CellContext`steps$ = 
         Part[$CellContext`allCitiesGPS, $CellContext`route$]; \
$CellContext`map2D$ = Graphics[{LightGreen, 
            EdgeForm[Gray], 
            If[$CellContext`view$$ == "2D world", 
             Map[CountryData[#, "SchematicPolygon"]& , 
              CountryData[]], 
             Map[CountryData[#, "SchematicPolygon"]& , 
              CountryData["Asia"]]], LightPink, 
            Map[
            CountryData[#, "SchematicPolygon"]& , {
             "China", "HongKong", "Macau", "Taiwan"}], 
            Text[
             Style["Beijing", Bold, Red], {116.5, 42}], 
            Map[Text[
              Style["\[Neptune]", 
               RGBColor[1, 0.47, 0]], #]& , 
             Take[$CellContext`steps$, $CellContext`TorchOnCity$$]], 
            ColorData[1, 1], 
            Dashing[0.005], 
            Thickness[0.003], 
            GeometricTransformation[
             Map[$CellContext`greatcircleschart, 
              Table[
               Take[
                Take[
                 Take[$CellContext`steps$, $CellContext`TorchOnCity$$], 
                 Length[
                  
                  Take[$CellContext`steps$, $CellContext`TorchOnCity$$]]], \
{$CellContext`i, $CellContext`i + 1}], {$CellContext`i, 1, Length[
                  Take[$CellContext`steps$, $CellContext`TorchOnCity$$]] - 
                1}]], 
             RotationTransform[90 Degree, {0, 0}]], 
            Opacity[0.05], 
            PointSize[Medium], 
            Table[
             Tooltip[
              Point[
               Part[$CellContext`allCitiesGPS, $CellContext`k]], 
              Row[{
                Part[
                 Part[$CellContext`allCities, $CellContext`k], 3], ", ", 
                Part[
                 Part[$CellContext`allCities, $CellContext`k], 
                 4]}]], {$CellContext`k, 1, 
              Length[$CellContext`allCities]}]}, PlotRange -> 
           If[$CellContext`view$$ == "2D world", {{-180, 180}, {-90, 90}}, {{
             40, 160}, {-2, 58}}], ImageSize -> {510, 290}, Frame -> True, 
           FrameTicks -> {{
              Table[45 $CellContext`i, {$CellContext`i, -2, 2}], None}, {
              Table[45 $CellContext`i, {$CellContext`i, -4, 4}], None}}, 
           Prolog -> Raster[
             
             Table[$CellContext`i, {$CellContext`i, 100}, {$CellContext`j, 
               100}], {
              Scaled[{0, 0}], 
              Scaled[{1, 1}]}, {1, 100}, 
             ColorFunction -> (Blend[{LightBlue, White}, #]& )], PlotLabel -> 
           Style[
             Grid[{{
                $CellContext`CountDist[$CellContext`groupAll, \
$CellContext`route$, $CellContext`TorchOnCity$$], "km   total distance "}}, 
              Alignment -> {Right, Left}], Italic, 21]]; $CellContext`map3D$ = 
         Graphics3D[{
            If[$CellContext`view$$ == "3D world", {
              Sphere[{0, 0, 0}, 0.99 $CellContext`r], 
              Map[Line[
                Map[$CellContext`SCPlot, 
                 CountryData[#, "SchematicCoordinates"], {-2}]]& , 
               CountryData[]]}, 
             $CellContext`earth[$CellContext`rasterdata, 100]], Red, Thick, 
            Line[
             $CellContext`TourLine[
              Take[$CellContext`route$, $CellContext`TorchOnCity$$]]], Yellow, 
            PointSize[Medium], 
            Map[Tooltip[
              Point[
               $CellContext`SCPlot[#]], #]& , 
             Map[Reverse[#]& , 
              Take[$CellContext`steps$, $CellContext`TorchOnCity$$]]], White, 
            PointSize[0.001], 
            Point[$CellContext`stars]}, Background -> 
           If[$CellContext`view$$ == "3D world", LightGray, Black], Lighting -> 
           If[$CellContext`view$$ == "3D world", Automatic, "Neutral"], Boxed -> 
           False, SphericalRegion -> True, ImageSize -> {510, 290}, 
           ViewPoint -> {0, 0.75, 0.5}]; Show[
          If[
           
           Or[$CellContext`view$$ == "2D world", $CellContext`view$$ == 
            "2D China"], $CellContext`map2D$, $CellContext`map3D$]]], 
      "Specifications" :> {{{$CellContext`method$$, "Official", 
          "tour option"}, {
         "ThreeOpt", "TwoOpt", "OrOpt", "CCA", "OrZweig", "Official"}, 
         ControlType -> Setter}, 
        Delimiter, {{$CellContext`view$$, "3D world", "model maps"}, {
         "2D world", "2D China", "3D world", "3D Earth"}, ControlType -> 
         Setter}, {{$CellContext`TorchOnCity$$, 53, "cities along path"}, 1, 
         Dynamic[
          If[$CellContext`method$$ === "Official", 53, 54]], 1, Appearance -> 
         "Labeled"}}, 
      "Options" :> {
       ControlPlacement -> Top, 
        TrackedSymbols :> {$CellContext`method$$, $CellContext`view$$, \
$CellContext`TorchOnCity$$}, SynchronousUpdating -> False, 
        SynchronousInitialization -> False, 
        AutorunSequencing -> {1, 2, {3, 25}}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{559., {221., 226.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>(($CellContext`holdingCity = {{
         116.4, 39.93, "Beijing", 
          "China"}}; $CellContext`internationalCities = {{
         76.92, 43.32, "Almaty", "Kazakhstan"}, {
         29., 41.1, "Istanbul", "Turkish"}, {
         30.32, 59.93, "Saint Petersburg", "Russia"}, {-0.12, 51.5, "London", 
          "United Kingdom"}, {
         2.34, 48.86, "Paris", "France"}, {-122.44, 37.76, "San Francisco", 
          "United States"}, {-58.37, -34.61, "Buenos Aires", "Argentina"}, {
         39.28, -6.82, "Dar es Salaam", "Tanzania"}, {
         58.54, 23.61, "Muscat", "Oman"}, {
         73.06, 33.72, "Islamabad", "Pakistan"}, {
         77.21, 28.67, "Delhi", "India"}, {
         100.5, 13.73, "Bangkok", "Thailand"}, {
         101.71, 3.16, "Kuala Lumpur", "Malaysia"}, {
         106.83, -6.18, "Jakarta", "Indonesia"}, {
         149.22, -35.28, "Canberra", "Australia"}, {
         136.91, 35.15, "Nagoya", "Japan"}, {
         127., 37.57, "Seoul", "South Korea"}, {
         125.75, 39.02, "Pyongyang", "North Korea "}, {
         106.69, 10.78, "Ho Chi Minh City", 
          "Vietnam"}}; $CellContext`chinaCities = {{
         110.32, 20.05, "Haikou", "China"}, {
         117.28, 31.85, "Hefei", "China"}, {113.55, 22.2, "Macau", "China"}, {
         119.3, 26.08, "Fuzhou", "China"}, {
         103.68, 36.05, "Lanzhou", "China"}, {
         113.25, 23.12, "Guangzhou", "China"}, {
         108.32, 22.82, "Nanning", "China"}, {
         106.72, 26.58, "Guiyang", "China"}, {
         114.48, 38.05, "Shijiazhuang", "China"}, {
         113.67, 34.75, "Zhengzhou", "China"}, {
         126.65, 45.75, "Harbin", "China"}, {
         114.27, 30.58, "Wuhan", "China"}, {
         112.97, 28.2, "Changsha", "China"}, {
         125.35, 43.87, "Changchun", "China"}, {
         118.78, 32.05, "Nanjing", "China"}, {
         115.88, 28.68, "Nanchang", "China"}, {
         123.45, 41.8, "Shenyang", "China"}, {
         111.64, 40.82, "Hohhot", "China"}, {
         106.27, 38.47, "Yingchua", "China"}, {
         101.77, 36.62, "Xining", "China"}, {117., 36.67, "Jinan", "China"}, {
         112.55, 37.87, "Taiyuan", "China"}, {
         108.9, 34.27, "Xian", "China"}, {
         121.47, 31.23, "Shanghai", "China"}, {
         104.07, 30.67, "Chengdu", "China"}, {
         121.45, 25.02, "Taibei", "China"}, {
         117.2, 39.13, "Tianjin", "China"}, {91., 29.6, "Lasa", "China"}, {
         114.15, 22.28, "Hongkong", "China"}, {
         87.58, 43.8, "Urumqi", "China"}, {
         102.7, 25.05, "Kunming", "China"}, {
         120.17, 30.25, "Hangzhou", "China"}, {
         106.58, 29.57, "Chongqing", "China"}}; $CellContext`allCities = 
       Flatten[{$CellContext`holdingCity, $CellContext`internationalCities, \
$CellContext`chinaCities}, 
         1]; {$CellContext`holdingCityGPS, \
$CellContext`internationalCitiesGPS, $CellContext`chinaCitiesGPS} = 
       Map[Take[#, All, 
          2]& , {$CellContext`holdingCity, $CellContext`internationalCities, \
$CellContext`chinaCities}]; $CellContext`allCitiesGPS = 
       Flatten[{$CellContext`holdingCityGPS, \
$CellContext`internationalCitiesGPS, $CellContext`chinaCitiesGPS}, 
         1]; {$CellContext`group1, $CellContext`group2, $CellContext`group3} = 
       Map[Map[Reverse, #]& , {$CellContext`holdingCityGPS, \
$CellContext`internationalCitiesGPS, $CellContext`chinaCitiesGPS}]; \
$CellContext`groupAll = 
       Flatten[{$CellContext`group1, $CellContext`group2, \
$CellContext`group3}, 1]; $CellContext`solver[
         Pattern[$CellContext`pts, 
          Blank[List]], 
         Pattern[$CellContext`method, 
          Blank[]], 
         Pattern[$CellContext`distFun, 
          Blank[]], 
         Pattern[$CellContext`group1, 
          Blank[]], 
         Pattern[$CellContext`group2, 
          Blank[]]] := 
       Module[{$CellContext`dist, $CellContext`tour, \
$CellContext`constrainFun}, $CellContext`constrainFun = If[
            Or[
             And[
              MemberQ[$CellContext`group1, #], 
              MemberQ[$CellContext`group2, #2]], 
             And[
              MemberQ[$CellContext`group1, #2], 
              MemberQ[$CellContext`group2, #]]], $CellContext`distFun[#, #2] + 
            10^9, 
            $CellContext`distFun[#, #2]]& ; {$CellContext`dist, \
$CellContext`tour} = Quiet[
            FindShortestTour[
             N[$CellContext`pts], Method -> $CellContext`method, 
             DistanceFunction -> $CellContext`constrainFun]]; 
         Append[$CellContext`tour, 
           First[$CellContext`tour]]]; $CellContext`methods = {
        "TwoOpt", "OrOpt", "CCA", 
         "OrZweig"}; {$CellContext`TwoOptTour, $CellContext`OrOptTour, \
$CellContext`CCATour, $CellContext`OrZweigTour} = 
       Map[$CellContext`solver[$CellContext`groupAll, #, 
          GeoDistance, $CellContext`group2, $CellContext`group3]& , \
$CellContext`methods]; $CellContext`threeOpt[
         Pattern[$CellContext`pts, 
          Blank[List]], 
         Pattern[$CellContext`distFunction, 
          Blank[]], 
         Pattern[$CellContext`group1, 
          Blank[]], 
         Pattern[$CellContext`group2, 
          Blank[]]] := 
       Module[{$CellContext`n = 
          Length[$CellContext`pts], $CellContext`randInit, $CellContext`tour, \
$CellContext`distFun, $CellContext`constrainFun, $CellContext`pairsDistTable, \
$CellContext`pairsDist, $CellContext`tourLength, $CellContext`len, \
$CellContext`adjacencyList, $CellContext`triples, $CellContext`changed = 
          True, $CellContext`tuple, $CellContext`loss, $CellContext`gain, \
$CellContext`c1, $CellContext`c2, $CellContext`c3, $CellContext`c4}, 
         SeedRandom[321]; $CellContext`randInit[
            Pattern[$CellContext`k, 
             Blank[]]] := Flatten[{1, RandomSample[
               Range[$CellContext`k - 1]] + 1, 
             1}]; $CellContext`tour = $CellContext`randInit[$CellContext`n]; \
$CellContext`distFun[
            Pattern[$CellContext`p1, 
             Blank[]], 
            Pattern[$CellContext`p2, 
             
             Blank[]]] := $CellContext`distFunction[$CellContext`p1, \
$CellContext`p2]; $CellContext`constrainFun[
            Pattern[$CellContext`p1, 
             Blank[]], 
            Pattern[$CellContext`p2, 
             Blank[]]] := If[
            Or[
             And[
              MemberQ[$CellContext`group1, $CellContext`p1], 
              MemberQ[$CellContext`group2, $CellContext`p2]], 
             And[
              MemberQ[$CellContext`group1, $CellContext`p2], 
              MemberQ[$CellContext`group2, $CellContext`p1]]], 
            10^9 + $CellContext`distFun[$CellContext`p1, $CellContext`p2], 
            $CellContext`distFun[$CellContext`p1, $CellContext`p2]]; \
$CellContext`pairsDistTable = Table[
            $CellContext`constrainFun[
             Part[$CellContext`pts, $CellContext`j], 
             
             Part[$CellContext`pts, $CellContext`k]], {$CellContext`j, \
$CellContext`n}, {$CellContext`k, $CellContext`n}]; $CellContext`pairsDist[
            Pattern[$CellContext`j, 
             Blank[]], 
            Pattern[$CellContext`k, 
             Blank[]]] := Part[$CellContext`pairsDistTable, 
            Part[$CellContext`tour, $CellContext`j], 
            Part[$CellContext`tour, $CellContext`k]]; $CellContext`tourLength[
            Pattern[$CellContext`l, 
             Blank[]]] := Sum[
            Part[$CellContext`pairsDistTable, 
             Part[$CellContext`l, $CellContext`i], 
             Part[$CellContext`l, $CellContext`i + 1]], {$CellContext`i, 
             Length[$CellContext`l] - 
             1}]; $CellContext`len = \
$CellContext`tourLength[$CellContext`tour]; $CellContext`triples = Subsets[
            Range[$CellContext`n], {3}]; 
         While[$CellContext`changed, $CellContext`changed = False; 
           Do[$CellContext`tuple = 
              Part[$CellContext`triples, $CellContext`j]; $CellContext`loss = 
              Sum[
                $CellContext`pairsDist[
                 Part[$CellContext`tuple, $CellContext`k], 
                 Part[$CellContext`tuple, $CellContext`k] + 
                 1], {$CellContext`k, 
                 3}]; $CellContext`c1 = $CellContext`pairsDist[
                 Part[$CellContext`tuple, 1], 
                 Part[$CellContext`tuple, 2]] + $CellContext`pairsDist[
                Part[$CellContext`tuple, 1] + 1, 
                 Part[$CellContext`tuple, 3]] + $CellContext`pairsDist[
                Part[$CellContext`tuple, 2] + 1, Part[$CellContext`tuple, 3] + 
                 1]; $CellContext`c2 = $CellContext`pairsDist[
                 Part[$CellContext`tuple, 1], Part[$CellContext`tuple, 2] + 
                 1] + $CellContext`pairsDist[
                 Part[$CellContext`tuple, 3], Part[$CellContext`tuple, 1] + 
                 1] + $CellContext`pairsDist[
                 Part[$CellContext`tuple, 2], Part[$CellContext`tuple, 3] + 
                 1]; $CellContext`c3 = $CellContext`pairsDist[
                 Part[$CellContext`tuple, 1], Part[$CellContext`tuple, 2] + 
                 1] + $CellContext`pairsDist[
                 Part[$CellContext`tuple, 3], 
                 Part[$CellContext`tuple, 2]] + $CellContext`pairsDist[
                Part[$CellContext`tuple, 1] + 1, Part[$CellContext`tuple, 3] + 
                 1]; $CellContext`c4 = $CellContext`pairsDist[
                 Part[$CellContext`tuple, 1], 
                 Part[$CellContext`tuple, 3]] + $CellContext`pairsDist[
                Part[$CellContext`tuple, 2] + 1, Part[$CellContext`tuple, 1] + 
                 1] + $CellContext`pairsDist[
                 Part[$CellContext`tuple, 2], Part[$CellContext`tuple, 3] + 
                 1]; $CellContext`gain = 
              Min[$CellContext`c1, $CellContext`c2, $CellContext`c3, \
$CellContext`c4]; 
             If[$CellContext`gain < $CellContext`loss, $CellContext`len = \
$CellContext`len - $CellContext`loss + $CellContext`gain; \
$CellContext`changed = True; 
               Which[$CellContext`gain == $CellContext`c1, $CellContext`tour = 
                 Join[
                   Part[$CellContext`tour, 
                    Span[1, 
                    Part[$CellContext`tuple, 1]]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 2], Part[$CellContext`tuple, 1] + 
                    1, -1]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3], Part[$CellContext`tuple, 2] + 
                    1, -1]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3] + 1, $CellContext`n + 
                    1]]], $CellContext`gain == $CellContext`c2, \
$CellContext`tour = Join[
                   Part[$CellContext`tour, 
                    Span[1, 
                    Part[$CellContext`tuple, 1]]], 
                   Part[$CellContext`tour, 
                    Span[Part[$CellContext`tuple, 2] + 1, 
                    Part[$CellContext`tuple, 3]]], 
                   Part[$CellContext`tour, 
                    Span[Part[$CellContext`tuple, 1] + 1, 
                    Part[$CellContext`tuple, 2]]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3] + 1, $CellContext`n + 
                    1]]], $CellContext`gain == $CellContext`c3, \
$CellContext`tour = Join[
                   Part[$CellContext`tour, 
                    Span[1, 
                    Part[$CellContext`tuple, 1]]], 
                   Part[$CellContext`tour, 
                    Span[Part[$CellContext`tuple, 2] + 1, 
                    Part[$CellContext`tuple, 3]]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 2], Part[$CellContext`tuple, 1] + 
                    1, -1]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3] + 1, $CellContext`n + 
                    1]]], $CellContext`gain == $CellContext`c4, \
$CellContext`tour = Join[
                   Part[$CellContext`tour, 
                    Span[1, 
                    Part[$CellContext`tuple, 1]]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3], Part[$CellContext`tuple, 2] + 
                    1, -1]], 
                   Part[$CellContext`tour, 
                    Span[Part[$CellContext`tuple, 1] + 1, 
                    Part[$CellContext`tuple, 2]]], 
                   Part[$CellContext`tour, 
                    Span[
                    Part[$CellContext`tuple, 3] + 1, $CellContext`n + 1]]], 
                 True, 
                 Print["trouble"]]; Null]; Null, {$CellContext`j, 
              
              Length[$CellContext`triples]}]]; {$CellContext`len, \
$CellContext`tour}]; $CellContext`ThreeOptTour = Last[
         $CellContext`threeOpt[$CellContext`groupAll, 
          GeoDistance, $CellContext`group2, $CellContext`group3]]; \
$CellContext`officialTour = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 
        15, 16, 17, 18, 19, 20, 49, 23, 21, 26, 24, 36, 52, 44, 35, 22, 32, 
        33, 27, 51, 28, 53, 45, 48, 40, 50, 25, 39, 43, 42, 38, 31, 34, 37, 
        41, 30, 29, 47, 1}; $CellContext`CountDist[
         Pattern[$CellContext`pts, 
          Blank[]], 
         Pattern[$CellContext`tour, 
          Blank[]], 
         Pattern[$CellContext`torchOnCity, 
          Blank[]]] := NumberForm[10^(-3) Sum[
           GeoDistance[
            Part[$CellContext`pts, 
             Part[$CellContext`tour, $CellContext`i]], 
            Part[$CellContext`pts, 
             
             Part[$CellContext`tour, $CellContext`i + 
              1]]], {$CellContext`i, $CellContext`torchOnCity - 1}], {6, 
         2}]; $CellContext`greatcircleschart[{{
           Pattern[$CellContext`lon1, 
            Blank[]], 
           Pattern[$CellContext`lat1, 
            Blank[]]}, {
           Pattern[$CellContext`lon2, 
            Blank[]], 
           Pattern[$CellContext`lat2, 
            Blank[]]}}] := 
       Module[{$CellContext`places, $CellContext`L0, $CellContext`L1, \
$CellContext`L2, $CellContext`\[Phi]1, $CellContext`\[Phi]2, \
$CellContext`tani, $CellContext`sf, $CellContext`\[Phi]L, $CellContext`points = 
          20, $CellContext`distance}, 
         If[$CellContext`lat1 == $CellContext`lat2, $CellContext`lat2 = \
$CellContext`lat2 + 0.0003; 
           Null]; $CellContext`places = {{-$CellContext`lon1, \
$CellContext`lat1}, {-$CellContext`lon2, $CellContext`lat2}}; \
$CellContext`places = Sort[$CellContext`places] 2 (Pi/360); $CellContext`L1 = 
          Part[$CellContext`places, 2, 1]; $CellContext`\[Phi]1 = 
          Part[$CellContext`places, 2, 2]; $CellContext`L2 = 
          Part[$CellContext`places, 1, 1]; $CellContext`\[Phi]2 = 
          Part[$CellContext`places, 1, 2]; 
         If[$CellContext`\[Phi]1 == $CellContext`\[Phi]2, \
$CellContext`\[Phi]2 = $CellContext`\[Phi]2 + 0.0003; Null]; 
         If[$CellContext`L1 == $CellContext`L2, $CellContext`L2 = \
$CellContext`L2 + 0.0003; 
           Null]; $CellContext`L0 = (1/2) ($CellContext`L1 + $CellContext`L2 - 
            2 
            ArcCot[Cot[($CellContext`L1 - $CellContext`L2)/2] 
              Csc[$CellContext`\[Phi]1 + $CellContext`\[Phi]2] 
              Sin[$CellContext`\[Phi]1 - $CellContext`\[Phi]2]]); 
         If[$CellContext`L0 == $CellContext`L1, $CellContext`L1 = \
$CellContext`L1 + 0.0003; 
           Null]; $CellContext`tani = (-
            Csc[$CellContext`L0 - $CellContext`L1]) Tan[$CellContext`\[Phi]1]; 
         If[Abs[$CellContext`L1 - $CellContext`L2] <= 
           Pi, $CellContext`\[Phi]L = Table[{
               ArcTan[
               Sin[$CellContext`t - $CellContext`L0] $CellContext`tani], \
$CellContext`t}, {$CellContext`t, 
               Min[$CellContext`L1, $CellContext`L2], 
               Max[$CellContext`L1, $CellContext`L2], 
               Abs[Max[$CellContext`L1, $CellContext`L2] - 
                 Min[$CellContext`L1, $CellContext`L2]]/($CellContext`points - 
               1)}]; Null, $CellContext`\[Phi]L = Table[{
               ArcTan[
               Sin[$CellContext`t - $CellContext`L0] $CellContext`tani], \
$CellContext`t}, {$CellContext`t, 
               Min[$CellContext`L1, Sign[$CellContext`L1] Pi], 
               Max[$CellContext`L1, Sign[$CellContext`L1] Pi], 
               Abs[$CellContext`L1 - Sign[$CellContext`L1] 
                 Pi]/($CellContext`points/2 - 1)}]; $CellContext`\[Phi]L = 
            Join[{$CellContext`\[Phi]L}, {
               Table[{
                 ArcTan[
                 Sin[$CellContext`t - $CellContext`L0] $CellContext`tani], \
$CellContext`t}, {$CellContext`t, 
                 Min[(-Sign[$CellContext`L1]) Pi, $CellContext`L2], 
                 Max[(-Sign[$CellContext`L1]) Pi, $CellContext`L2], 
                 Abs[$CellContext`L2 + 
                   Sign[$CellContext`L1] Pi]/($CellContext`points/2 - 1)}]}]; 
           Null]; Part[
           Graphics[{
             Line[(360/(2 Pi)) $CellContext`\[Phi]L]}], 1]]; $CellContext`r = 
       6367.5; $CellContext`SCPlot[{
          Pattern[$CellContext`lat, 
           Blank[]], 
          Pattern[$CellContext`lon, 
           Blank[]]}] := $CellContext`r {
         Cos[$CellContext`lon Degree] Cos[$CellContext`lat Degree], 
          Sin[$CellContext`lon Degree] Cos[$CellContext`lat Degree], 
          Sin[$CellContext`lat Degree]}; $CellContext`centers = 
       Map[Reverse[#]& , $CellContext`allCitiesGPS]; \
$CellContext`GreatCircleArc[{
          Pattern[$CellContext`lat1, 
           Blank[]], 
          Pattern[$CellContext`lon1, 
           Blank[]]}, {
          Pattern[$CellContext`lat2, 
           Blank[]], 
          Pattern[$CellContext`lon2, 
           Blank[]]}] := 
       Module[{$CellContext`u = $CellContext`SCPlot[{$CellContext`lat1, \
$CellContext`lon1}], $CellContext`v = $CellContext`SCPlot[{$CellContext`lat2, \
$CellContext`lon2}], $CellContext`a}, $CellContext`a = 
          VectorAngle[$CellContext`u, $CellContext`v]; Table[
           Evaluate[
            
            RotationTransform[$CellContext`\[Theta], {$CellContext`u, \
$CellContext`v}][$CellContext`u]], {$CellContext`\[Theta], 
            0, $CellContext`a, $CellContext`a/Ceiling[
            10 $CellContext`a]}]]; $CellContext`TourLine[
         Pattern[$CellContext`rou, 
          Blank[]]] := Apply[$CellContext`GreatCircleArc, 
         Partition[
          Part[$CellContext`centers, $CellContext`rou], 2, 1], {
         1}]; $CellContext`rasterdata = N[First[
           First[
            Graphics[
             Raster[CompressedData["
1:eJzsvQV0VFm+N3rXs/Xeet93504PlpScVRojEDQEhwAB4q7l7paqVKWSVCWp
irtCCAR3SIi7u7sRg6CLQAu9uqGRvF1Jdw/dQzMt9DD3rS/rR3FKzj777N9f
tx0UVeRG/d//4z/+wwX8ywP/DMcP5yYfzE48uHP7/tzkMh7duQ3w8O4UOH44
P/74/uSjexPg4P6d0cd3pwDAtwvzkwt3Jx7Njj6eG3s8O/oEvM6NPbkzDj5/
9nAa4PNHM4/uzz1+cGf53Pn5sacPZhbuTRlwf/rpo7vLWHg4/+zx/YUHd588
nHswP/X43gzAwoO5hYd3Pn9y78n92ceP7i08ebDw5P7CwoNnD+YBQJkLj+89
vDcLDgyv9+8uf2LAo3mAp0/uP3l499nCA8PV7889fHD33vwsKAoUC24KANzs
vdmJZdydHgNvl2G436Vv3329Mzl49/YQwP2ZUfD6cG783vTIg9kx8Hbpk4H7
M8P3poce3Rl7MDtyb25kfnb4+9dZcBVQJmjGKfAJAGhAA8DbHz6fn5kEWH67
fPxwbhSUA0q+Nzd2/874g7sT4IrgcvfuTM3PgUpOLxe7XNsf7wJgfmYcnH53
GlA5/XCJREBreXXd2Pjk+PDAzG3Dpe/MjJzMPZuWmt3cORoRcyo7Oy839/Ll
4sasU1dUoTGTt2cnJmc6u/q6uvtHRiera+oqq2pKymuGhkYGhidGxoYHhwf6
+3t7e7tbWprqaisBWprrOztaZqYnFp48evzowdzsdH9fz8joAPhRR0dHW0d7
e2dHR09v//BYRUNzYWXNpYKKvMv5F/NLL98qraqrLyqrLKuqLamq6Ojs7hvo
Hxweauvs6+3sGB8bGR0ZmpmdHBnuA1ccHOzv6+trbW3t7Gzv6W3v72ltbaru
6W7r7Gju7WkfHenv7+tsbalvbKptaKyprausr6syVK+uDKC+vryxoRqgobai
pbGmuaEaoKm+qqm+YhntLbWgNPBha1NtfX1tY2N9Q1Njc2tLa3tbfWNDU1MD
uNmmlsaWtmbwCcDyTYGaABhucQldXR1d4G17a093e1cn+FUTaJb2tkYAcNDR
3tze0dzS2gDK6ehq7+wCP2sDNQfo624bHuge7Gkb6m2fGOkGGBvsBu03OtAz
PT4IPpwc6Rsd6gU/a2xr6h3t6u3tB21VVFZeWVvX1jHCCEpWhSedvVqSe+pG
fFJedVVHT/dkXdtwXdftjpE7p69X596oOX6pWJd56dT1sovFdYX1XZdLGy4U
1TZ2j9e2D5e39FY1d90qra6uay4sqSwor7pWVAqYqmlsKa2qLauuq28BN9UM
7quttRncYG9PV3dPe3d3d09PT/6tgivXrlbXN9Q0NFc2ttS0tFfUt569Vniz
rPb89bLrhbXldW3VTV1N7d3N7V2gRfoHB/qHh8Dt9/f3D4C/4Yn+gZHxiemB
wdHR0fHOTlBqd29f5/DgUEdbe0sLaNWu4uLCgoKb+QXXCm5dr64orqksaayr
bK6rMqC+eBktDeVtTZUtdbcaqm40Vd5qrioEr031ZQD11UXN9WXg2+YGA6oq
SyorikGZt27lA1RVVQCuAb+AlMbmhsbmJkA3oN7w2lAHUFdXU1tbDQAO6sBB
TVV1VVlVZWllRUltTQX4D7wBTQRQUVFVV9dQV9vU3NTe3FIPWgyQDsSguwuw
3DHQa8BQf8fwQCfgemCgbWCgY3io1yDbfZ3hkSn6qGORsVeiUq7U1jXX1LeA
Fqura8uvaiutqL1Z3ni1pKqmvq2ytq20pqmqsR3Qd+pW2flbZWfzy09eKrhc
UHTm4pUzly6dvnjx0o0b4ODyzZtXi0svFxbfrKgpqawpb+yubG6paGpuaWsF
otvU0gzEta2tBYg6EODmprqB/i5QjWVt6uhsMXzX0lJVU11WUX6rpPRWSfmN
kvL8wrLiiuqCkor84nJQcurZq2duVIXFHTt1oeTC1Zvgx7eKCkvK6zSxmYFR
GSlnC64UApkCzV18o/B64a2y2pom0ESgSZuaa5tb6to7Wyqryzo6e1tagaq0
gPYvKKkCJ+QXV14vqbxWXHGttADgVmlhQXFJflFxflHpTVB8WRFofICW2mID
qosAWmuKm6oLGyoLAMCHtRVFdZXF9VUGggC/1dWV1bVVdQ21y8wCikEjAHVu
bW1eussmg2o3NTQ31TY11jQ11jY21IATgeloa66pqSwC4lFWVlLfUNXV3Wqg
bBjIfXtLcyNAZ0dbD9CF7k6gFN1dHYBuwDU4AEoKanvqfCGDp0o7dvHUqYtR
0Qn5hQ03S2pulTUVVTZfK6y+VtE8MNQPzOnQyPD45AQwekA1uvoGAYCQlZaX
FZdXlQLi6psqQDNVVReWlgEAlS+vrikDRrepraG1s3tgpLNvqLt/qKUDWKIO
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
skZbsu/0XWqoSRntPLswXvBg6MriveonY9cf9Jx/+0XT4uvuxcXbbxenFxfv
fXGn/Ml4wcv5yle3S14v1L8ZK3oxcKOtNn1y9EpYuBJvYd9TfmLxy95v7tQv
zNYgYWQcigeuhcf8XU2WOmOZpia0/NOxrYXJV88fgxkHmOK+FwOQyGzd4Wtt
46aMt4k85ph7mpGZR5VG74eMRMCILf8GYcSIyLWFMG4olPsv3ePH9aeA2Y+y
5hQBp9r7EaS67WzddmHsToZmr7uQsBpn6NzGQSwUmmGCl6IREhD8w1ZT0CgW
Bu8M5NDK6jfMdQStvc5CbGHGBuQiYEyxIOHLgcsL3Rdnu89/MVny3b2qxaf1
LyeKXt6teD1Tvvhi+MXLgVeLU68Wb3/9fGbxZderhYbF79pePql49XUrIHdx
suzZROXCeI2RsR9JKBmrPb34eefbJ21f3G1TSPSIv/nA19CNjd5NtJmA3wBf
asV5eW9lZuH14M/+kwphv+cCbkT0oYirWnUyrVVomp0m1iHnkijimLMJRgCH
kZYpAw6Lp1/LVDr9qQvfcCD9QRraCodmoEDK/Hv7QICxRSBJCIjPjNwn0tnE
ZXlFR3subw1kJ3QmhXy29Yi3GdoTGCucMWk/n8cKdfLyiELjXD7CtC4EOeZW
9Kv71U+Grrx53fvqq7a3iyOLb8a+nK58udD89mnD26/aFxcHFr/r/+arls/n
axa/6VxcqF182vjm2/bFb3oWXw69/rrvy3sNo02F7o6imZ78xYXuxa+6Fl8O
LL7qfXWnfvHto+MnjkHGBAjyXaYGuYq3aY9vQb7m5jnFsWzK1avK03mcrGOc
v34GghypJV6hiD9UXhGqjj8aluUgijvIibSxc/FmxBzYcRRICB+NCViz2h+J
oOFxHPyfMMXlXVJQy6EagoxGkCxNflX+/h6sZkIriOD2JfpD7eXZYeGHs67y
ljcfQxoJjGE8GMQhRhCdI7yjs1wt3dkYGNt8rcIYR/vj5EIwVkdX++JC1/PZ
6sWv2haf1L+sz3sxfHPxacviy/7vnrS//qL15YuO76aLFp/UvP1mePFp85e3
C98u1C8+aVhcHP3mUcu94cL5yQ6VMKH2ZvaLB92vHnS8+bz71Zc9r99OvJqu
ej5V+WSm9OndRsNue0v+ThSUVFmsu1WgK7+uK7kemZPHKStJLi9OzbxKSrvC
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
              "], {{0, 0}, {159., 80.}}, {0, 255}, ColorFunction -> RGBColor],
              ImageSize -> {98., 49.}, PlotRange -> {{0, 159.}, {0, 80.}}]]]/
         255, 4]; $CellContext`earth[
         Pattern[$CellContext`rasterdata, 
          Blank[]], 
         Pattern[$CellContext`resolution, 
          Blank[]]] := 
       Module[{$CellContext`size, $CellContext`coords, \
$CellContext`MakePointSet, $CellContext`redpts, $CellContext`redfnpts, \
$CellContext`redfun, $CellContext`grnpts, $CellContext`greenfnpts, \
$CellContext`greenfun, $CellContext`blupts, $CellContext`bluefnpts, \
$CellContext`bluefun, $CellContext`r, $CellContext`planetdraft, \
$CellContext`planet}, $CellContext`size = 
          Dimensions[$CellContext`rasterdata]; $CellContext`coords = N[
            
            Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, 0, 2 Pi, 
              2 (Pi/(Part[$CellContext`size, 2] - 1))}, {$CellContext`j, 0, 
              Pi, Pi/(Part[$CellContext`size, 1] - 1)}], 
            4]; $CellContext`MakePointSet[
            Pattern[$CellContext`lis1, 
             Blank[List]], 
            Pattern[$CellContext`lis2, 
             Blank[List]]] := Map[MapThread[Append, #]& , 
            MapThread[
            List, {$CellContext`lis1, $CellContext`lis2}]]; \
{$CellContext`redpts, $CellContext`grnpts, $CellContext`blupts} = 
          Map[Partition[#, 
             Part[$CellContext`size, 1]]& , 
            Transpose[
             Flatten[
              Transpose[$CellContext`rasterdata], 
              1]]]; {$CellContext`redfnpts, $CellContext`greenfnpts, \
$CellContext`bluefnpts} = 
          Map[$CellContext`MakePointSet[$CellContext`coords, #]& , \
{$CellContext`redpts, $CellContext`grnpts, $CellContext`blupts}]; \
{$CellContext`redfun, $CellContext`greenfun, $CellContext`bluefun} = 
          Map[Interpolation[
             Flatten[#, 1], InterpolationOrder -> 
             1]& , {$CellContext`redfnpts, $CellContext`greenfnpts, \
$CellContext`bluefnpts}]; $CellContext`r = 6367.5; 
         SeedRandom[12345]; $CellContext`stars = 3.5 $CellContext`r Table[
             ({Cos[#] Sqrt[1 - #2^2], Sin[#] Sqrt[1 - #2^2], #2}& )[
              RandomReal[{0, 2 Pi}], 
              RandomReal[{-1, 1}]], {50}]; $CellContext`planetdraft := 
          ParametricPlot3D[
           0.99 $CellContext`r {
             Cos[$CellContext`theta] Sin[$CellContext`p], 
              Sin[$CellContext`theta] Sin[$CellContext`p], -
              Cos[$CellContext`p]}, {$CellContext`theta, 0, 2 
             Pi}, {$CellContext`p, 0, Pi}, Mesh -> 6, MaxRecursion -> 0, 
            BoundaryStyle -> Black, PerformanceGoal -> 
            "Speed"]; $CellContext`planet = 
          ParametricPlot3D[
           0.99 $CellContext`r {
             Cos[$CellContext`theta] Sin[$CellContext`p], 
              Sin[$CellContext`theta] Sin[$CellContext`p], -
              Cos[$CellContext`p]}, {$CellContext`theta, 0, 2 
             Pi}, {$CellContext`p, 0, Pi}, Mesh -> None, 
            ColorFunction -> (RGBColor[
              $CellContext`redfun[#4, #5], 
              $CellContext`greenfun[#4, #5], 
              $CellContext`bluefun[#4, #5]]& ), ColorFunctionScaling -> False,
             PlotPoints -> $CellContext`resolution, MaxRecursion -> 0]; 
         GeometricTransformation[
           ControlActive[
            Part[$CellContext`planetdraft, 1], 
            Part[$CellContext`planet, 1]], 
           RotationTransform[180 Degree, {0, 0, 1}]]]; Null); 
     Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->83726941]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "DetailsSection"],

Cell["\<\
Snapshot 1: the optimal international tour (excluding China) of 63,033 km on \
a 2D world map\
\>", "DetailNotes",
 CellChangeTimes->{
  3.35696210375764*^9, {3.494160522510222*^9, 3.494160587025434*^9}, {
   3.4941606363376184`*^9, 3.494160674337375*^9}, {3.494160726415167*^9, 
   3.4941607266495404`*^9}, {3.494182249024341*^9, 3.4941822519226522`*^9}},
 CellID->928644910],

Cell["\<\
Snapshot 2: the complete optimal tour of 78,191 km on a 2D China map\
\>", "DetailNotes",
 CellChangeTimes->{
  3.35696210375764*^9, {3.494160573009899*^9, 3.494160591384781*^9}, {
   3.4941606839779387`*^9, 3.4941607283214045`*^9}},
 CellID->217999973],

Cell[TextData[{
 "Snapshot 3: the official tour of 89,912 km on a 3D world map (Source: ",
 ButtonBox["Torch Relay Beijing 2008",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://torchrelay.beijing2008.cn/en/journey/calendar/index.shtml"], 
    None}],
 ") "
}], "DetailNotes",
 CellChangeTimes->{
  3.35696210375764*^9, {3.4941607242276807`*^9, 3.4941607646336727`*^9}, {
   3.494182277003693*^9, 3.4941822818572493`*^9}},
 CellID->604651075],

Cell[TextData[{
 "The source data comes from ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s",
 StyleBox[" ",
  FontSlant->"Italic"],
 StyleBox["CountryData", "MR"],
 " and ",
 StyleBox["CityData", "MR"],
 " collections. The distance between two cities is calculated by the great \
circle arc function. The algorithms used are the ",
 StyleBox["ThreeOpt", "MR"],
 " and ",
 StyleBox["FindShortestTour", "MR"],
 " methods. The Demonstration uses random seeds to improve the ",
 StyleBox["ThreeOpt", "MR"],
 " algorithm."
}], "DetailNotes",
 CellChangeTimes->{
  3.35696210375764*^9, {3.494165320073267*^9, 3.4941653864165926`*^9}, {
   3.494165599930851*^9, 3.4941656073995533`*^9}, 3.494182306726398*^9},
 CellID->557561223],

Cell["References", "DetailNotes",
 CellChangeTimes->{3.35696210375764*^9, 3.494161065162999*^9, 
  3.494182335473036*^9},
 CellID->113427083],

Cell[TextData[{
 "[1] F. Wu, \"Chapter 9,\" ",
 StyleBox[ButtonBox["Manipulate@Mathematica",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://blog.csdn.net/FreddyMusic/archive/2010/06/02/5643144.aspx"], 
    None},
  ButtonNote->
   "http://blog.csdn.net/FreddyMusic/archive/2010/06/02/5643144.aspx"],
  FontSlant->"Italic"],
 ", Beijing: Tsinghua, 2010."
}], "DetailNotes",
 CellChangeTimes->{
  3.35696210375764*^9, 3.494161059397411*^9, {3.494182336871112*^9, 
   3.494182338014626*^9}, {3.494182421730722*^9, 3.494182430141323*^9}},
 CellID->110269616],

Cell[TextData[{
 "[2] F. Wu, \"Optimizing the 2008 Beijing Olympic Torch Tour,\" ",
 StyleBox["SimWe Journal",
  FontSlant->"Italic"],
 ", ",
 StyleBox["14",
  FontWeight->"Bold"],
 ", 2008 pp. 71\[Dash]90."
}], "DetailNotes",
 CellChangeTimes->{
  3.35696210375764*^9, {3.432025767359375*^9, 3.4320257678125*^9}, {
   3.432025823890625*^9, 3.432025843640625*^9}, {3.43202587615625*^9, 
   3.432026015578125*^9}, {3.432032817125*^9, 3.4320328245625*^9}, {
   3.43203287253125*^9, 3.432032875046875*^9}, {3.43203376921875*^9, 
   3.432033769796875*^9}, {3.43223236403125*^9, 3.432232366046875*^9}, {
   3.432269781546875*^9, 3.432269821828125*^9}, 3.43227719253125*^9, {
   3.43229453759375*^9, 3.4322945585625*^9}, {3.4324412068551226`*^9, 
   3.4324412073551226`*^9}, {3.434018567125*^9, 3.43401860371875*^9}, {
   3.434018928859375*^9, 3.434018953484375*^9}, {3.434019019234375*^9, 
   3.434019065703125*^9}, {3.43401960125*^9, 3.434019615875*^9}, {
   3.43401965359375*^9, 3.434019672484375*^9}, {3.434020287703125*^9, 
   3.43402030703125*^9}, 3.434020540765625*^9, {3.434058099234375*^9, 
   3.434058101828125*^9}, {3.494161182334124*^9, 3.494161224177606*^9}, {
   3.49418233923118*^9, 3.4941823395262413`*^9}, {3.4941824388600817`*^9, 
   3.494182441507676*^9}, {3.494182570101214*^9, 3.49418257530803*^9}, {
   3.577034625748376*^9, 3.5770346385176525`*^9}},
 CellID->92569290],

Cell[TextData[{
 "[3] G. Reinelt, \"The 3-Opt Heuristic and Variants\", ",
 StyleBox["The Traveling Salesman Computational Solution for TSP Applications",
  FontSlant->"Italic"],
 ", New York: Springer\[Dash]Verlag, 1994 pp. 117\[Dash]123."
}], "DetailNotes",
 CellChangeTimes->{
  3.35696210375764*^9, {3.43402081009375*^9, 3.434020832515625*^9}, 
   3.43402087040625*^9, {3.49416123375567*^9, 3.494161257974265*^9}, {
   3.494182342206205*^9, 3.4941823427654963`*^9}, 3.494182585218842*^9},
 CellID->113074647],

Cell[TextData[{
 "[4] D. S. Johnson and L. A. McGeoch, \"Experimental Analysis of Heuristics \
for the STSP,\" ",
 StyleBox["The Traveling Salesman Problem and Its Variations",
  FontSlant->"Italic"],
 " (G. Gutin and A. P. Punnen, eds.), Dordrecht: Kluwer Academic Publishers, \
2002 pp. 407\[Dash]450."
}], "DetailNotes",
 CellChangeTimes->{
  3.35696210375764*^9, {3.43402081009375*^9, 3.43402081103125*^9}, {
   3.4340208818125*^9, 3.43402088553125*^9}, {3.4941612618179903`*^9, 
   3.4941612798335*^9}, 3.494161363598589*^9, {3.4941615475349116`*^9, 
   3.494161556722353*^9}, {3.494161619221953*^9, 3.4941616201594467`*^9}, {
   3.494165262042389*^9, 3.494165288370345*^9}, {3.494182344234486*^9, 
   3.494182345229465*^9}, {3.494182641580399*^9, 3.494182676968091*^9}},
 CellID->364301517]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ControlSuggestionsSection"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Resize Images"]}],
  "\"Click inside an image to reveal its orange resize frame.\\nDrag any of \
the orange resize handles to resize the image.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"ResizeImages"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Rotate and Zoom in 3D"]}],
  RowBox[{
   "\"Drag a 3D graphic to rotate it. Starting the drag near the center \
tumbles\\nthe graphic; starting near a corner turns it parallel to the plane \
of the screen.\\nHold down \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" (or \"", 
    FrameBox[
    "Cmd", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" on Mac) and drag up and down to zoom.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"RotateAndZoomIn3D"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Drag Locators"]}],
  RowBox[{"\"Drag any locator (\"", 
    GraphicsBox[
     LocatorBox[
      Scaled[{0.5, 0.5}]], ImageSize -> 20], 
    "\", etc.) to move it around.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"DragLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Create and Delete Locators"]}],
  RowBox[{"\"Insert a new locator in the graphic by holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key\\nand clicking where you want it to be. Delete a locator by \
clicking it\\nwhile holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" key.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"CreateAndDeleteLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Slider Zoom"]}],
  RowBox[{"\"Hold down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key while moving a slider to make fine adjustments in the slider \
value.\\nHold \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" and/or \"", 
    FrameBox[
    "Shift", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" at the same time as \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" to make ever finer adjustments.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"SliderZoom"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Gamepad Controls"]}],
  "\"Control this Demonstration with a gamepad or other\\nhuman interface \
device connected to your computer.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"GamepadControls"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Automatic Animation"]}],
  RowBox[{"\"Animate a slider in this Demonstration by clicking the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJzzTSzJSM1NLMlMTlRwL0osyMhMLlZwyy8CCjEzMjAwcIKwAgOI/R/IhBKc\n\
/4EAyGAG0f+nTZsGwgysIJIRKsWKLAXGIHFmEpUgLADxWUAkI24jZs+eTaEt\n\
IG+wQKRmzJgBlYf5lhEA30OqWA=="], "Graphics", ImageSize -> {9, 9}, ImageMargins -> 
      0, CellBaseline -> Baseline], BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"button\\nnext to the slider, and then clicking the play button that \
appears.\\nAnimate all controls by selecting \"", 
    StyleBox["Autorun", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"AutomaticAnimation"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Bookmark Animation"]}],
  RowBox[{
   "\"See a prepared animation of this Demonstration by selecting\\n\"", 
    StyleBox["Animate Bookmarks", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"BookmarkAnimation"]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SearchTermsSection"],

Cell["Olympic Torch Tour", "SearchTerms",
 CellID->254709973],

Cell["traveling salesman problem", "SearchTerms",
 CellID->414064211],

Cell["TwoOpt", "SearchTerms",
 CellID->43835544],

Cell["ThreeOpt", "SearchTerms",
 CellID->392186831],

Cell["great circles arc", "SearchTerms",
 CellID->391151500],

Cell["penalty function", "SearchTerms",
 CellID->16076028],

Cell["Country map", "SearchTerms",
 CellID->170456228],

Cell["CityData", "SearchTerms",
 CellID->47945469]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "RelatedLinksSection"],

Cell[TextData[ButtonBox["FindShortestTour",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://reference.wolfram.com/mathematica/ref/FindShortestTour.html"], 
   None}]], "RelatedLinks",
 CellID->114354752],

Cell[TextData[ButtonBox["Traveling Salesman Problem",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://mathworld.wolfram.com/TravelingSalesmanProblem.html"], 
   None}]], "RelatedLinks",
 CellID->54700840],

Cell[TextData[ButtonBox["Traveling Salesman Game",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/TravelingSalesmanGame/"], 
   None}]], "RelatedLinks",
 CellID->507407441],

Cell[TextData[ButtonBox["Comparing Algorithms for the Traveling Salesman \
Problem",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/\
ComparingAlgorithmsForTheTravelingSalesmanProblem/"], None}]], "RelatedLinks",
 CellID->962367989],

Cell[TextData[ButtonBox["Country Ranking Maps",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/CountryRankingMaps/"], 
   None}]], "RelatedLinks",
 CellID->770493313],

Cell[TextData[ButtonBox["Great Circles on Mercator's Chart",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/GreatCirclesOnMercatorsChart/"], 
   None}]], "RelatedLinks",
 CellChangeTimes->{
  3.35696210375764*^9, {3.494182785939962*^9, 3.494182788058859*^9}},
 CellID->924399],

Cell[TextData[ButtonBox["Shortest Path between Two Points on a Sphere",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/\
ShortestPathBetweenTwoPointsOnASphere/"], None}]], "RelatedLinks",
 CellChangeTimes->{
  3.35696210375764*^9, {3.494182823140634*^9, 3.494182823236861*^9}},
 CellID->197128290],

Cell[TextData[ButtonBox["Geosynchronous Orbit",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/GeosynchronousOrbit/"], 
   None}]], "RelatedLinks",
 CellID->320349865],

Cell[TextData[ButtonBox["Saturn's Disappearing Rings",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/SaturnsDisappearingRings/"], 
   None}]], "RelatedLinks",
 CellChangeTimes->{3.35696210375764*^9, 3.494182869259697*^9},
 CellID->428239270]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "AuthorSection"],

Cell[TextData[{
 "Contributed by: ",
 ButtonBox["Frederick Wu",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/author.html?author=Frederick+Wu"], 
    None},
  ButtonNote->
   "http://demonstrations.wolfram.com/author.html?author=Frederick+Wu"]
}], "Author",
 CellID->18300292]
}, Open  ]]
}, Open  ]]
},
WindowSize->{967, 895},
WindowMargins->{{73, Automatic}, {Automatic, 15}},
FrontEndVersion->"9.0 for Microsoft Windows (64-bit) (January 25, 2013)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "Demonstration.nb", 
  CharacterEncoding -> "WindowsANSI"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "AutomaticAnimation"->{
  Cell[383789, 7580, 1464, 31, 22, "ControlSuggestions",
   CellTags->"AutomaticAnimation"]},
 "BookmarkAnimation"->{
  Cell[385256, 7613, 908, 21, 22, "ControlSuggestions",
   CellTags->"BookmarkAnimation"]},
 "CreateAndDeleteLocators"->{
  Cell[381995, 7530, 637, 15, 22, "ControlSuggestions",
   CellTags->"CreateAndDeleteLocators"]},
 "DragLocators"->{
  Cell[381652, 7517, 340, 11, 22, "ControlSuggestions",
   CellTags->"DragLocators"]},
 "GamepadControls"->{
  Cell[383482, 7570, 304, 8, 22, "ControlSuggestions",
   CellTags->"GamepadControls"]},
 "ResizeImages"->{
  Cell[380658, 7489, 311, 8, 22, "ControlSuggestions",
   CellTags->"ResizeImages"]},
 "RotateAndZoomIn3D"->{
  Cell[380972, 7499, 677, 16, 22, "ControlSuggestions",
   CellTags->"RotateAndZoomIn3D"]},
 "SliderZoom"->{
  Cell[382635, 7547, 844, 21, 22, "ControlSuggestions",
   CellTags->"SliderZoom"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"AutomaticAnimation", 389808, 7769},
 {"BookmarkAnimation", 389926, 7772},
 {"CreateAndDeleteLocators", 390048, 7775},
 {"DragLocators", 390165, 7778},
 {"GamepadControls", 390274, 7781},
 {"ResizeImages", 390382, 7784},
 {"RotateAndZoomIn3D", 390492, 7787},
 {"SliderZoom", 390601, 7790}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[567, 22, 253, 4, 74, "DemoTitle"],
Cell[823, 28, 33, 0, 287, "InitializationSection"],
Cell[CellGroupData[{
Cell[881, 32, 29, 0, 194, "ManipulateSection"],
Cell[CellGroupData[{
Cell[935, 36, 97909, 2165, 4183, "Input"],
Cell[98847, 2203, 54979, 1017, 459, "Output",
 CellID->363391025]
}, {2}]]
}, Open  ]],
Cell[CellGroupData[{
Cell[153872, 3226, 36, 0, 169, "ManipulateCaptionSection"],
Cell[153911, 3228, 698, 15, 53, "ManipulateCaption",
 CellID->809479904],
Cell[154612, 3245, 591, 11, 52, "ManipulateCaption",
 CellID->260561711]
}, Open  ]],
Cell[CellGroupData[{
Cell[155240, 3261, 28, 0, 173, "ThumbnailSection"],
Cell[155271, 3263, 54979, 1017, 459, "Output",
 CellID->258982888]
}, Open  ]],
Cell[CellGroupData[{
Cell[210287, 4285, 28, 0, 143, "SnapshotsSection"],
Cell[210318, 4287, 54978, 1017, 459, "Output",
 CellID->46535302],
Cell[265299, 5306, 54978, 1017, 459, "Output",
 CellID->77449163],
Cell[320280, 6325, 54978, 1017, 459, "Output",
 CellID->83726941]
}, Open  ]],
Cell[CellGroupData[{
Cell[375295, 7347, 26, 0, 336, "DetailsSection"],
Cell[375324, 7349, 386, 8, 22, "DetailNotes",
 CellID->928644910],
Cell[375713, 7359, 263, 6, 22, "DetailNotes",
 CellID->217999973],
Cell[375979, 7367, 452, 12, 22, "DetailNotes",
 CellID->604651075],
Cell[376434, 7381, 733, 22, 55, "DetailNotes",
 CellID->557561223],
Cell[377170, 7405, 141, 3, 22, "DetailNotes",
 CellID->113427083],
Cell[377314, 7410, 565, 15, 22, "DetailNotes",
 CellID->110269616],
Cell[377882, 7427, 1385, 26, 22, "DetailNotes",
 CellID->92569290],
Cell[379270, 7455, 512, 10, 37, "DetailNotes",
 CellID->113074647],
Cell[379785, 7467, 796, 15, 37, "DetailNotes",
 CellID->364301517]
}, Open  ]],
Cell[CellGroupData[{
Cell[380618, 7487, 37, 0, 126, "ControlSuggestionsSection"],
Cell[380658, 7489, 311, 8, 22, "ControlSuggestions",
 CellTags->"ResizeImages"],
Cell[380972, 7499, 677, 16, 22, "ControlSuggestions",
 CellTags->"RotateAndZoomIn3D"],
Cell[381652, 7517, 340, 11, 22, "ControlSuggestions",
 CellTags->"DragLocators"],
Cell[381995, 7530, 637, 15, 22, "ControlSuggestions",
 CellTags->"CreateAndDeleteLocators"],
Cell[382635, 7547, 844, 21, 22, "ControlSuggestions",
 CellTags->"SliderZoom"],
Cell[383482, 7570, 304, 8, 22, "ControlSuggestions",
 CellTags->"GamepadControls"],
Cell[383789, 7580, 1464, 31, 22, "ControlSuggestions",
 CellTags->"AutomaticAnimation"],
Cell[385256, 7613, 908, 21, 22, "ControlSuggestions",
 CellTags->"BookmarkAnimation"]
}, Open  ]],
Cell[CellGroupData[{
Cell[386201, 7639, 30, 0, 155, "SearchTermsSection"],
Cell[386234, 7641, 61, 1, 22, "SearchTerms",
 CellID->254709973],
Cell[386298, 7644, 69, 1, 22, "SearchTerms",
 CellID->414064211],
Cell[386370, 7647, 48, 1, 22, "SearchTerms",
 CellID->43835544],
Cell[386421, 7650, 51, 1, 22, "SearchTerms",
 CellID->392186831],
Cell[386475, 7653, 60, 1, 22, "SearchTerms",
 CellID->391151500],
Cell[386538, 7656, 58, 1, 22, "SearchTerms",
 CellID->16076028],
Cell[386599, 7659, 54, 1, 22, "SearchTerms",
 CellID->170456228],
Cell[386656, 7662, 50, 1, 22, "SearchTerms",
 CellID->47945469]
}, Open  ]],
Cell[CellGroupData[{
Cell[386743, 7668, 31, 0, 141, "RelatedLinksSection"],
Cell[386777, 7670, 210, 5, 22, "RelatedLinks",
 CellID->114354752],
Cell[386990, 7677, 211, 5, 22, "RelatedLinks",
 CellID->54700840],
Cell[387204, 7684, 207, 5, 22, "RelatedLinks",
 CellID->507407441],
Cell[387414, 7691, 267, 6, 22, "RelatedLinks",
 CellID->962367989],
Cell[387684, 7699, 201, 5, 22, "RelatedLinks",
 CellID->770493313],
Cell[387888, 7706, 311, 7, 22, "RelatedLinks",
 CellID->924399],
Cell[388202, 7715, 332, 7, 22, "RelatedLinks",
 CellID->197128290],
Cell[388537, 7724, 202, 5, 22, "RelatedLinks",
 CellID->320349865],
Cell[388742, 7731, 277, 6, 22, "RelatedLinks",
 CellID->428239270]
}, Open  ]],
Cell[CellGroupData[{
Cell[389056, 7742, 25, 0, 141, "AuthorSection"],
Cell[389084, 7744, 315, 10, 22, "Author",
 CellID->18300292]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
