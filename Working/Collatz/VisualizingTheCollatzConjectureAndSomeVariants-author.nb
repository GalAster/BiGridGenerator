(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    278256,       6698]
NotebookOptionsPosition[    273537,       6554]
NotebookOutlinePosition[    275160,       6605]
CellTagsIndexPosition[    274824,       6593]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Visualizing the Collatz Conjecture and Some Variants", "DemoTitle",
 CellChangeTimes->{{3.6460436694908447`*^9, 3.646043716082893*^9}, {
  3.64606811380326*^9, 3.6460681161409073`*^9}, {3.646069822415722*^9, 
  3.646069823508358*^9}, {3.647014790476491*^9, 3.647014793970626*^9}, {
  3.64702860759124*^9, 3.647028608006218*^9}}],

Cell[CellGroupData[{

Cell["", "InitializationSection"],

Cell[BoxData[
 RowBox[{"(", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"c", "[", 
     RowBox[{"n_", ",", "mod_"}], "]"}], ":=", "\[IndentingNewLine]", 
    RowBox[{"Switch", "[", "\[IndentingNewLine]", 
     RowBox[{"mod", ",", "\[IndentingNewLine]", "2", ",", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"EvenQ", "[", "#", "]"}], ",", 
         RowBox[{"#", "/", "2"}], ",", 
         RowBox[{
          RowBox[{"3", "#"}], "+", "1"}]}], "]"}], "&"}], ",", 
      "\[IndentingNewLine]", "3", ",", 
      RowBox[{
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{"#", ",", "3"}], "]"}], ",", "0", ",", 
         RowBox[{"#", "/", "3"}], ",", "1", ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", "#"}], "+", "1"}], ")"}], "/", "3"}], ",", "2", ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", "#"}], "-", "1"}], ")"}], "/", "3"}]}], "]"}], "&"}],
       ",", "\[IndentingNewLine]", "5", ",", 
      RowBox[{
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{"#", ",", "5"}], "]"}], ",", "0", ",", 
         RowBox[{"#", "/", "5"}], ",", "1", ",", 
         RowBox[{
          RowBox[{"5", "#"}], "+", "2"}], ",", "2", ",", 
         RowBox[{
          RowBox[{"3", "#"}], "-", "1"}], ",", "3", ",", 
         RowBox[{
          RowBox[{"2", "#"}], "-", "1"}], ",", "4", ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"#", "+", "1"}], ")"}], "/", "5"}]}], "]"}], "&"}], ",", 
      "\[IndentingNewLine]", "7", ",", 
      RowBox[{
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{"#", ",", "7"}], "]"}], ",", "0", ",", 
         RowBox[{"#", "/", "7"}], ",", "1", ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"3", "#"}], "+", "4"}], ")"}], "/", "7"}], ",", "2", ",", 
         RowBox[{
          RowBox[{"4", "#"}], "-", "5"}], ",", "3", ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", "#"}], "+", "22"}], ")"}], "/", "7"}], ",", "4", ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"#", "+", "3"}], ")"}], "/", "7"}], ",", "5", ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"3", "#"}], "-", "1"}], ")"}], "/", "7"}], ",", "6", ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"#", "+", "8"}], ")"}], "/", "7"}]}], "]"}], "&"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"collatzList", "[", 
      RowBox[{"n_Integer", ",", "mod_"}], "]"}], " ", "/;", " ", 
     RowBox[{"n", " ", ">", " ", "0"}]}], " ", ":=", "\[IndentingNewLine]", 
    RowBox[{"NestWhileList", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"c", "[", 
       RowBox[{"n", ",", "mod"}], "]"}], ",", "\[IndentingNewLine]", "n", ",",
       "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"#1", "\[NotEqual]", "1"}], "&"}]}], "]"}]}], ";", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"listLength", "=", 
    RowBox[{"Length", "@", 
     RowBox[{"collatzList", "[", 
      RowBox[{"highlightSelect", ",", "mod"}], "]"}]}]}], ";", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"collatzLengthSelect", "[", 
     RowBox[{"highlightSelect_", ",", "mod_"}], "]"}], ":=", 
    "\[IndentingNewLine]", 
    RowBox[{"Length", "@", 
     RowBox[{"collatzList", "[", 
      RowBox[{"highlightSelect", ",", "mod"}], "]"}]}]}], ";", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"withEdges", ":=", 
    RowBox[{
     RowBox[{"Apply", "[", 
      RowBox[{"DirectedEdge", ",", 
       RowBox[{"Partition", "[", 
        RowBox[{
         RowBox[{"collatzList", "[", "##", "]"}], ",", "2", ",", "1"}], "]"}],
        ",", "2"}], "]"}], "&"}]}], ";", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"position", "[", 
     RowBox[{"n_", ",", "coords_"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Position", "[", 
      RowBox[{"coords", ",", "n"}], "]"}], "//", "Flatten"}]}], ";", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"checkQuadrant", "[", 
     RowBox[{"n_", ",", " ", "G_"}], "]"}], ":=", "\[IndentingNewLine]", 
    RowBox[{"If", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Not", "@", 
       RowBox[{"MemberQ", "[", 
        RowBox[{
         RowBox[{"VertexList", "@", "G"}], ",", "n"}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"After", ",", "Above"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"coords", "=", 
          RowBox[{"Riffle", "[", 
           RowBox[{
            RowBox[{"VertexList", "[", "G", "]"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"AbsoluteOptions", "[", 
                RowBox[{"G", ",", "VertexCoordinates"}], "]"}], "/.", 
               RowBox[{"Rule", "\[Rule]", 
                RowBox[{"(", 
                 RowBox[{"#2", "&"}], ")"}]}]}], ")"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Which", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"First", "@", 
             RowBox[{"Flatten", "@", 
              RowBox[{"Part", "[", 
               RowBox[{"coords", ",", 
                RowBox[{
                 RowBox[{"position", "[", 
                  RowBox[{"n", ",", "coords"}], "]"}], "+", "1"}]}], 
               "]"}]}]}], ">", "0"}], "&&", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Last", "@", 
             RowBox[{"Flatten", "@", 
              RowBox[{"Part", "[", 
               RowBox[{"coords", ",", 
                RowBox[{
                 RowBox[{"position", "[", 
                  RowBox[{"n", ",", "coords"}], "]"}], "+", "1"}]}], 
               "]"}]}]}], ">", "0"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"After", ",", "Above"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"First", "@", 
             RowBox[{"Flatten", "@", 
              RowBox[{"Part", "[", 
               RowBox[{"coords", ",", 
                RowBox[{
                 RowBox[{"position", "[", 
                  RowBox[{"n", ",", "coords"}], "]"}], "+", "1"}]}], 
               "]"}]}]}], ">", "0"}], "&&", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Last", "@", 
             RowBox[{"Flatten", "@", 
              RowBox[{"Part", "[", 
               RowBox[{"coords", ",", 
                RowBox[{
                 RowBox[{"position", "[", 
                  RowBox[{"n", ",", "coords"}], "]"}], "+", "1"}]}], 
               "]"}]}]}], "<", "0"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"After", ",", "Below"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"First", "@", 
             RowBox[{"Flatten", "@", 
              RowBox[{"Part", "[", 
               RowBox[{"coords", ",", 
                RowBox[{
                 RowBox[{"position", "[", 
                  RowBox[{"n", ",", "coords"}], "]"}], "+", "1"}]}], 
               "]"}]}]}], "<", "0"}], "&&", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Last", "@", 
             RowBox[{"Flatten", "@", 
              RowBox[{"Part", "[", 
               RowBox[{"coords", ",", 
                RowBox[{
                 RowBox[{"position", "[", 
                  RowBox[{"n", ",", "coords"}], "]"}], "+", "1"}]}], 
               "]"}]}]}], ">", "0"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"Before", ",", "Above"}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"First", "@", 
             RowBox[{"Flatten", "@", 
              RowBox[{"Part", "[", 
               RowBox[{"coords", ",", 
                RowBox[{
                 RowBox[{"position", "[", 
                  RowBox[{"n", ",", "coords"}], "]"}], "+", "1"}]}], 
               "]"}]}]}], "<", "0"}], "&&", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Last", "@", 
             RowBox[{"Flatten", "@", 
              RowBox[{"Part", "[", 
               RowBox[{"coords", ",", 
                RowBox[{
                 RowBox[{"position", "[", 
                  RowBox[{"n", ",", "coords"}], "]"}], "+", "1"}]}], 
               "]"}]}]}], "<", "0"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"Before", ",", "Below"}], "}"}]}], "]"}]}], "]"}]}], 
     "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"numbEdges", "=", 
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"withEdges", "[", "##", "]"}], "]"}], "&"}]}], ";", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"colors", " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"ColorData", "[", "\"\<Rainbow\>\"", "]"}], "/@", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Range", "[", 
         RowBox[{"numbEdges", "[", "##", "]"}], "]"}], "/", 
        RowBox[{"numbEdges", "[", "##", "]"}]}], ")"}]}], "&"}]}], ";", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"gLayout", "[", "\"\<HierarchicalEdgeBundling\>\"", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"\"\<EdgeLayout\>\"", "\[Rule]", 
      RowBox[{"{", "\"\<HierarchicalEdgeBundling\>\"", "}"}]}], "}"}]}], ";", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"gLayout", "[", "s_", "]"}], ":=", "s"}], ";", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"piecewiseFunc", "[", "mod_", "]"}], ":=", "\[IndentingNewLine]", 
    RowBox[{"Switch", "[", "\[IndentingNewLine]", 
     RowBox[{"mod", ",", "\[IndentingNewLine]", "2", ",", " ", 
      RowBox[{"Style", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"x", "\[Function]", 
           RowBox[{"Piecewise", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{
                  "x", ",", "\"\<\[ThinSpace]/\[ThinSpace]\>\"", ",", "2"}], 
                  "}"}], "]"}], ",", 
                RowBox[{
                 RowBox[{"Mod", "[", 
                  RowBox[{"x", ",", "2"}], "]"}], "\[Congruent]", "0"}]}], 
               "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"3", "x"}], "+", "1"}], "}"}], "]"}], ",", 
                RowBox[{
                 RowBox[{"Mod", "[", 
                  RowBox[{"x", ",", "2"}], "]"}], "\[Congruent]", "1"}]}], 
               "}"}]}], "}"}], "]"}]}], ")"}], "//", "TraditionalForm"}], ",", 
        RowBox[{"FontFamily", "\[Rule]", " ", "\"\<Times\>\""}]}], "]"}], ",",
       "\[IndentingNewLine]", "3", ",", 
      RowBox[{"Style", "[", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"x", "\[Function]", 
           RowBox[{"Piecewise", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{
                  "x", ",", "\"\<\[ThinSpace]/\[ThinSpace]\>\"", ",", "3"}], 
                  "}"}], "]"}], ",", 
                RowBox[{
                 RowBox[{"Mod", "[", 
                  RowBox[{"x", ",", "3"}], "]"}], "\[Congruent]", "0"}]}], 
               "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"2", "x"}], "+", "1"}], "}"}], "]"}], ",", 
                RowBox[{
                 RowBox[{"Mod", "[", 
                  RowBox[{"x", ",", "3"}], "]"}], "\[Congruent]", "1"}]}], 
               "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{"\"\<(\>\"", ",", 
                   RowBox[{
                    RowBox[{"2", "x"}], "-", "1"}], ",", 
                   "\"\<)\[ThinSpace]/\[ThinSpace]\>\"", ",", "3"}], "}"}], 
                 "]"}], ",", 
                RowBox[{
                 RowBox[{"Mod", "[", 
                  RowBox[{"x", ",", "3"}], "]"}], "\[Congruent]", "2"}]}], 
               "}"}]}], "}"}], "]"}]}], ")"}], "//", "TraditionalForm"}], ",", 
        RowBox[{"FontFamily", "\[Rule]", " ", "\"\<Times\>\""}]}], "]"}], ",",
       "\[IndentingNewLine]", "5", ",", 
      RowBox[{"Style", "[", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"x", "\[Function]", 
           RowBox[{"Piecewise", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{
                  "x", ",", "\"\<\[ThinSpace]/\[ThinSpace]\>\"", ",", "5"}], 
                  "}"}], "]"}], ",", 
                RowBox[{
                 RowBox[{"Mod", "[", 
                  RowBox[{"x", ",", "5"}], "]"}], "\[Congruent]", "0"}]}], 
               "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{"\"\<(\>\"", ",", 
                   RowBox[{
                    RowBox[{"5", "x"}], "+", "2"}], ",", "\"\<)\>\""}], "}"}],
                  "]"}], ",", 
                RowBox[{
                 RowBox[{"Mod", "[", 
                  RowBox[{"x", ",", "5"}], "]"}], "\[Congruent]", "1"}]}], 
               "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"3", "x"}], "-", "1"}], ",", 
                RowBox[{
                 RowBox[{"Mod", "[", 
                  RowBox[{"x", ",", "5"}], "]"}], "\[Congruent]", "2"}]}], 
               "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"2", "x"}], "-", "1"}], "}"}], "]"}], ",", 
                RowBox[{
                 RowBox[{"Mod", "[", 
                  RowBox[{"x", ",", "5"}], "]"}], "\[Congruent]", "3"}]}], 
               "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{"\"\<(\>\"", ",", 
                   RowBox[{"x", "+", "1"}], ",", 
                   "\"\<)\[ThinSpace]/\[ThinSpace]\>\"", ",", "5"}], "}"}], 
                 "]"}], ",", 
                RowBox[{
                 RowBox[{"Mod", "[", 
                  RowBox[{"x", ",", "5"}], "]"}], "\[Congruent]", "4"}]}], 
               "}"}]}], "}"}], "]"}]}], ")"}], "//", "TraditionalForm"}], ",", 
        RowBox[{"FontFamily", "\[Rule]", " ", "\"\<Times\>\""}]}], "]"}], ",",
       "\[IndentingNewLine]", "7", ",", 
      RowBox[{"Style", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"x", "\[Function]", 
           RowBox[{"Piecewise", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{
                  "x", ",", "\"\<\[ThinSpace]/\[ThinSpace]\>\"", ",", "7"}], 
                  "}"}], "]"}], ",", 
                RowBox[{
                 RowBox[{"Mod", "[", 
                  RowBox[{"x", ",", "7"}], "]"}], "\[Congruent]", "0"}]}], 
               "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{"\"\<(\>\"", ",", 
                   RowBox[{
                    RowBox[{"3", "x"}], "+", "4"}], ",", 
                   "\"\<)\[ThinSpace]/\[ThinSpace]\>\"", ",", "7"}], "}"}], 
                 "]"}], ",", 
                RowBox[{
                 RowBox[{"Mod", "[", 
                  RowBox[{"x", ",", "7"}], "]"}], "\[Congruent]", "1"}]}], 
               "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"4", "x"}], "-", "5"}], ",", 
                RowBox[{
                 RowBox[{"Mod", "[", 
                  RowBox[{"x", ",", "7"}], "]"}], "\[Congruent]", "2"}]}], 
               "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{"\"\<(\>\"", ",", 
                   RowBox[{
                    RowBox[{"2", "x"}], "+", "22"}], ",", 
                   "\"\<)\[ThinSpace]/\[ThinSpace]\>\"", ",", "7"}], "}"}], 
                 "]"}], ",", 
                RowBox[{
                 RowBox[{"Mod", "[", 
                  RowBox[{"x", ",", "7"}], "]"}], "\[Congruent]", "3"}]}], 
               "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{"\"\<(\>\"", ",", 
                   RowBox[{"x", "+", "3"}], ",", 
                   "\"\<)\[ThinSpace]/\[ThinSpace]\>\"", ",", "7"}], "}"}], 
                 "]"}], ",", 
                RowBox[{
                 RowBox[{"Mod", "[", 
                  RowBox[{"x", ",", "7"}], "]"}], "\[Congruent]", "4"}]}], 
               "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{"\"\<(\>\"", ",", 
                   RowBox[{
                    RowBox[{"3", "x"}], "-", "1"}], ",", 
                   "\"\<)\[ThinSpace]/\[ThinSpace]\>\"", ",", "7"}], "}"}], 
                 "]"}], ",", 
                RowBox[{
                 RowBox[{"Mod", "[", 
                  RowBox[{"x", ",", "7"}], "]"}], "\[Congruent]", "5"}]}], 
               "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{"\"\<(\>\"", ",", 
                   RowBox[{"x", "+", "8"}], ",", 
                   "\"\<)\[ThinSpace]/\[ThinSpace]\>\"", ",", "7"}], "}"}], 
                 "]"}], ",", 
                RowBox[{
                 RowBox[{"Mod", "[", 
                  RowBox[{"x", ",", "7"}], "]"}], "\[Congruent]", "6"}]}], 
               "}"}]}], "}"}], "]"}]}], ")"}], "//", "TraditionalForm"}], ",", 
        RowBox[{"FontFamily", "\[Rule]", " ", "\"\<Times\>\""}]}], "]"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], ")"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.646069048097919*^9, {3.646069197746599*^9, 3.646069245428825*^9}},
 CellID->1941290596]
}, Closed]],

Cell[CellGroupData[{

Cell["", "ManipulateSection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"DynamicModule", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"G", ",", " ", "listAll"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Column", "[", 
      RowBox[{
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{"Row", "[", "\[IndentingNewLine]", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"EventHandler", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"maxCollatzPath", ">", "collatzRange"}], ",", 
                RowBox[{"maxCollatzPath", "=", "collatzRange"}]}], "]"}], ";",
               "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"highlightSelect", ">", "maxCollatzPath"}], ",", 
                RowBox[{"highlightSelect", "=", "maxCollatzPath"}]}], "]"}], 
              ";", "\[IndentingNewLine]", 
              RowBox[{"listFont", " ", "=", " ", 
               RowBox[{"Which", "[", 
                RowBox[{
                 RowBox[{"TrueQ", "[", 
                  RowBox[{
                  "100", "\[GreaterEqual]", " ", "listLength", 
                   "\[GreaterEqual]", "0"}], "]"}], ",", "12", ",", 
                 RowBox[{"TrueQ", "[", 
                  RowBox[{
                  "125", "\[GreaterEqual]", " ", "listLength", ">", "100"}], 
                  "]"}], ",", "10", ",", 
                 RowBox[{"TrueQ", "[", 
                  RowBox[{
                  "150", "\[GreaterEqual]", " ", "listLength", " ", ">", " ", 
                   "125"}], "]"}], ",", " ", "9", ",", 
                 RowBox[{"TrueQ", "[", 
                  RowBox[{"listLength", " ", ">", " ", "150"}], "]"}], ",", 
                 "8", ",", "True", ",", "12"}], "]"}]}], ";", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"With", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"ptslist", "=", 
                  RowBox[{"Sort", "@", 
                   RowBox[{"DeleteDuplicates", "@", 
                    RowBox[{"Flatten", "@", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"collatzList", "[", 
                    RowBox[{"i", ",", "mod"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "1", ",", "maxCollatzPath", ",", "1"}], 
                    "}"}]}], "]"}]}]}]}]}], "}"}], ",", "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"Not", "@", 
                   RowBox[{"MemberQ", "[", 
                    RowBox[{"ptslist", ",", "labeledPoint"}], "]"}]}], ",", 
                  RowBox[{"labeledPoint", "=", "highlightSelect"}]}], "]"}]}],
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"G", "=", "\[IndentingNewLine]", 
               RowBox[{"Fold", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"SetProperty", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"#1", "\[IndentingNewLine]", ",", "#2"}], "}"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"VertexStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"Red", ",", 
                    RowBox[{"Opacity", "[", "1", "]"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    "VertexShapeFunction", "\[Rule]", "\"\<Star\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"VertexSize", "\[Rule]", " ", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Scaled\>\"", ",", "0.04"}], "}"}]}]}], 
                    "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
                   "]"}], "&"}], ",", 
                 RowBox[{"Graph", "[", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"Tooltip", "[", 
                    RowBox[{"#", ",", "#"}], "]"}], "&"}], "/@", 
                    RowBox[{"Union", "@@", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"collatzList", "[", 
                    RowBox[{"i", ",", "mod"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "maxCollatzPath"}], "}"}]}], "]"}]}]}], 
                   ",", "\[IndentingNewLine]", 
                   RowBox[{"listAll", "=", "\[IndentingNewLine]", 
                    RowBox[{"Union", "@", "\[IndentingNewLine]", 
                    RowBox[{"Flatten", "@", "\[IndentingNewLine]", 
                    RowBox[{"Table", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"withEdges", "[", 
                    RowBox[{"i", ",", "mod"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "1", ",", "maxCollatzPath"}], "}"}]}], 
                    "\[IndentingNewLine]", "]"}]}]}]}], ",", 
                   "\[IndentingNewLine]", "\[IndentingNewLine]", 
                   RowBox[{"VertexLabelStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"Red", ",", "20"}], "]"}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"GraphLayout", "\[Rule]", 
                    RowBox[{"gLayout", "[", "graphType", "]"}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"VertexSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Scaled\>\"", ",", 
                    RowBox[{"2.4", "/", 
                    RowBox[{"Length", "[", "listAll", "]"}]}]}], "}"}]}], ",", 
                   RowBox[{"VertexStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Opacity", "[", "0", "]"}], ",", 
                    RowBox[{"EdgeForm", "[", "None", "]"}]}], "]"}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"EdgeShapeFunction", "\[Rule]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Arrowheads", "[", ".03", "]"}], ",", 
                    RowBox[{"Arrow", "[", "#", "]"}]}], "}"}], "&"}], ")"}]}],
                    ",", "\[IndentingNewLine]", 
                   RowBox[{
                   "VertexShapeFunction", "\[Rule]", "\"\<Square\>\""}], ",", 
                   "\[IndentingNewLine]", "\[IndentingNewLine]", 
                   RowBox[{"PlotRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"a1", ",", "a2"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"b1", ",", "b2"}], "}"}]}], "}"}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"ImageSize", "\[Rule]", " ", "372"}]}], 
                  "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "highlightSelect", ",", "labeledPoint"}], 
                  "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"HighlightGraph", "[", 
               RowBox[{
                RowBox[{"Graph", "[", 
                 RowBox[{"G", ",", 
                  RowBox[{"EdgeStyle", "\[Rule]", "Gray"}], ",", 
                  RowBox[{"VertexLabels", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"1", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"\"\<1\>\"", ",", 
                    RowBox[{"checkQuadrant", "[", 
                    RowBox[{"1", ",", " ", "G"}], "]"}]}], "]"}]}], ",", 
                    RowBox[{"highlightSelect", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"highlightSelect", ",", 
                    RowBox[{"checkQuadrant", "[", 
                    RowBox[{"highlightSelect", ",", " ", "G"}], "]"}]}], 
                    "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"labeledPoint", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"labeledPoint", ",", 
                    RowBox[{"checkQuadrant", "[", 
                    RowBox[{"labeledPoint", ",", " ", "G"}], "]"}]}], 
                    "]"}]}]}], "}"}]}]}], "]"}], ",", 
                RowBox[{"MapThread", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Style", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", 
                    RowBox[{"1", "/", "105"}], "]"}], ",", "#2"}], "]"}]}], 
                    "]"}], "&"}], ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"withEdges", "[", 
                    RowBox[{"highlightSelect", ",", "mod"}], "]"}], ",", 
                    RowBox[{"Reverse", "@", 
                    RowBox[{"colors", "[", 
                    RowBox[{"highlightSelect", ",", "mod"}], "]"}]}]}], 
                   "}"}]}], "]"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
              "\"\<MouseDown\>\"", "\[RuleDelayed]", "\[IndentingNewLine]", 
               RowBox[{"(", 
                RowBox[{"Switch", "[", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"MousePosition", "[", "\"\<Graphics\>\"", "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"First", "[", 
                    RowBox[{
                    "ToHeldExpression", "[", "\"\<CurrentValue\>\"", "]"}], 
                    "]"}], "[", "\"\<ShiftKey\>\"", "]"}]}], 
                   "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
                  "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                   "Determine", " ", "quadrant", " ", "of", " ", "mouse", " ",
                     "during", " ", 
                    RowBox[{"click", ".", "\[IndentingNewLine]", "Creates"}], 
                    " ", "history", " ", "of", " ", "mouse", " ", "clicks", 
                    " ", "depending", " ", "on", " ", "quadrant", " ", 
                    "clicked", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"defined", " ", "counter"}], "-", 
                    RowBox[{
                    "clockwise", " ", "beginning", " ", "with", " ", "top"}], 
                    "-", "right"}], ")"}], ".", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "Removes"}], " ", "last", " ", 
                    "entry", " ", "of", " ", "click", " ", "history", " ", 
                    "to", " ", "return", " ", "to", " ", "previous", " ", 
                    "plot", " ", "range", " ", "view", " ", "when", " ", 
                    "shift", " ", "key", " ", "is", " ", 
                    RowBox[{"depressed", "."}]}], "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"_", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"First", "[", "#", "]"}], ">", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a1", "+", "a2"}], ")"}], "/", "2"}]}], "&&", 
                    RowBox[{
                    RowBox[{"Last", "[", "#", "]"}], ">", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"b1", "+", "b2"}], ")"}], "/", "2"}]}]}], "&"}], 
                    ")"}]}], ",", "False"}], "}"}], ",", 
                  RowBox[{
                   RowBox[{"a1", "=", 
                    RowBox[{"a1", "/.", 
                    RowBox[{"{", 
                    RowBox[{"a1", "\[Rule]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a1", "+", "a2"}], ")"}], "/", "2"}]}], "}"}]}]}],
                    ";", 
                   RowBox[{"b1", "=", 
                    RowBox[{"b1", "/.", 
                    RowBox[{"{", 
                    RowBox[{"b1", "\[Rule]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"b1", "+", "b2"}], ")"}], "/", "2"}]}], "}"}]}]}],
                    ";", "\[IndentingNewLine]", 
                   RowBox[{"AppendTo", "[", 
                    RowBox[{"history", ",", "1"}], "]"}]}], ",", 
                  "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"_", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Last", "[", "#", "]"}], ">", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"b1", "+", "b2"}], ")"}], "/", "2"}]}], "&"}], 
                    ")"}]}], ",", "False"}], "}"}], ",", 
                  RowBox[{
                   RowBox[{"a2", "=", 
                    RowBox[{"a2", "/.", 
                    RowBox[{"{", 
                    RowBox[{"a2", "\[Rule]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a1", "+", "a2"}], ")"}], "/", "2"}]}], "}"}]}]}],
                    ";", 
                   RowBox[{"b1", "=", 
                    RowBox[{"b1", "/.", 
                    RowBox[{"{", 
                    RowBox[{"b1", "\[Rule]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"b1", "+", "b2"}], ")"}], "/", "2"}]}], "}"}]}]}],
                    ";", "\[IndentingNewLine]", 
                   RowBox[{"AppendTo", "[", 
                    RowBox[{"history", ",", "2"}], "]"}]}], ",", 
                  "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"_", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"First", "[", "#", "]"}], "\[LessEqual]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a1", "+", "a2"}], ")"}], "/", "2"}]}], "&"}], 
                    ")"}]}], ",", "False"}], "}"}], ",", 
                  RowBox[{
                   RowBox[{"a2", "=", 
                    RowBox[{"a2", "/.", 
                    RowBox[{"{", 
                    RowBox[{"a2", "\[Rule]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a1", "+", "a2"}], ")"}], "/", "2"}]}], "}"}]}]}],
                    ";", 
                   RowBox[{"b2", "=", 
                    RowBox[{"b2", "/.", 
                    RowBox[{"{", 
                    RowBox[{"b2", "\[Rule]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"b1", "+", "b2"}], ")"}], "/", "2"}]}], "}"}]}]}],
                    ";", "\[IndentingNewLine]", 
                   RowBox[{"AppendTo", "[", 
                    RowBox[{"history", ",", "3"}], "]"}]}], ",", 
                  "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"_", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"First", "[", "#", "]"}], ">", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a1", "+", "a2"}], ")"}], "/", "2"}]}], "&"}], 
                    ")"}]}], ",", "False"}], "}"}], ",", 
                  RowBox[{
                   RowBox[{"a1", "=", 
                    RowBox[{"a1", "/.", 
                    RowBox[{"{", 
                    RowBox[{"a1", "\[Rule]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a1", "+", "a2"}], ")"}], "/", "2"}]}], "}"}]}]}],
                    ";", 
                   RowBox[{"b2", "=", 
                    RowBox[{"b2", "/.", 
                    RowBox[{"{", 
                    RowBox[{"b2", "\[Rule]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"b1", "+", "b2"}], ")"}], "/", "2"}]}], "}"}]}]}],
                    ";", "\[IndentingNewLine]", 
                   RowBox[{"AppendTo", "[", 
                    RowBox[{"history", ",", "4"}], "]"}]}], ",", 
                  "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{"_", ",", "True"}], "}"}], ",", 
                  "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                   "Prevent", " ", "zooming", " ", "out", " ", "from", " ", 
                    "default", " ", "view"}], "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"If", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "history", "]"}], "\[NotEqual]", 
                    "0"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"back", "=", 
                    RowBox[{"Last", "[", "history", "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"history", "=", 
                    RowBox[{"Take", "[", 
                    RowBox[{"history", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "2"}]}], "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"Adjust", " ", "plot", " ", "range", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"a1", ",", "a2"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"b1", ",", "b2"}], "}"}]}], "}"}], " ", "based", 
                    " ", "on", " ", "position", " ", "of", " ", "mouse", " ", 
                    "during", " ", "click"}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"Switch", "[", "\[IndentingNewLine]", 
                    RowBox[{"back", ",", "\[IndentingNewLine]", "1", ",", 
                    RowBox[{
                    RowBox[{"a1", "=", 
                    RowBox[{
                    RowBox[{"2", "a1"}], "-", "a2"}]}], ";", 
                    RowBox[{"b1", "=", 
                    RowBox[{
                    RowBox[{"2", "b1"}], "-", "b2"}]}]}], ",", 
                    "\[IndentingNewLine]", "2", ",", 
                    RowBox[{
                    RowBox[{"a2", "=", 
                    RowBox[{
                    RowBox[{"2", "a2"}], "-", "a1"}]}], ";", 
                    RowBox[{"b1", "=", 
                    RowBox[{
                    RowBox[{"2", "b1"}], "-", "b2"}]}]}], ",", 
                    "\[IndentingNewLine]", "3", ",", 
                    RowBox[{
                    RowBox[{"a2", "=", 
                    RowBox[{
                    RowBox[{"2", "a2"}], "-", "a1"}]}], ";", 
                    RowBox[{"b2", "=", 
                    RowBox[{
                    RowBox[{"2", "b2"}], "-", "b1"}]}]}], ",", 
                    "\[IndentingNewLine]", "4", ",", 
                    RowBox[{
                    RowBox[{"a1", "=", 
                    RowBox[{
                    RowBox[{"2", "a1"}], "-", "a2"}]}], ";", 
                    RowBox[{"b2", "=", 
                    RowBox[{
                    RowBox[{"2", "b2"}], "-", "b1"}]}]}]}], 
                    "\[IndentingNewLine]", "]"}]}]}], "]"}]}], "]"}], ")"}]}],
               "}"}]}], "]"}], ",", 
           RowBox[{"Spacer", "[", "10", "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"Column", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"showpath", "&&", 
                 RowBox[{"IntegerQ", "[", "highlightSelect", "]"}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"Text", "[", 
                 RowBox[{"Style", "[", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"listLength", "=", 
                    RowBox[{"Length", "[", "#", "]"}]}], ";", 
                    RowBox[{"{", "#", "}"}]}], ")"}], "&"}], "@", 
                    RowBox[{"collatzList", "[", 
                    RowBox[{"highlightSelect", ",", "mod"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", " ", "200"}]}], "]"}], 
                   ",", 
                   RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}], ",", 
                   RowBox[{"FontSize", "\[Rule]", " ", "listFont"}]}], "]"}], 
                 "]"}], ",", "\[IndentingNewLine]", "\"\<\>\""}], "]"}], ",", 
              ",", 
              RowBox[{"Column", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"Text", "[", 
                    RowBox[{"Style", "[", " ", 
                    RowBox[{"\"\<function for mod \>\"", ",", 
                    RowBox[{"FontFamily", "\[Rule]", " ", "\"\<Times\>\""}]}],
                     "]"}], "]"}], ",", 
                    RowBox[{"Text", "[", 
                    RowBox[{"Style", "[", " ", 
                    RowBox[{
                    RowBox[{"mod", " ", "\"\<: \>\""}], ",", 
                    RowBox[{"FontFamily", "\[Rule]", " ", "\"\<Times\>\""}]}],
                     "]"}], "]"}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Text", "[", 
                  RowBox[{"Style", "[", " ", 
                   RowBox[{
                    RowBox[{"piecewiseFunc", "[", "mod", "]"}], ",", 
                    RowBox[{"FontFamily", "\[Rule]", " ", "\"\<Times\>\""}]}],
                    "]"}], "]"}]}], "}"}], "]"}], ",", ",", 
              "\[IndentingNewLine]", 
              RowBox[{"Row", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Text", "[", 
                  RowBox[{"Style", "[", " ", 
                   RowBox[{"\"\<max sequence length up to \>\"", ",", 
                    RowBox[{"FontFamily", "\[Rule]", " ", "\"\<Times\>\""}]}],
                    "]"}], "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Text", "[", 
                  RowBox[{"Style", "[", 
                   RowBox[{"maxCollatzPath", " ", ",", 
                    RowBox[{"FontFamily", "\[Rule]", " ", "\"\<Times\>\""}]}],
                    "]"}], "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Text", "[", 
                  RowBox[{"Style", "[", 
                   RowBox[{"\"\<: \>\"", " ", ",", 
                    RowBox[{"FontFamily", "\[Rule]", " ", "\"\<Times\>\""}]}],
                    "]"}], "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Text", "[", 
                  RowBox[{"Style", "[", 
                   RowBox[{
                    RowBox[{"Max", "@", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"Length", "@", 
                    RowBox[{"collatzList", "[", 
                    RowBox[{"i", ",", "mod"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "1", ",", "maxCollatzPath"}], "}"}]}], 
                    "]"}]}], " ", ",", 
                    RowBox[{"FontFamily", "\[Rule]", " ", "\"\<Times\>\""}]}],
                    "]"}], "]"}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"Row", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Text", "[", 
                  RowBox[{"Style", "[", " ", 
                   RowBox[{"\"\<starting number of max sequence: \>\"", ",", 
                    RowBox[{"FontFamily", "\[Rule]", " ", "\"\<Times\>\""}]}],
                    "]"}], "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Text", "[", 
                  RowBox[{"Style", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"Length", "@", 
                    RowBox[{"collatzList", "[", 
                    RowBox[{"i", ",", "mod"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "1", ",", "maxCollatzPath"}], "}"}]}], 
                    "]"}], ",", 
                    RowBox[{"Max", "@", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"Length", "@", 
                    RowBox[{"collatzList", "[", 
                    RowBox[{"i", ",", "mod"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "1", ",", "maxCollatzPath"}], "}"}]}], 
                    "]"}]}]}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"FontFamily", "\[Rule]", " ", "\"\<Times\>\""}]}],
                    "]"}], "]"}]}], "}"}], "]"}], ",", ",", 
              "\[IndentingNewLine]", 
              RowBox[{"Row", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Text", "[", 
                  RowBox[{"Style", "[", " ", 
                   RowBox[{"\"\<current sequence length \>\"", ",", 
                    RowBox[{"FontFamily", "\[Rule]", " ", "\"\<Times\>\""}]}],
                    "]"}], "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Text", "[", 
                  RowBox[{"Style", "[", " ", 
                   RowBox[{"\"\< = \>\"", ",", 
                    RowBox[{"FontFamily", "\[Rule]", " ", "\"\<Times\>\""}]}],
                    "]"}], "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Text", "[", 
                  RowBox[{"Style", "[", 
                   RowBox[{
                    RowBox[{"collatzLengthSelect", "[", 
                    RowBox[{"highlightSelect", ",", "mod"}], "]"}], ",", 
                    RowBox[{"FontFamily", "\[Rule]", " ", "\"\<Times\>\""}]}],
                    "]"}], "]"}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"Row", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Text", "[", 
                  RowBox[{"Style", "[", " ", 
                   RowBox[{"\"\<max value of current sequence: \>\"", ",", 
                    RowBox[{"FontFamily", "\[Rule]", " ", "\"\<Times\>\""}]}],
                    "]"}], "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Text", "[", 
                  RowBox[{"Style", "[", 
                   RowBox[{
                    RowBox[{"Max", "@", 
                    RowBox[{"collatzList", "[", 
                    RowBox[{"highlightSelect", ",", "mod"}], "]"}]}], " ", 
                    ",", 
                    RowBox[{"FontFamily", "\[Rule]", " ", "\"\<Times\>\""}]}],
                    "]"}], "]"}]}], "}"}], "]"}]}], "\[IndentingNewLine]", 
             "}"}], "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Alignment", "\[Rule]", "Center"}], ",", 
       RowBox[{"Spacings", "\[Rule]", 
        RowBox[{"If", "[", 
         RowBox[{"showpath", ",", "Automatic", ",", 
          RowBox[{"-", "0.25"}]}], "]"}]}]}], "]"}]}], "]"}], 
   "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
   RowBox[{"Column", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Control", "@", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "highlightSelect", ",", "3", ",", 
           "\"\<select starting number\>\""}], "}"}], ",", "2", ",", 
         "maxCollatzPath", ",", "1", ",", 
         RowBox[{"Appearance", "\[Rule]", " ", "\"\<Labeled\>\""}]}], "}"}]}],
       ",", "\[IndentingNewLine]", 
      RowBox[{"Row", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Control", "@", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
             "maxCollatzPath", ",", "100", ",", 
              "\"\<graph Collatz from 1 to\>\""}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"100", ",", "250", ",", "500", ",", "750", ",", "1000"}],
              "}"}], ",", 
            RowBox[{"ControlType", "\[Rule]", "SetterBar"}]}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Spacer", "[", "15", "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Control", "@", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
             "graphType", ",", "\"\<HierarchicalEdgeBundling\>\"", ",", 
              "\"\<graph type\>\""}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "\"\<HierarchicalEdgeBundling\>\"", ",", 
              "\"\<CircularEmbedding\>\""}], "}"}], ",", 
            RowBox[{"ControlType", "\[Rule]", " ", "PopupMenu"}]}], "}"}]}]}],
         "\[IndentingNewLine]", "}"}], "]"}]}], "}"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Row", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Control", "@", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"labeledPoint", ",", 
           RowBox[{"{", "}"}], ",", "\"\<label vertex\>\""}], "}"}], ",", 
         RowBox[{"Drop", "[", 
          RowBox[{
           RowBox[{"Sort", "@", 
            RowBox[{"DeleteDuplicates", "@", 
             RowBox[{"Flatten", "@", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"collatzList", "[", 
                 RowBox[{"i", ",", "mod"}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", "1", ",", "maxCollatzPath", ",", "1"}], 
                 "}"}]}], "]"}]}]}]}], ",", "1"}], "]"}], ",", 
         RowBox[{"ControlType", "\[Rule]", " ", "PopupMenu"}]}], "}"}]}], ",", 
      RowBox[{"Spacer", "[", "15", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Control", "@", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "mod", ",", "2", ",", "\"\<modulus of Collatz variation\>\""}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "3", ",", "5", ",", "7"}], "}"}], ",", 
         RowBox[{"ControlType", "\[Rule]", " ", "SetterBar"}]}], "}"}]}], ",", 
      RowBox[{"Spacer", "[", "15", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Control", "@", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"showpath", ",", "False", ",", "\"\<show path\>\""}], "}"}],
          ",", 
         RowBox[{"{", 
          RowBox[{"True", ",", "False"}], "}"}]}], "}"}]}]}], "}"}], "]"}], 
   ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a1", ",", 
       RowBox[{"-", "1.4"}]}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a2", ",", 
       RowBox[{"-", "a1"}]}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"b1", ",", "a1"}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"b2", ",", 
       RowBox[{"-", "a1"}]}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"history", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"back", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mod", ",", "2"}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"listFont", ",", "12"}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", " ", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"listLength", ",", 
     RowBox[{"ControlType", "\[Rule]", " ", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"highlightSelect", ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"graphType", ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"labeledPoint", ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"maxCollatzPath", ",", 
     RowBox[{"ControlType", "\[Rule]", " ", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"showpath", ",", " ", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"collatzRange", ",", 
     RowBox[{"ControlType", "\[Rule]", " ", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
   RowBox[{"AutorunSequencing", "\[Rule]", " ", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.646006757481988*^9, {3.646040847194413*^9, 3.646040850675825*^9}, {
   3.646041069194974*^9, 3.6460410709002953`*^9}, {3.6460411187403593`*^9, 
   3.646041181177023*^9}, {3.6460413890459633`*^9, 3.646041406745063*^9}, {
   3.6460414373342743`*^9, 3.646041438799368*^9}, {3.64604150363583*^9, 
   3.646041506863193*^9}, {3.646041642154814*^9, 3.6460416435452547`*^9}, {
   3.646041736958172*^9, 3.646041777504306*^9}, {3.6460418248697643`*^9, 
   3.646041825069455*^9}, {3.6460418738611393`*^9, 3.646041874020226*^9}, {
   3.646041908586364*^9, 3.646041908868616*^9}, {3.646042769444319*^9, 
   3.646042769697783*^9}, {3.646042851327406*^9, 3.646042852494279*^9}, {
   3.646042955453958*^9, 3.646042961633852*^9}, 3.6460430029157887`*^9, {
   3.646043050997158*^9, 3.6460430707441063`*^9}, 3.646043155213674*^9, {
   3.6460433518600616`*^9, 3.646043405734159*^9}, {3.646044301340994*^9, 
   3.646044358248267*^9}, {3.6460444010805893`*^9, 3.646044401259686*^9}, {
   3.646044463012298*^9, 3.6460444637411118`*^9}, {3.6460445396659203`*^9, 
   3.6460445404243937`*^9}, {3.646044601859602*^9, 3.646044636054962*^9}, 
   3.6460447514871473`*^9, {3.6460449151357594`*^9, 3.6460449591757793`*^9}, {
   3.646045017208436*^9, 3.646045019728904*^9}, {3.646045050279817*^9, 
   3.6460450676584272`*^9}, {3.646045108662368*^9, 3.64604513036551*^9}, {
   3.646045178044829*^9, 3.646045180266487*^9}, {3.646045220724729*^9, 
   3.6460452701102877`*^9}, 3.646045303345764*^9, {3.646045413154154*^9, 
   3.646045417151104*^9}, 3.646045468786007*^9, {3.64605092695887*^9, 
   3.646050942747982*^9}, {3.646050983081346*^9, 3.646051064348379*^9}, {
   3.646051112984522*^9, 3.6460511343632307`*^9}, {3.646051263806076*^9, 
   3.64605130065941*^9}, {3.646051336239025*^9, 3.646051375068318*^9}, {
   3.646051407494808*^9, 3.646051461434287*^9}, 3.6460515379490547`*^9, {
   3.646051582265346*^9, 3.6460515829977217`*^9}, {3.646051627333997*^9, 
   3.6460516521656523`*^9}, {3.64605176476048*^9, 3.6460517649023657`*^9}, {
   3.6460518308411503`*^9, 3.646051860304501*^9}, {3.646057505231881*^9, 
   3.646057506123499*^9}, 3.6460580810921593`*^9, {3.646058136140448*^9, 
   3.646058143152729*^9}, {3.646058269617155*^9, 3.646058285855192*^9}, {
   3.646058581835217*^9, 3.64605858918766*^9}, {3.646058705415867*^9, 
   3.64605871175778*^9}, {3.646059104084449*^9, 3.646059146643148*^9}, {
   3.646059210712537*^9, 3.646059210823451*^9}, {3.646059958537027*^9, 
   3.646059987251328*^9}, {3.646060142332231*^9, 3.646060199366232*^9}, {
   3.646060236891816*^9, 3.6460602371243467`*^9}, {3.646060270098522*^9, 
   3.6460605012539988`*^9}, {3.6460605445584383`*^9, 3.646060545357525*^9}, {
   3.646060592285377*^9, 3.646060631401112*^9}, {3.646060688985097*^9, 
   3.646060702185487*^9}, {3.646061258688469*^9, 3.646061280881906*^9}, {
   3.646061342386656*^9, 3.6460613563861923`*^9}, {3.646061527092824*^9, 
   3.646061527196232*^9}, {3.646061623708029*^9, 3.646061712322644*^9}, {
   3.646061748132869*^9, 3.646061851059359*^9}, {3.6460619160928507`*^9, 
   3.6460619722346277`*^9}, {3.646062033235454*^9, 3.646062033362071*^9}, 
   3.646062066093295*^9, 3.646062411716688*^9, {3.646062695815192*^9, 
   3.6460626998633966`*^9}, {3.64606289548147*^9, 3.646063008563151*^9}, {
   3.646063054061735*^9, 3.646063058574749*^9}, {3.64606310076547*^9, 
   3.646063190733439*^9}, {3.6460633323772*^9, 3.646063343467091*^9}, {
   3.6460633784757*^9, 3.646063380544133*^9}, 3.646063592483181*^9, {
   3.64606392736903*^9, 3.6460639861034822`*^9}, {3.646064055231448*^9, 
   3.646064067557654*^9}, {3.6460641019136066`*^9, 3.646064102864717*^9}, {
   3.646064342240281*^9, 3.6460643436821423`*^9}, {3.646067027907035*^9, 
   3.646067046848166*^9}, {3.64606708255162*^9, 3.646067163977569*^9}, {
   3.64606721186624*^9, 3.646067231199646*^9}, {3.646067918405675*^9, 
   3.646067940715255*^9}, {3.646068333754293*^9, 3.646068343549239*^9}, {
   3.6460684357068367`*^9, 3.646068510503642*^9}, {3.646068598955277*^9, 
   3.646068621730755*^9}, {3.646069033408085*^9, 3.646069035353035*^9}, {
   3.64606907055653*^9, 3.646069072832548*^9}, 3.646069371489234*^9, {
   3.646084706854602*^9, 3.646084718481676*^9}, {3.6470028713026733`*^9, 
   3.6470028875651865`*^9}, {3.6470030023048005`*^9, 3.647003005502862*^9}, {
   3.647020167139529*^9, 3.647020241235846*^9}, {3.647020279196142*^9, 
   3.647020287840624*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`a1$$ = -1.4, $CellContext`a2$$ = \
-$CellContext`a1$$, $CellContext`b1$$ = $CellContext`a1$$, $CellContext`b2$$ \
= -$CellContext`a1$$, $CellContext`back$$ = {}, $CellContext`collatzRange$$ = 
    Null, $CellContext`graphType$$ = 
    "HierarchicalEdgeBundling", $CellContext`highlightSelect$$ = 
    3, $CellContext`history$$ = {}, $CellContext`labeledPoint$$ = 
    3, $CellContext`listFont$$ = 12, $CellContext`listLength$$ = 
    2, $CellContext`maxCollatzPath$$ = 100, $CellContext`mod$$ = 
    2, $CellContext`showpath$$ = False, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`highlightSelect$$], 3, "select starting number"}, 2, 
      Dynamic[$CellContext`maxCollatzPath$$], 1}, {{
       Hold[$CellContext`maxCollatzPath$$], 100, "graph Collatz from 1 to"}, {
      100, 250, 500, 750, 1000}}, {{
       Hold[$CellContext`graphType$$], "HierarchicalEdgeBundling", 
       "graph type"}, {"HierarchicalEdgeBundling", "CircularEmbedding"}}, {
      Hold[
       Column[{
         Manipulate`Place[1], 
         Row[{
           Manipulate`Place[2], 
           Spacer[15], 
           Manipulate`Place[3]}]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`labeledPoint$$], 3, "label vertex"}, 
      Dynamic[
       Drop[
        Sort[
         DeleteDuplicates[
          Flatten[
           Table[
            $CellContext`collatzList[$CellContext`i, $CellContext`mod$$], \
{$CellContext`i, 1, $CellContext`maxCollatzPath$$, 1}]]]], 1]]}, {{
       Hold[$CellContext`mod$$], 2, "modulus of Collatz variation"}, {2, 3, 5,
       7}}, {{
       Hold[$CellContext`showpath$$], False, "show path"}, {True, False}}, {
      Hold[
       Row[{
         Manipulate`Place[4], 
         Spacer[15], 
         Manipulate`Place[5], 
         Spacer[15], 
         Manipulate`Place[6]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`a1$$], -1.4}}, {{
       Hold[$CellContext`a2$$], -$CellContext`a1$$}}, {{
       Hold[$CellContext`b1$$], $CellContext`a1$$}}, {{
       Hold[$CellContext`b2$$], -$CellContext`a1$$}}, {{
       Hold[$CellContext`history$$], {}}}, {{
       Hold[$CellContext`back$$], {}}}, {{
       Hold[$CellContext`mod$$], 2}}, {{
       Hold[$CellContext`listFont$$], 12}}, {{
       Hold[$CellContext`listLength$$], 2}}, {{
       Hold[$CellContext`highlightSelect$$], 3}}, {{
       Hold[$CellContext`graphType$$], "HierarchicalEdgeBundling"}}, {{
       Hold[$CellContext`labeledPoint$$], 3}}, {{
       Hold[$CellContext`maxCollatzPath$$], 100}}, {{
       Hold[$CellContext`showpath$$], False}}, {{
       Hold[$CellContext`collatzRange$$], Null}}}, Typeset`size$$ = {
    561., {183.3544921875, 188.6455078125}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`highlightSelect$6078$$ = 
    0, $CellContext`maxCollatzPath$6079$$ = 0, $CellContext`graphType$6080$$ =
     False, $CellContext`mod$6081$$ = 0, $CellContext`showpath$6082$$ = 
    False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`a1$$ = -1.4, $CellContext`a2$$ = \
-$CellContext`a1$$, $CellContext`b1$$ = $CellContext`a1$$, $CellContext`b2$$ = \
-$CellContext`a1$$, $CellContext`back$$ = {}, $CellContext`collatzRange$$ = 
        Null, $CellContext`graphType$$ = 
        "HierarchicalEdgeBundling", $CellContext`highlightSelect$$ = 
        3, $CellContext`history$$ = {}, $CellContext`labeledPoint$$ = 
        3, $CellContext`listFont$$ = 12, $CellContext`listLength$$ = 
        2, $CellContext`maxCollatzPath$$ = 100, $CellContext`mod$$ = 
        2, $CellContext`showpath$$ = False}, "ControllerVariables" :> {
        Hold[$CellContext`highlightSelect$$, \
$CellContext`highlightSelect$6078$$, 0], 
        Hold[$CellContext`maxCollatzPath$$, \
$CellContext`maxCollatzPath$6079$$, 0], 
        Hold[$CellContext`graphType$$, $CellContext`graphType$6080$$, False], 
        Hold[$CellContext`mod$$, $CellContext`mod$6081$$, 0], 
        Hold[$CellContext`showpath$$, $CellContext`showpath$6082$$, False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      DynamicModule[{$CellContext`G, $CellContext`listAll}, 
        Column[{
          Row[{
            EventHandler[
            If[$CellContext`maxCollatzPath$$ > $CellContext`collatzRange$$, \
$CellContext`maxCollatzPath$$ = $CellContext`collatzRange$$]; 
             If[$CellContext`highlightSelect$$ > \
$CellContext`maxCollatzPath$$, $CellContext`highlightSelect$$ = \
$CellContext`maxCollatzPath$$]; $CellContext`listFont$$ = Which[
                TrueQ[100 >= $CellContext`listLength$$ >= 0], 12, 
                TrueQ[
                 Inequality[
                 125, GreaterEqual, $CellContext`listLength$$, Greater, 100]],
                 10, 
                TrueQ[
                 Inequality[
                 150, GreaterEqual, $CellContext`listLength$$, Greater, 125]],
                 9, 
                TrueQ[$CellContext`listLength$$ > 150], 8, True, 12]; 
             With[{$CellContext`ptslist$ = Sort[
                  DeleteDuplicates[
                   Flatten[
                    Table[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$], {$CellContext`i, 1, $CellContext`maxCollatzPath$$, 
                    1}]]]]}, 
               If[
                Not[
                 
                 MemberQ[$CellContext`ptslist$, \
$CellContext`labeledPoint$$]], $CellContext`labeledPoint$$ = \
$CellContext`highlightSelect$$]]; $CellContext`G = 
              Fold[SetProperty[{#, #2}, {VertexStyle -> Directive[Red, 
                    Opacity[1]], VertexShapeFunction -> "Star", 
                  VertexSize -> {"Scaled", 0.04}}]& , 
                Graph[
                 Map[Tooltip[#, #]& , 
                  Apply[Union, 
                   Table[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$], {$CellContext`i, $CellContext`maxCollatzPath$$}]]], \
$CellContext`listAll = Union[
                   Flatten[
                    Table[
                    $CellContext`withEdges[$CellContext`i, \
$CellContext`mod$$], {$CellContext`i, 1, $CellContext`maxCollatzPath$$}]]], 
                 VertexLabelStyle -> Directive[Red, 20], 
                 GraphLayout -> \
$CellContext`gLayout[$CellContext`graphType$$], 
                 VertexSize -> {"Scaled", 2.4/Length[$CellContext`listAll]}, 
                 VertexStyle -> Directive[
                   Opacity[0], 
                   EdgeForm[None]], EdgeShapeFunction -> ({
                   Arrowheads[0.03], 
                   Arrow[#]}& ), VertexShapeFunction -> "Square", 
                 PlotRange -> {{$CellContext`a1$$, $CellContext`a2$$}, \
{$CellContext`b1$$, $CellContext`b2$$}}, ImageSize -> 372], {
                1, $CellContext`highlightSelect$$, \
$CellContext`labeledPoint$$}]; HighlightGraph[
               
               Graph[$CellContext`G, EdgeStyle -> Gray, 
                VertexLabels -> {1 -> Placed["1", 
                    $CellContext`checkQuadrant[
                    1, $CellContext`G]], $CellContext`highlightSelect$$ -> 
                  Placed[$CellContext`highlightSelect$$, 
                    $CellContext`checkQuadrant[$CellContext`highlightSelect$$,\
 $CellContext`G]], $CellContext`labeledPoint$$ -> 
                  Placed[$CellContext`labeledPoint$$, 
                    $CellContext`checkQuadrant[$CellContext`labeledPoint$$, \
$CellContext`G]]}], 
               MapThread[Style[#, 
                 Directive[
                  Thickness[1/105], #2]]& , {
                 $CellContext`withEdges[$CellContext`highlightSelect$$, \
$CellContext`mod$$], 
                 Reverse[
                  $CellContext`colors[$CellContext`highlightSelect$$, \
$CellContext`mod$$]]}]], {"MouseDown" :> Switch[{
                 MousePosition["Graphics"], 
                 First[
                  ToHeldExpression["CurrentValue"]]["ShiftKey"]}, {
                 PatternTest[
                  Blank[], And[
                  First[#] > ($CellContext`a1$$ + $CellContext`a2$$)/2, 
                   Last[#] > ($CellContext`b1$$ + $CellContext`b2$$)/2]& ], 
                 False}, $CellContext`a1$$ = 
                 ReplaceAll[$CellContext`a1$$, {$CellContext`a1$$ -> \
($CellContext`a1$$ + $CellContext`a2$$)/2}]; $CellContext`b1$$ = 
                 ReplaceAll[$CellContext`b1$$, {$CellContext`b1$$ -> \
($CellContext`b1$$ + $CellContext`b2$$)/2}]; 
                AppendTo[$CellContext`history$$, 1], {
                 PatternTest[
                  Blank[], 
                  Last[#] > ($CellContext`b1$$ + $CellContext`b2$$)/2& ], 
                 False}, $CellContext`a2$$ = 
                 ReplaceAll[$CellContext`a2$$, {$CellContext`a2$$ -> \
($CellContext`a1$$ + $CellContext`a2$$)/2}]; $CellContext`b1$$ = 
                 ReplaceAll[$CellContext`b1$$, {$CellContext`b1$$ -> \
($CellContext`b1$$ + $CellContext`b2$$)/2}]; 
                AppendTo[$CellContext`history$$, 2], {
                 PatternTest[
                  Blank[], 
                  First[#] <= ($CellContext`a1$$ + $CellContext`a2$$)/2& ], 
                 False}, $CellContext`a2$$ = 
                 ReplaceAll[$CellContext`a2$$, {$CellContext`a2$$ -> \
($CellContext`a1$$ + $CellContext`a2$$)/2}]; $CellContext`b2$$ = 
                 ReplaceAll[$CellContext`b2$$, {$CellContext`b2$$ -> \
($CellContext`b1$$ + $CellContext`b2$$)/2}]; 
                AppendTo[$CellContext`history$$, 3], {
                 PatternTest[
                  Blank[], 
                  First[#] > ($CellContext`a1$$ + $CellContext`a2$$)/2& ], 
                 False}, $CellContext`a1$$ = 
                 ReplaceAll[$CellContext`a1$$, {$CellContext`a1$$ -> \
($CellContext`a1$$ + $CellContext`a2$$)/2}]; $CellContext`b2$$ = 
                 
                 ReplaceAll[$CellContext`b2$$, {$CellContext`b2$$ -> \
($CellContext`b1$$ + $CellContext`b2$$)/2}]; 
                AppendTo[$CellContext`history$$, 4], {
                 Blank[], True}, 
                If[
                Length[$CellContext`history$$] != 
                 0, $CellContext`back$$ = 
                  Last[$CellContext`history$$]; $CellContext`history$$ = 
                  Take[$CellContext`history$$, {1, -2}]; 
                 Switch[$CellContext`back$$, 
                   1, $CellContext`a1$$ = 
                    2 $CellContext`a1$$ - $CellContext`a2$$; \
$CellContext`b1$$ = 2 $CellContext`b1$$ - $CellContext`b2$$, 
                   2, $CellContext`a2$$ = 
                    2 $CellContext`a2$$ - $CellContext`a1$$; \
$CellContext`b1$$ = 2 $CellContext`b1$$ - $CellContext`b2$$, 
                   3, $CellContext`a2$$ = 
                    2 $CellContext`a2$$ - $CellContext`a1$$; \
$CellContext`b2$$ = 2 $CellContext`b2$$ - $CellContext`b1$$, 
                   4, $CellContext`a1$$ = 
                    2 $CellContext`a1$$ - $CellContext`a2$$; \
$CellContext`b2$$ = 2 $CellContext`b2$$ - $CellContext`b1$$]]]}], 
            Spacer[10], 
            Column[{
              If[
               And[$CellContext`showpath$$, 
                IntegerQ[$CellContext`highlightSelect$$]], 
               Text[
                Style[
                 Row[
                  (($CellContext`listLength$$ = Length[#]; {#})& )[
                   $CellContext`collatzList[$CellContext`highlightSelect$$, \
$CellContext`mod$$]], ImageSize -> 200], FontFamily -> "Times", 
                 FontSize -> $CellContext`listFont$$]], ""], Null, 
              Column[{
                Row[{
                  Text[
                   Style["function for mod ", FontFamily -> "Times"]], 
                  Text[
                   Style[$CellContext`mod$$ ": ", FontFamily -> "Times"]]}], 
                Text[
                 Style[
                  $CellContext`piecewiseFunc[$CellContext`mod$$], FontFamily -> 
                  "Times"]]}], Null, 
              Row[{
                Text[
                 Style["max sequence length up to ", FontFamily -> "Times"]], 
                Text[
                 Style[$CellContext`maxCollatzPath$$, FontFamily -> "Times"]], 
                Text[
                 Style[": ", FontFamily -> "Times"]], 
                Text[
                 Style[
                  Max[
                   Table[
                    Length[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$]], {$CellContext`i, 1, $CellContext`maxCollatzPath$$}]], 
                  FontFamily -> "Times"]]}], 
              Row[{
                Text[
                 Style[
                 "starting number of max sequence: ", FontFamily -> "Times"]], 
                Text[
                 Style[
                  Part[
                   Part[
                    Position[
                    Table[
                    Length[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$]], {$CellContext`i, 1, $CellContext`maxCollatzPath$$}], 
                    Max[
                    Table[
                    Length[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$]], {$CellContext`i, 1, $CellContext`maxCollatzPath$$}]]], 
                    1], 1], FontFamily -> "Times"]]}], Null, 
              Row[{
                Text[
                 Style["current sequence length ", FontFamily -> "Times"]], 
                Text[
                 Style[" = ", FontFamily -> "Times"]], 
                Text[
                 Style[
                  $CellContext`collatzLengthSelect[$CellContext`\
highlightSelect$$, $CellContext`mod$$], FontFamily -> "Times"]]}], 
              Row[{
                Text[
                 Style[
                 "max value of current sequence: ", FontFamily -> "Times"]], 
                Text[
                 Style[
                  Max[
                   $CellContext`collatzList[$CellContext`highlightSelect$$, \
$CellContext`mod$$]], FontFamily -> "Times"]]}]}]}]}, Alignment -> Center, 
         Spacings -> If[$CellContext`showpath$$, Automatic, -0.25]]], 
      "Specifications" :> {{{$CellContext`highlightSelect$$, 3, 
          "select starting number"}, 2, 
         Dynamic[$CellContext`maxCollatzPath$$], 1, Appearance -> "Labeled", 
         ControlPlacement -> 
         1}, {{$CellContext`maxCollatzPath$$, 100, 
          "graph Collatz from 1 to"}, {100, 250, 500, 750, 1000}, ControlType -> 
         SetterBar, ControlPlacement -> 
         2}, {{$CellContext`graphType$$, "HierarchicalEdgeBundling", 
          "graph type"}, {"HierarchicalEdgeBundling", "CircularEmbedding"}, 
         ControlType -> PopupMenu, ControlPlacement -> 3}, 
        Column[{
          Manipulate`Place[1], 
          Row[{
            Manipulate`Place[2], 
            Spacer[15], 
            Manipulate`Place[3]}]}], {{$CellContext`labeledPoint$$, 3, 
          "label vertex"}, 
         Dynamic[
          Drop[
           Sort[
            DeleteDuplicates[
             Flatten[
              Table[
               $CellContext`collatzList[$CellContext`i, $CellContext`mod$$], \
{$CellContext`i, 1, $CellContext`maxCollatzPath$$, 1}]]]], 1]], ControlType -> 
         PopupMenu, ControlPlacement -> 
         4}, {{$CellContext`mod$$, 2, "modulus of Collatz variation"}, {2, 3, 
         5, 7}, ControlType -> SetterBar, ControlPlacement -> 
         5}, {{$CellContext`showpath$$, False, "show path"}, {True, False}, 
         ControlPlacement -> 6}, 
        Row[{
          Manipulate`Place[4], 
          Spacer[15], 
          Manipulate`Place[5], 
          Spacer[15], 
          Manipulate`Place[6]}], {{$CellContext`a1$$, -1.4}, ControlType -> 
         None}, {{$CellContext`a2$$, -$CellContext`a1$$}, ControlType -> 
         None}, {{$CellContext`b1$$, $CellContext`a1$$}, ControlType -> 
         None}, {{$CellContext`b2$$, -$CellContext`a1$$}, ControlType -> 
         None}, {{$CellContext`history$$, {}}, ControlType -> 
         None}, {{$CellContext`back$$, {}}, ControlType -> 
         None}, {{$CellContext`mod$$, 2}, ControlType -> 
         None}, {{$CellContext`listFont$$, 12}, ControlType -> 
         None}, {{$CellContext`listLength$$, 2}, ControlType -> 
         None}, {{$CellContext`highlightSelect$$, 3}, ControlType -> 
         None}, {{$CellContext`graphType$$, "HierarchicalEdgeBundling"}, 
         ControlType -> None}, {{$CellContext`labeledPoint$$, 3}, ControlType -> 
         None}, {{$CellContext`maxCollatzPath$$, 100}, ControlType -> 
         None}, {{$CellContext`showpath$$, False}, ControlType -> 
         None}, {{$CellContext`collatzRange$$, Null}, ControlType -> None}}, 
      "Options" :> {AutorunSequencing -> {1, 2, 3}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{604., {257., 262.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`listAll = {
         DirectedEdge[2, 1], 
         DirectedEdge[3, 10], 
         DirectedEdge[4, 2], 
         DirectedEdge[5, 16], 
         DirectedEdge[6, 3], 
         DirectedEdge[7, 22], 
         DirectedEdge[8, 4], 
         DirectedEdge[9, 28], 
         DirectedEdge[10, 5], 
         DirectedEdge[11, 34], 
         DirectedEdge[12, 6], 
         DirectedEdge[13, 40], 
         DirectedEdge[14, 7], 
         DirectedEdge[15, 46], 
         DirectedEdge[16, 8], 
         DirectedEdge[17, 52], 
         DirectedEdge[18, 9], 
         DirectedEdge[19, 58], 
         DirectedEdge[20, 10], 
         DirectedEdge[21, 64], 
         DirectedEdge[22, 11], 
         DirectedEdge[23, 70], 
         DirectedEdge[24, 12], 
         DirectedEdge[25, 76], 
         DirectedEdge[26, 13], 
         DirectedEdge[27, 82], 
         DirectedEdge[28, 14], 
         DirectedEdge[29, 88], 
         DirectedEdge[30, 15], 
         DirectedEdge[31, 94], 
         DirectedEdge[32, 16], 
         DirectedEdge[33, 100], 
         DirectedEdge[34, 17], 
         DirectedEdge[35, 106], 
         DirectedEdge[36, 18], 
         DirectedEdge[37, 112], 
         DirectedEdge[38, 19], 
         DirectedEdge[39, 118], 
         DirectedEdge[40, 20], 
         DirectedEdge[41, 124], 
         DirectedEdge[42, 21], 
         DirectedEdge[43, 130], 
         DirectedEdge[44, 22], 
         DirectedEdge[45, 136], 
         DirectedEdge[46, 23], 
         DirectedEdge[47, 142], 
         DirectedEdge[48, 24], 
         DirectedEdge[49, 148], 
         DirectedEdge[50, 25], 
         DirectedEdge[51, 154], 
         DirectedEdge[52, 26], 
         DirectedEdge[53, 160], 
         DirectedEdge[54, 27], 
         DirectedEdge[55, 166], 
         DirectedEdge[56, 28], 
         DirectedEdge[57, 172], 
         DirectedEdge[58, 29], 
         DirectedEdge[59, 178], 
         DirectedEdge[60, 30], 
         DirectedEdge[61, 184], 
         DirectedEdge[62, 31], 
         DirectedEdge[63, 190], 
         DirectedEdge[64, 32], 
         DirectedEdge[65, 196], 
         DirectedEdge[66, 33], 
         DirectedEdge[67, 202], 
         DirectedEdge[68, 34], 
         DirectedEdge[69, 208], 
         DirectedEdge[70, 35], 
         DirectedEdge[71, 214], 
         DirectedEdge[72, 36], 
         DirectedEdge[73, 220], 
         DirectedEdge[74, 37], 
         DirectedEdge[75, 226], 
         DirectedEdge[76, 38], 
         DirectedEdge[77, 232], 
         DirectedEdge[78, 39], 
         DirectedEdge[79, 238], 
         DirectedEdge[80, 40], 
         DirectedEdge[81, 244], 
         DirectedEdge[82, 41], 
         DirectedEdge[83, 250], 
         DirectedEdge[84, 42], 
         DirectedEdge[85, 256], 
         DirectedEdge[86, 43], 
         DirectedEdge[87, 262], 
         DirectedEdge[88, 44], 
         DirectedEdge[89, 268], 
         DirectedEdge[90, 45], 
         DirectedEdge[91, 274], 
         DirectedEdge[92, 46], 
         DirectedEdge[93, 280], 
         DirectedEdge[94, 47], 
         DirectedEdge[95, 286], 
         DirectedEdge[96, 48], 
         DirectedEdge[97, 292], 
         DirectedEdge[98, 49], 
         DirectedEdge[99, 298], 
         DirectedEdge[100, 50], 
         DirectedEdge[101, 304], 
         DirectedEdge[103, 310], 
         DirectedEdge[104, 52], 
         DirectedEdge[106, 53], 
         DirectedEdge[107, 322], 
         DirectedEdge[110, 55], 
         DirectedEdge[112, 56], 
         DirectedEdge[113, 340], 
         DirectedEdge[116, 58], 
         DirectedEdge[118, 59], 
         DirectedEdge[119, 358], 
         DirectedEdge[121, 364], 
         DirectedEdge[122, 61], 
         DirectedEdge[124, 62], 
         DirectedEdge[125, 376], 
         DirectedEdge[128, 64], 
         DirectedEdge[130, 65], 
         DirectedEdge[131, 394], 
         DirectedEdge[134, 67], 
         DirectedEdge[136, 68], 
         DirectedEdge[137, 412], 
         DirectedEdge[140, 70], 
         DirectedEdge[142, 71], 
         DirectedEdge[143, 430], 
         DirectedEdge[146, 73], 
         DirectedEdge[148, 74], 
         DirectedEdge[149, 448], 
         DirectedEdge[152, 76], 
         DirectedEdge[154, 77], 
         DirectedEdge[155, 466], 
         DirectedEdge[160, 80], 
         DirectedEdge[161, 484], 
         DirectedEdge[166, 83], 
         DirectedEdge[167, 502], 
         DirectedEdge[170, 85], 
         DirectedEdge[172, 86], 
         DirectedEdge[175, 526], 
         DirectedEdge[178, 89], 
         DirectedEdge[179, 538], 
         DirectedEdge[182, 91], 
         DirectedEdge[184, 92], 
         DirectedEdge[188, 94], 
         DirectedEdge[190, 95], 
         DirectedEdge[196, 98], 
         DirectedEdge[197, 592], 
         DirectedEdge[202, 101], 
         DirectedEdge[206, 103], 
         DirectedEdge[208, 104], 
         DirectedEdge[214, 107], 
         DirectedEdge[215, 646], 
         DirectedEdge[220, 110], 
         DirectedEdge[224, 112], 
         DirectedEdge[226, 113], 
         DirectedEdge[232, 116], 
         DirectedEdge[233, 700], 
         DirectedEdge[238, 119], 
         DirectedEdge[242, 121], 
         DirectedEdge[244, 122], 
         DirectedEdge[250, 125], 
         DirectedEdge[251, 754], 
         DirectedEdge[256, 128], 
         DirectedEdge[262, 131], 
         DirectedEdge[263, 790], 
         DirectedEdge[268, 134], 
         DirectedEdge[269, 808], 
         DirectedEdge[274, 137], 
         DirectedEdge[280, 140], 
         DirectedEdge[283, 850], 
         DirectedEdge[286, 143], 
         DirectedEdge[292, 146], 
         DirectedEdge[296, 148], 
         DirectedEdge[298, 149], 
         DirectedEdge[304, 152], 
         DirectedEdge[310, 155], 
         DirectedEdge[319, 958], 
         DirectedEdge[322, 161], 
         DirectedEdge[323, 970], 
         DirectedEdge[325, 976], 
         DirectedEdge[334, 167], 
         DirectedEdge[340, 170], 
         DirectedEdge[350, 175], 
         DirectedEdge[358, 179], 
         DirectedEdge[364, 182], 
         DirectedEdge[376, 188], 
         DirectedEdge[377, 1132], 
         DirectedEdge[394, 197], 
         DirectedEdge[395, 1186], 
         DirectedEdge[404, 202], 
         DirectedEdge[412, 206], 
         DirectedEdge[425, 1276], 
         DirectedEdge[430, 215], 
         DirectedEdge[433, 1300], 
         DirectedEdge[445, 1336], 
         DirectedEdge[448, 224], 
         DirectedEdge[466, 233], 
         DirectedEdge[479, 1438], 
         DirectedEdge[484, 242], 
         DirectedEdge[485, 1456], 
         DirectedEdge[488, 244], 
         DirectedEdge[502, 251], 
         DirectedEdge[526, 263], 
         DirectedEdge[538, 269], 
         DirectedEdge[566, 283], 
         DirectedEdge[577, 1732], 
         DirectedEdge[592, 296], 
         DirectedEdge[593, 1780], 
         DirectedEdge[638, 319], 
         DirectedEdge[646, 323], 
         DirectedEdge[650, 325], 
         DirectedEdge[668, 334], 
         DirectedEdge[700, 350], 
         DirectedEdge[719, 2158], 
         DirectedEdge[728, 364], 
         DirectedEdge[754, 377], 
         DirectedEdge[790, 395], 
         DirectedEdge[808, 404], 
         DirectedEdge[850, 425], 
         DirectedEdge[866, 433], 
         DirectedEdge[890, 445], 
         DirectedEdge[911, 2734], 
         DirectedEdge[958, 479], 
         DirectedEdge[970, 485], 
         DirectedEdge[976, 488], 
         DirectedEdge[1079, 3238], 
         DirectedEdge[1132, 566], 
         DirectedEdge[1154, 577], 
         DirectedEdge[1186, 593], 
         DirectedEdge[1276, 638], 
         DirectedEdge[1300, 650], 
         DirectedEdge[1336, 668], 
         DirectedEdge[1367, 4102], 
         DirectedEdge[1438, 719], 
         DirectedEdge[1456, 728], 
         DirectedEdge[1619, 4858], 
         DirectedEdge[1732, 866], 
         DirectedEdge[1780, 890], 
         DirectedEdge[1822, 911], 
         DirectedEdge[2051, 6154], 
         DirectedEdge[2158, 1079], 
         DirectedEdge[2308, 1154], 
         DirectedEdge[2429, 7288], 
         DirectedEdge[2734, 1367], 
         DirectedEdge[3077, 9232], 
         DirectedEdge[3238, 1619], 
         DirectedEdge[3644, 1822], 
         DirectedEdge[4102, 2051], 
         DirectedEdge[4616, 2308], 
         DirectedEdge[4858, 2429], 
         DirectedEdge[6154, 3077], 
         DirectedEdge[7288, 3644], 
         DirectedEdge[9232, 4616]}, $CellContext`listLength$$ = 2, Condition[
         $CellContext`collatzList[
          Pattern[$CellContext`n, 
           Blank[Integer]], 
          Pattern[$CellContext`mod, 
           Blank[]]], $CellContext`n > 0] := NestWhileList[
         $CellContext`c[$CellContext`n, $CellContext`mod], $CellContext`n, # != 
         1& ], $CellContext`c[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]]] := Switch[$CellContext`mod, 2, If[
          EvenQ[#], #/2, 3 # + 1]& , 3, Switch[
          Mod[#, 3], 0, #/3, 1, (2 # + 1)/3, 2, (2 # - 1)/3]& , 5, Switch[
          Mod[#, 5], 0, #/5, 1, 5 # + 2, 2, 3 # - 1, 3, 2 # - 1, 4, (# + 1)/
          5]& , 7, Switch[
          Mod[#, 7], 0, #/7, 1, (3 # + 4)/7, 2, 4 # - 5, 3, (2 # + 22)/7, 
          4, (# + 3)/7, 5, (3 # - 1)/7, 6, (# + 8)/
          7]& ], $CellContext`withEdges := Apply[DirectedEdge, 
         Partition[
          $CellContext`collatzList[
           SlotSequence[1]], 2, 1], 2]& , $CellContext`gLayout[
        "HierarchicalEdgeBundling"] = {
        "EdgeLayout" -> {"HierarchicalEdgeBundling"}}, $CellContext`gLayout[
         Pattern[$CellContext`s, 
          Blank[]]] := $CellContext`s, $CellContext`checkQuadrant[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`G, 
          Blank[]]] := If[
         Not[
          MemberQ[
           VertexList[$CellContext`G], $CellContext`n]], {After, Above}, 
         With[{$CellContext`coords = Riffle[
             VertexList[$CellContext`G], 
             Part[
              ReplaceAll[
               AbsoluteOptions[$CellContext`G, VertexCoordinates], 
               Rule -> (#2& )], 1]]}, 
          Which[
           And[First[
              Flatten[
               
               Part[$CellContext`coords, $CellContext`position[$CellContext`n,
                   $CellContext`coords] + 1]]] > 0, Last[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] > 0], {
           After, Above}, 
           And[First[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] > 0, Last[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] < 0], {
           After, Below}, 
           And[First[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] < 0, Last[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] > 0], {
           Before, Above}, 
           And[First[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] < 0, Last[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] < 0], {
           Before, Below}]]], $CellContext`position[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`coords, 
          Blank[]]] := Flatten[
         Position[$CellContext`coords, $CellContext`n]], $CellContext`colors = 
       Map[
         ColorData["Rainbow"], Range[
           $CellContext`numbEdges[
            SlotSequence[1]]]/$CellContext`numbEdges[
          SlotSequence[1]]]& , $CellContext`numbEdges = Length[
         $CellContext`withEdges[
          SlotSequence[1]]]& , $CellContext`piecewiseFunc[
         Pattern[$CellContext`mod, 
          Blank[]]] := Switch[$CellContext`mod, 2, 
         Style[
          TraditionalForm[
           Function[$CellContext`x, 
            Piecewise[{{
               Row[{$CellContext`x, "\[ThinSpace]/\[ThinSpace]", 2}], 
               Congruent[
                Mod[$CellContext`x, 2], 0]}, {
               Row[{3 $CellContext`x + 1}], 
               Congruent[
                Mod[$CellContext`x, 2], 1]}}]]], FontFamily -> "Times"], 3, 
         Style[
          TraditionalForm[
           Function[$CellContext`x, 
            Piecewise[{{
               Row[{$CellContext`x, "\[ThinSpace]/\[ThinSpace]", 3}], 
               Congruent[
                Mod[$CellContext`x, 3], 0]}, {
               Row[{2 $CellContext`x + 1}], 
               Congruent[
                Mod[$CellContext`x, 3], 1]}, {
               
               Row[{"(", 2 $CellContext`x - 1, ")\[ThinSpace]/\[ThinSpace]", 
                 3}], 
               Congruent[
                Mod[$CellContext`x, 3], 2]}}]]], FontFamily -> "Times"], 5, 
         Style[
          TraditionalForm[
           Function[$CellContext`x, 
            Piecewise[{{
               Row[{$CellContext`x, "\[ThinSpace]/\[ThinSpace]", 5}], 
               Congruent[
                Mod[$CellContext`x, 5], 0]}, {
               Row[{"(", 5 $CellContext`x + 2, ")"}], 
               Congruent[
                Mod[$CellContext`x, 5], 1]}, {3 $CellContext`x - 1, 
               Congruent[
                Mod[$CellContext`x, 5], 2]}, {
               Row[{2 $CellContext`x - 1}], 
               Congruent[
                Mod[$CellContext`x, 5], 3]}, {
               
               Row[{"(", $CellContext`x + 1, ")\[ThinSpace]/\[ThinSpace]", 
                 5}], 
               Congruent[
                Mod[$CellContext`x, 5], 4]}}]]], FontFamily -> "Times"], 7, 
         Style[
          TraditionalForm[
           Function[$CellContext`x, 
            Piecewise[{{
               Row[{$CellContext`x, "\[ThinSpace]/\[ThinSpace]", 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 0]}, {
               
               Row[{"(", 3 $CellContext`x + 4, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 1]}, {4 $CellContext`x - 5, 
               Congruent[
                Mod[$CellContext`x, 7], 2]}, {
               
               Row[{"(", 2 $CellContext`x + 22, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 3]}, {
               
               Row[{"(", $CellContext`x + 3, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 4]}, {
               
               Row[{"(", 3 $CellContext`x - 1, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 5]}, {
               
               Row[{"(", $CellContext`x + 8, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 6]}}]]], FontFamily -> 
          "Times"]], $CellContext`collatzLengthSelect[
         Pattern[$CellContext`highlightSelect, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]]] := Length[
         $CellContext`collatzList[$CellContext`highlightSelect, \
$CellContext`mod]]}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->591018221]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateCaptionSection"],

Cell[TextData[{
 "The Collatz conjecture (also known as the ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"3", "n"}], "+", "1"}], TraditionalForm]], "InlineMath"],
 " conjecture) claims that any positive integer ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]], "InlineMath"],
 " eventually returns to 1 when iterated through the following recursive \
formula ",
 Cell[BoxData[
  FormBox["f", TraditionalForm]], "InlineMath"],
 ":"
}], "ManipulateCaption",
 CellChangeTimes->{
  3.6460434135888042`*^9, 3.6460437706833563`*^9, {3.6460438018673363`*^9, 
   3.6460439952391644`*^9}, {3.646044031878776*^9, 3.646044079842313*^9}, {
   3.646052084638826*^9, 3.646052108726446*^9}, {3.646052168986128*^9, 
   3.646052240233761*^9}, {3.646052720227531*^9, 3.646052723496759*^9}, 
   3.646069953213372*^9, 3.646070738695737*^9, {3.646084759839941*^9, 
   3.646084759851687*^9}, {3.6470034085486937`*^9, 3.647003408564294*^9}, {
   3.647014486202263*^9, 3.6470145389657993`*^9}, {3.6470203024405537`*^9, 
   3.647020319815436*^9}}],

Cell[TextData[{
 "If ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]], "InlineMath"],
 " is even, divide it by 2\[LongDash]that is, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", " ", 
     RowBox[{"(", "n", ")"}]}], "=", 
    FractionBox["n", "2"]}], TraditionalForm]], "InlineMath"],
 ".\nIf ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]], "InlineMath"],
 " is odd, multiply it by 3 and add 1\[LongDash]that is, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", " ", 
     RowBox[{"(", "n", ")"}]}], "=", 
    RowBox[{
     RowBox[{"3", " ", "n"}], "+", "1"}]}], TraditionalForm]], "InlineMath"],
 "."
}], "ManipulateCaption",
 CellChangeTimes->{
  3.6460434135888042`*^9, 3.6460437706833563`*^9, {3.6460438018673363`*^9, 
   3.6460439952391644`*^9}, {3.646044031878776*^9, 3.646044079842313*^9}, {
   3.646052084638826*^9, 3.646052108726446*^9}, {3.646052168986128*^9, 
   3.646052240233761*^9}, {3.646052720227531*^9, 3.646052723496759*^9}, 
   3.646069953213372*^9, 3.646070738695737*^9, {3.646084759839941*^9, 
   3.646084759851687*^9}, {3.6470034085486937`*^9, 3.6470034177120705`*^9}, {
   3.6470036233996954`*^9, 3.6470036538990593`*^9}, {3.647014530090604*^9, 
   3.647014556967309*^9}, 3.647020343670105*^9, {3.6470860564731092`*^9, 
   3.647086079971833*^9}, {3.647086295856778*^9, 3.647086456707077*^9}},
 CellID->795729339],

Cell["\<\
This Demonstration shows the different paths of the positive integers up to \
1000 as they are run through the Collatz sequence. It also includes other \
recursive functions with respect to different moduli (3, 5, and 7). These \
recursive functions return to 1 as well for every value in this range of \
1000. Interestingly enough, they appear to return to 1 for values beyond \
1000, like the Collatz case. Neither the Collatz conjecture nor any of its \
variants have been proven.\
\>", "ManipulateCaption",
 CellChangeTimes->{
  3.6460434135888042`*^9, 3.6460437706833563`*^9, {3.6460438018673363`*^9, 
   3.6460439952391644`*^9}, {3.646044031878776*^9, 3.646044079842313*^9}, {
   3.646052084638826*^9, 3.646052108726446*^9}, {3.646052168986128*^9, 
   3.646052240233761*^9}, {3.646052720227531*^9, 3.646052723496759*^9}, 
   3.646069953213372*^9, 3.646070738695737*^9, {3.646084759839941*^9, 
   3.646084759851687*^9}, {3.6470034085486937`*^9, 3.6470034207113285`*^9}, {
   3.647014569974907*^9, 3.647014581990103*^9}, {3.647014615516501*^9, 
   3.6470146657458677`*^9}, {3.6470148998545027`*^9, 3.647014904165264*^9}, {
   3.64701498725813*^9, 3.6470150958350973`*^9}, {3.647020071564958*^9, 
   3.6470200717243853`*^9}, {3.647028321439131*^9, 3.6470283307327003`*^9}, {
   3.647028408432069*^9, 3.6470284643777943`*^9}, 3.647028520789053*^9, {
   3.647085432703792*^9, 3.647085448842566*^9}, {3.647085539251334*^9, 
   3.647085539489201*^9}},
 CellID->635465719],

Cell["\<\
Click to zoom into the graph and shift-click to zoom back out.\
\>", "ManipulateCaption",
 CellChangeTimes->{
  3.6460434135888042`*^9, 3.6460437706833563`*^9, {3.6460438018673363`*^9, 
   3.6460439952391644`*^9}, {3.646044031878776*^9, 3.646044079842313*^9}, {
   3.646052084638826*^9, 3.646052108726446*^9}, {3.646052168986128*^9, 
   3.646052240233761*^9}, {3.646052720227531*^9, 3.646052723496759*^9}, 
   3.646069953213372*^9, 3.646070738695737*^9, {3.646084759839941*^9, 
   3.646084776093239*^9}, {3.647003051285946*^9, 3.6470030518007555`*^9}, {
   3.647003872822343*^9, 3.647003873432755*^9}},
 CellID->1693352466]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ThumbnailSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`a1$$ = 
    0., $CellContext`a2$$ = -$CellContext`a1$$, $CellContext`b1$$ = 
    0., $CellContext`b2$$ = -$CellContext`a1$$, $CellContext`back$$ = {}, \
$CellContext`collatzRange$$ = Null, $CellContext`graphType$$ = 
    "HierarchicalEdgeBundling", $CellContext`highlightSelect$$ = 
    97, $CellContext`history$$ = {1, 2, 1}, $CellContext`labeledPoint$$ = 
    3, $CellContext`listFont$$ = 12, $CellContext`listLength$$ = 
    2, $CellContext`maxCollatzPath$$ = 100, $CellContext`mod$$ = 
    3, $CellContext`showpath$$ = False, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`highlightSelect$$], 97, "select starting number"}, 2, 
      Dynamic[$CellContext`maxCollatzPath$$], 1}, {{
       Hold[$CellContext`maxCollatzPath$$], 100, "graph Collatz from 1 to"}, {
      100, 250, 500, 750, 1000}}, {{
       Hold[$CellContext`graphType$$], "HierarchicalEdgeBundling", 
       "graph type"}, {"HierarchicalEdgeBundling", "CircularEmbedding"}}, {
      Hold[
       Column[{
         Manipulate`Place[1], 
         Row[{
           Manipulate`Place[2], 
           Spacer[15], 
           Manipulate`Place[3]}]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`labeledPoint$$], 3, "label vertex"}, 
      Dynamic[
       Drop[
        Sort[
         DeleteDuplicates[
          Flatten[
           Table[
            $CellContext`collatzList[$CellContext`i, $CellContext`mod$$], \
{$CellContext`i, 1, $CellContext`maxCollatzPath$$, 1}]]]], 1]]}, {{
       Hold[$CellContext`mod$$], 3, "modulus of Collatz variation"}, {2, 3, 5,
       7}}, {{
       Hold[$CellContext`showpath$$], False, "show path"}, {True, False}}, {
      Hold[
       Row[{
         Manipulate`Place[4], 
         Spacer[15], 
         Manipulate`Place[5], 
         Spacer[15], 
         Manipulate`Place[6]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`a1$$], 0.}}, {{
       Hold[$CellContext`a2$$], -$CellContext`a1$$}}, {{
       Hold[$CellContext`b1$$], 0.}}, {{
       Hold[$CellContext`b2$$], -$CellContext`a1$$}}, {{
       Hold[$CellContext`history$$], {1, 2, 1}}}, {{
       Hold[$CellContext`back$$], {}}}, {{
       Hold[$CellContext`mod$$], 3}}, {{
       Hold[$CellContext`listFont$$], 12}}, {{
       Hold[$CellContext`listLength$$], 9}}, {{
       Hold[$CellContext`highlightSelect$$], 97}}, {{
       Hold[$CellContext`graphType$$], "HierarchicalEdgeBundling"}}, {{
       Hold[$CellContext`labeledPoint$$], 3}}, {{
       Hold[$CellContext`maxCollatzPath$$], 100}}, {{
       Hold[$CellContext`showpath$$], False}}, {{
       Hold[$CellContext`collatzRange$$], Null}}}, Typeset`size$$ = {
    561., {183.3544921875, 188.6455078125}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`highlightSelect$6185$$ = 
    0, $CellContext`maxCollatzPath$6186$$ = 0, $CellContext`graphType$6187$$ =
     False, $CellContext`mod$6188$$ = 0, $CellContext`showpath$6189$$ = 
    False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`a1$$ = 
        0., $CellContext`a2$$ = -$CellContext`a1$$, $CellContext`b1$$ = 
        0., $CellContext`b2$$ = -$CellContext`a1$$, $CellContext`back$$ = {}, \
$CellContext`collatzRange$$ = Null, $CellContext`graphType$$ = 
        "HierarchicalEdgeBundling", $CellContext`highlightSelect$$ = 
        97, $CellContext`history$$ = {1, 2, 1}, $CellContext`labeledPoint$$ = 
        3, $CellContext`listFont$$ = 12, $CellContext`listLength$$ = 
        9, $CellContext`maxCollatzPath$$ = 100, $CellContext`mod$$ = 
        3, $CellContext`showpath$$ = False}, "ControllerVariables" :> {
        Hold[$CellContext`highlightSelect$$, \
$CellContext`highlightSelect$6185$$, 0], 
        Hold[$CellContext`maxCollatzPath$$, \
$CellContext`maxCollatzPath$6186$$, 0], 
        Hold[$CellContext`graphType$$, $CellContext`graphType$6187$$, False], 
        Hold[$CellContext`mod$$, $CellContext`mod$6188$$, 0], 
        Hold[$CellContext`showpath$$, $CellContext`showpath$6189$$, False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      DynamicModule[{$CellContext`G, $CellContext`listAll}, 
        Column[{
          Row[{
            EventHandler[
            If[$CellContext`maxCollatzPath$$ > $CellContext`collatzRange$$, \
$CellContext`maxCollatzPath$$ = $CellContext`collatzRange$$]; 
             If[$CellContext`highlightSelect$$ > \
$CellContext`maxCollatzPath$$, $CellContext`highlightSelect$$ = \
$CellContext`maxCollatzPath$$]; $CellContext`listFont$$ = Which[
                TrueQ[100 >= $CellContext`listLength$$ >= 0], 12, 
                TrueQ[
                 Inequality[
                 125, GreaterEqual, $CellContext`listLength$$, Greater, 100]],
                 10, 
                TrueQ[
                 Inequality[
                 150, GreaterEqual, $CellContext`listLength$$, Greater, 125]],
                 9, 
                TrueQ[$CellContext`listLength$$ > 150], 8, True, 12]; 
             With[{$CellContext`ptslist$ = Sort[
                  DeleteDuplicates[
                   Flatten[
                    Table[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$], {$CellContext`i, 1, $CellContext`maxCollatzPath$$, 
                    1}]]]]}, 
               If[
                Not[
                 
                 MemberQ[$CellContext`ptslist$, \
$CellContext`labeledPoint$$]], $CellContext`labeledPoint$$ = \
$CellContext`highlightSelect$$]]; $CellContext`G = 
              Fold[SetProperty[{#, #2}, {VertexStyle -> Directive[Red, 
                    Opacity[1]], VertexShapeFunction -> "Star", 
                  VertexSize -> {"Scaled", 0.04}}]& , 
                Graph[
                 Map[Tooltip[#, #]& , 
                  Apply[Union, 
                   Table[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$], {$CellContext`i, $CellContext`maxCollatzPath$$}]]], \
$CellContext`listAll = Union[
                   Flatten[
                    Table[
                    $CellContext`withEdges[$CellContext`i, \
$CellContext`mod$$], {$CellContext`i, 1, $CellContext`maxCollatzPath$$}]]], 
                 VertexLabelStyle -> Directive[Red, 20], 
                 GraphLayout -> \
$CellContext`gLayout[$CellContext`graphType$$], 
                 VertexSize -> {"Scaled", 2.4/Length[$CellContext`listAll]}, 
                 VertexStyle -> Directive[
                   Opacity[0], 
                   EdgeForm[None]], EdgeShapeFunction -> ({
                   Arrowheads[0.03], 
                   Arrow[#]}& ), VertexShapeFunction -> "Square", 
                 PlotRange -> {{$CellContext`a1$$, $CellContext`a2$$}, \
{$CellContext`b1$$, $CellContext`b2$$}}, ImageSize -> 372], {
                1, $CellContext`highlightSelect$$, \
$CellContext`labeledPoint$$}]; HighlightGraph[
               
               Graph[$CellContext`G, EdgeStyle -> Gray, 
                VertexLabels -> {1 -> Placed["1", 
                    $CellContext`checkQuadrant[
                    1, $CellContext`G]], $CellContext`highlightSelect$$ -> 
                  Placed[$CellContext`highlightSelect$$, 
                    $CellContext`checkQuadrant[$CellContext`highlightSelect$$,\
 $CellContext`G]], $CellContext`labeledPoint$$ -> 
                  Placed[$CellContext`labeledPoint$$, 
                    $CellContext`checkQuadrant[$CellContext`labeledPoint$$, \
$CellContext`G]]}], 
               MapThread[Style[#, 
                 Directive[
                  Thickness[1/105], #2]]& , {
                 $CellContext`withEdges[$CellContext`highlightSelect$$, \
$CellContext`mod$$], 
                 Reverse[
                  $CellContext`colors[$CellContext`highlightSelect$$, \
$CellContext`mod$$]]}]], {"MouseDown" :> Switch[{
                 MousePosition["Graphics"], 
                 First[
                  ToHeldExpression["CurrentValue"]]["ShiftKey"]}, {
                 PatternTest[
                  Blank[], And[
                  First[#] > ($CellContext`a1$$ + $CellContext`a2$$)/2, 
                   Last[#] > ($CellContext`b1$$ + $CellContext`b2$$)/2]& ], 
                 False}, $CellContext`a1$$ = 
                 ReplaceAll[$CellContext`a1$$, {$CellContext`a1$$ -> \
($CellContext`a1$$ + $CellContext`a2$$)/2}]; $CellContext`b1$$ = 
                 ReplaceAll[$CellContext`b1$$, {$CellContext`b1$$ -> \
($CellContext`b1$$ + $CellContext`b2$$)/2}]; 
                AppendTo[$CellContext`history$$, 1], {
                 PatternTest[
                  Blank[], 
                  Last[#] > ($CellContext`b1$$ + $CellContext`b2$$)/2& ], 
                 False}, $CellContext`a2$$ = 
                 ReplaceAll[$CellContext`a2$$, {$CellContext`a2$$ -> \
($CellContext`a1$$ + $CellContext`a2$$)/2}]; $CellContext`b1$$ = 
                 ReplaceAll[$CellContext`b1$$, {$CellContext`b1$$ -> \
($CellContext`b1$$ + $CellContext`b2$$)/2}]; 
                AppendTo[$CellContext`history$$, 2], {
                 PatternTest[
                  Blank[], 
                  First[#] <= ($CellContext`a1$$ + $CellContext`a2$$)/2& ], 
                 False}, $CellContext`a2$$ = 
                 ReplaceAll[$CellContext`a2$$, {$CellContext`a2$$ -> \
($CellContext`a1$$ + $CellContext`a2$$)/2}]; $CellContext`b2$$ = 
                 ReplaceAll[$CellContext`b2$$, {$CellContext`b2$$ -> \
($CellContext`b1$$ + $CellContext`b2$$)/2}]; 
                AppendTo[$CellContext`history$$, 3], {
                 PatternTest[
                  Blank[], 
                  First[#] > ($CellContext`a1$$ + $CellContext`a2$$)/2& ], 
                 False}, $CellContext`a1$$ = 
                 ReplaceAll[$CellContext`a1$$, {$CellContext`a1$$ -> \
($CellContext`a1$$ + $CellContext`a2$$)/2}]; $CellContext`b2$$ = 
                 
                 ReplaceAll[$CellContext`b2$$, {$CellContext`b2$$ -> \
($CellContext`b1$$ + $CellContext`b2$$)/2}]; 
                AppendTo[$CellContext`history$$, 4], {
                 Blank[], True}, 
                If[
                Length[$CellContext`history$$] != 
                 0, $CellContext`back$$ = 
                  Last[$CellContext`history$$]; $CellContext`history$$ = 
                  Take[$CellContext`history$$, {1, -2}]; 
                 Switch[$CellContext`back$$, 
                   1, $CellContext`a1$$ = 
                    2 $CellContext`a1$$ - $CellContext`a2$$; \
$CellContext`b1$$ = 2 $CellContext`b1$$ - $CellContext`b2$$, 
                   2, $CellContext`a2$$ = 
                    2 $CellContext`a2$$ - $CellContext`a1$$; \
$CellContext`b1$$ = 2 $CellContext`b1$$ - $CellContext`b2$$, 
                   3, $CellContext`a2$$ = 
                    2 $CellContext`a2$$ - $CellContext`a1$$; \
$CellContext`b2$$ = 2 $CellContext`b2$$ - $CellContext`b1$$, 
                   4, $CellContext`a1$$ = 
                    2 $CellContext`a1$$ - $CellContext`a2$$; \
$CellContext`b2$$ = 2 $CellContext`b2$$ - $CellContext`b1$$]]]}], 
            Spacer[10], 
            Column[{
              If[
               And[$CellContext`showpath$$, 
                IntegerQ[$CellContext`highlightSelect$$]], 
               Text[
                Style[
                 Row[
                  (($CellContext`listLength$$ = Length[#]; {#})& )[
                   $CellContext`collatzList[$CellContext`highlightSelect$$, \
$CellContext`mod$$]], ImageSize -> 200], FontFamily -> "Times", 
                 FontSize -> $CellContext`listFont$$]], ""], Null, 
              Column[{
                Row[{
                  Text[
                   Style["function for mod ", FontFamily -> "Times"]], 
                  Text[
                   Style[$CellContext`mod$$ ": ", FontFamily -> "Times"]]}], 
                Text[
                 Style[
                  $CellContext`piecewiseFunc[$CellContext`mod$$], FontFamily -> 
                  "Times"]]}], Null, 
              Row[{
                Text[
                 Style["max sequence length up to ", FontFamily -> "Times"]], 
                Text[
                 Style[$CellContext`maxCollatzPath$$, FontFamily -> "Times"]], 
                Text[
                 Style[": ", FontFamily -> "Times"]], 
                Text[
                 Style[
                  Max[
                   Table[
                    Length[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$]], {$CellContext`i, 1, $CellContext`maxCollatzPath$$}]], 
                  FontFamily -> "Times"]]}], 
              Row[{
                Text[
                 Style[
                 "starting number of max sequence: ", FontFamily -> "Times"]], 
                Text[
                 Style[
                  Part[
                   Part[
                    Position[
                    Table[
                    Length[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$]], {$CellContext`i, 1, $CellContext`maxCollatzPath$$}], 
                    Max[
                    Table[
                    Length[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$]], {$CellContext`i, 1, $CellContext`maxCollatzPath$$}]]], 
                    1], 1], FontFamily -> "Times"]]}], Null, 
              Row[{
                Text[
                 Style["current sequence length ", FontFamily -> "Times"]], 
                Text[
                 Style[" = ", FontFamily -> "Times"]], 
                Text[
                 Style[
                  $CellContext`collatzLengthSelect[$CellContext`\
highlightSelect$$, $CellContext`mod$$], FontFamily -> "Times"]]}], 
              Row[{
                Text[
                 Style[
                 "max value of current sequence: ", FontFamily -> "Times"]], 
                Text[
                 Style[
                  Max[
                   $CellContext`collatzList[$CellContext`highlightSelect$$, \
$CellContext`mod$$]], FontFamily -> "Times"]]}]}]}]}, Alignment -> Center, 
         Spacings -> If[$CellContext`showpath$$, Automatic, -0.25]]], 
      "Specifications" :> {{{$CellContext`highlightSelect$$, 97, 
          "select starting number"}, 2, 
         Dynamic[$CellContext`maxCollatzPath$$], 1, Appearance -> "Labeled", 
         ControlPlacement -> 
         1}, {{$CellContext`maxCollatzPath$$, 100, 
          "graph Collatz from 1 to"}, {100, 250, 500, 750, 1000}, ControlType -> 
         SetterBar, ControlPlacement -> 
         2}, {{$CellContext`graphType$$, "HierarchicalEdgeBundling", 
          "graph type"}, {"HierarchicalEdgeBundling", "CircularEmbedding"}, 
         ControlType -> PopupMenu, ControlPlacement -> 3}, 
        Column[{
          Manipulate`Place[1], 
          Row[{
            Manipulate`Place[2], 
            Spacer[15], 
            Manipulate`Place[3]}]}], {{$CellContext`labeledPoint$$, 3, 
          "label vertex"}, 
         Dynamic[
          Drop[
           Sort[
            DeleteDuplicates[
             Flatten[
              Table[
               $CellContext`collatzList[$CellContext`i, $CellContext`mod$$], \
{$CellContext`i, 1, $CellContext`maxCollatzPath$$, 1}]]]], 1]], ControlType -> 
         PopupMenu, ControlPlacement -> 
         4}, {{$CellContext`mod$$, 3, "modulus of Collatz variation"}, {2, 3, 
         5, 7}, ControlType -> SetterBar, ControlPlacement -> 
         5}, {{$CellContext`showpath$$, False, "show path"}, {True, False}, 
         ControlPlacement -> 6}, 
        Row[{
          Manipulate`Place[4], 
          Spacer[15], 
          Manipulate`Place[5], 
          Spacer[15], 
          Manipulate`Place[6]}], {{$CellContext`a1$$, 0.}, ControlType -> 
         None}, {{$CellContext`a2$$, -$CellContext`a1$$}, ControlType -> 
         None}, {{$CellContext`b1$$, 0.}, ControlType -> 
         None}, {{$CellContext`b2$$, -$CellContext`a1$$}, ControlType -> 
         None}, {{$CellContext`history$$, {1, 2, 1}}, ControlType -> 
         None}, {{$CellContext`back$$, {}}, ControlType -> 
         None}, {{$CellContext`mod$$, 3}, ControlType -> 
         None}, {{$CellContext`listFont$$, 12}, ControlType -> 
         None}, {{$CellContext`listLength$$, 9}, ControlType -> 
         None}, {{$CellContext`highlightSelect$$, 97}, ControlType -> 
         None}, {{$CellContext`graphType$$, "HierarchicalEdgeBundling"}, 
         ControlType -> None}, {{$CellContext`labeledPoint$$, 3}, ControlType -> 
         None}, {{$CellContext`maxCollatzPath$$, 100}, ControlType -> 
         None}, {{$CellContext`showpath$$, False}, ControlType -> 
         None}, {{$CellContext`collatzRange$$, Null}, ControlType -> None}}, 
      "Options" :> {AutorunSequencing -> {1, 2, 3}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{604., {257., 262.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`listAll = {
         DirectedEdge[2, 1], 
         DirectedEdge[3, 10], 
         DirectedEdge[4, 2], 
         DirectedEdge[5, 16], 
         DirectedEdge[6, 3], 
         DirectedEdge[7, 22], 
         DirectedEdge[8, 4], 
         DirectedEdge[9, 28], 
         DirectedEdge[10, 5], 
         DirectedEdge[11, 34], 
         DirectedEdge[12, 6], 
         DirectedEdge[13, 40], 
         DirectedEdge[14, 7], 
         DirectedEdge[15, 46], 
         DirectedEdge[16, 8], 
         DirectedEdge[17, 52], 
         DirectedEdge[18, 9], 
         DirectedEdge[19, 58], 
         DirectedEdge[20, 10], 
         DirectedEdge[21, 64], 
         DirectedEdge[22, 11], 
         DirectedEdge[23, 70], 
         DirectedEdge[24, 12], 
         DirectedEdge[25, 76], 
         DirectedEdge[26, 13], 
         DirectedEdge[27, 82], 
         DirectedEdge[28, 14], 
         DirectedEdge[29, 88], 
         DirectedEdge[30, 15], 
         DirectedEdge[31, 94], 
         DirectedEdge[32, 16], 
         DirectedEdge[33, 100], 
         DirectedEdge[34, 17], 
         DirectedEdge[35, 106], 
         DirectedEdge[36, 18], 
         DirectedEdge[37, 112], 
         DirectedEdge[38, 19], 
         DirectedEdge[39, 118], 
         DirectedEdge[40, 20], 
         DirectedEdge[41, 124], 
         DirectedEdge[42, 21], 
         DirectedEdge[43, 130], 
         DirectedEdge[44, 22], 
         DirectedEdge[45, 136], 
         DirectedEdge[46, 23], 
         DirectedEdge[47, 142], 
         DirectedEdge[48, 24], 
         DirectedEdge[49, 148], 
         DirectedEdge[50, 25], 
         DirectedEdge[51, 154], 
         DirectedEdge[52, 26], 
         DirectedEdge[53, 160], 
         DirectedEdge[54, 27], 
         DirectedEdge[55, 166], 
         DirectedEdge[56, 28], 
         DirectedEdge[57, 172], 
         DirectedEdge[58, 29], 
         DirectedEdge[59, 178], 
         DirectedEdge[60, 30], 
         DirectedEdge[61, 184], 
         DirectedEdge[62, 31], 
         DirectedEdge[63, 190], 
         DirectedEdge[64, 32], 
         DirectedEdge[65, 196], 
         DirectedEdge[66, 33], 
         DirectedEdge[67, 202], 
         DirectedEdge[68, 34], 
         DirectedEdge[69, 208], 
         DirectedEdge[70, 35], 
         DirectedEdge[71, 214], 
         DirectedEdge[72, 36], 
         DirectedEdge[73, 220], 
         DirectedEdge[74, 37], 
         DirectedEdge[75, 226], 
         DirectedEdge[76, 38], 
         DirectedEdge[77, 232], 
         DirectedEdge[78, 39], 
         DirectedEdge[79, 238], 
         DirectedEdge[80, 40], 
         DirectedEdge[81, 244], 
         DirectedEdge[82, 41], 
         DirectedEdge[83, 250], 
         DirectedEdge[84, 42], 
         DirectedEdge[85, 256], 
         DirectedEdge[86, 43], 
         DirectedEdge[87, 262], 
         DirectedEdge[88, 44], 
         DirectedEdge[89, 268], 
         DirectedEdge[90, 45], 
         DirectedEdge[91, 274], 
         DirectedEdge[92, 46], 
         DirectedEdge[93, 280], 
         DirectedEdge[94, 47], 
         DirectedEdge[95, 286], 
         DirectedEdge[96, 48], 
         DirectedEdge[97, 292], 
         DirectedEdge[98, 49], 
         DirectedEdge[99, 298], 
         DirectedEdge[100, 50], 
         DirectedEdge[101, 304], 
         DirectedEdge[103, 310], 
         DirectedEdge[104, 52], 
         DirectedEdge[106, 53], 
         DirectedEdge[107, 322], 
         DirectedEdge[110, 55], 
         DirectedEdge[112, 56], 
         DirectedEdge[113, 340], 
         DirectedEdge[116, 58], 
         DirectedEdge[118, 59], 
         DirectedEdge[119, 358], 
         DirectedEdge[121, 364], 
         DirectedEdge[122, 61], 
         DirectedEdge[124, 62], 
         DirectedEdge[125, 376], 
         DirectedEdge[128, 64], 
         DirectedEdge[130, 65], 
         DirectedEdge[131, 394], 
         DirectedEdge[134, 67], 
         DirectedEdge[136, 68], 
         DirectedEdge[137, 412], 
         DirectedEdge[140, 70], 
         DirectedEdge[142, 71], 
         DirectedEdge[143, 430], 
         DirectedEdge[146, 73], 
         DirectedEdge[148, 74], 
         DirectedEdge[149, 448], 
         DirectedEdge[152, 76], 
         DirectedEdge[154, 77], 
         DirectedEdge[155, 466], 
         DirectedEdge[160, 80], 
         DirectedEdge[161, 484], 
         DirectedEdge[166, 83], 
         DirectedEdge[167, 502], 
         DirectedEdge[170, 85], 
         DirectedEdge[172, 86], 
         DirectedEdge[175, 526], 
         DirectedEdge[178, 89], 
         DirectedEdge[179, 538], 
         DirectedEdge[182, 91], 
         DirectedEdge[184, 92], 
         DirectedEdge[188, 94], 
         DirectedEdge[190, 95], 
         DirectedEdge[196, 98], 
         DirectedEdge[197, 592], 
         DirectedEdge[202, 101], 
         DirectedEdge[206, 103], 
         DirectedEdge[208, 104], 
         DirectedEdge[214, 107], 
         DirectedEdge[215, 646], 
         DirectedEdge[220, 110], 
         DirectedEdge[224, 112], 
         DirectedEdge[226, 113], 
         DirectedEdge[232, 116], 
         DirectedEdge[233, 700], 
         DirectedEdge[238, 119], 
         DirectedEdge[242, 121], 
         DirectedEdge[244, 122], 
         DirectedEdge[250, 125], 
         DirectedEdge[251, 754], 
         DirectedEdge[256, 128], 
         DirectedEdge[262, 131], 
         DirectedEdge[263, 790], 
         DirectedEdge[268, 134], 
         DirectedEdge[269, 808], 
         DirectedEdge[274, 137], 
         DirectedEdge[280, 140], 
         DirectedEdge[283, 850], 
         DirectedEdge[286, 143], 
         DirectedEdge[292, 146], 
         DirectedEdge[296, 148], 
         DirectedEdge[298, 149], 
         DirectedEdge[304, 152], 
         DirectedEdge[310, 155], 
         DirectedEdge[319, 958], 
         DirectedEdge[322, 161], 
         DirectedEdge[323, 970], 
         DirectedEdge[325, 976], 
         DirectedEdge[334, 167], 
         DirectedEdge[340, 170], 
         DirectedEdge[350, 175], 
         DirectedEdge[358, 179], 
         DirectedEdge[364, 182], 
         DirectedEdge[376, 188], 
         DirectedEdge[377, 1132], 
         DirectedEdge[394, 197], 
         DirectedEdge[395, 1186], 
         DirectedEdge[404, 202], 
         DirectedEdge[412, 206], 
         DirectedEdge[425, 1276], 
         DirectedEdge[430, 215], 
         DirectedEdge[433, 1300], 
         DirectedEdge[445, 1336], 
         DirectedEdge[448, 224], 
         DirectedEdge[466, 233], 
         DirectedEdge[479, 1438], 
         DirectedEdge[484, 242], 
         DirectedEdge[485, 1456], 
         DirectedEdge[488, 244], 
         DirectedEdge[502, 251], 
         DirectedEdge[526, 263], 
         DirectedEdge[538, 269], 
         DirectedEdge[566, 283], 
         DirectedEdge[577, 1732], 
         DirectedEdge[592, 296], 
         DirectedEdge[593, 1780], 
         DirectedEdge[638, 319], 
         DirectedEdge[646, 323], 
         DirectedEdge[650, 325], 
         DirectedEdge[668, 334], 
         DirectedEdge[700, 350], 
         DirectedEdge[719, 2158], 
         DirectedEdge[728, 364], 
         DirectedEdge[754, 377], 
         DirectedEdge[790, 395], 
         DirectedEdge[808, 404], 
         DirectedEdge[850, 425], 
         DirectedEdge[866, 433], 
         DirectedEdge[890, 445], 
         DirectedEdge[911, 2734], 
         DirectedEdge[958, 479], 
         DirectedEdge[970, 485], 
         DirectedEdge[976, 488], 
         DirectedEdge[1079, 3238], 
         DirectedEdge[1132, 566], 
         DirectedEdge[1154, 577], 
         DirectedEdge[1186, 593], 
         DirectedEdge[1276, 638], 
         DirectedEdge[1300, 650], 
         DirectedEdge[1336, 668], 
         DirectedEdge[1367, 4102], 
         DirectedEdge[1438, 719], 
         DirectedEdge[1456, 728], 
         DirectedEdge[1619, 4858], 
         DirectedEdge[1732, 866], 
         DirectedEdge[1780, 890], 
         DirectedEdge[1822, 911], 
         DirectedEdge[2051, 6154], 
         DirectedEdge[2158, 1079], 
         DirectedEdge[2308, 1154], 
         DirectedEdge[2429, 7288], 
         DirectedEdge[2734, 1367], 
         DirectedEdge[3077, 9232], 
         DirectedEdge[3238, 1619], 
         DirectedEdge[3644, 1822], 
         DirectedEdge[4102, 2051], 
         DirectedEdge[4616, 2308], 
         DirectedEdge[4858, 2429], 
         DirectedEdge[6154, 3077], 
         DirectedEdge[7288, 3644], 
         DirectedEdge[9232, 4616]}, $CellContext`listLength$$ = 2, Condition[
         $CellContext`collatzList[
          Pattern[$CellContext`n, 
           Blank[Integer]], 
          Pattern[$CellContext`mod, 
           Blank[]]], $CellContext`n > 0] := NestWhileList[
         $CellContext`c[$CellContext`n, $CellContext`mod], $CellContext`n, # != 
         1& ], $CellContext`c[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]]] := Switch[$CellContext`mod, 2, If[
          EvenQ[#], #/2, 3 # + 1]& , 3, Switch[
          Mod[#, 3], 0, #/3, 1, (2 # + 1)/3, 2, (2 # - 1)/3]& , 5, Switch[
          Mod[#, 5], 0, #/5, 1, 5 # + 2, 2, 3 # - 1, 3, 2 # - 1, 4, (# + 1)/
          5]& , 7, Switch[
          Mod[#, 7], 0, #/7, 1, (3 # + 4)/7, 2, 4 # - 5, 3, (2 # + 22)/7, 
          4, (# + 3)/7, 5, (3 # - 1)/7, 6, (# + 8)/
          7]& ], $CellContext`withEdges := Apply[DirectedEdge, 
         Partition[
          $CellContext`collatzList[
           SlotSequence[1]], 2, 1], 2]& , $CellContext`gLayout[
        "HierarchicalEdgeBundling"] = {
        "EdgeLayout" -> {"HierarchicalEdgeBundling"}}, $CellContext`gLayout[
         Pattern[$CellContext`s, 
          Blank[]]] := $CellContext`s, $CellContext`checkQuadrant[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`G, 
          Blank[]]] := If[
         Not[
          MemberQ[
           VertexList[$CellContext`G], $CellContext`n]], {After, Above}, 
         With[{$CellContext`coords = Riffle[
             VertexList[$CellContext`G], 
             Part[
              ReplaceAll[
               AbsoluteOptions[$CellContext`G, VertexCoordinates], 
               Rule -> (#2& )], 1]]}, 
          Which[
           And[First[
              Flatten[
               
               Part[$CellContext`coords, $CellContext`position[$CellContext`n,
                   $CellContext`coords] + 1]]] > 0, Last[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] > 0], {
           After, Above}, 
           And[First[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] > 0, Last[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] < 0], {
           After, Below}, 
           And[First[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] < 0, Last[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] > 0], {
           Before, Above}, 
           And[First[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] < 0, Last[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] < 0], {
           Before, Below}]]], $CellContext`position[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`coords, 
          Blank[]]] := Flatten[
         Position[$CellContext`coords, $CellContext`n]], $CellContext`colors = 
       Map[
         ColorData["Rainbow"], Range[
           $CellContext`numbEdges[
            SlotSequence[1]]]/$CellContext`numbEdges[
          SlotSequence[1]]]& , $CellContext`numbEdges = Length[
         $CellContext`withEdges[
          SlotSequence[1]]]& , $CellContext`piecewiseFunc[
         Pattern[$CellContext`mod, 
          Blank[]]] := Switch[$CellContext`mod, 2, 
         Style[
          TraditionalForm[
           Function[$CellContext`x, 
            Piecewise[{{
               Row[{$CellContext`x, "\[ThinSpace]/\[ThinSpace]", 2}], 
               Congruent[
                Mod[$CellContext`x, 2], 0]}, {
               Row[{3 $CellContext`x + 1}], 
               Congruent[
                Mod[$CellContext`x, 2], 1]}}]]], FontFamily -> "Times"], 3, 
         Style[
          TraditionalForm[
           Function[$CellContext`x, 
            Piecewise[{{
               Row[{$CellContext`x, "\[ThinSpace]/\[ThinSpace]", 3}], 
               Congruent[
                Mod[$CellContext`x, 3], 0]}, {
               Row[{2 $CellContext`x + 1}], 
               Congruent[
                Mod[$CellContext`x, 3], 1]}, {
               
               Row[{"(", 2 $CellContext`x - 1, ")\[ThinSpace]/\[ThinSpace]", 
                 3}], 
               Congruent[
                Mod[$CellContext`x, 3], 2]}}]]], FontFamily -> "Times"], 5, 
         Style[
          TraditionalForm[
           Function[$CellContext`x, 
            Piecewise[{{
               Row[{$CellContext`x, "\[ThinSpace]/\[ThinSpace]", 5}], 
               Congruent[
                Mod[$CellContext`x, 5], 0]}, {
               Row[{"(", 5 $CellContext`x + 2, ")"}], 
               Congruent[
                Mod[$CellContext`x, 5], 1]}, {3 $CellContext`x - 1, 
               Congruent[
                Mod[$CellContext`x, 5], 2]}, {
               Row[{2 $CellContext`x - 1}], 
               Congruent[
                Mod[$CellContext`x, 5], 3]}, {
               
               Row[{"(", $CellContext`x + 1, ")\[ThinSpace]/\[ThinSpace]", 
                 5}], 
               Congruent[
                Mod[$CellContext`x, 5], 4]}}]]], FontFamily -> "Times"], 7, 
         Style[
          TraditionalForm[
           Function[$CellContext`x, 
            Piecewise[{{
               Row[{$CellContext`x, "\[ThinSpace]/\[ThinSpace]", 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 0]}, {
               
               Row[{"(", 3 $CellContext`x + 4, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 1]}, {4 $CellContext`x - 5, 
               Congruent[
                Mod[$CellContext`x, 7], 2]}, {
               
               Row[{"(", 2 $CellContext`x + 22, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 3]}, {
               
               Row[{"(", $CellContext`x + 3, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 4]}, {
               
               Row[{"(", 3 $CellContext`x - 1, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 5]}, {
               
               Row[{"(", $CellContext`x + 8, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 6]}}]]], FontFamily -> 
          "Times"]], $CellContext`collatzLengthSelect[
         Pattern[$CellContext`highlightSelect, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]]] := Length[
         $CellContext`collatzList[$CellContext`highlightSelect, \
$CellContext`mod]]}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->1131372972]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SnapshotsSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`a1$$ = -1.4, $CellContext`a2$$ = \
-$CellContext`a1$$, $CellContext`b1$$ = $CellContext`a1$$, $CellContext`b2$$ \
= -$CellContext`a1$$, $CellContext`back$$ = {}, $CellContext`collatzRange$$ = 
    Null, $CellContext`graphType$$ = 
    "HierarchicalEdgeBundling", $CellContext`highlightSelect$$ = 
    2, $CellContext`history$$ = {}, $CellContext`labeledPoint$$ = 
    3, $CellContext`listFont$$ = 12, $CellContext`listLength$$ = 
    2, $CellContext`maxCollatzPath$$ = 100, $CellContext`mod$$ = 
    2, $CellContext`showpath$$ = False, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`highlightSelect$$], 2, "select starting number"}, 2, 
      Dynamic[$CellContext`maxCollatzPath$$], 1}, {{
       Hold[$CellContext`maxCollatzPath$$], 100, "graph Collatz from 1 to"}, {
      100, 250, 500, 750, 1000}}, {{
       Hold[$CellContext`graphType$$], "HierarchicalEdgeBundling", 
       "graph type"}, {"HierarchicalEdgeBundling", "CircularEmbedding"}}, {
      Hold[
       Column[{
         Manipulate`Place[1], 
         Row[{
           Manipulate`Place[2], 
           Spacer[15], 
           Manipulate`Place[3]}]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`labeledPoint$$], 3, "label vertex"}, 
      Dynamic[
       Drop[
        Sort[
         DeleteDuplicates[
          Flatten[
           Table[
            $CellContext`collatzList[$CellContext`i, $CellContext`mod$$], \
{$CellContext`i, 1, $CellContext`maxCollatzPath$$, 1}]]]], 1]]}, {{
       Hold[$CellContext`mod$$], 2, "modulus of Collatz variation"}, {2, 3, 5,
       7}}, {{
       Hold[$CellContext`showpath$$], False, "show path"}, {True, False}}, {
      Hold[
       Row[{
         Manipulate`Place[4], 
         Spacer[15], 
         Manipulate`Place[5], 
         Spacer[15], 
         Manipulate`Place[6]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`a1$$], -1.4}}, {{
       Hold[$CellContext`a2$$], -$CellContext`a1$$}}, {{
       Hold[$CellContext`b1$$], $CellContext`a1$$}}, {{
       Hold[$CellContext`b2$$], -$CellContext`a1$$}}, {{
       Hold[$CellContext`history$$], {}}}, {{
       Hold[$CellContext`back$$], {}}}, {{
       Hold[$CellContext`mod$$], 2}}, {{
       Hold[$CellContext`listFont$$], 12}}, {{
       Hold[$CellContext`listLength$$], 2}}, {{
       Hold[$CellContext`highlightSelect$$], 2}}, {{
       Hold[$CellContext`graphType$$], "HierarchicalEdgeBundling"}}, {{
       Hold[$CellContext`labeledPoint$$], 3}}, {{
       Hold[$CellContext`maxCollatzPath$$], 100}}, {{
       Hold[$CellContext`showpath$$], False}}, {{
       Hold[$CellContext`collatzRange$$], Null}}}, Typeset`size$$ = {
    561., {183.3544921875, 188.6455078125}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`highlightSelect$6292$$ = 
    0, $CellContext`maxCollatzPath$6293$$ = 0, $CellContext`graphType$6294$$ =
     False, $CellContext`mod$6295$$ = 0, $CellContext`showpath$6296$$ = 
    False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`a1$$ = -1.4, $CellContext`a2$$ = \
-$CellContext`a1$$, $CellContext`b1$$ = $CellContext`a1$$, $CellContext`b2$$ = \
-$CellContext`a1$$, $CellContext`back$$ = {}, $CellContext`collatzRange$$ = 
        Null, $CellContext`graphType$$ = 
        "HierarchicalEdgeBundling", $CellContext`highlightSelect$$ = 
        2, $CellContext`history$$ = {}, $CellContext`labeledPoint$$ = 
        3, $CellContext`listFont$$ = 12, $CellContext`listLength$$ = 
        2, $CellContext`maxCollatzPath$$ = 100, $CellContext`mod$$ = 
        2, $CellContext`showpath$$ = False}, "ControllerVariables" :> {
        Hold[$CellContext`highlightSelect$$, \
$CellContext`highlightSelect$6292$$, 0], 
        Hold[$CellContext`maxCollatzPath$$, \
$CellContext`maxCollatzPath$6293$$, 0], 
        Hold[$CellContext`graphType$$, $CellContext`graphType$6294$$, False], 
        Hold[$CellContext`mod$$, $CellContext`mod$6295$$, 0], 
        Hold[$CellContext`showpath$$, $CellContext`showpath$6296$$, False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      DynamicModule[{$CellContext`G, $CellContext`listAll}, 
        Column[{
          Row[{
            EventHandler[
            If[$CellContext`maxCollatzPath$$ > $CellContext`collatzRange$$, \
$CellContext`maxCollatzPath$$ = $CellContext`collatzRange$$]; 
             If[$CellContext`highlightSelect$$ > \
$CellContext`maxCollatzPath$$, $CellContext`highlightSelect$$ = \
$CellContext`maxCollatzPath$$]; $CellContext`listFont$$ = Which[
                TrueQ[100 >= $CellContext`listLength$$ >= 0], 12, 
                TrueQ[
                 Inequality[
                 125, GreaterEqual, $CellContext`listLength$$, Greater, 100]],
                 10, 
                TrueQ[
                 Inequality[
                 150, GreaterEqual, $CellContext`listLength$$, Greater, 125]],
                 9, 
                TrueQ[$CellContext`listLength$$ > 150], 8, True, 12]; 
             With[{$CellContext`ptslist$ = Sort[
                  DeleteDuplicates[
                   Flatten[
                    Table[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$], {$CellContext`i, 1, $CellContext`maxCollatzPath$$, 
                    1}]]]]}, 
               If[
                Not[
                 
                 MemberQ[$CellContext`ptslist$, \
$CellContext`labeledPoint$$]], $CellContext`labeledPoint$$ = \
$CellContext`highlightSelect$$]]; $CellContext`G = 
              Fold[SetProperty[{#, #2}, {VertexStyle -> Directive[Red, 
                    Opacity[1]], VertexShapeFunction -> "Star", 
                  VertexSize -> {"Scaled", 0.04}}]& , 
                Graph[
                 Map[Tooltip[#, #]& , 
                  Apply[Union, 
                   Table[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$], {$CellContext`i, $CellContext`maxCollatzPath$$}]]], \
$CellContext`listAll = Union[
                   Flatten[
                    Table[
                    $CellContext`withEdges[$CellContext`i, \
$CellContext`mod$$], {$CellContext`i, 1, $CellContext`maxCollatzPath$$}]]], 
                 VertexLabelStyle -> Directive[Red, 20], 
                 GraphLayout -> \
$CellContext`gLayout[$CellContext`graphType$$], 
                 VertexSize -> {"Scaled", 2.4/Length[$CellContext`listAll]}, 
                 VertexStyle -> Directive[
                   Opacity[0], 
                   EdgeForm[None]], EdgeShapeFunction -> ({
                   Arrowheads[0.03], 
                   Arrow[#]}& ), VertexShapeFunction -> "Square", 
                 PlotRange -> {{$CellContext`a1$$, $CellContext`a2$$}, \
{$CellContext`b1$$, $CellContext`b2$$}}, ImageSize -> 372], {
                1, $CellContext`highlightSelect$$, \
$CellContext`labeledPoint$$}]; HighlightGraph[
               
               Graph[$CellContext`G, EdgeStyle -> Gray, 
                VertexLabels -> {1 -> Placed["1", 
                    $CellContext`checkQuadrant[
                    1, $CellContext`G]], $CellContext`highlightSelect$$ -> 
                  Placed[$CellContext`highlightSelect$$, 
                    $CellContext`checkQuadrant[$CellContext`highlightSelect$$,\
 $CellContext`G]], $CellContext`labeledPoint$$ -> 
                  Placed[$CellContext`labeledPoint$$, 
                    $CellContext`checkQuadrant[$CellContext`labeledPoint$$, \
$CellContext`G]]}], 
               MapThread[Style[#, 
                 Directive[
                  Thickness[1/105], #2]]& , {
                 $CellContext`withEdges[$CellContext`highlightSelect$$, \
$CellContext`mod$$], 
                 Reverse[
                  $CellContext`colors[$CellContext`highlightSelect$$, \
$CellContext`mod$$]]}]], {"MouseDown" :> Switch[{
                 MousePosition["Graphics"], 
                 First[
                  ToHeldExpression["CurrentValue"]]["ShiftKey"]}, {
                 PatternTest[
                  Blank[], And[
                  First[#] > ($CellContext`a1$$ + $CellContext`a2$$)/2, 
                   Last[#] > ($CellContext`b1$$ + $CellContext`b2$$)/2]& ], 
                 False}, $CellContext`a1$$ = 
                 ReplaceAll[$CellContext`a1$$, {$CellContext`a1$$ -> \
($CellContext`a1$$ + $CellContext`a2$$)/2}]; $CellContext`b1$$ = 
                 ReplaceAll[$CellContext`b1$$, {$CellContext`b1$$ -> \
($CellContext`b1$$ + $CellContext`b2$$)/2}]; 
                AppendTo[$CellContext`history$$, 1], {
                 PatternTest[
                  Blank[], 
                  Last[#] > ($CellContext`b1$$ + $CellContext`b2$$)/2& ], 
                 False}, $CellContext`a2$$ = 
                 ReplaceAll[$CellContext`a2$$, {$CellContext`a2$$ -> \
($CellContext`a1$$ + $CellContext`a2$$)/2}]; $CellContext`b1$$ = 
                 ReplaceAll[$CellContext`b1$$, {$CellContext`b1$$ -> \
($CellContext`b1$$ + $CellContext`b2$$)/2}]; 
                AppendTo[$CellContext`history$$, 2], {
                 PatternTest[
                  Blank[], 
                  First[#] <= ($CellContext`a1$$ + $CellContext`a2$$)/2& ], 
                 False}, $CellContext`a2$$ = 
                 ReplaceAll[$CellContext`a2$$, {$CellContext`a2$$ -> \
($CellContext`a1$$ + $CellContext`a2$$)/2}]; $CellContext`b2$$ = 
                 ReplaceAll[$CellContext`b2$$, {$CellContext`b2$$ -> \
($CellContext`b1$$ + $CellContext`b2$$)/2}]; 
                AppendTo[$CellContext`history$$, 3], {
                 PatternTest[
                  Blank[], 
                  First[#] > ($CellContext`a1$$ + $CellContext`a2$$)/2& ], 
                 False}, $CellContext`a1$$ = 
                 ReplaceAll[$CellContext`a1$$, {$CellContext`a1$$ -> \
($CellContext`a1$$ + $CellContext`a2$$)/2}]; $CellContext`b2$$ = 
                 
                 ReplaceAll[$CellContext`b2$$, {$CellContext`b2$$ -> \
($CellContext`b1$$ + $CellContext`b2$$)/2}]; 
                AppendTo[$CellContext`history$$, 4], {
                 Blank[], True}, 
                If[
                Length[$CellContext`history$$] != 
                 0, $CellContext`back$$ = 
                  Last[$CellContext`history$$]; $CellContext`history$$ = 
                  Take[$CellContext`history$$, {1, -2}]; 
                 Switch[$CellContext`back$$, 
                   1, $CellContext`a1$$ = 
                    2 $CellContext`a1$$ - $CellContext`a2$$; \
$CellContext`b1$$ = 2 $CellContext`b1$$ - $CellContext`b2$$, 
                   2, $CellContext`a2$$ = 
                    2 $CellContext`a2$$ - $CellContext`a1$$; \
$CellContext`b1$$ = 2 $CellContext`b1$$ - $CellContext`b2$$, 
                   3, $CellContext`a2$$ = 
                    2 $CellContext`a2$$ - $CellContext`a1$$; \
$CellContext`b2$$ = 2 $CellContext`b2$$ - $CellContext`b1$$, 
                   4, $CellContext`a1$$ = 
                    2 $CellContext`a1$$ - $CellContext`a2$$; \
$CellContext`b2$$ = 2 $CellContext`b2$$ - $CellContext`b1$$]]]}], 
            Spacer[10], 
            Column[{
              If[
               And[$CellContext`showpath$$, 
                IntegerQ[$CellContext`highlightSelect$$]], 
               Text[
                Style[
                 Row[
                  (($CellContext`listLength$$ = Length[#]; {#})& )[
                   $CellContext`collatzList[$CellContext`highlightSelect$$, \
$CellContext`mod$$]], ImageSize -> 200], FontFamily -> "Times", 
                 FontSize -> $CellContext`listFont$$]], ""], Null, 
              Column[{
                Row[{
                  Text[
                   Style["function for mod ", FontFamily -> "Times"]], 
                  Text[
                   Style[$CellContext`mod$$ ": ", FontFamily -> "Times"]]}], 
                Text[
                 Style[
                  $CellContext`piecewiseFunc[$CellContext`mod$$], FontFamily -> 
                  "Times"]]}], Null, 
              Row[{
                Text[
                 Style["max sequence length up to ", FontFamily -> "Times"]], 
                Text[
                 Style[$CellContext`maxCollatzPath$$, FontFamily -> "Times"]], 
                Text[
                 Style[": ", FontFamily -> "Times"]], 
                Text[
                 Style[
                  Max[
                   Table[
                    Length[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$]], {$CellContext`i, 1, $CellContext`maxCollatzPath$$}]], 
                  FontFamily -> "Times"]]}], 
              Row[{
                Text[
                 Style[
                 "starting number of max sequence: ", FontFamily -> "Times"]], 
                Text[
                 Style[
                  Part[
                   Part[
                    Position[
                    Table[
                    Length[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$]], {$CellContext`i, 1, $CellContext`maxCollatzPath$$}], 
                    Max[
                    Table[
                    Length[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$]], {$CellContext`i, 1, $CellContext`maxCollatzPath$$}]]], 
                    1], 1], FontFamily -> "Times"]]}], Null, 
              Row[{
                Text[
                 Style["current sequence length ", FontFamily -> "Times"]], 
                Text[
                 Style[" = ", FontFamily -> "Times"]], 
                Text[
                 Style[
                  $CellContext`collatzLengthSelect[$CellContext`\
highlightSelect$$, $CellContext`mod$$], FontFamily -> "Times"]]}], 
              Row[{
                Text[
                 Style[
                 "max value of current sequence: ", FontFamily -> "Times"]], 
                Text[
                 Style[
                  Max[
                   $CellContext`collatzList[$CellContext`highlightSelect$$, \
$CellContext`mod$$]], FontFamily -> "Times"]]}]}]}]}, Alignment -> Center, 
         Spacings -> If[$CellContext`showpath$$, Automatic, -0.25]]], 
      "Specifications" :> {{{$CellContext`highlightSelect$$, 2, 
          "select starting number"}, 2, 
         Dynamic[$CellContext`maxCollatzPath$$], 1, Appearance -> "Labeled", 
         ControlPlacement -> 
         1}, {{$CellContext`maxCollatzPath$$, 100, 
          "graph Collatz from 1 to"}, {100, 250, 500, 750, 1000}, ControlType -> 
         SetterBar, ControlPlacement -> 
         2}, {{$CellContext`graphType$$, "HierarchicalEdgeBundling", 
          "graph type"}, {"HierarchicalEdgeBundling", "CircularEmbedding"}, 
         ControlType -> PopupMenu, ControlPlacement -> 3}, 
        Column[{
          Manipulate`Place[1], 
          Row[{
            Manipulate`Place[2], 
            Spacer[15], 
            Manipulate`Place[3]}]}], {{$CellContext`labeledPoint$$, 3, 
          "label vertex"}, 
         Dynamic[
          Drop[
           Sort[
            DeleteDuplicates[
             Flatten[
              Table[
               $CellContext`collatzList[$CellContext`i, $CellContext`mod$$], \
{$CellContext`i, 1, $CellContext`maxCollatzPath$$, 1}]]]], 1]], ControlType -> 
         PopupMenu, ControlPlacement -> 
         4}, {{$CellContext`mod$$, 2, "modulus of Collatz variation"}, {2, 3, 
         5, 7}, ControlType -> SetterBar, ControlPlacement -> 
         5}, {{$CellContext`showpath$$, False, "show path"}, {True, False}, 
         ControlPlacement -> 6}, 
        Row[{
          Manipulate`Place[4], 
          Spacer[15], 
          Manipulate`Place[5], 
          Spacer[15], 
          Manipulate`Place[6]}], {{$CellContext`a1$$, -1.4}, ControlType -> 
         None}, {{$CellContext`a2$$, -$CellContext`a1$$}, ControlType -> 
         None}, {{$CellContext`b1$$, $CellContext`a1$$}, ControlType -> 
         None}, {{$CellContext`b2$$, -$CellContext`a1$$}, ControlType -> 
         None}, {{$CellContext`history$$, {}}, ControlType -> 
         None}, {{$CellContext`back$$, {}}, ControlType -> 
         None}, {{$CellContext`mod$$, 2}, ControlType -> 
         None}, {{$CellContext`listFont$$, 12}, ControlType -> 
         None}, {{$CellContext`listLength$$, 2}, ControlType -> 
         None}, {{$CellContext`highlightSelect$$, 2}, ControlType -> 
         None}, {{$CellContext`graphType$$, "HierarchicalEdgeBundling"}, 
         ControlType -> None}, {{$CellContext`labeledPoint$$, 3}, ControlType -> 
         None}, {{$CellContext`maxCollatzPath$$, 100}, ControlType -> 
         None}, {{$CellContext`showpath$$, False}, ControlType -> 
         None}, {{$CellContext`collatzRange$$, Null}, ControlType -> None}}, 
      "Options" :> {AutorunSequencing -> {1, 2, 3}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{604., {257., 262.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`listAll = {
         DirectedEdge[2, 1], 
         DirectedEdge[3, 10], 
         DirectedEdge[4, 2], 
         DirectedEdge[5, 16], 
         DirectedEdge[6, 3], 
         DirectedEdge[7, 22], 
         DirectedEdge[8, 4], 
         DirectedEdge[9, 28], 
         DirectedEdge[10, 5], 
         DirectedEdge[11, 34], 
         DirectedEdge[12, 6], 
         DirectedEdge[13, 40], 
         DirectedEdge[14, 7], 
         DirectedEdge[15, 46], 
         DirectedEdge[16, 8], 
         DirectedEdge[17, 52], 
         DirectedEdge[18, 9], 
         DirectedEdge[19, 58], 
         DirectedEdge[20, 10], 
         DirectedEdge[21, 64], 
         DirectedEdge[22, 11], 
         DirectedEdge[23, 70], 
         DirectedEdge[24, 12], 
         DirectedEdge[25, 76], 
         DirectedEdge[26, 13], 
         DirectedEdge[27, 82], 
         DirectedEdge[28, 14], 
         DirectedEdge[29, 88], 
         DirectedEdge[30, 15], 
         DirectedEdge[31, 94], 
         DirectedEdge[32, 16], 
         DirectedEdge[33, 100], 
         DirectedEdge[34, 17], 
         DirectedEdge[35, 106], 
         DirectedEdge[36, 18], 
         DirectedEdge[37, 112], 
         DirectedEdge[38, 19], 
         DirectedEdge[39, 118], 
         DirectedEdge[40, 20], 
         DirectedEdge[41, 124], 
         DirectedEdge[42, 21], 
         DirectedEdge[43, 130], 
         DirectedEdge[44, 22], 
         DirectedEdge[45, 136], 
         DirectedEdge[46, 23], 
         DirectedEdge[47, 142], 
         DirectedEdge[48, 24], 
         DirectedEdge[49, 148], 
         DirectedEdge[50, 25], 
         DirectedEdge[51, 154], 
         DirectedEdge[52, 26], 
         DirectedEdge[53, 160], 
         DirectedEdge[54, 27], 
         DirectedEdge[55, 166], 
         DirectedEdge[56, 28], 
         DirectedEdge[57, 172], 
         DirectedEdge[58, 29], 
         DirectedEdge[59, 178], 
         DirectedEdge[60, 30], 
         DirectedEdge[61, 184], 
         DirectedEdge[62, 31], 
         DirectedEdge[63, 190], 
         DirectedEdge[64, 32], 
         DirectedEdge[65, 196], 
         DirectedEdge[66, 33], 
         DirectedEdge[67, 202], 
         DirectedEdge[68, 34], 
         DirectedEdge[69, 208], 
         DirectedEdge[70, 35], 
         DirectedEdge[71, 214], 
         DirectedEdge[72, 36], 
         DirectedEdge[73, 220], 
         DirectedEdge[74, 37], 
         DirectedEdge[75, 226], 
         DirectedEdge[76, 38], 
         DirectedEdge[77, 232], 
         DirectedEdge[78, 39], 
         DirectedEdge[79, 238], 
         DirectedEdge[80, 40], 
         DirectedEdge[81, 244], 
         DirectedEdge[82, 41], 
         DirectedEdge[83, 250], 
         DirectedEdge[84, 42], 
         DirectedEdge[85, 256], 
         DirectedEdge[86, 43], 
         DirectedEdge[87, 262], 
         DirectedEdge[88, 44], 
         DirectedEdge[89, 268], 
         DirectedEdge[90, 45], 
         DirectedEdge[91, 274], 
         DirectedEdge[92, 46], 
         DirectedEdge[93, 280], 
         DirectedEdge[94, 47], 
         DirectedEdge[95, 286], 
         DirectedEdge[96, 48], 
         DirectedEdge[97, 292], 
         DirectedEdge[98, 49], 
         DirectedEdge[99, 298], 
         DirectedEdge[100, 50], 
         DirectedEdge[101, 304], 
         DirectedEdge[103, 310], 
         DirectedEdge[104, 52], 
         DirectedEdge[106, 53], 
         DirectedEdge[107, 322], 
         DirectedEdge[110, 55], 
         DirectedEdge[112, 56], 
         DirectedEdge[113, 340], 
         DirectedEdge[116, 58], 
         DirectedEdge[118, 59], 
         DirectedEdge[119, 358], 
         DirectedEdge[121, 364], 
         DirectedEdge[122, 61], 
         DirectedEdge[124, 62], 
         DirectedEdge[125, 376], 
         DirectedEdge[128, 64], 
         DirectedEdge[130, 65], 
         DirectedEdge[131, 394], 
         DirectedEdge[134, 67], 
         DirectedEdge[136, 68], 
         DirectedEdge[137, 412], 
         DirectedEdge[140, 70], 
         DirectedEdge[142, 71], 
         DirectedEdge[143, 430], 
         DirectedEdge[146, 73], 
         DirectedEdge[148, 74], 
         DirectedEdge[149, 448], 
         DirectedEdge[152, 76], 
         DirectedEdge[154, 77], 
         DirectedEdge[155, 466], 
         DirectedEdge[160, 80], 
         DirectedEdge[161, 484], 
         DirectedEdge[166, 83], 
         DirectedEdge[167, 502], 
         DirectedEdge[170, 85], 
         DirectedEdge[172, 86], 
         DirectedEdge[175, 526], 
         DirectedEdge[178, 89], 
         DirectedEdge[179, 538], 
         DirectedEdge[182, 91], 
         DirectedEdge[184, 92], 
         DirectedEdge[188, 94], 
         DirectedEdge[190, 95], 
         DirectedEdge[196, 98], 
         DirectedEdge[197, 592], 
         DirectedEdge[202, 101], 
         DirectedEdge[206, 103], 
         DirectedEdge[208, 104], 
         DirectedEdge[214, 107], 
         DirectedEdge[215, 646], 
         DirectedEdge[220, 110], 
         DirectedEdge[224, 112], 
         DirectedEdge[226, 113], 
         DirectedEdge[232, 116], 
         DirectedEdge[233, 700], 
         DirectedEdge[238, 119], 
         DirectedEdge[242, 121], 
         DirectedEdge[244, 122], 
         DirectedEdge[250, 125], 
         DirectedEdge[251, 754], 
         DirectedEdge[256, 128], 
         DirectedEdge[262, 131], 
         DirectedEdge[263, 790], 
         DirectedEdge[268, 134], 
         DirectedEdge[269, 808], 
         DirectedEdge[274, 137], 
         DirectedEdge[280, 140], 
         DirectedEdge[283, 850], 
         DirectedEdge[286, 143], 
         DirectedEdge[292, 146], 
         DirectedEdge[296, 148], 
         DirectedEdge[298, 149], 
         DirectedEdge[304, 152], 
         DirectedEdge[310, 155], 
         DirectedEdge[319, 958], 
         DirectedEdge[322, 161], 
         DirectedEdge[323, 970], 
         DirectedEdge[325, 976], 
         DirectedEdge[334, 167], 
         DirectedEdge[340, 170], 
         DirectedEdge[350, 175], 
         DirectedEdge[358, 179], 
         DirectedEdge[364, 182], 
         DirectedEdge[376, 188], 
         DirectedEdge[377, 1132], 
         DirectedEdge[394, 197], 
         DirectedEdge[395, 1186], 
         DirectedEdge[404, 202], 
         DirectedEdge[412, 206], 
         DirectedEdge[425, 1276], 
         DirectedEdge[430, 215], 
         DirectedEdge[433, 1300], 
         DirectedEdge[445, 1336], 
         DirectedEdge[448, 224], 
         DirectedEdge[466, 233], 
         DirectedEdge[479, 1438], 
         DirectedEdge[484, 242], 
         DirectedEdge[485, 1456], 
         DirectedEdge[488, 244], 
         DirectedEdge[502, 251], 
         DirectedEdge[526, 263], 
         DirectedEdge[538, 269], 
         DirectedEdge[566, 283], 
         DirectedEdge[577, 1732], 
         DirectedEdge[592, 296], 
         DirectedEdge[593, 1780], 
         DirectedEdge[638, 319], 
         DirectedEdge[646, 323], 
         DirectedEdge[650, 325], 
         DirectedEdge[668, 334], 
         DirectedEdge[700, 350], 
         DirectedEdge[719, 2158], 
         DirectedEdge[728, 364], 
         DirectedEdge[754, 377], 
         DirectedEdge[790, 395], 
         DirectedEdge[808, 404], 
         DirectedEdge[850, 425], 
         DirectedEdge[866, 433], 
         DirectedEdge[890, 445], 
         DirectedEdge[911, 2734], 
         DirectedEdge[958, 479], 
         DirectedEdge[970, 485], 
         DirectedEdge[976, 488], 
         DirectedEdge[1079, 3238], 
         DirectedEdge[1132, 566], 
         DirectedEdge[1154, 577], 
         DirectedEdge[1186, 593], 
         DirectedEdge[1276, 638], 
         DirectedEdge[1300, 650], 
         DirectedEdge[1336, 668], 
         DirectedEdge[1367, 4102], 
         DirectedEdge[1438, 719], 
         DirectedEdge[1456, 728], 
         DirectedEdge[1619, 4858], 
         DirectedEdge[1732, 866], 
         DirectedEdge[1780, 890], 
         DirectedEdge[1822, 911], 
         DirectedEdge[2051, 6154], 
         DirectedEdge[2158, 1079], 
         DirectedEdge[2308, 1154], 
         DirectedEdge[2429, 7288], 
         DirectedEdge[2734, 1367], 
         DirectedEdge[3077, 9232], 
         DirectedEdge[3238, 1619], 
         DirectedEdge[3644, 1822], 
         DirectedEdge[4102, 2051], 
         DirectedEdge[4616, 2308], 
         DirectedEdge[4858, 2429], 
         DirectedEdge[6154, 3077], 
         DirectedEdge[7288, 3644], 
         DirectedEdge[9232, 4616]}, $CellContext`listLength$$ = 2, Condition[
         $CellContext`collatzList[
          Pattern[$CellContext`n, 
           Blank[Integer]], 
          Pattern[$CellContext`mod, 
           Blank[]]], $CellContext`n > 0] := NestWhileList[
         $CellContext`c[$CellContext`n, $CellContext`mod], $CellContext`n, # != 
         1& ], $CellContext`c[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]]] := Switch[$CellContext`mod, 2, If[
          EvenQ[#], #/2, 3 # + 1]& , 3, Switch[
          Mod[#, 3], 0, #/3, 1, (2 # + 1)/3, 2, (2 # - 1)/3]& , 5, Switch[
          Mod[#, 5], 0, #/5, 1, 5 # + 2, 2, 3 # - 1, 3, 2 # - 1, 4, (# + 1)/
          5]& , 7, Switch[
          Mod[#, 7], 0, #/7, 1, (3 # + 4)/7, 2, 4 # - 5, 3, (2 # + 22)/7, 
          4, (# + 3)/7, 5, (3 # - 1)/7, 6, (# + 8)/
          7]& ], $CellContext`withEdges := Apply[DirectedEdge, 
         Partition[
          $CellContext`collatzList[
           SlotSequence[1]], 2, 1], 2]& , $CellContext`gLayout[
        "HierarchicalEdgeBundling"] = {
        "EdgeLayout" -> {"HierarchicalEdgeBundling"}}, $CellContext`gLayout[
         Pattern[$CellContext`s, 
          Blank[]]] := $CellContext`s, $CellContext`checkQuadrant[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`G, 
          Blank[]]] := If[
         Not[
          MemberQ[
           VertexList[$CellContext`G], $CellContext`n]], {After, Above}, 
         With[{$CellContext`coords = Riffle[
             VertexList[$CellContext`G], 
             Part[
              ReplaceAll[
               AbsoluteOptions[$CellContext`G, VertexCoordinates], 
               Rule -> (#2& )], 1]]}, 
          Which[
           And[First[
              Flatten[
               
               Part[$CellContext`coords, $CellContext`position[$CellContext`n,
                   $CellContext`coords] + 1]]] > 0, Last[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] > 0], {
           After, Above}, 
           And[First[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] > 0, Last[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] < 0], {
           After, Below}, 
           And[First[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] < 0, Last[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] > 0], {
           Before, Above}, 
           And[First[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] < 0, Last[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] < 0], {
           Before, Below}]]], $CellContext`position[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`coords, 
          Blank[]]] := Flatten[
         Position[$CellContext`coords, $CellContext`n]], $CellContext`colors = 
       Map[
         ColorData["Rainbow"], Range[
           $CellContext`numbEdges[
            SlotSequence[1]]]/$CellContext`numbEdges[
          SlotSequence[1]]]& , $CellContext`numbEdges = Length[
         $CellContext`withEdges[
          SlotSequence[1]]]& , $CellContext`piecewiseFunc[
         Pattern[$CellContext`mod, 
          Blank[]]] := Switch[$CellContext`mod, 2, 
         Style[
          TraditionalForm[
           Function[$CellContext`x, 
            Piecewise[{{
               Row[{$CellContext`x, "\[ThinSpace]/\[ThinSpace]", 2}], 
               Congruent[
                Mod[$CellContext`x, 2], 0]}, {
               Row[{3 $CellContext`x + 1}], 
               Congruent[
                Mod[$CellContext`x, 2], 1]}}]]], FontFamily -> "Times"], 3, 
         Style[
          TraditionalForm[
           Function[$CellContext`x, 
            Piecewise[{{
               Row[{$CellContext`x, "\[ThinSpace]/\[ThinSpace]", 3}], 
               Congruent[
                Mod[$CellContext`x, 3], 0]}, {
               Row[{2 $CellContext`x + 1}], 
               Congruent[
                Mod[$CellContext`x, 3], 1]}, {
               
               Row[{"(", 2 $CellContext`x - 1, ")\[ThinSpace]/\[ThinSpace]", 
                 3}], 
               Congruent[
                Mod[$CellContext`x, 3], 2]}}]]], FontFamily -> "Times"], 5, 
         Style[
          TraditionalForm[
           Function[$CellContext`x, 
            Piecewise[{{
               Row[{$CellContext`x, "\[ThinSpace]/\[ThinSpace]", 5}], 
               Congruent[
                Mod[$CellContext`x, 5], 0]}, {
               Row[{"(", 5 $CellContext`x + 2, ")"}], 
               Congruent[
                Mod[$CellContext`x, 5], 1]}, {3 $CellContext`x - 1, 
               Congruent[
                Mod[$CellContext`x, 5], 2]}, {
               Row[{2 $CellContext`x - 1}], 
               Congruent[
                Mod[$CellContext`x, 5], 3]}, {
               
               Row[{"(", $CellContext`x + 1, ")\[ThinSpace]/\[ThinSpace]", 
                 5}], 
               Congruent[
                Mod[$CellContext`x, 5], 4]}}]]], FontFamily -> "Times"], 7, 
         Style[
          TraditionalForm[
           Function[$CellContext`x, 
            Piecewise[{{
               Row[{$CellContext`x, "\[ThinSpace]/\[ThinSpace]", 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 0]}, {
               
               Row[{"(", 3 $CellContext`x + 4, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 1]}, {4 $CellContext`x - 5, 
               Congruent[
                Mod[$CellContext`x, 7], 2]}, {
               
               Row[{"(", 2 $CellContext`x + 22, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 3]}, {
               
               Row[{"(", $CellContext`x + 3, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 4]}, {
               
               Row[{"(", 3 $CellContext`x - 1, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 5]}, {
               
               Row[{"(", $CellContext`x + 8, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 6]}}]]], FontFamily -> 
          "Times"]], $CellContext`collatzLengthSelect[
         Pattern[$CellContext`highlightSelect, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]]] := Length[
         $CellContext`collatzList[$CellContext`highlightSelect, \
$CellContext`mod]]}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->1165329866],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`a1$$ = -1.4, $CellContext`a2$$ = 
    0., $CellContext`b1$$ = -1.4, $CellContext`b2$$ = 
    0., $CellContext`back$$ = 2, $CellContext`collatzRange$$ = 
    Null, $CellContext`graphType$$ = 
    "CircularEmbedding", $CellContext`highlightSelect$$ = 
    231, $CellContext`history$$ = {3}, $CellContext`labeledPoint$$ = 
    231, $CellContext`listFont$$ = 12, $CellContext`listLength$$ = 
    2, $CellContext`maxCollatzPath$$ = 250, $CellContext`mod$$ = 
    2, $CellContext`showpath$$ = False, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`highlightSelect$$], 231, "select starting number"}, 
      2, 
      Dynamic[$CellContext`maxCollatzPath$$], 1}, {{
       Hold[$CellContext`maxCollatzPath$$], 250, "graph Collatz from 1 to"}, {
      100, 250, 500, 750, 1000}}, {{
       Hold[$CellContext`graphType$$], "CircularEmbedding", "graph type"}, {
      "HierarchicalEdgeBundling", "CircularEmbedding"}}, {
      Hold[
       Column[{
         Manipulate`Place[1], 
         Row[{
           Manipulate`Place[2], 
           Spacer[15], 
           Manipulate`Place[3]}]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`labeledPoint$$], 231, "label vertex"}, 
      Dynamic[
       Drop[
        Sort[
         DeleteDuplicates[
          Flatten[
           Table[
            $CellContext`collatzList[$CellContext`i, $CellContext`mod$$], \
{$CellContext`i, 1, $CellContext`maxCollatzPath$$, 1}]]]], 1]]}, {{
       Hold[$CellContext`mod$$], 2, "modulus of Collatz variation"}, {2, 3, 5,
       7}}, {{
       Hold[$CellContext`showpath$$], False, "show path"}, {True, False}}, {
      Hold[
       Row[{
         Manipulate`Place[4], 
         Spacer[15], 
         Manipulate`Place[5], 
         Spacer[15], 
         Manipulate`Place[6]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`a1$$], -1.4}}, {{
       Hold[$CellContext`a2$$], 0.}}, {{
       Hold[$CellContext`b1$$], -1.4}}, {{
       Hold[$CellContext`b2$$], 0.}}, {{
       Hold[$CellContext`history$$], {3}}}, {{
       Hold[$CellContext`back$$], 2}}, {{
       Hold[$CellContext`mod$$], 2}}, {{
       Hold[$CellContext`listFont$$], 12}}, {{
       Hold[$CellContext`listLength$$], 2}}, {{
       Hold[$CellContext`highlightSelect$$], 231}}, {{
       Hold[$CellContext`graphType$$], "CircularEmbedding"}}, {{
       Hold[$CellContext`labeledPoint$$], 231}}, {{
       Hold[$CellContext`maxCollatzPath$$], 250}}, {{
       Hold[$CellContext`showpath$$], False}}, {{
       Hold[$CellContext`collatzRange$$], Null}}}, Typeset`size$$ = {
    567., {183.3544921875, 188.6455078125}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`highlightSelect$6399$$ = 
    0, $CellContext`maxCollatzPath$6400$$ = 0, $CellContext`graphType$6401$$ =
     False, $CellContext`mod$6402$$ = 0, $CellContext`showpath$6403$$ = 
    False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`a1$$ = -1.4, $CellContext`a2$$ = 
        0., $CellContext`b1$$ = -1.4, $CellContext`b2$$ = 
        0., $CellContext`back$$ = 2, $CellContext`collatzRange$$ = 
        Null, $CellContext`graphType$$ = 
        "CircularEmbedding", $CellContext`highlightSelect$$ = 
        231, $CellContext`history$$ = {3}, $CellContext`labeledPoint$$ = 
        231, $CellContext`listFont$$ = 12, $CellContext`listLength$$ = 
        2, $CellContext`maxCollatzPath$$ = 250, $CellContext`mod$$ = 
        2, $CellContext`showpath$$ = False}, "ControllerVariables" :> {
        Hold[$CellContext`highlightSelect$$, \
$CellContext`highlightSelect$6399$$, 0], 
        Hold[$CellContext`maxCollatzPath$$, \
$CellContext`maxCollatzPath$6400$$, 0], 
        Hold[$CellContext`graphType$$, $CellContext`graphType$6401$$, False], 
        Hold[$CellContext`mod$$, $CellContext`mod$6402$$, 0], 
        Hold[$CellContext`showpath$$, $CellContext`showpath$6403$$, False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      DynamicModule[{$CellContext`G, $CellContext`listAll}, 
        Column[{
          Row[{
            EventHandler[
            If[$CellContext`maxCollatzPath$$ > $CellContext`collatzRange$$, \
$CellContext`maxCollatzPath$$ = $CellContext`collatzRange$$]; 
             If[$CellContext`highlightSelect$$ > \
$CellContext`maxCollatzPath$$, $CellContext`highlightSelect$$ = \
$CellContext`maxCollatzPath$$]; $CellContext`listFont$$ = Which[
                TrueQ[100 >= $CellContext`listLength$$ >= 0], 12, 
                TrueQ[
                 Inequality[
                 125, GreaterEqual, $CellContext`listLength$$, Greater, 100]],
                 10, 
                TrueQ[
                 Inequality[
                 150, GreaterEqual, $CellContext`listLength$$, Greater, 125]],
                 9, 
                TrueQ[$CellContext`listLength$$ > 150], 8, True, 12]; 
             With[{$CellContext`ptslist$ = Sort[
                  DeleteDuplicates[
                   Flatten[
                    Table[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$], {$CellContext`i, 1, $CellContext`maxCollatzPath$$, 
                    1}]]]]}, 
               If[
                Not[
                 
                 MemberQ[$CellContext`ptslist$, \
$CellContext`labeledPoint$$]], $CellContext`labeledPoint$$ = \
$CellContext`highlightSelect$$]]; $CellContext`G = 
              Fold[SetProperty[{#, #2}, {VertexStyle -> Directive[Red, 
                    Opacity[1]], VertexShapeFunction -> "Star", 
                  VertexSize -> {"Scaled", 0.04}}]& , 
                Graph[
                 Map[Tooltip[#, #]& , 
                  Apply[Union, 
                   Table[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$], {$CellContext`i, $CellContext`maxCollatzPath$$}]]], \
$CellContext`listAll = Union[
                   Flatten[
                    Table[
                    $CellContext`withEdges[$CellContext`i, \
$CellContext`mod$$], {$CellContext`i, 1, $CellContext`maxCollatzPath$$}]]], 
                 VertexLabelStyle -> Directive[Red, 20], 
                 GraphLayout -> \
$CellContext`gLayout[$CellContext`graphType$$], 
                 VertexSize -> {"Scaled", 2.4/Length[$CellContext`listAll]}, 
                 VertexStyle -> Directive[
                   Opacity[0], 
                   EdgeForm[None]], EdgeShapeFunction -> ({
                   Arrowheads[0.03], 
                   Arrow[#]}& ), VertexShapeFunction -> "Square", 
                 PlotRange -> {{$CellContext`a1$$, $CellContext`a2$$}, \
{$CellContext`b1$$, $CellContext`b2$$}}, ImageSize -> 372], {
                1, $CellContext`highlightSelect$$, \
$CellContext`labeledPoint$$}]; HighlightGraph[
               
               Graph[$CellContext`G, EdgeStyle -> Gray, 
                VertexLabels -> {1 -> Placed["1", 
                    $CellContext`checkQuadrant[
                    1, $CellContext`G]], $CellContext`highlightSelect$$ -> 
                  Placed[$CellContext`highlightSelect$$, 
                    $CellContext`checkQuadrant[$CellContext`highlightSelect$$,\
 $CellContext`G]], $CellContext`labeledPoint$$ -> 
                  Placed[$CellContext`labeledPoint$$, 
                    $CellContext`checkQuadrant[$CellContext`labeledPoint$$, \
$CellContext`G]]}], 
               MapThread[Style[#, 
                 Directive[
                  Thickness[1/105], #2]]& , {
                 $CellContext`withEdges[$CellContext`highlightSelect$$, \
$CellContext`mod$$], 
                 Reverse[
                  $CellContext`colors[$CellContext`highlightSelect$$, \
$CellContext`mod$$]]}]], {"MouseDown" :> Switch[{
                 MousePosition["Graphics"], 
                 First[
                  ToHeldExpression["CurrentValue"]]["ShiftKey"]}, {
                 PatternTest[
                  Blank[], And[
                  First[#] > ($CellContext`a1$$ + $CellContext`a2$$)/2, 
                   Last[#] > ($CellContext`b1$$ + $CellContext`b2$$)/2]& ], 
                 False}, $CellContext`a1$$ = 
                 ReplaceAll[$CellContext`a1$$, {$CellContext`a1$$ -> \
($CellContext`a1$$ + $CellContext`a2$$)/2}]; $CellContext`b1$$ = 
                 ReplaceAll[$CellContext`b1$$, {$CellContext`b1$$ -> \
($CellContext`b1$$ + $CellContext`b2$$)/2}]; 
                AppendTo[$CellContext`history$$, 1], {
                 PatternTest[
                  Blank[], 
                  Last[#] > ($CellContext`b1$$ + $CellContext`b2$$)/2& ], 
                 False}, $CellContext`a2$$ = 
                 ReplaceAll[$CellContext`a2$$, {$CellContext`a2$$ -> \
($CellContext`a1$$ + $CellContext`a2$$)/2}]; $CellContext`b1$$ = 
                 ReplaceAll[$CellContext`b1$$, {$CellContext`b1$$ -> \
($CellContext`b1$$ + $CellContext`b2$$)/2}]; 
                AppendTo[$CellContext`history$$, 2], {
                 PatternTest[
                  Blank[], 
                  First[#] <= ($CellContext`a1$$ + $CellContext`a2$$)/2& ], 
                 False}, $CellContext`a2$$ = 
                 ReplaceAll[$CellContext`a2$$, {$CellContext`a2$$ -> \
($CellContext`a1$$ + $CellContext`a2$$)/2}]; $CellContext`b2$$ = 
                 ReplaceAll[$CellContext`b2$$, {$CellContext`b2$$ -> \
($CellContext`b1$$ + $CellContext`b2$$)/2}]; 
                AppendTo[$CellContext`history$$, 3], {
                 PatternTest[
                  Blank[], 
                  First[#] > ($CellContext`a1$$ + $CellContext`a2$$)/2& ], 
                 False}, $CellContext`a1$$ = 
                 ReplaceAll[$CellContext`a1$$, {$CellContext`a1$$ -> \
($CellContext`a1$$ + $CellContext`a2$$)/2}]; $CellContext`b2$$ = 
                 ReplaceAll[$CellContext`b2$$, {$CellContext`b2$$ -> \
($CellContext`b1$$ + $CellContext`b2$$)/2}]; 
                AppendTo[$CellContext`history$$, 4], {
                 Blank[], True}, 
                If[
                Length[$CellContext`history$$] != 
                 0, $CellContext`back$$ = 
                  Last[$CellContext`history$$]; $CellContext`history$$ = 
                  Take[$CellContext`history$$, {1, -2}]; 
                 Switch[$CellContext`back$$, 
                   1, $CellContext`a1$$ = 
                    2 $CellContext`a1$$ - $CellContext`a2$$; \
$CellContext`b1$$ = 2 $CellContext`b1$$ - $CellContext`b2$$, 
                   2, $CellContext`a2$$ = 
                    2 $CellContext`a2$$ - $CellContext`a1$$; \
$CellContext`b1$$ = 2 $CellContext`b1$$ - $CellContext`b2$$, 
                   3, $CellContext`a2$$ = 
                    2 $CellContext`a2$$ - $CellContext`a1$$; \
$CellContext`b2$$ = 2 $CellContext`b2$$ - $CellContext`b1$$, 
                   4, $CellContext`a1$$ = 
                    2 $CellContext`a1$$ - $CellContext`a2$$; \
$CellContext`b2$$ = 2 $CellContext`b2$$ - $CellContext`b1$$]]]}], 
            Spacer[10], 
            Column[{
              If[
               And[$CellContext`showpath$$, 
                IntegerQ[$CellContext`highlightSelect$$]], 
               Text[
                Style[
                 Row[
                  (($CellContext`listLength$$ = Length[#]; {#})& )[
                   $CellContext`collatzList[$CellContext`highlightSelect$$, \
$CellContext`mod$$]], ImageSize -> 200], FontFamily -> "Times", 
                 FontSize -> $CellContext`listFont$$]], ""], Null, 
              Column[{
                Row[{
                  Text[
                   Style["function for mod ", FontFamily -> "Times"]], 
                  Text[
                   Style[$CellContext`mod$$ ": ", FontFamily -> "Times"]]}], 
                Text[
                 Style[
                  $CellContext`piecewiseFunc[$CellContext`mod$$], FontFamily -> 
                  "Times"]]}], Null, 
              Row[{
                Text[
                 Style["max sequence length up to ", FontFamily -> "Times"]], 
                Text[
                 Style[$CellContext`maxCollatzPath$$, FontFamily -> "Times"]],
                 
                Text[
                 Style[": ", FontFamily -> "Times"]], 
                Text[
                 Style[
                  Max[
                   Table[
                    Length[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$]], {$CellContext`i, 1, $CellContext`maxCollatzPath$$}]], 
                  FontFamily -> "Times"]]}], 
              Row[{
                Text[
                 Style[
                 "starting number of max sequence: ", FontFamily -> "Times"]], 
                Text[
                 Style[
                  Part[
                   Part[
                    Position[
                    Table[
                    Length[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$]], {$CellContext`i, 1, $CellContext`maxCollatzPath$$}], 
                    Max[
                    Table[
                    Length[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$]], {$CellContext`i, 1, $CellContext`maxCollatzPath$$}]]], 
                    1], 1], FontFamily -> "Times"]]}], Null, 
              Row[{
                Text[
                 Style["current sequence length ", FontFamily -> "Times"]], 
                Text[
                 Style[" = ", FontFamily -> "Times"]], 
                Text[
                 Style[
                  $CellContext`collatzLengthSelect[$CellContext`\
highlightSelect$$, $CellContext`mod$$], FontFamily -> "Times"]]}], 
              Row[{
                Text[
                 Style[
                 "max value of current sequence: ", FontFamily -> "Times"]], 
                Text[
                 Style[
                  Max[
                   $CellContext`collatzList[$CellContext`highlightSelect$$, \
$CellContext`mod$$]], FontFamily -> "Times"]]}]}]}]}, Alignment -> Center, 
         Spacings -> If[$CellContext`showpath$$, Automatic, -0.25]]], 
      "Specifications" :> {{{$CellContext`highlightSelect$$, 231, 
          "select starting number"}, 2, 
         Dynamic[$CellContext`maxCollatzPath$$], 1, Appearance -> "Labeled", 
         ControlPlacement -> 
         1}, {{$CellContext`maxCollatzPath$$, 250, 
          "graph Collatz from 1 to"}, {100, 250, 500, 750, 1000}, ControlType -> 
         SetterBar, ControlPlacement -> 
         2}, {{$CellContext`graphType$$, "CircularEmbedding", "graph type"}, {
         "HierarchicalEdgeBundling", "CircularEmbedding"}, ControlType -> 
         PopupMenu, ControlPlacement -> 3}, 
        Column[{
          Manipulate`Place[1], 
          Row[{
            Manipulate`Place[2], 
            Spacer[15], 
            Manipulate`Place[3]}]}], {{$CellContext`labeledPoint$$, 231, 
          "label vertex"}, 
         Dynamic[
          Drop[
           Sort[
            DeleteDuplicates[
             Flatten[
              Table[
               $CellContext`collatzList[$CellContext`i, $CellContext`mod$$], \
{$CellContext`i, 1, $CellContext`maxCollatzPath$$, 1}]]]], 1]], ControlType -> 
         PopupMenu, ControlPlacement -> 
         4}, {{$CellContext`mod$$, 2, "modulus of Collatz variation"}, {2, 3, 
         5, 7}, ControlType -> SetterBar, ControlPlacement -> 
         5}, {{$CellContext`showpath$$, False, "show path"}, {True, False}, 
         ControlPlacement -> 6}, 
        Row[{
          Manipulate`Place[4], 
          Spacer[15], 
          Manipulate`Place[5], 
          Spacer[15], 
          Manipulate`Place[6]}], {{$CellContext`a1$$, -1.4}, ControlType -> 
         None}, {{$CellContext`a2$$, 0.}, ControlType -> 
         None}, {{$CellContext`b1$$, -1.4}, ControlType -> 
         None}, {{$CellContext`b2$$, 0.}, ControlType -> 
         None}, {{$CellContext`history$$, {3}}, ControlType -> 
         None}, {{$CellContext`back$$, 2}, ControlType -> 
         None}, {{$CellContext`mod$$, 2}, ControlType -> 
         None}, {{$CellContext`listFont$$, 12}, ControlType -> 
         None}, {{$CellContext`listLength$$, 2}, ControlType -> 
         None}, {{$CellContext`highlightSelect$$, 231}, ControlType -> 
         None}, {{$CellContext`graphType$$, "CircularEmbedding"}, ControlType -> 
         None}, {{$CellContext`labeledPoint$$, 231}, ControlType -> 
         None}, {{$CellContext`maxCollatzPath$$, 250}, ControlType -> 
         None}, {{$CellContext`showpath$$, False}, ControlType -> 
         None}, {{$CellContext`collatzRange$$, Null}, ControlType -> None}}, 
      "Options" :> {AutorunSequencing -> {1, 2, 3}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{610., {257., 262.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`listAll = {
         DirectedEdge[2, 1], 
         DirectedEdge[3, 10], 
         DirectedEdge[4, 2], 
         DirectedEdge[5, 16], 
         DirectedEdge[6, 3], 
         DirectedEdge[7, 22], 
         DirectedEdge[8, 4], 
         DirectedEdge[9, 28], 
         DirectedEdge[10, 5], 
         DirectedEdge[11, 34], 
         DirectedEdge[12, 6], 
         DirectedEdge[13, 40], 
         DirectedEdge[14, 7], 
         DirectedEdge[15, 46], 
         DirectedEdge[16, 8], 
         DirectedEdge[17, 52], 
         DirectedEdge[18, 9], 
         DirectedEdge[19, 58], 
         DirectedEdge[20, 10], 
         DirectedEdge[21, 64], 
         DirectedEdge[22, 11], 
         DirectedEdge[23, 70], 
         DirectedEdge[24, 12], 
         DirectedEdge[25, 76], 
         DirectedEdge[26, 13], 
         DirectedEdge[27, 82], 
         DirectedEdge[28, 14], 
         DirectedEdge[29, 88], 
         DirectedEdge[30, 15], 
         DirectedEdge[31, 94], 
         DirectedEdge[32, 16], 
         DirectedEdge[33, 100], 
         DirectedEdge[34, 17], 
         DirectedEdge[35, 106], 
         DirectedEdge[36, 18], 
         DirectedEdge[37, 112], 
         DirectedEdge[38, 19], 
         DirectedEdge[39, 118], 
         DirectedEdge[40, 20], 
         DirectedEdge[41, 124], 
         DirectedEdge[42, 21], 
         DirectedEdge[43, 130], 
         DirectedEdge[44, 22], 
         DirectedEdge[45, 136], 
         DirectedEdge[46, 23], 
         DirectedEdge[47, 142], 
         DirectedEdge[48, 24], 
         DirectedEdge[49, 148], 
         DirectedEdge[50, 25], 
         DirectedEdge[51, 154], 
         DirectedEdge[52, 26], 
         DirectedEdge[53, 160], 
         DirectedEdge[54, 27], 
         DirectedEdge[55, 166], 
         DirectedEdge[56, 28], 
         DirectedEdge[57, 172], 
         DirectedEdge[58, 29], 
         DirectedEdge[59, 178], 
         DirectedEdge[60, 30], 
         DirectedEdge[61, 184], 
         DirectedEdge[62, 31], 
         DirectedEdge[63, 190], 
         DirectedEdge[64, 32], 
         DirectedEdge[65, 196], 
         DirectedEdge[66, 33], 
         DirectedEdge[67, 202], 
         DirectedEdge[68, 34], 
         DirectedEdge[69, 208], 
         DirectedEdge[70, 35], 
         DirectedEdge[71, 214], 
         DirectedEdge[72, 36], 
         DirectedEdge[73, 220], 
         DirectedEdge[74, 37], 
         DirectedEdge[75, 226], 
         DirectedEdge[76, 38], 
         DirectedEdge[77, 232], 
         DirectedEdge[78, 39], 
         DirectedEdge[79, 238], 
         DirectedEdge[80, 40], 
         DirectedEdge[81, 244], 
         DirectedEdge[82, 41], 
         DirectedEdge[83, 250], 
         DirectedEdge[84, 42], 
         DirectedEdge[85, 256], 
         DirectedEdge[86, 43], 
         DirectedEdge[87, 262], 
         DirectedEdge[88, 44], 
         DirectedEdge[89, 268], 
         DirectedEdge[90, 45], 
         DirectedEdge[91, 274], 
         DirectedEdge[92, 46], 
         DirectedEdge[93, 280], 
         DirectedEdge[94, 47], 
         DirectedEdge[95, 286], 
         DirectedEdge[96, 48], 
         DirectedEdge[97, 292], 
         DirectedEdge[98, 49], 
         DirectedEdge[99, 298], 
         DirectedEdge[100, 50], 
         DirectedEdge[101, 304], 
         DirectedEdge[103, 310], 
         DirectedEdge[104, 52], 
         DirectedEdge[106, 53], 
         DirectedEdge[107, 322], 
         DirectedEdge[110, 55], 
         DirectedEdge[112, 56], 
         DirectedEdge[113, 340], 
         DirectedEdge[116, 58], 
         DirectedEdge[118, 59], 
         DirectedEdge[119, 358], 
         DirectedEdge[121, 364], 
         DirectedEdge[122, 61], 
         DirectedEdge[124, 62], 
         DirectedEdge[125, 376], 
         DirectedEdge[128, 64], 
         DirectedEdge[130, 65], 
         DirectedEdge[131, 394], 
         DirectedEdge[134, 67], 
         DirectedEdge[136, 68], 
         DirectedEdge[137, 412], 
         DirectedEdge[140, 70], 
         DirectedEdge[142, 71], 
         DirectedEdge[143, 430], 
         DirectedEdge[146, 73], 
         DirectedEdge[148, 74], 
         DirectedEdge[149, 448], 
         DirectedEdge[152, 76], 
         DirectedEdge[154, 77], 
         DirectedEdge[155, 466], 
         DirectedEdge[160, 80], 
         DirectedEdge[161, 484], 
         DirectedEdge[166, 83], 
         DirectedEdge[167, 502], 
         DirectedEdge[170, 85], 
         DirectedEdge[172, 86], 
         DirectedEdge[175, 526], 
         DirectedEdge[178, 89], 
         DirectedEdge[179, 538], 
         DirectedEdge[182, 91], 
         DirectedEdge[184, 92], 
         DirectedEdge[188, 94], 
         DirectedEdge[190, 95], 
         DirectedEdge[196, 98], 
         DirectedEdge[197, 592], 
         DirectedEdge[202, 101], 
         DirectedEdge[206, 103], 
         DirectedEdge[208, 104], 
         DirectedEdge[214, 107], 
         DirectedEdge[215, 646], 
         DirectedEdge[220, 110], 
         DirectedEdge[224, 112], 
         DirectedEdge[226, 113], 
         DirectedEdge[232, 116], 
         DirectedEdge[233, 700], 
         DirectedEdge[238, 119], 
         DirectedEdge[242, 121], 
         DirectedEdge[244, 122], 
         DirectedEdge[250, 125], 
         DirectedEdge[251, 754], 
         DirectedEdge[256, 128], 
         DirectedEdge[262, 131], 
         DirectedEdge[263, 790], 
         DirectedEdge[268, 134], 
         DirectedEdge[269, 808], 
         DirectedEdge[274, 137], 
         DirectedEdge[280, 140], 
         DirectedEdge[283, 850], 
         DirectedEdge[286, 143], 
         DirectedEdge[292, 146], 
         DirectedEdge[296, 148], 
         DirectedEdge[298, 149], 
         DirectedEdge[304, 152], 
         DirectedEdge[310, 155], 
         DirectedEdge[319, 958], 
         DirectedEdge[322, 161], 
         DirectedEdge[323, 970], 
         DirectedEdge[325, 976], 
         DirectedEdge[334, 167], 
         DirectedEdge[340, 170], 
         DirectedEdge[350, 175], 
         DirectedEdge[358, 179], 
         DirectedEdge[364, 182], 
         DirectedEdge[376, 188], 
         DirectedEdge[377, 1132], 
         DirectedEdge[394, 197], 
         DirectedEdge[395, 1186], 
         DirectedEdge[404, 202], 
         DirectedEdge[412, 206], 
         DirectedEdge[425, 1276], 
         DirectedEdge[430, 215], 
         DirectedEdge[433, 1300], 
         DirectedEdge[445, 1336], 
         DirectedEdge[448, 224], 
         DirectedEdge[466, 233], 
         DirectedEdge[479, 1438], 
         DirectedEdge[484, 242], 
         DirectedEdge[485, 1456], 
         DirectedEdge[488, 244], 
         DirectedEdge[502, 251], 
         DirectedEdge[526, 263], 
         DirectedEdge[538, 269], 
         DirectedEdge[566, 283], 
         DirectedEdge[577, 1732], 
         DirectedEdge[592, 296], 
         DirectedEdge[593, 1780], 
         DirectedEdge[638, 319], 
         DirectedEdge[646, 323], 
         DirectedEdge[650, 325], 
         DirectedEdge[668, 334], 
         DirectedEdge[700, 350], 
         DirectedEdge[719, 2158], 
         DirectedEdge[728, 364], 
         DirectedEdge[754, 377], 
         DirectedEdge[790, 395], 
         DirectedEdge[808, 404], 
         DirectedEdge[850, 425], 
         DirectedEdge[866, 433], 
         DirectedEdge[890, 445], 
         DirectedEdge[911, 2734], 
         DirectedEdge[958, 479], 
         DirectedEdge[970, 485], 
         DirectedEdge[976, 488], 
         DirectedEdge[1079, 3238], 
         DirectedEdge[1132, 566], 
         DirectedEdge[1154, 577], 
         DirectedEdge[1186, 593], 
         DirectedEdge[1276, 638], 
         DirectedEdge[1300, 650], 
         DirectedEdge[1336, 668], 
         DirectedEdge[1367, 4102], 
         DirectedEdge[1438, 719], 
         DirectedEdge[1456, 728], 
         DirectedEdge[1619, 4858], 
         DirectedEdge[1732, 866], 
         DirectedEdge[1780, 890], 
         DirectedEdge[1822, 911], 
         DirectedEdge[2051, 6154], 
         DirectedEdge[2158, 1079], 
         DirectedEdge[2308, 1154], 
         DirectedEdge[2429, 7288], 
         DirectedEdge[2734, 1367], 
         DirectedEdge[3077, 9232], 
         DirectedEdge[3238, 1619], 
         DirectedEdge[3644, 1822], 
         DirectedEdge[4102, 2051], 
         DirectedEdge[4616, 2308], 
         DirectedEdge[4858, 2429], 
         DirectedEdge[6154, 3077], 
         DirectedEdge[7288, 3644], 
         DirectedEdge[9232, 4616]}, $CellContext`listLength$$ = 2, Condition[
         $CellContext`collatzList[
          Pattern[$CellContext`n, 
           Blank[Integer]], 
          Pattern[$CellContext`mod, 
           Blank[]]], $CellContext`n > 0] := NestWhileList[
         $CellContext`c[$CellContext`n, $CellContext`mod], $CellContext`n, # != 
         1& ], $CellContext`c[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]]] := Switch[$CellContext`mod, 2, If[
          EvenQ[#], #/2, 3 # + 1]& , 3, Switch[
          Mod[#, 3], 0, #/3, 1, (2 # + 1)/3, 2, (2 # - 1)/3]& , 5, Switch[
          Mod[#, 5], 0, #/5, 1, 5 # + 2, 2, 3 # - 1, 3, 2 # - 1, 4, (# + 1)/
          5]& , 7, Switch[
          Mod[#, 7], 0, #/7, 1, (3 # + 4)/7, 2, 4 # - 5, 3, (2 # + 22)/7, 
          4, (# + 3)/7, 5, (3 # - 1)/7, 6, (# + 8)/
          7]& ], $CellContext`withEdges := Apply[DirectedEdge, 
         Partition[
          $CellContext`collatzList[
           SlotSequence[1]], 2, 1], 2]& , $CellContext`gLayout[
        "HierarchicalEdgeBundling"] = {
        "EdgeLayout" -> {"HierarchicalEdgeBundling"}}, $CellContext`gLayout[
         Pattern[$CellContext`s, 
          Blank[]]] := $CellContext`s, $CellContext`checkQuadrant[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`G, 
          Blank[]]] := If[
         Not[
          MemberQ[
           VertexList[$CellContext`G], $CellContext`n]], {After, Above}, 
         With[{$CellContext`coords = Riffle[
             VertexList[$CellContext`G], 
             Part[
              ReplaceAll[
               AbsoluteOptions[$CellContext`G, VertexCoordinates], 
               Rule -> (#2& )], 1]]}, 
          Which[
           And[First[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] > 0, Last[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] > 0], {
           After, Above}, 
           And[First[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] > 0, Last[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] < 0], {
           After, Below}, 
           And[First[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] < 0, Last[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] > 0], {
           Before, Above}, 
           And[First[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] < 0, Last[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] < 0], {
           Before, Below}]]], $CellContext`position[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`coords, 
          Blank[]]] := Flatten[
         Position[$CellContext`coords, $CellContext`n]], $CellContext`colors = 
       Map[
         ColorData["Rainbow"], Range[
           $CellContext`numbEdges[
            SlotSequence[1]]]/$CellContext`numbEdges[
          SlotSequence[1]]]& , $CellContext`numbEdges = Length[
         $CellContext`withEdges[
          SlotSequence[1]]]& , $CellContext`piecewiseFunc[
         Pattern[$CellContext`mod, 
          Blank[]]] := Switch[$CellContext`mod, 2, 
         Style[
          TraditionalForm[
           Function[$CellContext`x, 
            Piecewise[{{
               Row[{$CellContext`x, "\[ThinSpace]/\[ThinSpace]", 2}], 
               Congruent[
                Mod[$CellContext`x, 2], 0]}, {
               Row[{3 $CellContext`x + 1}], 
               Congruent[
                Mod[$CellContext`x, 2], 1]}}]]], FontFamily -> "Times"], 3, 
         Style[
          TraditionalForm[
           Function[$CellContext`x, 
            Piecewise[{{
               Row[{$CellContext`x, "\[ThinSpace]/\[ThinSpace]", 3}], 
               Congruent[
                Mod[$CellContext`x, 3], 0]}, {
               Row[{2 $CellContext`x + 1}], 
               Congruent[
                Mod[$CellContext`x, 3], 1]}, {
               
               Row[{"(", 2 $CellContext`x - 1, ")\[ThinSpace]/\[ThinSpace]", 
                 3}], 
               Congruent[
                Mod[$CellContext`x, 3], 2]}}]]], FontFamily -> "Times"], 5, 
         Style[
          TraditionalForm[
           Function[$CellContext`x, 
            Piecewise[{{
               Row[{$CellContext`x, "\[ThinSpace]/\[ThinSpace]", 5}], 
               Congruent[
                Mod[$CellContext`x, 5], 0]}, {
               Row[{"(", 5 $CellContext`x + 2, ")"}], 
               Congruent[
                Mod[$CellContext`x, 5], 1]}, {3 $CellContext`x - 1, 
               Congruent[
                Mod[$CellContext`x, 5], 2]}, {
               Row[{2 $CellContext`x - 1}], 
               Congruent[
                Mod[$CellContext`x, 5], 3]}, {
               
               Row[{"(", $CellContext`x + 1, ")\[ThinSpace]/\[ThinSpace]", 
                 5}], 
               Congruent[
                Mod[$CellContext`x, 5], 4]}}]]], FontFamily -> "Times"], 7, 
         Style[
          TraditionalForm[
           Function[$CellContext`x, 
            Piecewise[{{
               Row[{$CellContext`x, "\[ThinSpace]/\[ThinSpace]", 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 0]}, {
               
               Row[{"(", 3 $CellContext`x + 4, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 1]}, {4 $CellContext`x - 5, 
               Congruent[
                Mod[$CellContext`x, 7], 2]}, {
               
               Row[{"(", 2 $CellContext`x + 22, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 3]}, {
               
               Row[{"(", $CellContext`x + 3, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 4]}, {
               
               Row[{"(", 3 $CellContext`x - 1, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 5]}, {
               
               Row[{"(", $CellContext`x + 8, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 6]}}]]], FontFamily -> 
          "Times"]], $CellContext`collatzLengthSelect[
         Pattern[$CellContext`highlightSelect, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]]] := Length[
         $CellContext`collatzList[$CellContext`highlightSelect, \
$CellContext`mod]]}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->648197222],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`a1$$ = -0.7, $CellContext`a2$$ = 
    0., $CellContext`b1$$ = -0.7, $CellContext`b2$$ = 
    0., $CellContext`back$$ = {}, $CellContext`collatzRange$$ = 
    Null, $CellContext`graphType$$ = 
    "CircularEmbedding", $CellContext`highlightSelect$$ = 
    231, $CellContext`history$$ = {3, 1}, $CellContext`labeledPoint$$ = 
    231, $CellContext`listFont$$ = 12, $CellContext`listLength$$ = 
    2, $CellContext`maxCollatzPath$$ = 250, $CellContext`mod$$ = 
    2, $CellContext`showpath$$ = False, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`highlightSelect$$], 231, "select starting number"}, 
      2, 
      Dynamic[$CellContext`maxCollatzPath$$], 1}, {{
       Hold[$CellContext`maxCollatzPath$$], 250, "graph Collatz from 1 to"}, {
      100, 250, 500, 750, 1000}}, {{
       Hold[$CellContext`graphType$$], "CircularEmbedding", "graph type"}, {
      "HierarchicalEdgeBundling", "CircularEmbedding"}}, {
      Hold[
       Column[{
         Manipulate`Place[1], 
         Row[{
           Manipulate`Place[2], 
           Spacer[15], 
           Manipulate`Place[3]}]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`labeledPoint$$], 231, "label vertex"}, 
      Dynamic[
       Drop[
        Sort[
         DeleteDuplicates[
          Flatten[
           Table[
            $CellContext`collatzList[$CellContext`i, $CellContext`mod$$], \
{$CellContext`i, 1, $CellContext`maxCollatzPath$$, 1}]]]], 1]]}, {{
       Hold[$CellContext`mod$$], 2, "modulus of Collatz variation"}, {2, 3, 5,
       7}}, {{
       Hold[$CellContext`showpath$$], False, "show path"}, {True, False}}, {
      Hold[
       Row[{
         Manipulate`Place[4], 
         Spacer[15], 
         Manipulate`Place[5], 
         Spacer[15], 
         Manipulate`Place[6]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`a1$$], -0.7}}, {{
       Hold[$CellContext`a2$$], 0.}}, {{
       Hold[$CellContext`b1$$], -0.7}}, {{
       Hold[$CellContext`b2$$], 0.}}, {{
       Hold[$CellContext`history$$], {3, 1}}}, {{
       Hold[$CellContext`back$$], {}}}, {{
       Hold[$CellContext`mod$$], 2}}, {{
       Hold[$CellContext`listFont$$], 12}}, {{
       Hold[$CellContext`listLength$$], 2}}, {{
       Hold[$CellContext`highlightSelect$$], 231}}, {{
       Hold[$CellContext`graphType$$], "CircularEmbedding"}}, {{
       Hold[$CellContext`labeledPoint$$], 231}}, {{
       Hold[$CellContext`maxCollatzPath$$], 250}}, {{
       Hold[$CellContext`showpath$$], False}}, {{
       Hold[$CellContext`collatzRange$$], Null}}}, Typeset`size$$ = {
    567., {183.3544921875, 188.6455078125}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`highlightSelect$6506$$ = 
    0, $CellContext`maxCollatzPath$6507$$ = 0, $CellContext`graphType$6508$$ =
     False, $CellContext`mod$6509$$ = 0, $CellContext`showpath$6510$$ = 
    False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`a1$$ = -0.7, $CellContext`a2$$ = 
        0., $CellContext`b1$$ = -0.7, $CellContext`b2$$ = 
        0., $CellContext`back$$ = {}, $CellContext`collatzRange$$ = 
        Null, $CellContext`graphType$$ = 
        "CircularEmbedding", $CellContext`highlightSelect$$ = 
        231, $CellContext`history$$ = {3, 1}, $CellContext`labeledPoint$$ = 
        231, $CellContext`listFont$$ = 12, $CellContext`listLength$$ = 
        2, $CellContext`maxCollatzPath$$ = 250, $CellContext`mod$$ = 
        2, $CellContext`showpath$$ = False}, "ControllerVariables" :> {
        Hold[$CellContext`highlightSelect$$, \
$CellContext`highlightSelect$6506$$, 0], 
        Hold[$CellContext`maxCollatzPath$$, \
$CellContext`maxCollatzPath$6507$$, 0], 
        Hold[$CellContext`graphType$$, $CellContext`graphType$6508$$, False], 
        Hold[$CellContext`mod$$, $CellContext`mod$6509$$, 0], 
        Hold[$CellContext`showpath$$, $CellContext`showpath$6510$$, False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      DynamicModule[{$CellContext`G, $CellContext`listAll}, 
        Column[{
          Row[{
            EventHandler[
            If[$CellContext`maxCollatzPath$$ > $CellContext`collatzRange$$, \
$CellContext`maxCollatzPath$$ = $CellContext`collatzRange$$]; 
             If[$CellContext`highlightSelect$$ > \
$CellContext`maxCollatzPath$$, $CellContext`highlightSelect$$ = \
$CellContext`maxCollatzPath$$]; $CellContext`listFont$$ = Which[
                TrueQ[100 >= $CellContext`listLength$$ >= 0], 12, 
                TrueQ[
                 Inequality[
                 125, GreaterEqual, $CellContext`listLength$$, Greater, 100]],
                 10, 
                TrueQ[
                 Inequality[
                 150, GreaterEqual, $CellContext`listLength$$, Greater, 125]],
                 9, 
                TrueQ[$CellContext`listLength$$ > 150], 8, True, 12]; 
             With[{$CellContext`ptslist$ = Sort[
                  DeleteDuplicates[
                   Flatten[
                    Table[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$], {$CellContext`i, 1, $CellContext`maxCollatzPath$$, 
                    1}]]]]}, 
               If[
                Not[
                 
                 MemberQ[$CellContext`ptslist$, \
$CellContext`labeledPoint$$]], $CellContext`labeledPoint$$ = \
$CellContext`highlightSelect$$]]; $CellContext`G = 
              Fold[SetProperty[{#, #2}, {VertexStyle -> Directive[Red, 
                    Opacity[1]], VertexShapeFunction -> "Star", 
                  VertexSize -> {"Scaled", 0.04}}]& , 
                Graph[
                 Map[Tooltip[#, #]& , 
                  Apply[Union, 
                   Table[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$], {$CellContext`i, $CellContext`maxCollatzPath$$}]]], \
$CellContext`listAll = Union[
                   Flatten[
                    Table[
                    $CellContext`withEdges[$CellContext`i, \
$CellContext`mod$$], {$CellContext`i, 1, $CellContext`maxCollatzPath$$}]]], 
                 VertexLabelStyle -> Directive[Red, 20], 
                 GraphLayout -> \
$CellContext`gLayout[$CellContext`graphType$$], 
                 VertexSize -> {"Scaled", 2.4/Length[$CellContext`listAll]}, 
                 VertexStyle -> Directive[
                   Opacity[0], 
                   EdgeForm[None]], EdgeShapeFunction -> ({
                   Arrowheads[0.03], 
                   Arrow[#]}& ), VertexShapeFunction -> "Square", 
                 PlotRange -> {{$CellContext`a1$$, $CellContext`a2$$}, \
{$CellContext`b1$$, $CellContext`b2$$}}, ImageSize -> 372], {
                1, $CellContext`highlightSelect$$, \
$CellContext`labeledPoint$$}]; HighlightGraph[
               
               Graph[$CellContext`G, EdgeStyle -> Gray, 
                VertexLabels -> {1 -> Placed["1", 
                    $CellContext`checkQuadrant[
                    1, $CellContext`G]], $CellContext`highlightSelect$$ -> 
                  Placed[$CellContext`highlightSelect$$, 
                    $CellContext`checkQuadrant[$CellContext`highlightSelect$$,\
 $CellContext`G]], $CellContext`labeledPoint$$ -> 
                  Placed[$CellContext`labeledPoint$$, 
                    $CellContext`checkQuadrant[$CellContext`labeledPoint$$, \
$CellContext`G]]}], 
               MapThread[Style[#, 
                 Directive[
                  Thickness[1/105], #2]]& , {
                 $CellContext`withEdges[$CellContext`highlightSelect$$, \
$CellContext`mod$$], 
                 Reverse[
                  $CellContext`colors[$CellContext`highlightSelect$$, \
$CellContext`mod$$]]}]], {"MouseDown" :> Switch[{
                 MousePosition["Graphics"], 
                 First[
                  ToHeldExpression["CurrentValue"]]["ShiftKey"]}, {
                 PatternTest[
                  Blank[], And[
                  First[#] > ($CellContext`a1$$ + $CellContext`a2$$)/2, 
                   Last[#] > ($CellContext`b1$$ + $CellContext`b2$$)/2]& ], 
                 False}, $CellContext`a1$$ = 
                 ReplaceAll[$CellContext`a1$$, {$CellContext`a1$$ -> \
($CellContext`a1$$ + $CellContext`a2$$)/2}]; $CellContext`b1$$ = 
                 ReplaceAll[$CellContext`b1$$, {$CellContext`b1$$ -> \
($CellContext`b1$$ + $CellContext`b2$$)/2}]; 
                AppendTo[$CellContext`history$$, 1], {
                 PatternTest[
                  Blank[], 
                  Last[#] > ($CellContext`b1$$ + $CellContext`b2$$)/2& ], 
                 False}, $CellContext`a2$$ = 
                 ReplaceAll[$CellContext`a2$$, {$CellContext`a2$$ -> \
($CellContext`a1$$ + $CellContext`a2$$)/2}]; $CellContext`b1$$ = 
                 ReplaceAll[$CellContext`b1$$, {$CellContext`b1$$ -> \
($CellContext`b1$$ + $CellContext`b2$$)/2}]; 
                AppendTo[$CellContext`history$$, 2], {
                 PatternTest[
                  Blank[], 
                  First[#] <= ($CellContext`a1$$ + $CellContext`a2$$)/2& ], 
                 False}, $CellContext`a2$$ = 
                 ReplaceAll[$CellContext`a2$$, {$CellContext`a2$$ -> \
($CellContext`a1$$ + $CellContext`a2$$)/2}]; $CellContext`b2$$ = 
                 ReplaceAll[$CellContext`b2$$, {$CellContext`b2$$ -> \
($CellContext`b1$$ + $CellContext`b2$$)/2}]; 
                AppendTo[$CellContext`history$$, 3], {
                 PatternTest[
                  Blank[], 
                  First[#] > ($CellContext`a1$$ + $CellContext`a2$$)/2& ], 
                 False}, $CellContext`a1$$ = 
                 ReplaceAll[$CellContext`a1$$, {$CellContext`a1$$ -> \
($CellContext`a1$$ + $CellContext`a2$$)/2}]; $CellContext`b2$$ = 
                 ReplaceAll[$CellContext`b2$$, {$CellContext`b2$$ -> \
($CellContext`b1$$ + $CellContext`b2$$)/2}]; 
                AppendTo[$CellContext`history$$, 4], {
                 Blank[], True}, 
                If[
                Length[$CellContext`history$$] != 
                 0, $CellContext`back$$ = 
                  Last[$CellContext`history$$]; $CellContext`history$$ = 
                  Take[$CellContext`history$$, {1, -2}]; 
                 Switch[$CellContext`back$$, 
                   1, $CellContext`a1$$ = 
                    2 $CellContext`a1$$ - $CellContext`a2$$; \
$CellContext`b1$$ = 2 $CellContext`b1$$ - $CellContext`b2$$, 
                   2, $CellContext`a2$$ = 
                    2 $CellContext`a2$$ - $CellContext`a1$$; \
$CellContext`b1$$ = 2 $CellContext`b1$$ - $CellContext`b2$$, 
                   3, $CellContext`a2$$ = 
                    2 $CellContext`a2$$ - $CellContext`a1$$; \
$CellContext`b2$$ = 2 $CellContext`b2$$ - $CellContext`b1$$, 
                   4, $CellContext`a1$$ = 
                    2 $CellContext`a1$$ - $CellContext`a2$$; \
$CellContext`b2$$ = 2 $CellContext`b2$$ - $CellContext`b1$$]]]}], 
            Spacer[10], 
            Column[{
              If[
               And[$CellContext`showpath$$, 
                IntegerQ[$CellContext`highlightSelect$$]], 
               Text[
                Style[
                 Row[
                  (($CellContext`listLength$$ = Length[#]; {#})& )[
                   $CellContext`collatzList[$CellContext`highlightSelect$$, \
$CellContext`mod$$]], ImageSize -> 200], FontFamily -> "Times", 
                 FontSize -> $CellContext`listFont$$]], ""], Null, 
              Column[{
                Row[{
                  Text[
                   Style["function for mod ", FontFamily -> "Times"]], 
                  Text[
                   Style[$CellContext`mod$$ ": ", FontFamily -> "Times"]]}], 
                Text[
                 Style[
                  $CellContext`piecewiseFunc[$CellContext`mod$$], FontFamily -> 
                  "Times"]]}], Null, 
              Row[{
                Text[
                 Style["max sequence length up to ", FontFamily -> "Times"]], 
                Text[
                 Style[$CellContext`maxCollatzPath$$, FontFamily -> "Times"]], 
                Text[
                 Style[": ", FontFamily -> "Times"]], 
                Text[
                 Style[
                  Max[
                   Table[
                    Length[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$]], {$CellContext`i, 1, $CellContext`maxCollatzPath$$}]], 
                  FontFamily -> "Times"]]}], 
              Row[{
                Text[
                 Style[
                 "starting number of max sequence: ", FontFamily -> "Times"]], 
                Text[
                 Style[
                  Part[
                   Part[
                    Position[
                    Table[
                    Length[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$]], {$CellContext`i, 1, $CellContext`maxCollatzPath$$}], 
                    Max[
                    Table[
                    Length[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$]], {$CellContext`i, 1, $CellContext`maxCollatzPath$$}]]], 
                    1], 1], FontFamily -> "Times"]]}], Null, 
              Row[{
                Text[
                 Style["current sequence length ", FontFamily -> "Times"]], 
                Text[
                 Style[" = ", FontFamily -> "Times"]], 
                Text[
                 Style[
                  $CellContext`collatzLengthSelect[$CellContext`\
highlightSelect$$, $CellContext`mod$$], FontFamily -> "Times"]]}], 
              Row[{
                Text[
                 Style[
                 "max value of current sequence: ", FontFamily -> "Times"]], 
                Text[
                 Style[
                  Max[
                   $CellContext`collatzList[$CellContext`highlightSelect$$, \
$CellContext`mod$$]], FontFamily -> "Times"]]}]}]}]}, Alignment -> Center, 
         Spacings -> If[$CellContext`showpath$$, Automatic, -0.25]]], 
      "Specifications" :> {{{$CellContext`highlightSelect$$, 231, 
          "select starting number"}, 2, 
         Dynamic[$CellContext`maxCollatzPath$$], 1, Appearance -> "Labeled", 
         ControlPlacement -> 
         1}, {{$CellContext`maxCollatzPath$$, 250, 
          "graph Collatz from 1 to"}, {100, 250, 500, 750, 1000}, ControlType -> 
         SetterBar, ControlPlacement -> 
         2}, {{$CellContext`graphType$$, "CircularEmbedding", "graph type"}, {
         "HierarchicalEdgeBundling", "CircularEmbedding"}, ControlType -> 
         PopupMenu, ControlPlacement -> 3}, 
        Column[{
          Manipulate`Place[1], 
          Row[{
            Manipulate`Place[2], 
            Spacer[15], 
            Manipulate`Place[3]}]}], {{$CellContext`labeledPoint$$, 231, 
          "label vertex"}, 
         Dynamic[
          Drop[
           Sort[
            DeleteDuplicates[
             Flatten[
              Table[
               $CellContext`collatzList[$CellContext`i, $CellContext`mod$$], \
{$CellContext`i, 1, $CellContext`maxCollatzPath$$, 1}]]]], 1]], ControlType -> 
         PopupMenu, ControlPlacement -> 
         4}, {{$CellContext`mod$$, 2, "modulus of Collatz variation"}, {2, 3, 
         5, 7}, ControlType -> SetterBar, ControlPlacement -> 
         5}, {{$CellContext`showpath$$, False, "show path"}, {True, False}, 
         ControlPlacement -> 6}, 
        Row[{
          Manipulate`Place[4], 
          Spacer[15], 
          Manipulate`Place[5], 
          Spacer[15], 
          Manipulate`Place[6]}], {{$CellContext`a1$$, -0.7}, ControlType -> 
         None}, {{$CellContext`a2$$, 0.}, ControlType -> 
         None}, {{$CellContext`b1$$, -0.7}, ControlType -> 
         None}, {{$CellContext`b2$$, 0.}, ControlType -> 
         None}, {{$CellContext`history$$, {3, 1}}, ControlType -> 
         None}, {{$CellContext`back$$, {}}, ControlType -> 
         None}, {{$CellContext`mod$$, 2}, ControlType -> 
         None}, {{$CellContext`listFont$$, 12}, ControlType -> 
         None}, {{$CellContext`listLength$$, 2}, ControlType -> 
         None}, {{$CellContext`highlightSelect$$, 231}, ControlType -> 
         None}, {{$CellContext`graphType$$, "CircularEmbedding"}, ControlType -> 
         None}, {{$CellContext`labeledPoint$$, 231}, ControlType -> 
         None}, {{$CellContext`maxCollatzPath$$, 250}, ControlType -> 
         None}, {{$CellContext`showpath$$, False}, ControlType -> 
         None}, {{$CellContext`collatzRange$$, Null}, ControlType -> None}}, 
      "Options" :> {AutorunSequencing -> {1, 2, 3}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{610., {257., 262.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`listAll = {
         DirectedEdge[2, 1], 
         DirectedEdge[3, 10], 
         DirectedEdge[4, 2], 
         DirectedEdge[5, 16], 
         DirectedEdge[6, 3], 
         DirectedEdge[7, 22], 
         DirectedEdge[8, 4], 
         DirectedEdge[9, 28], 
         DirectedEdge[10, 5], 
         DirectedEdge[11, 34], 
         DirectedEdge[12, 6], 
         DirectedEdge[13, 40], 
         DirectedEdge[14, 7], 
         DirectedEdge[15, 46], 
         DirectedEdge[16, 8], 
         DirectedEdge[17, 52], 
         DirectedEdge[18, 9], 
         DirectedEdge[19, 58], 
         DirectedEdge[20, 10], 
         DirectedEdge[21, 64], 
         DirectedEdge[22, 11], 
         DirectedEdge[23, 70], 
         DirectedEdge[24, 12], 
         DirectedEdge[25, 76], 
         DirectedEdge[26, 13], 
         DirectedEdge[27, 82], 
         DirectedEdge[28, 14], 
         DirectedEdge[29, 88], 
         DirectedEdge[30, 15], 
         DirectedEdge[31, 94], 
         DirectedEdge[32, 16], 
         DirectedEdge[33, 100], 
         DirectedEdge[34, 17], 
         DirectedEdge[35, 106], 
         DirectedEdge[36, 18], 
         DirectedEdge[37, 112], 
         DirectedEdge[38, 19], 
         DirectedEdge[39, 118], 
         DirectedEdge[40, 20], 
         DirectedEdge[41, 124], 
         DirectedEdge[42, 21], 
         DirectedEdge[43, 130], 
         DirectedEdge[44, 22], 
         DirectedEdge[45, 136], 
         DirectedEdge[46, 23], 
         DirectedEdge[47, 142], 
         DirectedEdge[48, 24], 
         DirectedEdge[49, 148], 
         DirectedEdge[50, 25], 
         DirectedEdge[51, 154], 
         DirectedEdge[52, 26], 
         DirectedEdge[53, 160], 
         DirectedEdge[54, 27], 
         DirectedEdge[55, 166], 
         DirectedEdge[56, 28], 
         DirectedEdge[57, 172], 
         DirectedEdge[58, 29], 
         DirectedEdge[59, 178], 
         DirectedEdge[60, 30], 
         DirectedEdge[61, 184], 
         DirectedEdge[62, 31], 
         DirectedEdge[63, 190], 
         DirectedEdge[64, 32], 
         DirectedEdge[65, 196], 
         DirectedEdge[66, 33], 
         DirectedEdge[67, 202], 
         DirectedEdge[68, 34], 
         DirectedEdge[69, 208], 
         DirectedEdge[70, 35], 
         DirectedEdge[71, 214], 
         DirectedEdge[72, 36], 
         DirectedEdge[73, 220], 
         DirectedEdge[74, 37], 
         DirectedEdge[75, 226], 
         DirectedEdge[76, 38], 
         DirectedEdge[77, 232], 
         DirectedEdge[78, 39], 
         DirectedEdge[79, 238], 
         DirectedEdge[80, 40], 
         DirectedEdge[81, 244], 
         DirectedEdge[82, 41], 
         DirectedEdge[83, 250], 
         DirectedEdge[84, 42], 
         DirectedEdge[85, 256], 
         DirectedEdge[86, 43], 
         DirectedEdge[87, 262], 
         DirectedEdge[88, 44], 
         DirectedEdge[89, 268], 
         DirectedEdge[90, 45], 
         DirectedEdge[91, 274], 
         DirectedEdge[92, 46], 
         DirectedEdge[93, 280], 
         DirectedEdge[94, 47], 
         DirectedEdge[95, 286], 
         DirectedEdge[96, 48], 
         DirectedEdge[97, 292], 
         DirectedEdge[98, 49], 
         DirectedEdge[99, 298], 
         DirectedEdge[100, 50], 
         DirectedEdge[101, 304], 
         DirectedEdge[103, 310], 
         DirectedEdge[104, 52], 
         DirectedEdge[106, 53], 
         DirectedEdge[107, 322], 
         DirectedEdge[110, 55], 
         DirectedEdge[112, 56], 
         DirectedEdge[113, 340], 
         DirectedEdge[116, 58], 
         DirectedEdge[118, 59], 
         DirectedEdge[119, 358], 
         DirectedEdge[121, 364], 
         DirectedEdge[122, 61], 
         DirectedEdge[124, 62], 
         DirectedEdge[125, 376], 
         DirectedEdge[128, 64], 
         DirectedEdge[130, 65], 
         DirectedEdge[131, 394], 
         DirectedEdge[134, 67], 
         DirectedEdge[136, 68], 
         DirectedEdge[137, 412], 
         DirectedEdge[140, 70], 
         DirectedEdge[142, 71], 
         DirectedEdge[143, 430], 
         DirectedEdge[146, 73], 
         DirectedEdge[148, 74], 
         DirectedEdge[149, 448], 
         DirectedEdge[152, 76], 
         DirectedEdge[154, 77], 
         DirectedEdge[155, 466], 
         DirectedEdge[160, 80], 
         DirectedEdge[161, 484], 
         DirectedEdge[166, 83], 
         DirectedEdge[167, 502], 
         DirectedEdge[170, 85], 
         DirectedEdge[172, 86], 
         DirectedEdge[175, 526], 
         DirectedEdge[178, 89], 
         DirectedEdge[179, 538], 
         DirectedEdge[182, 91], 
         DirectedEdge[184, 92], 
         DirectedEdge[188, 94], 
         DirectedEdge[190, 95], 
         DirectedEdge[196, 98], 
         DirectedEdge[197, 592], 
         DirectedEdge[202, 101], 
         DirectedEdge[206, 103], 
         DirectedEdge[208, 104], 
         DirectedEdge[214, 107], 
         DirectedEdge[215, 646], 
         DirectedEdge[220, 110], 
         DirectedEdge[224, 112], 
         DirectedEdge[226, 113], 
         DirectedEdge[232, 116], 
         DirectedEdge[233, 700], 
         DirectedEdge[238, 119], 
         DirectedEdge[242, 121], 
         DirectedEdge[244, 122], 
         DirectedEdge[250, 125], 
         DirectedEdge[251, 754], 
         DirectedEdge[256, 128], 
         DirectedEdge[262, 131], 
         DirectedEdge[263, 790], 
         DirectedEdge[268, 134], 
         DirectedEdge[269, 808], 
         DirectedEdge[274, 137], 
         DirectedEdge[280, 140], 
         DirectedEdge[283, 850], 
         DirectedEdge[286, 143], 
         DirectedEdge[292, 146], 
         DirectedEdge[296, 148], 
         DirectedEdge[298, 149], 
         DirectedEdge[304, 152], 
         DirectedEdge[310, 155], 
         DirectedEdge[319, 958], 
         DirectedEdge[322, 161], 
         DirectedEdge[323, 970], 
         DirectedEdge[325, 976], 
         DirectedEdge[334, 167], 
         DirectedEdge[340, 170], 
         DirectedEdge[350, 175], 
         DirectedEdge[358, 179], 
         DirectedEdge[364, 182], 
         DirectedEdge[376, 188], 
         DirectedEdge[377, 1132], 
         DirectedEdge[394, 197], 
         DirectedEdge[395, 1186], 
         DirectedEdge[404, 202], 
         DirectedEdge[412, 206], 
         DirectedEdge[425, 1276], 
         DirectedEdge[430, 215], 
         DirectedEdge[433, 1300], 
         DirectedEdge[445, 1336], 
         DirectedEdge[448, 224], 
         DirectedEdge[466, 233], 
         DirectedEdge[479, 1438], 
         DirectedEdge[484, 242], 
         DirectedEdge[485, 1456], 
         DirectedEdge[488, 244], 
         DirectedEdge[502, 251], 
         DirectedEdge[526, 263], 
         DirectedEdge[538, 269], 
         DirectedEdge[566, 283], 
         DirectedEdge[577, 1732], 
         DirectedEdge[592, 296], 
         DirectedEdge[593, 1780], 
         DirectedEdge[638, 319], 
         DirectedEdge[646, 323], 
         DirectedEdge[650, 325], 
         DirectedEdge[668, 334], 
         DirectedEdge[700, 350], 
         DirectedEdge[719, 2158], 
         DirectedEdge[728, 364], 
         DirectedEdge[754, 377], 
         DirectedEdge[790, 395], 
         DirectedEdge[808, 404], 
         DirectedEdge[850, 425], 
         DirectedEdge[866, 433], 
         DirectedEdge[890, 445], 
         DirectedEdge[911, 2734], 
         DirectedEdge[958, 479], 
         DirectedEdge[970, 485], 
         DirectedEdge[976, 488], 
         DirectedEdge[1079, 3238], 
         DirectedEdge[1132, 566], 
         DirectedEdge[1154, 577], 
         DirectedEdge[1186, 593], 
         DirectedEdge[1276, 638], 
         DirectedEdge[1300, 650], 
         DirectedEdge[1336, 668], 
         DirectedEdge[1367, 4102], 
         DirectedEdge[1438, 719], 
         DirectedEdge[1456, 728], 
         DirectedEdge[1619, 4858], 
         DirectedEdge[1732, 866], 
         DirectedEdge[1780, 890], 
         DirectedEdge[1822, 911], 
         DirectedEdge[2051, 6154], 
         DirectedEdge[2158, 1079], 
         DirectedEdge[2308, 1154], 
         DirectedEdge[2429, 7288], 
         DirectedEdge[2734, 1367], 
         DirectedEdge[3077, 9232], 
         DirectedEdge[3238, 1619], 
         DirectedEdge[3644, 1822], 
         DirectedEdge[4102, 2051], 
         DirectedEdge[4616, 2308], 
         DirectedEdge[4858, 2429], 
         DirectedEdge[6154, 3077], 
         DirectedEdge[7288, 3644], 
         DirectedEdge[9232, 4616]}, $CellContext`listLength$$ = 2, Condition[
         $CellContext`collatzList[
          Pattern[$CellContext`n, 
           Blank[Integer]], 
          Pattern[$CellContext`mod, 
           Blank[]]], $CellContext`n > 0] := NestWhileList[
         $CellContext`c[$CellContext`n, $CellContext`mod], $CellContext`n, # != 
         1& ], $CellContext`c[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]]] := Switch[$CellContext`mod, 2, If[
          EvenQ[#], #/2, 3 # + 1]& , 3, Switch[
          Mod[#, 3], 0, #/3, 1, (2 # + 1)/3, 2, (2 # - 1)/3]& , 5, Switch[
          Mod[#, 5], 0, #/5, 1, 5 # + 2, 2, 3 # - 1, 3, 2 # - 1, 4, (# + 1)/
          5]& , 7, Switch[
          Mod[#, 7], 0, #/7, 1, (3 # + 4)/7, 2, 4 # - 5, 3, (2 # + 22)/7, 
          4, (# + 3)/7, 5, (3 # - 1)/7, 6, (# + 8)/
          7]& ], $CellContext`withEdges := Apply[DirectedEdge, 
         Partition[
          $CellContext`collatzList[
           SlotSequence[1]], 2, 1], 2]& , $CellContext`gLayout[
        "HierarchicalEdgeBundling"] = {
        "EdgeLayout" -> {"HierarchicalEdgeBundling"}}, $CellContext`gLayout[
         Pattern[$CellContext`s, 
          Blank[]]] := $CellContext`s, $CellContext`checkQuadrant[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`G, 
          Blank[]]] := If[
         Not[
          MemberQ[
           VertexList[$CellContext`G], $CellContext`n]], {After, Above}, 
         With[{$CellContext`coords = Riffle[
             VertexList[$CellContext`G], 
             Part[
              ReplaceAll[
               AbsoluteOptions[$CellContext`G, VertexCoordinates], 
               Rule -> (#2& )], 1]]}, 
          Which[
           And[First[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] > 0, Last[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] > 0], {
           After, Above}, 
           And[First[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] > 0, Last[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] < 0], {
           After, Below}, 
           And[First[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] < 0, Last[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] > 0], {
           Before, Above}, 
           And[First[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] < 0, Last[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] < 0], {
           Before, Below}]]], $CellContext`position[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`coords, 
          Blank[]]] := Flatten[
         Position[$CellContext`coords, $CellContext`n]], $CellContext`colors = 
       Map[
         ColorData["Rainbow"], Range[
           $CellContext`numbEdges[
            SlotSequence[1]]]/$CellContext`numbEdges[
          SlotSequence[1]]]& , $CellContext`numbEdges = Length[
         $CellContext`withEdges[
          SlotSequence[1]]]& , $CellContext`piecewiseFunc[
         Pattern[$CellContext`mod, 
          Blank[]]] := Switch[$CellContext`mod, 2, 
         Style[
          TraditionalForm[
           Function[$CellContext`x, 
            Piecewise[{{
               Row[{$CellContext`x, "\[ThinSpace]/\[ThinSpace]", 2}], 
               Congruent[
                Mod[$CellContext`x, 2], 0]}, {
               Row[{3 $CellContext`x + 1}], 
               Congruent[
                Mod[$CellContext`x, 2], 1]}}]]], FontFamily -> "Times"], 3, 
         Style[
          TraditionalForm[
           Function[$CellContext`x, 
            Piecewise[{{
               Row[{$CellContext`x, "\[ThinSpace]/\[ThinSpace]", 3}], 
               Congruent[
                Mod[$CellContext`x, 3], 0]}, {
               Row[{2 $CellContext`x + 1}], 
               Congruent[
                Mod[$CellContext`x, 3], 1]}, {
               
               Row[{"(", 2 $CellContext`x - 1, ")\[ThinSpace]/\[ThinSpace]", 
                 3}], 
               Congruent[
                Mod[$CellContext`x, 3], 2]}}]]], FontFamily -> "Times"], 5, 
         Style[
          TraditionalForm[
           Function[$CellContext`x, 
            Piecewise[{{
               Row[{$CellContext`x, "\[ThinSpace]/\[ThinSpace]", 5}], 
               Congruent[
                Mod[$CellContext`x, 5], 0]}, {
               Row[{"(", 5 $CellContext`x + 2, ")"}], 
               Congruent[
                Mod[$CellContext`x, 5], 1]}, {3 $CellContext`x - 1, 
               Congruent[
                Mod[$CellContext`x, 5], 2]}, {
               Row[{2 $CellContext`x - 1}], 
               Congruent[
                Mod[$CellContext`x, 5], 3]}, {
               
               Row[{"(", $CellContext`x + 1, ")\[ThinSpace]/\[ThinSpace]", 
                 5}], 
               Congruent[
                Mod[$CellContext`x, 5], 4]}}]]], FontFamily -> "Times"], 7, 
         Style[
          TraditionalForm[
           Function[$CellContext`x, 
            Piecewise[{{
               Row[{$CellContext`x, "\[ThinSpace]/\[ThinSpace]", 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 0]}, {
               
               Row[{"(", 3 $CellContext`x + 4, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 1]}, {4 $CellContext`x - 5, 
               Congruent[
                Mod[$CellContext`x, 7], 2]}, {
               
               Row[{"(", 2 $CellContext`x + 22, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 3]}, {
               
               Row[{"(", $CellContext`x + 3, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 4]}, {
               
               Row[{"(", 3 $CellContext`x - 1, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 5]}, {
               
               Row[{"(", $CellContext`x + 8, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 6]}}]]], FontFamily -> 
          "Times"]], $CellContext`collatzLengthSelect[
         Pattern[$CellContext`highlightSelect, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]]] := Length[
         $CellContext`collatzList[$CellContext`highlightSelect, \
$CellContext`mod]]}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->66168923],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`a1$$ = -1.4, $CellContext`a2$$ = \
-$CellContext`a1$$, $CellContext`b1$$ = $CellContext`a1$$, $CellContext`b2$$ \
= -$CellContext`a1$$, $CellContext`back$$ = {}, $CellContext`collatzRange$$ = 
    Null, $CellContext`graphType$$ = 
    "CircularEmbedding", $CellContext`highlightSelect$$ = 
    2, $CellContext`history$$ = {}, $CellContext`labeledPoint$$ = 
    1739, $CellContext`listFont$$ = 12, $CellContext`listLength$$ = 
    2, $CellContext`maxCollatzPath$$ = 500, $CellContext`mod$$ = 
    7, $CellContext`showpath$$ = False, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`highlightSelect$$], 2, "select starting number"}, 2, 
      Dynamic[$CellContext`maxCollatzPath$$], 1}, {{
       Hold[$CellContext`maxCollatzPath$$], 500, "graph Collatz from 1 to"}, {
      100, 250, 500, 750, 1000}}, {{
       Hold[$CellContext`graphType$$], "CircularEmbedding", "graph type"}, {
      "HierarchicalEdgeBundling", "CircularEmbedding"}}, {
      Hold[
       Column[{
         Manipulate`Place[1], 
         Row[{
           Manipulate`Place[2], 
           Spacer[15], 
           Manipulate`Place[3]}]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`labeledPoint$$], 1739, "label vertex"}, 
      Dynamic[
       Drop[
        Sort[
         DeleteDuplicates[
          Flatten[
           Table[
            $CellContext`collatzList[$CellContext`i, $CellContext`mod$$], \
{$CellContext`i, 1, $CellContext`maxCollatzPath$$, 1}]]]], 1]]}, {{
       Hold[$CellContext`mod$$], 7, "modulus of Collatz variation"}, {2, 3, 5,
       7}}, {{
       Hold[$CellContext`showpath$$], False, "show path"}, {True, False}}, {
      Hold[
       Row[{
         Manipulate`Place[4], 
         Spacer[15], 
         Manipulate`Place[5], 
         Spacer[15], 
         Manipulate`Place[6]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`a1$$], -1.4}}, {{
       Hold[$CellContext`a2$$], -$CellContext`a1$$}}, {{
       Hold[$CellContext`b1$$], $CellContext`a1$$}}, {{
       Hold[$CellContext`b2$$], -$CellContext`a1$$}}, {{
       Hold[$CellContext`history$$], {}}}, {{
       Hold[$CellContext`back$$], {}}}, {{
       Hold[$CellContext`mod$$], 7}}, {{
       Hold[$CellContext`listFont$$], 12}}, {{
       Hold[$CellContext`listLength$$], 2}}, {{
       Hold[$CellContext`highlightSelect$$], 2}}, {{
       Hold[$CellContext`graphType$$], "CircularEmbedding"}}, {{
       Hold[$CellContext`labeledPoint$$], 1739}}, {{
       Hold[$CellContext`maxCollatzPath$$], 500}}, {{
       Hold[$CellContext`showpath$$], False}}, {{
       Hold[$CellContext`collatzRange$$], Null}}}, Typeset`size$$ = {
    567., {183.3544921875, 188.6455078125}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`highlightSelect$6613$$ = 
    0, $CellContext`maxCollatzPath$6614$$ = 0, $CellContext`graphType$6615$$ =
     False, $CellContext`mod$6616$$ = 0, $CellContext`showpath$6617$$ = 
    False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`a1$$ = -1.4, $CellContext`a2$$ = \
-$CellContext`a1$$, $CellContext`b1$$ = $CellContext`a1$$, $CellContext`b2$$ = \
-$CellContext`a1$$, $CellContext`back$$ = {}, $CellContext`collatzRange$$ = 
        Null, $CellContext`graphType$$ = 
        "CircularEmbedding", $CellContext`highlightSelect$$ = 
        2, $CellContext`history$$ = {}, $CellContext`labeledPoint$$ = 
        1739, $CellContext`listFont$$ = 12, $CellContext`listLength$$ = 
        2, $CellContext`maxCollatzPath$$ = 500, $CellContext`mod$$ = 
        7, $CellContext`showpath$$ = False}, "ControllerVariables" :> {
        Hold[$CellContext`highlightSelect$$, \
$CellContext`highlightSelect$6613$$, 0], 
        Hold[$CellContext`maxCollatzPath$$, \
$CellContext`maxCollatzPath$6614$$, 0], 
        Hold[$CellContext`graphType$$, $CellContext`graphType$6615$$, False], 
        Hold[$CellContext`mod$$, $CellContext`mod$6616$$, 0], 
        Hold[$CellContext`showpath$$, $CellContext`showpath$6617$$, False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      DynamicModule[{$CellContext`G, $CellContext`listAll}, 
        Column[{
          Row[{
            EventHandler[
            If[$CellContext`maxCollatzPath$$ > $CellContext`collatzRange$$, \
$CellContext`maxCollatzPath$$ = $CellContext`collatzRange$$]; 
             If[$CellContext`highlightSelect$$ > \
$CellContext`maxCollatzPath$$, $CellContext`highlightSelect$$ = \
$CellContext`maxCollatzPath$$]; $CellContext`listFont$$ = Which[
                TrueQ[100 >= $CellContext`listLength$$ >= 0], 12, 
                TrueQ[
                 Inequality[
                 125, GreaterEqual, $CellContext`listLength$$, Greater, 100]],
                 10, 
                TrueQ[
                 Inequality[
                 150, GreaterEqual, $CellContext`listLength$$, Greater, 125]],
                 9, 
                TrueQ[$CellContext`listLength$$ > 150], 8, True, 12]; 
             With[{$CellContext`ptslist$ = Sort[
                  DeleteDuplicates[
                   Flatten[
                    Table[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$], {$CellContext`i, 1, $CellContext`maxCollatzPath$$, 
                    1}]]]]}, 
               If[
                Not[
                 
                 MemberQ[$CellContext`ptslist$, \
$CellContext`labeledPoint$$]], $CellContext`labeledPoint$$ = \
$CellContext`highlightSelect$$]]; $CellContext`G = 
              Fold[SetProperty[{#, #2}, {VertexStyle -> Directive[Red, 
                    Opacity[1]], VertexShapeFunction -> "Star", 
                  VertexSize -> {"Scaled", 0.04}}]& , 
                Graph[
                 Map[Tooltip[#, #]& , 
                  Apply[Union, 
                   Table[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$], {$CellContext`i, $CellContext`maxCollatzPath$$}]]], \
$CellContext`listAll = Union[
                   Flatten[
                    Table[
                    $CellContext`withEdges[$CellContext`i, \
$CellContext`mod$$], {$CellContext`i, 1, $CellContext`maxCollatzPath$$}]]], 
                 VertexLabelStyle -> Directive[Red, 20], 
                 GraphLayout -> \
$CellContext`gLayout[$CellContext`graphType$$], 
                 VertexSize -> {"Scaled", 2.4/Length[$CellContext`listAll]}, 
                 VertexStyle -> Directive[
                   Opacity[0], 
                   EdgeForm[None]], EdgeShapeFunction -> ({
                   Arrowheads[0.03], 
                   Arrow[#]}& ), VertexShapeFunction -> "Square", 
                 PlotRange -> {{$CellContext`a1$$, $CellContext`a2$$}, \
{$CellContext`b1$$, $CellContext`b2$$}}, ImageSize -> 372], {
                1, $CellContext`highlightSelect$$, \
$CellContext`labeledPoint$$}]; HighlightGraph[
               
               Graph[$CellContext`G, EdgeStyle -> Gray, 
                VertexLabels -> {1 -> Placed["1", 
                    $CellContext`checkQuadrant[
                    1, $CellContext`G]], $CellContext`highlightSelect$$ -> 
                  Placed[$CellContext`highlightSelect$$, 
                    $CellContext`checkQuadrant[$CellContext`highlightSelect$$,\
 $CellContext`G]], $CellContext`labeledPoint$$ -> 
                  Placed[$CellContext`labeledPoint$$, 
                    $CellContext`checkQuadrant[$CellContext`labeledPoint$$, \
$CellContext`G]]}], 
               MapThread[Style[#, 
                 Directive[
                  Thickness[1/105], #2]]& , {
                 $CellContext`withEdges[$CellContext`highlightSelect$$, \
$CellContext`mod$$], 
                 Reverse[
                  $CellContext`colors[$CellContext`highlightSelect$$, \
$CellContext`mod$$]]}]], {"MouseDown" :> Switch[{
                 MousePosition["Graphics"], 
                 First[
                  ToHeldExpression["CurrentValue"]]["ShiftKey"]}, {
                 PatternTest[
                  Blank[], And[
                  First[#] > ($CellContext`a1$$ + $CellContext`a2$$)/2, 
                   Last[#] > ($CellContext`b1$$ + $CellContext`b2$$)/2]& ], 
                 False}, $CellContext`a1$$ = 
                 ReplaceAll[$CellContext`a1$$, {$CellContext`a1$$ -> \
($CellContext`a1$$ + $CellContext`a2$$)/2}]; $CellContext`b1$$ = 
                 ReplaceAll[$CellContext`b1$$, {$CellContext`b1$$ -> \
($CellContext`b1$$ + $CellContext`b2$$)/2}]; 
                AppendTo[$CellContext`history$$, 1], {
                 PatternTest[
                  Blank[], 
                  Last[#] > ($CellContext`b1$$ + $CellContext`b2$$)/2& ], 
                 False}, $CellContext`a2$$ = 
                 ReplaceAll[$CellContext`a2$$, {$CellContext`a2$$ -> \
($CellContext`a1$$ + $CellContext`a2$$)/2}]; $CellContext`b1$$ = 
                 ReplaceAll[$CellContext`b1$$, {$CellContext`b1$$ -> \
($CellContext`b1$$ + $CellContext`b2$$)/2}]; 
                AppendTo[$CellContext`history$$, 2], {
                 PatternTest[
                  Blank[], 
                  First[#] <= ($CellContext`a1$$ + $CellContext`a2$$)/2& ], 
                 False}, $CellContext`a2$$ = 
                 ReplaceAll[$CellContext`a2$$, {$CellContext`a2$$ -> \
($CellContext`a1$$ + $CellContext`a2$$)/2}]; $CellContext`b2$$ = 
                 ReplaceAll[$CellContext`b2$$, {$CellContext`b2$$ -> \
($CellContext`b1$$ + $CellContext`b2$$)/2}]; 
                AppendTo[$CellContext`history$$, 3], {
                 PatternTest[
                  Blank[], 
                  First[#] > ($CellContext`a1$$ + $CellContext`a2$$)/2& ], 
                 False}, $CellContext`a1$$ = 
                 ReplaceAll[$CellContext`a1$$, {$CellContext`a1$$ -> \
($CellContext`a1$$ + $CellContext`a2$$)/2}]; $CellContext`b2$$ = 
                 
                 ReplaceAll[$CellContext`b2$$, {$CellContext`b2$$ -> \
($CellContext`b1$$ + $CellContext`b2$$)/2}]; 
                AppendTo[$CellContext`history$$, 4], {
                 Blank[], True}, 
                If[
                Length[$CellContext`history$$] != 
                 0, $CellContext`back$$ = 
                  Last[$CellContext`history$$]; $CellContext`history$$ = 
                  Take[$CellContext`history$$, {1, -2}]; 
                 Switch[$CellContext`back$$, 
                   1, $CellContext`a1$$ = 
                    2 $CellContext`a1$$ - $CellContext`a2$$; \
$CellContext`b1$$ = 2 $CellContext`b1$$ - $CellContext`b2$$, 
                   2, $CellContext`a2$$ = 
                    2 $CellContext`a2$$ - $CellContext`a1$$; \
$CellContext`b1$$ = 2 $CellContext`b1$$ - $CellContext`b2$$, 
                   3, $CellContext`a2$$ = 
                    2 $CellContext`a2$$ - $CellContext`a1$$; \
$CellContext`b2$$ = 2 $CellContext`b2$$ - $CellContext`b1$$, 
                   4, $CellContext`a1$$ = 
                    2 $CellContext`a1$$ - $CellContext`a2$$; \
$CellContext`b2$$ = 2 $CellContext`b2$$ - $CellContext`b1$$]]]}], 
            Spacer[10], 
            Column[{
              If[
               And[$CellContext`showpath$$, 
                IntegerQ[$CellContext`highlightSelect$$]], 
               Text[
                Style[
                 Row[
                  (($CellContext`listLength$$ = Length[#]; {#})& )[
                   $CellContext`collatzList[$CellContext`highlightSelect$$, \
$CellContext`mod$$]], ImageSize -> 200], FontFamily -> "Times", 
                 FontSize -> $CellContext`listFont$$]], ""], Null, 
              Column[{
                Row[{
                  Text[
                   Style["function for mod ", FontFamily -> "Times"]], 
                  Text[
                   Style[$CellContext`mod$$ ": ", FontFamily -> "Times"]]}], 
                Text[
                 Style[
                  $CellContext`piecewiseFunc[$CellContext`mod$$], FontFamily -> 
                  "Times"]]}], Null, 
              Row[{
                Text[
                 Style["max sequence length up to ", FontFamily -> "Times"]], 
                Text[
                 Style[$CellContext`maxCollatzPath$$, FontFamily -> "Times"]], 
                Text[
                 Style[": ", FontFamily -> "Times"]], 
                Text[
                 Style[
                  Max[
                   Table[
                    Length[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$]], {$CellContext`i, 1, $CellContext`maxCollatzPath$$}]], 
                  FontFamily -> "Times"]]}], 
              Row[{
                Text[
                 Style[
                 "starting number of max sequence: ", FontFamily -> "Times"]], 
                Text[
                 Style[
                  Part[
                   Part[
                    Position[
                    Table[
                    Length[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$]], {$CellContext`i, 1, $CellContext`maxCollatzPath$$}], 
                    Max[
                    Table[
                    Length[
                    $CellContext`collatzList[$CellContext`i, \
$CellContext`mod$$]], {$CellContext`i, 1, $CellContext`maxCollatzPath$$}]]], 
                    1], 1], FontFamily -> "Times"]]}], Null, 
              Row[{
                Text[
                 Style["current sequence length ", FontFamily -> "Times"]], 
                Text[
                 Style[" = ", FontFamily -> "Times"]], 
                Text[
                 Style[
                  $CellContext`collatzLengthSelect[$CellContext`\
highlightSelect$$, $CellContext`mod$$], FontFamily -> "Times"]]}], 
              Row[{
                Text[
                 Style[
                 "max value of current sequence: ", FontFamily -> "Times"]], 
                Text[
                 Style[
                  Max[
                   $CellContext`collatzList[$CellContext`highlightSelect$$, \
$CellContext`mod$$]], FontFamily -> "Times"]]}]}]}]}, Alignment -> Center, 
         Spacings -> If[$CellContext`showpath$$, Automatic, -0.25]]], 
      "Specifications" :> {{{$CellContext`highlightSelect$$, 2, 
          "select starting number"}, 2, 
         Dynamic[$CellContext`maxCollatzPath$$], 1, Appearance -> "Labeled", 
         ControlPlacement -> 
         1}, {{$CellContext`maxCollatzPath$$, 500, 
          "graph Collatz from 1 to"}, {100, 250, 500, 750, 1000}, ControlType -> 
         SetterBar, ControlPlacement -> 
         2}, {{$CellContext`graphType$$, "CircularEmbedding", "graph type"}, {
         "HierarchicalEdgeBundling", "CircularEmbedding"}, ControlType -> 
         PopupMenu, ControlPlacement -> 3}, 
        Column[{
          Manipulate`Place[1], 
          Row[{
            Manipulate`Place[2], 
            Spacer[15], 
            Manipulate`Place[3]}]}], {{$CellContext`labeledPoint$$, 1739, 
          "label vertex"}, 
         Dynamic[
          Drop[
           Sort[
            DeleteDuplicates[
             Flatten[
              Table[
               $CellContext`collatzList[$CellContext`i, $CellContext`mod$$], \
{$CellContext`i, 1, $CellContext`maxCollatzPath$$, 1}]]]], 1]], ControlType -> 
         PopupMenu, ControlPlacement -> 
         4}, {{$CellContext`mod$$, 7, "modulus of Collatz variation"}, {2, 3, 
         5, 7}, ControlType -> SetterBar, ControlPlacement -> 
         5}, {{$CellContext`showpath$$, False, "show path"}, {True, False}, 
         ControlPlacement -> 6}, 
        Row[{
          Manipulate`Place[4], 
          Spacer[15], 
          Manipulate`Place[5], 
          Spacer[15], 
          Manipulate`Place[6]}], {{$CellContext`a1$$, -1.4}, ControlType -> 
         None}, {{$CellContext`a2$$, -$CellContext`a1$$}, ControlType -> 
         None}, {{$CellContext`b1$$, $CellContext`a1$$}, ControlType -> 
         None}, {{$CellContext`b2$$, -$CellContext`a1$$}, ControlType -> 
         None}, {{$CellContext`history$$, {}}, ControlType -> 
         None}, {{$CellContext`back$$, {}}, ControlType -> 
         None}, {{$CellContext`mod$$, 7}, ControlType -> 
         None}, {{$CellContext`listFont$$, 12}, ControlType -> 
         None}, {{$CellContext`listLength$$, 2}, ControlType -> 
         None}, {{$CellContext`highlightSelect$$, 2}, ControlType -> 
         None}, {{$CellContext`graphType$$, "CircularEmbedding"}, ControlType -> 
         None}, {{$CellContext`labeledPoint$$, 1739}, ControlType -> 
         None}, {{$CellContext`maxCollatzPath$$, 500}, ControlType -> 
         None}, {{$CellContext`showpath$$, False}, ControlType -> 
         None}, {{$CellContext`collatzRange$$, Null}, ControlType -> None}}, 
      "Options" :> {AutorunSequencing -> {1, 2, 3}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{610., {257., 262.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`listAll = {
         DirectedEdge[2, 1], 
         DirectedEdge[3, 10], 
         DirectedEdge[4, 2], 
         DirectedEdge[5, 16], 
         DirectedEdge[6, 3], 
         DirectedEdge[7, 22], 
         DirectedEdge[8, 4], 
         DirectedEdge[9, 28], 
         DirectedEdge[10, 5], 
         DirectedEdge[11, 34], 
         DirectedEdge[12, 6], 
         DirectedEdge[13, 40], 
         DirectedEdge[14, 7], 
         DirectedEdge[15, 46], 
         DirectedEdge[16, 8], 
         DirectedEdge[17, 52], 
         DirectedEdge[18, 9], 
         DirectedEdge[19, 58], 
         DirectedEdge[20, 10], 
         DirectedEdge[21, 64], 
         DirectedEdge[22, 11], 
         DirectedEdge[23, 70], 
         DirectedEdge[24, 12], 
         DirectedEdge[25, 76], 
         DirectedEdge[26, 13], 
         DirectedEdge[27, 82], 
         DirectedEdge[28, 14], 
         DirectedEdge[29, 88], 
         DirectedEdge[30, 15], 
         DirectedEdge[31, 94], 
         DirectedEdge[32, 16], 
         DirectedEdge[33, 100], 
         DirectedEdge[34, 17], 
         DirectedEdge[35, 106], 
         DirectedEdge[36, 18], 
         DirectedEdge[37, 112], 
         DirectedEdge[38, 19], 
         DirectedEdge[39, 118], 
         DirectedEdge[40, 20], 
         DirectedEdge[41, 124], 
         DirectedEdge[42, 21], 
         DirectedEdge[43, 130], 
         DirectedEdge[44, 22], 
         DirectedEdge[45, 136], 
         DirectedEdge[46, 23], 
         DirectedEdge[47, 142], 
         DirectedEdge[48, 24], 
         DirectedEdge[49, 148], 
         DirectedEdge[50, 25], 
         DirectedEdge[51, 154], 
         DirectedEdge[52, 26], 
         DirectedEdge[53, 160], 
         DirectedEdge[54, 27], 
         DirectedEdge[55, 166], 
         DirectedEdge[56, 28], 
         DirectedEdge[57, 172], 
         DirectedEdge[58, 29], 
         DirectedEdge[59, 178], 
         DirectedEdge[60, 30], 
         DirectedEdge[61, 184], 
         DirectedEdge[62, 31], 
         DirectedEdge[63, 190], 
         DirectedEdge[64, 32], 
         DirectedEdge[65, 196], 
         DirectedEdge[66, 33], 
         DirectedEdge[67, 202], 
         DirectedEdge[68, 34], 
         DirectedEdge[69, 208], 
         DirectedEdge[70, 35], 
         DirectedEdge[71, 214], 
         DirectedEdge[72, 36], 
         DirectedEdge[73, 220], 
         DirectedEdge[74, 37], 
         DirectedEdge[75, 226], 
         DirectedEdge[76, 38], 
         DirectedEdge[77, 232], 
         DirectedEdge[78, 39], 
         DirectedEdge[79, 238], 
         DirectedEdge[80, 40], 
         DirectedEdge[81, 244], 
         DirectedEdge[82, 41], 
         DirectedEdge[83, 250], 
         DirectedEdge[84, 42], 
         DirectedEdge[85, 256], 
         DirectedEdge[86, 43], 
         DirectedEdge[87, 262], 
         DirectedEdge[88, 44], 
         DirectedEdge[89, 268], 
         DirectedEdge[90, 45], 
         DirectedEdge[91, 274], 
         DirectedEdge[92, 46], 
         DirectedEdge[93, 280], 
         DirectedEdge[94, 47], 
         DirectedEdge[95, 286], 
         DirectedEdge[96, 48], 
         DirectedEdge[97, 292], 
         DirectedEdge[98, 49], 
         DirectedEdge[99, 298], 
         DirectedEdge[100, 50], 
         DirectedEdge[101, 304], 
         DirectedEdge[103, 310], 
         DirectedEdge[104, 52], 
         DirectedEdge[106, 53], 
         DirectedEdge[107, 322], 
         DirectedEdge[110, 55], 
         DirectedEdge[112, 56], 
         DirectedEdge[113, 340], 
         DirectedEdge[116, 58], 
         DirectedEdge[118, 59], 
         DirectedEdge[119, 358], 
         DirectedEdge[121, 364], 
         DirectedEdge[122, 61], 
         DirectedEdge[124, 62], 
         DirectedEdge[125, 376], 
         DirectedEdge[128, 64], 
         DirectedEdge[130, 65], 
         DirectedEdge[131, 394], 
         DirectedEdge[134, 67], 
         DirectedEdge[136, 68], 
         DirectedEdge[137, 412], 
         DirectedEdge[140, 70], 
         DirectedEdge[142, 71], 
         DirectedEdge[143, 430], 
         DirectedEdge[146, 73], 
         DirectedEdge[148, 74], 
         DirectedEdge[149, 448], 
         DirectedEdge[152, 76], 
         DirectedEdge[154, 77], 
         DirectedEdge[155, 466], 
         DirectedEdge[160, 80], 
         DirectedEdge[161, 484], 
         DirectedEdge[166, 83], 
         DirectedEdge[167, 502], 
         DirectedEdge[170, 85], 
         DirectedEdge[172, 86], 
         DirectedEdge[175, 526], 
         DirectedEdge[178, 89], 
         DirectedEdge[179, 538], 
         DirectedEdge[182, 91], 
         DirectedEdge[184, 92], 
         DirectedEdge[188, 94], 
         DirectedEdge[190, 95], 
         DirectedEdge[196, 98], 
         DirectedEdge[197, 592], 
         DirectedEdge[202, 101], 
         DirectedEdge[206, 103], 
         DirectedEdge[208, 104], 
         DirectedEdge[214, 107], 
         DirectedEdge[215, 646], 
         DirectedEdge[220, 110], 
         DirectedEdge[224, 112], 
         DirectedEdge[226, 113], 
         DirectedEdge[232, 116], 
         DirectedEdge[233, 700], 
         DirectedEdge[238, 119], 
         DirectedEdge[242, 121], 
         DirectedEdge[244, 122], 
         DirectedEdge[250, 125], 
         DirectedEdge[251, 754], 
         DirectedEdge[256, 128], 
         DirectedEdge[262, 131], 
         DirectedEdge[263, 790], 
         DirectedEdge[268, 134], 
         DirectedEdge[269, 808], 
         DirectedEdge[274, 137], 
         DirectedEdge[280, 140], 
         DirectedEdge[283, 850], 
         DirectedEdge[286, 143], 
         DirectedEdge[292, 146], 
         DirectedEdge[296, 148], 
         DirectedEdge[298, 149], 
         DirectedEdge[304, 152], 
         DirectedEdge[310, 155], 
         DirectedEdge[319, 958], 
         DirectedEdge[322, 161], 
         DirectedEdge[323, 970], 
         DirectedEdge[325, 976], 
         DirectedEdge[334, 167], 
         DirectedEdge[340, 170], 
         DirectedEdge[350, 175], 
         DirectedEdge[358, 179], 
         DirectedEdge[364, 182], 
         DirectedEdge[376, 188], 
         DirectedEdge[377, 1132], 
         DirectedEdge[394, 197], 
         DirectedEdge[395, 1186], 
         DirectedEdge[404, 202], 
         DirectedEdge[412, 206], 
         DirectedEdge[425, 1276], 
         DirectedEdge[430, 215], 
         DirectedEdge[433, 1300], 
         DirectedEdge[445, 1336], 
         DirectedEdge[448, 224], 
         DirectedEdge[466, 233], 
         DirectedEdge[479, 1438], 
         DirectedEdge[484, 242], 
         DirectedEdge[485, 1456], 
         DirectedEdge[488, 244], 
         DirectedEdge[502, 251], 
         DirectedEdge[526, 263], 
         DirectedEdge[538, 269], 
         DirectedEdge[566, 283], 
         DirectedEdge[577, 1732], 
         DirectedEdge[592, 296], 
         DirectedEdge[593, 1780], 
         DirectedEdge[638, 319], 
         DirectedEdge[646, 323], 
         DirectedEdge[650, 325], 
         DirectedEdge[668, 334], 
         DirectedEdge[700, 350], 
         DirectedEdge[719, 2158], 
         DirectedEdge[728, 364], 
         DirectedEdge[754, 377], 
         DirectedEdge[790, 395], 
         DirectedEdge[808, 404], 
         DirectedEdge[850, 425], 
         DirectedEdge[866, 433], 
         DirectedEdge[890, 445], 
         DirectedEdge[911, 2734], 
         DirectedEdge[958, 479], 
         DirectedEdge[970, 485], 
         DirectedEdge[976, 488], 
         DirectedEdge[1079, 3238], 
         DirectedEdge[1132, 566], 
         DirectedEdge[1154, 577], 
         DirectedEdge[1186, 593], 
         DirectedEdge[1276, 638], 
         DirectedEdge[1300, 650], 
         DirectedEdge[1336, 668], 
         DirectedEdge[1367, 4102], 
         DirectedEdge[1438, 719], 
         DirectedEdge[1456, 728], 
         DirectedEdge[1619, 4858], 
         DirectedEdge[1732, 866], 
         DirectedEdge[1780, 890], 
         DirectedEdge[1822, 911], 
         DirectedEdge[2051, 6154], 
         DirectedEdge[2158, 1079], 
         DirectedEdge[2308, 1154], 
         DirectedEdge[2429, 7288], 
         DirectedEdge[2734, 1367], 
         DirectedEdge[3077, 9232], 
         DirectedEdge[3238, 1619], 
         DirectedEdge[3644, 1822], 
         DirectedEdge[4102, 2051], 
         DirectedEdge[4616, 2308], 
         DirectedEdge[4858, 2429], 
         DirectedEdge[6154, 3077], 
         DirectedEdge[7288, 3644], 
         DirectedEdge[9232, 4616]}, $CellContext`listLength$$ = 2, Condition[
         $CellContext`collatzList[
          Pattern[$CellContext`n, 
           Blank[Integer]], 
          Pattern[$CellContext`mod, 
           Blank[]]], $CellContext`n > 0] := NestWhileList[
         $CellContext`c[$CellContext`n, $CellContext`mod], $CellContext`n, # != 
         1& ], $CellContext`c[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]]] := Switch[$CellContext`mod, 2, If[
          EvenQ[#], #/2, 3 # + 1]& , 3, Switch[
          Mod[#, 3], 0, #/3, 1, (2 # + 1)/3, 2, (2 # - 1)/3]& , 5, Switch[
          Mod[#, 5], 0, #/5, 1, 5 # + 2, 2, 3 # - 1, 3, 2 # - 1, 4, (# + 1)/
          5]& , 7, Switch[
          Mod[#, 7], 0, #/7, 1, (3 # + 4)/7, 2, 4 # - 5, 3, (2 # + 22)/7, 
          4, (# + 3)/7, 5, (3 # - 1)/7, 6, (# + 8)/
          7]& ], $CellContext`withEdges := Apply[DirectedEdge, 
         Partition[
          $CellContext`collatzList[
           SlotSequence[1]], 2, 1], 2]& , $CellContext`gLayout[
        "HierarchicalEdgeBundling"] = {
        "EdgeLayout" -> {"HierarchicalEdgeBundling"}}, $CellContext`gLayout[
         Pattern[$CellContext`s, 
          Blank[]]] := $CellContext`s, $CellContext`checkQuadrant[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`G, 
          Blank[]]] := If[
         Not[
          MemberQ[
           VertexList[$CellContext`G], $CellContext`n]], {After, Above}, 
         With[{$CellContext`coords = Riffle[
             VertexList[$CellContext`G], 
             Part[
              ReplaceAll[
               AbsoluteOptions[$CellContext`G, VertexCoordinates], 
               Rule -> (#2& )], 1]]}, 
          Which[
           And[First[
              Flatten[
               
               Part[$CellContext`coords, $CellContext`position[$CellContext`n,
                   $CellContext`coords] + 1]]] > 0, Last[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] > 0], {
           After, Above}, 
           And[First[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] > 0, Last[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] < 0], {
           After, Below}, 
           And[First[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] < 0, Last[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] > 0], {
           Before, Above}, 
           And[First[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] < 0, Last[
              Flatten[
               
               Part[$CellContext`coords, \
$CellContext`position[$CellContext`n, $CellContext`coords] + 1]]] < 0], {
           Before, Below}]]], $CellContext`position[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`coords, 
          Blank[]]] := Flatten[
         Position[$CellContext`coords, $CellContext`n]], $CellContext`colors = 
       Map[
         ColorData["Rainbow"], Range[
           $CellContext`numbEdges[
            SlotSequence[1]]]/$CellContext`numbEdges[
          SlotSequence[1]]]& , $CellContext`numbEdges = Length[
         $CellContext`withEdges[
          SlotSequence[1]]]& , $CellContext`piecewiseFunc[
         Pattern[$CellContext`mod, 
          Blank[]]] := Switch[$CellContext`mod, 2, 
         Style[
          TraditionalForm[
           Function[$CellContext`x, 
            Piecewise[{{
               Row[{$CellContext`x, "\[ThinSpace]/\[ThinSpace]", 2}], 
               Congruent[
                Mod[$CellContext`x, 2], 0]}, {
               Row[{3 $CellContext`x + 1}], 
               Congruent[
                Mod[$CellContext`x, 2], 1]}}]]], FontFamily -> "Times"], 3, 
         Style[
          TraditionalForm[
           Function[$CellContext`x, 
            Piecewise[{{
               Row[{$CellContext`x, "\[ThinSpace]/\[ThinSpace]", 3}], 
               Congruent[
                Mod[$CellContext`x, 3], 0]}, {
               Row[{2 $CellContext`x + 1}], 
               Congruent[
                Mod[$CellContext`x, 3], 1]}, {
               
               Row[{"(", 2 $CellContext`x - 1, ")\[ThinSpace]/\[ThinSpace]", 
                 3}], 
               Congruent[
                Mod[$CellContext`x, 3], 2]}}]]], FontFamily -> "Times"], 5, 
         Style[
          TraditionalForm[
           Function[$CellContext`x, 
            Piecewise[{{
               Row[{$CellContext`x, "\[ThinSpace]/\[ThinSpace]", 5}], 
               Congruent[
                Mod[$CellContext`x, 5], 0]}, {
               Row[{"(", 5 $CellContext`x + 2, ")"}], 
               Congruent[
                Mod[$CellContext`x, 5], 1]}, {3 $CellContext`x - 1, 
               Congruent[
                Mod[$CellContext`x, 5], 2]}, {
               Row[{2 $CellContext`x - 1}], 
               Congruent[
                Mod[$CellContext`x, 5], 3]}, {
               
               Row[{"(", $CellContext`x + 1, ")\[ThinSpace]/\[ThinSpace]", 
                 5}], 
               Congruent[
                Mod[$CellContext`x, 5], 4]}}]]], FontFamily -> "Times"], 7, 
         Style[
          TraditionalForm[
           Function[$CellContext`x, 
            Piecewise[{{
               Row[{$CellContext`x, "\[ThinSpace]/\[ThinSpace]", 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 0]}, {
               
               Row[{"(", 3 $CellContext`x + 4, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 1]}, {4 $CellContext`x - 5, 
               Congruent[
                Mod[$CellContext`x, 7], 2]}, {
               
               Row[{"(", 2 $CellContext`x + 22, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 3]}, {
               
               Row[{"(", $CellContext`x + 3, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 4]}, {
               
               Row[{"(", 3 $CellContext`x - 1, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 5]}, {
               
               Row[{"(", $CellContext`x + 8, ")\[ThinSpace]/\[ThinSpace]", 
                 7}], 
               Congruent[
                Mod[$CellContext`x, 7], 6]}}]]], FontFamily -> 
          "Times"]], $CellContext`collatzLengthSelect[
         Pattern[$CellContext`highlightSelect, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]]] := Length[
         $CellContext`collatzList[$CellContext`highlightSelect, \
$CellContext`mod]]}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->1852043362]
}, Open  ]],

Cell["", "DetailsSection"],

Cell[CellGroupData[{

Cell["", "ControlSuggestionsSection"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Resize Images"]}],
  "\"Click inside an image to reveal its orange resize frame.\\nDrag any of \
the orange resize handles to resize the image.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.647003816539856*^9},
 FontFamily->"Verdana",
 CellTags->"ResizeImages"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Rotate and Zoom in 3D"]}],
  RowBox[{
   "\"Drag a 3D graphic to rotate it. Starting the drag near the center \
tumbles\\nthe graphic; starting near a corner turns it parallel to the plane \
of the screen.\\nHold down \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" (or \"", 
    FrameBox[
    "Cmd", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" on Mac) and drag up and down to zoom.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"RotateAndZoomIn3D"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Drag Locators"]}],
  RowBox[{"\"Drag any locator (\"", 
    GraphicsBox[
     LocatorBox[
      Scaled[{0.5, 0.5}]], ImageSize -> 20], 
    "\", etc.) to move it around.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"DragLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Create and Delete Locators"]}],
  RowBox[{"\"Insert a new locator in the graphic by holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key\\nand clicking where you want it to be. Delete a locator by \
clicking it\\nwhile holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" key.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"CreateAndDeleteLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Slider Zoom"]}],
  RowBox[{"\"Hold down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key while moving a slider to make fine adjustments in the slider \
value.\\nHold \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" and/or \"", 
    FrameBox[
    "Shift", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" at the same time as \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" to make ever finer adjustments.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.6470038176816783`*^9},
 FontFamily->"Verdana",
 CellTags->"SliderZoom"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Gamepad Controls"]}],
  "\"Control this Demonstration with a gamepad or other\\nhuman interface \
device connected to your computer.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.35696210375764*^9, 3.3895522232313623`*^9, 
  3.6470147730875797`*^9},
 FontFamily->"Verdana",
 CellTags->"GamepadControls"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Automatic Animation"]}],
  RowBox[{"\"Animate a slider in this Demonstration by clicking the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJzzTSzJSM1NLMlMTlRwL0osyMhMLlZwyy8CCjEzMjAwcIKwAgOI/R/IhBKc\n\
/4EAyGAG0f+nTZsGwgysIJIRKsWKLAXGIHFmEpUgLADxWUAkI24jZs+eTaEt\n\
IG+wQKRmzJgBlYf5lhEA30OqWA=="], "Graphics", ImageSize -> {9, 9}, ImageMargins -> 
      0, CellBaseline -> Baseline], BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"button\\nnext to the slider, and then clicking the play button that \
appears.\\nAnimate all controls by selecting \"", 
    StyleBox["Autorun", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.647014774039789*^9},
 FontFamily->"Verdana",
 CellTags->"AutomaticAnimation"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Bookmark Animation"]}],
  RowBox[{
   "\"See a prepared animation of this Demonstration by selecting\\n\"", 
    StyleBox["Animate Bookmarks", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"BookmarkAnimation"]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SearchTermsSection"],

Cell["Collatz", "SearchTerms",
 CellChangeTimes->{{3.6460620942475977`*^9, 3.646062096439488*^9}},
 CellID->1299102321],

Cell["number theory", "SearchTerms",
 CellChangeTimes->{{3.6460620942475977`*^9, 3.646062117314921*^9}},
 CellID->1768496764],

Cell["conjecture", "SearchTerms",
 CellChangeTimes->{{3.6460620942475977`*^9, 3.646062119677898*^9}},
 CellID->1449351892],

Cell["recursive", "SearchTerms",
 CellChangeTimes->{{3.6460620942475977`*^9, 3.6460621216907578`*^9}},
 CellID->1007815844],

Cell["converge", "SearchTerms",
 CellChangeTimes->{{3.6460620942475977`*^9, 3.6460621240465517`*^9}, {
  3.646069434556199*^9, 3.646069434563363*^9}},
 CellID->1272310833],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Summer Camp 2015"
}], "SearchTerms",
 CellChangeTimes->{{3.6460620942475977`*^9, 3.6460621240465517`*^9}, {
  3.646069434556199*^9, 3.6460694467882643`*^9}, {3.6470037747967815`*^9, 
  3.6470037769852257`*^9}},
 CellID->619320406]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "RelatedLinksSection"],

Cell[TextData[ButtonBox["Collatz Paths",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/CollatzPaths/"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/CollatzPaths/"]], "RelatedLinks",
 CellChangeTimes->{{3.647003691027229*^9, 3.647003691030229*^9}},
 CellID->18144150],

Cell[TextData[ButtonBox["Collatz Conjecture on a Circle",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/CollatzConjectureOnACircle/"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/CollatzConjectureOnACircle/"]], \
"RelatedLinks",
 CellChangeTimes->{{3.6470037148424444`*^9, 3.6470037148424444`*^9}},
 CellID->236008636],

Cell[TextData[ButtonBox["Reverse Collatz Paths",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/ReverseCollatzPaths/"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/ReverseCollatzPaths/"]], "RelatedLinks",
 CellChangeTimes->{{3.6470037356840124`*^9, 3.6470037356840124`*^9}},
 CellID->377288004],

Cell[TextData[ButtonBox["Collatz Problem",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://mathworld.wolfram.com/CollatzProblem.html"], None},
 ButtonNote->
  "http://mathworld.wolfram.com/CollatzProblem.html"]], "RelatedLinks",
 CellChangeTimes->{{3.647003756840021*^9, 3.6470037568556213`*^9}},
 CellID->122272810]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "AuthorSection"],

Cell[TextData[{
 "Contributed by: ",
 ButtonBox["Alex Han",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/author.html?author=Alex+Han"], 
    None},
  ButtonNote->
   "http://demonstrations.wolfram.com/author.html?author=Alex+Han"]
}], "Author",
 CellChangeTimes->{{3.646065266708926*^9, 3.646065270054243*^9}, {
  3.646068901053658*^9, 3.646068907004107*^9}, {3.6470038109675484`*^9, 
  3.6470038109675484`*^9}},
 CellID->993004110],

Cell[TextData[{
 "(",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Summer Camp 2015)"
}], "Author",
 CellChangeTimes->{{3.646065266708926*^9, 3.646065270054243*^9}, {
  3.646068901053658*^9, 3.6460689144311438`*^9}},
 CellID->1025514100]
}, Open  ]]
}, Open  ]]
},
WindowSize->{792, 817},
WindowMargins->{{Automatic, 210}, {Automatic, 62}},
FrontEndVersion->"10.2 for Mac OS X x86 (32-bit, 64-bit Kernel) (July 6, \
2015)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "Demonstration.nb", 
  CharacterEncoding -> "UTF-8"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "AutomaticAnimation"->{
  Cell[267836, 6387, 1505, 32, 29, "ControlSuggestions",
   CellTags->"AutomaticAnimation"]},
 "BookmarkAnimation"->{
  Cell[269344, 6421, 908, 21, 29, "ControlSuggestions",
   CellTags->"BookmarkAnimation"]},
 "CreateAndDeleteLocators"->{
  Cell[265908, 6334, 637, 15, 29, "ControlSuggestions",
   CellTags->"CreateAndDeleteLocators"]},
 "DragLocators"->{
  Cell[265565, 6321, 340, 11, 29, "ControlSuggestions",
   CellTags->"DragLocators"]},
 "GamepadControls"->{
  Cell[267438, 6375, 395, 10, 29, "ControlSuggestions",
   CellTags->"GamepadControls"]},
 "ResizeImages"->{
  Cell[264528, 6292, 353, 9, 29, "ControlSuggestions",
   CellTags->"ResizeImages"]},
 "RotateAndZoomIn3D"->{
  Cell[264884, 6303, 678, 16, 29, "ControlSuggestions",
   CellTags->"RotateAndZoomIn3D"]},
 "SliderZoom"->{
  Cell[266548, 6351, 887, 22, 29, "ControlSuggestions",
   CellTags->"SliderZoom"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"AutomaticAnimation", 273922, 6566},
 {"BookmarkAnimation", 274040, 6569},
 {"CreateAndDeleteLocators", 274162, 6572},
 {"DragLocators", 274279, 6575},
 {"GamepadControls", 274388, 6578},
 {"ResizeImages", 274497, 6581},
 {"RotateAndZoomIn3D", 274607, 6584},
 {"SliderZoom", 274716, 6587}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 334, 4, 108, "DemoTitle"],
Cell[CellGroupData[{
Cell[939, 30, 33, 0, 275, "InitializationSection"],
Cell[975, 32, 19422, 495, 70, "Input",
 InitializationCell->True,
 CellID->1941290596]
}, Closed]],
Cell[CellGroupData[{
Cell[20434, 532, 29, 0, 201, "ManipulateSection"],
Cell[CellGroupData[{
Cell[20488, 536, 39549, 837, 2572, "Input"],
Cell[60040, 1375, 33344, 797, 531, "Output",
 CellID->591018221]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[93433, 2178, 36, 0, 181, "ManipulateCaptionSection"],
Cell[93472, 2180, 1032, 23, 39, "ManipulateCaption"],
Cell[94507, 2205, 1362, 34, 44, "ManipulateCaption",
 CellID->795729339],
Cell[95872, 2241, 1480, 23, 87, "ManipulateCaption",
 CellID->635465719],
Cell[97355, 2266, 633, 11, 23, "ManipulateCaption",
 CellID->1693352466]
}, Open  ]],
Cell[CellGroupData[{
Cell[98025, 2282, 28, 0, 179, "ThumbnailSection"],
Cell[98056, 2284, 33321, 797, 531, "Output",
 CellID->1131372972]
}, Open  ]],
Cell[CellGroupData[{
Cell[131414, 3086, 28, 0, 149, "SnapshotsSection"],
Cell[131445, 3088, 33345, 797, 531, "Output",
 CellID->1165329866],
Cell[164793, 3887, 33153, 798, 531, "Output",
 CellID->648197222],
Cell[197949, 4687, 33151, 797, 531, "Output",
 CellID->66168923],
Cell[231103, 5486, 33319, 797, 531, "Output",
 CellID->1852043362]
}, Open  ]],
Cell[264437, 6286, 26, 0, 357, "DetailsSection"],
Cell[CellGroupData[{
Cell[264488, 6290, 37, 0, 119, "ControlSuggestionsSection"],
Cell[264528, 6292, 353, 9, 29, "ControlSuggestions",
 CellTags->"ResizeImages"],
Cell[264884, 6303, 678, 16, 29, "ControlSuggestions",
 CellTags->"RotateAndZoomIn3D"],
Cell[265565, 6321, 340, 11, 29, "ControlSuggestions",
 CellTags->"DragLocators"],
Cell[265908, 6334, 637, 15, 29, "ControlSuggestions",
 CellTags->"CreateAndDeleteLocators"],
Cell[266548, 6351, 887, 22, 29, "ControlSuggestions",
 CellTags->"SliderZoom"],
Cell[267438, 6375, 395, 10, 29, "ControlSuggestions",
 CellTags->"GamepadControls"],
Cell[267836, 6387, 1505, 32, 29, "ControlSuggestions",
 CellTags->"AutomaticAnimation"],
Cell[269344, 6421, 908, 21, 29, "ControlSuggestions",
 CellTags->"BookmarkAnimation"]
}, Open  ]],
Cell[CellGroupData[{
Cell[270289, 6447, 30, 0, 165, "SearchTermsSection"],
Cell[270322, 6449, 119, 2, 23, "SearchTerms",
 CellID->1299102321],
Cell[270444, 6453, 125, 2, 23, "SearchTerms",
 CellID->1768496764],
Cell[270572, 6457, 122, 2, 23, "SearchTerms",
 CellID->1449351892],
Cell[270697, 6461, 123, 2, 23, "SearchTerms",
 CellID->1007815844],
Cell[270823, 6465, 171, 3, 23, "SearchTerms",
 CellID->1272310833],
Cell[270997, 6470, 298, 8, 23, "SearchTerms",
 CellID->619320406]
}, Open  ]],
Cell[CellGroupData[{
Cell[271332, 6483, 31, 0, 149, "RelatedLinksSection"],
Cell[271366, 6485, 316, 7, 23, "RelatedLinks",
 CellID->18144150],
Cell[271685, 6494, 368, 8, 23, "RelatedLinks",
 CellID->236008636],
Cell[272056, 6504, 343, 7, 23, "RelatedLinks",
 CellID->377288004],
Cell[272402, 6513, 323, 7, 23, "RelatedLinks",
 CellID->122272810]
}, Open  ]],
Cell[CellGroupData[{
Cell[272762, 6525, 25, 0, 149, "AuthorSection"],
Cell[272790, 6527, 472, 13, 23, "Author",
 CellID->993004110],
Cell[273265, 6542, 244, 8, 23, "Author",
 CellID->1025514100]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
