(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 6.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[    245522,       5341]
NotebookOptionsPosition[    241602,       5222]
NotebookOutlinePosition[    243222,       5272]
CellTagsIndexPosition[    242886,       5260]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Sudoku Game", "DemoTitle",
 CellChangeTimes->{
  3.35696210375764*^9, {3.388826874386923*^9, 3.388826878154015*^9}}],

Cell["", "InitializationSection"],

Cell[CellGroupData[{

Cell["", "ManipulateSection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"DynamicModule", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"n", "=", "9"}], ",", 
       RowBox[{"color", "=", 
        RowBox[{"RGBColor", "[", 
         RowBox[{".1", ",", ".2", ",", ".8"}], "]"}]}], ",", "seed", ",", 
       "solution", ",", "fields", ",", "game", ",", "pos", ",", "x1", ",", 
       "x2", ",", "x3", ",", "x4", ",", "x5", ",", "x6", ",", "x7", ",", "x8",
        ",", "x9", ",", "x10", ",", "x11", ",", "x12", ",", "x13", ",", "x14",
        ",", "x15", ",", "x16", ",", "x17", ",", "x18", ",", "x19", ",", 
       "x20", ",", "x21", ",", "x22", ",", "x23", ",", "x24", ",", "x25", ",",
        "x26", ",", "x27", ",", "x28", ",", "x29", ",", "x30", ",", "x31", 
       ",", "x32", ",", "x33", ",", "x34", ",", "x35", ",", "x36", ",", "x37",
        ",", "x38", ",", "x39", ",", "x40", ",", "x41", ",", "x42", ",", 
       "x43", ",", "x44", ",", "x45", ",", "x46", ",", "x47", ",", "x48", ",",
        "x49", ",", "x50", ",", "x51", ",", "x52", ",", "x53", ",", "x54", 
       ",", "x55", ",", "x56", ",", "x57", ",", "x58", ",", "x59", ",", 
       "x60"}], "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"seed", "=", 
       RowBox[{"ReplacePart", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{"\"\<\>\"", ",", 
           RowBox[{"{", "n", "}"}], ",", 
           RowBox[{"{", "n", "}"}]}], "]"}], ",", 
         RowBox[{"Thread", "[", 
          RowBox[{
           RowBox[{"RandomSample", "[", 
            RowBox[{
             RowBox[{"Tuples", "[", 
              RowBox[{
               RowBox[{"Range", "[", "n", "]"}], ",", "2"}], "]"}], ",", 
             "n"}], "]"}], "\[Rule]", 
           RowBox[{"Range", "[", "n", "]"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"solution", "=", 
       RowBox[{"sudokusolver", "[", "seed", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"fields", "=", 
       RowBox[{"Take", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "x1", ",", "x2", ",", "x3", ",", "x4", ",", "x5", ",", "x6", ",", 
           "x7", ",", "x8", ",", "x9", ",", "x10", ",", "x11", ",", "x12", 
           ",", "x13", ",", "x14", ",", "x15", ",", "x16", ",", "x17", ",", 
           "x18", ",", "x19", ",", "x20", ",", "x21", ",", "x22", ",", "x23", 
           ",", "x24", ",", "x25", ",", "x26", ",", "x27", ",", "x28", ",", 
           "x29", ",", "x30", ",", "x31", ",", "x32", ",", "x33", ",", "x34", 
           ",", "x35", ",", "x36", ",", "x37", ",", "x38", ",", "x39", ",", 
           "x40", ",", "x41", ",", "x42", ",", "x43", ",", "x44", ",", "x45", 
           ",", "x46", ",", "x47", ",", "x48", ",", "x49", ",", "x50", ",", 
           "x51", ",", "x52", ",", "x53", ",", "x54", ",", "x55", ",", "x56", 
           ",", "x57", ",", "x58", ",", "x59", ",", "x60"}], "}"}], ",", 
         "difficulty"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"game", "=", 
       RowBox[{"ReplacePart", "[", 
        RowBox[{"solution", ",", 
         RowBox[{"Thread", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"pos", "=", 
             RowBox[{"RandomSample", "[", 
              RowBox[{
               RowBox[{"Tuples", "[", 
                RowBox[{
                 RowBox[{"Range", "[", "n", "]"}], ",", "2"}], "]"}], ",", 
               "difficulty"}], "]"}]}], ")"}], "\[Rule]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"PopupMenu", "[", 
               RowBox[{
                RowBox[{"Dynamic", "[", "#", "]"}], ",", 
                RowBox[{"Prepend", "[", 
                 RowBox[{
                  RowBox[{"Range", "[", "9", "]"}], ",", "\"\<   \>\""}], 
                 "]"}], ",", 
                RowBox[{"BaseStyle", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{"color", ",", "14"}], "}"}]}], ",", 
                RowBox[{"Appearance", "\[Rule]", "None"}], ",", 
                RowBox[{"FrameMargins", "\[Rule]", "0"}]}], "]"}], "&"}], "/@",
              "fields"}], ")"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Deploy", "[", "\[IndentingNewLine]", 
       RowBox[{"Grid", "[", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Button", "[", 
              RowBox[{"\"\<new puzzle\>\"", ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"sol", "=", "\"\< \>\""}], ";", "\[IndentingNewLine]", 
                RowBox[{"seed", "=", 
                 RowBox[{"ReplacePart", "[", 
                  RowBox[{
                   RowBox[{"Table", "[", 
                    RowBox[{"\"\<\>\"", ",", 
                    RowBox[{"{", "n", "}"}], ",", 
                    RowBox[{"{", "n", "}"}]}], "]"}], ",", 
                   RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{"RandomSample", "[", 
                    RowBox[{
                    RowBox[{"Tuples", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", "n", "]"}], ",", "2"}], "]"}], ",", 
                    "n"}], "]"}], "\[Rule]", 
                    RowBox[{"Range", "[", "n", "]"}]}], "]"}]}], "]"}]}], ";",
                 "\[IndentingNewLine]", 
                RowBox[{"solution", "=", 
                 RowBox[{"sudokusolver", "[", "seed", "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"Clear", "[", 
                 RowBox[{
                 "x1", ",", "x2", ",", "x3", ",", "x4", ",", "x5", ",", "x6", 
                  ",", "x7", ",", "x8", ",", "x9", ",", "x10", ",", "x11", 
                  ",", "x12", ",", "x13", ",", "x14", ",", "x15", ",", "x16", 
                  ",", "x17", ",", "x18", ",", "x19", ",", "x20", ",", "x21", 
                  ",", "x22", ",", "x23", ",", "x24", ",", "x25", ",", "x26", 
                  ",", "x27", ",", "x28", ",", "x29", ",", "x30", ",", "x31", 
                  ",", "x32", ",", "x33", ",", "x34", ",", "x35", ",", "x36", 
                  ",", "x37", ",", "x38", ",", "x39", ",", "x40", ",", "x41", 
                  ",", "x42", ",", "x43", ",", "x44", ",", "x45", ",", "x46", 
                  ",", "x47", ",", "x48", ",", "x49", ",", "x50", ",", "x51", 
                  ",", "x52", ",", "x53", ",", "x54", ",", "x55"}], "]"}], 
                ";", "\[IndentingNewLine]", 
                RowBox[{"fields", "=", 
                 RowBox[{"Take", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    "x1", ",", "x2", ",", "x3", ",", "x4", ",", "x5", ",", 
                    "x6", ",", "x7", ",", "x8", ",", "x9", ",", "x10", ",", 
                    "x11", ",", "x12", ",", "x13", ",", "x14", ",", "x15", 
                    ",", "x16", ",", "x17", ",", "x18", ",", "x19", ",", 
                    "x20", ",", "x21", ",", "x22", ",", "x23", ",", "x24", 
                    ",", "x25", ",", "x26", ",", "x27", ",", "x28", ",", 
                    "x29", ",", "x30", ",", "x31", ",", "x32", ",", "x33", 
                    ",", "x34", ",", "x35", ",", "x36", ",", "x37", ",", 
                    "x38", ",", "x39", ",", "x40", ",", "x41", ",", "x42", 
                    ",", "x43", ",", "x44", ",", "x45", ",", "x46", ",", 
                    "x47", ",", "x48", ",", "x49", ",", "x50", ",", "x51", 
                    ",", "x52", ",", "x53", ",", "x54", ",", "x55", ",", 
                    "x56", ",", "x57", ",", "x58", ",", "x59", ",", "x60"}], 
                    "}"}], ",", "difficulty"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"game", "=", 
                 RowBox[{"ReplacePart", "[", 
                  RowBox[{"solution", ",", 
                   RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"pos", "=", 
                    RowBox[{"RandomSample", "[", 
                    RowBox[{
                    RowBox[{"Tuples", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", "n", "]"}], ",", "2"}], "]"}], ",", 
                    "difficulty"}], "]"}]}], ")"}], "\[Rule]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"PopupMenu", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "#", "]"}], ",", 
                    RowBox[{"Prepend", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", "9", "]"}], ",", "\"\<   \>\""}], 
                    "]"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"color", ",", "14"}], "}"}]}], ",", 
                    RowBox[{"Appearance", "\[Rule]", "None"}], ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "0"}]}], "]"}], "&"}], 
                    "/@", "fields"}], ")"}]}], "]"}]}], "]"}]}], ";"}]}], 
              "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Button", "[", 
              RowBox[{"\"\<check\>\"", ",", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"check", "[", 
                  RowBox[{"ReplacePart", "[", 
                   RowBox[{"game", ",", 
                    RowBox[{"Thread", "[", 
                    RowBox[{"pos", "\[Rule]", "fields"}], "]"}]}], "]"}], 
                  "]"}], ",", 
                 RowBox[{"sol", "=", 
                  RowBox[{"Style", "[", 
                   RowBox[{
                   "\"\<Congratulations!\>\"", ",", "14", ",", 
                    "\"\<Label\>\""}], "]"}]}], ",", 
                 RowBox[{"sol", "=", 
                  RowBox[{"Style", "[", 
                   RowBox[{
                   "\"\<Nope, try again\>\"", ",", "14", ",", 
                    "\"\<Label\>\""}], "]"}]}]}], "]"}]}], 
              "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "}"}], 
           ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Dynamic", "@", 
              RowBox[{"sudokuForm", "[", "game", "]"}]}], ",", 
             RowBox[{"Dynamic", "@", "sol"}]}], "}"}], ",", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Button", "[", 
              RowBox[{"\"\<show solution\>\"", ",", 
               RowBox[{"sol", "=", 
                RowBox[{"sudokuForm", "[", 
                 RowBox[{"ReplacePart", "[", 
                  RowBox[{"solution", ",", 
                   RowBox[{"Thread", "[", 
                    RowBox[{"pos", "\[Rule]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"Part", "[", 
                    RowBox[{"solution", ",", 
                    RowBox[{"Sequence", "@@", "#"}]}], "]"}], ",", "color"}], 
                    "]"}], "&"}], "/@", "pos"}], ")"}]}], "]"}]}], "]"}], 
                 "]"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Button", "[", 
              RowBox[{"\"\<hide solution\>\"", ",", 
               RowBox[{"sol", "=", "\"\< \>\""}]}], "]"}]}], 
            "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "}"}], ",", 
         RowBox[{"ItemSize", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"23", ",", "23"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"2", ",", "20", ",", "2"}], "}"}]}], "}"}]}]}], "]"}], 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"difficulty", ",", "40"}], "}"}], ",", 
     RowBox[{"Range", "[", "60", "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"sol", ",", "\"\< \>\""}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   RowBox[{"TrackedSymbols", "\[RuleDelayed]", 
    RowBox[{"{", "difficulty", "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"Initialization", "\[RuleDelayed]", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"blockposition", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"i_", ",", " ", "j_"}], "}"}], ",", " ", "size_"}], "]"}], 
       " ", ":=", " ", 
       RowBox[{
        RowBox[{"blockposition", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"i", ",", "j"}], "}"}], ",", " ", "size"}], "]"}], "=", 
        RowBox[{"Sequence", " ", "@@", " ", 
         RowBox[{
          RowBox[{"Partition", "[", 
           RowBox[{
            RowBox[{"Range", "[", "size", "]"}], ",", " ", 
            RowBox[{"Sqrt", "[", "size", "]"}]}], "]"}], 
          "\[LeftDoubleBracket]", 
          RowBox[{"Ceiling", " ", "/@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"i", ",", "j"}], "}"}], "/", 
             RowBox[{"Sqrt", "[", "size", "]"}]}], ")"}]}], 
          "\[RightDoubleBracket]"}]}]}]}], ";", 
      RowBox[{
       RowBox[{"placenumber", "[", 
        RowBox[{"n_", ",", 
         RowBox[{"{", 
          RowBox[{"i_", ",", "j_"}], "}"}], ",", " ", 
         RowBox[{"extra_String:", "\"\<\>\""}]}], "]"}], ":=", " ", 
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"size", "=", 
           RowBox[{"Length", "[", "choices", "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"choices", "\[LeftDoubleBracket]", 
              RowBox[{"i", ",", "j"}], "\[RightDoubleBracket]"}], ",", " ", 
             "n"}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"choices", "\[LeftDoubleBracket]", 
              RowBox[{"i", ",", "j"}], "\[RightDoubleBracket]"}], "=", 
             RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
             "choices", "\[LeftDoubleBracket]", "i", 
              "\[RightDoubleBracket]"}], " ", "=", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"DeleteCases", "[", 
                RowBox[{"#", ",", "n"}], "]"}], "&"}], " ", "/@", " ", 
              RowBox[{
              "choices", "\[LeftDoubleBracket]", "i", 
               "\[RightDoubleBracket]"}]}]}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"choices", "\[LeftDoubleBracket]", 
              RowBox[{"All", ",", "j"}], "\[RightDoubleBracket]"}], " ", "=", 
             " ", 
             RowBox[{
              RowBox[{
               RowBox[{"DeleteCases", "[", 
                RowBox[{"#", ",", "n"}], "]"}], "&"}], " ", "/@", " ", 
              RowBox[{"choices", "\[LeftDoubleBracket]", 
               RowBox[{"All", ",", "j"}], "\[RightDoubleBracket]"}]}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"choices", "\[LeftDoubleBracket]", 
              RowBox[{"blockposition", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"i", ",", "j"}], "}"}], ",", " ", "size"}], "]"}], 
              "\[RightDoubleBracket]"}], "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"DeleteCases", "[", 
                 RowBox[{"#", ",", "n"}], "]"}], "&"}], ",", 
               RowBox[{"choices", "\[LeftDoubleBracket]", 
                RowBox[{"blockposition", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"i", ",", "j"}], "}"}], ",", " ", "size"}], "]"}], 
                "\[RightDoubleBracket]"}], ",", " ", 
               RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"extra", "!=", "\"\<\>\""}], ",", " ", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"extra", "\[Equal]", "\"\<both\>\""}], "||", 
                    RowBox[{"extra", "\[Equal]", "\"\<diagonal\>\""}]}], 
                   ")"}], "&&", " ", 
                  RowBox[{"i", "\[Equal]", "j"}]}], ",", " ", 
                 "\[IndentingNewLine]", 
                 RowBox[{"choices", " ", "=", " ", 
                  RowBox[{"MapAt", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{"#", ",", "n"}], "]"}], "&"}], ",", " ", 
                    "choices", ",", " ", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"k", ",", "k"}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"k", ",", " ", "1", ",", " ", "size"}], "}"}]}], 
                    "]"}]}], "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"extra", "\[Equal]", "\"\<both\>\""}], "||", 
                    RowBox[{"extra", "\[Equal]", "\"\<antidiagonal\>\""}]}], 
                   ")"}], "&&", " ", 
                  RowBox[{
                   RowBox[{"i", "+", "j"}], "\[Equal]", 
                   RowBox[{"size", "+", "1"}]}]}], ",", " ", 
                 "\[IndentingNewLine]", 
                 RowBox[{"choices", " ", "=", " ", 
                  RowBox[{"MapAt", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{"#", ",", "n"}], "]"}], "&"}], ",", " ", 
                    "choices", ",", " ", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"k", ",", 
                    RowBox[{"size", "+", "1", "-", "k"}]}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"k", ",", " ", "1", ",", " ", "size"}], "}"}]}], 
                    "]"}]}], "]"}]}]}], "]"}]}]}], " ", "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"result", "\[LeftDoubleBracket]", 
              RowBox[{"i", ",", "j"}], "\[RightDoubleBracket]"}], "=", 
             "n"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"Throw", "[", 
            RowBox[{"placednumbers", "=", 
             RowBox[{
              SuperscriptBox["size", "2"], "+", "1"}]}], "]"}]}], "]"}]}], 
        "]"}]}], ";", 
      RowBox[{
       RowBox[{"singlenumber", "[", "v_", "]"}], " ", ":=", " ", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"u", "=", 
           RowBox[{"Flatten", "[", 
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"Split", "[", 
               RowBox[{"Sort", "[", 
                RowBox[{"Flatten", "[", "v", "]"}], "]"}], "]"}], ",", " ", 
              RowBox[{"{", "_", "}"}]}], "]"}], "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"u", "\[NotEqual]", 
            RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"With", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"w", " ", "=", " ", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Position", "[", 
                    RowBox[{"v", ",", "#"}], "]"}], "&"}], " ", "/@", " ", 
                  "u"}], ")"}], "\[LeftDoubleBracket]", 
                RowBox[{"All", ",", "1", ",", "1"}], 
                "\[RightDoubleBracket]"}]}], "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"If", " ", "[", 
              RowBox[{
               RowBox[{"Unequal", " ", "@@", " ", "w"}], ",", " ", 
               RowBox[{"ReplacePart", "[", 
                RowBox[{"v", ",", " ", 
                 RowBox[{"List", " ", "/@", " ", "u"}], ",", " ", 
                 RowBox[{"List", " ", "/@", " ", "w"}], ",", " ", 
                 RowBox[{"List", " ", "/@", " ", 
                  RowBox[{"Range", "[", 
                   RowBox[{"Length", "[", "u", "]"}], "]"}]}]}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Throw", "[", 
                RowBox[{"placednumbers", "=", 
                 RowBox[{
                  SuperscriptBox["size", "2"], "+", "1"}]}], "]"}]}], "]"}]}],
             "]"}], ",", " ", "v"}], "]"}]}], " ", "]"}]}], ";", 
      RowBox[{
       RowBox[{"reducewith", "[", "rule_", "]"}], " ", ":=", " ", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"t", "=", 
           RowBox[{"Sqrt", "[", 
            RowBox[{"Length", "[", "choices", "]"}], "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"choices", " ", "=", " ", 
           RowBox[{"rule", " ", "/@", " ", "choices"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"choices", "=", " ", 
           RowBox[{"Transpose", "[", 
            RowBox[{"rule", " ", "/@", " ", 
             RowBox[{"Transpose", "[", "choices", "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"choices", "=", " ", 
           RowBox[{"rule", " ", "/@", " ", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{"#", ",", "1"}], "]"}], "&"}], ")"}], " ", "/@", " ", 
             RowBox[{"Flatten", "[", 
              RowBox[{
               RowBox[{"Partition", "[", 
                RowBox[{"choices", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"t", ",", " ", "t"}], "}"}]}], "]"}], ",", " ", 
               "1"}], "]"}]}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"choices", "=", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"MapThread", "[", 
                RowBox[{"Join", ",", " ", "##"}], "]"}], "&"}], " ", "/@", 
              " ", 
              RowBox[{"Partition", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Partition", "[", 
                    RowBox[{"#", ",", " ", "t"}], "]"}], "&"}], ")"}], " ", "/@",
                  " ", "choices"}], ",", " ", "t"}], "]"}]}], ",", "1"}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"placednumbers", "\[NotEqual]", 
             RowBox[{"Count", "[", 
              RowBox[{"choices", ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"-", "2"}], "}"}]}], "]"}]}], ",", " ", 
            RowBox[{"Throw", "[", 
             RowBox[{"placednumbers", "=", 
              RowBox[{
               SuperscriptBox["size", "2"], "+", "1"}]}], "]"}]}], "]"}]}]}], 
        "]"}]}], ";", 
      RowBox[{
       RowBox[{"twins", "[", "v_", "]"}], " ", ":=", " ", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"z", "=", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"Split", "[", 
              RowBox[{"Sort", "[", 
               RowBox[{"Cases", "[", 
                RowBox[{"v", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"_", ",", "_"}], "}"}]}], "]"}], "]"}], "]"}], ",", 
             " ", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"a_", ",", " ", "a_"}], "}"}], "\[RuleDelayed]", 
              "a"}]}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"z", "==", 
            RowBox[{"{", "}"}]}], ",", " ", "v", ",", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"MemberQ", "[", 
                RowBox[{"z", ",", " ", "#"}], "]"}], ",", " ", "#", ",", " ", 
               RowBox[{"Complement", "[", 
                RowBox[{"#", ",", " ", 
                 RowBox[{"Flatten", "[", "z", "]"}]}], "]"}]}], "]"}], "&"}], 
            " ", "/@", " ", "v"}]}], "]"}]}], "]"}]}], ";", 
      RowBox[{"reducefromblocks", " ", ":=", " ", 
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"v", ",", "aux"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"aux", "=", 
           RowBox[{"Partition", "[", 
            RowBox[{
             RowBox[{"Range", "[", "size", "]"}], ",", " ", 
             RowBox[{"Sqrt", "[", "size", "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Do", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"v", " ", "=", " ", 
              RowBox[{"choices", "\[LeftDoubleBracket]", 
               RowBox[{"blockposition", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"1", ",", "1"}], "}"}], "+", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", "size", "]"}], 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"i", "-", "1"}], ",", " ", 
                    RowBox[{"j", "-", "1"}]}], "}"}]}]}], ",", " ", "size"}], 
                "]"}], "\[RightDoubleBracket]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"Do", "[", 
              RowBox[{
               RowBox[{"With", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"w", "=", 
                   RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    "v", "\[LeftDoubleBracket]", "k", 
                    "\[RightDoubleBracket]"}], "]"}], ",", " ", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"v", ",", " ", 
                    RowBox[{"{", "k", "}"}]}], "]"}], "]"}]}], "]"}]}], "}"}],
                  ",", "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"w", "\[NotEqual]", 
                    RowBox[{"{", "}"}]}], ",", 
                   RowBox[{
                    RowBox[{"choices", "\[LeftDoubleBracket]", 
                    RowBox[{"k", "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}], 
                    RowBox[{"Sqrt", "[", "size", "]"}]}]}], 
                    "\[RightDoubleBracket]"}], " ", "=", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Complement", "[", 
                    RowBox[{"#", ",", " ", "w"}], "]"}], "&"}], " ", "/@", 
                    " ", 
                    RowBox[{"choices", "\[LeftDoubleBracket]", 
                    RowBox[{"k", "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}], 
                    RowBox[{"Sqrt", "[", "size", "]"}]}]}], 
                    "\[RightDoubleBracket]"}]}]}]}], "]"}]}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"k", ",", "1", ",", 
                 RowBox[{"Sqrt", "[", "size", "]"}]}], "}"}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"v", "=", 
              RowBox[{"Transpose", "[", "v", "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"Do", "[", 
              RowBox[{
               RowBox[{"With", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"w", "=", 
                   RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    "v", "\[LeftDoubleBracket]", "k", 
                    "\[RightDoubleBracket]"}], "]"}], ",", " ", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"v", ",", " ", 
                    RowBox[{"{", "k", "}"}]}], "]"}], "]"}]}], "]"}]}], "}"}],
                  ",", "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"w", "\[NotEqual]", 
                    RowBox[{"{", "}"}]}], ",", 
                   RowBox[{
                    RowBox[{"choices", "\[LeftDoubleBracket]", 
                    RowBox[{"All", ",", 
                    RowBox[{"k", "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"j", "-", "1"}], ")"}], 
                    RowBox[{"Sqrt", "[", "size", "]"}]}]}]}], 
                    "\[RightDoubleBracket]"}], " ", "=", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Complement", "[", 
                    RowBox[{"#", ",", " ", "w"}], "]"}], "&"}], " ", "/@", 
                    " ", 
                    RowBox[{"choices", "\[LeftDoubleBracket]", 
                    RowBox[{"All", ",", 
                    RowBox[{"k", "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"j", "-", "1"}], ")"}], 
                    RowBox[{"Sqrt", "[", "size", "]"}]}]}]}], 
                    "\[RightDoubleBracket]"}]}]}]}], "]"}]}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"k", ",", "1", ",", 
                 RowBox[{"Sqrt", "[", "size", "]"}]}], "}"}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"choices", "\[LeftDoubleBracket]", 
               RowBox[{"blockposition", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"1", ",", "1"}], "}"}], "+", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", "size", "]"}], 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"i", "-", "1"}], ",", " ", 
                    RowBox[{"j", "-", "1"}]}], "}"}]}]}], ",", " ", "size"}], 
                "]"}], "\[RightDoubleBracket]"}], "=", 
              RowBox[{"Transpose", "[", "v", "]"}]}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", 
              RowBox[{"Sqrt", "[", "size", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"j", ",", "1", ",", 
              RowBox[{"Sqrt", "[", "size", "]"}]}], "}"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"placednumbers", "\[NotEqual]", 
             RowBox[{"Count", "[", 
              RowBox[{"choices", ",", 
               RowBox[{"{", "}"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"-", "2"}], "}"}]}], "]"}]}], ",", " ", 
            RowBox[{"Throw", "[", 
             RowBox[{"placednumbers", "=", 
              RowBox[{
               SuperscriptBox["size", "2"], "+", "1"}]}], "]"}]}], "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sudokusolver", "[", 
        RowBox[{"arg_", ",", " ", 
         RowBox[{"nsol", ":", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"_Integer", "|", "Infinity"}], ")"}], ":", "1"}]}], ",", 
         " ", 
         RowBox[{"printsplit", ":", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"True", "|", "False"}], ")"}], ":", "True"}]}], ",", " ", 
         RowBox[{"extra", ":", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
            "\"\<\>\"", "|", "\"\<diagonal\>\"", "|", "\"\<antidiagonal\>\"", 
             "|", "\"\<both\>\""}], ")"}], ":", "\"\<\>\""}]}]}], "]"}], " ", 
       ":=", " ", 
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "mat", ",", "size", ",", " ", "choices", ",", " ", "tobedone", ",", 
           " ", "result", ",", " ", "solutions", ",", " ", "placednumbers", 
           ",", " ", "z"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"mat", "=", " ", 
           RowBox[{"Which", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", "arg", "]"}], "===", "Grid"}], ",", " ", 
             RowBox[{"arg", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
             RowBox[{
              RowBox[{"Head", "[", "arg", "]"}], "===", "SparseArray"}], ",", 
             " ", 
             RowBox[{"Normal", "[", "arg", "]"}], ",", " ", "True", ",", " ", 
             "arg"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"size", "=", 
           RowBox[{"Length", "[", "mat", "]"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", "initialize", " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"choices", " ", "=", " ", 
           RowBox[{"Array", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Range", "[", "size", "]"}], " ", "&"}], " ", ",", " ", 
             RowBox[{"{", 
              RowBox[{"size", ",", " ", "size"}], "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"result", " ", "=", " ", 
           RowBox[{"Array", "[", 
            RowBox[{
             RowBox[{"0", " ", "&"}], " ", ",", " ", 
             RowBox[{"{", 
              RowBox[{"size", ",", " ", "size"}], "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"z", " ", "=", " ", 
           RowBox[{"Position", "[", 
            RowBox[{"mat", ",", " ", 
             RowBox[{"_Integer", "?", "Positive"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"placednumbers", "=", 
           RowBox[{"Length", "[", "z", "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"Catch", "[", 
           RowBox[{
            RowBox[{"MapThread", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"placenumber", "[", 
                RowBox[{"#1", ",", "#2", ",", "extra"}], "]"}], "&"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Extract", "[", 
                 RowBox[{"mat", ",", " ", "z"}], "]"}], ",", "z"}], "}"}]}], 
             "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"placednumbers", "\[NotEqual]", 
               RowBox[{"Count", "[", 
                RowBox[{"choices", ",", 
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"-", "2"}], "}"}]}], "]"}]}], ",", " ", 
              RowBox[{"placednumbers", "=", 
               RowBox[{
                RowBox[{"size", "^", "2"}], "+", "1"}]}]}], "]"}]}], "]"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"solutions", "=", 
           RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"tobedone", "=", " ", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"placednumbers", "\[LessEqual]", 
              SuperscriptBox["size", "2"]}], ",", 
             RowBox[{"{", "choices", "}"}], ",", " ", 
             RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"splitcounter", "=", "0"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", "solvepuzzle", " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"While", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"tobedone", "\[NotEqual]", 
              RowBox[{"{", "}"}]}], "&&", 
             RowBox[{
              RowBox[{"Length", "[", "solutions", "]"}], "<", "nsol"}]}], ",",
             "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"choices", "=", 
              RowBox[{"tobedone", "\[LeftDoubleBracket]", 
               RowBox[{"-", "1"}], "\[RightDoubleBracket]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"placednumbers", "=", 
              RowBox[{"Count", "[", 
               RowBox[{"choices", ",", " ", 
                RowBox[{"{", "}"}], ",", " ", 
                RowBox[{"{", 
                 RowBox[{"-", "2"}], "}"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"Catch", "[", 
              RowBox[{"reducewith", "[", "singlenumber", "]"}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"placednumbers", "\[LessEqual]", 
                SuperscriptBox["size", "2"]}], ",", " ", 
               RowBox[{"placednumbers", "=", 
                RowBox[{"Count", "[", 
                 RowBox[{"choices", ",", " ", 
                  RowBox[{"{", "}"}], ",", " ", 
                  RowBox[{"{", 
                   RowBox[{"-", "2"}], "}"}]}], "]"}]}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"tobedone", "=", 
              RowBox[{"Most", "[", "tobedone", "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"While", "[", 
              RowBox[{
               RowBox[{"placednumbers", "<", 
                SuperscriptBox["size", "2"]}], ",", "\[IndentingNewLine]", 
               RowBox[{"Catch", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"While", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"z", "=", 
                    RowBox[{"Position", "[", 
                    RowBox[{"choices", ",", 
                    RowBox[{"{", "_", "}"}]}], "]"}]}], ")"}], "\[NotEqual]", 
                    RowBox[{"{", "}"}]}], " ", "&&", " ", 
                    RowBox[{"placednumbers", "<", " ", 
                    SuperscriptBox["size", "2"]}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"placednumbers", "=", 
                    RowBox[{"placednumbers", "+", 
                    RowBox[{"Length", "[", "z", "]"}]}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"placenumber", "[", 
                    RowBox[{"#1", ",", "#2", ",", "extra"}], "]"}], "&"}], 
                    ",", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Extract", "[", 
                    RowBox[{"choices", ",", " ", "z"}], "]"}], "//", 
                    "Flatten"}], ",", "z"}], "}"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"reducewith", "[", "singlenumber", "]"}]}]}], 
                  "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"z", "=", "choices"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"reducewith", "[", "twins", "]"}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"z", "\[NotEqual]", "choices"}], ",", " ", 
                   RowBox[{"Throw", "[", 
                    RowBox[{"reducewith", "[", "singlenumber", "]"}], "]"}]}],
                   "]"}], ";", "\[IndentingNewLine]", "reducefromblocks", ";",
                  "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"z", "\[NotEqual]", "choices"}], ",", " ", 
                   RowBox[{"Throw", "[", 
                    RowBox[{"reducewith", "[", "singlenumber", "]"}], "]"}]}],
                   "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", "splitchoices", " ", "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"placednumbers", "<", 
                    SuperscriptBox["size", "2"]}], ",", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"splitcounter", "++"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"z", " ", "=", " ", 
                    RowBox[{"Min", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{"Length", ",", " ", "choices", ",", " ", 
                    RowBox[{"{", "2", "}"}]}], "]"}], " ", "/.", " ", 
                    RowBox[{"0", " ", "\[Rule]", " ", 
                    RowBox[{"size", "+", "1"}]}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"z", " ", "=", " ", 
                    RowBox[{"Position", "[", 
                    RowBox[{"choices", ",", " ", 
                    RowBox[{"_", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "#", "]"}], "\[Equal]", "z"}], 
                    "&"}], ")"}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"-", "2"}], "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"pos", "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"3", " ", "size"}]}], "}"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Do", "[", 
                    RowBox[{
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"m", "=", 
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"choices", "\[LeftDoubleBracket]", 
                    RowBox[{"z", "\[LeftDoubleBracket]", 
                    RowBox[{"i", ",", "1"}], "\[RightDoubleBracket]"}], 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"choices", "\[LeftDoubleBracket]", 
                    RowBox[{"All", ",", 
                    RowBox[{"z", "\[LeftDoubleBracket]", 
                    RowBox[{"i", ",", "2"}], "\[RightDoubleBracket]"}]}], 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"choices", "\[LeftDoubleBracket]", 
                    RowBox[{"blockposition", "[", 
                    RowBox[{
                    RowBox[{
                    "z", "\[LeftDoubleBracket]", "i", 
                    "\[RightDoubleBracket]"}], ",", "size"}], "]"}], 
                    "\[RightDoubleBracket]"}]}], "}"}], ",", " ", 
                    RowBox[{"{", "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"-", "2"}], "}"}]}], "]"}]}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"m", "<", 
                    RowBox[{
                    "pos", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], ",", " ", 
                    RowBox[{"pos", "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "z", "\[LeftDoubleBracket]", "i", 
                    "\[RightDoubleBracket]"}], ",", " ", "m"}], "}"}]}]}], 
                    "]"}]}], "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "1", ",", 
                    RowBox[{"Length", "[", "z", "]"}]}], "}"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"pos", "=", 
                    RowBox[{
                    "pos", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"AppendTo", "[", 
                    RowBox[{"tobedone", ",", " ", 
                    RowBox[{"ReplacePart", "[", 
                    RowBox[{"choices", ",", " ", 
                    RowBox[{"Rest", "[", 
                    RowBox[{"choices", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "pos", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", " ", 
                    RowBox[{
                    "pos", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                    "]"}], ",", " ", "pos"}], "]"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"choices", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "pos", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", " ", 
                    RowBox[{
                    "pos", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                    "=", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"choices", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "pos", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", " ", 
                    RowBox[{
                    "pos", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                    ",", " ", "1"}], "]"}]}]}]}], "\[IndentingNewLine]", 
                  "]"}]}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"placednumbers", "\[Equal]", 
                SuperscriptBox["size", "2"]}], ",", " ", 
               RowBox[{"AppendTo", "[", 
                RowBox[{"solutions", ",", " ", "result"}], "]"}]}], "]"}]}]}],
            "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{"printsplit", ",", " ", 
              RowBox[{"Print", "[", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"splitcounter", "\[Equal]", "0"}], ",", " ", 
                 "\"\<No backtracking used.\>\"", ",", 
                 RowBox[{"\"\<Looked at \>\"", "<>", 
                  RowBox[{"ToString", "[", "splitcounter", "]"}], "<>", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"splitcounter", "\[Equal]", "1"}], ",", " ", 
                    "\"\< situation.\>\"", ",", " ", "\"\< situations.\>\""}],
                    "]"}]}]}], "]"}], "]"}]}], "]"}], ";"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"nsol", "\[Equal]", "1"}], "&&", 
             RowBox[{"solutions", "\[NotEqual]", 
              RowBox[{"{", "}"}]}]}], ",", 
            RowBox[{
            "solutions", "\[LeftDoubleBracket]", "1", 
             "\[RightDoubleBracket]"}], ",", "  ", "solutions"}], "]"}]}]}], 
        "]"}]}], ";", 
      RowBox[{
       RowBox[{"check", "[", "attempt_", "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"n", "=", 
           RowBox[{"Length", "[", "attempt", "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"And", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"And", "@@", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Sort", "[", 
                RowBox[{"attempt", "[", 
                 RowBox[{"[", "k", "]"}], "]"}], "]"}], "\[Equal]", 
               RowBox[{"Range", "[", "n", "]"}]}], ",", 
              RowBox[{"{", 
               RowBox[{"k", ",", "n"}], "}"}]}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"And", "@@", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Sort", "[", 
                RowBox[{"attempt", "[", 
                 RowBox[{"[", 
                  RowBox[{"All", ",", "k"}], "]"}], "]"}], "]"}], "\[Equal]", 
               RowBox[{"Range", "[", "n", "]"}]}], ",", 
              RowBox[{"{", 
               RowBox[{"k", ",", "n"}], "}"}]}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"And", "@@", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Sort", "[", 
                 RowBox[{"Flatten", "[", 
                  RowBox[{"Table", "[", 
                   RowBox[{
                    RowBox[{"attempt", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"i", "+", "ii"}], ",", 
                    RowBox[{"j", "+", "jj"}]}], "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "1", ",", 
                    SqrtBox["n"]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"j", ",", "1", ",", 
                    SqrtBox["n"]}], "}"}]}], "]"}], "]"}], "]"}], "\[Equal]", 
                RowBox[{"Range", "[", "n", "]"}]}], ",", 
               RowBox[{"{", 
                RowBox[{"ii", ",", 
                 RowBox[{"Range", "[", 
                  RowBox[{"0", ",", 
                   RowBox[{"n", "-", "1"}], ",", 
                   SqrtBox["n"]}], "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"jj", ",", 
                 RowBox[{"Range", "[", 
                  RowBox[{"0", ",", 
                   RowBox[{"n", "-", "1"}], ",", 
                   SqrtBox["n"]}], "]"}]}], "}"}]}], "]"}], "]"}]}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sudokuForm", "[", "mat_", "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"t", "=", 
            RowBox[{"Length", "[", "mat", "]"}]}], ",", "styles"}], "}"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"styles", "=", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Thickness", "[", "2", "]"}], ",", 
              RowBox[{"Sequence", "@@", 
               RowBox[{"Table", "[", 
                RowBox[{"True", ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", "t", "]"}], "-", "1"}], "}"}]}], 
                "]"}]}]}], "}"}], "}"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"Style", "[", 
           RowBox[{
            RowBox[{"Grid", "[", 
             RowBox[{"mat", ",", 
              RowBox[{"Dividers", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"styles", ",", "styles"}], "}"}]}], ",", 
              RowBox[{"Background", " ", "\[Rule]", " ", 
               RowBox[{"{", 
                RowBox[{"Automatic", ",", "Automatic", ",", "\n", 
                 RowBox[{"Flatten", "[", 
                  RowBox[{"Table", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"i", ",", " ", "j"}], "}"}], " ", "\[Rule]", " ", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"EvenQ", "[", 
                    RowBox[{"Plus", " ", "@@", " ", 
                    RowBox[{"Floor", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"i", " ", "-", " ", "1"}], ",", " ", 
                    RowBox[{"j", " ", "-", " ", "1"}]}], "}"}], "/", 
                    SqrtBox["t"]}], "]"}]}], "]"}], ",", " ", "\n", 
                    RowBox[{"Darker", "[", 
                    RowBox[{"White", ",", ".3"}], "]"}], ",", " ", "White"}], 
                    "]"}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", " ", "t"}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"j", ",", " ", "t"}], "}"}]}], "]"}], "]"}]}], 
                "}"}]}], ",", 
              RowBox[{"ItemSize", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"1.8", ",", "1.8"}], "}"}]}]}], "]"}], ",", "14", 
            ",", "\"\<Label\>\""}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}],
       ";"}], "\[IndentingNewLine]", "}"}]}], ",", 
   RowBox[{"AutorunSequencing", "\[Rule]", 
    RowBox[{"{", "1", "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.35696210375764*^9, {3.388826981322404*^9, 3.388826984024404*^9}, {
   3.388827025892139*^9, 3.388827032698255*^9}, {3.3953980028679943`*^9, 
   3.3953980045711193`*^9}, {3.3953980960086193`*^9, 
   3.3953980974148693`*^9}, {3.3953981355398693`*^9, 
   3.3953982548367443`*^9}, {3.3953990400554943`*^9, 
   3.3953990719304943`*^9}, {3.3953991431804943`*^9, 
   3.3953991538367443`*^9}, {3.3954001276492443`*^9, 
   3.3954001670398693`*^9}, {3.3954010052067304`*^9, 3.395401007862794*^9}, {
   3.3955081423631644`*^9, 3.3955081492694144`*^9}, {3.3955708343748846`*^9, 
   3.3955708537186346`*^9}, {3.3955709128123846`*^9, 3.395570919765509*^9}, {
   3.3955710174686346`*^9, 3.3955710346873846`*^9}, {3.3955711083748846`*^9, 
   3.395571163265509*^9}, {3.395571205453009*^9, 3.395571265234259*^9}, {
   3.395572904984259*^9, 3.395572950859259*^9}, {3.395573002828009*^9, 
   3.3955730095623846`*^9}, {3.3955765912498846`*^9, 3.395576605890509*^9}, {
   3.395576966484259*^9, 3.3955769998748846`*^9}, {3.3955770580311346`*^9, 
   3.395577058796759*^9}, {3.395577126109259*^9, 3.3955771294686346`*^9}, {
   3.395577402546759*^9, 3.395577541984259*^9}, {3.4458013493858614`*^9, 
   3.445801349588985*^9}, {3.445805175062643*^9, 3.4458051752345266`*^9}},
 CellID->925890343],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`difficulty$$ = 40, $CellContext`sol$$ = " ",
     Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`difficulty$$], 40}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 
      11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 
      29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 
      47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60}}, {{
       Hold[$CellContext`sol$$], " "}}}, Typeset`size$$ = {
    588., {182., 187.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`difficulty$128109$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`difficulty$$ = 40, $CellContext`sol$$ = 
        " "}, "ControllerVariables" :> {
        Hold[$CellContext`difficulty$$, $CellContext`difficulty$128109$$, 0]},
       "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      DynamicModule[{$CellContext`n = 9, $CellContext`color = 
         RGBColor[
          0.1, 0.2, 
           0.8], $CellContext`seed, $CellContext`solution, \
$CellContext`fields, $CellContext`game, $CellContext`pos, $CellContext`x1, \
$CellContext`x2, $CellContext`x3, $CellContext`x4, $CellContext`x5, \
$CellContext`x6, $CellContext`x7, $CellContext`x8, $CellContext`x9, \
$CellContext`x10, $CellContext`x11, $CellContext`x12, $CellContext`x13, \
$CellContext`x14, $CellContext`x15, $CellContext`x16, $CellContext`x17, \
$CellContext`x18, $CellContext`x19, $CellContext`x20, $CellContext`x21, \
$CellContext`x22, $CellContext`x23, $CellContext`x24, $CellContext`x25, \
$CellContext`x26, $CellContext`x27, $CellContext`x28, $CellContext`x29, \
$CellContext`x30, $CellContext`x31, $CellContext`x32, $CellContext`x33, \
$CellContext`x34, $CellContext`x35, $CellContext`x36, $CellContext`x37, \
$CellContext`x38, $CellContext`x39, $CellContext`x40, $CellContext`x41, \
$CellContext`x42, $CellContext`x43, $CellContext`x44, $CellContext`x45, \
$CellContext`x46, $CellContext`x47, $CellContext`x48, $CellContext`x49, \
$CellContext`x50, $CellContext`x51, $CellContext`x52, $CellContext`x53, \
$CellContext`x54, $CellContext`x55, $CellContext`x56, $CellContext`x57, \
$CellContext`x58, $CellContext`x59, $CellContext`x60}, $CellContext`seed = 
         ReplacePart[
           Table["", {$CellContext`n}, {$CellContext`n}], 
           Thread[RandomSample[
              Tuples[
               Range[$CellContext`n], 2], $CellContext`n] -> 
            Range[$CellContext`n]]]; $CellContext`solution = \
$CellContext`sudokusolver[$CellContext`seed]; $CellContext`fields = 
         Take[{$CellContext`x1, $CellContext`x2, $CellContext`x3, \
$CellContext`x4, $CellContext`x5, $CellContext`x6, $CellContext`x7, \
$CellContext`x8, $CellContext`x9, $CellContext`x10, $CellContext`x11, \
$CellContext`x12, $CellContext`x13, $CellContext`x14, $CellContext`x15, \
$CellContext`x16, $CellContext`x17, $CellContext`x18, $CellContext`x19, \
$CellContext`x20, $CellContext`x21, $CellContext`x22, $CellContext`x23, \
$CellContext`x24, $CellContext`x25, $CellContext`x26, $CellContext`x27, \
$CellContext`x28, $CellContext`x29, $CellContext`x30, $CellContext`x31, \
$CellContext`x32, $CellContext`x33, $CellContext`x34, $CellContext`x35, \
$CellContext`x36, $CellContext`x37, $CellContext`x38, $CellContext`x39, \
$CellContext`x40, $CellContext`x41, $CellContext`x42, $CellContext`x43, \
$CellContext`x44, $CellContext`x45, $CellContext`x46, $CellContext`x47, \
$CellContext`x48, $CellContext`x49, $CellContext`x50, $CellContext`x51, \
$CellContext`x52, $CellContext`x53, $CellContext`x54, $CellContext`x55, \
$CellContext`x56, $CellContext`x57, $CellContext`x58, $CellContext`x59, \
$CellContext`x60}, $CellContext`difficulty$$]; $CellContext`game = 
         ReplacePart[$CellContext`solution, 
           Thread[($CellContext`pos = RandomSample[
               Tuples[
                Range[$CellContext`n], 2], $CellContext`difficulty$$]) -> 
            Map[PopupMenu[
               Dynamic[#], 
               Prepend[
                Range[9], "   "], BaseStyle -> {$CellContext`color, 14}, 
               Appearance -> None, FrameMargins -> 
               0]& , $CellContext`fields]]]; Deploy[
          Grid[{{
             Button[
             "new puzzle", $CellContext`sol$$ = " "; $CellContext`seed = 
               ReplacePart[
                 Table["", {$CellContext`n}, {$CellContext`n}], 
                 Thread[RandomSample[
                    Tuples[
                    Range[$CellContext`n], 2], $CellContext`n] -> 
                  Range[$CellContext`n]]]; $CellContext`solution = \
$CellContext`sudokusolver[$CellContext`seed]; 
              Clear[$CellContext`x1, $CellContext`x2, $CellContext`x3, \
$CellContext`x4, $CellContext`x5, $CellContext`x6, $CellContext`x7, \
$CellContext`x8, $CellContext`x9, $CellContext`x10, $CellContext`x11, \
$CellContext`x12, $CellContext`x13, $CellContext`x14, $CellContext`x15, \
$CellContext`x16, $CellContext`x17, $CellContext`x18, $CellContext`x19, \
$CellContext`x20, $CellContext`x21, $CellContext`x22, $CellContext`x23, \
$CellContext`x24, $CellContext`x25, $CellContext`x26, $CellContext`x27, \
$CellContext`x28, $CellContext`x29, $CellContext`x30, $CellContext`x31, \
$CellContext`x32, $CellContext`x33, $CellContext`x34, $CellContext`x35, \
$CellContext`x36, $CellContext`x37, $CellContext`x38, $CellContext`x39, \
$CellContext`x40, $CellContext`x41, $CellContext`x42, $CellContext`x43, \
$CellContext`x44, $CellContext`x45, $CellContext`x46, $CellContext`x47, \
$CellContext`x48, $CellContext`x49, $CellContext`x50, $CellContext`x51, \
$CellContext`x52, $CellContext`x53, $CellContext`x54, $CellContext`x55]; \
$CellContext`fields = 
               Take[{$CellContext`x1, $CellContext`x2, $CellContext`x3, \
$CellContext`x4, $CellContext`x5, $CellContext`x6, $CellContext`x7, \
$CellContext`x8, $CellContext`x9, $CellContext`x10, $CellContext`x11, \
$CellContext`x12, $CellContext`x13, $CellContext`x14, $CellContext`x15, \
$CellContext`x16, $CellContext`x17, $CellContext`x18, $CellContext`x19, \
$CellContext`x20, $CellContext`x21, $CellContext`x22, $CellContext`x23, \
$CellContext`x24, $CellContext`x25, $CellContext`x26, $CellContext`x27, \
$CellContext`x28, $CellContext`x29, $CellContext`x30, $CellContext`x31, \
$CellContext`x32, $CellContext`x33, $CellContext`x34, $CellContext`x35, \
$CellContext`x36, $CellContext`x37, $CellContext`x38, $CellContext`x39, \
$CellContext`x40, $CellContext`x41, $CellContext`x42, $CellContext`x43, \
$CellContext`x44, $CellContext`x45, $CellContext`x46, $CellContext`x47, \
$CellContext`x48, $CellContext`x49, $CellContext`x50, $CellContext`x51, \
$CellContext`x52, $CellContext`x53, $CellContext`x54, $CellContext`x55, \
$CellContext`x56, $CellContext`x57, $CellContext`x58, $CellContext`x59, \
$CellContext`x60}, $CellContext`difficulty$$]; $CellContext`game = 
               ReplacePart[$CellContext`solution, 
                 Thread[($CellContext`pos = RandomSample[
                    Tuples[
                    Range[$CellContext`n], 2], $CellContext`difficulty$$]) -> 
                  Map[PopupMenu[
                    Dynamic[#], 
                    Prepend[
                    Range[9], "   "], BaseStyle -> {$CellContext`color, 14}, 
                    Appearance -> None, FrameMargins -> 
                    0]& , $CellContext`fields]]]; Null], 
             Button["check", 
              If[
               $CellContext`check[
                ReplacePart[$CellContext`game, 
                 
                 Thread[$CellContext`pos -> $CellContext`fields]]], \
$CellContext`sol$$ = 
               Style["Congratulations!", 14, "Label"], $CellContext`sol$$ = 
               Style["Nope, try again", 14, "Label"]]]}, {
             Dynamic[
              $CellContext`sudokuForm[$CellContext`game]], 
             Dynamic[$CellContext`sol$$]}, {
             Button[
             "show solution", $CellContext`sol$$ = $CellContext`sudokuForm[
                ReplacePart[$CellContext`solution, 
                 Thread[$CellContext`pos -> Map[Style[
                    Part[$CellContext`solution, 
                    Apply[
                    Sequence, #]], $CellContext`color]& , \
$CellContext`pos]]]]], 
             Button["hide solution", $CellContext`sol$$ = " "]}}, 
           ItemSize -> {{23, 23}, {2, 20, 2}}]]], 
      "Specifications" :> {{{$CellContext`difficulty$$, 40}, {1, 2, 3, 4, 5, 
         6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 
         24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 
         41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 
         58, 59, 60}}, {{$CellContext`sol$$, " "}, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`difficulty$$}, 
        AutorunSequencing -> {1}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{635., {226., 231.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`blockposition[{
           Pattern[$CellContext`i, 
            Blank[]], 
           Pattern[$CellContext`j, 
            Blank[]]}, 
          Pattern[$CellContext`size, 
           
           Blank[]]] := ($CellContext`blockposition[{$CellContext`i, \
$CellContext`j}, $CellContext`size] = Apply[Sequence, 
           Part[
            Partition[
             Range[$CellContext`size], 
             Sqrt[$CellContext`size]], 
            Map[
            Ceiling, {$CellContext`i, $CellContext`j}/
             Sqrt[$CellContext`size]]]]); $CellContext`placenumber[
          Pattern[$CellContext`n, 
           Blank[]], {
           Pattern[$CellContext`i, 
            Blank[]], 
           Pattern[$CellContext`j, 
            Blank[]]}, 
          Optional[
           Pattern[$CellContext`extra, 
            Blank[String]], ""]] := 
        Block[{$CellContext`size = Length[$CellContext`choices]}, 
          If[
           MemberQ[
            
            Part[$CellContext`choices, $CellContext`i, $CellContext`j], \
$CellContext`n], 
           Part[$CellContext`choices, $CellContext`i, $CellContext`j] = {}; 
           Part[$CellContext`choices, $CellContext`i] = 
            Map[DeleteCases[#, $CellContext`n]& , 
              Part[$CellContext`choices, $CellContext`i]]; 
           Part[$CellContext`choices, All, $CellContext`j] = 
            Map[DeleteCases[#, $CellContext`n]& , 
              Part[$CellContext`choices, All, $CellContext`j]]; 
           Part[$CellContext`choices, 
              $CellContext`blockposition[{$CellContext`i, $CellContext`j}, \
$CellContext`size]] = Map[DeleteCases[#, $CellContext`n]& , 
              Part[$CellContext`choices, 
               $CellContext`blockposition[{$CellContext`i, $CellContext`j}, \
$CellContext`size]], {2}]; If[$CellContext`extra != "", If[
               And[
                
                Or[$CellContext`extra == "both", $CellContext`extra == 
                 "diagonal"], $CellContext`i == $CellContext`j], \
$CellContext`choices = 
               MapAt[DeleteCases[#, $CellContext`n]& , $CellContext`choices, 
                 
                 Table[{$CellContext`k, $CellContext`k}, {$CellContext`k, 
                   1, $CellContext`size}]]]; If[
               And[
                
                Or[$CellContext`extra == "both", $CellContext`extra == 
                 "antidiagonal"], $CellContext`i + $CellContext`j == \
$CellContext`size + 1], $CellContext`choices = 
               MapAt[DeleteCases[#, $CellContext`n]& , $CellContext`choices, 
                 
                 Table[{$CellContext`k, $CellContext`size + 
                   1 - $CellContext`k}, {$CellContext`k, 
                   1, $CellContext`size}]]]]; 
           Part[$CellContext`result, $CellContext`i, $CellContext`j] = \
$CellContext`n, 
           
           Throw[$CellContext`placednumbers = $CellContext`size^2 + 
             1]]]; $CellContext`singlenumber[
          Pattern[$CellContext`v, 
           Blank[]]] := With[{$CellContext`u = Flatten[
             Cases[
              Split[
               Sort[
                Flatten[$CellContext`v]]], {
               Blank[]}]]}, 
          If[$CellContext`u != {}, 
           With[{$CellContext`w = Part[
               Map[Position[$CellContext`v, #]& , $CellContext`u], All, 1, 
               1]}, 
            If[
             Apply[Unequal, $CellContext`w], 
             ReplacePart[$CellContext`v, 
              Map[List, $CellContext`u], 
              Map[List, $CellContext`w], 
              Map[List, 
               Range[
                Length[$CellContext`u]]]], 
             
             Throw[$CellContext`placednumbers = $CellContext`size^2 + 
               1]]], $CellContext`v]]; $CellContext`reducewith[
          Pattern[$CellContext`rule, 
           Blank[]]] := With[{$CellContext`t = Sqrt[
             Length[$CellContext`choices]]}, $CellContext`choices = 
           Map[$CellContext`rule, $CellContext`choices]; $CellContext`choices = 
           Transpose[
             Map[$CellContext`rule, 
              Transpose[$CellContext`choices]]]; $CellContext`choices = 
           Map[$CellContext`rule, 
             Map[Flatten[#, 1]& , 
              Flatten[
               
               Partition[$CellContext`choices, {$CellContext`t, \
$CellContext`t}], 1]]]; $CellContext`choices = Flatten[
             Map[MapThread[Join, 
               SlotSequence[1]]& , 
              Partition[
               Map[
               Partition[#, $CellContext`t]& , $CellContext`choices], \
$CellContext`t]], 1]; 
          If[$CellContext`placednumbers != 
            Count[$CellContext`choices, {}, {-2}], 
            Throw[$CellContext`placednumbers = $CellContext`size^2 + 
              1]]]; $CellContext`twins[
          Pattern[$CellContext`v, 
           Blank[]]] := With[{$CellContext`z = Cases[
             Split[
              Sort[
               Cases[$CellContext`v, {
                 Blank[], 
                 Blank[]}]]], {
               Pattern[$CellContext`a, 
                Blank[]], 
               Pattern[$CellContext`a, 
                Blank[]]} :> $CellContext`a]}, 
          If[$CellContext`z == {}, $CellContext`v, 
           Map[If[
             MemberQ[$CellContext`z, #], #, 
             Complement[#, 
              
              Flatten[$CellContext`z]]]& , $CellContext`v]]]; \
$CellContext`reducefromblocks := 
        Block[{$CellContext`v, $CellContext`aux}, $CellContext`aux = Partition[
             Range[$CellContext`size], 
             Sqrt[$CellContext`size]]; 
          Do[$CellContext`v = Part[$CellContext`choices, 
               $CellContext`blockposition[{1, 1} + 
                Sqrt[$CellContext`size] {$CellContext`i - 1, $CellContext`j - 
                   1}, $CellContext`size]]; Do[
              With[{$CellContext`w = Complement[
                  Flatten[
                   Part[$CellContext`v, $CellContext`k]], 
                  Flatten[
                   Drop[$CellContext`v, {$CellContext`k}]]]}, 
               
               If[$CellContext`w != {}, 
                Part[$CellContext`choices, $CellContext`k + ($CellContext`i - 
                    1) Sqrt[$CellContext`size]] = 
                Map[Complement[#, $CellContext`w]& , 
                  
                  Part[$CellContext`choices, $CellContext`k + ($CellContext`i - 
                    1) Sqrt[$CellContext`size]]]]], {$CellContext`k, 1, 
               Sqrt[$CellContext`size]}]; $CellContext`v = 
             Transpose[$CellContext`v]; Do[
              With[{$CellContext`w = Complement[
                  Flatten[
                   Part[$CellContext`v, $CellContext`k]], 
                  Flatten[
                   Drop[$CellContext`v, {$CellContext`k}]]]}, 
               
               If[$CellContext`w != {}, 
                Part[$CellContext`choices, 
                  All, $CellContext`k + ($CellContext`j - 1) 
                   Sqrt[$CellContext`size]] = 
                Map[Complement[#, $CellContext`w]& , 
                  
                  Part[$CellContext`choices, 
                   All, $CellContext`k + ($CellContext`j - 1) 
                    Sqrt[$CellContext`size]]]]], {$CellContext`k, 1, 
               Sqrt[$CellContext`size]}]; Part[$CellContext`choices, 
               $CellContext`blockposition[{1, 1} + 
                Sqrt[$CellContext`size] {$CellContext`i - 1, $CellContext`j - 
                   1}, $CellContext`size]] = 
             Transpose[$CellContext`v], {$CellContext`i, 1, 
             Sqrt[$CellContext`size]}, {$CellContext`j, 1, 
             Sqrt[$CellContext`size]}]; 
          If[$CellContext`placednumbers != 
            Count[$CellContext`choices, {}, {-2}], 
            
            Throw[$CellContext`placednumbers = $CellContext`size^2 + 
              1]]]; $CellContext`sudokusolver[
          Pattern[$CellContext`arg, 
           Blank[]], 
          Optional[
           Pattern[$CellContext`nsol, 
            Alternatives[
             Blank[Integer], Infinity]], 1], 
          Optional[
           Pattern[$CellContext`printsplit, 
            Alternatives[True, False]], True], 
          Optional[
           Pattern[$CellContext`extra, 
            Alternatives["", "diagonal", "antidiagonal", "both"]], ""]] := 
        Block[{$CellContext`mat, $CellContext`size, $CellContext`choices, \
$CellContext`tobedone, $CellContext`result, $CellContext`solutions, \
$CellContext`placednumbers, $CellContext`z}, $CellContext`mat = 
           Which[Head[$CellContext`arg] === Grid, 
             Part[$CellContext`arg, 1], Head[$CellContext`arg] === 
             SparseArray, 
             Normal[$CellContext`arg], 
             True, $CellContext`arg]; $CellContext`size = 
           Length[$CellContext`mat]; $CellContext`choices = 
           Array[Range[$CellContext`size]& , {$CellContext`size, \
$CellContext`size}]; $CellContext`result = 
           Array[0& , {$CellContext`size, $CellContext`size}]; $CellContext`z = 
           Position[$CellContext`mat, 
             PatternTest[
              Blank[Integer], Positive]]; $CellContext`placednumbers = 
           Length[$CellContext`z]; 
          Catch[MapThread[$CellContext`placenumber[#, #2, $CellContext`extra]& \
, {
               Extract[$CellContext`mat, $CellContext`z], $CellContext`z}]; 
            If[$CellContext`placednumbers != 
              Count[$CellContext`choices, {}, {-2}], \
$CellContext`placednumbers = $CellContext`size^2 + 
               1]]; $CellContext`solutions = {}; $CellContext`tobedone = 
           If[$CellContext`placednumbers <= $CellContext`size^2, \
{$CellContext`choices}, {}]; $CellContext`splitcounter = 0; While[
            
            And[$CellContext`tobedone != {}, 
             Length[$CellContext`solutions] < $CellContext`nsol], \
$CellContext`choices = 
             Part[$CellContext`tobedone, -1]; $CellContext`placednumbers = 
             Count[$CellContext`choices, {}, {-2}]; Catch[
              $CellContext`reducewith[$CellContext`singlenumber]]; 
            If[$CellContext`placednumbers <= $CellContext`size^2, \
$CellContext`placednumbers = 
              Count[$CellContext`choices, {}, {-2}]]; $CellContext`tobedone = 
             Most[$CellContext`tobedone]; 
            While[$CellContext`placednumbers < $CellContext`size^2, 
              Catch[While[
                 And[($CellContext`z = Position[$CellContext`choices, {
                    
                    Blank[]}]) != {}, $CellContext`placednumbers < \
$CellContext`size^2], $CellContext`placednumbers = $CellContext`placednumbers + 
                   Length[$CellContext`z]; 
                 MapThread[$CellContext`placenumber[#, #2, \
$CellContext`extra]& , {
                    Flatten[
                    
                    Extract[$CellContext`choices, $CellContext`z]], \
$CellContext`z}]; $CellContext`reducewith[$CellContext`singlenumber]]; \
$CellContext`z = $CellContext`choices; \
$CellContext`reducewith[$CellContext`twins]; 
               If[$CellContext`z != $CellContext`choices, 
                 Throw[
                  $CellContext`reducewith[$CellContext`singlenumber]]]; \
$CellContext`reducefromblocks; If[$CellContext`z != $CellContext`choices, 
                 Throw[
                  $CellContext`reducewith[$CellContext`singlenumber]]]; 
               If[$CellContext`placednumbers < $CellContext`size^2, 
                 Increment[$CellContext`splitcounter]; $CellContext`z = Min[
                    ReplaceAll[
                    Map[Length, $CellContext`choices, {2}], 
                    0 -> $CellContext`size + 1]]; $CellContext`z = 
                  Position[$CellContext`choices, 
                    PatternTest[
                    Blank[], 
                    Length[#] == $CellContext`z& ], {-2}]; $CellContext`pos = \
{{0, 0}, 3 $CellContext`size}; Do[
                   With[{$CellContext`m = Count[{
                    Part[$CellContext`choices, 
                    Part[$CellContext`z, $CellContext`i, 1]], 
                    Part[$CellContext`choices, All, 
                    Part[$CellContext`z, $CellContext`i, 2]], 
                    Part[$CellContext`choices, 
                    $CellContext`blockposition[
                    
                    Part[$CellContext`z, $CellContext`i], \
$CellContext`size]]}, {}, {-2}]}, 
                    
                    If[$CellContext`m < 
                    Part[$CellContext`pos, 2], $CellContext`pos = {
                    
                    Part[$CellContext`z, $CellContext`i], $CellContext`m}]], \
{$CellContext`i, 1, 
                    Length[$CellContext`z]}]; $CellContext`pos = 
                  Part[$CellContext`pos, 1]; AppendTo[$CellContext`tobedone, 
                   ReplacePart[$CellContext`choices, 
                    Rest[
                    Part[$CellContext`choices, 
                    Part[$CellContext`pos, 1], 
                    Part[$CellContext`pos, 2]]], $CellContext`pos]]; 
                 Part[$CellContext`choices, 
                    Part[$CellContext`pos, 1], 
                    Part[$CellContext`pos, 2]] = Take[
                    Part[$CellContext`choices, 
                    Part[$CellContext`pos, 1], 
                    Part[$CellContext`pos, 2]], 1]]]]; 
            If[$CellContext`placednumbers == $CellContext`size^2, 
              AppendTo[$CellContext`solutions, $CellContext`result]]]; If[
            And[$CellContext`nsol == 1, $CellContext`solutions != {}], 
            
            Part[$CellContext`solutions, 
             1], $CellContext`solutions]]; $CellContext`check[
          Pattern[$CellContext`attempt, 
           Blank[]]] := 
        Module[{$CellContext`n = Length[$CellContext`attempt]}, 
          And[
           Apply[And, 
            Table[Sort[
               Part[$CellContext`attempt, $CellContext`k]] == 
             Range[$CellContext`n], {$CellContext`k, $CellContext`n}]], 
           Apply[And, 
            Table[Sort[
               Part[$CellContext`attempt, All, $CellContext`k]] == 
             Range[$CellContext`n], {$CellContext`k, $CellContext`n}]], 
           Apply[And, 
            Flatten[
             Table[Sort[
                Flatten[
                 Table[
                  
                  Part[$CellContext`attempt, $CellContext`i + \
$CellContext`ii, $CellContext`j + $CellContext`jj], {$CellContext`i, 
                   1, $CellContext`n^Rational[1, 2]}, {$CellContext`j, 
                   1, $CellContext`n^Rational[1, 2]}]]] == 
              Range[$CellContext`n], {$CellContext`ii, 
               Range[
               0, $CellContext`n - 1, $CellContext`n^
                Rational[1, 2]]}, {$CellContext`jj, 
               Range[
               0, $CellContext`n - 1, $CellContext`n^
                Rational[1, 2]]}]]]]]; $CellContext`sudokuForm[
          Pattern[$CellContext`mat, 
           Blank[]]] := 
        Module[{$CellContext`t = 
           Length[$CellContext`mat], $CellContext`styles}, \
$CellContext`styles = {{
              Thickness[2], 
              Apply[Sequence, 
               Table[True, {Sqrt[$CellContext`t] - 1}]]}}; Style[
            
            Grid[$CellContext`mat, 
             Dividers -> {$CellContext`styles, $CellContext`styles}, 
             Background -> {Automatic, Automatic, 
               Flatten[
                Table[{$CellContext`i, $CellContext`j} -> If[
                   EvenQ[
                    Apply[Plus, 
                    
                    Floor[{$CellContext`i - 1, $CellContext`j - 
                    1}/$CellContext`t^Rational[1, 2]]]], 
                   Darker[White, 0.3], 
                   White], {$CellContext`i, $CellContext`t}, {$CellContext`j, \
$CellContext`t}]]}, ItemSize -> {1.8, 1.8}], 14, "Label"]]; Null}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->504460853]
}, {2}]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateCaptionSection"],

Cell["\<\
This is a playable sudoku game. The purpose of the game is to get each row, \
column, and 3\[Times]3 square to contain the numbers 1 through 9 with no \
duplicates. The level of difficulty determines how many blank squares appear \
in the puzzle. Click any blank square and select a value for that square from \
the popup menu. Check your solution with the \"check\" button. You can peek \
at a solution for the puzzle at any time. Click the \"new puzzle\" button to \
generate a new puzzle. Note that when the difficulty level is high, it is \
possible that more than one correct solution exists for a puzzle. Only one \
correct solution will be shown, but the \"check\" button will verify a \
correct solution even if it differs from the solution shown.\
\>", "ManipulateCaption",
 CellChangeTimes->{
  3.35696210375764*^9, {3.389003179021188*^9, 3.389003476316484*^9}, {
   3.389003517936996*^9, 3.389003528620429*^9}, {3.3954215641565943`*^9, 
   3.3954215755472193`*^9}, {3.3954899187551794`*^9, 
   3.3954899250364294`*^9}, {3.3954900457239294`*^9, 
   3.3954900685364294`*^9}, {3.3955054467671556`*^9, 3.39550547534272*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ThumbnailSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`difficulty$$ = 40, $CellContext`sol$$ = 
    Style[
     Grid[{{
        Style[1, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[2, 
         RGBColor[0.1, 0.2, 0.8]], 4, 
        Style[3, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[9, 
         RGBColor[0.1, 0.2, 0.8]], 5, 
        Style[7, 
         RGBColor[0.1, 0.2, 0.8]], 8, 6}, {6, 3, 9, 8, 
        Style[7, 
         RGBColor[0.1, 0.2, 0.8]], 1, 
        Style[2, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[4, 
         RGBColor[0.1, 0.2, 0.8]], 5}, {7, 
        Style[8, 
         RGBColor[0.1, 0.2, 0.8]], 5, 6, 
        Style[4, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[2, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[9, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[3, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[1, 
         RGBColor[0.1, 0.2, 0.8]]}, {8, 
        Style[4, 
         RGBColor[0.1, 0.2, 0.8]], 3, 2, 5, 
        Style[9, 
         RGBColor[0.1, 0.2, 0.8]], 1, 
        Style[6, 
         RGBColor[0.1, 0.2, 0.8]], 7}, {
        Style[5, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[9, 
         RGBColor[0.1, 0.2, 0.8]], 1, 
        Style[7, 
         RGBColor[0.1, 0.2, 0.8]], 6, 8, 
        Style[4, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[2, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[3, 
         RGBColor[0.1, 0.2, 0.8]]}, {
        Style[2, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[7, 
         RGBColor[0.1, 0.2, 0.8]], 6, 
        Style[1, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[3, 
         RGBColor[0.1, 0.2, 0.8]], 4, 5, 9, 8}, {
        Style[4, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[1, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[8, 
         RGBColor[0.1, 0.2, 0.8]], 5, 
        Style[2, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[6, 
         RGBColor[0.1, 0.2, 0.8]], 3, 7, 
        Style[9, 
         RGBColor[0.1, 0.2, 0.8]]}, {3, 
        Style[5, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[2, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[9, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[8, 
         RGBColor[0.1, 0.2, 0.8]], 7, 
        Style[6, 
         RGBColor[0.1, 0.2, 0.8]], 1, 4}, {
        Style[9, 
         RGBColor[0.1, 0.2, 0.8]], 6, 
        Style[7, 
         RGBColor[0.1, 0.2, 0.8]], 4, 1, 3, 8, 5, 2}}, Dividers -> {{{
          Thickness[2], True, True}}, {{
          Thickness[2], True, True}}}, 
      Background -> {
       Automatic, 
        Automatic, {{1, 1} -> RGBColor[0.7, 0.7, 0.7], {1, 2} -> 
         RGBColor[0.7, 0.7, 0.7], {1, 3} -> RGBColor[0.7, 0.7, 0.7], {1, 4} -> 
         GrayLevel[1], {1, 5} -> GrayLevel[1], {1, 6} -> GrayLevel[1], {1, 7} -> 
         RGBColor[0.7, 0.7, 0.7], {1, 8} -> RGBColor[0.7, 0.7, 0.7], {1, 9} -> 
         RGBColor[0.7, 0.7, 0.7], {2, 1} -> RGBColor[0.7, 0.7, 0.7], {2, 2} -> 
         RGBColor[0.7, 0.7, 0.7], {2, 3} -> RGBColor[0.7, 0.7, 0.7], {2, 4} -> 
         GrayLevel[1], {2, 5} -> GrayLevel[1], {2, 6} -> GrayLevel[1], {2, 7} -> 
         RGBColor[0.7, 0.7, 0.7], {2, 8} -> RGBColor[0.7, 0.7, 0.7], {2, 9} -> 
         RGBColor[0.7, 0.7, 0.7], {3, 1} -> RGBColor[0.7, 0.7, 0.7], {3, 2} -> 
         RGBColor[0.7, 0.7, 0.7], {3, 3} -> RGBColor[0.7, 0.7, 0.7], {3, 4} -> 
         GrayLevel[1], {3, 5} -> GrayLevel[1], {3, 6} -> GrayLevel[1], {3, 7} -> 
         RGBColor[0.7, 0.7, 0.7], {3, 8} -> RGBColor[0.7, 0.7, 0.7], {3, 9} -> 
         RGBColor[0.7, 0.7, 0.7], {4, 1} -> GrayLevel[1], {4, 2} -> 
         GrayLevel[1], {4, 3} -> GrayLevel[1], {4, 4} -> 
         RGBColor[0.7, 0.7, 0.7], {4, 5} -> RGBColor[0.7, 0.7, 0.7], {4, 6} -> 
         RGBColor[0.7, 0.7, 0.7], {4, 7} -> GrayLevel[1], {4, 8} -> 
         GrayLevel[1], {4, 9} -> GrayLevel[1], {5, 1} -> 
         GrayLevel[1], {5, 2} -> GrayLevel[1], {5, 3} -> GrayLevel[1], {5, 4} -> 
         RGBColor[0.7, 0.7, 0.7], {5, 5} -> RGBColor[0.7, 0.7, 0.7], {5, 6} -> 
         RGBColor[0.7, 0.7, 0.7], {5, 7} -> GrayLevel[1], {5, 8} -> 
         GrayLevel[1], {5, 9} -> GrayLevel[1], {6, 1} -> GrayLevel[1], {6, 2} -> 
         GrayLevel[1], {6, 3} -> GrayLevel[1], {6, 4} -> 
         RGBColor[0.7, 0.7, 0.7], {6, 5} -> RGBColor[0.7, 0.7, 0.7], {6, 6} -> 
         RGBColor[0.7, 0.7, 0.7], {6, 7} -> GrayLevel[1], {6, 8} -> 
         GrayLevel[1], {6, 9} -> GrayLevel[1], {7, 1} -> 
         RGBColor[0.7, 0.7, 0.7], {7, 2} -> RGBColor[0.7, 0.7, 0.7], {7, 3} -> 
         RGBColor[0.7, 0.7, 0.7], {7, 4} -> GrayLevel[1], {7, 5} -> 
         GrayLevel[1], {7, 6} -> GrayLevel[1], {7, 7} -> 
         RGBColor[0.7, 0.7, 0.7], {7, 8} -> RGBColor[0.7, 0.7, 0.7], {7, 9} -> 
         RGBColor[0.7, 0.7, 0.7], {8, 1} -> RGBColor[0.7, 0.7, 0.7], {8, 2} -> 
         RGBColor[0.7, 0.7, 0.7], {8, 3} -> RGBColor[0.7, 0.7, 0.7], {8, 4} -> 
         GrayLevel[1], {8, 5} -> GrayLevel[1], {8, 6} -> GrayLevel[1], {8, 7} -> 
         RGBColor[0.7, 0.7, 0.7], {8, 8} -> RGBColor[0.7, 0.7, 0.7], {8, 9} -> 
         RGBColor[0.7, 0.7, 0.7], {9, 1} -> RGBColor[0.7, 0.7, 0.7], {9, 2} -> 
         RGBColor[0.7, 0.7, 0.7], {9, 3} -> RGBColor[0.7, 0.7, 0.7], {9, 4} -> 
         GrayLevel[1], {9, 5} -> GrayLevel[1], {9, 6} -> GrayLevel[1], {9, 7} -> 
         RGBColor[0.7, 0.7, 0.7], {9, 8} -> RGBColor[0.7, 0.7, 0.7], {9, 9} -> 
         RGBColor[0.7, 0.7, 0.7]}}, ItemSize -> {1.8, 1.8}], 14, "Label"], 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`difficulty$$], 40}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 
      11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 
      29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 
      47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60}}, {{
       Hold[$CellContext`sol$$], 
       Style[
        Grid[{{
           Style[1, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[2, 
            RGBColor[0.1, 0.2, 0.8]], 4, 
           Style[3, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[9, 
            RGBColor[0.1, 0.2, 0.8]], 5, 
           Style[7, 
            RGBColor[0.1, 0.2, 0.8]], 8, 6}, {6, 3, 9, 8, 
           Style[7, 
            RGBColor[0.1, 0.2, 0.8]], 1, 
           Style[2, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[4, 
            RGBColor[0.1, 0.2, 0.8]], 5}, {7, 
           Style[8, 
            RGBColor[0.1, 0.2, 0.8]], 5, 6, 
           Style[4, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[2, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[9, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[3, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[1, 
            RGBColor[0.1, 0.2, 0.8]]}, {8, 
           Style[4, 
            RGBColor[0.1, 0.2, 0.8]], 3, 2, 5, 
           Style[9, 
            RGBColor[0.1, 0.2, 0.8]], 1, 
           Style[6, 
            RGBColor[0.1, 0.2, 0.8]], 7}, {
           Style[5, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[9, 
            RGBColor[0.1, 0.2, 0.8]], 1, 
           Style[7, 
            RGBColor[0.1, 0.2, 0.8]], 6, 8, 
           Style[4, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[2, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[3, 
            RGBColor[0.1, 0.2, 0.8]]}, {
           Style[2, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[7, 
            RGBColor[0.1, 0.2, 0.8]], 6, 
           Style[1, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[3, 
            RGBColor[0.1, 0.2, 0.8]], 4, 5, 9, 8}, {
           Style[4, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[1, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[8, 
            RGBColor[0.1, 0.2, 0.8]], 5, 
           Style[2, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[6, 
            RGBColor[0.1, 0.2, 0.8]], 3, 7, 
           Style[9, 
            RGBColor[0.1, 0.2, 0.8]]}, {3, 
           Style[5, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[2, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[9, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[8, 
            RGBColor[0.1, 0.2, 0.8]], 7, 
           Style[6, 
            RGBColor[0.1, 0.2, 0.8]], 1, 4}, {
           Style[9, 
            RGBColor[0.1, 0.2, 0.8]], 6, 
           Style[7, 
            RGBColor[0.1, 0.2, 0.8]], 4, 1, 3, 8, 5, 2}}, Dividers -> {{{
             Thickness[2], True, True}}, {{
             Thickness[2], True, True}}}, 
         Background -> {
          Automatic, 
           Automatic, {{1, 1} -> RGBColor[0.7, 0.7, 0.7], {1, 2} -> 
            RGBColor[0.7, 0.7, 0.7], {1, 3} -> 
            RGBColor[0.7, 0.7, 0.7], {1, 4} -> GrayLevel[1], {1, 5} -> 
            GrayLevel[1], {1, 6} -> GrayLevel[1], {1, 7} -> 
            RGBColor[0.7, 0.7, 0.7], {1, 8} -> 
            RGBColor[0.7, 0.7, 0.7], {1, 9} -> 
            RGBColor[0.7, 0.7, 0.7], {2, 1} -> 
            RGBColor[0.7, 0.7, 0.7], {2, 2} -> 
            RGBColor[0.7, 0.7, 0.7], {2, 3} -> 
            RGBColor[0.7, 0.7, 0.7], {2, 4} -> GrayLevel[1], {2, 5} -> 
            GrayLevel[1], {2, 6} -> GrayLevel[1], {2, 7} -> 
            RGBColor[0.7, 0.7, 0.7], {2, 8} -> 
            RGBColor[0.7, 0.7, 0.7], {2, 9} -> 
            RGBColor[0.7, 0.7, 0.7], {3, 1} -> 
            RGBColor[0.7, 0.7, 0.7], {3, 2} -> 
            RGBColor[0.7, 0.7, 0.7], {3, 3} -> 
            RGBColor[0.7, 0.7, 0.7], {3, 4} -> GrayLevel[1], {3, 5} -> 
            GrayLevel[1], {3, 6} -> GrayLevel[1], {3, 7} -> 
            RGBColor[0.7, 0.7, 0.7], {3, 8} -> 
            RGBColor[0.7, 0.7, 0.7], {3, 9} -> 
            RGBColor[0.7, 0.7, 0.7], {4, 1} -> GrayLevel[1], {4, 2} -> 
            GrayLevel[1], {4, 3} -> GrayLevel[1], {4, 4} -> 
            RGBColor[0.7, 0.7, 0.7], {4, 5} -> 
            RGBColor[0.7, 0.7, 0.7], {4, 6} -> 
            RGBColor[0.7, 0.7, 0.7], {4, 7} -> GrayLevel[1], {4, 8} -> 
            GrayLevel[1], {4, 9} -> GrayLevel[1], {5, 1} -> 
            GrayLevel[1], {5, 2} -> GrayLevel[1], {5, 3} -> 
            GrayLevel[1], {5, 4} -> RGBColor[0.7, 0.7, 0.7], {5, 5} -> 
            RGBColor[0.7, 0.7, 0.7], {5, 6} -> 
            RGBColor[0.7, 0.7, 0.7], {5, 7} -> GrayLevel[1], {5, 8} -> 
            GrayLevel[1], {5, 9} -> GrayLevel[1], {6, 1} -> 
            GrayLevel[1], {6, 2} -> GrayLevel[1], {6, 3} -> 
            GrayLevel[1], {6, 4} -> RGBColor[0.7, 0.7, 0.7], {6, 5} -> 
            RGBColor[0.7, 0.7, 0.7], {6, 6} -> 
            RGBColor[0.7, 0.7, 0.7], {6, 7} -> GrayLevel[1], {6, 8} -> 
            GrayLevel[1], {6, 9} -> GrayLevel[1], {7, 1} -> 
            RGBColor[0.7, 0.7, 0.7], {7, 2} -> 
            RGBColor[0.7, 0.7, 0.7], {7, 3} -> 
            RGBColor[0.7, 0.7, 0.7], {7, 4} -> GrayLevel[1], {7, 5} -> 
            GrayLevel[1], {7, 6} -> GrayLevel[1], {7, 7} -> 
            RGBColor[0.7, 0.7, 0.7], {7, 8} -> 
            RGBColor[0.7, 0.7, 0.7], {7, 9} -> 
            RGBColor[0.7, 0.7, 0.7], {8, 1} -> 
            RGBColor[0.7, 0.7, 0.7], {8, 2} -> 
            RGBColor[0.7, 0.7, 0.7], {8, 3} -> 
            RGBColor[0.7, 0.7, 0.7], {8, 4} -> GrayLevel[1], {8, 5} -> 
            GrayLevel[1], {8, 6} -> GrayLevel[1], {8, 7} -> 
            RGBColor[0.7, 0.7, 0.7], {8, 8} -> 
            RGBColor[0.7, 0.7, 0.7], {8, 9} -> 
            RGBColor[0.7, 0.7, 0.7], {9, 1} -> 
            RGBColor[0.7, 0.7, 0.7], {9, 2} -> 
            RGBColor[0.7, 0.7, 0.7], {9, 3} -> 
            RGBColor[0.7, 0.7, 0.7], {9, 4} -> GrayLevel[1], {9, 5} -> 
            GrayLevel[1], {9, 6} -> GrayLevel[1], {9, 7} -> 
            RGBColor[0.7, 0.7, 0.7], {9, 8} -> 
            RGBColor[0.7, 0.7, 0.7], {9, 9} -> RGBColor[0.7, 0.7, 0.7]}}, 
         ItemSize -> {1.8, 1.8}], 14, "Label"]}}}, Typeset`size$$ = {
    588., {182., 187.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`difficulty$128160$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`difficulty$$ = 40, $CellContext`sol$$ = 
        Style[
          Grid[{{
             Style[1, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[2, 
              RGBColor[0.1, 0.2, 0.8]], 4, 
             Style[3, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[9, 
              RGBColor[0.1, 0.2, 0.8]], 5, 
             Style[7, 
              RGBColor[0.1, 0.2, 0.8]], 8, 6}, {6, 3, 9, 8, 
             Style[7, 
              RGBColor[0.1, 0.2, 0.8]], 1, 
             Style[2, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[4, 
              RGBColor[0.1, 0.2, 0.8]], 5}, {7, 
             Style[8, 
              RGBColor[0.1, 0.2, 0.8]], 5, 6, 
             Style[4, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[2, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[9, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[3, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[1, 
              RGBColor[0.1, 0.2, 0.8]]}, {8, 
             Style[4, 
              RGBColor[0.1, 0.2, 0.8]], 3, 2, 5, 
             Style[9, 
              RGBColor[0.1, 0.2, 0.8]], 1, 
             Style[6, 
              RGBColor[0.1, 0.2, 0.8]], 7}, {
             Style[5, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[9, 
              RGBColor[0.1, 0.2, 0.8]], 1, 
             Style[7, 
              RGBColor[0.1, 0.2, 0.8]], 6, 8, 
             Style[4, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[2, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[3, 
              RGBColor[0.1, 0.2, 0.8]]}, {
             Style[2, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[7, 
              RGBColor[0.1, 0.2, 0.8]], 6, 
             Style[1, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[3, 
              RGBColor[0.1, 0.2, 0.8]], 4, 5, 9, 8}, {
             Style[4, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[1, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[8, 
              RGBColor[0.1, 0.2, 0.8]], 5, 
             Style[2, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[6, 
              RGBColor[0.1, 0.2, 0.8]], 3, 7, 
             Style[9, 
              RGBColor[0.1, 0.2, 0.8]]}, {3, 
             Style[5, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[2, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[9, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[8, 
              RGBColor[0.1, 0.2, 0.8]], 7, 
             Style[6, 
              RGBColor[0.1, 0.2, 0.8]], 1, 4}, {
             Style[9, 
              RGBColor[0.1, 0.2, 0.8]], 6, 
             Style[7, 
              RGBColor[0.1, 0.2, 0.8]], 4, 1, 3, 8, 5, 2}}, Dividers -> {{{
               Thickness[2], True, True}}, {{
               Thickness[2], True, True}}}, 
           Background -> {
            Automatic, 
             Automatic, {{1, 1} -> RGBColor[0.7, 0.7, 0.7], {1, 2} -> 
              RGBColor[0.7, 0.7, 0.7], {1, 3} -> 
              RGBColor[0.7, 0.7, 0.7], {1, 4} -> GrayLevel[1], {1, 5} -> 
              GrayLevel[1], {1, 6} -> GrayLevel[1], {1, 7} -> 
              RGBColor[0.7, 0.7, 0.7], {1, 8} -> 
              RGBColor[0.7, 0.7, 0.7], {1, 9} -> 
              RGBColor[0.7, 0.7, 0.7], {2, 1} -> 
              RGBColor[0.7, 0.7, 0.7], {2, 2} -> 
              RGBColor[0.7, 0.7, 0.7], {2, 3} -> 
              RGBColor[0.7, 0.7, 0.7], {2, 4} -> GrayLevel[1], {2, 5} -> 
              GrayLevel[1], {2, 6} -> GrayLevel[1], {2, 7} -> 
              RGBColor[0.7, 0.7, 0.7], {2, 8} -> 
              RGBColor[0.7, 0.7, 0.7], {2, 9} -> 
              RGBColor[0.7, 0.7, 0.7], {3, 1} -> 
              RGBColor[0.7, 0.7, 0.7], {3, 2} -> 
              RGBColor[0.7, 0.7, 0.7], {3, 3} -> 
              RGBColor[0.7, 0.7, 0.7], {3, 4} -> GrayLevel[1], {3, 5} -> 
              GrayLevel[1], {3, 6} -> GrayLevel[1], {3, 7} -> 
              RGBColor[0.7, 0.7, 0.7], {3, 8} -> 
              RGBColor[0.7, 0.7, 0.7], {3, 9} -> 
              RGBColor[0.7, 0.7, 0.7], {4, 1} -> GrayLevel[1], {4, 2} -> 
              GrayLevel[1], {4, 3} -> GrayLevel[1], {4, 4} -> 
              RGBColor[0.7, 0.7, 0.7], {4, 5} -> 
              RGBColor[0.7, 0.7, 0.7], {4, 6} -> 
              RGBColor[0.7, 0.7, 0.7], {4, 7} -> GrayLevel[1], {4, 8} -> 
              GrayLevel[1], {4, 9} -> GrayLevel[1], {5, 1} -> 
              GrayLevel[1], {5, 2} -> GrayLevel[1], {5, 3} -> 
              GrayLevel[1], {5, 4} -> RGBColor[0.7, 0.7, 0.7], {5, 5} -> 
              RGBColor[0.7, 0.7, 0.7], {5, 6} -> 
              RGBColor[0.7, 0.7, 0.7], {5, 7} -> GrayLevel[1], {5, 8} -> 
              GrayLevel[1], {5, 9} -> GrayLevel[1], {6, 1} -> 
              GrayLevel[1], {6, 2} -> GrayLevel[1], {6, 3} -> 
              GrayLevel[1], {6, 4} -> RGBColor[0.7, 0.7, 0.7], {6, 5} -> 
              RGBColor[0.7, 0.7, 0.7], {6, 6} -> 
              RGBColor[0.7, 0.7, 0.7], {6, 7} -> GrayLevel[1], {6, 8} -> 
              GrayLevel[1], {6, 9} -> GrayLevel[1], {7, 1} -> 
              RGBColor[0.7, 0.7, 0.7], {7, 2} -> 
              RGBColor[0.7, 0.7, 0.7], {7, 3} -> 
              RGBColor[0.7, 0.7, 0.7], {7, 4} -> GrayLevel[1], {7, 5} -> 
              GrayLevel[1], {7, 6} -> GrayLevel[1], {7, 7} -> 
              RGBColor[0.7, 0.7, 0.7], {7, 8} -> 
              RGBColor[0.7, 0.7, 0.7], {7, 9} -> 
              RGBColor[0.7, 0.7, 0.7], {8, 1} -> 
              RGBColor[0.7, 0.7, 0.7], {8, 2} -> 
              RGBColor[0.7, 0.7, 0.7], {8, 3} -> 
              RGBColor[0.7, 0.7, 0.7], {8, 4} -> GrayLevel[1], {8, 5} -> 
              GrayLevel[1], {8, 6} -> GrayLevel[1], {8, 7} -> 
              RGBColor[0.7, 0.7, 0.7], {8, 8} -> 
              RGBColor[0.7, 0.7, 0.7], {8, 9} -> 
              RGBColor[0.7, 0.7, 0.7], {9, 1} -> 
              RGBColor[0.7, 0.7, 0.7], {9, 2} -> 
              RGBColor[0.7, 0.7, 0.7], {9, 3} -> 
              RGBColor[0.7, 0.7, 0.7], {9, 4} -> GrayLevel[1], {9, 5} -> 
              GrayLevel[1], {9, 6} -> GrayLevel[1], {9, 7} -> 
              RGBColor[0.7, 0.7, 0.7], {9, 8} -> 
              RGBColor[0.7, 0.7, 0.7], {9, 9} -> RGBColor[0.7, 0.7, 0.7]}}, 
           ItemSize -> {1.8, 1.8}], 14, "Label"]}, "ControllerVariables" :> {
        Hold[$CellContext`difficulty$$, $CellContext`difficulty$128160$$, 0]},
       "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      DynamicModule[{$CellContext`n = 9, $CellContext`color = 
         RGBColor[
          0.1, 0.2, 
           0.8], $CellContext`seed, $CellContext`solution, \
$CellContext`fields, $CellContext`game, $CellContext`pos, $CellContext`x1, \
$CellContext`x2, $CellContext`x3, $CellContext`x4, $CellContext`x5, \
$CellContext`x6, $CellContext`x7, $CellContext`x8, $CellContext`x9, \
$CellContext`x10, $CellContext`x11, $CellContext`x12, $CellContext`x13, \
$CellContext`x14, $CellContext`x15, $CellContext`x16, $CellContext`x17, \
$CellContext`x18, $CellContext`x19, $CellContext`x20, $CellContext`x21, \
$CellContext`x22, $CellContext`x23, $CellContext`x24, $CellContext`x25, \
$CellContext`x26, $CellContext`x27, $CellContext`x28, $CellContext`x29, \
$CellContext`x30, $CellContext`x31, $CellContext`x32, $CellContext`x33, \
$CellContext`x34, $CellContext`x35, $CellContext`x36, $CellContext`x37, \
$CellContext`x38, $CellContext`x39, $CellContext`x40, $CellContext`x41, \
$CellContext`x42, $CellContext`x43, $CellContext`x44, $CellContext`x45, \
$CellContext`x46, $CellContext`x47, $CellContext`x48, $CellContext`x49, \
$CellContext`x50, $CellContext`x51, $CellContext`x52, $CellContext`x53, \
$CellContext`x54, $CellContext`x55, $CellContext`x56, $CellContext`x57, \
$CellContext`x58, $CellContext`x59, $CellContext`x60}, $CellContext`seed = 
         ReplacePart[
           Table["", {$CellContext`n}, {$CellContext`n}], 
           Thread[RandomSample[
              Tuples[
               Range[$CellContext`n], 2], $CellContext`n] -> 
            Range[$CellContext`n]]]; $CellContext`solution = \
$CellContext`sudokusolver[$CellContext`seed]; $CellContext`fields = 
         Take[{$CellContext`x1, $CellContext`x2, $CellContext`x3, \
$CellContext`x4, $CellContext`x5, $CellContext`x6, $CellContext`x7, \
$CellContext`x8, $CellContext`x9, $CellContext`x10, $CellContext`x11, \
$CellContext`x12, $CellContext`x13, $CellContext`x14, $CellContext`x15, \
$CellContext`x16, $CellContext`x17, $CellContext`x18, $CellContext`x19, \
$CellContext`x20, $CellContext`x21, $CellContext`x22, $CellContext`x23, \
$CellContext`x24, $CellContext`x25, $CellContext`x26, $CellContext`x27, \
$CellContext`x28, $CellContext`x29, $CellContext`x30, $CellContext`x31, \
$CellContext`x32, $CellContext`x33, $CellContext`x34, $CellContext`x35, \
$CellContext`x36, $CellContext`x37, $CellContext`x38, $CellContext`x39, \
$CellContext`x40, $CellContext`x41, $CellContext`x42, $CellContext`x43, \
$CellContext`x44, $CellContext`x45, $CellContext`x46, $CellContext`x47, \
$CellContext`x48, $CellContext`x49, $CellContext`x50, $CellContext`x51, \
$CellContext`x52, $CellContext`x53, $CellContext`x54, $CellContext`x55, \
$CellContext`x56, $CellContext`x57, $CellContext`x58, $CellContext`x59, \
$CellContext`x60}, $CellContext`difficulty$$]; $CellContext`game = 
         ReplacePart[$CellContext`solution, 
           Thread[($CellContext`pos = RandomSample[
               Tuples[
                Range[$CellContext`n], 2], $CellContext`difficulty$$]) -> 
            Map[PopupMenu[
               Dynamic[#], 
               Prepend[
                Range[9], "   "], BaseStyle -> {$CellContext`color, 14}, 
               Appearance -> None, FrameMargins -> 
               0]& , $CellContext`fields]]]; Deploy[
          Grid[{{
             Button[
             "new puzzle", $CellContext`sol$$ = " "; $CellContext`seed = 
               ReplacePart[
                 Table["", {$CellContext`n}, {$CellContext`n}], 
                 Thread[RandomSample[
                    Tuples[
                    Range[$CellContext`n], 2], $CellContext`n] -> 
                  Range[$CellContext`n]]]; $CellContext`solution = \
$CellContext`sudokusolver[$CellContext`seed]; 
              Clear[$CellContext`x1, $CellContext`x2, $CellContext`x3, \
$CellContext`x4, $CellContext`x5, $CellContext`x6, $CellContext`x7, \
$CellContext`x8, $CellContext`x9, $CellContext`x10, $CellContext`x11, \
$CellContext`x12, $CellContext`x13, $CellContext`x14, $CellContext`x15, \
$CellContext`x16, $CellContext`x17, $CellContext`x18, $CellContext`x19, \
$CellContext`x20, $CellContext`x21, $CellContext`x22, $CellContext`x23, \
$CellContext`x24, $CellContext`x25, $CellContext`x26, $CellContext`x27, \
$CellContext`x28, $CellContext`x29, $CellContext`x30, $CellContext`x31, \
$CellContext`x32, $CellContext`x33, $CellContext`x34, $CellContext`x35, \
$CellContext`x36, $CellContext`x37, $CellContext`x38, $CellContext`x39, \
$CellContext`x40, $CellContext`x41, $CellContext`x42, $CellContext`x43, \
$CellContext`x44, $CellContext`x45, $CellContext`x46, $CellContext`x47, \
$CellContext`x48, $CellContext`x49, $CellContext`x50, $CellContext`x51, \
$CellContext`x52, $CellContext`x53, $CellContext`x54, $CellContext`x55]; \
$CellContext`fields = 
               Take[{$CellContext`x1, $CellContext`x2, $CellContext`x3, \
$CellContext`x4, $CellContext`x5, $CellContext`x6, $CellContext`x7, \
$CellContext`x8, $CellContext`x9, $CellContext`x10, $CellContext`x11, \
$CellContext`x12, $CellContext`x13, $CellContext`x14, $CellContext`x15, \
$CellContext`x16, $CellContext`x17, $CellContext`x18, $CellContext`x19, \
$CellContext`x20, $CellContext`x21, $CellContext`x22, $CellContext`x23, \
$CellContext`x24, $CellContext`x25, $CellContext`x26, $CellContext`x27, \
$CellContext`x28, $CellContext`x29, $CellContext`x30, $CellContext`x31, \
$CellContext`x32, $CellContext`x33, $CellContext`x34, $CellContext`x35, \
$CellContext`x36, $CellContext`x37, $CellContext`x38, $CellContext`x39, \
$CellContext`x40, $CellContext`x41, $CellContext`x42, $CellContext`x43, \
$CellContext`x44, $CellContext`x45, $CellContext`x46, $CellContext`x47, \
$CellContext`x48, $CellContext`x49, $CellContext`x50, $CellContext`x51, \
$CellContext`x52, $CellContext`x53, $CellContext`x54, $CellContext`x55, \
$CellContext`x56, $CellContext`x57, $CellContext`x58, $CellContext`x59, \
$CellContext`x60}, $CellContext`difficulty$$]; $CellContext`game = 
               ReplacePart[$CellContext`solution, 
                 Thread[($CellContext`pos = RandomSample[
                    Tuples[
                    Range[$CellContext`n], 2], $CellContext`difficulty$$]) -> 
                  Map[PopupMenu[
                    Dynamic[#], 
                    Prepend[
                    Range[9], "   "], BaseStyle -> {$CellContext`color, 14}, 
                    Appearance -> None, FrameMargins -> 
                    0]& , $CellContext`fields]]]; Null], 
             Button["check", 
              If[
               $CellContext`check[
                ReplacePart[$CellContext`game, 
                 
                 Thread[$CellContext`pos -> $CellContext`fields]]], \
$CellContext`sol$$ = 
               Style["Congratulations!", 14, "Label"], $CellContext`sol$$ = 
               Style["Nope, try again", 14, "Label"]]]}, {
             Dynamic[
              $CellContext`sudokuForm[$CellContext`game]], 
             Dynamic[$CellContext`sol$$]}, {
             Button[
             "show solution", $CellContext`sol$$ = $CellContext`sudokuForm[
                ReplacePart[$CellContext`solution, 
                 Thread[$CellContext`pos -> Map[Style[
                    Part[$CellContext`solution, 
                    Apply[
                    Sequence, #]], $CellContext`color]& , \
$CellContext`pos]]]]], 
             Button["hide solution", $CellContext`sol$$ = " "]}}, 
           ItemSize -> {{23, 23}, {2, 20, 2}}]]], 
      "Specifications" :> {{{$CellContext`difficulty$$, 40}, {1, 2, 3, 4, 5, 
         6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 
         24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 
         41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 
         58, 59, 60}}, {{$CellContext`sol$$, 
          Style[
           Grid[{{
              Style[1, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[2, 
               RGBColor[0.1, 0.2, 0.8]], 4, 
              Style[3, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[9, 
               RGBColor[0.1, 0.2, 0.8]], 5, 
              Style[7, 
               RGBColor[0.1, 0.2, 0.8]], 8, 6}, {6, 3, 9, 8, 
              Style[7, 
               RGBColor[0.1, 0.2, 0.8]], 1, 
              Style[2, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[4, 
               RGBColor[0.1, 0.2, 0.8]], 5}, {7, 
              Style[8, 
               RGBColor[0.1, 0.2, 0.8]], 5, 6, 
              Style[4, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[2, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[9, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[3, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[1, 
               RGBColor[0.1, 0.2, 0.8]]}, {8, 
              Style[4, 
               RGBColor[0.1, 0.2, 0.8]], 3, 2, 5, 
              Style[9, 
               RGBColor[0.1, 0.2, 0.8]], 1, 
              Style[6, 
               RGBColor[0.1, 0.2, 0.8]], 7}, {
              Style[5, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[9, 
               RGBColor[0.1, 0.2, 0.8]], 1, 
              Style[7, 
               RGBColor[0.1, 0.2, 0.8]], 6, 8, 
              Style[4, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[2, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[3, 
               RGBColor[0.1, 0.2, 0.8]]}, {
              Style[2, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[7, 
               RGBColor[0.1, 0.2, 0.8]], 6, 
              Style[1, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[3, 
               RGBColor[0.1, 0.2, 0.8]], 4, 5, 9, 8}, {
              Style[4, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[1, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[8, 
               RGBColor[0.1, 0.2, 0.8]], 5, 
              Style[2, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[6, 
               RGBColor[0.1, 0.2, 0.8]], 3, 7, 
              Style[9, 
               RGBColor[0.1, 0.2, 0.8]]}, {3, 
              Style[5, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[2, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[9, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[8, 
               RGBColor[0.1, 0.2, 0.8]], 7, 
              Style[6, 
               RGBColor[0.1, 0.2, 0.8]], 1, 4}, {
              Style[9, 
               RGBColor[0.1, 0.2, 0.8]], 6, 
              Style[7, 
               RGBColor[0.1, 0.2, 0.8]], 4, 1, 3, 8, 5, 2}}, Dividers -> {{{
                Thickness[2], True, True}}, {{
                Thickness[2], True, True}}}, 
            Background -> {
             Automatic, 
              Automatic, {{1, 1} -> RGBColor[0.7, 0.7, 0.7], {1, 2} -> 
               RGBColor[0.7, 0.7, 0.7], {1, 3} -> 
               RGBColor[0.7, 0.7, 0.7], {1, 4} -> GrayLevel[1], {1, 5} -> 
               GrayLevel[1], {1, 6} -> GrayLevel[1], {1, 7} -> 
               RGBColor[0.7, 0.7, 0.7], {1, 8} -> 
               RGBColor[0.7, 0.7, 0.7], {1, 9} -> 
               RGBColor[0.7, 0.7, 0.7], {2, 1} -> 
               RGBColor[0.7, 0.7, 0.7], {2, 2} -> 
               RGBColor[0.7, 0.7, 0.7], {2, 3} -> 
               RGBColor[0.7, 0.7, 0.7], {2, 4} -> GrayLevel[1], {2, 5} -> 
               GrayLevel[1], {2, 6} -> GrayLevel[1], {2, 7} -> 
               RGBColor[0.7, 0.7, 0.7], {2, 8} -> 
               RGBColor[0.7, 0.7, 0.7], {2, 9} -> 
               RGBColor[0.7, 0.7, 0.7], {3, 1} -> 
               RGBColor[0.7, 0.7, 0.7], {3, 2} -> 
               RGBColor[0.7, 0.7, 0.7], {3, 3} -> 
               RGBColor[0.7, 0.7, 0.7], {3, 4} -> GrayLevel[1], {3, 5} -> 
               GrayLevel[1], {3, 6} -> GrayLevel[1], {3, 7} -> 
               RGBColor[0.7, 0.7, 0.7], {3, 8} -> 
               RGBColor[0.7, 0.7, 0.7], {3, 9} -> 
               RGBColor[0.7, 0.7, 0.7], {4, 1} -> GrayLevel[1], {4, 2} -> 
               GrayLevel[1], {4, 3} -> GrayLevel[1], {4, 4} -> 
               RGBColor[0.7, 0.7, 0.7], {4, 5} -> 
               RGBColor[0.7, 0.7, 0.7], {4, 6} -> 
               RGBColor[0.7, 0.7, 0.7], {4, 7} -> GrayLevel[1], {4, 8} -> 
               GrayLevel[1], {4, 9} -> GrayLevel[1], {5, 1} -> 
               GrayLevel[1], {5, 2} -> GrayLevel[1], {5, 3} -> 
               GrayLevel[1], {5, 4} -> RGBColor[0.7, 0.7, 0.7], {5, 5} -> 
               RGBColor[0.7, 0.7, 0.7], {5, 6} -> 
               RGBColor[0.7, 0.7, 0.7], {5, 7} -> GrayLevel[1], {5, 8} -> 
               GrayLevel[1], {5, 9} -> GrayLevel[1], {6, 1} -> 
               GrayLevel[1], {6, 2} -> GrayLevel[1], {6, 3} -> 
               GrayLevel[1], {6, 4} -> RGBColor[0.7, 0.7, 0.7], {6, 5} -> 
               RGBColor[0.7, 0.7, 0.7], {6, 6} -> 
               RGBColor[0.7, 0.7, 0.7], {6, 7} -> GrayLevel[1], {6, 8} -> 
               GrayLevel[1], {6, 9} -> GrayLevel[1], {7, 1} -> 
               RGBColor[0.7, 0.7, 0.7], {7, 2} -> 
               RGBColor[0.7, 0.7, 0.7], {7, 3} -> 
               RGBColor[0.7, 0.7, 0.7], {7, 4} -> GrayLevel[1], {7, 5} -> 
               GrayLevel[1], {7, 6} -> GrayLevel[1], {7, 7} -> 
               RGBColor[0.7, 0.7, 0.7], {7, 8} -> 
               RGBColor[0.7, 0.7, 0.7], {7, 9} -> 
               RGBColor[0.7, 0.7, 0.7], {8, 1} -> 
               RGBColor[0.7, 0.7, 0.7], {8, 2} -> 
               RGBColor[0.7, 0.7, 0.7], {8, 3} -> 
               RGBColor[0.7, 0.7, 0.7], {8, 4} -> GrayLevel[1], {8, 5} -> 
               GrayLevel[1], {8, 6} -> GrayLevel[1], {8, 7} -> 
               RGBColor[0.7, 0.7, 0.7], {8, 8} -> 
               RGBColor[0.7, 0.7, 0.7], {8, 9} -> 
               RGBColor[0.7, 0.7, 0.7], {9, 1} -> 
               RGBColor[0.7, 0.7, 0.7], {9, 2} -> 
               RGBColor[0.7, 0.7, 0.7], {9, 3} -> 
               RGBColor[0.7, 0.7, 0.7], {9, 4} -> GrayLevel[1], {9, 5} -> 
               GrayLevel[1], {9, 6} -> GrayLevel[1], {9, 7} -> 
               RGBColor[0.7, 0.7, 0.7], {9, 8} -> 
               RGBColor[0.7, 0.7, 0.7], {9, 9} -> RGBColor[0.7, 0.7, 0.7]}}, 
            ItemSize -> {1.8, 1.8}], 14, "Label"]}, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`difficulty$$}, 
        AutorunSequencing -> {1}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{635., {226., 231.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`blockposition[{
           Pattern[$CellContext`i, 
            Blank[]], 
           Pattern[$CellContext`j, 
            Blank[]]}, 
          Pattern[$CellContext`size, 
           
           Blank[]]] := ($CellContext`blockposition[{$CellContext`i, \
$CellContext`j}, $CellContext`size] = Apply[Sequence, 
           Part[
            Partition[
             Range[$CellContext`size], 
             Sqrt[$CellContext`size]], 
            Map[
            Ceiling, {$CellContext`i, $CellContext`j}/
             Sqrt[$CellContext`size]]]]); $CellContext`placenumber[
          Pattern[$CellContext`n, 
           Blank[]], {
           Pattern[$CellContext`i, 
            Blank[]], 
           Pattern[$CellContext`j, 
            Blank[]]}, 
          Optional[
           Pattern[$CellContext`extra, 
            Blank[String]], ""]] := 
        Block[{$CellContext`size = Length[$CellContext`choices]}, 
          If[
           MemberQ[
            
            Part[$CellContext`choices, $CellContext`i, $CellContext`j], \
$CellContext`n], 
           Part[$CellContext`choices, $CellContext`i, $CellContext`j] = {}; 
           Part[$CellContext`choices, $CellContext`i] = 
            Map[DeleteCases[#, $CellContext`n]& , 
              Part[$CellContext`choices, $CellContext`i]]; 
           Part[$CellContext`choices, All, $CellContext`j] = 
            Map[DeleteCases[#, $CellContext`n]& , 
              Part[$CellContext`choices, All, $CellContext`j]]; 
           Part[$CellContext`choices, 
              $CellContext`blockposition[{$CellContext`i, $CellContext`j}, \
$CellContext`size]] = Map[DeleteCases[#, $CellContext`n]& , 
              Part[$CellContext`choices, 
               $CellContext`blockposition[{$CellContext`i, $CellContext`j}, \
$CellContext`size]], {2}]; If[$CellContext`extra != "", If[
               And[
                
                Or[$CellContext`extra == "both", $CellContext`extra == 
                 "diagonal"], $CellContext`i == $CellContext`j], \
$CellContext`choices = 
               MapAt[DeleteCases[#, $CellContext`n]& , $CellContext`choices, 
                 
                 Table[{$CellContext`k, $CellContext`k}, {$CellContext`k, 
                   1, $CellContext`size}]]]; If[
               And[
                
                Or[$CellContext`extra == "both", $CellContext`extra == 
                 "antidiagonal"], $CellContext`i + $CellContext`j == \
$CellContext`size + 1], $CellContext`choices = 
               MapAt[DeleteCases[#, $CellContext`n]& , $CellContext`choices, 
                 
                 Table[{$CellContext`k, $CellContext`size + 
                   1 - $CellContext`k}, {$CellContext`k, 
                   1, $CellContext`size}]]]]; 
           Part[$CellContext`result, $CellContext`i, $CellContext`j] = \
$CellContext`n, 
           
           Throw[$CellContext`placednumbers = $CellContext`size^2 + 
             1]]]; $CellContext`singlenumber[
          Pattern[$CellContext`v, 
           Blank[]]] := With[{$CellContext`u = Flatten[
             Cases[
              Split[
               Sort[
                Flatten[$CellContext`v]]], {
               Blank[]}]]}, 
          If[$CellContext`u != {}, 
           With[{$CellContext`w = Part[
               Map[Position[$CellContext`v, #]& , $CellContext`u], All, 1, 
               1]}, 
            If[
             Apply[Unequal, $CellContext`w], 
             ReplacePart[$CellContext`v, 
              Map[List, $CellContext`u], 
              Map[List, $CellContext`w], 
              Map[List, 
               Range[
                Length[$CellContext`u]]]], 
             
             Throw[$CellContext`placednumbers = $CellContext`size^2 + 
               1]]], $CellContext`v]]; $CellContext`reducewith[
          Pattern[$CellContext`rule, 
           Blank[]]] := With[{$CellContext`t = Sqrt[
             Length[$CellContext`choices]]}, $CellContext`choices = 
           Map[$CellContext`rule, $CellContext`choices]; $CellContext`choices = 
           Transpose[
             Map[$CellContext`rule, 
              Transpose[$CellContext`choices]]]; $CellContext`choices = 
           Map[$CellContext`rule, 
             Map[Flatten[#, 1]& , 
              Flatten[
               
               Partition[$CellContext`choices, {$CellContext`t, \
$CellContext`t}], 1]]]; $CellContext`choices = Flatten[
             Map[MapThread[Join, 
               SlotSequence[1]]& , 
              Partition[
               Map[
               Partition[#, $CellContext`t]& , $CellContext`choices], \
$CellContext`t]], 1]; 
          If[$CellContext`placednumbers != 
            Count[$CellContext`choices, {}, {-2}], 
            
            Throw[$CellContext`placednumbers = $CellContext`size^2 + 
              1]]]; $CellContext`twins[
          Pattern[$CellContext`v, 
           Blank[]]] := With[{$CellContext`z = Cases[
             Split[
              Sort[
               Cases[$CellContext`v, {
                 Blank[], 
                 Blank[]}]]], {
               Pattern[$CellContext`a, 
                Blank[]], 
               Pattern[$CellContext`a, 
                Blank[]]} :> $CellContext`a]}, 
          If[$CellContext`z == {}, $CellContext`v, 
           Map[If[
             MemberQ[$CellContext`z, #], #, 
             Complement[#, 
              
              Flatten[$CellContext`z]]]& , $CellContext`v]]]; \
$CellContext`reducefromblocks := 
        Block[{$CellContext`v, $CellContext`aux}, $CellContext`aux = Partition[
             Range[$CellContext`size], 
             Sqrt[$CellContext`size]]; 
          Do[$CellContext`v = Part[$CellContext`choices, 
               $CellContext`blockposition[{1, 1} + 
                Sqrt[$CellContext`size] {$CellContext`i - 1, $CellContext`j - 
                   1}, $CellContext`size]]; Do[
              With[{$CellContext`w = Complement[
                  Flatten[
                   Part[$CellContext`v, $CellContext`k]], 
                  Flatten[
                   Drop[$CellContext`v, {$CellContext`k}]]]}, 
               
               If[$CellContext`w != {}, 
                Part[$CellContext`choices, $CellContext`k + ($CellContext`i - 
                    1) Sqrt[$CellContext`size]] = 
                Map[Complement[#, $CellContext`w]& , 
                  
                  Part[$CellContext`choices, $CellContext`k + ($CellContext`i - 
                    1) Sqrt[$CellContext`size]]]]], {$CellContext`k, 1, 
               Sqrt[$CellContext`size]}]; $CellContext`v = 
             Transpose[$CellContext`v]; Do[
              With[{$CellContext`w = Complement[
                  Flatten[
                   Part[$CellContext`v, $CellContext`k]], 
                  Flatten[
                   Drop[$CellContext`v, {$CellContext`k}]]]}, 
               
               If[$CellContext`w != {}, 
                Part[$CellContext`choices, 
                  All, $CellContext`k + ($CellContext`j - 1) 
                   Sqrt[$CellContext`size]] = 
                Map[Complement[#, $CellContext`w]& , 
                  
                  Part[$CellContext`choices, 
                   All, $CellContext`k + ($CellContext`j - 1) 
                    Sqrt[$CellContext`size]]]]], {$CellContext`k, 1, 
               Sqrt[$CellContext`size]}]; Part[$CellContext`choices, 
               $CellContext`blockposition[{1, 1} + 
                Sqrt[$CellContext`size] {$CellContext`i - 1, $CellContext`j - 
                   1}, $CellContext`size]] = 
             Transpose[$CellContext`v], {$CellContext`i, 1, 
             Sqrt[$CellContext`size]}, {$CellContext`j, 1, 
             Sqrt[$CellContext`size]}]; 
          If[$CellContext`placednumbers != 
            Count[$CellContext`choices, {}, {-2}], 
            
            Throw[$CellContext`placednumbers = $CellContext`size^2 + 
              1]]]; $CellContext`sudokusolver[
          Pattern[$CellContext`arg, 
           Blank[]], 
          Optional[
           Pattern[$CellContext`nsol, 
            Alternatives[
             Blank[Integer], Infinity]], 1], 
          Optional[
           Pattern[$CellContext`printsplit, 
            Alternatives[True, False]], True], 
          Optional[
           Pattern[$CellContext`extra, 
            Alternatives["", "diagonal", "antidiagonal", "both"]], ""]] := 
        Block[{$CellContext`mat, $CellContext`size, $CellContext`choices, \
$CellContext`tobedone, $CellContext`result, $CellContext`solutions, \
$CellContext`placednumbers, $CellContext`z}, $CellContext`mat = 
           Which[Head[$CellContext`arg] === Grid, 
             Part[$CellContext`arg, 1], Head[$CellContext`arg] === 
             SparseArray, 
             Normal[$CellContext`arg], 
             True, $CellContext`arg]; $CellContext`size = 
           Length[$CellContext`mat]; $CellContext`choices = 
           Array[Range[$CellContext`size]& , {$CellContext`size, \
$CellContext`size}]; $CellContext`result = 
           Array[0& , {$CellContext`size, $CellContext`size}]; $CellContext`z = 
           Position[$CellContext`mat, 
             PatternTest[
              Blank[Integer], Positive]]; $CellContext`placednumbers = 
           Length[$CellContext`z]; 
          Catch[MapThread[$CellContext`placenumber[#, #2, $CellContext`extra]& \
, {
               Extract[$CellContext`mat, $CellContext`z], $CellContext`z}]; 
            If[$CellContext`placednumbers != 
              Count[$CellContext`choices, {}, {-2}], \
$CellContext`placednumbers = $CellContext`size^2 + 
               1]]; $CellContext`solutions = {}; $CellContext`tobedone = 
           If[$CellContext`placednumbers <= $CellContext`size^2, \
{$CellContext`choices}, {}]; $CellContext`splitcounter = 0; While[
            
            And[$CellContext`tobedone != {}, 
             Length[$CellContext`solutions] < $CellContext`nsol], \
$CellContext`choices = 
             Part[$CellContext`tobedone, -1]; $CellContext`placednumbers = 
             Count[$CellContext`choices, {}, {-2}]; Catch[
              $CellContext`reducewith[$CellContext`singlenumber]]; 
            If[$CellContext`placednumbers <= $CellContext`size^2, \
$CellContext`placednumbers = 
              Count[$CellContext`choices, {}, {-2}]]; $CellContext`tobedone = 
             Most[$CellContext`tobedone]; 
            While[$CellContext`placednumbers < $CellContext`size^2, 
              Catch[While[
                 And[($CellContext`z = Position[$CellContext`choices, {
                    
                    Blank[]}]) != {}, $CellContext`placednumbers < \
$CellContext`size^2], $CellContext`placednumbers = $CellContext`placednumbers + 
                   Length[$CellContext`z]; 
                 MapThread[$CellContext`placenumber[#, #2, \
$CellContext`extra]& , {
                    Flatten[
                    
                    Extract[$CellContext`choices, $CellContext`z]], \
$CellContext`z}]; $CellContext`reducewith[$CellContext`singlenumber]]; \
$CellContext`z = $CellContext`choices; \
$CellContext`reducewith[$CellContext`twins]; 
               If[$CellContext`z != $CellContext`choices, 
                 Throw[
                  $CellContext`reducewith[$CellContext`singlenumber]]]; \
$CellContext`reducefromblocks; If[$CellContext`z != $CellContext`choices, 
                 Throw[
                  $CellContext`reducewith[$CellContext`singlenumber]]]; 
               If[$CellContext`placednumbers < $CellContext`size^2, 
                 Increment[$CellContext`splitcounter]; $CellContext`z = Min[
                    ReplaceAll[
                    Map[Length, $CellContext`choices, {2}], 
                    0 -> $CellContext`size + 1]]; $CellContext`z = 
                  Position[$CellContext`choices, 
                    PatternTest[
                    Blank[], 
                    Length[#] == $CellContext`z& ], {-2}]; $CellContext`pos = \
{{0, 0}, 3 $CellContext`size}; Do[
                   With[{$CellContext`m = Count[{
                    Part[$CellContext`choices, 
                    Part[$CellContext`z, $CellContext`i, 1]], 
                    Part[$CellContext`choices, All, 
                    Part[$CellContext`z, $CellContext`i, 2]], 
                    Part[$CellContext`choices, 
                    $CellContext`blockposition[
                    
                    Part[$CellContext`z, $CellContext`i], \
$CellContext`size]]}, {}, {-2}]}, 
                    
                    If[$CellContext`m < 
                    Part[$CellContext`pos, 2], $CellContext`pos = {
                    
                    Part[$CellContext`z, $CellContext`i], $CellContext`m}]], \
{$CellContext`i, 1, 
                    Length[$CellContext`z]}]; $CellContext`pos = 
                  Part[$CellContext`pos, 1]; AppendTo[$CellContext`tobedone, 
                   ReplacePart[$CellContext`choices, 
                    Rest[
                    Part[$CellContext`choices, 
                    Part[$CellContext`pos, 1], 
                    Part[$CellContext`pos, 2]]], $CellContext`pos]]; 
                 Part[$CellContext`choices, 
                    Part[$CellContext`pos, 1], 
                    Part[$CellContext`pos, 2]] = Take[
                    Part[$CellContext`choices, 
                    Part[$CellContext`pos, 1], 
                    Part[$CellContext`pos, 2]], 1]]]]; 
            If[$CellContext`placednumbers == $CellContext`size^2, 
              AppendTo[$CellContext`solutions, $CellContext`result]]]; If[
            And[$CellContext`nsol == 1, $CellContext`solutions != {}], 
            
            Part[$CellContext`solutions, 
             1], $CellContext`solutions]]; $CellContext`check[
          Pattern[$CellContext`attempt, 
           Blank[]]] := 
        Module[{$CellContext`n = Length[$CellContext`attempt]}, 
          And[
           Apply[And, 
            Table[Sort[
               Part[$CellContext`attempt, $CellContext`k]] == 
             Range[$CellContext`n], {$CellContext`k, $CellContext`n}]], 
           Apply[And, 
            Table[Sort[
               Part[$CellContext`attempt, All, $CellContext`k]] == 
             Range[$CellContext`n], {$CellContext`k, $CellContext`n}]], 
           Apply[And, 
            Flatten[
             Table[Sort[
                Flatten[
                 Table[
                  
                  Part[$CellContext`attempt, $CellContext`i + \
$CellContext`ii, $CellContext`j + $CellContext`jj], {$CellContext`i, 
                   1, $CellContext`n^Rational[1, 2]}, {$CellContext`j, 
                   1, $CellContext`n^Rational[1, 2]}]]] == 
              Range[$CellContext`n], {$CellContext`ii, 
               Range[
               0, $CellContext`n - 1, $CellContext`n^
                Rational[1, 2]]}, {$CellContext`jj, 
               Range[
               0, $CellContext`n - 1, $CellContext`n^
                Rational[1, 2]]}]]]]]; $CellContext`sudokuForm[
          Pattern[$CellContext`mat, 
           Blank[]]] := 
        Module[{$CellContext`t = 
           Length[$CellContext`mat], $CellContext`styles}, \
$CellContext`styles = {{
              Thickness[2], 
              Apply[Sequence, 
               Table[True, {Sqrt[$CellContext`t] - 1}]]}}; Style[
            
            Grid[$CellContext`mat, 
             Dividers -> {$CellContext`styles, $CellContext`styles}, 
             Background -> {Automatic, Automatic, 
               Flatten[
                Table[{$CellContext`i, $CellContext`j} -> If[
                   EvenQ[
                    Apply[Plus, 
                    
                    Floor[{$CellContext`i - 1, $CellContext`j - 
                    1}/$CellContext`t^Rational[1, 2]]]], 
                   Darker[White, 0.3], 
                   White], {$CellContext`i, $CellContext`t}, {$CellContext`j, \
$CellContext`t}]]}, ItemSize -> {1.8, 1.8}], 14, "Label"]]; Null}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->106516744]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SnapshotsSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`difficulty$$ = 40, $CellContext`sol$$ = " ",
     Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`difficulty$$], 40}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 
      11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 
      29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 
      47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60}}, {{
       Hold[$CellContext`sol$$], " "}}}, Typeset`size$$ = {
    588., {182., 187.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`difficulty$128211$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`difficulty$$ = 40, $CellContext`sol$$ = 
        " "}, "ControllerVariables" :> {
        Hold[$CellContext`difficulty$$, $CellContext`difficulty$128211$$, 0]},
       "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      DynamicModule[{$CellContext`n = 9, $CellContext`color = 
         RGBColor[
          0.1, 0.2, 
           0.8], $CellContext`seed, $CellContext`solution, \
$CellContext`fields, $CellContext`game, $CellContext`pos, $CellContext`x1, \
$CellContext`x2, $CellContext`x3, $CellContext`x4, $CellContext`x5, \
$CellContext`x6, $CellContext`x7, $CellContext`x8, $CellContext`x9, \
$CellContext`x10, $CellContext`x11, $CellContext`x12, $CellContext`x13, \
$CellContext`x14, $CellContext`x15, $CellContext`x16, $CellContext`x17, \
$CellContext`x18, $CellContext`x19, $CellContext`x20, $CellContext`x21, \
$CellContext`x22, $CellContext`x23, $CellContext`x24, $CellContext`x25, \
$CellContext`x26, $CellContext`x27, $CellContext`x28, $CellContext`x29, \
$CellContext`x30, $CellContext`x31, $CellContext`x32, $CellContext`x33, \
$CellContext`x34, $CellContext`x35, $CellContext`x36, $CellContext`x37, \
$CellContext`x38, $CellContext`x39, $CellContext`x40, $CellContext`x41, \
$CellContext`x42, $CellContext`x43, $CellContext`x44, $CellContext`x45, \
$CellContext`x46, $CellContext`x47, $CellContext`x48, $CellContext`x49, \
$CellContext`x50, $CellContext`x51, $CellContext`x52, $CellContext`x53, \
$CellContext`x54, $CellContext`x55, $CellContext`x56, $CellContext`x57, \
$CellContext`x58, $CellContext`x59, $CellContext`x60}, $CellContext`seed = 
         ReplacePart[
           Table["", {$CellContext`n}, {$CellContext`n}], 
           Thread[RandomSample[
              Tuples[
               Range[$CellContext`n], 2], $CellContext`n] -> 
            Range[$CellContext`n]]]; $CellContext`solution = \
$CellContext`sudokusolver[$CellContext`seed]; $CellContext`fields = 
         Take[{$CellContext`x1, $CellContext`x2, $CellContext`x3, \
$CellContext`x4, $CellContext`x5, $CellContext`x6, $CellContext`x7, \
$CellContext`x8, $CellContext`x9, $CellContext`x10, $CellContext`x11, \
$CellContext`x12, $CellContext`x13, $CellContext`x14, $CellContext`x15, \
$CellContext`x16, $CellContext`x17, $CellContext`x18, $CellContext`x19, \
$CellContext`x20, $CellContext`x21, $CellContext`x22, $CellContext`x23, \
$CellContext`x24, $CellContext`x25, $CellContext`x26, $CellContext`x27, \
$CellContext`x28, $CellContext`x29, $CellContext`x30, $CellContext`x31, \
$CellContext`x32, $CellContext`x33, $CellContext`x34, $CellContext`x35, \
$CellContext`x36, $CellContext`x37, $CellContext`x38, $CellContext`x39, \
$CellContext`x40, $CellContext`x41, $CellContext`x42, $CellContext`x43, \
$CellContext`x44, $CellContext`x45, $CellContext`x46, $CellContext`x47, \
$CellContext`x48, $CellContext`x49, $CellContext`x50, $CellContext`x51, \
$CellContext`x52, $CellContext`x53, $CellContext`x54, $CellContext`x55, \
$CellContext`x56, $CellContext`x57, $CellContext`x58, $CellContext`x59, \
$CellContext`x60}, $CellContext`difficulty$$]; $CellContext`game = 
         ReplacePart[$CellContext`solution, 
           Thread[($CellContext`pos = RandomSample[
               Tuples[
                Range[$CellContext`n], 2], $CellContext`difficulty$$]) -> 
            Map[PopupMenu[
               Dynamic[#], 
               Prepend[
                Range[9], "   "], BaseStyle -> {$CellContext`color, 14}, 
               Appearance -> None, FrameMargins -> 
               0]& , $CellContext`fields]]]; Deploy[
          Grid[{{
             Button[
             "new puzzle", $CellContext`sol$$ = " "; $CellContext`seed = 
               ReplacePart[
                 Table["", {$CellContext`n}, {$CellContext`n}], 
                 Thread[RandomSample[
                    Tuples[
                    Range[$CellContext`n], 2], $CellContext`n] -> 
                  Range[$CellContext`n]]]; $CellContext`solution = \
$CellContext`sudokusolver[$CellContext`seed]; 
              Clear[$CellContext`x1, $CellContext`x2, $CellContext`x3, \
$CellContext`x4, $CellContext`x5, $CellContext`x6, $CellContext`x7, \
$CellContext`x8, $CellContext`x9, $CellContext`x10, $CellContext`x11, \
$CellContext`x12, $CellContext`x13, $CellContext`x14, $CellContext`x15, \
$CellContext`x16, $CellContext`x17, $CellContext`x18, $CellContext`x19, \
$CellContext`x20, $CellContext`x21, $CellContext`x22, $CellContext`x23, \
$CellContext`x24, $CellContext`x25, $CellContext`x26, $CellContext`x27, \
$CellContext`x28, $CellContext`x29, $CellContext`x30, $CellContext`x31, \
$CellContext`x32, $CellContext`x33, $CellContext`x34, $CellContext`x35, \
$CellContext`x36, $CellContext`x37, $CellContext`x38, $CellContext`x39, \
$CellContext`x40, $CellContext`x41, $CellContext`x42, $CellContext`x43, \
$CellContext`x44, $CellContext`x45, $CellContext`x46, $CellContext`x47, \
$CellContext`x48, $CellContext`x49, $CellContext`x50, $CellContext`x51, \
$CellContext`x52, $CellContext`x53, $CellContext`x54, $CellContext`x55]; \
$CellContext`fields = 
               Take[{$CellContext`x1, $CellContext`x2, $CellContext`x3, \
$CellContext`x4, $CellContext`x5, $CellContext`x6, $CellContext`x7, \
$CellContext`x8, $CellContext`x9, $CellContext`x10, $CellContext`x11, \
$CellContext`x12, $CellContext`x13, $CellContext`x14, $CellContext`x15, \
$CellContext`x16, $CellContext`x17, $CellContext`x18, $CellContext`x19, \
$CellContext`x20, $CellContext`x21, $CellContext`x22, $CellContext`x23, \
$CellContext`x24, $CellContext`x25, $CellContext`x26, $CellContext`x27, \
$CellContext`x28, $CellContext`x29, $CellContext`x30, $CellContext`x31, \
$CellContext`x32, $CellContext`x33, $CellContext`x34, $CellContext`x35, \
$CellContext`x36, $CellContext`x37, $CellContext`x38, $CellContext`x39, \
$CellContext`x40, $CellContext`x41, $CellContext`x42, $CellContext`x43, \
$CellContext`x44, $CellContext`x45, $CellContext`x46, $CellContext`x47, \
$CellContext`x48, $CellContext`x49, $CellContext`x50, $CellContext`x51, \
$CellContext`x52, $CellContext`x53, $CellContext`x54, $CellContext`x55, \
$CellContext`x56, $CellContext`x57, $CellContext`x58, $CellContext`x59, \
$CellContext`x60}, $CellContext`difficulty$$]; $CellContext`game = 
               ReplacePart[$CellContext`solution, 
                 Thread[($CellContext`pos = RandomSample[
                    Tuples[
                    Range[$CellContext`n], 2], $CellContext`difficulty$$]) -> 
                  Map[PopupMenu[
                    Dynamic[#], 
                    Prepend[
                    Range[9], "   "], BaseStyle -> {$CellContext`color, 14}, 
                    Appearance -> None, FrameMargins -> 
                    0]& , $CellContext`fields]]]; Null], 
             Button["check", 
              If[
               $CellContext`check[
                ReplacePart[$CellContext`game, 
                 
                 Thread[$CellContext`pos -> $CellContext`fields]]], \
$CellContext`sol$$ = 
               Style["Congratulations!", 14, "Label"], $CellContext`sol$$ = 
               Style["Nope, try again", 14, "Label"]]]}, {
             Dynamic[
              $CellContext`sudokuForm[$CellContext`game]], 
             Dynamic[$CellContext`sol$$]}, {
             Button[
             "show solution", $CellContext`sol$$ = $CellContext`sudokuForm[
                ReplacePart[$CellContext`solution, 
                 Thread[$CellContext`pos -> Map[Style[
                    Part[$CellContext`solution, 
                    Apply[
                    Sequence, #]], $CellContext`color]& , \
$CellContext`pos]]]]], 
             Button["hide solution", $CellContext`sol$$ = " "]}}, 
           ItemSize -> {{23, 23}, {2, 20, 2}}]]], 
      "Specifications" :> {{{$CellContext`difficulty$$, 40}, {1, 2, 3, 4, 5, 
         6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 
         24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 
         41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 
         58, 59, 60}}, {{$CellContext`sol$$, " "}, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`difficulty$$}, 
        AutorunSequencing -> {1}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{635., {226., 231.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`blockposition[{
           Pattern[$CellContext`i, 
            Blank[]], 
           Pattern[$CellContext`j, 
            Blank[]]}, 
          Pattern[$CellContext`size, 
           
           Blank[]]] := ($CellContext`blockposition[{$CellContext`i, \
$CellContext`j}, $CellContext`size] = Apply[Sequence, 
           Part[
            Partition[
             Range[$CellContext`size], 
             Sqrt[$CellContext`size]], 
            Map[
            Ceiling, {$CellContext`i, $CellContext`j}/
             Sqrt[$CellContext`size]]]]); $CellContext`placenumber[
          Pattern[$CellContext`n, 
           Blank[]], {
           Pattern[$CellContext`i, 
            Blank[]], 
           Pattern[$CellContext`j, 
            Blank[]]}, 
          Optional[
           Pattern[$CellContext`extra, 
            Blank[String]], ""]] := 
        Block[{$CellContext`size = Length[$CellContext`choices]}, 
          If[
           MemberQ[
            
            Part[$CellContext`choices, $CellContext`i, $CellContext`j], \
$CellContext`n], 
           Part[$CellContext`choices, $CellContext`i, $CellContext`j] = {}; 
           Part[$CellContext`choices, $CellContext`i] = 
            Map[DeleteCases[#, $CellContext`n]& , 
              Part[$CellContext`choices, $CellContext`i]]; 
           Part[$CellContext`choices, All, $CellContext`j] = 
            Map[DeleteCases[#, $CellContext`n]& , 
              Part[$CellContext`choices, All, $CellContext`j]]; 
           Part[$CellContext`choices, 
              $CellContext`blockposition[{$CellContext`i, $CellContext`j}, \
$CellContext`size]] = Map[DeleteCases[#, $CellContext`n]& , 
              Part[$CellContext`choices, 
               $CellContext`blockposition[{$CellContext`i, $CellContext`j}, \
$CellContext`size]], {2}]; If[$CellContext`extra != "", If[
               And[
                
                Or[$CellContext`extra == "both", $CellContext`extra == 
                 "diagonal"], $CellContext`i == $CellContext`j], \
$CellContext`choices = 
               MapAt[DeleteCases[#, $CellContext`n]& , $CellContext`choices, 
                 
                 Table[{$CellContext`k, $CellContext`k}, {$CellContext`k, 
                   1, $CellContext`size}]]]; If[
               And[
                
                Or[$CellContext`extra == "both", $CellContext`extra == 
                 "antidiagonal"], $CellContext`i + $CellContext`j == \
$CellContext`size + 1], $CellContext`choices = 
               MapAt[DeleteCases[#, $CellContext`n]& , $CellContext`choices, 
                 
                 Table[{$CellContext`k, $CellContext`size + 
                   1 - $CellContext`k}, {$CellContext`k, 
                   1, $CellContext`size}]]]]; 
           Part[$CellContext`result, $CellContext`i, $CellContext`j] = \
$CellContext`n, 
           
           Throw[$CellContext`placednumbers = $CellContext`size^2 + 
             1]]]; $CellContext`singlenumber[
          Pattern[$CellContext`v, 
           Blank[]]] := With[{$CellContext`u = Flatten[
             Cases[
              Split[
               Sort[
                Flatten[$CellContext`v]]], {
               Blank[]}]]}, 
          If[$CellContext`u != {}, 
           With[{$CellContext`w = Part[
               Map[Position[$CellContext`v, #]& , $CellContext`u], All, 1, 
               1]}, 
            If[
             Apply[Unequal, $CellContext`w], 
             ReplacePart[$CellContext`v, 
              Map[List, $CellContext`u], 
              Map[List, $CellContext`w], 
              Map[List, 
               Range[
                Length[$CellContext`u]]]], 
             
             Throw[$CellContext`placednumbers = $CellContext`size^2 + 
               1]]], $CellContext`v]]; $CellContext`reducewith[
          Pattern[$CellContext`rule, 
           Blank[]]] := With[{$CellContext`t = Sqrt[
             Length[$CellContext`choices]]}, $CellContext`choices = 
           Map[$CellContext`rule, $CellContext`choices]; $CellContext`choices = 
           Transpose[
             Map[$CellContext`rule, 
              Transpose[$CellContext`choices]]]; $CellContext`choices = 
           Map[$CellContext`rule, 
             Map[Flatten[#, 1]& , 
              Flatten[
               
               Partition[$CellContext`choices, {$CellContext`t, \
$CellContext`t}], 1]]]; $CellContext`choices = Flatten[
             Map[MapThread[Join, 
               SlotSequence[1]]& , 
              Partition[
               Map[
               Partition[#, $CellContext`t]& , $CellContext`choices], \
$CellContext`t]], 1]; 
          If[$CellContext`placednumbers != 
            Count[$CellContext`choices, {}, {-2}], 
            Throw[$CellContext`placednumbers = $CellContext`size^2 + 
              1]]]; $CellContext`twins[
          Pattern[$CellContext`v, 
           Blank[]]] := With[{$CellContext`z = Cases[
             Split[
              Sort[
               Cases[$CellContext`v, {
                 Blank[], 
                 Blank[]}]]], {
               Pattern[$CellContext`a, 
                Blank[]], 
               Pattern[$CellContext`a, 
                Blank[]]} :> $CellContext`a]}, 
          If[$CellContext`z == {}, $CellContext`v, 
           Map[If[
             MemberQ[$CellContext`z, #], #, 
             Complement[#, 
              
              Flatten[$CellContext`z]]]& , $CellContext`v]]]; \
$CellContext`reducefromblocks := 
        Block[{$CellContext`v, $CellContext`aux}, $CellContext`aux = Partition[
             Range[$CellContext`size], 
             Sqrt[$CellContext`size]]; 
          Do[$CellContext`v = Part[$CellContext`choices, 
               $CellContext`blockposition[{1, 1} + 
                Sqrt[$CellContext`size] {$CellContext`i - 1, $CellContext`j - 
                   1}, $CellContext`size]]; Do[
              With[{$CellContext`w = Complement[
                  Flatten[
                   Part[$CellContext`v, $CellContext`k]], 
                  Flatten[
                   Drop[$CellContext`v, {$CellContext`k}]]]}, 
               
               If[$CellContext`w != {}, 
                Part[$CellContext`choices, $CellContext`k + ($CellContext`i - 
                    1) Sqrt[$CellContext`size]] = 
                Map[Complement[#, $CellContext`w]& , 
                  
                  Part[$CellContext`choices, $CellContext`k + ($CellContext`i - 
                    1) Sqrt[$CellContext`size]]]]], {$CellContext`k, 1, 
               Sqrt[$CellContext`size]}]; $CellContext`v = 
             Transpose[$CellContext`v]; Do[
              With[{$CellContext`w = Complement[
                  Flatten[
                   Part[$CellContext`v, $CellContext`k]], 
                  Flatten[
                   Drop[$CellContext`v, {$CellContext`k}]]]}, 
               
               If[$CellContext`w != {}, 
                Part[$CellContext`choices, 
                  All, $CellContext`k + ($CellContext`j - 1) 
                   Sqrt[$CellContext`size]] = 
                Map[Complement[#, $CellContext`w]& , 
                  
                  Part[$CellContext`choices, 
                   All, $CellContext`k + ($CellContext`j - 1) 
                    Sqrt[$CellContext`size]]]]], {$CellContext`k, 1, 
               Sqrt[$CellContext`size]}]; Part[$CellContext`choices, 
               $CellContext`blockposition[{1, 1} + 
                Sqrt[$CellContext`size] {$CellContext`i - 1, $CellContext`j - 
                   1}, $CellContext`size]] = 
             Transpose[$CellContext`v], {$CellContext`i, 1, 
             Sqrt[$CellContext`size]}, {$CellContext`j, 1, 
             Sqrt[$CellContext`size]}]; 
          If[$CellContext`placednumbers != 
            Count[$CellContext`choices, {}, {-2}], 
            
            Throw[$CellContext`placednumbers = $CellContext`size^2 + 
              1]]]; $CellContext`sudokusolver[
          Pattern[$CellContext`arg, 
           Blank[]], 
          Optional[
           Pattern[$CellContext`nsol, 
            Alternatives[
             Blank[Integer], Infinity]], 1], 
          Optional[
           Pattern[$CellContext`printsplit, 
            Alternatives[True, False]], True], 
          Optional[
           Pattern[$CellContext`extra, 
            Alternatives["", "diagonal", "antidiagonal", "both"]], ""]] := 
        Block[{$CellContext`mat, $CellContext`size, $CellContext`choices, \
$CellContext`tobedone, $CellContext`result, $CellContext`solutions, \
$CellContext`placednumbers, $CellContext`z}, $CellContext`mat = 
           Which[Head[$CellContext`arg] === Grid, 
             Part[$CellContext`arg, 1], Head[$CellContext`arg] === 
             SparseArray, 
             Normal[$CellContext`arg], 
             True, $CellContext`arg]; $CellContext`size = 
           Length[$CellContext`mat]; $CellContext`choices = 
           Array[Range[$CellContext`size]& , {$CellContext`size, \
$CellContext`size}]; $CellContext`result = 
           Array[0& , {$CellContext`size, $CellContext`size}]; $CellContext`z = 
           Position[$CellContext`mat, 
             PatternTest[
              Blank[Integer], Positive]]; $CellContext`placednumbers = 
           Length[$CellContext`z]; 
          Catch[MapThread[$CellContext`placenumber[#, #2, $CellContext`extra]& \
, {
               Extract[$CellContext`mat, $CellContext`z], $CellContext`z}]; 
            If[$CellContext`placednumbers != 
              Count[$CellContext`choices, {}, {-2}], \
$CellContext`placednumbers = $CellContext`size^2 + 
               1]]; $CellContext`solutions = {}; $CellContext`tobedone = 
           If[$CellContext`placednumbers <= $CellContext`size^2, \
{$CellContext`choices}, {}]; $CellContext`splitcounter = 0; While[
            
            And[$CellContext`tobedone != {}, 
             Length[$CellContext`solutions] < $CellContext`nsol], \
$CellContext`choices = 
             Part[$CellContext`tobedone, -1]; $CellContext`placednumbers = 
             Count[$CellContext`choices, {}, {-2}]; Catch[
              $CellContext`reducewith[$CellContext`singlenumber]]; 
            If[$CellContext`placednumbers <= $CellContext`size^2, \
$CellContext`placednumbers = 
              Count[$CellContext`choices, {}, {-2}]]; $CellContext`tobedone = 
             Most[$CellContext`tobedone]; 
            While[$CellContext`placednumbers < $CellContext`size^2, 
              Catch[While[
                 And[($CellContext`z = Position[$CellContext`choices, {
                    
                    Blank[]}]) != {}, $CellContext`placednumbers < \
$CellContext`size^2], $CellContext`placednumbers = $CellContext`placednumbers + 
                   Length[$CellContext`z]; 
                 MapThread[$CellContext`placenumber[#, #2, \
$CellContext`extra]& , {
                    Flatten[
                    
                    Extract[$CellContext`choices, $CellContext`z]], \
$CellContext`z}]; $CellContext`reducewith[$CellContext`singlenumber]]; \
$CellContext`z = $CellContext`choices; \
$CellContext`reducewith[$CellContext`twins]; 
               If[$CellContext`z != $CellContext`choices, 
                 Throw[
                  $CellContext`reducewith[$CellContext`singlenumber]]]; \
$CellContext`reducefromblocks; If[$CellContext`z != $CellContext`choices, 
                 Throw[
                  $CellContext`reducewith[$CellContext`singlenumber]]]; 
               If[$CellContext`placednumbers < $CellContext`size^2, 
                 Increment[$CellContext`splitcounter]; $CellContext`z = Min[
                    ReplaceAll[
                    Map[Length, $CellContext`choices, {2}], 
                    0 -> $CellContext`size + 1]]; $CellContext`z = 
                  Position[$CellContext`choices, 
                    PatternTest[
                    Blank[], 
                    Length[#] == $CellContext`z& ], {-2}]; $CellContext`pos = \
{{0, 0}, 3 $CellContext`size}; Do[
                   With[{$CellContext`m = Count[{
                    Part[$CellContext`choices, 
                    Part[$CellContext`z, $CellContext`i, 1]], 
                    Part[$CellContext`choices, All, 
                    Part[$CellContext`z, $CellContext`i, 2]], 
                    Part[$CellContext`choices, 
                    $CellContext`blockposition[
                    
                    Part[$CellContext`z, $CellContext`i], \
$CellContext`size]]}, {}, {-2}]}, 
                    
                    If[$CellContext`m < 
                    Part[$CellContext`pos, 2], $CellContext`pos = {
                    
                    Part[$CellContext`z, $CellContext`i], $CellContext`m}]], \
{$CellContext`i, 1, 
                    Length[$CellContext`z]}]; $CellContext`pos = 
                  Part[$CellContext`pos, 1]; AppendTo[$CellContext`tobedone, 
                   ReplacePart[$CellContext`choices, 
                    Rest[
                    Part[$CellContext`choices, 
                    Part[$CellContext`pos, 1], 
                    Part[$CellContext`pos, 2]]], $CellContext`pos]]; 
                 Part[$CellContext`choices, 
                    Part[$CellContext`pos, 1], 
                    Part[$CellContext`pos, 2]] = Take[
                    Part[$CellContext`choices, 
                    Part[$CellContext`pos, 1], 
                    Part[$CellContext`pos, 2]], 1]]]]; 
            If[$CellContext`placednumbers == $CellContext`size^2, 
              AppendTo[$CellContext`solutions, $CellContext`result]]]; If[
            And[$CellContext`nsol == 1, $CellContext`solutions != {}], 
            
            Part[$CellContext`solutions, 
             1], $CellContext`solutions]]; $CellContext`check[
          Pattern[$CellContext`attempt, 
           Blank[]]] := 
        Module[{$CellContext`n = Length[$CellContext`attempt]}, 
          And[
           Apply[And, 
            Table[Sort[
               Part[$CellContext`attempt, $CellContext`k]] == 
             Range[$CellContext`n], {$CellContext`k, $CellContext`n}]], 
           Apply[And, 
            Table[Sort[
               Part[$CellContext`attempt, All, $CellContext`k]] == 
             Range[$CellContext`n], {$CellContext`k, $CellContext`n}]], 
           Apply[And, 
            Flatten[
             Table[Sort[
                Flatten[
                 Table[
                  
                  Part[$CellContext`attempt, $CellContext`i + \
$CellContext`ii, $CellContext`j + $CellContext`jj], {$CellContext`i, 
                   1, $CellContext`n^Rational[1, 2]}, {$CellContext`j, 
                   1, $CellContext`n^Rational[1, 2]}]]] == 
              Range[$CellContext`n], {$CellContext`ii, 
               Range[
               0, $CellContext`n - 1, $CellContext`n^
                Rational[1, 2]]}, {$CellContext`jj, 
               Range[
               0, $CellContext`n - 1, $CellContext`n^
                Rational[1, 2]]}]]]]]; $CellContext`sudokuForm[
          Pattern[$CellContext`mat, 
           Blank[]]] := 
        Module[{$CellContext`t = 
           Length[$CellContext`mat], $CellContext`styles}, \
$CellContext`styles = {{
              Thickness[2], 
              Apply[Sequence, 
               Table[True, {Sqrt[$CellContext`t] - 1}]]}}; Style[
            
            Grid[$CellContext`mat, 
             Dividers -> {$CellContext`styles, $CellContext`styles}, 
             Background -> {Automatic, Automatic, 
               Flatten[
                Table[{$CellContext`i, $CellContext`j} -> If[
                   EvenQ[
                    Apply[Plus, 
                    
                    Floor[{$CellContext`i - 1, $CellContext`j - 
                    1}/$CellContext`t^Rational[1, 2]]]], 
                   Darker[White, 0.3], 
                   White], {$CellContext`i, $CellContext`t}, {$CellContext`j, \
$CellContext`t}]]}, ItemSize -> {1.8, 1.8}], 14, "Label"]]; Null}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->841489209],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`difficulty$$ = 58, $CellContext`sol$$ = " ",
     Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`difficulty$$], 58}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 
      11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 
      29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 
      47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60}}, {{
       Hold[$CellContext`sol$$], " "}}}, Typeset`size$$ = {
    588., {182., 187.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`difficulty$128262$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`difficulty$$ = 58, $CellContext`sol$$ = 
        " "}, "ControllerVariables" :> {
        Hold[$CellContext`difficulty$$, $CellContext`difficulty$128262$$, 0]},
       "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      DynamicModule[{$CellContext`n = 9, $CellContext`color = 
         RGBColor[
          0.1, 0.2, 
           0.8], $CellContext`seed, $CellContext`solution, \
$CellContext`fields, $CellContext`game, $CellContext`pos, $CellContext`x1, \
$CellContext`x2, $CellContext`x3, $CellContext`x4, $CellContext`x5, \
$CellContext`x6, $CellContext`x7, $CellContext`x8, $CellContext`x9, \
$CellContext`x10, $CellContext`x11, $CellContext`x12, $CellContext`x13, \
$CellContext`x14, $CellContext`x15, $CellContext`x16, $CellContext`x17, \
$CellContext`x18, $CellContext`x19, $CellContext`x20, $CellContext`x21, \
$CellContext`x22, $CellContext`x23, $CellContext`x24, $CellContext`x25, \
$CellContext`x26, $CellContext`x27, $CellContext`x28, $CellContext`x29, \
$CellContext`x30, $CellContext`x31, $CellContext`x32, $CellContext`x33, \
$CellContext`x34, $CellContext`x35, $CellContext`x36, $CellContext`x37, \
$CellContext`x38, $CellContext`x39, $CellContext`x40, $CellContext`x41, \
$CellContext`x42, $CellContext`x43, $CellContext`x44, $CellContext`x45, \
$CellContext`x46, $CellContext`x47, $CellContext`x48, $CellContext`x49, \
$CellContext`x50, $CellContext`x51, $CellContext`x52, $CellContext`x53, \
$CellContext`x54, $CellContext`x55, $CellContext`x56, $CellContext`x57, \
$CellContext`x58, $CellContext`x59, $CellContext`x60}, $CellContext`seed = 
         ReplacePart[
           Table["", {$CellContext`n}, {$CellContext`n}], 
           Thread[RandomSample[
              Tuples[
               Range[$CellContext`n], 2], $CellContext`n] -> 
            Range[$CellContext`n]]]; $CellContext`solution = \
$CellContext`sudokusolver[$CellContext`seed]; $CellContext`fields = 
         Take[{$CellContext`x1, $CellContext`x2, $CellContext`x3, \
$CellContext`x4, $CellContext`x5, $CellContext`x6, $CellContext`x7, \
$CellContext`x8, $CellContext`x9, $CellContext`x10, $CellContext`x11, \
$CellContext`x12, $CellContext`x13, $CellContext`x14, $CellContext`x15, \
$CellContext`x16, $CellContext`x17, $CellContext`x18, $CellContext`x19, \
$CellContext`x20, $CellContext`x21, $CellContext`x22, $CellContext`x23, \
$CellContext`x24, $CellContext`x25, $CellContext`x26, $CellContext`x27, \
$CellContext`x28, $CellContext`x29, $CellContext`x30, $CellContext`x31, \
$CellContext`x32, $CellContext`x33, $CellContext`x34, $CellContext`x35, \
$CellContext`x36, $CellContext`x37, $CellContext`x38, $CellContext`x39, \
$CellContext`x40, $CellContext`x41, $CellContext`x42, $CellContext`x43, \
$CellContext`x44, $CellContext`x45, $CellContext`x46, $CellContext`x47, \
$CellContext`x48, $CellContext`x49, $CellContext`x50, $CellContext`x51, \
$CellContext`x52, $CellContext`x53, $CellContext`x54, $CellContext`x55, \
$CellContext`x56, $CellContext`x57, $CellContext`x58, $CellContext`x59, \
$CellContext`x60}, $CellContext`difficulty$$]; $CellContext`game = 
         ReplacePart[$CellContext`solution, 
           Thread[($CellContext`pos = RandomSample[
               Tuples[
                Range[$CellContext`n], 2], $CellContext`difficulty$$]) -> 
            Map[PopupMenu[
               Dynamic[#], 
               Prepend[
                Range[9], "   "], BaseStyle -> {$CellContext`color, 14}, 
               Appearance -> None, FrameMargins -> 
               0]& , $CellContext`fields]]]; Deploy[
          Grid[{{
             Button[
             "new puzzle", $CellContext`sol$$ = " "; $CellContext`seed = 
               ReplacePart[
                 Table["", {$CellContext`n}, {$CellContext`n}], 
                 Thread[RandomSample[
                    Tuples[
                    Range[$CellContext`n], 2], $CellContext`n] -> 
                  Range[$CellContext`n]]]; $CellContext`solution = \
$CellContext`sudokusolver[$CellContext`seed]; 
              Clear[$CellContext`x1, $CellContext`x2, $CellContext`x3, \
$CellContext`x4, $CellContext`x5, $CellContext`x6, $CellContext`x7, \
$CellContext`x8, $CellContext`x9, $CellContext`x10, $CellContext`x11, \
$CellContext`x12, $CellContext`x13, $CellContext`x14, $CellContext`x15, \
$CellContext`x16, $CellContext`x17, $CellContext`x18, $CellContext`x19, \
$CellContext`x20, $CellContext`x21, $CellContext`x22, $CellContext`x23, \
$CellContext`x24, $CellContext`x25, $CellContext`x26, $CellContext`x27, \
$CellContext`x28, $CellContext`x29, $CellContext`x30, $CellContext`x31, \
$CellContext`x32, $CellContext`x33, $CellContext`x34, $CellContext`x35, \
$CellContext`x36, $CellContext`x37, $CellContext`x38, $CellContext`x39, \
$CellContext`x40, $CellContext`x41, $CellContext`x42, $CellContext`x43, \
$CellContext`x44, $CellContext`x45, $CellContext`x46, $CellContext`x47, \
$CellContext`x48, $CellContext`x49, $CellContext`x50, $CellContext`x51, \
$CellContext`x52, $CellContext`x53, $CellContext`x54, $CellContext`x55]; \
$CellContext`fields = 
               Take[{$CellContext`x1, $CellContext`x2, $CellContext`x3, \
$CellContext`x4, $CellContext`x5, $CellContext`x6, $CellContext`x7, \
$CellContext`x8, $CellContext`x9, $CellContext`x10, $CellContext`x11, \
$CellContext`x12, $CellContext`x13, $CellContext`x14, $CellContext`x15, \
$CellContext`x16, $CellContext`x17, $CellContext`x18, $CellContext`x19, \
$CellContext`x20, $CellContext`x21, $CellContext`x22, $CellContext`x23, \
$CellContext`x24, $CellContext`x25, $CellContext`x26, $CellContext`x27, \
$CellContext`x28, $CellContext`x29, $CellContext`x30, $CellContext`x31, \
$CellContext`x32, $CellContext`x33, $CellContext`x34, $CellContext`x35, \
$CellContext`x36, $CellContext`x37, $CellContext`x38, $CellContext`x39, \
$CellContext`x40, $CellContext`x41, $CellContext`x42, $CellContext`x43, \
$CellContext`x44, $CellContext`x45, $CellContext`x46, $CellContext`x47, \
$CellContext`x48, $CellContext`x49, $CellContext`x50, $CellContext`x51, \
$CellContext`x52, $CellContext`x53, $CellContext`x54, $CellContext`x55, \
$CellContext`x56, $CellContext`x57, $CellContext`x58, $CellContext`x59, \
$CellContext`x60}, $CellContext`difficulty$$]; $CellContext`game = 
               ReplacePart[$CellContext`solution, 
                 Thread[($CellContext`pos = RandomSample[
                    Tuples[
                    Range[$CellContext`n], 2], $CellContext`difficulty$$]) -> 
                  Map[PopupMenu[
                    Dynamic[#], 
                    Prepend[
                    Range[9], "   "], BaseStyle -> {$CellContext`color, 14}, 
                    Appearance -> None, FrameMargins -> 
                    0]& , $CellContext`fields]]]; Null], 
             Button["check", 
              If[
               $CellContext`check[
                ReplacePart[$CellContext`game, 
                 
                 Thread[$CellContext`pos -> $CellContext`fields]]], \
$CellContext`sol$$ = 
               Style["Congratulations!", 14, "Label"], $CellContext`sol$$ = 
               Style["Nope, try again", 14, "Label"]]]}, {
             Dynamic[
              $CellContext`sudokuForm[$CellContext`game]], 
             Dynamic[$CellContext`sol$$]}, {
             Button[
             "show solution", $CellContext`sol$$ = $CellContext`sudokuForm[
                ReplacePart[$CellContext`solution, 
                 Thread[$CellContext`pos -> Map[Style[
                    Part[$CellContext`solution, 
                    Apply[
                    Sequence, #]], $CellContext`color]& , \
$CellContext`pos]]]]], 
             Button["hide solution", $CellContext`sol$$ = " "]}}, 
           ItemSize -> {{23, 23}, {2, 20, 2}}]]], 
      "Specifications" :> {{{$CellContext`difficulty$$, 58}, {1, 2, 3, 4, 5, 
         6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 
         24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 
         41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 
         58, 59, 60}}, {{$CellContext`sol$$, " "}, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`difficulty$$}, 
        AutorunSequencing -> {1}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{635., {226., 231.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`blockposition[{
           Pattern[$CellContext`i, 
            Blank[]], 
           Pattern[$CellContext`j, 
            Blank[]]}, 
          Pattern[$CellContext`size, 
           
           Blank[]]] := ($CellContext`blockposition[{$CellContext`i, \
$CellContext`j}, $CellContext`size] = Apply[Sequence, 
           Part[
            Partition[
             Range[$CellContext`size], 
             Sqrt[$CellContext`size]], 
            Map[
            Ceiling, {$CellContext`i, $CellContext`j}/
             Sqrt[$CellContext`size]]]]); $CellContext`placenumber[
          Pattern[$CellContext`n, 
           Blank[]], {
           Pattern[$CellContext`i, 
            Blank[]], 
           Pattern[$CellContext`j, 
            Blank[]]}, 
          Optional[
           Pattern[$CellContext`extra, 
            Blank[String]], ""]] := 
        Block[{$CellContext`size = Length[$CellContext`choices]}, 
          If[
           MemberQ[
            
            Part[$CellContext`choices, $CellContext`i, $CellContext`j], \
$CellContext`n], 
           Part[$CellContext`choices, $CellContext`i, $CellContext`j] = {}; 
           Part[$CellContext`choices, $CellContext`i] = 
            Map[DeleteCases[#, $CellContext`n]& , 
              Part[$CellContext`choices, $CellContext`i]]; 
           Part[$CellContext`choices, All, $CellContext`j] = 
            Map[DeleteCases[#, $CellContext`n]& , 
              Part[$CellContext`choices, All, $CellContext`j]]; 
           Part[$CellContext`choices, 
              $CellContext`blockposition[{$CellContext`i, $CellContext`j}, \
$CellContext`size]] = Map[DeleteCases[#, $CellContext`n]& , 
              Part[$CellContext`choices, 
               $CellContext`blockposition[{$CellContext`i, $CellContext`j}, \
$CellContext`size]], {2}]; If[$CellContext`extra != "", If[
               And[
                
                Or[$CellContext`extra == "both", $CellContext`extra == 
                 "diagonal"], $CellContext`i == $CellContext`j], \
$CellContext`choices = 
               MapAt[DeleteCases[#, $CellContext`n]& , $CellContext`choices, 
                 
                 Table[{$CellContext`k, $CellContext`k}, {$CellContext`k, 
                   1, $CellContext`size}]]]; If[
               And[
                
                Or[$CellContext`extra == "both", $CellContext`extra == 
                 "antidiagonal"], $CellContext`i + $CellContext`j == \
$CellContext`size + 1], $CellContext`choices = 
               MapAt[DeleteCases[#, $CellContext`n]& , $CellContext`choices, 
                 
                 Table[{$CellContext`k, $CellContext`size + 
                   1 - $CellContext`k}, {$CellContext`k, 
                   1, $CellContext`size}]]]]; 
           Part[$CellContext`result, $CellContext`i, $CellContext`j] = \
$CellContext`n, 
           
           Throw[$CellContext`placednumbers = $CellContext`size^2 + 
             1]]]; $CellContext`singlenumber[
          Pattern[$CellContext`v, 
           Blank[]]] := With[{$CellContext`u = Flatten[
             Cases[
              Split[
               Sort[
                Flatten[$CellContext`v]]], {
               Blank[]}]]}, 
          If[$CellContext`u != {}, 
           With[{$CellContext`w = Part[
               Map[Position[$CellContext`v, #]& , $CellContext`u], All, 1, 
               1]}, 
            If[
             Apply[Unequal, $CellContext`w], 
             ReplacePart[$CellContext`v, 
              Map[List, $CellContext`u], 
              Map[List, $CellContext`w], 
              Map[List, 
               Range[
                Length[$CellContext`u]]]], 
             
             Throw[$CellContext`placednumbers = $CellContext`size^2 + 
               1]]], $CellContext`v]]; $CellContext`reducewith[
          Pattern[$CellContext`rule, 
           Blank[]]] := With[{$CellContext`t = Sqrt[
             Length[$CellContext`choices]]}, $CellContext`choices = 
           Map[$CellContext`rule, $CellContext`choices]; $CellContext`choices = 
           Transpose[
             Map[$CellContext`rule, 
              Transpose[$CellContext`choices]]]; $CellContext`choices = 
           Map[$CellContext`rule, 
             Map[Flatten[#, 1]& , 
              Flatten[
               
               Partition[$CellContext`choices, {$CellContext`t, \
$CellContext`t}], 1]]]; $CellContext`choices = Flatten[
             Map[MapThread[Join, 
               SlotSequence[1]]& , 
              Partition[
               Map[
               Partition[#, $CellContext`t]& , $CellContext`choices], \
$CellContext`t]], 1]; 
          If[$CellContext`placednumbers != 
            Count[$CellContext`choices, {}, {-2}], 
            Throw[$CellContext`placednumbers = $CellContext`size^2 + 
              1]]]; $CellContext`twins[
          Pattern[$CellContext`v, 
           Blank[]]] := With[{$CellContext`z = Cases[
             Split[
              Sort[
               Cases[$CellContext`v, {
                 Blank[], 
                 Blank[]}]]], {
               Pattern[$CellContext`a, 
                Blank[]], 
               Pattern[$CellContext`a, 
                Blank[]]} :> $CellContext`a]}, 
          If[$CellContext`z == {}, $CellContext`v, 
           Map[If[
             MemberQ[$CellContext`z, #], #, 
             Complement[#, 
              
              Flatten[$CellContext`z]]]& , $CellContext`v]]]; \
$CellContext`reducefromblocks := 
        Block[{$CellContext`v, $CellContext`aux}, $CellContext`aux = Partition[
             Range[$CellContext`size], 
             Sqrt[$CellContext`size]]; 
          Do[$CellContext`v = Part[$CellContext`choices, 
               $CellContext`blockposition[{1, 1} + 
                Sqrt[$CellContext`size] {$CellContext`i - 1, $CellContext`j - 
                   1}, $CellContext`size]]; Do[
              With[{$CellContext`w = Complement[
                  Flatten[
                   Part[$CellContext`v, $CellContext`k]], 
                  Flatten[
                   Drop[$CellContext`v, {$CellContext`k}]]]}, 
               
               If[$CellContext`w != {}, 
                Part[$CellContext`choices, $CellContext`k + ($CellContext`i - 
                    1) Sqrt[$CellContext`size]] = 
                Map[Complement[#, $CellContext`w]& , 
                  
                  Part[$CellContext`choices, $CellContext`k + ($CellContext`i - 
                    1) Sqrt[$CellContext`size]]]]], {$CellContext`k, 1, 
               Sqrt[$CellContext`size]}]; $CellContext`v = 
             Transpose[$CellContext`v]; Do[
              With[{$CellContext`w = Complement[
                  Flatten[
                   Part[$CellContext`v, $CellContext`k]], 
                  Flatten[
                   Drop[$CellContext`v, {$CellContext`k}]]]}, 
               
               If[$CellContext`w != {}, 
                Part[$CellContext`choices, 
                  All, $CellContext`k + ($CellContext`j - 1) 
                   Sqrt[$CellContext`size]] = 
                Map[Complement[#, $CellContext`w]& , 
                  
                  Part[$CellContext`choices, 
                   All, $CellContext`k + ($CellContext`j - 1) 
                    Sqrt[$CellContext`size]]]]], {$CellContext`k, 1, 
               Sqrt[$CellContext`size]}]; Part[$CellContext`choices, 
               $CellContext`blockposition[{1, 1} + 
                Sqrt[$CellContext`size] {$CellContext`i - 1, $CellContext`j - 
                   1}, $CellContext`size]] = 
             Transpose[$CellContext`v], {$CellContext`i, 1, 
             Sqrt[$CellContext`size]}, {$CellContext`j, 1, 
             Sqrt[$CellContext`size]}]; 
          If[$CellContext`placednumbers != 
            Count[$CellContext`choices, {}, {-2}], 
            
            Throw[$CellContext`placednumbers = $CellContext`size^2 + 
              1]]]; $CellContext`sudokusolver[
          Pattern[$CellContext`arg, 
           Blank[]], 
          Optional[
           Pattern[$CellContext`nsol, 
            Alternatives[
             Blank[Integer], Infinity]], 1], 
          Optional[
           Pattern[$CellContext`printsplit, 
            Alternatives[True, False]], True], 
          Optional[
           Pattern[$CellContext`extra, 
            Alternatives["", "diagonal", "antidiagonal", "both"]], ""]] := 
        Block[{$CellContext`mat, $CellContext`size, $CellContext`choices, \
$CellContext`tobedone, $CellContext`result, $CellContext`solutions, \
$CellContext`placednumbers, $CellContext`z}, $CellContext`mat = 
           Which[Head[$CellContext`arg] === Grid, 
             Part[$CellContext`arg, 1], Head[$CellContext`arg] === 
             SparseArray, 
             Normal[$CellContext`arg], 
             True, $CellContext`arg]; $CellContext`size = 
           Length[$CellContext`mat]; $CellContext`choices = 
           Array[Range[$CellContext`size]& , {$CellContext`size, \
$CellContext`size}]; $CellContext`result = 
           Array[0& , {$CellContext`size, $CellContext`size}]; $CellContext`z = 
           Position[$CellContext`mat, 
             PatternTest[
              Blank[Integer], Positive]]; $CellContext`placednumbers = 
           Length[$CellContext`z]; 
          Catch[MapThread[$CellContext`placenumber[#, #2, $CellContext`extra]& \
, {
               Extract[$CellContext`mat, $CellContext`z], $CellContext`z}]; 
            If[$CellContext`placednumbers != 
              Count[$CellContext`choices, {}, {-2}], \
$CellContext`placednumbers = $CellContext`size^2 + 
               1]]; $CellContext`solutions = {}; $CellContext`tobedone = 
           If[$CellContext`placednumbers <= $CellContext`size^2, \
{$CellContext`choices}, {}]; $CellContext`splitcounter = 0; While[
            
            And[$CellContext`tobedone != {}, 
             Length[$CellContext`solutions] < $CellContext`nsol], \
$CellContext`choices = 
             Part[$CellContext`tobedone, -1]; $CellContext`placednumbers = 
             Count[$CellContext`choices, {}, {-2}]; Catch[
              $CellContext`reducewith[$CellContext`singlenumber]]; 
            If[$CellContext`placednumbers <= $CellContext`size^2, \
$CellContext`placednumbers = 
              Count[$CellContext`choices, {}, {-2}]]; $CellContext`tobedone = 
             Most[$CellContext`tobedone]; 
            While[$CellContext`placednumbers < $CellContext`size^2, 
              Catch[While[
                 And[($CellContext`z = Position[$CellContext`choices, {
                    
                    Blank[]}]) != {}, $CellContext`placednumbers < \
$CellContext`size^2], $CellContext`placednumbers = $CellContext`placednumbers + 
                   Length[$CellContext`z]; 
                 MapThread[$CellContext`placenumber[#, #2, \
$CellContext`extra]& , {
                    Flatten[
                    
                    Extract[$CellContext`choices, $CellContext`z]], \
$CellContext`z}]; $CellContext`reducewith[$CellContext`singlenumber]]; \
$CellContext`z = $CellContext`choices; \
$CellContext`reducewith[$CellContext`twins]; 
               If[$CellContext`z != $CellContext`choices, 
                 Throw[
                  $CellContext`reducewith[$CellContext`singlenumber]]]; \
$CellContext`reducefromblocks; If[$CellContext`z != $CellContext`choices, 
                 Throw[
                  $CellContext`reducewith[$CellContext`singlenumber]]]; 
               If[$CellContext`placednumbers < $CellContext`size^2, 
                 Increment[$CellContext`splitcounter]; $CellContext`z = Min[
                    ReplaceAll[
                    Map[Length, $CellContext`choices, {2}], 
                    0 -> $CellContext`size + 1]]; $CellContext`z = 
                  Position[$CellContext`choices, 
                    PatternTest[
                    Blank[], 
                    Length[#] == $CellContext`z& ], {-2}]; $CellContext`pos = \
{{0, 0}, 3 $CellContext`size}; Do[
                   With[{$CellContext`m = Count[{
                    Part[$CellContext`choices, 
                    Part[$CellContext`z, $CellContext`i, 1]], 
                    Part[$CellContext`choices, All, 
                    Part[$CellContext`z, $CellContext`i, 2]], 
                    Part[$CellContext`choices, 
                    $CellContext`blockposition[
                    
                    Part[$CellContext`z, $CellContext`i], \
$CellContext`size]]}, {}, {-2}]}, 
                    
                    If[$CellContext`m < 
                    Part[$CellContext`pos, 2], $CellContext`pos = {
                    
                    Part[$CellContext`z, $CellContext`i], $CellContext`m}]], \
{$CellContext`i, 1, 
                    Length[$CellContext`z]}]; $CellContext`pos = 
                  Part[$CellContext`pos, 1]; AppendTo[$CellContext`tobedone, 
                   ReplacePart[$CellContext`choices, 
                    Rest[
                    Part[$CellContext`choices, 
                    Part[$CellContext`pos, 1], 
                    Part[$CellContext`pos, 2]]], $CellContext`pos]]; 
                 Part[$CellContext`choices, 
                    Part[$CellContext`pos, 1], 
                    Part[$CellContext`pos, 2]] = Take[
                    Part[$CellContext`choices, 
                    Part[$CellContext`pos, 1], 
                    Part[$CellContext`pos, 2]], 1]]]]; 
            If[$CellContext`placednumbers == $CellContext`size^2, 
              AppendTo[$CellContext`solutions, $CellContext`result]]]; If[
            And[$CellContext`nsol == 1, $CellContext`solutions != {}], 
            
            Part[$CellContext`solutions, 
             1], $CellContext`solutions]]; $CellContext`check[
          Pattern[$CellContext`attempt, 
           Blank[]]] := 
        Module[{$CellContext`n = Length[$CellContext`attempt]}, 
          And[
           Apply[And, 
            Table[Sort[
               Part[$CellContext`attempt, $CellContext`k]] == 
             Range[$CellContext`n], {$CellContext`k, $CellContext`n}]], 
           Apply[And, 
            Table[Sort[
               Part[$CellContext`attempt, All, $CellContext`k]] == 
             Range[$CellContext`n], {$CellContext`k, $CellContext`n}]], 
           Apply[And, 
            Flatten[
             Table[Sort[
                Flatten[
                 Table[
                  
                  Part[$CellContext`attempt, $CellContext`i + \
$CellContext`ii, $CellContext`j + $CellContext`jj], {$CellContext`i, 
                   1, $CellContext`n^Rational[1, 2]}, {$CellContext`j, 
                   1, $CellContext`n^Rational[1, 2]}]]] == 
              Range[$CellContext`n], {$CellContext`ii, 
               Range[
               0, $CellContext`n - 1, $CellContext`n^
                Rational[1, 2]]}, {$CellContext`jj, 
               Range[
               0, $CellContext`n - 1, $CellContext`n^
                Rational[1, 2]]}]]]]]; $CellContext`sudokuForm[
          Pattern[$CellContext`mat, 
           Blank[]]] := 
        Module[{$CellContext`t = 
           Length[$CellContext`mat], $CellContext`styles}, \
$CellContext`styles = {{
              Thickness[2], 
              Apply[Sequence, 
               Table[True, {Sqrt[$CellContext`t] - 1}]]}}; Style[
            
            Grid[$CellContext`mat, 
             Dividers -> {$CellContext`styles, $CellContext`styles}, 
             Background -> {Automatic, Automatic, 
               Flatten[
                Table[{$CellContext`i, $CellContext`j} -> If[
                   EvenQ[
                    Apply[Plus, 
                    
                    Floor[{$CellContext`i - 1, $CellContext`j - 
                    1}/$CellContext`t^Rational[1, 2]]]], 
                   Darker[White, 0.3], 
                   White], {$CellContext`i, $CellContext`t}, {$CellContext`j, \
$CellContext`t}]]}, ItemSize -> {1.8, 1.8}], 14, "Label"]]; Null}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->779203114],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`difficulty$$ = 40, $CellContext`sol$$ = 
    Style[
     Grid[{{7, 5, 
        Style[8, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[9, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[6, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[3, 
         RGBColor[0.1, 0.2, 0.8]], 2, 
        Style[1, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[4, 
         RGBColor[0.1, 0.2, 0.8]]}, {9, 3, 
        Style[6, 
         RGBColor[0.1, 0.2, 0.8]], 4, 
        Style[2, 
         RGBColor[0.1, 0.2, 0.8]], 1, 
        Style[5, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[7, 
         RGBColor[0.1, 0.2, 0.8]], 8}, {
        Style[2, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[1, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[4, 
         RGBColor[0.1, 0.2, 0.8]], 5, 7, 8, 3, 
        Style[9, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[6, 
         RGBColor[0.1, 0.2, 0.8]]}, {4, 2, 1, 6, 
        Style[8, 
         RGBColor[0.1, 0.2, 0.8]], 9, 7, 
        Style[3, 
         RGBColor[0.1, 0.2, 0.8]], 5}, {
        Style[5, 
         RGBColor[0.1, 0.2, 0.8]], 8, 7, 
        Style[1, 
         RGBColor[0.1, 0.2, 0.8]], 3, 
        Style[2, 
         RGBColor[0.1, 0.2, 0.8]], 4, 
        Style[6, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[9, 
         RGBColor[0.1, 0.2, 0.8]]}, {6, 
        Style[9, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[3, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[7, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[5, 
         RGBColor[0.1, 0.2, 0.8]], 4, 8, 2, 1}, {
        Style[8, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[7, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[9, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[2, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[4, 
         RGBColor[0.1, 0.2, 0.8]], 6, 1, 
        Style[5, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[3, 
         RGBColor[0.1, 0.2, 0.8]]}, {3, 6, 2, 
        Style[8, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[1, 
         RGBColor[0.1, 0.2, 0.8]], 5, 
        Style[9, 
         RGBColor[0.1, 0.2, 0.8]], 4, 
        Style[7, 
         RGBColor[0.1, 0.2, 0.8]]}, {
        Style[1, 
         RGBColor[0.1, 0.2, 0.8]], 4, 5, 
        Style[3, 
         RGBColor[0.1, 0.2, 0.8]], 
        Style[9, 
         RGBColor[0.1, 0.2, 0.8]], 7, 6, 8, 2}}, Dividers -> {{{
          Thickness[2], True, True}}, {{
          Thickness[2], True, True}}}, 
      Background -> {
       Automatic, 
        Automatic, {{1, 1} -> RGBColor[0.7, 0.7, 0.7], {1, 2} -> 
         RGBColor[0.7, 0.7, 0.7], {1, 3} -> RGBColor[0.7, 0.7, 0.7], {1, 4} -> 
         GrayLevel[1], {1, 5} -> GrayLevel[1], {1, 6} -> GrayLevel[1], {1, 7} -> 
         RGBColor[0.7, 0.7, 0.7], {1, 8} -> RGBColor[0.7, 0.7, 0.7], {1, 9} -> 
         RGBColor[0.7, 0.7, 0.7], {2, 1} -> RGBColor[0.7, 0.7, 0.7], {2, 2} -> 
         RGBColor[0.7, 0.7, 0.7], {2, 3} -> RGBColor[0.7, 0.7, 0.7], {2, 4} -> 
         GrayLevel[1], {2, 5} -> GrayLevel[1], {2, 6} -> GrayLevel[1], {2, 7} -> 
         RGBColor[0.7, 0.7, 0.7], {2, 8} -> RGBColor[0.7, 0.7, 0.7], {2, 9} -> 
         RGBColor[0.7, 0.7, 0.7], {3, 1} -> RGBColor[0.7, 0.7, 0.7], {3, 2} -> 
         RGBColor[0.7, 0.7, 0.7], {3, 3} -> RGBColor[0.7, 0.7, 0.7], {3, 4} -> 
         GrayLevel[1], {3, 5} -> GrayLevel[1], {3, 6} -> GrayLevel[1], {3, 7} -> 
         RGBColor[0.7, 0.7, 0.7], {3, 8} -> RGBColor[0.7, 0.7, 0.7], {3, 9} -> 
         RGBColor[0.7, 0.7, 0.7], {4, 1} -> GrayLevel[1], {4, 2} -> 
         GrayLevel[1], {4, 3} -> GrayLevel[1], {4, 4} -> 
         RGBColor[0.7, 0.7, 0.7], {4, 5} -> RGBColor[0.7, 0.7, 0.7], {4, 6} -> 
         RGBColor[0.7, 0.7, 0.7], {4, 7} -> GrayLevel[1], {4, 8} -> 
         GrayLevel[1], {4, 9} -> GrayLevel[1], {5, 1} -> GrayLevel[1], {5, 2} -> 
         GrayLevel[1], {5, 3} -> GrayLevel[1], {5, 4} -> 
         RGBColor[0.7, 0.7, 0.7], {5, 5} -> RGBColor[0.7, 0.7, 0.7], {5, 6} -> 
         RGBColor[0.7, 0.7, 0.7], {5, 7} -> GrayLevel[1], {5, 8} -> 
         GrayLevel[1], {5, 9} -> GrayLevel[1], {6, 1} -> GrayLevel[1], {6, 2} -> 
         GrayLevel[1], {6, 3} -> GrayLevel[1], {6, 4} -> 
         RGBColor[0.7, 0.7, 0.7], {6, 5} -> RGBColor[0.7, 0.7, 0.7], {6, 6} -> 
         RGBColor[0.7, 0.7, 0.7], {6, 7} -> GrayLevel[1], {6, 8} -> 
         GrayLevel[1], {6, 9} -> GrayLevel[1], {7, 1} -> 
         RGBColor[0.7, 0.7, 0.7], {7, 2} -> RGBColor[0.7, 0.7, 0.7], {7, 3} -> 
         RGBColor[0.7, 0.7, 0.7], {7, 4} -> GrayLevel[1], {7, 5} -> 
         GrayLevel[1], {7, 6} -> GrayLevel[1], {7, 7} -> 
         RGBColor[0.7, 0.7, 0.7], {7, 8} -> RGBColor[0.7, 0.7, 0.7], {7, 9} -> 
         RGBColor[0.7, 0.7, 0.7], {8, 1} -> RGBColor[0.7, 0.7, 0.7], {8, 2} -> 
         RGBColor[0.7, 0.7, 0.7], {8, 3} -> RGBColor[0.7, 0.7, 0.7], {8, 4} -> 
         GrayLevel[1], {8, 5} -> GrayLevel[1], {8, 6} -> GrayLevel[1], {8, 7} -> 
         RGBColor[0.7, 0.7, 0.7], {8, 8} -> RGBColor[0.7, 0.7, 0.7], {8, 9} -> 
         RGBColor[0.7, 0.7, 0.7], {9, 1} -> RGBColor[0.7, 0.7, 0.7], {9, 2} -> 
         RGBColor[0.7, 0.7, 0.7], {9, 3} -> RGBColor[0.7, 0.7, 0.7], {9, 4} -> 
         GrayLevel[1], {9, 5} -> GrayLevel[1], {9, 6} -> GrayLevel[1], {9, 7} -> 
         RGBColor[0.7, 0.7, 0.7], {9, 8} -> RGBColor[0.7, 0.7, 0.7], {9, 9} -> 
         RGBColor[0.7, 0.7, 0.7]}}, ItemSize -> {1.8, 1.8}], 14, "Label"], 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`difficulty$$], 40}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 
      11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 
      29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 
      47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60}}, {{
       Hold[$CellContext`sol$$], 
       Style[
        Grid[{{7, 5, 
           Style[8, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[9, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[6, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[3, 
            RGBColor[0.1, 0.2, 0.8]], 2, 
           Style[1, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[4, 
            RGBColor[0.1, 0.2, 0.8]]}, {9, 3, 
           Style[6, 
            RGBColor[0.1, 0.2, 0.8]], 4, 
           Style[2, 
            RGBColor[0.1, 0.2, 0.8]], 1, 
           Style[5, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[7, 
            RGBColor[0.1, 0.2, 0.8]], 8}, {
           Style[2, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[1, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[4, 
            RGBColor[0.1, 0.2, 0.8]], 5, 7, 8, 3, 
           Style[9, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[6, 
            RGBColor[0.1, 0.2, 0.8]]}, {4, 2, 1, 6, 
           Style[8, 
            RGBColor[0.1, 0.2, 0.8]], 9, 7, 
           Style[3, 
            RGBColor[0.1, 0.2, 0.8]], 5}, {
           Style[5, 
            RGBColor[0.1, 0.2, 0.8]], 8, 7, 
           Style[1, 
            RGBColor[0.1, 0.2, 0.8]], 3, 
           Style[2, 
            RGBColor[0.1, 0.2, 0.8]], 4, 
           Style[6, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[9, 
            RGBColor[0.1, 0.2, 0.8]]}, {6, 
           Style[9, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[3, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[7, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[5, 
            RGBColor[0.1, 0.2, 0.8]], 4, 8, 2, 1}, {
           Style[8, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[7, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[9, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[2, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[4, 
            RGBColor[0.1, 0.2, 0.8]], 6, 1, 
           Style[5, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[3, 
            RGBColor[0.1, 0.2, 0.8]]}, {3, 6, 2, 
           Style[8, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[1, 
            RGBColor[0.1, 0.2, 0.8]], 5, 
           Style[9, 
            RGBColor[0.1, 0.2, 0.8]], 4, 
           Style[7, 
            RGBColor[0.1, 0.2, 0.8]]}, {
           Style[1, 
            RGBColor[0.1, 0.2, 0.8]], 4, 5, 
           Style[3, 
            RGBColor[0.1, 0.2, 0.8]], 
           Style[9, 
            RGBColor[0.1, 0.2, 0.8]], 7, 6, 8, 2}}, Dividers -> {{{
             Thickness[2], True, True}}, {{
             Thickness[2], True, True}}}, 
         Background -> {
          Automatic, 
           Automatic, {{1, 1} -> RGBColor[0.7, 0.7, 0.7], {1, 2} -> 
            RGBColor[0.7, 0.7, 0.7], {1, 3} -> 
            RGBColor[0.7, 0.7, 0.7], {1, 4} -> GrayLevel[1], {1, 5} -> 
            GrayLevel[1], {1, 6} -> GrayLevel[1], {1, 7} -> 
            RGBColor[0.7, 0.7, 0.7], {1, 8} -> 
            RGBColor[0.7, 0.7, 0.7], {1, 9} -> 
            RGBColor[0.7, 0.7, 0.7], {2, 1} -> 
            RGBColor[0.7, 0.7, 0.7], {2, 2} -> 
            RGBColor[0.7, 0.7, 0.7], {2, 3} -> 
            RGBColor[0.7, 0.7, 0.7], {2, 4} -> GrayLevel[1], {2, 5} -> 
            GrayLevel[1], {2, 6} -> GrayLevel[1], {2, 7} -> 
            RGBColor[0.7, 0.7, 0.7], {2, 8} -> 
            RGBColor[0.7, 0.7, 0.7], {2, 9} -> 
            RGBColor[0.7, 0.7, 0.7], {3, 1} -> 
            RGBColor[0.7, 0.7, 0.7], {3, 2} -> 
            RGBColor[0.7, 0.7, 0.7], {3, 3} -> 
            RGBColor[0.7, 0.7, 0.7], {3, 4} -> GrayLevel[1], {3, 5} -> 
            GrayLevel[1], {3, 6} -> GrayLevel[1], {3, 7} -> 
            RGBColor[0.7, 0.7, 0.7], {3, 8} -> 
            RGBColor[0.7, 0.7, 0.7], {3, 9} -> 
            RGBColor[0.7, 0.7, 0.7], {4, 1} -> GrayLevel[1], {4, 2} -> 
            GrayLevel[1], {4, 3} -> GrayLevel[1], {4, 4} -> 
            RGBColor[0.7, 0.7, 0.7], {4, 5} -> 
            RGBColor[0.7, 0.7, 0.7], {4, 6} -> 
            RGBColor[0.7, 0.7, 0.7], {4, 7} -> GrayLevel[1], {4, 8} -> 
            GrayLevel[1], {4, 9} -> GrayLevel[1], {5, 1} -> 
            GrayLevel[1], {5, 2} -> GrayLevel[1], {5, 3} -> 
            GrayLevel[1], {5, 4} -> RGBColor[0.7, 0.7, 0.7], {5, 5} -> 
            RGBColor[0.7, 0.7, 0.7], {5, 6} -> 
            RGBColor[0.7, 0.7, 0.7], {5, 7} -> GrayLevel[1], {5, 8} -> 
            GrayLevel[1], {5, 9} -> GrayLevel[1], {6, 1} -> 
            GrayLevel[1], {6, 2} -> GrayLevel[1], {6, 3} -> 
            GrayLevel[1], {6, 4} -> RGBColor[0.7, 0.7, 0.7], {6, 5} -> 
            RGBColor[0.7, 0.7, 0.7], {6, 6} -> 
            RGBColor[0.7, 0.7, 0.7], {6, 7} -> GrayLevel[1], {6, 8} -> 
            GrayLevel[1], {6, 9} -> GrayLevel[1], {7, 1} -> 
            RGBColor[0.7, 0.7, 0.7], {7, 2} -> 
            RGBColor[0.7, 0.7, 0.7], {7, 3} -> 
            RGBColor[0.7, 0.7, 0.7], {7, 4} -> GrayLevel[1], {7, 5} -> 
            GrayLevel[1], {7, 6} -> GrayLevel[1], {7, 7} -> 
            RGBColor[0.7, 0.7, 0.7], {7, 8} -> 
            RGBColor[0.7, 0.7, 0.7], {7, 9} -> 
            RGBColor[0.7, 0.7, 0.7], {8, 1} -> 
            RGBColor[0.7, 0.7, 0.7], {8, 2} -> 
            RGBColor[0.7, 0.7, 0.7], {8, 3} -> 
            RGBColor[0.7, 0.7, 0.7], {8, 4} -> GrayLevel[1], {8, 5} -> 
            GrayLevel[1], {8, 6} -> GrayLevel[1], {8, 7} -> 
            RGBColor[0.7, 0.7, 0.7], {8, 8} -> 
            RGBColor[0.7, 0.7, 0.7], {8, 9} -> 
            RGBColor[0.7, 0.7, 0.7], {9, 1} -> 
            RGBColor[0.7, 0.7, 0.7], {9, 2} -> 
            RGBColor[0.7, 0.7, 0.7], {9, 3} -> 
            RGBColor[0.7, 0.7, 0.7], {9, 4} -> GrayLevel[1], {9, 5} -> 
            GrayLevel[1], {9, 6} -> GrayLevel[1], {9, 7} -> 
            RGBColor[0.7, 0.7, 0.7], {9, 8} -> 
            RGBColor[0.7, 0.7, 0.7], {9, 9} -> RGBColor[0.7, 0.7, 0.7]}}, 
         ItemSize -> {1.8, 1.8}], 14, "Label"]}}}, Typeset`size$$ = {
    588., {182., 187.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`difficulty$128313$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`difficulty$$ = 40, $CellContext`sol$$ = 
        Style[
          Grid[{{7, 5, 
             Style[8, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[9, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[6, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[3, 
              RGBColor[0.1, 0.2, 0.8]], 2, 
             Style[1, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[4, 
              RGBColor[0.1, 0.2, 0.8]]}, {9, 3, 
             Style[6, 
              RGBColor[0.1, 0.2, 0.8]], 4, 
             Style[2, 
              RGBColor[0.1, 0.2, 0.8]], 1, 
             Style[5, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[7, 
              RGBColor[0.1, 0.2, 0.8]], 8}, {
             Style[2, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[1, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[4, 
              RGBColor[0.1, 0.2, 0.8]], 5, 7, 8, 3, 
             Style[9, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[6, 
              RGBColor[0.1, 0.2, 0.8]]}, {4, 2, 1, 6, 
             Style[8, 
              RGBColor[0.1, 0.2, 0.8]], 9, 7, 
             Style[3, 
              RGBColor[0.1, 0.2, 0.8]], 5}, {
             Style[5, 
              RGBColor[0.1, 0.2, 0.8]], 8, 7, 
             Style[1, 
              RGBColor[0.1, 0.2, 0.8]], 3, 
             Style[2, 
              RGBColor[0.1, 0.2, 0.8]], 4, 
             Style[6, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[9, 
              RGBColor[0.1, 0.2, 0.8]]}, {6, 
             Style[9, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[3, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[7, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[5, 
              RGBColor[0.1, 0.2, 0.8]], 4, 8, 2, 1}, {
             Style[8, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[7, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[9, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[2, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[4, 
              RGBColor[0.1, 0.2, 0.8]], 6, 1, 
             Style[5, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[3, 
              RGBColor[0.1, 0.2, 0.8]]}, {3, 6, 2, 
             Style[8, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[1, 
              RGBColor[0.1, 0.2, 0.8]], 5, 
             Style[9, 
              RGBColor[0.1, 0.2, 0.8]], 4, 
             Style[7, 
              RGBColor[0.1, 0.2, 0.8]]}, {
             Style[1, 
              RGBColor[0.1, 0.2, 0.8]], 4, 5, 
             Style[3, 
              RGBColor[0.1, 0.2, 0.8]], 
             Style[9, 
              RGBColor[0.1, 0.2, 0.8]], 7, 6, 8, 2}}, Dividers -> {{{
               Thickness[2], True, True}}, {{
               Thickness[2], True, True}}}, 
           Background -> {
            Automatic, 
             Automatic, {{1, 1} -> RGBColor[0.7, 0.7, 0.7], {1, 2} -> 
              RGBColor[0.7, 0.7, 0.7], {1, 3} -> 
              RGBColor[0.7, 0.7, 0.7], {1, 4} -> GrayLevel[1], {1, 5} -> 
              GrayLevel[1], {1, 6} -> GrayLevel[1], {1, 7} -> 
              RGBColor[0.7, 0.7, 0.7], {1, 8} -> 
              RGBColor[0.7, 0.7, 0.7], {1, 9} -> 
              RGBColor[0.7, 0.7, 0.7], {2, 1} -> 
              RGBColor[0.7, 0.7, 0.7], {2, 2} -> 
              RGBColor[0.7, 0.7, 0.7], {2, 3} -> 
              RGBColor[0.7, 0.7, 0.7], {2, 4} -> GrayLevel[1], {2, 5} -> 
              GrayLevel[1], {2, 6} -> GrayLevel[1], {2, 7} -> 
              RGBColor[0.7, 0.7, 0.7], {2, 8} -> 
              RGBColor[0.7, 0.7, 0.7], {2, 9} -> 
              RGBColor[0.7, 0.7, 0.7], {3, 1} -> 
              RGBColor[0.7, 0.7, 0.7], {3, 2} -> 
              RGBColor[0.7, 0.7, 0.7], {3, 3} -> 
              RGBColor[0.7, 0.7, 0.7], {3, 4} -> GrayLevel[1], {3, 5} -> 
              GrayLevel[1], {3, 6} -> GrayLevel[1], {3, 7} -> 
              RGBColor[0.7, 0.7, 0.7], {3, 8} -> 
              RGBColor[0.7, 0.7, 0.7], {3, 9} -> 
              RGBColor[0.7, 0.7, 0.7], {4, 1} -> GrayLevel[1], {4, 2} -> 
              GrayLevel[1], {4, 3} -> GrayLevel[1], {4, 4} -> 
              RGBColor[0.7, 0.7, 0.7], {4, 5} -> 
              RGBColor[0.7, 0.7, 0.7], {4, 6} -> 
              RGBColor[0.7, 0.7, 0.7], {4, 7} -> GrayLevel[1], {4, 8} -> 
              GrayLevel[1], {4, 9} -> GrayLevel[1], {5, 1} -> 
              GrayLevel[1], {5, 2} -> GrayLevel[1], {5, 3} -> 
              GrayLevel[1], {5, 4} -> RGBColor[0.7, 0.7, 0.7], {5, 5} -> 
              RGBColor[0.7, 0.7, 0.7], {5, 6} -> 
              RGBColor[0.7, 0.7, 0.7], {5, 7} -> GrayLevel[1], {5, 8} -> 
              GrayLevel[1], {5, 9} -> GrayLevel[1], {6, 1} -> 
              GrayLevel[1], {6, 2} -> GrayLevel[1], {6, 3} -> 
              GrayLevel[1], {6, 4} -> RGBColor[0.7, 0.7, 0.7], {6, 5} -> 
              RGBColor[0.7, 0.7, 0.7], {6, 6} -> 
              RGBColor[0.7, 0.7, 0.7], {6, 7} -> GrayLevel[1], {6, 8} -> 
              GrayLevel[1], {6, 9} -> GrayLevel[1], {7, 1} -> 
              RGBColor[0.7, 0.7, 0.7], {7, 2} -> 
              RGBColor[0.7, 0.7, 0.7], {7, 3} -> 
              RGBColor[0.7, 0.7, 0.7], {7, 4} -> GrayLevel[1], {7, 5} -> 
              GrayLevel[1], {7, 6} -> GrayLevel[1], {7, 7} -> 
              RGBColor[0.7, 0.7, 0.7], {7, 8} -> 
              RGBColor[0.7, 0.7, 0.7], {7, 9} -> 
              RGBColor[0.7, 0.7, 0.7], {8, 1} -> 
              RGBColor[0.7, 0.7, 0.7], {8, 2} -> 
              RGBColor[0.7, 0.7, 0.7], {8, 3} -> 
              RGBColor[0.7, 0.7, 0.7], {8, 4} -> GrayLevel[1], {8, 5} -> 
              GrayLevel[1], {8, 6} -> GrayLevel[1], {8, 7} -> 
              RGBColor[0.7, 0.7, 0.7], {8, 8} -> 
              RGBColor[0.7, 0.7, 0.7], {8, 9} -> 
              RGBColor[0.7, 0.7, 0.7], {9, 1} -> 
              RGBColor[0.7, 0.7, 0.7], {9, 2} -> 
              RGBColor[0.7, 0.7, 0.7], {9, 3} -> 
              RGBColor[0.7, 0.7, 0.7], {9, 4} -> GrayLevel[1], {9, 5} -> 
              GrayLevel[1], {9, 6} -> GrayLevel[1], {9, 7} -> 
              RGBColor[0.7, 0.7, 0.7], {9, 8} -> 
              RGBColor[0.7, 0.7, 0.7], {9, 9} -> RGBColor[0.7, 0.7, 0.7]}}, 
           ItemSize -> {1.8, 1.8}], 14, "Label"]}, "ControllerVariables" :> {
        Hold[$CellContext`difficulty$$, $CellContext`difficulty$128313$$, 0]},
       "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      DynamicModule[{$CellContext`n = 9, $CellContext`color = 
         RGBColor[
          0.1, 0.2, 
           0.8], $CellContext`seed, $CellContext`solution, \
$CellContext`fields, $CellContext`game, $CellContext`pos, $CellContext`x1, \
$CellContext`x2, $CellContext`x3, $CellContext`x4, $CellContext`x5, \
$CellContext`x6, $CellContext`x7, $CellContext`x8, $CellContext`x9, \
$CellContext`x10, $CellContext`x11, $CellContext`x12, $CellContext`x13, \
$CellContext`x14, $CellContext`x15, $CellContext`x16, $CellContext`x17, \
$CellContext`x18, $CellContext`x19, $CellContext`x20, $CellContext`x21, \
$CellContext`x22, $CellContext`x23, $CellContext`x24, $CellContext`x25, \
$CellContext`x26, $CellContext`x27, $CellContext`x28, $CellContext`x29, \
$CellContext`x30, $CellContext`x31, $CellContext`x32, $CellContext`x33, \
$CellContext`x34, $CellContext`x35, $CellContext`x36, $CellContext`x37, \
$CellContext`x38, $CellContext`x39, $CellContext`x40, $CellContext`x41, \
$CellContext`x42, $CellContext`x43, $CellContext`x44, $CellContext`x45, \
$CellContext`x46, $CellContext`x47, $CellContext`x48, $CellContext`x49, \
$CellContext`x50, $CellContext`x51, $CellContext`x52, $CellContext`x53, \
$CellContext`x54, $CellContext`x55, $CellContext`x56, $CellContext`x57, \
$CellContext`x58, $CellContext`x59, $CellContext`x60}, $CellContext`seed = 
         ReplacePart[
           Table["", {$CellContext`n}, {$CellContext`n}], 
           Thread[RandomSample[
              Tuples[
               Range[$CellContext`n], 2], $CellContext`n] -> 
            Range[$CellContext`n]]]; $CellContext`solution = \
$CellContext`sudokusolver[$CellContext`seed]; $CellContext`fields = 
         Take[{$CellContext`x1, $CellContext`x2, $CellContext`x3, \
$CellContext`x4, $CellContext`x5, $CellContext`x6, $CellContext`x7, \
$CellContext`x8, $CellContext`x9, $CellContext`x10, $CellContext`x11, \
$CellContext`x12, $CellContext`x13, $CellContext`x14, $CellContext`x15, \
$CellContext`x16, $CellContext`x17, $CellContext`x18, $CellContext`x19, \
$CellContext`x20, $CellContext`x21, $CellContext`x22, $CellContext`x23, \
$CellContext`x24, $CellContext`x25, $CellContext`x26, $CellContext`x27, \
$CellContext`x28, $CellContext`x29, $CellContext`x30, $CellContext`x31, \
$CellContext`x32, $CellContext`x33, $CellContext`x34, $CellContext`x35, \
$CellContext`x36, $CellContext`x37, $CellContext`x38, $CellContext`x39, \
$CellContext`x40, $CellContext`x41, $CellContext`x42, $CellContext`x43, \
$CellContext`x44, $CellContext`x45, $CellContext`x46, $CellContext`x47, \
$CellContext`x48, $CellContext`x49, $CellContext`x50, $CellContext`x51, \
$CellContext`x52, $CellContext`x53, $CellContext`x54, $CellContext`x55, \
$CellContext`x56, $CellContext`x57, $CellContext`x58, $CellContext`x59, \
$CellContext`x60}, $CellContext`difficulty$$]; $CellContext`game = 
         ReplacePart[$CellContext`solution, 
           Thread[($CellContext`pos = RandomSample[
               Tuples[
                Range[$CellContext`n], 2], $CellContext`difficulty$$]) -> 
            Map[PopupMenu[
               Dynamic[#], 
               Prepend[
                Range[9], "   "], BaseStyle -> {$CellContext`color, 14}, 
               Appearance -> None, FrameMargins -> 
               0]& , $CellContext`fields]]]; Deploy[
          Grid[{{
             Button[
             "new puzzle", $CellContext`sol$$ = " "; $CellContext`seed = 
               ReplacePart[
                 Table["", {$CellContext`n}, {$CellContext`n}], 
                 Thread[RandomSample[
                    Tuples[
                    Range[$CellContext`n], 2], $CellContext`n] -> 
                  Range[$CellContext`n]]]; $CellContext`solution = \
$CellContext`sudokusolver[$CellContext`seed]; 
              Clear[$CellContext`x1, $CellContext`x2, $CellContext`x3, \
$CellContext`x4, $CellContext`x5, $CellContext`x6, $CellContext`x7, \
$CellContext`x8, $CellContext`x9, $CellContext`x10, $CellContext`x11, \
$CellContext`x12, $CellContext`x13, $CellContext`x14, $CellContext`x15, \
$CellContext`x16, $CellContext`x17, $CellContext`x18, $CellContext`x19, \
$CellContext`x20, $CellContext`x21, $CellContext`x22, $CellContext`x23, \
$CellContext`x24, $CellContext`x25, $CellContext`x26, $CellContext`x27, \
$CellContext`x28, $CellContext`x29, $CellContext`x30, $CellContext`x31, \
$CellContext`x32, $CellContext`x33, $CellContext`x34, $CellContext`x35, \
$CellContext`x36, $CellContext`x37, $CellContext`x38, $CellContext`x39, \
$CellContext`x40, $CellContext`x41, $CellContext`x42, $CellContext`x43, \
$CellContext`x44, $CellContext`x45, $CellContext`x46, $CellContext`x47, \
$CellContext`x48, $CellContext`x49, $CellContext`x50, $CellContext`x51, \
$CellContext`x52, $CellContext`x53, $CellContext`x54, $CellContext`x55]; \
$CellContext`fields = 
               Take[{$CellContext`x1, $CellContext`x2, $CellContext`x3, \
$CellContext`x4, $CellContext`x5, $CellContext`x6, $CellContext`x7, \
$CellContext`x8, $CellContext`x9, $CellContext`x10, $CellContext`x11, \
$CellContext`x12, $CellContext`x13, $CellContext`x14, $CellContext`x15, \
$CellContext`x16, $CellContext`x17, $CellContext`x18, $CellContext`x19, \
$CellContext`x20, $CellContext`x21, $CellContext`x22, $CellContext`x23, \
$CellContext`x24, $CellContext`x25, $CellContext`x26, $CellContext`x27, \
$CellContext`x28, $CellContext`x29, $CellContext`x30, $CellContext`x31, \
$CellContext`x32, $CellContext`x33, $CellContext`x34, $CellContext`x35, \
$CellContext`x36, $CellContext`x37, $CellContext`x38, $CellContext`x39, \
$CellContext`x40, $CellContext`x41, $CellContext`x42, $CellContext`x43, \
$CellContext`x44, $CellContext`x45, $CellContext`x46, $CellContext`x47, \
$CellContext`x48, $CellContext`x49, $CellContext`x50, $CellContext`x51, \
$CellContext`x52, $CellContext`x53, $CellContext`x54, $CellContext`x55, \
$CellContext`x56, $CellContext`x57, $CellContext`x58, $CellContext`x59, \
$CellContext`x60}, $CellContext`difficulty$$]; $CellContext`game = 
               ReplacePart[$CellContext`solution, 
                 Thread[($CellContext`pos = RandomSample[
                    Tuples[
                    Range[$CellContext`n], 2], $CellContext`difficulty$$]) -> 
                  Map[PopupMenu[
                    Dynamic[#], 
                    Prepend[
                    Range[9], "   "], BaseStyle -> {$CellContext`color, 14}, 
                    Appearance -> None, FrameMargins -> 
                    0]& , $CellContext`fields]]]; Null], 
             Button["check", 
              If[
               $CellContext`check[
                ReplacePart[$CellContext`game, 
                 
                 Thread[$CellContext`pos -> $CellContext`fields]]], \
$CellContext`sol$$ = 
               Style["Congratulations!", 14, "Label"], $CellContext`sol$$ = 
               Style["Nope, try again", 14, "Label"]]]}, {
             Dynamic[
              $CellContext`sudokuForm[$CellContext`game]], 
             Dynamic[$CellContext`sol$$]}, {
             Button[
             "show solution", $CellContext`sol$$ = $CellContext`sudokuForm[
                ReplacePart[$CellContext`solution, 
                 Thread[$CellContext`pos -> Map[Style[
                    Part[$CellContext`solution, 
                    Apply[
                    Sequence, #]], $CellContext`color]& , \
$CellContext`pos]]]]], 
             Button["hide solution", $CellContext`sol$$ = " "]}}, 
           ItemSize -> {{23, 23}, {2, 20, 2}}]]], 
      "Specifications" :> {{{$CellContext`difficulty$$, 40}, {1, 2, 3, 4, 5, 
         6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 
         24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 
         41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 
         58, 59, 60}}, {{$CellContext`sol$$, 
          Style[
           Grid[{{7, 5, 
              Style[8, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[9, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[6, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[3, 
               RGBColor[0.1, 0.2, 0.8]], 2, 
              Style[1, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[4, 
               RGBColor[0.1, 0.2, 0.8]]}, {9, 3, 
              Style[6, 
               RGBColor[0.1, 0.2, 0.8]], 4, 
              Style[2, 
               RGBColor[0.1, 0.2, 0.8]], 1, 
              Style[5, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[7, 
               RGBColor[0.1, 0.2, 0.8]], 8}, {
              Style[2, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[1, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[4, 
               RGBColor[0.1, 0.2, 0.8]], 5, 7, 8, 3, 
              Style[9, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[6, 
               RGBColor[0.1, 0.2, 0.8]]}, {4, 2, 1, 6, 
              Style[8, 
               RGBColor[0.1, 0.2, 0.8]], 9, 7, 
              Style[3, 
               RGBColor[0.1, 0.2, 0.8]], 5}, {
              Style[5, 
               RGBColor[0.1, 0.2, 0.8]], 8, 7, 
              Style[1, 
               RGBColor[0.1, 0.2, 0.8]], 3, 
              Style[2, 
               RGBColor[0.1, 0.2, 0.8]], 4, 
              Style[6, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[9, 
               RGBColor[0.1, 0.2, 0.8]]}, {6, 
              Style[9, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[3, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[7, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[5, 
               RGBColor[0.1, 0.2, 0.8]], 4, 8, 2, 1}, {
              Style[8, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[7, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[9, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[2, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[4, 
               RGBColor[0.1, 0.2, 0.8]], 6, 1, 
              Style[5, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[3, 
               RGBColor[0.1, 0.2, 0.8]]}, {3, 6, 2, 
              Style[8, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[1, 
               RGBColor[0.1, 0.2, 0.8]], 5, 
              Style[9, 
               RGBColor[0.1, 0.2, 0.8]], 4, 
              Style[7, 
               RGBColor[0.1, 0.2, 0.8]]}, {
              Style[1, 
               RGBColor[0.1, 0.2, 0.8]], 4, 5, 
              Style[3, 
               RGBColor[0.1, 0.2, 0.8]], 
              Style[9, 
               RGBColor[0.1, 0.2, 0.8]], 7, 6, 8, 2}}, Dividers -> {{{
                Thickness[2], True, True}}, {{
                Thickness[2], True, True}}}, 
            Background -> {
             Automatic, 
              Automatic, {{1, 1} -> RGBColor[0.7, 0.7, 0.7], {1, 2} -> 
               RGBColor[0.7, 0.7, 0.7], {1, 3} -> 
               RGBColor[0.7, 0.7, 0.7], {1, 4} -> GrayLevel[1], {1, 5} -> 
               GrayLevel[1], {1, 6} -> GrayLevel[1], {1, 7} -> 
               RGBColor[0.7, 0.7, 0.7], {1, 8} -> 
               RGBColor[0.7, 0.7, 0.7], {1, 9} -> 
               RGBColor[0.7, 0.7, 0.7], {2, 1} -> 
               RGBColor[0.7, 0.7, 0.7], {2, 2} -> 
               RGBColor[0.7, 0.7, 0.7], {2, 3} -> 
               RGBColor[0.7, 0.7, 0.7], {2, 4} -> GrayLevel[1], {2, 5} -> 
               GrayLevel[1], {2, 6} -> GrayLevel[1], {2, 7} -> 
               RGBColor[0.7, 0.7, 0.7], {2, 8} -> 
               RGBColor[0.7, 0.7, 0.7], {2, 9} -> 
               RGBColor[0.7, 0.7, 0.7], {3, 1} -> 
               RGBColor[0.7, 0.7, 0.7], {3, 2} -> 
               RGBColor[0.7, 0.7, 0.7], {3, 3} -> 
               RGBColor[0.7, 0.7, 0.7], {3, 4} -> GrayLevel[1], {3, 5} -> 
               GrayLevel[1], {3, 6} -> GrayLevel[1], {3, 7} -> 
               RGBColor[0.7, 0.7, 0.7], {3, 8} -> 
               RGBColor[0.7, 0.7, 0.7], {3, 9} -> 
               RGBColor[0.7, 0.7, 0.7], {4, 1} -> GrayLevel[1], {4, 2} -> 
               GrayLevel[1], {4, 3} -> GrayLevel[1], {4, 4} -> 
               RGBColor[0.7, 0.7, 0.7], {4, 5} -> 
               RGBColor[0.7, 0.7, 0.7], {4, 6} -> 
               RGBColor[0.7, 0.7, 0.7], {4, 7} -> GrayLevel[1], {4, 8} -> 
               GrayLevel[1], {4, 9} -> GrayLevel[1], {5, 1} -> 
               GrayLevel[1], {5, 2} -> GrayLevel[1], {5, 3} -> 
               GrayLevel[1], {5, 4} -> RGBColor[0.7, 0.7, 0.7], {5, 5} -> 
               RGBColor[0.7, 0.7, 0.7], {5, 6} -> 
               RGBColor[0.7, 0.7, 0.7], {5, 7} -> GrayLevel[1], {5, 8} -> 
               GrayLevel[1], {5, 9} -> GrayLevel[1], {6, 1} -> 
               GrayLevel[1], {6, 2} -> GrayLevel[1], {6, 3} -> 
               GrayLevel[1], {6, 4} -> RGBColor[0.7, 0.7, 0.7], {6, 5} -> 
               RGBColor[0.7, 0.7, 0.7], {6, 6} -> 
               RGBColor[0.7, 0.7, 0.7], {6, 7} -> GrayLevel[1], {6, 8} -> 
               GrayLevel[1], {6, 9} -> GrayLevel[1], {7, 1} -> 
               RGBColor[0.7, 0.7, 0.7], {7, 2} -> 
               RGBColor[0.7, 0.7, 0.7], {7, 3} -> 
               RGBColor[0.7, 0.7, 0.7], {7, 4} -> GrayLevel[1], {7, 5} -> 
               GrayLevel[1], {7, 6} -> GrayLevel[1], {7, 7} -> 
               RGBColor[0.7, 0.7, 0.7], {7, 8} -> 
               RGBColor[0.7, 0.7, 0.7], {7, 9} -> 
               RGBColor[0.7, 0.7, 0.7], {8, 1} -> 
               RGBColor[0.7, 0.7, 0.7], {8, 2} -> 
               RGBColor[0.7, 0.7, 0.7], {8, 3} -> 
               RGBColor[0.7, 0.7, 0.7], {8, 4} -> GrayLevel[1], {8, 5} -> 
               GrayLevel[1], {8, 6} -> GrayLevel[1], {8, 7} -> 
               RGBColor[0.7, 0.7, 0.7], {8, 8} -> 
               RGBColor[0.7, 0.7, 0.7], {8, 9} -> 
               RGBColor[0.7, 0.7, 0.7], {9, 1} -> 
               RGBColor[0.7, 0.7, 0.7], {9, 2} -> 
               RGBColor[0.7, 0.7, 0.7], {9, 3} -> 
               RGBColor[0.7, 0.7, 0.7], {9, 4} -> GrayLevel[1], {9, 5} -> 
               GrayLevel[1], {9, 6} -> GrayLevel[1], {9, 7} -> 
               RGBColor[0.7, 0.7, 0.7], {9, 8} -> 
               RGBColor[0.7, 0.7, 0.7], {9, 9} -> RGBColor[0.7, 0.7, 0.7]}}, 
            ItemSize -> {1.8, 1.8}], 14, "Label"]}, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`difficulty$$}, 
        AutorunSequencing -> {1}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{635., {226., 231.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`blockposition[{
           Pattern[$CellContext`i, 
            Blank[]], 
           Pattern[$CellContext`j, 
            Blank[]]}, 
          Pattern[$CellContext`size, 
           
           Blank[]]] := ($CellContext`blockposition[{$CellContext`i, \
$CellContext`j}, $CellContext`size] = Apply[Sequence, 
           Part[
            Partition[
             Range[$CellContext`size], 
             Sqrt[$CellContext`size]], 
            Map[
            Ceiling, {$CellContext`i, $CellContext`j}/
             Sqrt[$CellContext`size]]]]); $CellContext`placenumber[
          Pattern[$CellContext`n, 
           Blank[]], {
           Pattern[$CellContext`i, 
            Blank[]], 
           Pattern[$CellContext`j, 
            Blank[]]}, 
          Optional[
           Pattern[$CellContext`extra, 
            Blank[String]], ""]] := 
        Block[{$CellContext`size = Length[$CellContext`choices]}, 
          If[
           MemberQ[
            
            Part[$CellContext`choices, $CellContext`i, $CellContext`j], \
$CellContext`n], 
           Part[$CellContext`choices, $CellContext`i, $CellContext`j] = {}; 
           Part[$CellContext`choices, $CellContext`i] = 
            Map[DeleteCases[#, $CellContext`n]& , 
              Part[$CellContext`choices, $CellContext`i]]; 
           Part[$CellContext`choices, All, $CellContext`j] = 
            Map[DeleteCases[#, $CellContext`n]& , 
              Part[$CellContext`choices, All, $CellContext`j]]; 
           Part[$CellContext`choices, 
              $CellContext`blockposition[{$CellContext`i, $CellContext`j}, \
$CellContext`size]] = Map[DeleteCases[#, $CellContext`n]& , 
              Part[$CellContext`choices, 
               $CellContext`blockposition[{$CellContext`i, $CellContext`j}, \
$CellContext`size]], {2}]; If[$CellContext`extra != "", If[
               And[
                Or[$CellContext`extra == "both", $CellContext`extra == 
                 "diagonal"], $CellContext`i == $CellContext`j], \
$CellContext`choices = 
               MapAt[DeleteCases[#, $CellContext`n]& , $CellContext`choices, 
                 
                 Table[{$CellContext`k, $CellContext`k}, {$CellContext`k, 
                   1, $CellContext`size}]]]; If[
               And[
                
                Or[$CellContext`extra == "both", $CellContext`extra == 
                 "antidiagonal"], $CellContext`i + $CellContext`j == \
$CellContext`size + 1], $CellContext`choices = 
               MapAt[DeleteCases[#, $CellContext`n]& , $CellContext`choices, 
                 
                 Table[{$CellContext`k, $CellContext`size + 
                   1 - $CellContext`k}, {$CellContext`k, 
                   1, $CellContext`size}]]]]; 
           Part[$CellContext`result, $CellContext`i, $CellContext`j] = \
$CellContext`n, 
           
           Throw[$CellContext`placednumbers = $CellContext`size^2 + 
             1]]]; $CellContext`singlenumber[
          Pattern[$CellContext`v, 
           Blank[]]] := With[{$CellContext`u = Flatten[
             Cases[
              Split[
               Sort[
                Flatten[$CellContext`v]]], {
               Blank[]}]]}, 
          If[$CellContext`u != {}, 
           With[{$CellContext`w = Part[
               Map[Position[$CellContext`v, #]& , $CellContext`u], All, 1, 
               1]}, 
            If[
             Apply[Unequal, $CellContext`w], 
             ReplacePart[$CellContext`v, 
              Map[List, $CellContext`u], 
              Map[List, $CellContext`w], 
              Map[List, 
               Range[
                Length[$CellContext`u]]]], 
             
             Throw[$CellContext`placednumbers = $CellContext`size^2 + 
               1]]], $CellContext`v]]; $CellContext`reducewith[
          Pattern[$CellContext`rule, 
           Blank[]]] := With[{$CellContext`t = Sqrt[
             Length[$CellContext`choices]]}, $CellContext`choices = 
           Map[$CellContext`rule, $CellContext`choices]; $CellContext`choices = 
           Transpose[
             Map[$CellContext`rule, 
              Transpose[$CellContext`choices]]]; $CellContext`choices = 
           Map[$CellContext`rule, 
             Map[Flatten[#, 1]& , 
              Flatten[
               
               Partition[$CellContext`choices, {$CellContext`t, \
$CellContext`t}], 1]]]; $CellContext`choices = Flatten[
             Map[MapThread[Join, 
               SlotSequence[1]]& , 
              Partition[
               Map[
               Partition[#, $CellContext`t]& , $CellContext`choices], \
$CellContext`t]], 1]; 
          If[$CellContext`placednumbers != 
            Count[$CellContext`choices, {}, {-2}], 
            
            Throw[$CellContext`placednumbers = $CellContext`size^2 + 
              1]]]; $CellContext`twins[
          Pattern[$CellContext`v, 
           Blank[]]] := With[{$CellContext`z = Cases[
             Split[
              Sort[
               Cases[$CellContext`v, {
                 Blank[], 
                 Blank[]}]]], {
               Pattern[$CellContext`a, 
                Blank[]], 
               Pattern[$CellContext`a, 
                Blank[]]} :> $CellContext`a]}, 
          If[$CellContext`z == {}, $CellContext`v, 
           Map[If[
             MemberQ[$CellContext`z, #], #, 
             Complement[#, 
              
              Flatten[$CellContext`z]]]& , $CellContext`v]]]; \
$CellContext`reducefromblocks := 
        Block[{$CellContext`v, $CellContext`aux}, $CellContext`aux = Partition[
             Range[$CellContext`size], 
             Sqrt[$CellContext`size]]; 
          Do[$CellContext`v = Part[$CellContext`choices, 
               $CellContext`blockposition[{1, 1} + 
                Sqrt[$CellContext`size] {$CellContext`i - 1, $CellContext`j - 
                   1}, $CellContext`size]]; Do[
              With[{$CellContext`w = Complement[
                  Flatten[
                   Part[$CellContext`v, $CellContext`k]], 
                  Flatten[
                   Drop[$CellContext`v, {$CellContext`k}]]]}, 
               If[$CellContext`w != {}, 
                Part[$CellContext`choices, $CellContext`k + ($CellContext`i - 
                    1) Sqrt[$CellContext`size]] = 
                Map[Complement[#, $CellContext`w]& , 
                  
                  Part[$CellContext`choices, $CellContext`k + ($CellContext`i - 
                    1) Sqrt[$CellContext`size]]]]], {$CellContext`k, 1, 
               Sqrt[$CellContext`size]}]; $CellContext`v = 
             Transpose[$CellContext`v]; Do[
              With[{$CellContext`w = Complement[
                  Flatten[
                   Part[$CellContext`v, $CellContext`k]], 
                  Flatten[
                   Drop[$CellContext`v, {$CellContext`k}]]]}, 
               
               If[$CellContext`w != {}, 
                Part[$CellContext`choices, 
                  All, $CellContext`k + ($CellContext`j - 1) 
                   Sqrt[$CellContext`size]] = 
                Map[Complement[#, $CellContext`w]& , 
                  
                  Part[$CellContext`choices, 
                   All, $CellContext`k + ($CellContext`j - 1) 
                    Sqrt[$CellContext`size]]]]], {$CellContext`k, 1, 
               Sqrt[$CellContext`size]}]; Part[$CellContext`choices, 
               $CellContext`blockposition[{1, 1} + 
                Sqrt[$CellContext`size] {$CellContext`i - 1, $CellContext`j - 
                   1}, $CellContext`size]] = 
             Transpose[$CellContext`v], {$CellContext`i, 1, 
             Sqrt[$CellContext`size]}, {$CellContext`j, 1, 
             Sqrt[$CellContext`size]}]; 
          If[$CellContext`placednumbers != 
            Count[$CellContext`choices, {}, {-2}], 
            
            Throw[$CellContext`placednumbers = $CellContext`size^2 + 
              1]]]; $CellContext`sudokusolver[
          Pattern[$CellContext`arg, 
           Blank[]], 
          Optional[
           Pattern[$CellContext`nsol, 
            Alternatives[
             Blank[Integer], Infinity]], 1], 
          Optional[
           Pattern[$CellContext`printsplit, 
            Alternatives[True, False]], True], 
          Optional[
           Pattern[$CellContext`extra, 
            Alternatives["", "diagonal", "antidiagonal", "both"]], ""]] := 
        Block[{$CellContext`mat, $CellContext`size, $CellContext`choices, \
$CellContext`tobedone, $CellContext`result, $CellContext`solutions, \
$CellContext`placednumbers, $CellContext`z}, $CellContext`mat = 
           Which[Head[$CellContext`arg] === Grid, 
             Part[$CellContext`arg, 1], Head[$CellContext`arg] === 
             SparseArray, 
             Normal[$CellContext`arg], 
             True, $CellContext`arg]; $CellContext`size = 
           Length[$CellContext`mat]; $CellContext`choices = 
           Array[Range[$CellContext`size]& , {$CellContext`size, \
$CellContext`size}]; $CellContext`result = 
           Array[0& , {$CellContext`size, $CellContext`size}]; $CellContext`z = 
           Position[$CellContext`mat, 
             PatternTest[
              Blank[Integer], Positive]]; $CellContext`placednumbers = 
           Length[$CellContext`z]; 
          Catch[MapThread[$CellContext`placenumber[#, #2, $CellContext`extra]& \
, {
               Extract[$CellContext`mat, $CellContext`z], $CellContext`z}]; 
            If[$CellContext`placednumbers != 
              Count[$CellContext`choices, {}, {-2}], \
$CellContext`placednumbers = $CellContext`size^2 + 
               1]]; $CellContext`solutions = {}; $CellContext`tobedone = 
           If[$CellContext`placednumbers <= $CellContext`size^2, \
{$CellContext`choices}, {}]; $CellContext`splitcounter = 0; While[
            
            And[$CellContext`tobedone != {}, 
             Length[$CellContext`solutions] < $CellContext`nsol], \
$CellContext`choices = 
             Part[$CellContext`tobedone, -1]; $CellContext`placednumbers = 
             Count[$CellContext`choices, {}, {-2}]; Catch[
              $CellContext`reducewith[$CellContext`singlenumber]]; 
            If[$CellContext`placednumbers <= $CellContext`size^2, \
$CellContext`placednumbers = 
              Count[$CellContext`choices, {}, {-2}]]; $CellContext`tobedone = 
             Most[$CellContext`tobedone]; 
            While[$CellContext`placednumbers < $CellContext`size^2, 
              Catch[While[
                 And[($CellContext`z = Position[$CellContext`choices, {
                    
                    Blank[]}]) != {}, $CellContext`placednumbers < \
$CellContext`size^2], $CellContext`placednumbers = $CellContext`placednumbers + 
                   Length[$CellContext`z]; 
                 MapThread[$CellContext`placenumber[#, #2, \
$CellContext`extra]& , {
                    Flatten[
                    
                    Extract[$CellContext`choices, $CellContext`z]], \
$CellContext`z}]; $CellContext`reducewith[$CellContext`singlenumber]]; \
$CellContext`z = $CellContext`choices; \
$CellContext`reducewith[$CellContext`twins]; 
               If[$CellContext`z != $CellContext`choices, 
                 Throw[
                  $CellContext`reducewith[$CellContext`singlenumber]]]; \
$CellContext`reducefromblocks; If[$CellContext`z != $CellContext`choices, 
                 Throw[
                  $CellContext`reducewith[$CellContext`singlenumber]]]; 
               If[$CellContext`placednumbers < $CellContext`size^2, 
                 Increment[$CellContext`splitcounter]; $CellContext`z = Min[
                    ReplaceAll[
                    Map[Length, $CellContext`choices, {2}], 
                    0 -> $CellContext`size + 1]]; $CellContext`z = 
                  Position[$CellContext`choices, 
                    PatternTest[
                    Blank[], 
                    Length[#] == $CellContext`z& ], {-2}]; $CellContext`pos = \
{{0, 0}, 3 $CellContext`size}; Do[
                   With[{$CellContext`m = Count[{
                    Part[$CellContext`choices, 
                    Part[$CellContext`z, $CellContext`i, 1]], 
                    Part[$CellContext`choices, All, 
                    Part[$CellContext`z, $CellContext`i, 2]], 
                    Part[$CellContext`choices, 
                    $CellContext`blockposition[
                    
                    Part[$CellContext`z, $CellContext`i], \
$CellContext`size]]}, {}, {-2}]}, 
                    
                    If[$CellContext`m < 
                    Part[$CellContext`pos, 2], $CellContext`pos = {
                    
                    Part[$CellContext`z, $CellContext`i], $CellContext`m}]], \
{$CellContext`i, 1, 
                    Length[$CellContext`z]}]; $CellContext`pos = 
                  Part[$CellContext`pos, 1]; AppendTo[$CellContext`tobedone, 
                   ReplacePart[$CellContext`choices, 
                    Rest[
                    Part[$CellContext`choices, 
                    Part[$CellContext`pos, 1], 
                    Part[$CellContext`pos, 2]]], $CellContext`pos]]; 
                 Part[$CellContext`choices, 
                    Part[$CellContext`pos, 1], 
                    Part[$CellContext`pos, 2]] = Take[
                    Part[$CellContext`choices, 
                    Part[$CellContext`pos, 1], 
                    Part[$CellContext`pos, 2]], 1]]]]; 
            If[$CellContext`placednumbers == $CellContext`size^2, 
              AppendTo[$CellContext`solutions, $CellContext`result]]]; If[
            And[$CellContext`nsol == 1, $CellContext`solutions != {}], 
            
            Part[$CellContext`solutions, 
             1], $CellContext`solutions]]; $CellContext`check[
          Pattern[$CellContext`attempt, 
           Blank[]]] := 
        Module[{$CellContext`n = Length[$CellContext`attempt]}, 
          And[
           Apply[And, 
            Table[Sort[
               Part[$CellContext`attempt, $CellContext`k]] == 
             Range[$CellContext`n], {$CellContext`k, $CellContext`n}]], 
           Apply[And, 
            Table[Sort[
               Part[$CellContext`attempt, All, $CellContext`k]] == 
             Range[$CellContext`n], {$CellContext`k, $CellContext`n}]], 
           Apply[And, 
            Flatten[
             Table[Sort[
                Flatten[
                 Table[
                  
                  Part[$CellContext`attempt, $CellContext`i + \
$CellContext`ii, $CellContext`j + $CellContext`jj], {$CellContext`i, 
                   1, $CellContext`n^Rational[1, 2]}, {$CellContext`j, 
                   1, $CellContext`n^Rational[1, 2]}]]] == 
              Range[$CellContext`n], {$CellContext`ii, 
               Range[
               0, $CellContext`n - 1, $CellContext`n^
                Rational[1, 2]]}, {$CellContext`jj, 
               Range[
               0, $CellContext`n - 1, $CellContext`n^
                Rational[1, 2]]}]]]]]; $CellContext`sudokuForm[
          Pattern[$CellContext`mat, 
           Blank[]]] := 
        Module[{$CellContext`t = 
           Length[$CellContext`mat], $CellContext`styles}, \
$CellContext`styles = {{
              Thickness[2], 
              Apply[Sequence, 
               Table[True, {Sqrt[$CellContext`t] - 1}]]}}; Style[
            
            Grid[$CellContext`mat, 
             Dividers -> {$CellContext`styles, $CellContext`styles}, 
             Background -> {Automatic, Automatic, 
               Flatten[
                Table[{$CellContext`i, $CellContext`j} -> If[
                   EvenQ[
                    Apply[Plus, 
                    
                    Floor[{$CellContext`i - 1, $CellContext`j - 
                    1}/$CellContext`t^Rational[1, 2]]]], 
                   Darker[White, 0.3], 
                   White], {$CellContext`i, $CellContext`t}, {$CellContext`j, \
$CellContext`t}]]}, ItemSize -> {1.8, 1.8}], 14, "Label"]]; Null}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->23922]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "DetailsSection"],

Cell["Further reading:", "DetailNotes",
 CellChangeTimes->{
  3.35696210375764*^9, {3.389003852134164*^9, 3.389003857763171*^9}},
 CellID->672213600],

Cell[TextData[{
 "F. Simons, \"",
 ButtonBox["Solving a Sudoku Puzzle with ",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://library.wolfram.com/infocenter/Articles/5854/"], None}],
 StyleBox[ButtonBox["Mathematica",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://library.wolfram.com/infocenter/Articles/5854/"], None}],
  FontSlant->"Italic"],
 ",\" ",
 StyleBox["Mathematica in Education and Research",
  FontSlant->"Italic"],
 ", ",
 StyleBox["10",
  FontWeight->"Bold"],
 "(4), 2005 pp. 1-24."
}], "DetailNotes",
 CellChangeTimes->{
  3.35696210375764*^9, {3.3954215963909693`*^9, 3.3954215967659693`*^9}, {
   3.3954216420472193`*^9, 3.3954216459065943`*^9}, {3.3954238004222193`*^9, 
   3.3954238035628443`*^9}},
 CellID->65925977]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ControlSuggestionsSection"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Resize Images"]}],
  "\"Click inside an image to reveal its orange resize frame.\\nDrag any of \
the orange resize handles to resize the image.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"ResizeImages"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Rotate and Zoom in 3D"]}],
  RowBox[{
   "\"Drag a 3D graphic to rotate it. Starting the drag near the center \
tumbles\\nthe graphic; starting near a corner turns it parallel to the plane \
of the screen.\\nHold down \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" (or \"", 
    FrameBox[
    "Cmd", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" on Mac) and drag up and down to zoom.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"RotateAndZoomIn3D"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Drag Locators"]}],
  RowBox[{"\"Drag any locator (\"", 
    GraphicsBox[
     LocatorBox[
      Scaled[{0.5, 0.5}]], ImageSize -> 20], 
    "\", etc.) to move it around.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"DragLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Create and Delete Locators"]}],
  RowBox[{"\"Insert a new locator in the graphic by holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key\\nand clicking where you want it to be. Delete a locator by \
clicking it\\nwhile holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" key.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"CreateAndDeleteLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Slider Zoom"]}],
  RowBox[{"\"Hold down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key while moving a slider to make fine adjustments in the slider \
value.\\nHold \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" and/or \"", 
    FrameBox[
    "Shift", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" at the same time as \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" to make ever finer adjustments.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"SliderZoom"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Gamepad Controls"]}],
  "\"Control this Demonstration with a gamepad or other\\nhuman interface \
device connected to your computer.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"GamepadControls"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Automatic Animation"]}],
  RowBox[{"\"Animate a slider in this Demonstration by clicking the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJzzTSzJSM1NLMlMTlRwL0osyMhMLlZwyy8CCjEzMjAwcIKwAgOI/R/IhBKc\n\
/4EAyGAG0f+nTZsGwgysIJIRKsWKLAXGIHFmEpUgLADxWUAkI24jZs+eTaEt\n\
IG+wQKRmzJgBlYf5lhEA30OqWA=="], "Graphics", ImageSize -> {9, 9}, ImageMargins -> 
      0], BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"button\\nnext to the slider, and then clicking the play button that \
appears.\\nAnimate all controls by selecting \"", 
    StyleBox["Autorun", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0], BoxBaselineShift -> 
     0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"AutomaticAnimation"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Bookmark Animation"]}],
  RowBox[{
   "\"See a prepared animation of this Demonstration by selecting\\n\"", 
    StyleBox["Animate Bookmarks", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0], BoxBaselineShift -> 
     0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"BookmarkAnimation"]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SearchTermsSection"],

Cell["sudoku", "SearchTerms",
 CellChangeTimes->{
  3.35696210375764*^9, {3.389004261820838*^9, 3.389004275792424*^9}},
 CellID->222812370],

Cell["puzzle", "SearchTerms",
 CellChangeTimes->{
  3.35696210375764*^9, {3.389004276198284*^9, 3.389004278264629*^9}},
 CellID->1743505869],

Cell["game", "SearchTerms",
 CellChangeTimes->{
  3.35696210375764*^9, {3.3890042786144037`*^9, 3.38900427902246*^9}},
 CellID->688776968]
}, Open  ]],

Cell["", "RelatedLinksSection"],

Cell[CellGroupData[{

Cell["", "AuthorSection"],

Cell[TextData[{
 "Contributed by: ",
 ButtonBox["Bruce Torrence",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/author.html?author=Bruce+Torrence"]\
, None},
  ButtonNote->
   "http://demonstrations.wolfram.com/author.html?author=Bruce+Torrence"]
}], "Author",
 CellChangeTimes->{
  3.35696210375764*^9, {3.3953982745554943`*^9, 3.3953982802742443`*^9}},
 CellID->49241076]
}, Open  ]]
}, Open  ]]
},
WindowSize->{700, 681},
WindowMargins->{{107, Automatic}, {Automatic, 42}},
FrontEndVersion->"7.0 for Microsoft Windows (32-bit) (November 10, 2008)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "Demonstration.nb", 
  CharacterEncoding -> "WindowsANSI"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "AutomaticAnimation"->{
  Cell[238273, 5123, 1412, 31, 22, "ControlSuggestions",
   CellTags->"AutomaticAnimation"]},
 "BookmarkAnimation"->{
  Cell[239688, 5156, 882, 21, 22, "ControlSuggestions",
   CellTags->"BookmarkAnimation"]},
 "CreateAndDeleteLocators"->{
  Cell[236479, 5073, 637, 15, 22, "ControlSuggestions",
   CellTags->"CreateAndDeleteLocators"]},
 "DragLocators"->{
  Cell[236136, 5060, 340, 11, 22, "ControlSuggestions",
   CellTags->"DragLocators"]},
 "GamepadControls"->{
  Cell[237966, 5113, 304, 8, 22, "ControlSuggestions",
   CellTags->"GamepadControls"]},
 "ResizeImages"->{
  Cell[235140, 5032, 312, 8, 22, "ControlSuggestions",
   CellTags->"ResizeImages"]},
 "RotateAndZoomIn3D"->{
  Cell[235455, 5042, 678, 16, 22, "ControlSuggestions",
   CellTags->"RotateAndZoomIn3D"]},
 "SliderZoom"->{
  Cell[237119, 5090, 844, 21, 22, "ControlSuggestions",
   CellTags->"SliderZoom"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"AutomaticAnimation", 241985, 5233},
 {"BookmarkAnimation", 242103, 5236},
 {"CreateAndDeleteLocators", 242225, 5239},
 {"DragLocators", 242342, 5242},
 {"GamepadControls", 242451, 5245},
 {"ResizeImages", 242559, 5248},
 {"RotateAndZoomIn3D", 242669, 5251},
 {"SliderZoom", 242778, 5254}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[567, 22, 122, 2, 74, "DemoTitle"],
Cell[692, 26, 33, 0, 266, "InitializationSection"],
Cell[CellGroupData[{
Cell[750, 30, 29, 0, 188, "ManipulateSection"],
Cell[CellGroupData[{
Cell[804, 34, 55512, 1232, 4235, "Input",
 CellID->925890343],
Cell[56319, 1268, 25736, 515, 469, "Output",
 CellID->504460853]
}, {2}]]
}, Open  ]],
Cell[CellGroupData[{
Cell[82101, 1789, 36, 0, 166, "ManipulateCaptionSection"],
Cell[82140, 1791, 1141, 17, 142, "ManipulateCaption"]
}, Open  ]],
Cell[CellGroupData[{
Cell[83318, 1813, 28, 0, 168, "ThumbnailSection"],
Cell[83349, 1815, 49614, 1068, 469, "Output",
 CellID->106516744]
}, Open  ]],
Cell[CellGroupData[{
Cell[133000, 2888, 28, 0, 138, "SnapshotsSection"],
Cell[133031, 2890, 25736, 515, 469, "Output",
 CellID->841489209],
Cell[158770, 3407, 25736, 515, 469, "Output",
 CellID->779203114],
Cell[184509, 3924, 49577, 1066, 469, "Output",
 CellID->23922]
}, Open  ]],
Cell[CellGroupData[{
Cell[234123, 4995, 26, 0, 332, "DetailsSection"],
Cell[234152, 4997, 149, 3, 22, "DetailNotes",
 CellID->672213600],
Cell[234304, 5002, 759, 23, 37, "DetailNotes",
 CellID->65925977]
}, Open  ]],
Cell[CellGroupData[{
Cell[235100, 5030, 37, 0, 120, "ControlSuggestionsSection"],
Cell[235140, 5032, 312, 8, 22, "ControlSuggestions",
 CellTags->"ResizeImages"],
Cell[235455, 5042, 678, 16, 22, "ControlSuggestions",
 CellTags->"RotateAndZoomIn3D"],
Cell[236136, 5060, 340, 11, 22, "ControlSuggestions",
 CellTags->"DragLocators"],
Cell[236479, 5073, 637, 15, 22, "ControlSuggestions",
 CellTags->"CreateAndDeleteLocators"],
Cell[237119, 5090, 844, 21, 22, "ControlSuggestions",
 CellTags->"SliderZoom"],
Cell[237966, 5113, 304, 8, 22, "ControlSuggestions",
 CellTags->"GamepadControls"],
Cell[238273, 5123, 1412, 31, 22, "ControlSuggestions",
 CellTags->"AutomaticAnimation"],
Cell[239688, 5156, 882, 21, 22, "ControlSuggestions",
 CellTags->"BookmarkAnimation"]
}, Open  ]],
Cell[CellGroupData[{
Cell[240607, 5182, 30, 0, 152, "SearchTermsSection"],
Cell[240640, 5184, 139, 3, 22, "SearchTerms",
 CellID->222812370],
Cell[240782, 5189, 140, 3, 22, "SearchTerms",
 CellID->1743505869],
Cell[240925, 5194, 138, 3, 22, "SearchTerms",
 CellID->688776968]
}, Open  ]],
Cell[241078, 5200, 31, 0, 138, "RelatedLinksSection"],
Cell[CellGroupData[{
Cell[241134, 5204, 25, 0, 124, "AuthorSection"],
Cell[241162, 5206, 412, 12, 22, "Author",
 CellID->49241076]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
