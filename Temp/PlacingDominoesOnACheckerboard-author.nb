(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 7.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[    213637,       4825]
NotebookOptionsPosition[    207881,       4646]
NotebookOutlinePosition[    209579,       4699]
CellTagsIndexPosition[    209243,       4687]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Placing Dominoes on a Checkerboard", "DemoTitle",
 CellChangeTimes->{
  3.35696210375764*^9, {3.4884947902105*^9, 3.488494794049513*^9}, {
   3.48856778090527*^9, 3.4885677913757143`*^9}}],

Cell[CellGroupData[{

Cell["", "InitializationSection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"gGraph", " ", "is", " ", "a", " ", 
    RowBox[{"wrapper", ":", " ", 
     RowBox[{
      RowBox[{"gGraph", "[", 
       RowBox[{
        RowBox[{"List", " ", "/@", " ", "edges"}], ",", " ", 
        RowBox[{"Lisdt", " ", "/@", " ", "verts"}]}], "]"}], " ", "as", " ", 
      "in", " ", "old", " ", "Combinatorica", " ", "style"}]}]}], " ", "*)"}],
   " "}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.5667733457292643`*^9, 3.566773382318653*^9}},
 CellID->2024474217],

Cell[BoxData[
 RowBox[{
  RowBox[{"EdgesSW", "[", "G_", "]"}], ":=", 
  RowBox[{"First", "/@", 
   RowBox[{
   "G", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.35696210375764*^9, {3.488494882740671*^9, 3.4884949302568083`*^9}, {
   3.488495004799062*^9, 3.4884950093643208`*^9}, {3.488495049293165*^9, 
   3.488495049906143*^9}, {3.48849508780262*^9, 3.4884951529663553`*^9}, {
   3.488495219907305*^9, 3.488495451381871*^9}, {3.488495984960973*^9, 
   3.488495990007182*^9}, {3.4884960365204144`*^9, 3.488496103910432*^9}, {
   3.4884961804691057`*^9, 3.488496206941065*^9}, {3.4884968389858*^9, 
   3.488496879406158*^9}, {3.48855605097237*^9, 3.4885560782539473`*^9}, {
   3.488556807053356*^9, 3.488556821828608*^9}, {3.4885631428491573`*^9, 
   3.488563191186213*^9}, {3.4885644861244307`*^9, 3.4885644939969473`*^9}, {
   3.48856542271835*^9, 3.488565456080398*^9}, {3.488565499234171*^9, 
   3.488565502067211*^9}, {3.4885739069425592`*^9, 3.488574245987401*^9}, {
   3.4886511206387787`*^9, 3.4886512245789394`*^9}, 3.566746113612304*^9},
 CellID->2048050937],

Cell[BoxData[
 RowBox[{
  RowBox[{"ToAdjacencyListsSW", "[", "G_", "]"}], ":=", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"etemp", "=", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"ee", "=", 
        RowBox[{"Sort", "/@", 
         RowBox[{"EdgesSW", "[", "G", "]"}]}]}], ")"}], "\[Union]", 
      RowBox[{"Reverse", "/@", "ee"}]}]}], ";", 
    RowBox[{"missing", "=", 
     RowBox[{"Complement", "[", 
      RowBox[{
       RowBox[{"Range", "[", 
        RowBox[{"Length", "[", 
         RowBox[{"G", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
         "]"}], "]"}], ",", 
       RowBox[{"First", "/@", "etemp"}]}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"etemp", "=", 
     RowBox[{"Sort", "[", 
      RowBox[{"Join", "[", 
       RowBox[{"etemp", ",", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"m", ",", 
            RowBox[{"{", "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"m", ",", "missing"}], "}"}]}], "]"}]}], "]"}], "]"}]}], 
    ";", 
    RowBox[{
     RowBox[{
      RowBox[{"Split", "[", 
       RowBox[{"etemp", ",", 
        RowBox[{
         RowBox[{
          RowBox[{
          "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "===", 
          RowBox[{
          "#2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
         "&"}]}], "]"}], "/.", "\[InvisibleSpace]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"_Integer", ",", "n_"}], "}"}], "\[RuleDelayed]", "n"}]}], "/.",
      "\[InvisibleSpace]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"{", "}"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}]}]}], ")"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.35696210375764*^9, {3.488494882740671*^9, 3.4884949302568083`*^9}, {
   3.488495004799062*^9, 3.4884950093643208`*^9}, {3.488495049293165*^9, 
   3.488495049906143*^9}, {3.48849508780262*^9, 3.4884951529663553`*^9}, {
   3.488495219907305*^9, 3.488495451381871*^9}, {3.488495984960973*^9, 
   3.488495990007182*^9}, {3.4884960365204144`*^9, 3.488496103910432*^9}, {
   3.4884961804691057`*^9, 3.488496206941065*^9}, {3.4884968389858*^9, 
   3.488496879406158*^9}, {3.48855605097237*^9, 3.4885560782539473`*^9}, {
   3.488556807053356*^9, 3.488556821828608*^9}, {3.4885631428491573`*^9, 
   3.488563191186213*^9}, {3.4885644861244307`*^9, 3.4885644939969473`*^9}, {
   3.48856542271835*^9, 3.488565456080398*^9}, {3.488565499234171*^9, 
   3.488565502067211*^9}, {3.4885739069425592`*^9, 3.488574245987401*^9}, {
   3.4886511206387787`*^9, 3.488651221672615*^9}, 3.562010429665056*^9, 
   3.56674611717266*^9},
 CellID->43341577],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MaximalMatchingSW", "[", "g_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"match", "=", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"ee", "=", 
        RowBox[{"EdgesSW", "[", "g", "]"}]}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"match", "=", 
       RowBox[{"ee", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}],
       ";", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"e", "\[Intersection]", "match"}], "\[Equal]", 
           RowBox[{"{", "}"}]}], ",", 
          RowBox[{"match", "=", 
           RowBox[{"Join", "[", 
            RowBox[{"match", ",", "e"}], "]"}]}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"e", ",", 
          RowBox[{"Rest", "[", "ee", "]"}]}], "}"}]}], "]"}], ";", 
      RowBox[{"Sort", "/@", 
       RowBox[{"Partition", "[", 
        RowBox[{"match", ",", "2"}], "]"}]}]}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.35696210375764*^9, {3.488494882740671*^9, 3.4884949302568083`*^9}, {
   3.488495004799062*^9, 3.4884950093643208`*^9}, {3.488495049293165*^9, 
   3.488495049906143*^9}, {3.48849508780262*^9, 3.4884951529663553`*^9}, {
   3.488495219907305*^9, 3.488495451381871*^9}, {3.488495984960973*^9, 
   3.488495990007182*^9}, {3.4884960365204144`*^9, 3.488496103910432*^9}, {
   3.4884961804691057`*^9, 3.488496206941065*^9}, {3.4884968389858*^9, 
   3.488496879406158*^9}, {3.48855605097237*^9, 3.4885560782539473`*^9}, {
   3.488556807053356*^9, 3.488556821828608*^9}, {3.4885631428491573`*^9, 
   3.488563191186213*^9}, {3.4885644861244307`*^9, 3.4885644939969473`*^9}, {
   3.48856542271835*^9, 3.488565456080398*^9}, {3.488565499234171*^9, 
   3.488565502067211*^9}, {3.4885739069425592`*^9, 3.488574245987401*^9}, {
   3.4886511206387787`*^9, 3.488651209109793*^9}, 3.5667461221131544`*^9, {
   3.566773394592104*^9, 3.566773408030867*^9}},
 CellID->189570621],

Cell[BoxData[
 RowBox[{
  RowBox[{"DominoGraph", "[", 
   RowBox[{"n_", ",", "blocked_"}], "]"}], ":=", 
  RowBox[{"Quiet", "[", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"ff", ",", 
       RowBox[{"vertices", "=", 
        RowBox[{"Complement", "[", 
         RowBox[{
          RowBox[{"Tuples", "[", 
           RowBox[{
            RowBox[{"Range", "[", "n", "]"}], ",", "2"}], "]"}], ",", 
          "blocked"}], "]"}]}], ",", "edges", ",", "black", ",", "white", ",",
        "m1", ",", "m2"}], "}"}], ",", 
     RowBox[{
      RowBox[{"edges", "=", 
       RowBox[{"Union", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ff", "=", 
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"v", ",", 
                  RowBox[{"Select", "[", 
                   RowBox[{"vertices", ",", 
                    RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
                    RowBox[{"Abs", "[", 
                    RowBox[{"#1", "-", "v"}], "]"}]}], "]"}], "&"}]}], 
                   "]"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"v", ",", "vertices"}], "}"}]}], "]"}], ")"}], "/.", 
             "\[InvisibleSpace]", 
             RowBox[{
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"u_Integer", ",", " ", "uu_"}], "}"}], ",", 
                RowBox[{"vlist_", "/;", 
                 RowBox[{
                  RowBox[{"Depth", "[", "vlist", "]"}], "\[LessEqual]", 
                  "3"}]}]}], "}"}], "\[RuleDelayed]", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"u", ",", "uu"}], "}"}], ",", "vv"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"vv", ",", "vlist"}], "}"}]}], "]"}]}]}], ",", "1"}],
            "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"ff", "=", " ", 
          RowBox[{"Cases", "[", 
           RowBox[{"ff", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"_Integer", ",", " ", "_Integer"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"_Integer", ",", "_Integer"}], "}"}]}], "}"}]}], " ", 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"ff", "\[Equal]", 
            RowBox[{"{", "}"}]}], ",", " ", 
           RowBox[{"Return", "[", 
            RowBox[{"gGraph", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", " ", "vertices"}], "]"}], "]"}]}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"SortBy", "[", 
             RowBox[{"#1", ",", 
              RowBox[{
               RowBox[{"Mod", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Total", "[", "#1", "]"}], "-", "n", "-", "1"}], 
                 ",", "2"}], "]"}], "&"}]}], "]"}], "&"}], ")"}], "/@", 
          "ff"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"black", "=", 
       RowBox[{"Select", "[", 
        RowBox[{"vertices", ",", 
         RowBox[{
          RowBox[{"EvenQ", "[", 
           RowBox[{
            RowBox[{"Total", "[", "#1", "]"}], "-", "n"}], "]"}], "&"}]}], 
        "]"}]}], ";", 
      RowBox[{"white", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{"vertices", ",", "black"}], "]"}]}], ";", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"m1", ",", "m2"}], "}"}], "=", 
       RowBox[{"Length", "/@", 
        RowBox[{"{", 
         RowBox[{"white", ",", "black"}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"gGraph", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"Position", "[", 
               RowBox[{"white", ",", 
                RowBox[{
                "e", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}],
                "]"}], "\[LeftDoubleBracket]", 
              RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], ",", 
             RowBox[{"m1", "+", 
              RowBox[{
               RowBox[{"Position", "[", 
                RowBox[{"black", ",", 
                 RowBox[{
                 "e", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "]"}], "\[LeftDoubleBracket]", 
               RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}]}]}], "}"}], 
           "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"e", ",", "edges"}], "}"}]}], "]"}], ",", 
        RowBox[{"List", "/@", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"i", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "m1"}], "}"}]}], "]"}], ",", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"i", ",", "1"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "m2"}], "}"}]}], "]"}]}], "]"}]}]}], 
       "]"}]}]}], "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.35696210375764*^9, {3.488494882740671*^9, 3.4884949302568083`*^9}, {
   3.488495004799062*^9, 3.4884950093643208`*^9}, {3.488495049293165*^9, 
   3.488495049906143*^9}, {3.48849508780262*^9, 3.4884951529663553`*^9}, {
   3.488495219907305*^9, 3.488495451381871*^9}, {3.488495984960973*^9, 
   3.488495990007182*^9}, {3.4884960365204144`*^9, 3.488496103910432*^9}, {
   3.4884961804691057`*^9, 3.488496206941065*^9}, {3.4884968389858*^9, 
   3.488496879406158*^9}, {3.48855605097237*^9, 3.4885560782539473`*^9}, {
   3.488556807053356*^9, 3.488556821828608*^9}, {3.4885631428491573`*^9, 
   3.488563191186213*^9}, {3.4885644861244307`*^9, 3.4885644939969473`*^9}, {
   3.48856542271835*^9, 3.488565456080398*^9}, {3.488565499234171*^9, 
   3.488565502067211*^9}, {3.4885739069425592`*^9, 3.488574245987401*^9}, {
   3.4886511206387787`*^9, 3.488651204375297*^9}, {3.488743903660406*^9, 
   3.488744028589066*^9}, {3.488749451570161*^9, 3.488749453658843*^9}, {
   3.4887497177329693`*^9, 3.488749720522822*^9}, {3.488750656125877*^9, 
   3.488750662991562*^9}, {3.488751308537273*^9, 3.488751310041647*^9}, {
   3.488751363004159*^9, 3.488751365352358*^9}, {3.488751401580408*^9, 
   3.488751408266591*^9}, {3.4887514383949337`*^9, 3.488751448981394*^9}, {
   3.4887515081888638`*^9, 3.4887515193719597`*^9}, {3.488751661957739*^9, 
   3.488751662865322*^9}, {3.488751771685012*^9, 3.488751857315624*^9}, {
   3.4887518931268806`*^9, 3.488751917765422*^9}, 3.488752008518317*^9, {
   3.488752386177085*^9, 3.488752387659556*^9}, {3.4887525374708138`*^9, 
   3.4887525401586533`*^9}, {3.488752701929262*^9, 3.488752710128097*^9}, {
   3.5667471883717694`*^9, 3.566747194767409*^9}, {3.5667475771126394`*^9, 
   3.566747580304959*^9}, {3.566747830501976*^9, 3.566747833581284*^9}, {
   3.5667732796719522`*^9, 3.5667732816723557`*^9}},
 CellID->240138285],

Cell[BoxData[
 RowBox[{
  RowBox[{"DominoPuzzleBoard", "[", 
   RowBox[{"n_", ",", " ", "blocked_"}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"allverts", " ", "=", " ", 
       RowBox[{"Tuples", "[", 
        RowBox[{
         RowBox[{"Range", "[", "n", "]"}], ",", " ", "2"}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"vertices", " ", "=", " ", 
       RowBox[{"Complement", "[", 
        RowBox[{
         RowBox[{"Tuples", "[", 
          RowBox[{
           RowBox[{"Range", "[", "n", "]"}], ",", " ", "2"}], "]"}], ",", " ",
          "blocked"}], "]"}]}], ",", "edges", ",", " ", "black", ",", " ", 
      "white", ",", " ", "m1", ",", " ", "m2", ",", "ff"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ff", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"v", ",", " ", 
             RowBox[{"Select", "[", 
              RowBox[{"vertices", ",", " ", 
               RowBox[{
                RowBox[{"MemberQ", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
                  RowBox[{"Abs", "[", 
                   RowBox[{"#", "-", "v"}], "]"}]}], "]"}], "&"}]}], "]"}]}], 
            "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"v", ",", " ", "vertices"}], "}"}]}], "]"}], "/.", " ", 
         RowBox[{
          RowBox[{"{", " ", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"u_Integer", ",", " ", "uu_"}], "}"}], ",", 
            RowBox[{"vlist_", "/;", 
             RowBox[{
              RowBox[{"Depth", "[", "vlist", "]"}], "\[LessEqual]", "3"}]}]}],
            "}"}], " ", "\[RuleDelayed]", " ", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"u", ",", "uu"}], "}"}], ",", " ", "vv"}], "}"}], ",", 
            " ", 
            RowBox[{"{", 
             RowBox[{"vv", ",", " ", "vlist"}], "}"}]}], "]"}]}]}], ",", 
        "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"ff", " ", "=", " ", 
      RowBox[{"Cases", "[", 
       RowBox[{"ff", ",", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"_Integer", ",", " ", "_Integer"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"_Integer", ",", "_Integer"}], "}"}]}], "}"}]}], " ", 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"edges", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"ff", "!=", 
         RowBox[{"{", "}"}]}], ",", 
        RowBox[{"Union", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"SortBy", "[", 
            RowBox[{"#", ",", " ", 
             RowBox[{
              RowBox[{"Mod", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Total", "[", "#1", "]"}], "-", "n", "-", "1"}], ",",
                 "2"}], "]"}], "&"}]}], "]"}], "&"}], "/@", " ", "ff"}], 
         "]"}], ",", 
        RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"black", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"allverts", ",", " ", 
        RowBox[{
         RowBox[{"EvenQ", "[", 
          RowBox[{
           RowBox[{"Total", "[", "#", "]"}], "-", "n"}], "]"}], "&"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"white", "  ", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{"allverts", ",", "black"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m1", ",", "m2"}], "}"}], " ", "=", " ", 
      RowBox[{"Length", "/@", 
       RowBox[{"{", 
        RowBox[{"white", ",", " ", "black"}], "}"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Graphics", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"EdgeForm", "[", 
         RowBox[{"GrayLevel", "[", "0", "]"}], "]"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"FaceForm", "[", 
           RowBox[{"GrayLevel", "[", "1", "]"}], "]"}], ",", " ", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Rectangle", "[", 
             RowBox[{"v", ",", 
              RowBox[{"v", "+", "1"}]}], "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"v", ",", "white"}], "}"}]}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"FaceForm", "[", 
           RowBox[{"GrayLevel", "[", ".3", "]"}], "]"}], ",", " ", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Rectangle", "[", 
             RowBox[{"v", ",", 
              RowBox[{"v", "+", "1"}]}], "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"v", ",", "black"}], "}"}]}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"FaceForm", "[", "Red", "]"}], ",", " ", 
          RowBox[{"EdgeForm", "[", "]"}], ",", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Rectangle", "[", 
             RowBox[{
              RowBox[{"pt", "+", ".1"}], ",", 
              RowBox[{"pt", "+", "1", "-", ".1"}]}], "]"}], ",", "  ", 
            RowBox[{"{", 
             RowBox[{"pt", ",", "blocked"}], "}"}]}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"FaceForm", "[", "]"}], ",", " ", 
          RowBox[{"EdgeForm", "[", "Black", "]"}], ",", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Rectangle", "[", 
             RowBox[{"pt", ",", 
              RowBox[{"pt", "+", "1"}]}], "]"}], ",", "  ", 
            RowBox[{"{", 
             RowBox[{"pt", ",", "blocked"}], "}"}]}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"AbsoluteThickness", "[", "2", "]"}], ",", " ", 
            RowBox[{"Line", "[", 
             RowBox[{"e", "+", ".5"}], "]"}]}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"e", ",", " ", "edges"}], "}"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"Blue", ",", " ", 
            RowBox[{"PointSize", "[", 
             RowBox[{".4", "  ", "/", "n"}], "]"}], ",", 
            RowBox[{"Point", "[", 
             RowBox[{"v", "+", ".5"}], "]"}]}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"v", ",", "vertices"}], "}"}]}], "]"}]}], "}"}], "]"}]}]}],
    "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.35696210375764*^9, {3.488494882740671*^9, 3.4884949302568083`*^9}, {
   3.488495004799062*^9, 3.4884950093643208`*^9}, {3.488495049293165*^9, 
   3.488495049906143*^9}, {3.48849508780262*^9, 3.4884951529663553`*^9}, {
   3.488495219907305*^9, 3.488495451381871*^9}, {3.488495984960973*^9, 
   3.488495990007182*^9}, {3.4884960365204144`*^9, 3.488496103910432*^9}, {
   3.4884961804691057`*^9, 3.488496206941065*^9}, {3.4884968389858*^9, 
   3.488496879406158*^9}, {3.48855605097237*^9, 3.4885560782539473`*^9}, {
   3.488556807053356*^9, 3.488556821828608*^9}, {3.4885631428491573`*^9, 
   3.488563191186213*^9}, {3.4885644861244307`*^9, 3.4885644939969473`*^9}, {
   3.48856542271835*^9, 3.488565456080398*^9}, {3.488565499234171*^9, 
   3.488565502067211*^9}, {3.4885739069425592`*^9, 3.488574245987401*^9}, {
   3.4886511206387787`*^9, 3.488651194687549*^9}, {3.4887501178470783`*^9, 
   3.488750142933627*^9}, {3.4887501907716503`*^9, 3.4887502407798557`*^9}, {
   3.488750299234014*^9, 3.4887502995839357`*^9}, {3.488750332232471*^9, 
   3.488750418553399*^9}, 3.488750585264991*^9, {3.4887509090982523`*^9, 
   3.488750916889234*^9}, 3.488751014131218*^9, 3.488751108203964*^9, {
   3.488751239166666*^9, 3.488751250084794*^9}, 3.48875155735708*^9, {
   3.488751929334457*^9, 3.48875194957316*^9}, {3.4887524532115726`*^9, 
   3.4887524588097277`*^9}, {3.48875271748022*^9, 3.4887527207312717`*^9}},
 CellID->27133820],

Cell[BoxData[
 RowBox[{
  RowBox[{"DominoPuzzleBoardNoGraph", "[", 
   RowBox[{"n_", ",", " ", "blocked_"}], "]"}], " ", ":=", 
  "\[IndentingNewLine]", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"allverts", " ", "=", " ", 
       RowBox[{"Tuples", "[", 
        RowBox[{
         RowBox[{"Range", "[", "n", "]"}], ",", " ", "2"}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"vertices", " ", "=", " ", 
       RowBox[{"Complement", "[", 
        RowBox[{
         RowBox[{"Tuples", "[", 
          RowBox[{
           RowBox[{"Range", "[", "n", "]"}], ",", " ", "2"}], "]"}], ",", " ",
          "blocked"}], "]"}]}], ",", " ", "black", ",", " ", "white", ",", 
      " ", "m1", ",", " ", "m2", ",", "allvertices1"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"allvertices1", " ", "=", " ", 
      RowBox[{"Tuples", "[", 
       RowBox[{
        RowBox[{"Range", "[", "n", "]"}], ",", " ", "2"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"black", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"allvertices1", ",", " ", 
        RowBox[{
         RowBox[{"EvenQ", "[", 
          RowBox[{
           RowBox[{"Total", "[", "#", "]"}], "-", "n"}], "]"}], "&"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"white", "  ", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{"allvertices1", ",", "black"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m1", ",", "m2"}], "}"}], " ", "=", " ", 
      RowBox[{"Length", "/@", 
       RowBox[{"{", 
        RowBox[{"white", ",", " ", "black"}], "}"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Graphics", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"EdgeForm", "[", "Black", "]"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"FaceForm", "[", 
           RowBox[{"GrayLevel", "[", "1", "]"}], "]"}], ",", " ", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Rectangle", "[", 
             RowBox[{"v", ",", 
              RowBox[{"v", "+", "1"}]}], "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"v", ",", "white"}], "}"}]}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"FaceForm", "[", 
           RowBox[{"GrayLevel", "[", ".3", "]"}], "]"}], ",", " ", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Rectangle", "[", 
             RowBox[{"v", ",", 
              RowBox[{"v", "+", "1"}]}], "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"v", ",", "black"}], "}"}]}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"FaceForm", "[", "Red", "]"}], ",", " ", 
          RowBox[{"EdgeForm", "[", "]"}], ",", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Rectangle", "[", 
             RowBox[{
              RowBox[{"pt", "+", ".1"}], ",", 
              RowBox[{"pt", "+", "1", "-", ".1"}]}], "]"}], ",", "  ", 
            RowBox[{"{", 
             RowBox[{"pt", ",", "blocked"}], "}"}]}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"FaceForm", "[", "]"}], ",", " ", 
          RowBox[{"EdgeForm", "[", "Black", "]"}], ",", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Rectangle", "[", 
             RowBox[{"pt", ",", 
              RowBox[{"pt", "+", "1"}]}], "]"}], ",", "  ", 
            RowBox[{"{", 
             RowBox[{"pt", ",", "blocked"}], "}"}]}], "]"}]}], "}"}]}], "}"}],
       "]"}]}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.35696210375764*^9, {3.488494882740671*^9, 3.4884949302568083`*^9}, {
   3.488495004799062*^9, 3.4884950093643208`*^9}, {3.488495049293165*^9, 
   3.488495049906143*^9}, {3.48849508780262*^9, 3.4884951529663553`*^9}, {
   3.488495219907305*^9, 3.488495451381871*^9}, {3.488495984960973*^9, 
   3.488495990007182*^9}, {3.4884960365204144`*^9, 3.488496103910432*^9}, {
   3.4884961804691057`*^9, 3.488496206941065*^9}, {3.4884968389858*^9, 
   3.488496879406158*^9}, {3.48855605097237*^9, 3.4885560782539473`*^9}, {
   3.488556807053356*^9, 3.488556821828608*^9}, {3.4885631428491573`*^9, 
   3.488563191186213*^9}, {3.4885644861244307`*^9, 3.4885644939969473`*^9}, {
   3.48856542271835*^9, 3.488565456080398*^9}, {3.488565499234171*^9, 
   3.488565502067211*^9}, {3.4885739069425592`*^9, 3.488574245987401*^9}, {
   3.4886511206387787`*^9, 3.4886511857810707`*^9}, {3.488750501343183*^9, 
   3.4887505393362427`*^9}, {3.488750599614101*^9, 3.488750600038453*^9}, {
   3.488752522833334*^9, 3.488752532917796*^9}, {3.48875277734903*^9, 
   3.488752777726633*^9}, {3.5667469891868525`*^9, 3.5667469909550295`*^9}, {
   3.5667470892388573`*^9, 3.566747103010234*^9}, {3.566773187450758*^9, 
   3.566773212914134*^9}, 3.566773921383298*^9, {3.566773985422968*^9, 
   3.56677399229576*^9}},
 CellID->537626745],

Cell[BoxData[
 RowBox[{
  RowBox[{"DominoPuzzleSolution", "[", 
   RowBox[{"n1_", ",", "blocked1_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "black", ",", "white", ",", "m1", ",", "m2", ",", " ", "vertices", ",", 
      "gr"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"vertices", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{
        RowBox[{"Tuples", "[", 
         RowBox[{
          RowBox[{"Range", "[", "n1", "]"}], ",", "2"}], "]"}], ",", 
        "blocked1"}], "]"}]}], ";", 
     RowBox[{"black", "=", 
      RowBox[{"Select", "[", 
       RowBox[{"vertices", ",", 
        RowBox[{
         RowBox[{"EvenQ", "[", 
          RowBox[{
           RowBox[{"Total", "[", "#1", "]"}], "-", "n1"}], "]"}], "&"}]}], 
       "]"}]}], ";", 
     RowBox[{"white", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{"vertices", ",", "black"}], "]"}]}], ";", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m1", ",", "m2"}], "}"}], "=", 
      RowBox[{"Length", "/@", 
       RowBox[{"{", 
        RowBox[{"white", ",", "black"}], "}"}]}]}], ";", 
     RowBox[{"gr", "=", 
      RowBox[{"DominoGraph", "[", 
       RowBox[{"n1", ",", "blocked1"}], "]"}]}], ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"gr", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
        "\[Equal]", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"BipartiteMaximumMatching", "[", 
        RowBox[{"gr", ",", 
         RowBox[{"{", 
          RowBox[{"m1", ",", "m2"}], "}"}]}], "]"}]}], "]"}]}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.35696210375764*^9, {3.488494882740671*^9, 3.4884949302568083`*^9}, {
   3.488495004799062*^9, 3.4884950093643208`*^9}, {3.488495049293165*^9, 
   3.488495049906143*^9}, {3.48849508780262*^9, 3.4884951529663553`*^9}, {
   3.488495219907305*^9, 3.488495451381871*^9}, {3.488495984960973*^9, 
   3.488495990007182*^9}, {3.4884960365204144`*^9, 3.488496103910432*^9}, {
   3.4884961804691057`*^9, 3.488496206941065*^9}, {3.4884968389858*^9, 
   3.488496879406158*^9}, {3.48855605097237*^9, 3.4885560782539473`*^9}, {
   3.488556807053356*^9, 3.488556821828608*^9}, {3.4885631428491573`*^9, 
   3.488563191186213*^9}, {3.4885644861244307`*^9, 3.4885644939969473`*^9}, {
   3.48856542271835*^9, 3.488565456080398*^9}, {3.488565499234171*^9, 
   3.488565502067211*^9}, {3.4885739069425592`*^9, 3.488574245987401*^9}, {
   3.4886511206387787`*^9, 3.488651174952669*^9}},
 CellID->628167256],

Cell[BoxData[
 RowBox[{
  RowBox[{"FindAugmentingPath", "[", 
   RowBox[{"Gadj_", ",", " ", "m_", ",", " ", "n_", ",", " ", "M_"}], "]"}], 
  " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"MV", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"0", ",", 
         RowBox[{"{", 
          RowBox[{"m", "+", "n"}], "}"}]}], "]"}]}], ",", "parent", ",", "Q", 
      ",", " ", 
      RowBox[{"yans", "=", "0"}], ",", " ", "ed", ",", "u"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"trQ", "=", 
      RowBox[{"covQ", "=", "False"}]}], ";", 
     RowBox[{"parent", "=", 
      RowBox[{"Table", "[", 
       RowBox[{"0", ",", 
        RowBox[{"{", 
         RowBox[{"m", "+", "n"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"X", "=", 
      RowBox[{"Range", "[", "m", "]"}]}], ";", " ", 
     RowBox[{"Y", "=", 
      RowBox[{
       RowBox[{"Range", "[", "n", "]"}], "+", "m"}]}], ";", 
     RowBox[{"head", "=", 
      RowBox[{"tail", "=", "0"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"roots", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{"X", ",", 
        RowBox[{"First", "/@", " ", "M"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"MV", "\[LeftDoubleBracket]", 
          RowBox[{
          "ed", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
          "\[RightDoubleBracket]"}], "=", 
         RowBox[{
         "ed", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], ";", 
        RowBox[{
         RowBox[{"MV", "\[LeftDoubleBracket]", 
          RowBox[{
          "ed", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
          "\[RightDoubleBracket]"}], "=", 
         RowBox[{
         "ed", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}]}], 
       ",", 
       RowBox[{"{", 
        RowBox[{"ed", ",", "M"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"head", "\[Equal]", "tail"}], " ", "&&", 
           RowBox[{"yans", "\[Equal]", "0"}], "&&", 
           RowBox[{"roots", "\[NotEqual]", 
            RowBox[{"{", "}"}]}]}], ",", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"Q", "[", "tail", "]"}], "=", 
            RowBox[{
             RowBox[{"parent", "\[LeftDoubleBracket]", 
              RowBox[{
              "roots", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
               "\[RightDoubleBracket]"}], "=", 
             RowBox[{
             "roots", "\[LeftDoubleBracket]", "1", 
              "\[RightDoubleBracket]"}]}]}], ";", 
           RowBox[{"tail", "++"}], ";", 
           RowBox[{"roots", "=", 
            RowBox[{"Rest", "[", "roots", "]"}]}]}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"head", "<", "tail"}], "&&", " ", 
         RowBox[{"yans", "\[Equal]", "0"}]}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"u", "=", 
         RowBox[{"Q", "[", "head", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"head", "++"}], ";", " ", 
        RowBox[{"uNbrs", "=", 
         RowBox[{
         "Gadj", "\[LeftDoubleBracket]", "u", "\[RightDoubleBracket]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"u", "\[LessEqual]", "m"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Do", "[", 
           RowBox[{
            RowBox[{"If", "[", " ", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                "parent", "\[LeftDoubleBracket]", "y", 
                 "\[RightDoubleBracket]"}], "\[Equal]", "0"}], "&&", 
               RowBox[{
                RowBox[{
                "MV", "\[LeftDoubleBracket]", "u", "\[RightDoubleBracket]"}], 
                "\[NotEqual]", "y"}]}], " ", ",", " ", 
              RowBox[{
               RowBox[{
                RowBox[{
                "parent", "\[LeftDoubleBracket]", "y", 
                 "\[RightDoubleBracket]"}], "=", "u"}], ";", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                  "MV", "\[LeftDoubleBracket]", "y", 
                   "\[RightDoubleBracket]"}], "\[Equal]", "0"}], ",", " ", 
                 RowBox[{
                  RowBox[{"yans", "=", "y"}], ";", 
                  RowBox[{"Break", "[", "]"}]}]}], "]"}], ";", 
               RowBox[{
                RowBox[{"Q", "[", "tail", "]"}], "=", " ", "y"}], ";", 
               RowBox[{"tail", "++"}]}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"y", ",", " ", "uNbrs"}], "}"}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Do", "[", 
           RowBox[{
            RowBox[{"If", "[", " ", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                "parent", "\[LeftDoubleBracket]", "x", 
                 "\[RightDoubleBracket]"}], "\[Equal]", "0"}], "&&", " ", 
               RowBox[{
                RowBox[{
                "MV", "\[LeftDoubleBracket]", "u", "\[RightDoubleBracket]"}], 
                "\[Equal]", "x"}]}], " ", ",", " ", 
              RowBox[{
               RowBox[{
                RowBox[{
                "parent", "\[LeftDoubleBracket]", "x", 
                 "\[RightDoubleBracket]"}], "=", "u"}], ";", " ", 
               RowBox[{
                RowBox[{"Q", "[", "tail", "]"}], "=", " ", "x"}], ";", 
               RowBox[{"tail", "++"}]}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"x", ",", "uNbrs"}], "}"}]}], "]"}]}], "]"}]}]}], "]"}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"yans", ">", "0"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"True", ",", 
         RowBox[{"Reverse", "[", 
          RowBox[{"Most", "[", 
           RowBox[{"FixedPointList", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
              "parent", "\[LeftDoubleBracket]", "#", 
               "\[RightDoubleBracket]"}], "&"}], ",", " ", "yans"}], "]"}], 
           "]"}], "]"}], ",", " ", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"trQ", "||", "covQ"}], ",", " ", 
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"Select", "[", 
              RowBox[{"X", ",", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{
                 "parent", "\[LeftDoubleBracket]", "#", 
                  "\[RightDoubleBracket]"}], "==", "0"}], "&"}]}], "]"}], ",", 
             RowBox[{"Select", "[", 
              RowBox[{"Y", ",", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{
                 "parent", "\[LeftDoubleBracket]", "#", 
                  "\[RightDoubleBracket]"}], "\[NotEqual]", "0"}], "&"}]}], 
              "]"}]}], " ", "]"}], ",", "\[Infinity]"}], "]"}], ",", 
         "parent"}], "}"}], ",", "\n", "   ", 
       RowBox[{"{", 
        RowBox[{"False", ",", " ", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"trQ", "||", "covQ"}], ",", " ", 
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"Select", "[", 
              RowBox[{"X", ",", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{
                 "parent", "\[LeftDoubleBracket]", "#", 
                  "\[RightDoubleBracket]"}], "==", "0"}], "&"}]}], "]"}], ",", 
             RowBox[{"Select", "[", 
              RowBox[{"Y", ",", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{
                 "parent", "\[LeftDoubleBracket]", "#", 
                  "\[RightDoubleBracket]"}], "\[NotEqual]", "0"}], "&"}]}], 
              "]"}]}], " ", "]"}], ",", "\[Infinity]"}], "]"}], ",", " ", 
         "parent"}], "}"}]}], "]"}]}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.35696210375764*^9, {3.488494882740671*^9, 3.4884949302568083`*^9}, {
   3.488495004799062*^9, 3.4884950093643208`*^9}, {3.488495049293165*^9, 
   3.488495049906143*^9}, {3.48849508780262*^9, 3.4884951529663553`*^9}, {
   3.488495219907305*^9, 3.488495451381871*^9}, {3.488495984960973*^9, 
   3.488495990007182*^9}, {3.4884960365204144`*^9, 3.488496103910432*^9}, {
   3.4884961804691057`*^9, 3.488496206941065*^9}, {3.4884968389858*^9, 
   3.488496879406158*^9}, {3.48855605097237*^9, 3.4885560782539473`*^9}, {
   3.488556807053356*^9, 3.488556821828608*^9}, {3.4885631428491573`*^9, 
   3.488563191186213*^9}, {3.4885644861244307`*^9, 3.4885644939969473`*^9}, {
   3.48856542271835*^9, 3.488565456080398*^9}, {3.488565499234171*^9, 
   3.488565502067211*^9}, {3.4885739069425592`*^9, 3.488574245987401*^9}, {
   3.4886511206387787`*^9, 3.488651164749283*^9}},
 CellID->165062981],

Cell[BoxData[
 RowBox[{
  RowBox[{"BipartiteMaximumMatching", "[", 
   RowBox[{"G_", ",", " ", "parts_"}], "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Gadj", " ", "=", " ", 
       RowBox[{"ToAdjacencyListsSW", "[", "G", "]"}]}], ",", "M", ",", "X", 
      ",", "Y", ",", "m", ",", "n", ",", " ", "oldparD", ",", " ", "parD", 
      ",", " ", "cover"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m", ",", "n"}], "}"}], "=", "parts"}], ";", 
     RowBox[{"X", "=", 
      RowBox[{"Range", "[", "m", "]"}]}], ";", " ", 
     RowBox[{"Y", "=", 
      RowBox[{"Range", "[", 
       RowBox[{
        RowBox[{"m", "+", "1"}], ",", " ", 
        RowBox[{"m", "+", "n"}]}], "]"}]}], ";", 
     RowBox[{"M", "=", " ", 
      RowBox[{"MaximalMatchingSW", "[", "G", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"oldparD", "=", "parD"}], ";", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "augPathState", ",", " ", "augPath", ",", " ", "cover", ",", " ", 
           "parD"}], "}"}], "=", 
         RowBox[{"FindAugmentingPath", "[", 
          RowBox[{"Gadj", ",", "m", ",", "n", ",", "M"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "augPathState"}], ",", "\[IndentingNewLine]", 
       " ", 
       RowBox[{
        RowBox[{"pathedges", "=", 
         RowBox[{"Append", "[", 
          RowBox[{
           RowBox[{"Sort", "/@", 
            RowBox[{"Partition", "[", 
             RowBox[{"augPath", ",", "2", ",", "1"}], "]"}]}], ",", 
           RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"M", " ", "=", 
         RowBox[{"Complement", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{"M", ",", " ", 
             RowBox[{"pathedges", "\[LeftDoubleBracket]", 
              RowBox[{"1", ";;", 
               RowBox[{"-", "1"}], ";;", "2"}], "\[RightDoubleBracket]"}]}], 
            "]"}], ",", " ", 
           RowBox[{"pathedges", "\[LeftDoubleBracket]", 
            RowBox[{"2", ";;", 
             RowBox[{"-", "1"}], ";;", "2"}], "\[RightDoubleBracket]"}]}], 
          "]"}]}]}]}], "]"}], ";", "M"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.35696210375764*^9, {3.488494882740671*^9, 3.4884949302568083`*^9}, {
   3.488495004799062*^9, 3.4884950093643208`*^9}, {3.488495049293165*^9, 
   3.488495049906143*^9}, {3.48849508780262*^9, 3.4884951529663553`*^9}, {
   3.488495219907305*^9, 3.488495451381871*^9}, {3.488495984960973*^9, 
   3.488495990007182*^9}, {3.4884960365204144`*^9, 3.488496103910432*^9}, {
   3.4884961804691057`*^9, 3.488496206941065*^9}, {3.4884968389858*^9, 
   3.488496879406158*^9}, {3.48855605097237*^9, 3.4885560782539473`*^9}, {
   3.488556807053356*^9, 3.488556821828608*^9}, {3.4885631428491573`*^9, 
   3.488563191186213*^9}, {3.4885644861244307`*^9, 3.4885644939969473`*^9}, {
   3.48856542271835*^9, 3.488565456080398*^9}, {3.488565499234171*^9, 
   3.488565502067211*^9}, {3.4885739069425592`*^9, 3.488574245987401*^9}, {
   3.4886511206387787`*^9, 3.4886511581084876`*^9}, {3.488751679942835*^9, 
   3.488751681036002*^9}, 3.562010411588249*^9},
 CellID->733913802]
}, Closed]],

Cell[CellGroupData[{

Cell["", "ManipulateSection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "blocked", ",", " ", "allvertices", ",", " ", "vertices", ",", "mat", 
       ",", "ff1", ",", "edges", ",", "black", ",", "allblack", ",", "m1", 
       ",", "m2", ",", "white", ",", "allwhite"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"blocked", "=", 
       RowBox[{"Select", "[", 
        RowBox[{
         RowBox[{"Floor", "[", "blocked1", "]"}], ",", " ", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "<", 
            RowBox[{"n", "+", ".999"}]}], " ", "&&", " ", 
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "<", 
            RowBox[{"n", "+", ".999"}]}]}], " ", "&"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"blocked", " ", "=", " ", 
       RowBox[{"Join", "[", 
        RowBox[{"blocked", ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"n", ",", "n"}], "}"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"blocked", "=", 
       RowBox[{"Select", "[", 
        RowBox[{"blocked", ",", " ", 
         RowBox[{
          RowBox[{"OddQ", "[", 
           RowBox[{"Count", "[", 
            RowBox[{"blocked", ",", " ", "#"}], "]"}], "]"}], "&"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"allvertices", " ", "=", " ", 
       RowBox[{"Tuples", "[", 
        RowBox[{
         RowBox[{"Range", "[", "n", "]"}], ",", " ", "2"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"vertices", " ", "=", " ", 
       RowBox[{"Complement", "[", 
        RowBox[{"allvertices", ",", " ", "blocked"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"mat", " ", "=", " ", 
       RowBox[{"DominoPuzzleSolution", "[", 
        RowBox[{"n", ",", " ", "blocked"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ff1", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"v", ",", " ", 
              RowBox[{"Select", "[", 
               RowBox[{"vertices", ",", " ", 
                RowBox[{
                 RowBox[{"MemberQ", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
                   RowBox[{"Abs", "[", 
                    RowBox[{"#", "-", "v"}], "]"}]}], "]"}], "&"}]}], "]"}]}],
              "}"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"v", ",", " ", "vertices"}], "}"}]}], "]"}], "/.", " ", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"v_", ",", " ", "vlist_"}], "}"}], " ", "\[RuleDelayed]", 
           " ", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"v", ",", " ", "vv"}], "}"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"vv", ",", " ", "vlist"}], "}"}]}], "]"}]}]}], ",", 
         "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"ff1", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"ff1", ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"_Integer", ",", " ", "_Integer"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"_Integer", ",", "_Integer"}], "}"}]}], "}"}]}], " ", 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"edges", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"ff1", "\[NotEqual]", " ", 
          RowBox[{"{", "}"}]}], ",", " ", 
         RowBox[{"Union", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"SortBy", "[", 
              RowBox[{"#", ",", " ", 
               RowBox[{
                RowBox[{"Mod", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Total", "[", "#1", "]"}], "-", "n", "-", "1"}], 
                  ",", "2"}], "]"}], "&"}]}], "]"}], "&"}], "/@", " ", 
            "ff1"}], ",", " ", 
           RowBox[{"{", "}"}]}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"black", " ", "=", " ", 
       RowBox[{"Select", "[", 
        RowBox[{"vertices", ",", " ", 
         RowBox[{
          RowBox[{"EvenQ", "[", 
           RowBox[{
            RowBox[{"Total", "[", "#", "]"}], "-", "n"}], "]"}], "&"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"white", "  ", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{"vertices", ",", "black"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"allblack", " ", "=", " ", 
       RowBox[{"Select", "[", 
        RowBox[{"allvertices", ",", " ", 
         RowBox[{
          RowBox[{"EvenQ", "[", 
           RowBox[{
            RowBox[{"Total", "[", "#", "]"}], "-", "n"}], "]"}], "&"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"allwhite", "  ", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{"vertices", ",", "allblack"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"m1", ",", "m2"}], "}"}], " ", "=", " ", 
       RowBox[{"Length", "/@", 
        RowBox[{"{", 
         RowBox[{"white", ",", " ", "black"}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Column", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Text", "@", 
          RowBox[{"Style", "[", 
           RowBox[{"StringForm", "[", 
            RowBox[{
            "\"\<Unblocked white squares: ``\>\"", ",", "\[IndentingNewLine]", 
             RowBox[{"Length", "@", 
              RowBox[{"Complement", "[", 
               RowBox[{"allwhite", ",", "blocked"}], "]"}]}]}], "]"}], 
           "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"Text", "[", 
          RowBox[{"StringForm", "[", 
           RowBox[{
           "\"\<Unblocked black squares: ``\>\"", ",", "\[IndentingNewLine]", 
            RowBox[{"Length", "@", 
             RowBox[{"Complement", "[", 
              RowBox[{"allblack", ",", "blocked"}], "]"}]}]}], "]"}], "]"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"Text", "@", 
          RowBox[{"StringForm", "[", 
           RowBox[{"\"\<Actual maximum number of dominoes: ``\>\"", ",", " ", 
            RowBox[{"Length", "[", "mat", "]"}]}], "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Show", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{"showGraph", ",", " ", 
             RowBox[{"DominoPuzzleBoard", "[", 
              RowBox[{"n", ",", " ", "blocked"}], "]"}], ",", " ", 
             RowBox[{"DominoPuzzleBoardNoGraph", "[", 
              RowBox[{"n", ",", " ", "blocked"}], "]"}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Graphics", "[", 
            RowBox[{"Locator", "/@", 
             RowBox[{"(", " ", 
              RowBox[{"blocked", "+", 
               RowBox[{"1", "/", "2"}]}], ")"}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{"showOptimalSoln", ",", "\[IndentingNewLine]", 
             RowBox[{"Graphics", "@", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"EdgeForm", "[", "Black", "]"}], ",", " ", 
                RowBox[{"Table", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"EdgeForm", "[", "Black", "]"}], ",", " ", 
                    RowBox[{"FaceForm", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "1", ",", ".6"}], "]"}], ",", " ", 
                    RowBox[{"Opacity", "@", 
                    RowBox[{"If", "[", 
                    RowBox[{"showGraph", ",", " ", ".6", ",", "1"}], 
                    "]"}]}]}], "}"}], "]"}], ",", " ", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"xcoords", " ", "=", " ", 
                    RowBox[{"First", " ", "/@", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"white", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "e", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"black", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "e", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}], "-", "m1"}], 
                    "\[RightDoubleBracket]"}]}], "}"}]}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"ycoords", " ", "=", " ", 
                    RowBox[{"Last", " ", "/@", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"white", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "e", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"black", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "e", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}], "-", "m1"}], 
                    "\[RightDoubleBracket]"}]}], "}"}]}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"start", "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Min", "[", "xcoords", "]"}], ",", " ", 
                    RowBox[{"Min", "[", "ycoords", "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Max", "[", "xcoords", "]"}], ",", " ", 
                    RowBox[{"Max", "[", "ycoords", "]"}]}], "}"}]}], "}"}]}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"Rectangle", "@@", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"start", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "2"}], "]"}], "]"}], "==", 
                    RowBox[{"start", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ",", "2"}], "]"}], "]"}]}], ",", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"start", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], "+", ".2"}], ",", 
                    " ", 
                    RowBox[{
                    RowBox[{"start", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "2"}], "]"}], "]"}], "+", ".2"}]}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"start", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ",", "1"}], "]"}], "]"}], "+", ".8"}], ",", 
                    " ", 
                    RowBox[{
                    RowBox[{"start", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "2"}], "]"}], "]"}], "+", ".8"}]}], 
                    "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"start", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], "+", ".2"}], ",", 
                    " ", 
                    RowBox[{
                    RowBox[{"start", "\[LeftDoubleBracket]", 
                    RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], "+", 
                    ".2"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"start", "\[LeftDoubleBracket]", 
                    RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], "+", 
                    ".8"}], ",", " ", 
                    RowBox[{
                    RowBox[{"start", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ",", "2"}], "]"}], "]"}], "+", ".8"}]}], 
                    "}"}]}], "}"}]}], "]"}]}]}]}], "}"}], ",", " ", 
                  RowBox[{"{", 
                   RowBox[{"e", ",", " ", "mat"}], "}"}]}], "]"}]}], "}"}]}], 
             ",", " ", 
             RowBox[{"{", "}"}]}], "]"}], ",", " ", 
           RowBox[{"ImageSize", "\[Rule]", "400"}], ",", " ", 
           RowBox[{"PlotLabel", "\[Rule]", "None"}]}], "]"}]}], "}"}], 
       "]"}]}]}], "]"}], ",", " ", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "8", ",", "\"\<size of board\>\""}], "}"}], ",", " ", 
     RowBox[{"Range", "[", 
      RowBox[{"3", ",", "12"}], "]"}], ",", " ", 
     RowBox[{"ControlType", "\[Rule]", "Setter"}]}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"blocked1", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "Locator", ",", 
     RowBox[{"LocatorAutoCreate", "\[Rule]", "True"}], ",", " ", 
     RowBox[{"Appearance", "\[Rule]", "None"}]}], "}"}], ",", " ", 
   "\[IndentingNewLine]", 
   RowBox[{"Row", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Control", "@", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"showOptimalSoln", ",", " ", 
           RowBox[{"!", "False"}], ",", " ", 
           "\"\<show maximum domino placement\>\""}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"False", ",", " ", "True"}], "}"}]}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Spacer", "@", "30"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Control", "@", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"showGraph", ",", " ", 
           RowBox[{"!", "True"}], ",", " ", 
           "\"\<show graph of unblocked squares\>\""}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"False", ",", " ", "True"}], "}"}]}], "}"}]}]}], "}"}], 
    "]"}], ",", "\[IndentingNewLine]", " ", 
   RowBox[{"TrackedSymbols", "\[RuleDelayed]", 
    RowBox[{"{", 
     RowBox[{
     "n", ",", " ", "blocked1", ",", "showOptimalSoln", ",", " ", 
      "showGraph"}], "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"AutorunSequencing", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "4"}], "}"}]}], ",", "\[IndentingNewLine]", 
   " ", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
   RowBox[{"SynchronousInitialization", "\[Rule]", "False"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{
  3.35696210375764*^9, {3.488494856625016*^9, 3.488494865379422*^9}, {
   3.488494950929673*^9, 3.488494971517796*^9}, {3.488496250748987*^9, 
   3.488496251004117*^9}, {3.48849648275136*^9, 3.4884965537629023`*^9}, {
   3.48849689277404*^9, 3.488496894332234*^9}, {3.488497084285512*^9, 
   3.488497086982798*^9}, {3.4884984940114737`*^9, 3.4884985100041237`*^9}, {
   3.4884985475710583`*^9, 3.4884985923864613`*^9}, {3.4885554246390877`*^9, 
   3.488555490317504*^9}, {3.488555541896607*^9, 3.488555783371421*^9}, {
   3.488555813972023*^9, 3.488555817508565*^9}, {3.488555868098996*^9, 
   3.488555936086928*^9}, 3.4885559914630747`*^9, {3.4885561722707357`*^9, 
   3.488556177826442*^9}, {3.488556208360386*^9, 3.488556256773911*^9}, {
   3.488556300338147*^9, 3.48855631161298*^9}, {3.4885568307963047`*^9, 
   3.488556840462919*^9}, {3.4885568758646107`*^9, 3.488556913670381*^9}, {
   3.488556986353816*^9, 3.4885569873427677`*^9}, {3.488563478050084*^9, 
   3.488563503687289*^9}, {3.488564098115876*^9, 3.488564158907689*^9}, {
   3.488564511945818*^9, 3.488564515987658*^9}, {3.488564592670636*^9, 
   3.4885647460707483`*^9}, {3.488565145450767*^9, 3.488565180874064*^9}, {
   3.488565591721589*^9, 3.488565593434811*^9}, {3.488565703300618*^9, 
   3.488565718091391*^9}, {3.4885670317519493`*^9, 3.488567112712695*^9}, {
   3.488567237489009*^9, 3.4885672582553453`*^9}, {3.488570047996859*^9, 
   3.488570065029373*^9}, {3.4885730915142717`*^9, 3.488573179406809*^9}, {
   3.4885738912385178`*^9, 3.488573891789648*^9}, {3.4887127382918754`*^9, 
   3.488712757027749*^9}, {3.4887401035388627`*^9, 3.488740116892198*^9}, {
   3.488743768026039*^9, 3.488743784962982*^9}, {3.488749493550619*^9, 
   3.488749508591043*^9}, {3.488749709417791*^9, 3.488749709647291*^9}, {
   3.4887507521837254`*^9, 3.488750755798787*^9}, {3.488750795182128*^9, 
   3.488750815327326*^9}, {3.48875087055928*^9, 3.4887508779830112`*^9}, {
   3.4887510248112717`*^9, 3.488751026265361*^9}, 3.4887510572780046`*^9, {
   3.4887516944889174`*^9, 3.488751702752878*^9}, 3.48875241000488*^9, {
   3.488752474179763*^9, 3.488752478707745*^9}, {3.488752689669312*^9, 
   3.488752689845961*^9}, 3.488752810082563*^9, {3.5620102725673485`*^9, 
   3.562010326268718*^9}, {3.562010356532744*^9, 3.562010398364927*^9}, {
   3.5620104627963696`*^9, 3.5620104768807774`*^9}, {3.566746186619604*^9, 
   3.5667463049424353`*^9}, 3.5667465639513335`*^9, {3.566746931228058*^9, 
   3.5667469331282473`*^9}, 3.5667471288388166`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`blocked1$$ = {}, $CellContext`n$$ = 
    8, $CellContext`showGraph$$ = False, $CellContext`showOptimalSoln$$ = 
    True, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`n$$], 8, "size of board"}, {3, 4, 5, 6, 7, 8, 9, 10, 
      11, 12}}, {{
       Hold[$CellContext`blocked1$$], {}}, Automatic}, {{
       Hold[$CellContext`showOptimalSoln$$], True, 
       "show maximum domino placement"}, {False, True}}, {{
       Hold[$CellContext`showGraph$$], False, 
       "show graph of unblocked squares"}, {False, True}}, {
      Hold[
       Row[{
         Manipulate`Place[1], 
         Spacer[30], 
         Manipulate`Place[2]}]], Manipulate`Dump`ThisIsNotAControl}}, 
    Typeset`size$$ = Automatic, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`n$2057$$ = 
    0, $CellContext`showOptimalSoln$2058$$ = 
    False, $CellContext`showGraph$2059$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`blocked1$$ = {}, $CellContext`n$$ = 
        8, $CellContext`showGraph$$ = False, $CellContext`showOptimalSoln$$ = 
        True}, "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$2057$$, 0], 
        Hold[$CellContext`showOptimalSoln$$, \
$CellContext`showOptimalSoln$2058$$, False], 
        Hold[$CellContext`showGraph$$, $CellContext`showGraph$2059$$, False]},
       "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`blocked$, $CellContext`allvertices$, \
$CellContext`vertices$, $CellContext`mat$, $CellContext`ff1$, \
$CellContext`edges$, $CellContext`black$, $CellContext`allblack$, \
$CellContext`m1$, $CellContext`m2$, $CellContext`white$, \
$CellContext`allwhite$}, $CellContext`blocked$ = Select[
           Floor[$CellContext`blocked1$$], And[
           Part[#, 1] < $CellContext`n$$ + 0.999, 
            Part[#, 2] < $CellContext`n$$ + 0.999]& ]; $CellContext`blocked$ = 
         Join[$CellContext`blocked$, {{1, 
            1}, {$CellContext`n$$, $CellContext`n$$}}]; $CellContext`blocked$ = 
         Select[$CellContext`blocked$, OddQ[
            Count[$CellContext`blocked$, #]]& ]; $CellContext`allvertices$ = 
         Tuples[
           Range[$CellContext`n$$], 2]; $CellContext`vertices$ = 
         Complement[$CellContext`allvertices$, $CellContext`blocked$]; \
$CellContext`mat$ = $CellContext`DominoPuzzleSolution[$CellContext`n$$, \
$CellContext`blocked$]; $CellContext`ff1$ = Flatten[
           ReplaceAll[
            Table[{$CellContext`v, 
              Select[$CellContext`vertices$, MemberQ[{{1, 0}, {0, 1}}, 
                
                Abs[# - $CellContext`v]]& ]}, {$CellContext`v, \
$CellContext`vertices$}], {
              Pattern[$CellContext`v, 
               Blank[]], 
              Pattern[$CellContext`vlist, 
               Blank[]]} :> 
            Table[{$CellContext`v, $CellContext`vv}, {$CellContext`vv, \
$CellContext`vlist}]], 1]; $CellContext`ff1$ = Cases[$CellContext`ff1$, {{
             Blank[Integer], 
             Blank[Integer]}, {
             Blank[Integer], 
             Blank[Integer]}}]; $CellContext`edges$ = 
         If[$CellContext`ff1$ != {}, 
           Union[
            Map[
            SortBy[#, Mod[
              Total[#] - $CellContext`n$$ - 1, 
               2]& ]& , $CellContext`ff1$], {}]]; $CellContext`black$ = 
         Select[$CellContext`vertices$, EvenQ[
           Total[#] - $CellContext`n$$]& ]; $CellContext`white$ = 
         Complement[$CellContext`vertices$, $CellContext`black$]; \
$CellContext`allblack$ = 
         Select[$CellContext`allvertices$, EvenQ[
           Total[#] - $CellContext`n$$]& ]; $CellContext`allwhite$ = 
         Complement[$CellContext`vertices$, $CellContext`allblack$]; \
{$CellContext`m1$, $CellContext`m2$} = 
         Map[Length, {$CellContext`white$, $CellContext`black$}]; Column[{
           Text[
            Style[
             StringForm["Unblocked white squares: ``", 
              Length[
               Complement[$CellContext`allwhite$, $CellContext`blocked$]]]]], 
           Text[
            StringForm["Unblocked black squares: ``", 
             Length[
              Complement[$CellContext`allblack$, $CellContext`blocked$]]]], 
           Text[
            StringForm["Actual maximum number of dominoes: ``", 
             Length[$CellContext`mat$]]], 
           Show[
            If[$CellContext`showGraph$$, 
             $CellContext`DominoPuzzleBoard[$CellContext`n$$, \
$CellContext`blocked$], 
             $CellContext`DominoPuzzleBoardNoGraph[$CellContext`n$$, \
$CellContext`blocked$]], 
            Graphics[
             Map[Locator, $CellContext`blocked$ + 1/2]], 
            If[$CellContext`showOptimalSoln$$, 
             Graphics[{
               EdgeForm[Black], 
               Table[{
                 EdgeForm[Black], 
                 FaceForm[{
                   RGBColor[1, 1, 0.6], 
                   Opacity[
                    
                    If[$CellContext`showGraph$$, 0.6, 
                    1]]}], $CellContext`xcoords = Map[First, {
                    Part[$CellContext`white$, 
                    Part[$CellContext`e, 1]], 
                    
                    Part[$CellContext`black$, 
                    Part[$CellContext`e, 
                    2] - $CellContext`m1$]}]; $CellContext`ycoords = 
                  Map[Last, {
                    Part[$CellContext`white$, 
                    Part[$CellContext`e, 1]], 
                    
                    Part[$CellContext`black$, 
                    Part[$CellContext`e, 
                    2] - $CellContext`m1$]}]; $CellContext`start = {{
                    Min[$CellContext`xcoords], 
                    Min[$CellContext`ycoords]}, {
                    Max[$CellContext`xcoords], 
                    Max[$CellContext`ycoords]}}; Apply[Rectangle, 
                   If[
                   Part[$CellContext`start, 1, 2] == 
                    Part[$CellContext`start, 2, 2], {{
                    Part[$CellContext`start, 1, 1] + 0.2, 
                    Part[$CellContext`start, 1, 2] + 0.2}, {
                    Part[$CellContext`start, 2, 1] + 0.8, 
                    Part[$CellContext`start, 1, 2] + 0.8}}, {{
                    Part[$CellContext`start, 1, 1] + 0.2, 
                    Part[$CellContext`start, 1, 2] + 0.2}, {
                    Part[$CellContext`start, 1, 1] + 0.8, 
                    Part[$CellContext`start, 2, 2] + 
                    0.8}}]]}, {$CellContext`e, $CellContext`mat$}]}], {}], 
            ImageSize -> 400, PlotLabel -> None]}]], 
      "Specifications" :> {{{$CellContext`n$$, 8, "size of board"}, {3, 4, 5, 
         6, 7, 8, 9, 10, 11, 12}, ControlType -> 
         Setter}, {{$CellContext`blocked1$$, {}}, Automatic, ControlType -> 
         Locator, LocatorAutoCreate -> True, Appearance -> 
         None}, {{$CellContext`showOptimalSoln$$, True, 
          "show maximum domino placement"}, {False, True}, ControlPlacement -> 
         1}, {{$CellContext`showGraph$$, False, 
          "show graph of unblocked squares"}, {False, True}, ControlPlacement -> 
         2}, 
        Row[{
          Manipulate`Place[1], 
          Spacer[30], 
          Manipulate`Place[2]}]}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`n$$, $CellContext`blocked1$$, \
$CellContext`showOptimalSoln$$, $CellContext`showGraph$$}, 
        AutorunSequencing -> {1, 3, 4}, SynchronousInitialization -> False}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{458., {283., 288.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`DominoPuzzleSolution[
         Pattern[$CellContext`n1, 
          Blank[]], 
         Pattern[$CellContext`blocked1, 
          Blank[]]] := 
       Module[{$CellContext`black, $CellContext`white, $CellContext`m1, \
$CellContext`m2, $CellContext`vertices, $CellContext`gr}, \
$CellContext`vertices = Complement[
            Tuples[
             Range[$CellContext`n1], 
             2], $CellContext`blocked1]; $CellContext`black = 
          Select[$CellContext`vertices, EvenQ[
            Total[#] - $CellContext`n1]& ]; $CellContext`white = 
          Complement[$CellContext`vertices, $CellContext`black]; \
{$CellContext`m1, $CellContext`m2} = 
          Map[Length, {$CellContext`white, $CellContext`black}]; \
$CellContext`gr = $CellContext`DominoGraph[$CellContext`n1, \
$CellContext`blocked1]; If[Part[$CellContext`gr, 1] == {}, {}, 
           $CellContext`BipartiteMaximumMatching[$CellContext`gr, \
{$CellContext`m1, $CellContext`m2}]]], $CellContext`DominoGraph[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`blocked, 
          Blank[]]] := Quiet[
         Module[{$CellContext`ff, $CellContext`vertices = Complement[
             Tuples[
              Range[$CellContext`n], 
              2], $CellContext`blocked], $CellContext`edges, \
$CellContext`black, $CellContext`white, $CellContext`m1, $CellContext`m2}, \
$CellContext`edges = Union[$CellContext`ff = Flatten[
                ReplaceAll[
                 Table[{$CellContext`v, 
                   Select[$CellContext`vertices, MemberQ[{{1, 0}, {0, 1}}, 
                    
                    Abs[# - $CellContext`v]]& ]}, {$CellContext`v, \
$CellContext`vertices}], {{
                    Pattern[$CellContext`u, 
                    Blank[Integer]], 
                    Pattern[$CellContext`uu, 
                    Blank[]]}, 
                   Condition[
                    Pattern[$CellContext`vlist, 
                    Blank[]], Depth[$CellContext`vlist] <= 3]} :> 
                 Table[{{$CellContext`u, $CellContext`uu}, $CellContext`vv}, \
{$CellContext`vv, $CellContext`vlist}]], 1]; $CellContext`ff = 
              Cases[$CellContext`ff, {{
                  Blank[Integer], 
                  Blank[Integer]}, {
                  Blank[Integer], 
                  Blank[Integer]}}]; If[$CellContext`ff == {}, 
               Return[
                $CellContext`gGraph[{}, $CellContext`vertices]]]; 
             Map[SortBy[#, Mod[
                Total[#] - $CellContext`n - 1, 
                 2]& ]& , $CellContext`ff]]; $CellContext`black = 
           Select[$CellContext`vertices, EvenQ[
             Total[#] - $CellContext`n]& ]; $CellContext`white = 
           Complement[$CellContext`vertices, $CellContext`black]; \
{$CellContext`m1, $CellContext`m2} = 
           Map[Length, {$CellContext`white, $CellContext`black}]; \
$CellContext`gGraph[
            Table[{{
               Part[
                Position[$CellContext`white, 
                 Part[$CellContext`e, 1]], 1, 1], $CellContext`m1 + Part[
                 Position[$CellContext`black, 
                  Part[$CellContext`e, 2]], 1, 
                 1]}}, {$CellContext`e, $CellContext`edges}], 
            Map[List, 
             Join[
              Table[{$CellContext`i, 0}, {$CellContext`i, $CellContext`m1}], 
              
              Table[{$CellContext`i, 
                1}, {$CellContext`i, $CellContext`m2}]]]]]], \
$CellContext`BipartiteMaximumMatching[
         Pattern[$CellContext`G, 
          Blank[]], 
         Pattern[$CellContext`parts, 
          Blank[]]] := 
       Module[{$CellContext`Gadj = \
$CellContext`ToAdjacencyListsSW[$CellContext`G], $CellContext`M, \
$CellContext`X, $CellContext`Y, $CellContext`m, $CellContext`n, \
$CellContext`oldparD, $CellContext`parD, $CellContext`cover}, \
{$CellContext`m, $CellContext`n} = $CellContext`parts; $CellContext`X = 
          Range[$CellContext`m]; $CellContext`Y = 
          Range[$CellContext`m + 
            1, $CellContext`m + $CellContext`n]; $CellContext`M = \
$CellContext`MaximalMatchingSW[$CellContext`G]; 
         While[$CellContext`oldparD = $CellContext`parD; \
{$CellContext`augPathState, $CellContext`augPath, $CellContext`cover, \
$CellContext`parD} = $CellContext`FindAugmentingPath[$CellContext`Gadj, \
$CellContext`m, $CellContext`n, $CellContext`M]; $CellContext`augPathState, \
$CellContext`pathedges = Append[
              Map[Sort, 
               Partition[$CellContext`augPath, 2, 1]], {}]; $CellContext`M = 
            Complement[
              Join[$CellContext`M, 
               Part[$CellContext`pathedges, 
                Span[1, -1, 2]]], 
              Part[$CellContext`pathedges, 
               Span[
               2, -1, 2]]]]; $CellContext`M], $CellContext`ToAdjacencyListsSW[
         Pattern[$CellContext`G, 
          Blank[]]] := ($CellContext`etemp = Union[$CellContext`ee = Map[Sort, 
             $CellContext`EdgesSW[$CellContext`G]], 
           Map[Reverse, $CellContext`ee]]; $CellContext`missing = Complement[
           Range[
            Length[
             Part[$CellContext`G, 2]]], 
           Map[First, $CellContext`etemp]]; $CellContext`etemp = Sort[
           Join[$CellContext`etemp, 
            
            Table[{$CellContext`m, {}}, {$CellContext`m, \
$CellContext`missing}]]]; ReplaceAll[
          ReplaceAll[
           Split[$CellContext`etemp, Part[#, 1] === Part[#2, 1]& ], {
             Blank[Integer], 
             Pattern[$CellContext`n, 
              
              Blank[]]} :> $CellContext`n], {{}} -> {}]), $CellContext`etemp = \
CompressedData["
1:eJwVzseVgzAAAFGTs0QGAwZEFDljoIwtwQ1sa1vi4sO8uX70+f35kI/H4+/u
e+JFhAQiQzIiEyqiYiqlYzpjXgxicjZkEZtwEZdwKVfwiM95LCRCIVRiKhZi
KdZSJpVSI+cyllsFK5XSgRLUoAEDxLCFHRzVWu3VQWu0QZv1Vh/1xeiM0ZiM
1ezNydyswZqt3Z7s1d7sw9mc3Tnd2d3d67k8397qvb3D3/zDP4M9OIPrRbyY
kAjJkI3IiIq4mIppRCAGsYhPyOTmJkJKpVwqZnQm5UzO53LBFcKXW0olwDyW
sYJhJVRKLdagVhupAY3Wyi1s9U7pYGf0am8OYLjZgzXCUf9yJ3OyZ222ZnfR
l+dqrPbqbeZmb87m79bu7O4evG/wYR83+HTOG3y5V/APq4EqOw==
        "], $CellContext`ee = {{1, 29}, {1, 30}, {1, 33}, {2, 30}, {2, 31}, {
        2, 34}, {3, 31}, {3, 32}, {3, 35}, {4, 32}, {4, 36}, {5, 29}, {5, 
        33}, {5, 37}, {6, 30}, {6, 33}, {6, 34}, {7, 31}, {7, 34}, {7, 35}, {
        7, 38}, {8, 33}, {8, 37}, {8, 40}, {9, 34}, {9, 38}, {9, 41}, {10, 
        35}, {10, 38}, {10, 39}, {10, 42}, {11, 36}, {11, 39}, {11, 43}, {12, 
        37}, {12, 40}, {12, 44}, {13, 40}, {13, 41}, {13, 45}, {14, 39}, {14, 
        42}, {14, 43}, {14, 47}, {15, 40}, {15, 44}, {15, 45}, {15, 48}, {16, 
        42}, {16, 46}, {16, 47}, {17, 43}, {17, 47}, {17, 50}, {18, 44}, {18, 
        48}, {18, 51}, {19, 45}, {19, 48}, {19, 49}, {19, 52}, {20, 46}, {20, 
        49}, {20, 53}, {21, 47}, {21, 50}, {21, 54}, {22, 49}, {22, 52}, {22, 
        53}, {22, 56}, {23, 53}, {23, 54}, {23, 57}, {24, 50}, {24, 54}, {24, 
        58}, {25, 51}, {25, 55}, {26, 52}, {26, 55}, {26, 56}, {27, 53}, {27, 
        56}, {27, 57}, {28, 54}, {28, 57}, {28, 58}}, $CellContext`EdgesSW[
         Pattern[$CellContext`G, 
          Blank[]]] := Map[First, 
         Part[$CellContext`G, 
          1]], $CellContext`missing = {}, $CellContext`X = {1, 2, 3, 4, 5, 6, 
        7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 
        25, 26, 27, 28}, $CellContext`Y = {29, 30, 31, 32, 33, 34, 35, 36, 37,
         38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 
        55, 56, 57, 58}, $CellContext`MaximalMatchingSW[
         Pattern[$CellContext`g, 
          Blank[]]] := 
       Module[{$CellContext`match = {}, $CellContext`ee = \
$CellContext`EdgesSW[$CellContext`g]}, $CellContext`match = 
          Part[$CellContext`ee, 1]; Do[
           If[
           Intersection[$CellContext`e, $CellContext`match] == {}, \
$CellContext`match = 
            Join[$CellContext`match, $CellContext`e]], {$CellContext`e, 
            Rest[$CellContext`ee]}]; Map[Sort, 
           Partition[$CellContext`match, 2]]], $CellContext`augPathState = 
       False, $CellContext`augPath = {}, $CellContext`FindAugmentingPath[
         Pattern[$CellContext`Gadj, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`M, 
          Blank[]]] := 
       Module[{$CellContext`MV = 
          Table[0, {$CellContext`m + $CellContext`n}], $CellContext`parent, \
$CellContext`Q, $CellContext`yans = 
          0, $CellContext`ed, $CellContext`u}, $CellContext`trQ = \
($CellContext`covQ = False); $CellContext`parent = 
          Table[0, {$CellContext`m + $CellContext`n}]; $CellContext`X = 
          Range[$CellContext`m]; $CellContext`Y = 
          Range[$CellContext`n] + $CellContext`m; $CellContext`head = \
($CellContext`tail = 0); $CellContext`roots = Complement[$CellContext`X, 
            Map[First, $CellContext`M]]; Do[Part[$CellContext`MV, 
              Part[$CellContext`ed, 1]] = Part[$CellContext`ed, 2]; 
           Part[$CellContext`MV, 
              Part[$CellContext`ed, 2]] = 
            Part[$CellContext`ed, 1], {$CellContext`ed, $CellContext`M}]; 
         While[If[
             
             And[$CellContext`head == $CellContext`tail, $CellContext`yans == 
              0, $CellContext`roots != {}], $CellContext`Q[$CellContext`tail] = \
(Part[$CellContext`parent, 
                 Part[$CellContext`roots, 1]] = Part[$CellContext`roots, 1]); 
             Increment[$CellContext`tail]; $CellContext`roots = 
              Rest[$CellContext`roots]]; 
           And[$CellContext`head < $CellContext`tail, $CellContext`yans == 
             0], $CellContext`u = $CellContext`Q[$CellContext`head]; 
           Increment[$CellContext`head]; $CellContext`uNbrs = 
            Part[$CellContext`Gadj, $CellContext`u]; 
           If[$CellContext`u <= $CellContext`m, 
             Do[
              If[
               And[
               Part[$CellContext`parent, $CellContext`y] == 0, 
                Part[$CellContext`MV, $CellContext`u] != $CellContext`y], 
               Part[$CellContext`parent, $CellContext`y] = $CellContext`u; 
               If[Part[$CellContext`MV, $CellContext`y] == 
                 0, $CellContext`yans = $CellContext`y; 
                 Break[]]; $CellContext`Q[$CellContext`tail] = $CellContext`y; 
               Increment[$CellContext`tail]], {$CellContext`y, \
$CellContext`uNbrs}], 
             Do[
              If[
               And[
               Part[$CellContext`parent, $CellContext`x] == 0, 
                Part[$CellContext`MV, $CellContext`u] == $CellContext`x], 
               Part[$CellContext`parent, $CellContext`x] = $CellContext`u; \
$CellContext`Q[$CellContext`tail] = $CellContext`x; 
               Increment[$CellContext`tail]], {$CellContext`x, \
$CellContext`uNbrs}]]]; If[$CellContext`yans > 0, {True, 
            Reverse[
             Most[
              FixedPointList[
              Part[$CellContext`parent, #]& , $CellContext`yans]]], 
            If[
             Or[$CellContext`trQ, $CellContext`covQ], 
             Join[
              Select[$CellContext`X, Part[$CellContext`parent, #] == 0& ], 
              Select[$CellContext`Y, Part[$CellContext`parent, #] != 0& ]], 
             Infinity], $CellContext`parent}, {False, {}, 
            If[
             Or[$CellContext`trQ, $CellContext`covQ], 
             Join[
              Select[$CellContext`X, Part[$CellContext`parent, #] == 0& ], 
              Select[$CellContext`Y, Part[$CellContext`parent, #] != 0& ]], 
             Infinity], $CellContext`parent}]], $CellContext`trQ = 
       False, $CellContext`covQ = False, $CellContext`head = 
       0, $CellContext`tail = 
       0, $CellContext`roots = {}, $CellContext`uNbrs = {}, \
$CellContext`pathedges = {{19, 48}, {16, 48}, {16, 43}, {15, 43}, {15, 42}, {
         14, 42}, {14, 46}, {21, 46}, {21, 50}, {23, 50}, {23, 
         56}, {}}, $CellContext`DominoPuzzleBoard[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`blocked, 
          Blank[]]] := Module[{$CellContext`allverts = Tuples[
            Range[$CellContext`n], 2], $CellContext`vertices = Complement[
            Tuples[
             Range[$CellContext`n], 
             2], $CellContext`blocked], $CellContext`edges, \
$CellContext`black, $CellContext`white, $CellContext`m1, $CellContext`m2, \
$CellContext`ff}, $CellContext`ff = Flatten[
            ReplaceAll[
             Table[{$CellContext`v, 
               Select[$CellContext`vertices, MemberQ[{{1, 0}, {0, 1}}, 
                 
                 Abs[# - $CellContext`v]]& ]}, {$CellContext`v, \
$CellContext`vertices}], {{
                Pattern[$CellContext`u, 
                 Blank[Integer]], 
                Pattern[$CellContext`uu, 
                 Blank[]]}, 
               Condition[
                Pattern[$CellContext`vlist, 
                 Blank[]], Depth[$CellContext`vlist] <= 3]} :> 
             Table[{{$CellContext`u, $CellContext`uu}, $CellContext`vv}, \
{$CellContext`vv, $CellContext`vlist}]], 1]; $CellContext`ff = 
          Cases[$CellContext`ff, {{
              Blank[Integer], 
              Blank[Integer]}, {
              Blank[Integer], 
              Blank[Integer]}}]; $CellContext`edges = 
          If[$CellContext`ff != {}, 
            Union[
             Map[
             SortBy[#, Mod[
               Total[#] - $CellContext`n - 1, 
                2]& ]& , $CellContext`ff]], {}]; $CellContext`black = 
          Select[$CellContext`allverts, EvenQ[
            Total[#] - $CellContext`n]& ]; $CellContext`white = 
          Complement[$CellContext`allverts, $CellContext`black]; \
{$CellContext`m1, $CellContext`m2} = 
          Map[Length, {$CellContext`white, $CellContext`black}]; Graphics[{
            EdgeForm[
             GrayLevel[0]], {
             FaceForm[
              GrayLevel[1]], 
             Table[
              
              Rectangle[$CellContext`v, $CellContext`v + 
               1], {$CellContext`v, $CellContext`white}]}, {
             FaceForm[
              GrayLevel[0.3]], 
             Table[
              
              Rectangle[$CellContext`v, $CellContext`v + 
               1], {$CellContext`v, $CellContext`black}]}, {
             FaceForm[Red], 
             EdgeForm[], 
             Table[
              
              Rectangle[$CellContext`pt + 0.1, $CellContext`pt + 1 - 
               0.1], {$CellContext`pt, $CellContext`blocked}]}, {
             FaceForm[], 
             EdgeForm[Black], 
             Table[
              
              Rectangle[$CellContext`pt, $CellContext`pt + 
               1], {$CellContext`pt, $CellContext`blocked}]}, 
            Table[{
              AbsoluteThickness[2], 
              
              Line[$CellContext`e + 
               0.5]}, {$CellContext`e, $CellContext`edges}], 
            Table[{Blue, 
              PointSize[0.4/$CellContext`n], 
              
              Point[$CellContext`v + 
               0.5]}, {$CellContext`v, $CellContext`vertices}]}]], \
$CellContext`DominoPuzzleBoardNoGraph[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`blocked, 
          Blank[]]] := Module[{$CellContext`allverts = Tuples[
            Range[$CellContext`n], 2], $CellContext`vertices = Complement[
            Tuples[
             Range[$CellContext`n], 
             2], $CellContext`blocked], $CellContext`black, \
$CellContext`white, $CellContext`m1, $CellContext`m2, \
$CellContext`allvertices1}, $CellContext`allvertices1 = Tuples[
            Range[$CellContext`n], 2]; $CellContext`black = 
          Select[$CellContext`allvertices1, EvenQ[
            Total[#] - $CellContext`n]& ]; $CellContext`white = 
          Complement[$CellContext`allvertices1, $CellContext`black]; \
{$CellContext`m1, $CellContext`m2} = 
          Map[Length, {$CellContext`white, $CellContext`black}]; Graphics[{
            EdgeForm[Black], {
             FaceForm[
              GrayLevel[1]], 
             Table[
              
              Rectangle[$CellContext`v, $CellContext`v + 
               1], {$CellContext`v, $CellContext`white}]}, {
             FaceForm[
              GrayLevel[0.3]], 
             Table[
              
              Rectangle[$CellContext`v, $CellContext`v + 
               1], {$CellContext`v, $CellContext`black}]}, {
             FaceForm[Red], 
             EdgeForm[], 
             Table[
              
              Rectangle[$CellContext`pt + 0.1, $CellContext`pt + 1 - 
               0.1], {$CellContext`pt, $CellContext`blocked}]}, {
             FaceForm[], 
             EdgeForm[Black], 
             Table[
              
              Rectangle[$CellContext`pt, $CellContext`pt + 
               1], {$CellContext`pt, $CellContext`blocked}]}}]], \
$CellContext`xcoords = {8, 7}, $CellContext`ycoords = {7, 
        7}, $CellContext`start = {{7, 7}, {8, 7}}}; Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.5668499389595547`*^9},
 CellID->179017480]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateCaptionSection"],

Cell["\<\
A classic puzzle asks for the placement of as many disjoint dominoes (1\
\[Times]2 tiles) as possible onto a checkerboard from which some squares have \
been removed. The problem can be solved by setting up a bipartite graph where \
one part consists of the white unblocked squares, the other consists of the \
black unblocked squares, and edges correspond to adjacency of squares. Then a \
maximum matching (a collection of disjoint edges that is as large as \
possible) in this graph leads to a solution of the domino problem. In this \
Demonstration, the blocked squares are red, the graph is shown in blue, and \
the maximum domino array is shown in yellow.\
\>", "ManipulateCaption",
 CellChangeTimes->{
  3.35696210375764*^9, {3.4885649311246634`*^9, 3.4885649311259527`*^9}, 
   3.4885649772400627`*^9, 3.488567159943171*^9, {3.488573249585684*^9, 
   3.488573258677903*^9}, 3.488651330815024*^9},
 CellID->1022167917],

Cell[TextData[{
 "To add or remove blocked squares, ",
 Cell[BoxData[
  FormBox["\[CloverLeaf]", TraditionalForm]], "InlineMath"],
 "-click or ",
 Cell[BoxData[
  FormBox["\[AltKey]", TraditionalForm]], "InlineMath"],
 "-click a square."
}], "ManipulateCaption",
 CellChangeTimes->{
  3.35696210375764*^9, {3.4885649318455477`*^9, 3.4885649742297487`*^9}, {
   3.488651351377787*^9, 3.488651357237237*^9}, {3.488711095007456*^9, 
   3.4887111001720324`*^9}, {3.488740048358345*^9, 3.4887400600415134`*^9}},
 CellID->1854488666]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ThumbnailSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`blocked1$$ = {}, $CellContext`n$$ = 
    8, $CellContext`showGraph$$ = False, $CellContext`showOptimalSoln$$ = 
    True, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`n$$], 8, "size of board"}, {3, 4, 5, 6, 7, 8, 9, 10, 
      11, 12}}, {{
       Hold[$CellContext`blocked1$$], {}}, Automatic}, {{
       Hold[$CellContext`showOptimalSoln$$], True, 
       "show maximum domino placement"}, {False, True}}, {{
       Hold[$CellContext`showGraph$$], False, 
       "show graph of unblocked squares"}, {False, True}}, {
      Hold[
       Row[{
         Manipulate`Place[1], 
         Spacer[30], 
         Manipulate`Place[2]}]], Manipulate`Dump`ThisIsNotAControl}}, 
    Typeset`size$$ = Automatic, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`n$1744$$ = 
    0, $CellContext`showOptimalSoln$1745$$ = 
    False, $CellContext`showGraph$1746$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`blocked1$$ = {}, $CellContext`n$$ = 
        8, $CellContext`showGraph$$ = False, $CellContext`showOptimalSoln$$ = 
        True}, "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$1744$$, 0], 
        Hold[$CellContext`showOptimalSoln$$, \
$CellContext`showOptimalSoln$1745$$, False], 
        Hold[$CellContext`showGraph$$, $CellContext`showGraph$1746$$, False]},
       "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`blocked$, $CellContext`allvertices$, \
$CellContext`vertices$, $CellContext`mat$, $CellContext`ff1$, \
$CellContext`edges$, $CellContext`black$, $CellContext`allblack$, \
$CellContext`m1$, $CellContext`m2$, $CellContext`white$, \
$CellContext`allwhite$}, $CellContext`blocked$ = Select[
           Floor[$CellContext`blocked1$$], And[
           Part[#, 1] < $CellContext`n$$ + 0.999, 
            Part[#, 2] < $CellContext`n$$ + 0.999]& ]; $CellContext`blocked$ = 
         Join[$CellContext`blocked$, {{1, 
            1}, {$CellContext`n$$, $CellContext`n$$}}]; $CellContext`blocked$ = 
         Select[$CellContext`blocked$, OddQ[
            Count[$CellContext`blocked$, #]]& ]; $CellContext`allvertices$ = 
         Tuples[
           Range[$CellContext`n$$], 2]; $CellContext`vertices$ = 
         Complement[$CellContext`allvertices$, $CellContext`blocked$]; \
$CellContext`mat$ = $CellContext`DominoPuzzleSolution[$CellContext`n$$, \
$CellContext`blocked$]; $CellContext`ff1$ = Flatten[
           ReplaceAll[
            Table[{$CellContext`v, 
              Select[$CellContext`vertices$, MemberQ[{{1, 0}, {0, 1}}, 
                
                Abs[# - $CellContext`v]]& ]}, {$CellContext`v, \
$CellContext`vertices$}], {
              Pattern[$CellContext`v, 
               Blank[]], 
              Pattern[$CellContext`vlist, 
               Blank[]]} :> 
            Table[{$CellContext`v, $CellContext`vv}, {$CellContext`vv, \
$CellContext`vlist}]], 1]; $CellContext`ff1$ = Cases[$CellContext`ff1$, {{
             Blank[Integer], 
             Blank[Integer]}, {
             Blank[Integer], 
             Blank[Integer]}}]; $CellContext`edges$ = 
         If[$CellContext`ff1$ != {}, 
           Union[
            Map[
            SortBy[#, Mod[
              Total[#] - $CellContext`n$$ - 1, 
               2]& ]& , $CellContext`ff1$], {}]]; $CellContext`black$ = 
         Select[$CellContext`vertices$, EvenQ[
           Total[#] - $CellContext`n$$]& ]; $CellContext`white$ = 
         Complement[$CellContext`vertices$, $CellContext`black$]; \
$CellContext`allblack$ = 
         Select[$CellContext`allvertices$, EvenQ[
           Total[#] - $CellContext`n$$]& ]; $CellContext`allwhite$ = 
         Complement[$CellContext`vertices$, $CellContext`allblack$]; \
{$CellContext`m1$, $CellContext`m2$} = 
         Map[Length, {$CellContext`white$, $CellContext`black$}]; Column[{
           Text[
            Style[
             StringForm["Unblocked white squares: ``", 
              Length[
               Complement[$CellContext`allwhite$, $CellContext`blocked$]]]]], 
           Text[
            StringForm["Unblocked black squares: ``", 
             Length[
              Complement[$CellContext`allblack$, $CellContext`blocked$]]]], 
           Text[
            StringForm["Actual maximum number of dominoes: ``", 
             Length[$CellContext`mat$]]], 
           Show[
            If[$CellContext`showGraph$$, 
             $CellContext`DominoPuzzleBoard[$CellContext`n$$, \
$CellContext`blocked$], 
             $CellContext`DominoPuzzleBoardNoGraph[$CellContext`n$$, \
$CellContext`blocked$]], 
            Graphics[
             Map[Locator, $CellContext`blocked$ + 1/2]], 
            If[$CellContext`showOptimalSoln$$, 
             Graphics[{
               EdgeForm[Black], 
               Table[{
                 EdgeForm[Black], 
                 FaceForm[{
                   RGBColor[1, 1, 0.6], 
                   Opacity[
                    
                    If[$CellContext`showGraph$$, 0.6, 
                    1]]}], $CellContext`xcoords = Map[First, {
                    Part[$CellContext`white$, 
                    Part[$CellContext`e, 1]], 
                    
                    Part[$CellContext`black$, 
                    Part[$CellContext`e, 
                    2] - $CellContext`m1$]}]; $CellContext`ycoords = 
                  Map[Last, {
                    Part[$CellContext`white$, 
                    Part[$CellContext`e, 1]], 
                    
                    Part[$CellContext`black$, 
                    Part[$CellContext`e, 
                    2] - $CellContext`m1$]}]; $CellContext`start = {{
                    Min[$CellContext`xcoords], 
                    Min[$CellContext`ycoords]}, {
                    Max[$CellContext`xcoords], 
                    Max[$CellContext`ycoords]}}; Apply[Rectangle, 
                   If[
                   Part[$CellContext`start, 1, 2] == 
                    Part[$CellContext`start, 2, 2], {{
                    Part[$CellContext`start, 1, 1] + 0.2, 
                    Part[$CellContext`start, 1, 2] + 0.2}, {
                    Part[$CellContext`start, 2, 1] + 0.8, 
                    Part[$CellContext`start, 1, 2] + 0.8}}, {{
                    Part[$CellContext`start, 1, 1] + 0.2, 
                    Part[$CellContext`start, 1, 2] + 0.2}, {
                    Part[$CellContext`start, 1, 1] + 0.8, 
                    Part[$CellContext`start, 2, 2] + 
                    0.8}}]]}, {$CellContext`e, $CellContext`mat$}]}], {}], 
            ImageSize -> 400, PlotLabel -> None]}]], 
      "Specifications" :> {{{$CellContext`n$$, 8, "size of board"}, {3, 4, 5, 
         6, 7, 8, 9, 10, 11, 12}, ControlType -> 
         Setter}, {{$CellContext`blocked1$$, {}}, Automatic, ControlType -> 
         Locator, LocatorAutoCreate -> True, Appearance -> 
         None}, {{$CellContext`showOptimalSoln$$, True, 
          "show maximum domino placement"}, {False, True}, ControlPlacement -> 
         1}, {{$CellContext`showGraph$$, False, 
          "show graph of unblocked squares"}, {False, True}, ControlPlacement -> 
         2}, 
        Row[{
          Manipulate`Place[1], 
          Spacer[30], 
          Manipulate`Place[2]}]}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`n$$, $CellContext`blocked1$$, \
$CellContext`showOptimalSoln$$, $CellContext`showGraph$$}, 
        AutorunSequencing -> {1, 3, 4}, SynchronousInitialization -> False}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{458., {283., 288.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`DominoPuzzleSolution[
         Pattern[$CellContext`n1, 
          Blank[]], 
         Pattern[$CellContext`blocked1, 
          Blank[]]] := 
       Module[{$CellContext`black, $CellContext`white, $CellContext`m1, \
$CellContext`m2, $CellContext`vertices, $CellContext`gr}, \
$CellContext`vertices = Complement[
            Tuples[
             Range[$CellContext`n1], 
             2], $CellContext`blocked1]; $CellContext`black = 
          Select[$CellContext`vertices, EvenQ[
            Total[#] - $CellContext`n1]& ]; $CellContext`white = 
          Complement[$CellContext`vertices, $CellContext`black]; \
{$CellContext`m1, $CellContext`m2} = 
          Map[Length, {$CellContext`white, $CellContext`black}]; \
$CellContext`gr = $CellContext`DominoGraph[$CellContext`n1, \
$CellContext`blocked1]; If[Part[$CellContext`gr, 1] == {}, {}, 
           $CellContext`BipartiteMaximumMatching[$CellContext`gr, \
{$CellContext`m1, $CellContext`m2}]]], $CellContext`DominoGraph[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`blocked, 
          Blank[]]] := Quiet[
         Module[{$CellContext`ff, $CellContext`vertices = Complement[
             Tuples[
              Range[$CellContext`n], 
              2], $CellContext`blocked], $CellContext`edges, \
$CellContext`black, $CellContext`white, $CellContext`m1, $CellContext`m2}, \
$CellContext`edges = Union[$CellContext`ff = Flatten[
                ReplaceAll[
                 Table[{$CellContext`v, 
                   Select[$CellContext`vertices, MemberQ[{{1, 0}, {0, 1}}, 
                    
                    Abs[# - $CellContext`v]]& ]}, {$CellContext`v, \
$CellContext`vertices}], {{
                    Pattern[$CellContext`u, 
                    Blank[Integer]], 
                    Pattern[$CellContext`uu, 
                    Blank[]]}, 
                   Condition[
                    Pattern[$CellContext`vlist, 
                    Blank[]], Depth[$CellContext`vlist] <= 3]} :> 
                 Table[{{$CellContext`u, $CellContext`uu}, $CellContext`vv}, \
{$CellContext`vv, $CellContext`vlist}]], 1]; $CellContext`ff = 
              Cases[$CellContext`ff, {{
                  Blank[Integer], 
                  Blank[Integer]}, {
                  Blank[Integer], 
                  Blank[Integer]}}]; If[$CellContext`ff == {}, 
               Return[
                $CellContext`gGraph[{}, $CellContext`vertices]]]; 
             Map[SortBy[#, Mod[
                Total[#] - $CellContext`n - 1, 
                 2]& ]& , $CellContext`ff]]; $CellContext`black = 
           Select[$CellContext`vertices, EvenQ[
             Total[#] - $CellContext`n]& ]; $CellContext`white = 
           Complement[$CellContext`vertices, $CellContext`black]; \
{$CellContext`m1, $CellContext`m2} = 
           Map[Length, {$CellContext`white, $CellContext`black}]; \
$CellContext`gGraph[
            Table[{{
               Part[
                Position[$CellContext`white, 
                 Part[$CellContext`e, 1]], 1, 1], $CellContext`m1 + Part[
                 Position[$CellContext`black, 
                  Part[$CellContext`e, 2]], 1, 
                 1]}}, {$CellContext`e, $CellContext`edges}], 
            Map[List, 
             Join[
              Table[{$CellContext`i, 0}, {$CellContext`i, $CellContext`m1}], 
              
              Table[{$CellContext`i, 
                1}, {$CellContext`i, $CellContext`m2}]]]]]], \
$CellContext`BipartiteMaximumMatching[
         Pattern[$CellContext`G, 
          Blank[]], 
         Pattern[$CellContext`parts, 
          Blank[]]] := 
       Module[{$CellContext`Gadj = \
$CellContext`ToAdjacencyListsSW[$CellContext`G], $CellContext`M, \
$CellContext`X, $CellContext`Y, $CellContext`m, $CellContext`n, \
$CellContext`oldparD, $CellContext`parD, $CellContext`cover}, \
{$CellContext`m, $CellContext`n} = $CellContext`parts; $CellContext`X = 
          Range[$CellContext`m]; $CellContext`Y = 
          Range[$CellContext`m + 
            1, $CellContext`m + $CellContext`n]; $CellContext`M = \
$CellContext`MaximalMatchingSW[$CellContext`G]; 
         While[$CellContext`oldparD = $CellContext`parD; \
{$CellContext`augPathState, $CellContext`augPath, $CellContext`cover, \
$CellContext`parD} = $CellContext`FindAugmentingPath[$CellContext`Gadj, \
$CellContext`m, $CellContext`n, $CellContext`M]; $CellContext`augPathState, \
$CellContext`pathedges = Append[
              Map[Sort, 
               Partition[$CellContext`augPath, 2, 1]], {}]; $CellContext`M = 
            Complement[
              Join[$CellContext`M, 
               Part[$CellContext`pathedges, 
                Span[1, -1, 2]]], 
              Part[$CellContext`pathedges, 
               Span[
               2, -1, 2]]]]; $CellContext`M], $CellContext`ToAdjacencyListsSW[
         Pattern[$CellContext`G, 
          Blank[]]] := ($CellContext`etemp = Union[$CellContext`ee = Map[Sort, 
             $CellContext`EdgesSW[$CellContext`G]], 
           Map[Reverse, $CellContext`ee]]; $CellContext`missing = Complement[
           Range[
            Length[
             Part[$CellContext`G, 2]]], 
           Map[First, $CellContext`etemp]]; $CellContext`etemp = Sort[
           Join[$CellContext`etemp, 
            
            Table[{$CellContext`m, {}}, {$CellContext`m, \
$CellContext`missing}]]]; ReplaceAll[
          ReplaceAll[
           Split[$CellContext`etemp, Part[#, 1] === Part[#2, 1]& ], {
             Blank[Integer], 
             Pattern[$CellContext`n, 
              
              Blank[]]} :> $CellContext`n], {{}} -> {}]), $CellContext`etemp = \
CompressedData["
1:eJwVzseVgzAAAFGTs0QGAwZEFDljoIwtwQ1sa1vi4sO8uX70+f35kI/H4+/u
e+JFhAQiQzIiEyqiYiqlYzpjXgxicjZkEZtwEZdwKVfwiM95LCRCIVRiKhZi
KdZSJpVSI+cyllsFK5XSgRLUoAEDxLCFHRzVWu3VQWu0QZv1Vh/1xeiM0ZiM
1ezNydyswZqt3Z7s1d7sw9mc3Tnd2d3d67k8397qvb3D3/zDP4M9OIPrRbyY
kAjJkI3IiIq4mIppRCAGsYhPyOTmJkJKpVwqZnQm5UzO53LBFcKXW0olwDyW
sYJhJVRKLdagVhupAY3Wyi1s9U7pYGf0am8OYLjZgzXCUf9yJ3OyZ222ZnfR
l+dqrPbqbeZmb87m79bu7O4evG/wYR83+HTOG3y5V/APq4EqOw==
        "], $CellContext`ee = {{1, 29}, {1, 30}, {1, 33}, {2, 30}, {2, 31}, {
        2, 34}, {3, 31}, {3, 32}, {3, 35}, {4, 32}, {4, 36}, {5, 29}, {5, 
        33}, {5, 37}, {6, 30}, {6, 33}, {6, 34}, {7, 31}, {7, 34}, {7, 35}, {
        7, 38}, {8, 33}, {8, 37}, {8, 40}, {9, 34}, {9, 38}, {9, 41}, {10, 
        35}, {10, 38}, {10, 39}, {10, 42}, {11, 36}, {11, 39}, {11, 43}, {12, 
        37}, {12, 40}, {12, 44}, {13, 40}, {13, 41}, {13, 45}, {14, 39}, {14, 
        42}, {14, 43}, {14, 47}, {15, 40}, {15, 44}, {15, 45}, {15, 48}, {16, 
        42}, {16, 46}, {16, 47}, {17, 43}, {17, 47}, {17, 50}, {18, 44}, {18, 
        48}, {18, 51}, {19, 45}, {19, 48}, {19, 49}, {19, 52}, {20, 46}, {20, 
        49}, {20, 53}, {21, 47}, {21, 50}, {21, 54}, {22, 49}, {22, 52}, {22, 
        53}, {22, 56}, {23, 53}, {23, 54}, {23, 57}, {24, 50}, {24, 54}, {24, 
        58}, {25, 51}, {25, 55}, {26, 52}, {26, 55}, {26, 56}, {27, 53}, {27, 
        56}, {27, 57}, {28, 54}, {28, 57}, {28, 58}}, $CellContext`EdgesSW[
         Pattern[$CellContext`G, 
          Blank[]]] := Map[First, 
         Part[$CellContext`G, 
          1]], $CellContext`missing = {}, $CellContext`X = {1, 2, 3, 4, 5, 6, 
        7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 
        25, 26, 27, 28}, $CellContext`Y = {29, 30, 31, 32, 33, 34, 35, 36, 37,
         38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 
        55, 56, 57, 58}, $CellContext`MaximalMatchingSW[
         Pattern[$CellContext`g, 
          Blank[]]] := 
       Module[{$CellContext`match = {}, $CellContext`ee = \
$CellContext`EdgesSW[$CellContext`g]}, $CellContext`match = 
          Part[$CellContext`ee, 1]; Do[
           If[
           Intersection[$CellContext`e, $CellContext`match] == {}, \
$CellContext`match = 
            Join[$CellContext`match, $CellContext`e]], {$CellContext`e, 
            Rest[$CellContext`ee]}]; Map[Sort, 
           Partition[$CellContext`match, 2]]], $CellContext`augPathState = 
       False, $CellContext`augPath = {}, $CellContext`FindAugmentingPath[
         Pattern[$CellContext`Gadj, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`M, 
          Blank[]]] := 
       Module[{$CellContext`MV = 
          Table[0, {$CellContext`m + $CellContext`n}], $CellContext`parent, \
$CellContext`Q, $CellContext`yans = 
          0, $CellContext`ed, $CellContext`u}, $CellContext`trQ = \
($CellContext`covQ = False); $CellContext`parent = 
          Table[0, {$CellContext`m + $CellContext`n}]; $CellContext`X = 
          Range[$CellContext`m]; $CellContext`Y = 
          Range[$CellContext`n] + $CellContext`m; $CellContext`head = \
($CellContext`tail = 0); $CellContext`roots = Complement[$CellContext`X, 
            Map[First, $CellContext`M]]; Do[Part[$CellContext`MV, 
              Part[$CellContext`ed, 1]] = Part[$CellContext`ed, 2]; 
           Part[$CellContext`MV, 
              Part[$CellContext`ed, 2]] = 
            Part[$CellContext`ed, 1], {$CellContext`ed, $CellContext`M}]; 
         While[If[
             
             And[$CellContext`head == $CellContext`tail, $CellContext`yans == 
              0, $CellContext`roots != {}], $CellContext`Q[$CellContext`tail] = \
(Part[$CellContext`parent, 
                 Part[$CellContext`roots, 1]] = Part[$CellContext`roots, 1]); 
             Increment[$CellContext`tail]; $CellContext`roots = 
              Rest[$CellContext`roots]]; 
           And[$CellContext`head < $CellContext`tail, $CellContext`yans == 
             0], $CellContext`u = $CellContext`Q[$CellContext`head]; 
           Increment[$CellContext`head]; $CellContext`uNbrs = 
            Part[$CellContext`Gadj, $CellContext`u]; 
           If[$CellContext`u <= $CellContext`m, 
             Do[
              If[
               And[
               Part[$CellContext`parent, $CellContext`y] == 0, 
                Part[$CellContext`MV, $CellContext`u] != $CellContext`y], 
               Part[$CellContext`parent, $CellContext`y] = $CellContext`u; 
               If[Part[$CellContext`MV, $CellContext`y] == 
                 0, $CellContext`yans = $CellContext`y; 
                 Break[]]; $CellContext`Q[$CellContext`tail] = $CellContext`y; 
               Increment[$CellContext`tail]], {$CellContext`y, \
$CellContext`uNbrs}], 
             Do[
              If[
               And[
               Part[$CellContext`parent, $CellContext`x] == 0, 
                Part[$CellContext`MV, $CellContext`u] == $CellContext`x], 
               Part[$CellContext`parent, $CellContext`x] = $CellContext`u; \
$CellContext`Q[$CellContext`tail] = $CellContext`x; 
               Increment[$CellContext`tail]], {$CellContext`x, \
$CellContext`uNbrs}]]]; If[$CellContext`yans > 0, {True, 
            Reverse[
             Most[
              FixedPointList[
              Part[$CellContext`parent, #]& , $CellContext`yans]]], 
            If[
             Or[$CellContext`trQ, $CellContext`covQ], 
             Join[
              Select[$CellContext`X, Part[$CellContext`parent, #] == 0& ], 
              Select[$CellContext`Y, Part[$CellContext`parent, #] != 0& ]], 
             Infinity], $CellContext`parent}, {False, {}, 
            If[
             Or[$CellContext`trQ, $CellContext`covQ], 
             Join[
              Select[$CellContext`X, Part[$CellContext`parent, #] == 0& ], 
              Select[$CellContext`Y, Part[$CellContext`parent, #] != 0& ]], 
             Infinity], $CellContext`parent}]], $CellContext`trQ = 
       False, $CellContext`covQ = False, $CellContext`head = 
       0, $CellContext`tail = 
       0, $CellContext`roots = {}, $CellContext`uNbrs = {}, \
$CellContext`pathedges = {{19, 48}, {16, 48}, {16, 43}, {15, 43}, {15, 42}, {
         14, 42}, {14, 46}, {21, 46}, {21, 50}, {23, 50}, {23, 
         56}, {}}, $CellContext`DominoPuzzleBoard[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`blocked, 
          Blank[]]] := Module[{$CellContext`allverts = Tuples[
            Range[$CellContext`n], 2], $CellContext`vertices = Complement[
            Tuples[
             Range[$CellContext`n], 
             2], $CellContext`blocked], $CellContext`edges, \
$CellContext`black, $CellContext`white, $CellContext`m1, $CellContext`m2, \
$CellContext`ff}, $CellContext`ff = Flatten[
            ReplaceAll[
             Table[{$CellContext`v, 
               Select[$CellContext`vertices, MemberQ[{{1, 0}, {0, 1}}, 
                 
                 Abs[# - $CellContext`v]]& ]}, {$CellContext`v, \
$CellContext`vertices}], {{
                Pattern[$CellContext`u, 
                 Blank[Integer]], 
                Pattern[$CellContext`uu, 
                 Blank[]]}, 
               Condition[
                Pattern[$CellContext`vlist, 
                 Blank[]], Depth[$CellContext`vlist] <= 3]} :> 
             Table[{{$CellContext`u, $CellContext`uu}, $CellContext`vv}, \
{$CellContext`vv, $CellContext`vlist}]], 1]; $CellContext`ff = 
          Cases[$CellContext`ff, {{
              Blank[Integer], 
              Blank[Integer]}, {
              Blank[Integer], 
              Blank[Integer]}}]; $CellContext`edges = 
          If[$CellContext`ff != {}, 
            Union[
             Map[
             SortBy[#, Mod[
               Total[#] - $CellContext`n - 1, 
                2]& ]& , $CellContext`ff]], {}]; $CellContext`black = 
          Select[$CellContext`allverts, EvenQ[
            Total[#] - $CellContext`n]& ]; $CellContext`white = 
          Complement[$CellContext`allverts, $CellContext`black]; \
{$CellContext`m1, $CellContext`m2} = 
          Map[Length, {$CellContext`white, $CellContext`black}]; Graphics[{
            EdgeForm[
             GrayLevel[0]], {
             FaceForm[
              GrayLevel[1]], 
             Table[
              
              Rectangle[$CellContext`v, $CellContext`v + 
               1], {$CellContext`v, $CellContext`white}]}, {
             FaceForm[
              GrayLevel[0.3]], 
             Table[
              
              Rectangle[$CellContext`v, $CellContext`v + 
               1], {$CellContext`v, $CellContext`black}]}, {
             FaceForm[Red], 
             EdgeForm[], 
             Table[
              
              Rectangle[$CellContext`pt + 0.1, $CellContext`pt + 1 - 
               0.1], {$CellContext`pt, $CellContext`blocked}]}, {
             FaceForm[], 
             EdgeForm[Black], 
             Table[
              
              Rectangle[$CellContext`pt, $CellContext`pt + 
               1], {$CellContext`pt, $CellContext`blocked}]}, 
            Table[{
              AbsoluteThickness[2], 
              
              Line[$CellContext`e + 
               0.5]}, {$CellContext`e, $CellContext`edges}], 
            Table[{Blue, 
              PointSize[0.4/$CellContext`n], 
              
              Point[$CellContext`v + 
               0.5]}, {$CellContext`v, $CellContext`vertices}]}]], \
$CellContext`DominoPuzzleBoardNoGraph[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`blocked, 
          Blank[]]] := Module[{$CellContext`allverts = Tuples[
            Range[$CellContext`n], 2], $CellContext`vertices = Complement[
            Tuples[
             Range[$CellContext`n], 
             2], $CellContext`blocked], $CellContext`black, \
$CellContext`white, $CellContext`m1, $CellContext`m2, \
$CellContext`allvertices1}, $CellContext`allvertices1 = Tuples[
            Range[$CellContext`n], 2]; $CellContext`black = 
          Select[$CellContext`allvertices1, EvenQ[
            Total[#] - $CellContext`n]& ]; $CellContext`white = 
          Complement[$CellContext`allvertices1, $CellContext`black]; \
{$CellContext`m1, $CellContext`m2} = 
          Map[Length, {$CellContext`white, $CellContext`black}]; Graphics[{
            EdgeForm[Black], {
             FaceForm[
              GrayLevel[1]], 
             Table[
              
              Rectangle[$CellContext`v, $CellContext`v + 
               1], {$CellContext`v, $CellContext`white}]}, {
             FaceForm[
              GrayLevel[0.3]], 
             Table[
              
              Rectangle[$CellContext`v, $CellContext`v + 
               1], {$CellContext`v, $CellContext`black}]}, {
             FaceForm[Red], 
             EdgeForm[], 
             Table[
              
              Rectangle[$CellContext`pt + 0.1, $CellContext`pt + 1 - 
               0.1], {$CellContext`pt, $CellContext`blocked}]}, {
             FaceForm[], 
             EdgeForm[Black], 
             Table[
              
              Rectangle[$CellContext`pt, $CellContext`pt + 
               1], {$CellContext`pt, $CellContext`blocked}]}}]], \
$CellContext`xcoords = {8, 7}, $CellContext`ycoords = {7, 
        7}, $CellContext`start = {{7, 7}, {8, 7}}}; Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->12042018]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SnapshotsSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`blocked1$$ = CompressedData["
1:eJxTTMoPSmViYGAQAWIQ/eL3yo+XfHkcwvh0N819L+twV4WtcephKYcNRRkT
39YIOhhyrJGJeqLgsM79YZWInqJDgS3X9cUFUHXMig6XfZMEIn4qOMyaCQSS
sg48TNrtYjclHYJ2yLW+DhR0EIyw3HKijNsByAGKyDns8gSp+GEfB2Z8t4eI
f7cHKto3X4rFYdnsIwobilgcNGP6D33V+GY/B8R9Iejgtu3z3ys/FByk9IE2
M4pB7ZOD21f5Us2QQ0fSwTHh6QWl27IOQMFz3y+LOGTvKZkswaLocFQB5CNB
B7B12aIOMPsh9gg5dOc8B4YEq0PI46VAF3A5fNMASfA6yIMdyOrADwoedSEH
sDP1v9uDbPlZJ+oAAE55iIs=
    "], $CellContext`n$$ = 8, $CellContext`showGraph$$ = 
    False, $CellContext`showOptimalSoln$$ = True, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`n$$], 8, "size of board"}, {3, 4, 5, 6, 7, 8, 9, 10, 
      11, 12}}, {{
       Hold[$CellContext`blocked1$$], CompressedData["
1:eJxTTMoPSmViYGAQAWIQ/eL3yo+XfHkcwvh0N819L+twV4WtcephKYcNRRkT
39YIOhhyrJGJeqLgsM79YZWInqJDgS3X9cUFUHXMig6XfZMEIn4qOMyaCQSS
sg48TNrtYjclHYJ2yLW+DhR0EIyw3HKijNsByAGKyDns8gSp+GEfB2Z8t4eI
f7cHKto3X4rFYdnsIwobilgcNGP6D33V+GY/B8R9Iejgtu3z3ys/FByk9IE2
M4pB7ZOD21f5Us2QQ0fSwTHh6QWl27IOQMFz3y+LOGTvKZkswaLocFQB5CNB
B7B12aIOMPsh9gg5dOc8B4YEq0PI46VAF3A5fNMASfA6yIMdyOrADwoedSEH
sDP1v9uDbPlZJ+oAAE55iIs=
       "]}, Automatic}, {{
       Hold[$CellContext`showOptimalSoln$$], True, 
       "show maximum domino placement"}, {False, True}}, {{
       Hold[$CellContext`showGraph$$], False, 
       "show graph of unblocked squares"}, {False, True}}, {
      Hold[
       Row[{
         Manipulate`Place[1], 
         Spacer[30], 
         Manipulate`Place[2]}]], Manipulate`Dump`ThisIsNotAControl}}, 
    Typeset`size$$ = Automatic, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`n$1810$$ = 
    0, $CellContext`showOptimalSoln$1811$$ = 
    False, $CellContext`showGraph$1812$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`blocked1$$ = CompressedData["
1:eJxTTMoPSmViYGAQAWIQ/eL3yo+XfHkcwvh0N819L+twV4WtcephKYcNRRkT
39YIOhhyrJGJeqLgsM79YZWInqJDgS3X9cUFUHXMig6XfZMEIn4qOMyaCQSS
sg48TNrtYjclHYJ2yLW+DhR0EIyw3HKijNsByAGKyDns8gSp+GEfB2Z8t4eI
f7cHKto3X4rFYdnsIwobilgcNGP6D33V+GY/B8R9Iejgtu3z3ys/FByk9IE2
M4pB7ZOD21f5Us2QQ0fSwTHh6QWl27IOQMFz3y+LOGTvKZkswaLocFQB5CNB
B7B12aIOMPsh9gg5dOc8B4YEq0PI46VAF3A5fNMASfA6yIMdyOrADwoedSEH
sDP1v9uDbPlZJ+oAAE55iIs=
         "], $CellContext`n$$ = 8, $CellContext`showGraph$$ = 
        False, $CellContext`showOptimalSoln$$ = True}, "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$1810$$, 0], 
        Hold[$CellContext`showOptimalSoln$$, \
$CellContext`showOptimalSoln$1811$$, False], 
        Hold[$CellContext`showGraph$$, $CellContext`showGraph$1812$$, False]},
       "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`blocked$, $CellContext`allvertices$, \
$CellContext`vertices$, $CellContext`mat$, $CellContext`ff1$, \
$CellContext`edges$, $CellContext`black$, $CellContext`allblack$, \
$CellContext`m1$, $CellContext`m2$, $CellContext`white$, \
$CellContext`allwhite$}, $CellContext`blocked$ = Select[
           Floor[$CellContext`blocked1$$], And[
           Part[#, 1] < $CellContext`n$$ + 0.999, 
            Part[#, 2] < $CellContext`n$$ + 0.999]& ]; $CellContext`blocked$ = 
         Join[$CellContext`blocked$, {{1, 
            1}, {$CellContext`n$$, $CellContext`n$$}}]; $CellContext`blocked$ = 
         Select[$CellContext`blocked$, OddQ[
            Count[$CellContext`blocked$, #]]& ]; $CellContext`allvertices$ = 
         Tuples[
           Range[$CellContext`n$$], 2]; $CellContext`vertices$ = 
         Complement[$CellContext`allvertices$, $CellContext`blocked$]; \
$CellContext`mat$ = $CellContext`DominoPuzzleSolution[$CellContext`n$$, \
$CellContext`blocked$]; $CellContext`ff1$ = Flatten[
           ReplaceAll[
            Table[{$CellContext`v, 
              Select[$CellContext`vertices$, MemberQ[{{1, 0}, {0, 1}}, 
                
                Abs[# - $CellContext`v]]& ]}, {$CellContext`v, \
$CellContext`vertices$}], {
              Pattern[$CellContext`v, 
               Blank[]], 
              Pattern[$CellContext`vlist, 
               Blank[]]} :> 
            Table[{$CellContext`v, $CellContext`vv}, {$CellContext`vv, \
$CellContext`vlist}]], 1]; $CellContext`ff1$ = Cases[$CellContext`ff1$, {{
             Blank[Integer], 
             Blank[Integer]}, {
             Blank[Integer], 
             Blank[Integer]}}]; $CellContext`edges$ = 
         If[$CellContext`ff1$ != {}, 
           Union[
            Map[
            SortBy[#, Mod[
              Total[#] - $CellContext`n$$ - 1, 
               2]& ]& , $CellContext`ff1$], {}]]; $CellContext`black$ = 
         Select[$CellContext`vertices$, EvenQ[
           Total[#] - $CellContext`n$$]& ]; $CellContext`white$ = 
         Complement[$CellContext`vertices$, $CellContext`black$]; \
$CellContext`allblack$ = 
         Select[$CellContext`allvertices$, EvenQ[
           Total[#] - $CellContext`n$$]& ]; $CellContext`allwhite$ = 
         Complement[$CellContext`vertices$, $CellContext`allblack$]; \
{$CellContext`m1$, $CellContext`m2$} = 
         Map[Length, {$CellContext`white$, $CellContext`black$}]; Column[{
           Text[
            Style[
             StringForm["Unblocked white squares: ``", 
              Length[
               Complement[$CellContext`allwhite$, $CellContext`blocked$]]]]], 
           Text[
            StringForm["Unblocked black squares: ``", 
             Length[
              Complement[$CellContext`allblack$, $CellContext`blocked$]]]], 
           Text[
            StringForm["Actual maximum number of dominoes: ``", 
             Length[$CellContext`mat$]]], 
           Show[
            If[$CellContext`showGraph$$, 
             $CellContext`DominoPuzzleBoard[$CellContext`n$$, \
$CellContext`blocked$], 
             $CellContext`DominoPuzzleBoardNoGraph[$CellContext`n$$, \
$CellContext`blocked$]], 
            Graphics[
             Map[Locator, $CellContext`blocked$ + 1/2]], 
            If[$CellContext`showOptimalSoln$$, 
             Graphics[{
               EdgeForm[Black], 
               Table[{
                 EdgeForm[Black], 
                 FaceForm[{
                   RGBColor[1, 1, 0.6], 
                   Opacity[
                    
                    If[$CellContext`showGraph$$, 0.6, 
                    1]]}], $CellContext`xcoords = Map[First, {
                    Part[$CellContext`white$, 
                    Part[$CellContext`e, 1]], 
                    
                    Part[$CellContext`black$, 
                    Part[$CellContext`e, 
                    2] - $CellContext`m1$]}]; $CellContext`ycoords = 
                  Map[Last, {
                    Part[$CellContext`white$, 
                    Part[$CellContext`e, 1]], 
                    
                    Part[$CellContext`black$, 
                    Part[$CellContext`e, 
                    2] - $CellContext`m1$]}]; $CellContext`start = {{
                    Min[$CellContext`xcoords], 
                    Min[$CellContext`ycoords]}, {
                    Max[$CellContext`xcoords], 
                    Max[$CellContext`ycoords]}}; Apply[Rectangle, 
                   If[
                   Part[$CellContext`start, 1, 2] == 
                    Part[$CellContext`start, 2, 2], {{
                    Part[$CellContext`start, 1, 1] + 0.2, 
                    Part[$CellContext`start, 1, 2] + 0.2}, {
                    Part[$CellContext`start, 2, 1] + 0.8, 
                    Part[$CellContext`start, 1, 2] + 0.8}}, {{
                    Part[$CellContext`start, 1, 1] + 0.2, 
                    Part[$CellContext`start, 1, 2] + 0.2}, {
                    Part[$CellContext`start, 1, 1] + 0.8, 
                    Part[$CellContext`start, 2, 2] + 
                    0.8}}]]}, {$CellContext`e, $CellContext`mat$}]}], {}], 
            ImageSize -> 400, PlotLabel -> None]}]], 
      "Specifications" :> {{{$CellContext`n$$, 8, "size of board"}, {3, 4, 5, 
         6, 7, 8, 9, 10, 11, 12}, ControlType -> 
         Setter}, {{$CellContext`blocked1$$, CompressedData["
1:eJxTTMoPSmViYGAQAWIQ/eL3yo+XfHkcwvh0N819L+twV4WtcephKYcNRRkT
39YIOhhyrJGJeqLgsM79YZWInqJDgS3X9cUFUHXMig6XfZMEIn4qOMyaCQSS
sg48TNrtYjclHYJ2yLW+DhR0EIyw3HKijNsByAGKyDns8gSp+GEfB2Z8t4eI
f7cHKto3X4rFYdnsIwobilgcNGP6D33V+GY/B8R9Iejgtu3z3ys/FByk9IE2
M4pB7ZOD21f5Us2QQ0fSwTHh6QWl27IOQMFz3y+LOGTvKZkswaLocFQB5CNB
B7B12aIOMPsh9gg5dOc8B4YEq0PI46VAF3A5fNMASfA6yIMdyOrADwoedSEH
sDP1v9uDbPlZJ+oAAE55iIs=
          "]}, Automatic, ControlType -> Locator, LocatorAutoCreate -> True, 
         Appearance -> 
         None}, {{$CellContext`showOptimalSoln$$, True, 
          "show maximum domino placement"}, {False, True}, ControlPlacement -> 
         1}, {{$CellContext`showGraph$$, False, 
          "show graph of unblocked squares"}, {False, True}, ControlPlacement -> 
         2}, 
        Row[{
          Manipulate`Place[1], 
          Spacer[30], 
          Manipulate`Place[2]}]}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`n$$, $CellContext`blocked1$$, \
$CellContext`showOptimalSoln$$, $CellContext`showGraph$$}, 
        AutorunSequencing -> {1, 3, 4}, SynchronousInitialization -> False}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{458., {283., 288.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`DominoPuzzleSolution[
         Pattern[$CellContext`n1, 
          Blank[]], 
         Pattern[$CellContext`blocked1, 
          Blank[]]] := 
       Module[{$CellContext`black, $CellContext`white, $CellContext`m1, \
$CellContext`m2, $CellContext`vertices, $CellContext`gr}, \
$CellContext`vertices = Complement[
            Tuples[
             Range[$CellContext`n1], 
             2], $CellContext`blocked1]; $CellContext`black = 
          Select[$CellContext`vertices, EvenQ[
            Total[#] - $CellContext`n1]& ]; $CellContext`white = 
          Complement[$CellContext`vertices, $CellContext`black]; \
{$CellContext`m1, $CellContext`m2} = 
          Map[Length, {$CellContext`white, $CellContext`black}]; \
$CellContext`gr = $CellContext`DominoGraph[$CellContext`n1, \
$CellContext`blocked1]; If[Part[$CellContext`gr, 1] == {}, {}, 
           $CellContext`BipartiteMaximumMatching[$CellContext`gr, \
{$CellContext`m1, $CellContext`m2}]]], $CellContext`DominoGraph[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`blocked, 
          Blank[]]] := Quiet[
         Module[{$CellContext`ff, $CellContext`vertices = Complement[
             Tuples[
              Range[$CellContext`n], 
              2], $CellContext`blocked], $CellContext`edges, \
$CellContext`black, $CellContext`white, $CellContext`m1, $CellContext`m2}, \
$CellContext`edges = Union[$CellContext`ff = Flatten[
                ReplaceAll[
                 Table[{$CellContext`v, 
                   Select[$CellContext`vertices, MemberQ[{{1, 0}, {0, 1}}, 
                    
                    Abs[# - $CellContext`v]]& ]}, {$CellContext`v, \
$CellContext`vertices}], {{
                    Pattern[$CellContext`u, 
                    Blank[Integer]], 
                    Pattern[$CellContext`uu, 
                    Blank[]]}, 
                   Condition[
                    Pattern[$CellContext`vlist, 
                    Blank[]], Depth[$CellContext`vlist] <= 3]} :> 
                 Table[{{$CellContext`u, $CellContext`uu}, $CellContext`vv}, \
{$CellContext`vv, $CellContext`vlist}]], 1]; $CellContext`ff = 
              Cases[$CellContext`ff, {{
                  Blank[Integer], 
                  Blank[Integer]}, {
                  Blank[Integer], 
                  Blank[Integer]}}]; If[$CellContext`ff == {}, 
               Return[
                $CellContext`gGraph[{}, $CellContext`vertices]]]; 
             Map[SortBy[#, Mod[
                Total[#] - $CellContext`n - 1, 
                 2]& ]& , $CellContext`ff]]; $CellContext`black = 
           Select[$CellContext`vertices, EvenQ[
             Total[#] - $CellContext`n]& ]; $CellContext`white = 
           Complement[$CellContext`vertices, $CellContext`black]; \
{$CellContext`m1, $CellContext`m2} = 
           Map[Length, {$CellContext`white, $CellContext`black}]; \
$CellContext`gGraph[
            Table[{{
               Part[
                Position[$CellContext`white, 
                 Part[$CellContext`e, 1]], 1, 1], $CellContext`m1 + Part[
                 Position[$CellContext`black, 
                  Part[$CellContext`e, 2]], 1, 
                 1]}}, {$CellContext`e, $CellContext`edges}], 
            Map[List, 
             Join[
              Table[{$CellContext`i, 0}, {$CellContext`i, $CellContext`m1}], 
              
              Table[{$CellContext`i, 
                1}, {$CellContext`i, $CellContext`m2}]]]]]], \
$CellContext`BipartiteMaximumMatching[
         Pattern[$CellContext`G, 
          Blank[]], 
         Pattern[$CellContext`parts, 
          Blank[]]] := 
       Module[{$CellContext`Gadj = \
$CellContext`ToAdjacencyListsSW[$CellContext`G], $CellContext`M, \
$CellContext`X, $CellContext`Y, $CellContext`m, $CellContext`n, \
$CellContext`oldparD, $CellContext`parD, $CellContext`cover}, \
{$CellContext`m, $CellContext`n} = $CellContext`parts; $CellContext`X = 
          Range[$CellContext`m]; $CellContext`Y = 
          Range[$CellContext`m + 
            1, $CellContext`m + $CellContext`n]; $CellContext`M = \
$CellContext`MaximalMatchingSW[$CellContext`G]; 
         While[$CellContext`oldparD = $CellContext`parD; \
{$CellContext`augPathState, $CellContext`augPath, $CellContext`cover, \
$CellContext`parD} = $CellContext`FindAugmentingPath[$CellContext`Gadj, \
$CellContext`m, $CellContext`n, $CellContext`M]; $CellContext`augPathState, \
$CellContext`pathedges = Append[
              Map[Sort, 
               Partition[$CellContext`augPath, 2, 1]], {}]; $CellContext`M = 
            Complement[
              Join[$CellContext`M, 
               Part[$CellContext`pathedges, 
                Span[1, -1, 2]]], 
              Part[$CellContext`pathedges, 
               Span[
               2, -1, 2]]]]; $CellContext`M], $CellContext`ToAdjacencyListsSW[
         Pattern[$CellContext`G, 
          Blank[]]] := ($CellContext`etemp = Union[$CellContext`ee = Map[Sort, 
             $CellContext`EdgesSW[$CellContext`G]], 
           Map[Reverse, $CellContext`ee]]; $CellContext`missing = Complement[
           Range[
            Length[
             Part[$CellContext`G, 2]]], 
           Map[First, $CellContext`etemp]]; $CellContext`etemp = Sort[
           Join[$CellContext`etemp, 
            
            Table[{$CellContext`m, {}}, {$CellContext`m, \
$CellContext`missing}]]]; ReplaceAll[
          ReplaceAll[
           Split[$CellContext`etemp, Part[#, 1] === Part[#2, 1]& ], {
             Blank[Integer], 
             Pattern[$CellContext`n, 
              
              Blank[]]} :> $CellContext`n], {{}} -> {}]), $CellContext`etemp = \
CompressedData["
1:eJwVzseVgzAAAFGTs0QGAwZEFDljoIwtwQ1sa1vi4sO8uX70+f35kI/H4+/u
e+JFhAQiQzIiEyqiYiqlYzpjXgxicjZkEZtwEZdwKVfwiM95LCRCIVRiKhZi
KdZSJpVSI+cyllsFK5XSgRLUoAEDxLCFHRzVWu3VQWu0QZv1Vh/1xeiM0ZiM
1ezNydyswZqt3Z7s1d7sw9mc3Tnd2d3d67k8397qvb3D3/zDP4M9OIPrRbyY
kAjJkI3IiIq4mIppRCAGsYhPyOTmJkJKpVwqZnQm5UzO53LBFcKXW0olwDyW
sYJhJVRKLdagVhupAY3Wyi1s9U7pYGf0am8OYLjZgzXCUf9yJ3OyZ222ZnfR
l+dqrPbqbeZmb87m79bu7O4evG/wYR83+HTOG3y5V/APq4EqOw==
        "], $CellContext`ee = {{1, 29}, {1, 30}, {1, 33}, {2, 30}, {2, 31}, {
        2, 34}, {3, 31}, {3, 32}, {3, 35}, {4, 32}, {4, 36}, {5, 29}, {5, 
        33}, {5, 37}, {6, 30}, {6, 33}, {6, 34}, {7, 31}, {7, 34}, {7, 35}, {
        7, 38}, {8, 33}, {8, 37}, {8, 40}, {9, 34}, {9, 38}, {9, 41}, {10, 
        35}, {10, 38}, {10, 39}, {10, 42}, {11, 36}, {11, 39}, {11, 43}, {12, 
        37}, {12, 40}, {12, 44}, {13, 40}, {13, 41}, {13, 45}, {14, 39}, {14, 
        42}, {14, 43}, {14, 47}, {15, 40}, {15, 44}, {15, 45}, {15, 48}, {16, 
        42}, {16, 46}, {16, 47}, {17, 43}, {17, 47}, {17, 50}, {18, 44}, {18, 
        48}, {18, 51}, {19, 45}, {19, 48}, {19, 49}, {19, 52}, {20, 46}, {20, 
        49}, {20, 53}, {21, 47}, {21, 50}, {21, 54}, {22, 49}, {22, 52}, {22, 
        53}, {22, 56}, {23, 53}, {23, 54}, {23, 57}, {24, 50}, {24, 54}, {24, 
        58}, {25, 51}, {25, 55}, {26, 52}, {26, 55}, {26, 56}, {27, 53}, {27, 
        56}, {27, 57}, {28, 54}, {28, 57}, {28, 58}}, $CellContext`EdgesSW[
         Pattern[$CellContext`G, 
          Blank[]]] := Map[First, 
         Part[$CellContext`G, 
          1]], $CellContext`missing = {}, $CellContext`X = {1, 2, 3, 4, 5, 6, 
        7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 
        25, 26, 27, 28}, $CellContext`Y = {29, 30, 31, 32, 33, 34, 35, 36, 37,
         38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 
        55, 56, 57, 58}, $CellContext`MaximalMatchingSW[
         Pattern[$CellContext`g, 
          Blank[]]] := 
       Module[{$CellContext`match = {}, $CellContext`ee = \
$CellContext`EdgesSW[$CellContext`g]}, $CellContext`match = 
          Part[$CellContext`ee, 1]; Do[
           If[
           Intersection[$CellContext`e, $CellContext`match] == {}, \
$CellContext`match = 
            Join[$CellContext`match, $CellContext`e]], {$CellContext`e, 
            Rest[$CellContext`ee]}]; Map[Sort, 
           Partition[$CellContext`match, 2]]], $CellContext`augPathState = 
       False, $CellContext`augPath = {}, $CellContext`FindAugmentingPath[
         Pattern[$CellContext`Gadj, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`M, 
          Blank[]]] := 
       Module[{$CellContext`MV = 
          Table[
           0, {$CellContext`m + $CellContext`n}], $CellContext`parent, \
$CellContext`Q, $CellContext`yans = 
          0, $CellContext`ed, $CellContext`u}, $CellContext`trQ = \
($CellContext`covQ = False); $CellContext`parent = 
          Table[0, {$CellContext`m + $CellContext`n}]; $CellContext`X = 
          Range[$CellContext`m]; $CellContext`Y = 
          Range[$CellContext`n] + $CellContext`m; $CellContext`head = \
($CellContext`tail = 0); $CellContext`roots = Complement[$CellContext`X, 
            Map[First, $CellContext`M]]; Do[Part[$CellContext`MV, 
              Part[$CellContext`ed, 1]] = Part[$CellContext`ed, 2]; 
           Part[$CellContext`MV, 
              Part[$CellContext`ed, 2]] = 
            Part[$CellContext`ed, 1], {$CellContext`ed, $CellContext`M}]; 
         While[If[
             
             And[$CellContext`head == $CellContext`tail, $CellContext`yans == 
              0, $CellContext`roots != {}], $CellContext`Q[$CellContext`tail] = \
(Part[$CellContext`parent, 
                 Part[$CellContext`roots, 1]] = Part[$CellContext`roots, 1]); 
             Increment[$CellContext`tail]; $CellContext`roots = 
              Rest[$CellContext`roots]]; 
           And[$CellContext`head < $CellContext`tail, $CellContext`yans == 
             0], $CellContext`u = $CellContext`Q[$CellContext`head]; 
           Increment[$CellContext`head]; $CellContext`uNbrs = 
            Part[$CellContext`Gadj, $CellContext`u]; 
           If[$CellContext`u <= $CellContext`m, 
             Do[
              If[
               And[
               Part[$CellContext`parent, $CellContext`y] == 0, 
                Part[$CellContext`MV, $CellContext`u] != $CellContext`y], 
               Part[$CellContext`parent, $CellContext`y] = $CellContext`u; 
               If[Part[$CellContext`MV, $CellContext`y] == 
                 0, $CellContext`yans = $CellContext`y; 
                 Break[]]; $CellContext`Q[$CellContext`tail] = $CellContext`y; 
               Increment[$CellContext`tail]], {$CellContext`y, \
$CellContext`uNbrs}], 
             Do[
              If[
               And[
               Part[$CellContext`parent, $CellContext`x] == 0, 
                Part[$CellContext`MV, $CellContext`u] == $CellContext`x], 
               
               Part[$CellContext`parent, $CellContext`x] = $CellContext`u; \
$CellContext`Q[$CellContext`tail] = $CellContext`x; 
               Increment[$CellContext`tail]], {$CellContext`x, \
$CellContext`uNbrs}]]]; If[$CellContext`yans > 0, {True, 
            Reverse[
             Most[
              FixedPointList[
              Part[$CellContext`parent, #]& , $CellContext`yans]]], 
            If[
             Or[$CellContext`trQ, $CellContext`covQ], 
             Join[
              Select[$CellContext`X, Part[$CellContext`parent, #] == 0& ], 
              Select[$CellContext`Y, Part[$CellContext`parent, #] != 0& ]], 
             Infinity], $CellContext`parent}, {False, {}, 
            If[
             Or[$CellContext`trQ, $CellContext`covQ], 
             Join[
              Select[$CellContext`X, Part[$CellContext`parent, #] == 0& ], 
              Select[$CellContext`Y, Part[$CellContext`parent, #] != 0& ]], 
             Infinity], $CellContext`parent}]], $CellContext`trQ = 
       False, $CellContext`covQ = False, $CellContext`head = 
       0, $CellContext`tail = 
       0, $CellContext`roots = {}, $CellContext`uNbrs = {}, \
$CellContext`pathedges = {{19, 48}, {16, 48}, {16, 43}, {15, 43}, {15, 42}, {
         14, 42}, {14, 46}, {21, 46}, {21, 50}, {23, 50}, {23, 
         56}, {}}, $CellContext`DominoPuzzleBoard[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`blocked, 
          Blank[]]] := Module[{$CellContext`allverts = Tuples[
            Range[$CellContext`n], 2], $CellContext`vertices = Complement[
            Tuples[
             Range[$CellContext`n], 
             2], $CellContext`blocked], $CellContext`edges, \
$CellContext`black, $CellContext`white, $CellContext`m1, $CellContext`m2, \
$CellContext`ff}, $CellContext`ff = Flatten[
            ReplaceAll[
             Table[{$CellContext`v, 
               Select[$CellContext`vertices, MemberQ[{{1, 0}, {0, 1}}, 
                 
                 Abs[# - $CellContext`v]]& ]}, {$CellContext`v, \
$CellContext`vertices}], {{
                Pattern[$CellContext`u, 
                 Blank[Integer]], 
                Pattern[$CellContext`uu, 
                 Blank[]]}, 
               Condition[
                Pattern[$CellContext`vlist, 
                 Blank[]], Depth[$CellContext`vlist] <= 3]} :> 
             Table[{{$CellContext`u, $CellContext`uu}, $CellContext`vv}, \
{$CellContext`vv, $CellContext`vlist}]], 1]; $CellContext`ff = 
          Cases[$CellContext`ff, {{
              Blank[Integer], 
              Blank[Integer]}, {
              Blank[Integer], 
              Blank[Integer]}}]; $CellContext`edges = 
          If[$CellContext`ff != {}, 
            Union[
             Map[
             SortBy[#, Mod[
               Total[#] - $CellContext`n - 1, 
                2]& ]& , $CellContext`ff]], {}]; $CellContext`black = 
          Select[$CellContext`allverts, EvenQ[
            Total[#] - $CellContext`n]& ]; $CellContext`white = 
          Complement[$CellContext`allverts, $CellContext`black]; \
{$CellContext`m1, $CellContext`m2} = 
          Map[Length, {$CellContext`white, $CellContext`black}]; Graphics[{
            EdgeForm[
             GrayLevel[0]], {
             FaceForm[
              GrayLevel[1]], 
             Table[
              
              Rectangle[$CellContext`v, $CellContext`v + 
               1], {$CellContext`v, $CellContext`white}]}, {
             FaceForm[
              GrayLevel[0.3]], 
             Table[
              
              Rectangle[$CellContext`v, $CellContext`v + 
               1], {$CellContext`v, $CellContext`black}]}, {
             FaceForm[Red], 
             EdgeForm[], 
             Table[
              
              Rectangle[$CellContext`pt + 0.1, $CellContext`pt + 1 - 
               0.1], {$CellContext`pt, $CellContext`blocked}]}, {
             FaceForm[], 
             EdgeForm[Black], 
             Table[
              
              Rectangle[$CellContext`pt, $CellContext`pt + 
               1], {$CellContext`pt, $CellContext`blocked}]}, 
            Table[{
              AbsoluteThickness[2], 
              
              Line[$CellContext`e + 
               0.5]}, {$CellContext`e, $CellContext`edges}], 
            Table[{Blue, 
              PointSize[0.4/$CellContext`n], 
              
              Point[$CellContext`v + 
               0.5]}, {$CellContext`v, $CellContext`vertices}]}]], \
$CellContext`DominoPuzzleBoardNoGraph[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`blocked, 
          Blank[]]] := Module[{$CellContext`allverts = Tuples[
            Range[$CellContext`n], 2], $CellContext`vertices = Complement[
            Tuples[
             Range[$CellContext`n], 
             2], $CellContext`blocked], $CellContext`black, \
$CellContext`white, $CellContext`m1, $CellContext`m2, \
$CellContext`allvertices1}, $CellContext`allvertices1 = Tuples[
            Range[$CellContext`n], 2]; $CellContext`black = 
          Select[$CellContext`allvertices1, EvenQ[
            Total[#] - $CellContext`n]& ]; $CellContext`white = 
          Complement[$CellContext`allvertices1, $CellContext`black]; \
{$CellContext`m1, $CellContext`m2} = 
          Map[Length, {$CellContext`white, $CellContext`black}]; Graphics[{
            EdgeForm[Black], {
             FaceForm[
              GrayLevel[1]], 
             Table[
              
              Rectangle[$CellContext`v, $CellContext`v + 
               1], {$CellContext`v, $CellContext`white}]}, {
             FaceForm[
              GrayLevel[0.3]], 
             Table[
              
              Rectangle[$CellContext`v, $CellContext`v + 
               1], {$CellContext`v, $CellContext`black}]}, {
             FaceForm[Red], 
             EdgeForm[], 
             Table[
              
              Rectangle[$CellContext`pt + 0.1, $CellContext`pt + 1 - 
               0.1], {$CellContext`pt, $CellContext`blocked}]}, {
             FaceForm[], 
             EdgeForm[Black], 
             Table[
              
              Rectangle[$CellContext`pt, $CellContext`pt + 
               1], {$CellContext`pt, $CellContext`blocked}]}}]], \
$CellContext`xcoords = {8, 7}, $CellContext`ycoords = {7, 
        7}, $CellContext`start = {{7, 7}, {8, 7}}}; Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->885138911],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`blocked1$$ = CompressedData["
1:eJxTTMoPSmViYGCQAWIQrX9Xha1xqoCD6Dr3h1Uiqg7SYAEph01z3y8/dloG
QntLOTROde7OeS7qkCQQYbnFQ9Thsi+QtVPQocCW6/riD7IOP4IfL519RNah
PmtPyWQJKQewce8UHHiYtNvFIqUcwMIsclB1ig4rjnmbdx6UdFDYUJQx8a2E
gwhYg5jD68Adcq2vRR34dYE2qws57J8vpX93iaJDEEj4oqCDUPOBUwuPyjq4
AF3ze6UYxPybkg5Aw8P4dKUcwNZcE3VoBRsk53B6oeu2z38FHcDeZFZ0OFG2
D2jid/svf69UvFT7ag/jz5oJAkwOIFM2zWV2eHpB6fbPui/2mjH9h76uEHQA
O7Pmu/0SsId5IeY5M0PVszjU2pvG7fLkgbrnmz3YvYFCUP4P++uLgRrDJR0K
QdoLmBwWgZx1RczBDURV8MH9B7FXCGoet4MnyIBpYg4Q9zFDw1HaAeZ+ANWQ
wSY=
    "], $CellContext`n$$ = 8, $CellContext`showGraph$$ = 
    False, $CellContext`showOptimalSoln$$ = True, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`n$$], 8, "size of board"}, {3, 4, 5, 6, 7, 8, 9, 10, 
      11, 12}}, {{
       Hold[$CellContext`blocked1$$], CompressedData["
1:eJxTTMoPSmViYGCQAWIQrX9Xha1xqoCD6Dr3h1Uiqg7SYAEph01z3y8/dloG
QntLOTROde7OeS7qkCQQYbnFQ9Thsi+QtVPQocCW6/riD7IOP4IfL519RNah
PmtPyWQJKQewce8UHHiYtNvFIqUcwMIsclB1ig4rjnmbdx6UdFDYUJQx8a2E
gwhYg5jD68Adcq2vRR34dYE2qws57J8vpX93iaJDEEj4oqCDUPOBUwuPyjq4
AF3ze6UYxPybkg5Aw8P4dKUcwNZcE3VoBRsk53B6oeu2z38FHcDeZFZ0OFG2
D2jid/svf69UvFT7ag/jz5oJAkwOIFM2zWV2eHpB6fbPui/2mjH9h76uEHQA
O7Pmu/0SsId5IeY5M0PVszjU2pvG7fLkgbrnmz3YvYFCUP4P++uLgRrDJR0K
QdoLmBwWgZx1RczBDURV8MH9B7FXCGoet4MnyIBpYg4Q9zFDw1HaAeZ+ANWQ
wSY=
       "]}, Automatic}, {{
       Hold[$CellContext`showOptimalSoln$$], True, 
       "show maximum domino placement"}, {False, True}}, {{
       Hold[$CellContext`showGraph$$], False, 
       "show graph of unblocked squares"}, {False, True}}, {
      Hold[
       Row[{
         Manipulate`Place[1], 
         Spacer[30], 
         Manipulate`Place[2]}]], Manipulate`Dump`ThisIsNotAControl}}, 
    Typeset`size$$ = Automatic, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`n$1876$$ = 
    0, $CellContext`showOptimalSoln$1877$$ = 
    False, $CellContext`showGraph$1878$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`blocked1$$ = CompressedData["
1:eJxTTMoPSmViYGCQAWIQrX9Xha1xqoCD6Dr3h1Uiqg7SYAEph01z3y8/dloG
QntLOTROde7OeS7qkCQQYbnFQ9Thsi+QtVPQocCW6/riD7IOP4IfL519RNah
PmtPyWQJKQewce8UHHiYtNvFIqUcwMIsclB1ig4rjnmbdx6UdFDYUJQx8a2E
gwhYg5jD68Adcq2vRR34dYE2qws57J8vpX93iaJDEEj4oqCDUPOBUwuPyjq4
AF3ze6UYxPybkg5Aw8P4dKUcwNZcE3VoBRsk53B6oeu2z38FHcDeZFZ0OFG2
D2jid/svf69UvFT7ag/jz5oJAkwOIFM2zWV2eHpB6fbPui/2mjH9h76uEHQA
O7Pmu/0SsId5IeY5M0PVszjU2pvG7fLkgbrnmz3YvYFCUP4P++uLgRrDJR0K
QdoLmBwWgZx1RczBDURV8MH9B7FXCGoet4MnyIBpYg4Q9zFDw1HaAeZ+ANWQ
wSY=
         "], $CellContext`n$$ = 8, $CellContext`showGraph$$ = 
        False, $CellContext`showOptimalSoln$$ = True}, "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$1876$$, 0], 
        Hold[$CellContext`showOptimalSoln$$, \
$CellContext`showOptimalSoln$1877$$, False], 
        Hold[$CellContext`showGraph$$, $CellContext`showGraph$1878$$, False]},
       "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`blocked$, $CellContext`allvertices$, \
$CellContext`vertices$, $CellContext`mat$, $CellContext`ff1$, \
$CellContext`edges$, $CellContext`black$, $CellContext`allblack$, \
$CellContext`m1$, $CellContext`m2$, $CellContext`white$, \
$CellContext`allwhite$}, $CellContext`blocked$ = Select[
           Floor[$CellContext`blocked1$$], And[
           Part[#, 1] < $CellContext`n$$ + 0.999, 
            Part[#, 2] < $CellContext`n$$ + 0.999]& ]; $CellContext`blocked$ = 
         Join[$CellContext`blocked$, {{1, 
            1}, {$CellContext`n$$, $CellContext`n$$}}]; $CellContext`blocked$ = 
         Select[$CellContext`blocked$, OddQ[
            Count[$CellContext`blocked$, #]]& ]; $CellContext`allvertices$ = 
         Tuples[
           Range[$CellContext`n$$], 2]; $CellContext`vertices$ = 
         Complement[$CellContext`allvertices$, $CellContext`blocked$]; \
$CellContext`mat$ = $CellContext`DominoPuzzleSolution[$CellContext`n$$, \
$CellContext`blocked$]; $CellContext`ff1$ = Flatten[
           ReplaceAll[
            Table[{$CellContext`v, 
              Select[$CellContext`vertices$, MemberQ[{{1, 0}, {0, 1}}, 
                
                Abs[# - $CellContext`v]]& ]}, {$CellContext`v, \
$CellContext`vertices$}], {
              Pattern[$CellContext`v, 
               Blank[]], 
              Pattern[$CellContext`vlist, 
               Blank[]]} :> 
            Table[{$CellContext`v, $CellContext`vv}, {$CellContext`vv, \
$CellContext`vlist}]], 1]; $CellContext`ff1$ = Cases[$CellContext`ff1$, {{
             Blank[Integer], 
             Blank[Integer]}, {
             Blank[Integer], 
             Blank[Integer]}}]; $CellContext`edges$ = 
         If[$CellContext`ff1$ != {}, 
           Union[
            Map[
            SortBy[#, Mod[
              Total[#] - $CellContext`n$$ - 1, 
               2]& ]& , $CellContext`ff1$], {}]]; $CellContext`black$ = 
         Select[$CellContext`vertices$, EvenQ[
           Total[#] - $CellContext`n$$]& ]; $CellContext`white$ = 
         Complement[$CellContext`vertices$, $CellContext`black$]; \
$CellContext`allblack$ = 
         Select[$CellContext`allvertices$, EvenQ[
           Total[#] - $CellContext`n$$]& ]; $CellContext`allwhite$ = 
         Complement[$CellContext`vertices$, $CellContext`allblack$]; \
{$CellContext`m1$, $CellContext`m2$} = 
         Map[Length, {$CellContext`white$, $CellContext`black$}]; Column[{
           Text[
            Style[
             StringForm["Unblocked white squares: ``", 
              Length[
               Complement[$CellContext`allwhite$, $CellContext`blocked$]]]]], 
           Text[
            StringForm["Unblocked black squares: ``", 
             Length[
              Complement[$CellContext`allblack$, $CellContext`blocked$]]]], 
           Text[
            StringForm["Actual maximum number of dominoes: ``", 
             Length[$CellContext`mat$]]], 
           Show[
            If[$CellContext`showGraph$$, 
             $CellContext`DominoPuzzleBoard[$CellContext`n$$, \
$CellContext`blocked$], 
             $CellContext`DominoPuzzleBoardNoGraph[$CellContext`n$$, \
$CellContext`blocked$]], 
            Graphics[
             Map[Locator, $CellContext`blocked$ + 1/2]], 
            If[$CellContext`showOptimalSoln$$, 
             Graphics[{
               EdgeForm[Black], 
               Table[{
                 EdgeForm[Black], 
                 FaceForm[{
                   RGBColor[1, 1, 0.6], 
                   Opacity[
                    
                    If[$CellContext`showGraph$$, 0.6, 
                    1]]}], $CellContext`xcoords = Map[First, {
                    Part[$CellContext`white$, 
                    Part[$CellContext`e, 1]], 
                    
                    Part[$CellContext`black$, 
                    Part[$CellContext`e, 
                    2] - $CellContext`m1$]}]; $CellContext`ycoords = 
                  Map[Last, {
                    Part[$CellContext`white$, 
                    Part[$CellContext`e, 1]], 
                    
                    Part[$CellContext`black$, 
                    Part[$CellContext`e, 
                    2] - $CellContext`m1$]}]; $CellContext`start = {{
                    Min[$CellContext`xcoords], 
                    Min[$CellContext`ycoords]}, {
                    Max[$CellContext`xcoords], 
                    Max[$CellContext`ycoords]}}; Apply[Rectangle, 
                   If[
                   Part[$CellContext`start, 1, 2] == 
                    Part[$CellContext`start, 2, 2], {{
                    Part[$CellContext`start, 1, 1] + 0.2, 
                    Part[$CellContext`start, 1, 2] + 0.2}, {
                    Part[$CellContext`start, 2, 1] + 0.8, 
                    Part[$CellContext`start, 1, 2] + 0.8}}, {{
                    Part[$CellContext`start, 1, 1] + 0.2, 
                    Part[$CellContext`start, 1, 2] + 0.2}, {
                    Part[$CellContext`start, 1, 1] + 0.8, 
                    Part[$CellContext`start, 2, 2] + 
                    0.8}}]]}, {$CellContext`e, $CellContext`mat$}]}], {}], 
            ImageSize -> 400, PlotLabel -> None]}]], 
      "Specifications" :> {{{$CellContext`n$$, 8, "size of board"}, {3, 4, 5, 
         6, 7, 8, 9, 10, 11, 12}, ControlType -> 
         Setter}, {{$CellContext`blocked1$$, CompressedData["
1:eJxTTMoPSmViYGCQAWIQrX9Xha1xqoCD6Dr3h1Uiqg7SYAEph01z3y8/dloG
QntLOTROde7OeS7qkCQQYbnFQ9Thsi+QtVPQocCW6/riD7IOP4IfL519RNah
PmtPyWQJKQewce8UHHiYtNvFIqUcwMIsclB1ig4rjnmbdx6UdFDYUJQx8a2E
gwhYg5jD68Adcq2vRR34dYE2qws57J8vpX93iaJDEEj4oqCDUPOBUwuPyjq4
AF3ze6UYxPybkg5Aw8P4dKUcwNZcE3VoBRsk53B6oeu2z38FHcDeZFZ0OFG2
D2jid/svf69UvFT7ag/jz5oJAkwOIFM2zWV2eHpB6fbPui/2mjH9h76uEHQA
O7Pmu/0SsId5IeY5M0PVszjU2pvG7fLkgbrnmz3YvYFCUP4P++uLgRrDJR0K
QdoLmBwWgZx1RczBDURV8MH9B7FXCGoet4MnyIBpYg4Q9zFDw1HaAeZ+ANWQ
wSY=
          "]}, Automatic, ControlType -> Locator, LocatorAutoCreate -> True, 
         Appearance -> 
         None}, {{$CellContext`showOptimalSoln$$, True, 
          "show maximum domino placement"}, {False, True}, ControlPlacement -> 
         1}, {{$CellContext`showGraph$$, False, 
          "show graph of unblocked squares"}, {False, True}, ControlPlacement -> 
         2}, 
        Row[{
          Manipulate`Place[1], 
          Spacer[30], 
          Manipulate`Place[2]}]}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`n$$, $CellContext`blocked1$$, \
$CellContext`showOptimalSoln$$, $CellContext`showGraph$$}, 
        AutorunSequencing -> {1, 3, 4}, SynchronousInitialization -> False}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{458., {283., 288.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`DominoPuzzleSolution[
         Pattern[$CellContext`n1, 
          Blank[]], 
         Pattern[$CellContext`blocked1, 
          Blank[]]] := 
       Module[{$CellContext`black, $CellContext`white, $CellContext`m1, \
$CellContext`m2, $CellContext`vertices, $CellContext`gr}, \
$CellContext`vertices = Complement[
            Tuples[
             Range[$CellContext`n1], 
             2], $CellContext`blocked1]; $CellContext`black = 
          Select[$CellContext`vertices, EvenQ[
            Total[#] - $CellContext`n1]& ]; $CellContext`white = 
          Complement[$CellContext`vertices, $CellContext`black]; \
{$CellContext`m1, $CellContext`m2} = 
          Map[Length, {$CellContext`white, $CellContext`black}]; \
$CellContext`gr = $CellContext`DominoGraph[$CellContext`n1, \
$CellContext`blocked1]; If[Part[$CellContext`gr, 1] == {}, {}, 
           $CellContext`BipartiteMaximumMatching[$CellContext`gr, \
{$CellContext`m1, $CellContext`m2}]]], $CellContext`DominoGraph[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`blocked, 
          Blank[]]] := Quiet[
         Module[{$CellContext`ff, $CellContext`vertices = Complement[
             Tuples[
              Range[$CellContext`n], 
              2], $CellContext`blocked], $CellContext`edges, \
$CellContext`black, $CellContext`white, $CellContext`m1, $CellContext`m2}, \
$CellContext`edges = Union[$CellContext`ff = Flatten[
                ReplaceAll[
                 Table[{$CellContext`v, 
                   Select[$CellContext`vertices, MemberQ[{{1, 0}, {0, 1}}, 
                    
                    Abs[# - $CellContext`v]]& ]}, {$CellContext`v, \
$CellContext`vertices}], {{
                    Pattern[$CellContext`u, 
                    Blank[Integer]], 
                    Pattern[$CellContext`uu, 
                    Blank[]]}, 
                   Condition[
                    Pattern[$CellContext`vlist, 
                    Blank[]], Depth[$CellContext`vlist] <= 3]} :> 
                 Table[{{$CellContext`u, $CellContext`uu}, $CellContext`vv}, \
{$CellContext`vv, $CellContext`vlist}]], 1]; $CellContext`ff = 
              Cases[$CellContext`ff, {{
                  Blank[Integer], 
                  Blank[Integer]}, {
                  Blank[Integer], 
                  Blank[Integer]}}]; If[$CellContext`ff == {}, 
               Return[
                $CellContext`gGraph[{}, $CellContext`vertices]]]; 
             Map[SortBy[#, Mod[
                Total[#] - $CellContext`n - 1, 
                 2]& ]& , $CellContext`ff]]; $CellContext`black = 
           Select[$CellContext`vertices, EvenQ[
             Total[#] - $CellContext`n]& ]; $CellContext`white = 
           Complement[$CellContext`vertices, $CellContext`black]; \
{$CellContext`m1, $CellContext`m2} = 
           Map[Length, {$CellContext`white, $CellContext`black}]; \
$CellContext`gGraph[
            Table[{{
               Part[
                Position[$CellContext`white, 
                 Part[$CellContext`e, 1]], 1, 1], $CellContext`m1 + Part[
                 Position[$CellContext`black, 
                  Part[$CellContext`e, 2]], 1, 
                 1]}}, {$CellContext`e, $CellContext`edges}], 
            Map[List, 
             Join[
              Table[{$CellContext`i, 0}, {$CellContext`i, $CellContext`m1}], 
              
              Table[{$CellContext`i, 
                1}, {$CellContext`i, $CellContext`m2}]]]]]], \
$CellContext`BipartiteMaximumMatching[
         Pattern[$CellContext`G, 
          Blank[]], 
         Pattern[$CellContext`parts, 
          Blank[]]] := 
       Module[{$CellContext`Gadj = \
$CellContext`ToAdjacencyListsSW[$CellContext`G], $CellContext`M, \
$CellContext`X, $CellContext`Y, $CellContext`m, $CellContext`n, \
$CellContext`oldparD, $CellContext`parD, $CellContext`cover}, \
{$CellContext`m, $CellContext`n} = $CellContext`parts; $CellContext`X = 
          Range[$CellContext`m]; $CellContext`Y = 
          Range[$CellContext`m + 
            1, $CellContext`m + $CellContext`n]; $CellContext`M = \
$CellContext`MaximalMatchingSW[$CellContext`G]; 
         While[$CellContext`oldparD = $CellContext`parD; \
{$CellContext`augPathState, $CellContext`augPath, $CellContext`cover, \
$CellContext`parD} = $CellContext`FindAugmentingPath[$CellContext`Gadj, \
$CellContext`m, $CellContext`n, $CellContext`M]; $CellContext`augPathState, \
$CellContext`pathedges = Append[
              Map[Sort, 
               Partition[$CellContext`augPath, 2, 1]], {}]; $CellContext`M = 
            Complement[
              Join[$CellContext`M, 
               Part[$CellContext`pathedges, 
                Span[1, -1, 2]]], 
              Part[$CellContext`pathedges, 
               Span[
               2, -1, 2]]]]; $CellContext`M], $CellContext`ToAdjacencyListsSW[
         Pattern[$CellContext`G, 
          Blank[]]] := ($CellContext`etemp = Union[$CellContext`ee = Map[Sort, 
             $CellContext`EdgesSW[$CellContext`G]], 
           Map[Reverse, $CellContext`ee]]; $CellContext`missing = Complement[
           Range[
            Length[
             Part[$CellContext`G, 2]]], 
           Map[First, $CellContext`etemp]]; $CellContext`etemp = Sort[
           Join[$CellContext`etemp, 
            
            Table[{$CellContext`m, {}}, {$CellContext`m, \
$CellContext`missing}]]]; ReplaceAll[
          ReplaceAll[
           Split[$CellContext`etemp, Part[#, 1] === Part[#2, 1]& ], {
             Blank[Integer], 
             Pattern[$CellContext`n, 
              
              Blank[]]} :> $CellContext`n], {{}} -> {}]), $CellContext`etemp = \
CompressedData["
1:eJwVzseVgzAAAFGTs0QGAwZEFDljoIwtwQ1sa1vi4sO8uX70+f35kI/H4+/u
e+JFhAQiQzIiEyqiYiqlYzpjXgxicjZkEZtwEZdwKVfwiM95LCRCIVRiKhZi
KdZSJpVSI+cyllsFK5XSgRLUoAEDxLCFHRzVWu3VQWu0QZv1Vh/1xeiM0ZiM
1ezNydyswZqt3Z7s1d7sw9mc3Tnd2d3d67k8397qvb3D3/zDP4M9OIPrRbyY
kAjJkI3IiIq4mIppRCAGsYhPyOTmJkJKpVwqZnQm5UzO53LBFcKXW0olwDyW
sYJhJVRKLdagVhupAY3Wyi1s9U7pYGf0am8OYLjZgzXCUf9yJ3OyZ222ZnfR
l+dqrPbqbeZmb87m79bu7O4evG/wYR83+HTOG3y5V/APq4EqOw==
        "], $CellContext`ee = {{1, 29}, {1, 30}, {1, 33}, {2, 30}, {2, 31}, {
        2, 34}, {3, 31}, {3, 32}, {3, 35}, {4, 32}, {4, 36}, {5, 29}, {5, 
        33}, {5, 37}, {6, 30}, {6, 33}, {6, 34}, {7, 31}, {7, 34}, {7, 35}, {
        7, 38}, {8, 33}, {8, 37}, {8, 40}, {9, 34}, {9, 38}, {9, 41}, {10, 
        35}, {10, 38}, {10, 39}, {10, 42}, {11, 36}, {11, 39}, {11, 43}, {12, 
        37}, {12, 40}, {12, 44}, {13, 40}, {13, 41}, {13, 45}, {14, 39}, {14, 
        42}, {14, 43}, {14, 47}, {15, 40}, {15, 44}, {15, 45}, {15, 48}, {16, 
        42}, {16, 46}, {16, 47}, {17, 43}, {17, 47}, {17, 50}, {18, 44}, {18, 
        48}, {18, 51}, {19, 45}, {19, 48}, {19, 49}, {19, 52}, {20, 46}, {20, 
        49}, {20, 53}, {21, 47}, {21, 50}, {21, 54}, {22, 49}, {22, 52}, {22, 
        53}, {22, 56}, {23, 53}, {23, 54}, {23, 57}, {24, 50}, {24, 54}, {24, 
        58}, {25, 51}, {25, 55}, {26, 52}, {26, 55}, {26, 56}, {27, 53}, {27, 
        56}, {27, 57}, {28, 54}, {28, 57}, {28, 58}}, $CellContext`EdgesSW[
         Pattern[$CellContext`G, 
          Blank[]]] := Map[First, 
         Part[$CellContext`G, 
          1]], $CellContext`missing = {}, $CellContext`X = {1, 2, 3, 4, 5, 6, 
        7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 
        25, 26, 27, 28}, $CellContext`Y = {29, 30, 31, 32, 33, 34, 35, 36, 37,
         38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 
        55, 56, 57, 58}, $CellContext`MaximalMatchingSW[
         Pattern[$CellContext`g, 
          Blank[]]] := 
       Module[{$CellContext`match = {}, $CellContext`ee = \
$CellContext`EdgesSW[$CellContext`g]}, $CellContext`match = 
          Part[$CellContext`ee, 1]; Do[
           If[
           Intersection[$CellContext`e, $CellContext`match] == {}, \
$CellContext`match = 
            Join[$CellContext`match, $CellContext`e]], {$CellContext`e, 
            Rest[$CellContext`ee]}]; Map[Sort, 
           Partition[$CellContext`match, 2]]], $CellContext`augPathState = 
       False, $CellContext`augPath = {}, $CellContext`FindAugmentingPath[
         Pattern[$CellContext`Gadj, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`M, 
          Blank[]]] := 
       Module[{$CellContext`MV = 
          Table[0, {$CellContext`m + $CellContext`n}], $CellContext`parent, \
$CellContext`Q, $CellContext`yans = 
          0, $CellContext`ed, $CellContext`u}, $CellContext`trQ = \
($CellContext`covQ = False); $CellContext`parent = 
          Table[0, {$CellContext`m + $CellContext`n}]; $CellContext`X = 
          Range[$CellContext`m]; $CellContext`Y = 
          Range[$CellContext`n] + $CellContext`m; $CellContext`head = \
($CellContext`tail = 0); $CellContext`roots = Complement[$CellContext`X, 
            Map[First, $CellContext`M]]; Do[Part[$CellContext`MV, 
              Part[$CellContext`ed, 1]] = Part[$CellContext`ed, 2]; 
           Part[$CellContext`MV, 
              Part[$CellContext`ed, 2]] = 
            Part[$CellContext`ed, 1], {$CellContext`ed, $CellContext`M}]; 
         While[If[
             
             And[$CellContext`head == $CellContext`tail, $CellContext`yans == 
              0, $CellContext`roots != {}], $CellContext`Q[$CellContext`tail] = \
(Part[$CellContext`parent, 
                 Part[$CellContext`roots, 1]] = Part[$CellContext`roots, 1]); 
             Increment[$CellContext`tail]; $CellContext`roots = 
              Rest[$CellContext`roots]]; 
           And[$CellContext`head < $CellContext`tail, $CellContext`yans == 
             0], $CellContext`u = $CellContext`Q[$CellContext`head]; 
           Increment[$CellContext`head]; $CellContext`uNbrs = 
            Part[$CellContext`Gadj, $CellContext`u]; 
           If[$CellContext`u <= $CellContext`m, 
             Do[
              If[
               And[
               Part[$CellContext`parent, $CellContext`y] == 0, 
                Part[$CellContext`MV, $CellContext`u] != $CellContext`y], 
               Part[$CellContext`parent, $CellContext`y] = $CellContext`u; 
               If[Part[$CellContext`MV, $CellContext`y] == 
                 0, $CellContext`yans = $CellContext`y; 
                 Break[]]; $CellContext`Q[$CellContext`tail] = $CellContext`y; 
               Increment[$CellContext`tail]], {$CellContext`y, \
$CellContext`uNbrs}], 
             Do[
              If[
               And[
               Part[$CellContext`parent, $CellContext`x] == 0, 
                Part[$CellContext`MV, $CellContext`u] == $CellContext`x], 
               Part[$CellContext`parent, $CellContext`x] = $CellContext`u; \
$CellContext`Q[$CellContext`tail] = $CellContext`x; 
               Increment[$CellContext`tail]], {$CellContext`x, \
$CellContext`uNbrs}]]]; If[$CellContext`yans > 0, {True, 
            Reverse[
             Most[
              FixedPointList[
              Part[$CellContext`parent, #]& , $CellContext`yans]]], 
            If[
             Or[$CellContext`trQ, $CellContext`covQ], 
             Join[
              Select[$CellContext`X, Part[$CellContext`parent, #] == 0& ], 
              Select[$CellContext`Y, Part[$CellContext`parent, #] != 0& ]], 
             Infinity], $CellContext`parent}, {False, {}, 
            If[
             Or[$CellContext`trQ, $CellContext`covQ], 
             Join[
              Select[$CellContext`X, Part[$CellContext`parent, #] == 0& ], 
              Select[$CellContext`Y, Part[$CellContext`parent, #] != 0& ]], 
             Infinity], $CellContext`parent}]], $CellContext`trQ = 
       False, $CellContext`covQ = False, $CellContext`head = 
       0, $CellContext`tail = 
       0, $CellContext`roots = {}, $CellContext`uNbrs = {}, \
$CellContext`pathedges = {{19, 48}, {16, 48}, {16, 43}, {15, 43}, {15, 42}, {
         14, 42}, {14, 46}, {21, 46}, {21, 50}, {23, 50}, {23, 
         56}, {}}, $CellContext`DominoPuzzleBoard[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`blocked, 
          Blank[]]] := Module[{$CellContext`allverts = Tuples[
            Range[$CellContext`n], 2], $CellContext`vertices = Complement[
            Tuples[
             Range[$CellContext`n], 
             2], $CellContext`blocked], $CellContext`edges, \
$CellContext`black, $CellContext`white, $CellContext`m1, $CellContext`m2, \
$CellContext`ff}, $CellContext`ff = Flatten[
            ReplaceAll[
             Table[{$CellContext`v, 
               Select[$CellContext`vertices, MemberQ[{{1, 0}, {0, 1}}, 
                 
                 Abs[# - $CellContext`v]]& ]}, {$CellContext`v, \
$CellContext`vertices}], {{
                Pattern[$CellContext`u, 
                 Blank[Integer]], 
                Pattern[$CellContext`uu, 
                 Blank[]]}, 
               Condition[
                Pattern[$CellContext`vlist, 
                 Blank[]], Depth[$CellContext`vlist] <= 3]} :> 
             Table[{{$CellContext`u, $CellContext`uu}, $CellContext`vv}, \
{$CellContext`vv, $CellContext`vlist}]], 1]; $CellContext`ff = 
          Cases[$CellContext`ff, {{
              Blank[Integer], 
              Blank[Integer]}, {
              Blank[Integer], 
              Blank[Integer]}}]; $CellContext`edges = 
          If[$CellContext`ff != {}, 
            Union[
             Map[
             SortBy[#, Mod[
               Total[#] - $CellContext`n - 1, 
                2]& ]& , $CellContext`ff]], {}]; $CellContext`black = 
          Select[$CellContext`allverts, EvenQ[
            Total[#] - $CellContext`n]& ]; $CellContext`white = 
          Complement[$CellContext`allverts, $CellContext`black]; \
{$CellContext`m1, $CellContext`m2} = 
          Map[Length, {$CellContext`white, $CellContext`black}]; Graphics[{
            EdgeForm[
             GrayLevel[0]], {
             FaceForm[
              GrayLevel[1]], 
             Table[
              
              Rectangle[$CellContext`v, $CellContext`v + 
               1], {$CellContext`v, $CellContext`white}]}, {
             FaceForm[
              GrayLevel[0.3]], 
             Table[
              
              Rectangle[$CellContext`v, $CellContext`v + 
               1], {$CellContext`v, $CellContext`black}]}, {
             FaceForm[Red], 
             EdgeForm[], 
             Table[
              
              Rectangle[$CellContext`pt + 0.1, $CellContext`pt + 1 - 
               0.1], {$CellContext`pt, $CellContext`blocked}]}, {
             FaceForm[], 
             EdgeForm[Black], 
             Table[
              
              Rectangle[$CellContext`pt, $CellContext`pt + 
               1], {$CellContext`pt, $CellContext`blocked}]}, 
            Table[{
              AbsoluteThickness[2], 
              
              Line[$CellContext`e + 
               0.5]}, {$CellContext`e, $CellContext`edges}], 
            Table[{Blue, 
              PointSize[0.4/$CellContext`n], 
              
              Point[$CellContext`v + 
               0.5]}, {$CellContext`v, $CellContext`vertices}]}]], \
$CellContext`DominoPuzzleBoardNoGraph[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`blocked, 
          Blank[]]] := Module[{$CellContext`allverts = Tuples[
            Range[$CellContext`n], 2], $CellContext`vertices = Complement[
            Tuples[
             Range[$CellContext`n], 
             2], $CellContext`blocked], $CellContext`black, \
$CellContext`white, $CellContext`m1, $CellContext`m2, \
$CellContext`allvertices1}, $CellContext`allvertices1 = Tuples[
            Range[$CellContext`n], 2]; $CellContext`black = 
          Select[$CellContext`allvertices1, EvenQ[
            Total[#] - $CellContext`n]& ]; $CellContext`white = 
          Complement[$CellContext`allvertices1, $CellContext`black]; \
{$CellContext`m1, $CellContext`m2} = 
          Map[Length, {$CellContext`white, $CellContext`black}]; Graphics[{
            EdgeForm[Black], {
             FaceForm[
              GrayLevel[1]], 
             Table[
              
              Rectangle[$CellContext`v, $CellContext`v + 
               1], {$CellContext`v, $CellContext`white}]}, {
             FaceForm[
              GrayLevel[0.3]], 
             Table[
              Rectangle[$CellContext`v, $CellContext`v + 
               1], {$CellContext`v, $CellContext`black}]}, {
             FaceForm[Red], 
             EdgeForm[], 
             Table[
              
              Rectangle[$CellContext`pt + 0.1, $CellContext`pt + 1 - 
               0.1], {$CellContext`pt, $CellContext`blocked}]}, {
             FaceForm[], 
             EdgeForm[Black], 
             Table[
              
              Rectangle[$CellContext`pt, $CellContext`pt + 
               1], {$CellContext`pt, $CellContext`blocked}]}}]], \
$CellContext`xcoords = {8, 7}, $CellContext`ycoords = {7, 
        7}, $CellContext`start = {{7, 7}, {8, 7}}}; Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->199503951],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`blocked1$$ = {{3.843, 
    6.3790000000000004`}, {6.5375000000000005`, 5.424}, {8.655, 8.423}, {
    1.4489999999999998`, 1.615}, {6.127, 5.604}, {1.491, 8.465}, {3.475, 
    6.606}, {1.5739999999999998`, 8.716000000000001}, {2.702, 7.484}, {4.791, 
    5.249}, {5.646999999999999, 4.434}, {7.505999999999999, 2.513}, {6.608, 
    6.502}, {3.684, 3.4939999999999998`}}, $CellContext`n$$ = 
    8, $CellContext`showGraph$$ = True, $CellContext`showOptimalSoln$$ = True,
     Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`n$$], 8, "size of board"}, {3, 4, 5, 6, 7, 8, 9, 10, 
      11, 12}}, {{
       Hold[$CellContext`blocked1$$], {{3.843, 6.3790000000000004`}, {
       6.5375000000000005`, 5.424}, {8.655, 8.423}, {1.4489999999999998`, 
       1.615}, {6.127, 5.604}, {1.491, 8.465}, {3.475, 6.606}, {
       1.5739999999999998`, 8.716000000000001}, {2.702, 7.484}, {4.791, 
       5.249}, {5.646999999999999, 4.434}, {7.505999999999999, 2.513}, {6.608,
        6.502}, {3.684, 3.4939999999999998`}}}, Automatic}, {{
       Hold[$CellContext`showOptimalSoln$$], True, 
       "show maximum domino placement"}, {False, True}}, {{
       Hold[$CellContext`showGraph$$], True, 
       "show graph of unblocked squares"}, {False, True}}, {
      Hold[
       Row[{
         Manipulate`Place[1], 
         Spacer[30], 
         Manipulate`Place[2]}]], Manipulate`Dump`ThisIsNotAControl}}, 
    Typeset`size$$ = Automatic, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`n$1942$$ = 
    0, $CellContext`showOptimalSoln$1943$$ = 
    False, $CellContext`showGraph$1944$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`blocked1$$ = {{3.843, 
         6.3790000000000004`}, {6.5375000000000005`, 5.424}, {8.655, 8.423}, {
         1.4489999999999998`, 1.615}, {6.127, 5.604}, {1.491, 8.465}, {3.475, 
         6.606}, {1.5739999999999998`, 8.716000000000001}, {2.702, 7.484}, {
         4.791, 5.249}, {5.646999999999999, 4.434}, {7.505999999999999, 
         2.513}, {6.608, 6.502}, {3.684, 
         3.4939999999999998`}}, $CellContext`n$$ = 
        8, $CellContext`showGraph$$ = True, $CellContext`showOptimalSoln$$ = 
        True}, "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$1942$$, 0], 
        Hold[$CellContext`showOptimalSoln$$, \
$CellContext`showOptimalSoln$1943$$, False], 
        Hold[$CellContext`showGraph$$, $CellContext`showGraph$1944$$, False]},
       "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`blocked$, $CellContext`allvertices$, \
$CellContext`vertices$, $CellContext`mat$, $CellContext`ff1$, \
$CellContext`edges$, $CellContext`black$, $CellContext`allblack$, \
$CellContext`m1$, $CellContext`m2$, $CellContext`white$, \
$CellContext`allwhite$}, $CellContext`blocked$ = Select[
           Floor[$CellContext`blocked1$$], And[
           Part[#, 1] < $CellContext`n$$ + 0.999, 
            Part[#, 2] < $CellContext`n$$ + 0.999]& ]; $CellContext`blocked$ = 
         Join[$CellContext`blocked$, {{1, 
            1}, {$CellContext`n$$, $CellContext`n$$}}]; $CellContext`blocked$ = 
         Select[$CellContext`blocked$, OddQ[
            Count[$CellContext`blocked$, #]]& ]; $CellContext`allvertices$ = 
         Tuples[
           Range[$CellContext`n$$], 2]; $CellContext`vertices$ = 
         Complement[$CellContext`allvertices$, $CellContext`blocked$]; \
$CellContext`mat$ = $CellContext`DominoPuzzleSolution[$CellContext`n$$, \
$CellContext`blocked$]; $CellContext`ff1$ = Flatten[
           ReplaceAll[
            Table[{$CellContext`v, 
              Select[$CellContext`vertices$, MemberQ[{{1, 0}, {0, 1}}, 
                
                Abs[# - $CellContext`v]]& ]}, {$CellContext`v, \
$CellContext`vertices$}], {
              Pattern[$CellContext`v, 
               Blank[]], 
              Pattern[$CellContext`vlist, 
               Blank[]]} :> 
            Table[{$CellContext`v, $CellContext`vv}, {$CellContext`vv, \
$CellContext`vlist}]], 1]; $CellContext`ff1$ = Cases[$CellContext`ff1$, {{
             Blank[Integer], 
             Blank[Integer]}, {
             Blank[Integer], 
             Blank[Integer]}}]; $CellContext`edges$ = 
         If[$CellContext`ff1$ != {}, 
           Union[
            Map[
            SortBy[#, Mod[
              Total[#] - $CellContext`n$$ - 1, 
               2]& ]& , $CellContext`ff1$], {}]]; $CellContext`black$ = 
         Select[$CellContext`vertices$, EvenQ[
           Total[#] - $CellContext`n$$]& ]; $CellContext`white$ = 
         Complement[$CellContext`vertices$, $CellContext`black$]; \
$CellContext`allblack$ = 
         Select[$CellContext`allvertices$, EvenQ[
           Total[#] - $CellContext`n$$]& ]; $CellContext`allwhite$ = 
         Complement[$CellContext`vertices$, $CellContext`allblack$]; \
{$CellContext`m1$, $CellContext`m2$} = 
         Map[Length, {$CellContext`white$, $CellContext`black$}]; Column[{
           Text[
            Style[
             StringForm["Unblocked white squares: ``", 
              Length[
               Complement[$CellContext`allwhite$, $CellContext`blocked$]]]]], 
           Text[
            StringForm["Unblocked black squares: ``", 
             Length[
              Complement[$CellContext`allblack$, $CellContext`blocked$]]]], 
           Text[
            StringForm["Actual maximum number of dominoes: ``", 
             Length[$CellContext`mat$]]], 
           Show[
            If[$CellContext`showGraph$$, 
             $CellContext`DominoPuzzleBoard[$CellContext`n$$, \
$CellContext`blocked$], 
             $CellContext`DominoPuzzleBoardNoGraph[$CellContext`n$$, \
$CellContext`blocked$]], 
            Graphics[
             Map[Locator, $CellContext`blocked$ + 1/2]], 
            If[$CellContext`showOptimalSoln$$, 
             Graphics[{
               EdgeForm[Black], 
               Table[{
                 EdgeForm[Black], 
                 FaceForm[{
                   RGBColor[1, 1, 0.6], 
                   Opacity[
                    
                    If[$CellContext`showGraph$$, 0.6, 
                    1]]}], $CellContext`xcoords = Map[First, {
                    Part[$CellContext`white$, 
                    Part[$CellContext`e, 1]], 
                    
                    Part[$CellContext`black$, 
                    Part[$CellContext`e, 
                    2] - $CellContext`m1$]}]; $CellContext`ycoords = 
                  Map[Last, {
                    Part[$CellContext`white$, 
                    Part[$CellContext`e, 1]], 
                    
                    Part[$CellContext`black$, 
                    Part[$CellContext`e, 
                    2] - $CellContext`m1$]}]; $CellContext`start = {{
                    Min[$CellContext`xcoords], 
                    Min[$CellContext`ycoords]}, {
                    Max[$CellContext`xcoords], 
                    Max[$CellContext`ycoords]}}; Apply[Rectangle, 
                   If[
                   Part[$CellContext`start, 1, 2] == 
                    Part[$CellContext`start, 2, 2], {{
                    Part[$CellContext`start, 1, 1] + 0.2, 
                    Part[$CellContext`start, 1, 2] + 0.2}, {
                    Part[$CellContext`start, 2, 1] + 0.8, 
                    Part[$CellContext`start, 1, 2] + 0.8}}, {{
                    Part[$CellContext`start, 1, 1] + 0.2, 
                    Part[$CellContext`start, 1, 2] + 0.2}, {
                    Part[$CellContext`start, 1, 1] + 0.8, 
                    Part[$CellContext`start, 2, 2] + 
                    0.8}}]]}, {$CellContext`e, $CellContext`mat$}]}], {}], 
            ImageSize -> 400, PlotLabel -> None]}]], 
      "Specifications" :> {{{$CellContext`n$$, 8, "size of board"}, {3, 4, 5, 
         6, 7, 8, 9, 10, 11, 12}, ControlType -> 
         Setter}, {{$CellContext`blocked1$$, {{3.843, 6.3790000000000004`}, {
          6.5375000000000005`, 5.424}, {8.655, 8.423}, {1.4489999999999998`, 
          1.615}, {6.127, 5.604}, {1.491, 8.465}, {3.475, 6.606}, {
          1.5739999999999998`, 8.716000000000001}, {2.702, 7.484}, {4.791, 
          5.249}, {5.646999999999999, 4.434}, {7.505999999999999, 2.513}, {
          6.608, 6.502}, {3.684, 3.4939999999999998`}}}, Automatic, 
         ControlType -> Locator, LocatorAutoCreate -> True, Appearance -> 
         None}, {{$CellContext`showOptimalSoln$$, True, 
          "show maximum domino placement"}, {False, True}, ControlPlacement -> 
         1}, {{$CellContext`showGraph$$, True, 
          "show graph of unblocked squares"}, {False, True}, ControlPlacement -> 
         2}, 
        Row[{
          Manipulate`Place[1], 
          Spacer[30], 
          Manipulate`Place[2]}]}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`n$$, $CellContext`blocked1$$, \
$CellContext`showOptimalSoln$$, $CellContext`showGraph$$}, 
        AutorunSequencing -> {1, 3, 4}, SynchronousInitialization -> False}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{458., {62., 67.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`DominoPuzzleSolution[
         Pattern[$CellContext`n1, 
          Blank[]], 
         Pattern[$CellContext`blocked1, 
          Blank[]]] := 
       Module[{$CellContext`black, $CellContext`white, $CellContext`m1, \
$CellContext`m2, $CellContext`vertices, $CellContext`gr}, \
$CellContext`vertices = Complement[
            Tuples[
             Range[$CellContext`n1], 
             2], $CellContext`blocked1]; $CellContext`black = 
          Select[$CellContext`vertices, EvenQ[
            Total[#] - $CellContext`n1]& ]; $CellContext`white = 
          Complement[$CellContext`vertices, $CellContext`black]; \
{$CellContext`m1, $CellContext`m2} = 
          Map[Length, {$CellContext`white, $CellContext`black}]; \
$CellContext`gr = $CellContext`DominoGraph[$CellContext`n1, \
$CellContext`blocked1]; If[Part[$CellContext`gr, 1] == {}, {}, 
           $CellContext`BipartiteMaximumMatching[$CellContext`gr, \
{$CellContext`m1, $CellContext`m2}]]], $CellContext`DominoGraph[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`blocked, 
          Blank[]]] := Quiet[
         Module[{$CellContext`ff, $CellContext`vertices = Complement[
             Tuples[
              Range[$CellContext`n], 
              2], $CellContext`blocked], $CellContext`edges, \
$CellContext`black, $CellContext`white, $CellContext`m1, $CellContext`m2}, \
$CellContext`edges = Union[$CellContext`ff = Flatten[
                ReplaceAll[
                 Table[{$CellContext`v, 
                   Select[$CellContext`vertices, MemberQ[{{1, 0}, {0, 1}}, 
                    
                    Abs[# - $CellContext`v]]& ]}, {$CellContext`v, \
$CellContext`vertices}], {{
                    Pattern[$CellContext`u, 
                    Blank[Integer]], 
                    Pattern[$CellContext`uu, 
                    Blank[]]}, 
                   Condition[
                    Pattern[$CellContext`vlist, 
                    Blank[]], Depth[$CellContext`vlist] <= 3]} :> 
                 Table[{{$CellContext`u, $CellContext`uu}, $CellContext`vv}, \
{$CellContext`vv, $CellContext`vlist}]], 1]; $CellContext`ff = 
              Cases[$CellContext`ff, {{
                  Blank[Integer], 
                  Blank[Integer]}, {
                  Blank[Integer], 
                  Blank[Integer]}}]; If[$CellContext`ff == {}, 
               Return[
                $CellContext`gGraph[{}, $CellContext`vertices]]]; 
             Map[SortBy[#, Mod[
                Total[#] - $CellContext`n - 1, 
                 2]& ]& , $CellContext`ff]]; $CellContext`black = 
           Select[$CellContext`vertices, EvenQ[
             Total[#] - $CellContext`n]& ]; $CellContext`white = 
           Complement[$CellContext`vertices, $CellContext`black]; \
{$CellContext`m1, $CellContext`m2} = 
           Map[
            Length, {$CellContext`white, $CellContext`black}]; \
$CellContext`gGraph[
            Table[{{
               Part[
                Position[$CellContext`white, 
                 Part[$CellContext`e, 1]], 1, 1], $CellContext`m1 + Part[
                 Position[$CellContext`black, 
                  Part[$CellContext`e, 2]], 1, 
                 1]}}, {$CellContext`e, $CellContext`edges}], 
            Map[List, 
             Join[
              Table[{$CellContext`i, 0}, {$CellContext`i, $CellContext`m1}], 
              
              Table[{$CellContext`i, 
                1}, {$CellContext`i, $CellContext`m2}]]]]]], \
$CellContext`BipartiteMaximumMatching[
         Pattern[$CellContext`G, 
          Blank[]], 
         Pattern[$CellContext`parts, 
          Blank[]]] := 
       Module[{$CellContext`Gadj = \
$CellContext`ToAdjacencyListsSW[$CellContext`G], $CellContext`M, \
$CellContext`X, $CellContext`Y, $CellContext`m, $CellContext`n, \
$CellContext`oldparD, $CellContext`parD, $CellContext`cover}, \
{$CellContext`m, $CellContext`n} = $CellContext`parts; $CellContext`X = 
          Range[$CellContext`m]; $CellContext`Y = 
          Range[$CellContext`m + 
            1, $CellContext`m + $CellContext`n]; $CellContext`M = \
$CellContext`MaximalMatchingSW[$CellContext`G]; 
         While[$CellContext`oldparD = $CellContext`parD; \
{$CellContext`augPathState, $CellContext`augPath, $CellContext`cover, \
$CellContext`parD} = $CellContext`FindAugmentingPath[$CellContext`Gadj, \
$CellContext`m, $CellContext`n, $CellContext`M]; $CellContext`augPathState, \
$CellContext`pathedges = Append[
              Map[Sort, 
               Partition[$CellContext`augPath, 2, 1]], {}]; $CellContext`M = 
            Complement[
              Join[$CellContext`M, 
               Part[$CellContext`pathedges, 
                Span[1, -1, 2]]], 
              Part[$CellContext`pathedges, 
               Span[
               2, -1, 2]]]]; $CellContext`M], $CellContext`ToAdjacencyListsSW[
         Pattern[$CellContext`G, 
          Blank[]]] := ($CellContext`etemp = Union[$CellContext`ee = Map[Sort, 
             $CellContext`EdgesSW[$CellContext`G]], 
           Map[Reverse, $CellContext`ee]]; $CellContext`missing = Complement[
           Range[
            Length[
             Part[$CellContext`G, 2]]], 
           Map[First, $CellContext`etemp]]; $CellContext`etemp = Sort[
           Join[$CellContext`etemp, 
            
            Table[{$CellContext`m, {}}, {$CellContext`m, \
$CellContext`missing}]]]; ReplaceAll[
          ReplaceAll[
           Split[$CellContext`etemp, Part[#, 1] === Part[#2, 1]& ], {
             Blank[Integer], 
             Pattern[$CellContext`n, 
              
              Blank[]]} :> $CellContext`n], {{}} -> {}]), $CellContext`etemp = \
CompressedData["
1:eJwVzseVgzAAAFGTs0QGAwZEFDljoIwtwQ1sa1vi4sO8uX70+f35kI/H4+/u
e+JFhAQiQzIiEyqiYiqlYzpjXgxicjZkEZtwEZdwKVfwiM95LCRCIVRiKhZi
KdZSJpVSI+cyllsFK5XSgRLUoAEDxLCFHRzVWu3VQWu0QZv1Vh/1xeiM0ZiM
1ezNydyswZqt3Z7s1d7sw9mc3Tnd2d3d67k8397qvb3D3/zDP4M9OIPrRbyY
kAjJkI3IiIq4mIppRCAGsYhPyOTmJkJKpVwqZnQm5UzO53LBFcKXW0olwDyW
sYJhJVRKLdagVhupAY3Wyi1s9U7pYGf0am8OYLjZgzXCUf9yJ3OyZ222ZnfR
l+dqrPbqbeZmb87m79bu7O4evG/wYR83+HTOG3y5V/APq4EqOw==
        "], $CellContext`ee = {{1, 29}, {1, 30}, {1, 33}, {2, 30}, {2, 31}, {
        2, 34}, {3, 31}, {3, 32}, {3, 35}, {4, 32}, {4, 36}, {5, 29}, {5, 
        33}, {5, 37}, {6, 30}, {6, 33}, {6, 34}, {7, 31}, {7, 34}, {7, 35}, {
        7, 38}, {8, 33}, {8, 37}, {8, 40}, {9, 34}, {9, 38}, {9, 41}, {10, 
        35}, {10, 38}, {10, 39}, {10, 42}, {11, 36}, {11, 39}, {11, 43}, {12, 
        37}, {12, 40}, {12, 44}, {13, 40}, {13, 41}, {13, 45}, {14, 39}, {14, 
        42}, {14, 43}, {14, 47}, {15, 40}, {15, 44}, {15, 45}, {15, 48}, {16, 
        42}, {16, 46}, {16, 47}, {17, 43}, {17, 47}, {17, 50}, {18, 44}, {18, 
        48}, {18, 51}, {19, 45}, {19, 48}, {19, 49}, {19, 52}, {20, 46}, {20, 
        49}, {20, 53}, {21, 47}, {21, 50}, {21, 54}, {22, 49}, {22, 52}, {22, 
        53}, {22, 56}, {23, 53}, {23, 54}, {23, 57}, {24, 50}, {24, 54}, {24, 
        58}, {25, 51}, {25, 55}, {26, 52}, {26, 55}, {26, 56}, {27, 53}, {27, 
        56}, {27, 57}, {28, 54}, {28, 57}, {28, 58}}, $CellContext`EdgesSW[
         Pattern[$CellContext`G, 
          Blank[]]] := Map[First, 
         Part[$CellContext`G, 
          1]], $CellContext`missing = {}, $CellContext`X = {1, 2, 3, 4, 5, 6, 
        7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 
        25, 26, 27, 28}, $CellContext`Y = {29, 30, 31, 32, 33, 34, 35, 36, 37,
         38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 
        55, 56, 57, 58}, $CellContext`MaximalMatchingSW[
         Pattern[$CellContext`g, 
          Blank[]]] := 
       Module[{$CellContext`match = {}, $CellContext`ee = \
$CellContext`EdgesSW[$CellContext`g]}, $CellContext`match = 
          Part[$CellContext`ee, 1]; Do[
           If[
           Intersection[$CellContext`e, $CellContext`match] == {}, \
$CellContext`match = 
            Join[$CellContext`match, $CellContext`e]], {$CellContext`e, 
            Rest[$CellContext`ee]}]; Map[Sort, 
           Partition[$CellContext`match, 2]]], $CellContext`augPathState = 
       False, $CellContext`augPath = {}, $CellContext`FindAugmentingPath[
         Pattern[$CellContext`Gadj, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`M, 
          Blank[]]] := 
       Module[{$CellContext`MV = 
          Table[0, {$CellContext`m + $CellContext`n}], $CellContext`parent, \
$CellContext`Q, $CellContext`yans = 
          0, $CellContext`ed, $CellContext`u}, $CellContext`trQ = \
($CellContext`covQ = False); $CellContext`parent = 
          Table[0, {$CellContext`m + $CellContext`n}]; $CellContext`X = 
          Range[$CellContext`m]; $CellContext`Y = 
          Range[$CellContext`n] + $CellContext`m; $CellContext`head = \
($CellContext`tail = 0); $CellContext`roots = Complement[$CellContext`X, 
            Map[First, $CellContext`M]]; Do[Part[$CellContext`MV, 
              Part[$CellContext`ed, 1]] = Part[$CellContext`ed, 2]; 
           Part[$CellContext`MV, 
              Part[$CellContext`ed, 2]] = 
            Part[$CellContext`ed, 1], {$CellContext`ed, $CellContext`M}]; 
         While[If[
             
             And[$CellContext`head == $CellContext`tail, $CellContext`yans == 
              0, $CellContext`roots != {}], $CellContext`Q[$CellContext`tail] = \
(Part[$CellContext`parent, 
                 Part[$CellContext`roots, 1]] = Part[$CellContext`roots, 1]); 
             Increment[$CellContext`tail]; $CellContext`roots = 
              Rest[$CellContext`roots]]; 
           And[$CellContext`head < $CellContext`tail, $CellContext`yans == 
             0], $CellContext`u = $CellContext`Q[$CellContext`head]; 
           Increment[$CellContext`head]; $CellContext`uNbrs = 
            Part[$CellContext`Gadj, $CellContext`u]; 
           If[$CellContext`u <= $CellContext`m, 
             Do[
              If[
               And[
               Part[$CellContext`parent, $CellContext`y] == 0, 
                Part[$CellContext`MV, $CellContext`u] != $CellContext`y], 
               Part[$CellContext`parent, $CellContext`y] = $CellContext`u; 
               If[Part[$CellContext`MV, $CellContext`y] == 
                 0, $CellContext`yans = $CellContext`y; 
                 Break[]]; $CellContext`Q[$CellContext`tail] = $CellContext`y; 
               Increment[$CellContext`tail]], {$CellContext`y, \
$CellContext`uNbrs}], 
             Do[
              If[
               And[
               Part[$CellContext`parent, $CellContext`x] == 0, 
                Part[$CellContext`MV, $CellContext`u] == $CellContext`x], 
               Part[$CellContext`parent, $CellContext`x] = $CellContext`u; \
$CellContext`Q[$CellContext`tail] = $CellContext`x; 
               Increment[$CellContext`tail]], {$CellContext`x, \
$CellContext`uNbrs}]]]; If[$CellContext`yans > 0, {True, 
            Reverse[
             Most[
              FixedPointList[
              Part[$CellContext`parent, #]& , $CellContext`yans]]], 
            If[
             Or[$CellContext`trQ, $CellContext`covQ], 
             Join[
              Select[$CellContext`X, Part[$CellContext`parent, #] == 0& ], 
              Select[$CellContext`Y, Part[$CellContext`parent, #] != 0& ]], 
             Infinity], $CellContext`parent}, {False, {}, 
            If[
             Or[$CellContext`trQ, $CellContext`covQ], 
             Join[
              Select[$CellContext`X, Part[$CellContext`parent, #] == 0& ], 
              Select[$CellContext`Y, Part[$CellContext`parent, #] != 0& ]], 
             Infinity], $CellContext`parent}]], $CellContext`trQ = 
       False, $CellContext`covQ = False, $CellContext`head = 
       0, $CellContext`tail = 
       0, $CellContext`roots = {}, $CellContext`uNbrs = {}, \
$CellContext`pathedges = {{19, 48}, {16, 48}, {16, 43}, {15, 43}, {15, 42}, {
         14, 42}, {14, 46}, {21, 46}, {21, 50}, {23, 50}, {23, 
         56}, {}}, $CellContext`DominoPuzzleBoard[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`blocked, 
          Blank[]]] := Module[{$CellContext`allverts = Tuples[
            Range[$CellContext`n], 2], $CellContext`vertices = Complement[
            Tuples[
             Range[$CellContext`n], 
             2], $CellContext`blocked], $CellContext`edges, \
$CellContext`black, $CellContext`white, $CellContext`m1, $CellContext`m2, \
$CellContext`ff}, $CellContext`ff = Flatten[
            ReplaceAll[
             Table[{$CellContext`v, 
               Select[$CellContext`vertices, MemberQ[{{1, 0}, {0, 1}}, 
                 
                 Abs[# - $CellContext`v]]& ]}, {$CellContext`v, \
$CellContext`vertices}], {{
                Pattern[$CellContext`u, 
                 Blank[Integer]], 
                Pattern[$CellContext`uu, 
                 Blank[]]}, 
               Condition[
                Pattern[$CellContext`vlist, 
                 Blank[]], Depth[$CellContext`vlist] <= 3]} :> 
             Table[{{$CellContext`u, $CellContext`uu}, $CellContext`vv}, \
{$CellContext`vv, $CellContext`vlist}]], 1]; $CellContext`ff = 
          Cases[$CellContext`ff, {{
              Blank[Integer], 
              Blank[Integer]}, {
              Blank[Integer], 
              Blank[Integer]}}]; $CellContext`edges = 
          If[$CellContext`ff != {}, 
            Union[
             Map[
             SortBy[#, Mod[
               Total[#] - $CellContext`n - 1, 
                2]& ]& , $CellContext`ff]], {}]; $CellContext`black = 
          Select[$CellContext`allverts, EvenQ[
            Total[#] - $CellContext`n]& ]; $CellContext`white = 
          Complement[$CellContext`allverts, $CellContext`black]; \
{$CellContext`m1, $CellContext`m2} = 
          Map[Length, {$CellContext`white, $CellContext`black}]; Graphics[{
            EdgeForm[
             GrayLevel[0]], {
             FaceForm[
              GrayLevel[1]], 
             Table[
              
              Rectangle[$CellContext`v, $CellContext`v + 
               1], {$CellContext`v, $CellContext`white}]}, {
             FaceForm[
              GrayLevel[0.3]], 
             Table[
              
              Rectangle[$CellContext`v, $CellContext`v + 
               1], {$CellContext`v, $CellContext`black}]}, {
             FaceForm[Red], 
             EdgeForm[], 
             Table[
              
              Rectangle[$CellContext`pt + 0.1, $CellContext`pt + 1 - 
               0.1], {$CellContext`pt, $CellContext`blocked}]}, {
             FaceForm[], 
             EdgeForm[Black], 
             Table[
              
              Rectangle[$CellContext`pt, $CellContext`pt + 
               1], {$CellContext`pt, $CellContext`blocked}]}, 
            Table[{
              AbsoluteThickness[2], 
              
              Line[$CellContext`e + 
               0.5]}, {$CellContext`e, $CellContext`edges}], 
            Table[{Blue, 
              PointSize[0.4/$CellContext`n], 
              
              Point[$CellContext`v + 
               0.5]}, {$CellContext`v, $CellContext`vertices}]}]], \
$CellContext`DominoPuzzleBoardNoGraph[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`blocked, 
          Blank[]]] := Module[{$CellContext`allverts = Tuples[
            Range[$CellContext`n], 2], $CellContext`vertices = Complement[
            Tuples[
             Range[$CellContext`n], 
             2], $CellContext`blocked], $CellContext`black, \
$CellContext`white, $CellContext`m1, $CellContext`m2, \
$CellContext`allvertices1}, $CellContext`allvertices1 = Tuples[
            Range[$CellContext`n], 2]; $CellContext`black = 
          Select[$CellContext`allvertices1, EvenQ[
            Total[#] - $CellContext`n]& ]; $CellContext`white = 
          Complement[$CellContext`allvertices1, $CellContext`black]; \
{$CellContext`m1, $CellContext`m2} = 
          Map[Length, {$CellContext`white, $CellContext`black}]; Graphics[{
            EdgeForm[Black], {
             FaceForm[
              GrayLevel[1]], 
             Table[
              
              Rectangle[$CellContext`v, $CellContext`v + 
               1], {$CellContext`v, $CellContext`white}]}, {
             FaceForm[
              GrayLevel[0.3]], 
             Table[
              
              Rectangle[$CellContext`v, $CellContext`v + 
               1], {$CellContext`v, $CellContext`black}]}, {
             FaceForm[Red], 
             EdgeForm[], 
             Table[
              
              Rectangle[$CellContext`pt + 0.1, $CellContext`pt + 1 - 
               0.1], {$CellContext`pt, $CellContext`blocked}]}, {
             FaceForm[], 
             EdgeForm[Black], 
             Table[
              
              Rectangle[$CellContext`pt, $CellContext`pt + 
               1], {$CellContext`pt, $CellContext`blocked}]}}]], \
$CellContext`xcoords = {8, 7}, $CellContext`ycoords = {7, 
        7}, $CellContext`start = {{7, 7}, {8, 7}}}; Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->440832330]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "DetailsSection"],

Cell["\<\
Snapshot 1: an example in the 8\[Times]8 case where both white and black \
squares remain uncovered by dominoes\
\>", "DetailNotes",
 CellChangeTimes->{
  3.35696210375764*^9, {3.4884969094818773`*^9, 3.488497014764206*^9}, {
   3.488559299609487*^9, 3.4885593049996433`*^9}, {3.48856580453016*^9, 
   3.488565849216956*^9}, {3.48856767588302*^9, 3.488567741503854*^9}, {
   3.4886412698247557`*^9, 3.4886412894881477`*^9}, {3.488641429401329*^9, 
   3.488641458727848*^9}, {3.4886418966182003`*^9, 3.488641896994975*^9}, {
   3.4886513949252195`*^9, 3.4886514001440363`*^9}},
 CellID->513821388],

Cell["\<\
Snapshot 2: a similar example, again with a large discrepancy between the \
maximum possible, 20, and the maximum that can be placed, 14\
\>", "DetailNotes",
 CellChangeTimes->{
  3.35696210375764*^9, {3.4884969094818773`*^9, 3.488497014764206*^9}, {
   3.488559299609487*^9, 3.4885593049996433`*^9}, {3.48856580453016*^9, 
   3.488565849216956*^9}, {3.48856767588302*^9, 3.488567741503854*^9}, {
   3.4886412698247557`*^9, 3.4886412894881477`*^9}, {3.488641429401329*^9, 
   3.488641458727848*^9}, {3.4886418966182003`*^9, 3.488641896994975*^9}, {
   3.4886513949252195`*^9, 3.4886514153942313`*^9}},
 CellID->32244729],

Cell["Snapshot 3: the underlying bipartite graph", "DetailNotes",
 CellChangeTimes->{
  3.35696210375764*^9, {3.4884969094818773`*^9, 3.488497014764206*^9}, {
   3.488559299609487*^9, 3.4885593049996433`*^9}, {3.48856580453016*^9, 
   3.488565849216956*^9}, {3.48856767588302*^9, 3.488567741503854*^9}, {
   3.4886412698247557`*^9, 3.4886412894881477`*^9}, {3.488641429401329*^9, 
   3.488641458727848*^9}, {3.4886418966182003`*^9, 3.488641896994975*^9}, {
   3.4886513949252195`*^9, 3.488651419113029*^9}},
 CellID->301648061],

Cell["\<\
The algorithmic solution is based on the existence of a very fast algorithm\
\[LongDash]usually called the Hungarian algorithm\[LongDash]to find a maximum \
matching in a bipartite graph. The following two books are good references.\
\>", "DetailNotes",
 CellChangeTimes->{
  3.35696210375764*^9, {3.4884969094818773`*^9, 3.488497014764206*^9}, {
   3.488559299609487*^9, 3.4885593049996433`*^9}, {3.48856580453016*^9, 
   3.488565849216956*^9}, {3.48856767588302*^9, 3.488567759352948*^9}},
 CellID->1572484210],

Cell[TextData[{
 "[1] R. A. Brualdi, ",
 StyleBox["Introductory Combinatorics",
  FontSlant->"Italic"],
 ", 4th ed., Saddle River, NJ: Prentice Hall, 2004."
}], "DetailNotes",
 CellChangeTimes->{
  3.35696210375764*^9, {3.488497015008698*^9, 3.4884970206218567`*^9}, {
   3.4887111429091787`*^9, 3.488711143528007*^9}, {3.4887112982156363`*^9, 
   3.4887113397851677`*^9}},
 CellID->2694162],

Cell[TextData[{
 "[2] W. J. Cook, W. H. Cunningham, W. R Pulleyblank, and A. Schrijver, ",
 StyleBox["Combinatorial Optimization",
  FontSlant->"Italic"],
 ", New York: Wiley, 1998."
}], "DetailNotes",
 CellChangeTimes->{
  3.35696210375764*^9, 3.48849702076474*^9, {3.4886514477383957`*^9, 
   3.4886514494884176`*^9}, {3.488711145872818*^9, 3.4887111463440847`*^9}, {
   3.488711354771542*^9, 3.4887113552800493`*^9}},
 CellID->183624147]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ControlSuggestionsSection"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Resize Images"]}],
  "\"Click inside an image to reveal its orange resize frame.\\nDrag any of \
the orange resize handles to resize the image.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"ResizeImages"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Rotate and Zoom in 3D"]}],
  RowBox[{
   "\"Drag a 3D graphic to rotate it. Starting the drag near the center \
tumbles\\nthe graphic; starting near a corner turns it parallel to the plane \
of the screen.\\nHold down \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" (or \"", 
    FrameBox[
    "Cmd", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" on Mac) and drag up and down to zoom.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"RotateAndZoomIn3D"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Drag Locators"]}],
  RowBox[{"\"Drag any locator (\"", 
    GraphicsBox[
     LocatorBox[
      Scaled[{0.5, 0.5}]], ImageSize -> 20], 
    "\", etc.) to move it around.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"DragLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Create and Delete Locators"]}],
  RowBox[{"\"Insert a new locator in the graphic by holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key\\nand clicking where you want it to be. Delete a locator by \
clicking it\\nwhile holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" key.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.35696210375764*^9, 3.488567770152918*^9},
 FontFamily->"Verdana",
 CellTags->"CreateAndDeleteLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Slider Zoom"]}],
  RowBox[{"\"Hold down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key while moving a slider to make fine adjustments in the slider \
value.\\nHold \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" and/or \"", 
    FrameBox[
    "Shift", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" at the same time as \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" to make ever finer adjustments.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"SliderZoom"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Gamepad Controls"]}],
  "\"Control this Demonstration with a gamepad or other\\nhuman interface \
device connected to your computer.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.35696210375764*^9, 3.3895522232313623`*^9},
 FontFamily->"Verdana",
 CellTags->"GamepadControls"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Automatic Animation"]}],
  RowBox[{"\"Animate a slider in this Demonstration by clicking the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJzzTSzJSM1NLMlMTlRwL0osyMhMLlZwyy8CCjEzMjAwcIKwAgOI/R/IhBKc\n\
/4EAyGAG0f+nTZsGwgysIJIRKsWKLAXGIHFmEpUgLADxWUAkI24jZs+eTaEt\n\
IG+wQKRmzJgBlYf5lhEA30OqWA=="], "Graphics", ImageSize -> {9, 9}, ImageMargins -> 
      0, CellBaseline -> Baseline], BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"button\\nnext to the slider, and then clicking the play button that \
appears.\\nAnimate all controls by selecting \"", 
    StyleBox["Autorun", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"AutomaticAnimation"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Bookmark Animation"]}],
  RowBox[{
   "\"See a prepared animation of this Demonstration by selecting\\n\"", 
    StyleBox["Animate Bookmarks", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"BookmarkAnimation"]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SearchTermsSection"],

Cell["matching", "SearchTerms",
 CellChangeTimes->{
  3.35696210375764*^9, {3.488494818098905*^9, 3.488494819049477*^9}, {
   3.488573282148677*^9, 3.48857328215084*^9}},
 CellID->1712271845],

Cell["maximum matching", "SearchTerms",
 CellChangeTimes->{
  3.35696210375764*^9, {3.488573282406651*^9, 3.488573284158193*^9}},
 CellID->1978118196],

Cell["bipartite matching", "SearchTerms",
 CellChangeTimes->{
  3.35696210375764*^9, {3.488494819977881*^9, 3.488494823313773*^9}, {
   3.4884970468009367`*^9, 3.4884970468029203`*^9}},
 CellID->1872029115],

Cell["bipartite graph", "SearchTerms",
 CellChangeTimes->{
  3.35696210375764*^9, {3.488497047074402*^9, 3.488497048945459*^9}},
 CellID->1625050577],

Cell["Gomory's Theorem", "SearchTerms",
 CellChangeTimes->{
  3.35696210375764*^9, {3.488494824025914*^9, 3.488494826705905*^9}},
 CellID->410423608],

Cell["dominoes", "SearchTerms",
 CellChangeTimes->{
  3.35696210375764*^9, {3.4884948288977947`*^9, 3.488494834241893*^9}},
 CellID->272105492],

Cell["chessboard", "SearchTerms",
 CellChangeTimes->{
  3.35696210375764*^9, {3.488494834465231*^9, 3.488494838322369*^9}},
 CellID->1284319581],

Cell["checkerboard", "SearchTerms",
 CellChangeTimes->{
  3.35696210375764*^9, {3.488494840001951*^9, 3.488494841369877*^9}},
 CellID->1201061870]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "RelatedLinksSection"],

Cell[TextData[ButtonBox["The Hungarian Maximum Matching Algorithm",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/\
TheHungarianMaximumMatchingAlgorithm/"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/TheHungarianMaximumMatchingAlgorithm/"]],\
 "RelatedLinks",
 CellChangeTimes->{
  3.35696210375764*^9, {3.488497055930332*^9, 3.488497067045435*^9}, {
   3.488559316982224*^9, 3.4885593510702667`*^9}, {3.488559382394869*^9, 
   3.488559394729568*^9}, {3.4887114315464087`*^9, 3.4887114321616907`*^9}},
 CellID->141275988],

Cell[TextData[ButtonBox["Gomory's Theorem",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/GomorysTheorem/"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/GomorysTheorem/"]], "RelatedLinks",
 CellChangeTimes->{
  3.35696210375764*^9, {3.488711434175065*^9, 3.488711444075067*^9}},
 CellID->1815611233]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "AuthorSection"],

Cell[TextData[{
 "Contributed by: ",
 ButtonBox["Stan Wagon",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/author.html?author=Stan+Wagon"], 
    None},
  ButtonNote->
   "http://demonstrations.wolfram.com/author.html?author=Stan+Wagon"],
 " (Macalester College)"
}], "Author",
 CellChangeTimes->{
  3.35696210375764*^9, {3.488494799144229*^9, 3.4884948127849827`*^9}}]
}, Open  ]]
}, Open  ]]
},
CellGrouping->Automatic,
WindowSize->{1434, 1012},
WindowMargins->{{-21, Automatic}, {Automatic, 9}},
PrintingCopies->1,
PrintingPageRange->{1, Automatic},
FrontEndVersion->"8.0 for Microsoft Windows (64-bit) (October 6, 2011)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "Demonstration.nb", 
  CharacterEncoding -> "WindowsANSI"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "ResizeImages"->{
  Cell[199381, 4400, 312, 8, 22, "ControlSuggestions",
   CellTags->"ResizeImages"]},
 "RotateAndZoomIn3D"->{
  Cell[199696, 4410, 678, 16, 22, "ControlSuggestions",
   CellTags->"RotateAndZoomIn3D"]},
 "DragLocators"->{
  Cell[200377, 4428, 340, 11, 22, "ControlSuggestions",
   CellTags->"DragLocators"]},
 "CreateAndDeleteLocators"->{
  Cell[200720, 4441, 699, 16, 22, "ControlSuggestions",
   CellTags->"CreateAndDeleteLocators"]},
 "SliderZoom"->{
  Cell[201422, 4459, 844, 21, 22, "ControlSuggestions",
   CellTags->"SliderZoom"]},
 "GamepadControls"->{
  Cell[202269, 4482, 369, 9, 22, "ControlSuggestions",
   CellTags->"GamepadControls"]},
 "AutomaticAnimation"->{
  Cell[202641, 4493, 1464, 31, 22, "ControlSuggestions",
   CellTags->"AutomaticAnimation"]},
 "BookmarkAnimation"->{
  Cell[204108, 4526, 908, 21, 22, "ControlSuggestions",
   CellTags->"BookmarkAnimation"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"ResizeImages", 208336, 4660},
 {"RotateAndZoomIn3D", 208446, 4663},
 {"DragLocators", 208557, 4666},
 {"CreateAndDeleteLocators", 208674, 4669},
 {"SliderZoom", 208789, 4672},
 {"GamepadControls", 208896, 4675},
 {"AutomaticAnimation", 209010, 4678},
 {"BookmarkAnimation", 209128, 4681}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[567, 22, 194, 3, 74, "DemoTitle"],
Cell[CellGroupData[{
Cell[786, 29, 33, 0, 287, "InitializationSection"],
Cell[822, 31, 542, 14, 27, "Input",
 InitializationCell->True,
 CellID->2024474217],
Cell[1367, 47, 1144, 20, 27, "Input",
 InitializationCell->True,
 CellID->2048050937],
Cell[2514, 69, 2674, 67, 48, "Input",
 InitializationCell->True,
 CellID->43341577],
Cell[5191, 138, 2063, 47, 27, "Input",
 InitializationCell->True,
 CellID->189570621],
Cell[7257, 187, 7688, 182, 148, "Input",
 InitializationCell->True,
 CellID->240138285],
Cell[14948, 371, 8478, 210, 308, "Input",
 InitializationCell->True,
 CellID->27133820],
Cell[23429, 583, 5142, 122, 248, "Input",
 InitializationCell->True,
 CellID->537626745],
Cell[28574, 707, 2595, 64, 68, "Input",
 InitializationCell->True,
 CellID->628167256],
Cell[31172, 773, 9109, 227, 308, "Input",
 InitializationCell->True,
 CellID->165062981],
Cell[40284, 1002, 3342, 76, 148, "Input",
 InitializationCell->True,
 CellID->733913802]
}, Closed]],
Cell[CellGroupData[{
Cell[43663, 1083, 29, 0, 194, "ManipulateSection"],
Cell[CellGroupData[{
Cell[43717, 1087, 18027, 408, 808, "Input"],
Cell[61747, 1497, 25520, 535, 583, "Output",
 CellID->179017480]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[87316, 2038, 36, 0, 169, "ManipulateCaptionSection"],
Cell[87355, 2040, 935, 15, 67, "ManipulateCaption",
 CellID->1022167917],
Cell[88293, 2057, 527, 13, 23, "ManipulateCaption",
 CellID->1854488666]
}, Open  ]],
Cell[CellGroupData[{
Cell[88857, 2075, 28, 0, 173, "ThumbnailSection"],
Cell[88888, 2077, 25475, 534, 583, "Output",
 CellID->12042018]
}, Open  ]],
Cell[CellGroupData[{
Cell[114400, 2616, 28, 0, 143, "SnapshotsSection"],
Cell[114431, 2618, 27165, 567, 583, "Output",
 CellID->885138911],
Cell[141599, 3187, 27530, 572, 583, "Output",
 CellID->199503951],
Cell[169132, 3761, 26975, 556, 141, "Output",
 CellID->440832330]
}, Open  ]],
Cell[CellGroupData[{
Cell[196144, 4322, 26, 0, 336, "DetailsSection"],
Cell[196173, 4324, 606, 11, 22, "DetailNotes",
 CellID->513821388],
Cell[196782, 4337, 630, 11, 22, "DetailNotes",
 CellID->32244729],
Cell[197415, 4350, 527, 8, 22, "DetailNotes",
 CellID->301648061],
Cell[197945, 4360, 522, 9, 37, "DetailNotes",
 CellID->1572484210],
Cell[198470, 4371, 391, 10, 22, "DetailNotes",
 CellID->2694162],
Cell[198864, 4383, 440, 10, 22, "DetailNotes",
 CellID->183624147]
}, Open  ]],
Cell[CellGroupData[{
Cell[199341, 4398, 37, 0, 126, "ControlSuggestionsSection"],
Cell[199381, 4400, 312, 8, 22, "ControlSuggestions",
 CellTags->"ResizeImages"],
Cell[199696, 4410, 678, 16, 22, "ControlSuggestions",
 CellTags->"RotateAndZoomIn3D"],
Cell[200377, 4428, 340, 11, 22, "ControlSuggestions",
 CellTags->"DragLocators"],
Cell[200720, 4441, 699, 16, 22, "ControlSuggestions",
 CellTags->"CreateAndDeleteLocators"],
Cell[201422, 4459, 844, 21, 22, "ControlSuggestions",
 CellTags->"SliderZoom"],
Cell[202269, 4482, 369, 9, 22, "ControlSuggestions",
 CellTags->"GamepadControls"],
Cell[202641, 4493, 1464, 31, 22, "ControlSuggestions",
 CellTags->"AutomaticAnimation"],
Cell[204108, 4526, 908, 21, 22, "ControlSuggestions",
 CellTags->"BookmarkAnimation"]
}, Open  ]],
Cell[CellGroupData[{
Cell[205053, 4552, 30, 0, 155, "SearchTermsSection"],
Cell[205086, 4554, 191, 4, 22, "SearchTerms",
 CellID->1712271845],
Cell[205280, 4560, 150, 3, 22, "SearchTerms",
 CellID->1978118196],
Cell[205433, 4565, 206, 4, 22, "SearchTerms",
 CellID->1872029115],
Cell[205642, 4571, 149, 3, 22, "SearchTerms",
 CellID->1625050577],
Cell[205794, 4576, 149, 3, 22, "SearchTerms",
 CellID->410423608],
Cell[205946, 4581, 143, 3, 22, "SearchTerms",
 CellID->272105492],
Cell[206092, 4586, 144, 3, 22, "SearchTerms",
 CellID->1284319581],
Cell[206239, 4591, 146, 3, 22, "SearchTerms",
 CellID->1201061870]
}, Open  ]],
Cell[CellGroupData[{
Cell[206422, 4599, 31, 0, 141, "RelatedLinksSection"],
Cell[206456, 4601, 572, 12, 22, "RelatedLinks",
 CellID->141275988],
Cell[207031, 4615, 349, 8, 22, "RelatedLinks",
 CellID->1815611233]
}, Open  ]],
Cell[CellGroupData[{
Cell[207417, 4628, 25, 0, 141, "AuthorSection"],
Cell[207445, 4630, 408, 12, 22, "Author"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
