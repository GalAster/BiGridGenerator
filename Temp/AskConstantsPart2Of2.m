(* ::Package:: *)

(* ::Section::Closed:: *)
(*Instructions :*)


(* ::Item:: *)
(*1. Do not Run this package until after you run the prerrequisite package file  AskConstantsPart1Of2.*)


(* ::Item:: *)
(*2. The packages in this file are concatenated here to make downloading them and Getting them from a notebook in the proper order easier and faster.*)


(* ::Item:: *)
(*3. However, this file is consequently large enough so that it is challenging for the Mathematica front end to process it.  Thats why it took so long to parse.  (Anyone comtemplating changing a copy of this file or even inspecting one should instead copy the component packages of interest into separate new package files and inspect them there.*)


(* ::Item:: *)
(*After Running this package, you can then open a notebook in which you can launch  AskConstants [...] , or use its public functions and variables such as  Propose [...]  and  NSimplify [...].*)


(* ::Item:: *)
(*4.  However, it is  much faster and more reliable to Get these packages and Launch AskConstants from the file  LaunchAskConstantsEtAl.nb*)


(* ::Item:: *)
(*5.  If you have not tried that, then :*)


(* ::Item:: *)
(*     a)  Use the  File/Open  menu to navigate to file  LaunchAskConstantsEtAl.nb*)


(* ::Item:: *)
(*     b)  Open     LaunchAskConstantsEtAl.nb*)


(* ::Item:: *)
(*     c)  Follow the directions in that file.*)


(* ::Item:: *)
(*     d)  It that was successful, then close this file.*)


(* ::Item:: *)
(*6.  If instead that was unsuccessful, then :*)


(* ::Item:: *)
(*     a)  Press the  "Run Package"  button near the top right corner of this window.*)
(*The process can require several minutes or more on an average computer.*)


(* ::Item:: *)
(*     b)  Use  File/New  to create a new notebook if one is not already open.*)


(* ::Item:: *)
(*     c)  Copy then paste the following command into that new notebook :          AskConstants [16]*)


(* ::Item:: *)
(*     d)  Press  Shift-Enter  on that command line.*)


(* ::Item:: *)
(*     e)  After about 10 seconds, A window should open that looks similar to the one at the end of file LaunchAskConstantsEtAl.nb*)


(* ::Item:: *)
(*     f)  Close this AskConstantsEtAl.m file after the AskConstants window appears or after you successfully use one of the functions such as  Propose [\[Ellipsis]]*)


(* ::Title::Closed:: *)
(*Zeros package*)


(* ::Section::Closed:: *)
(*Summary :*)


(* ::Subsection::Closed:: *)
(*Ultra permissive "MIT copyright" notice:*)


(* ::Text:: *)
(*Copyright (c) 2016, David R. Stoutemyer *)
(**)
(*Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:*)
(**)
(*The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.*)
(**)
(*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.*)


(* ::Subsection::Closed:: *)
(*History and purpose:*)


(* ::Text:: *)
(*As of July 23, 2015, this Mathematica package is under development by David R. Stoutemyer (dstout@hawaii.edu) to supplement the built-in AiryAiZero, AiryBiZero, BesselJZero, and BesselYZero functions with analogous ones for most of the other built-in Mathematica functions having the NumericFunction Attribute and nontrivial zeros in non-infinitesimal segments of the real axis.*)


(* ::Subsection::Closed:: *)
(*Some programming issues:*)


(* ::Text:: *)
(*This version of this package is given by the value of the public package-level variable $ZerosVersionNumber.*)
(**)
(*This package works for Mathematica versions 8 through 10. It will probably work for later versions and might work for some earlier versions.*)
(**)
(*For parametrized functions such as BesselJ [n, x], the ...Zero [...] function also often works for negative and noninteger values of the parameter n, with noted exceptions.*)
(**)
(*Naming conventions:*)
(*1.  All function names are capitalized.*)
(*2.  Global indeterminate read-only symbols that end users might see, such as optional-argument*)
(*        names, are merely capitalilzed.*)
(*     Otherwise global variables and dynamically-scoped variables intended for access outside*)
(*         the Block  where they are defined begin with $.*)
(*3.  Such variables that are not expected to change value after "Run Package" are capitalized.*)
(**)
(*\[Bullet] When an exact formula for zeros is known, it is used.*)
(*\[Bullet] For functions that have a finite number of zeros on the real line, they are generally stored for MachinePrecision and Precision 32.0, and computed using the latter as a guess for higher precisions.*)
(*\[Bullet] Otherwise they are computed from a crude but suficient guess and in most cases remembered at integer parameter values and standardized precisions.*)
(**)
(*For speed with some functions, this package remembers zeros  that have already*)
(*   been computed to at least the requested precision.*)
(*To avoid cluttering memory with numerous instances of a particular zero at slightly different precisions, remembered values have Precisions that are MachinePrecision or multiples of 16.*)
(**)
(*Many of the guesses for FindRoot were developed in file  ZerosTest.nb,  which also has some tests.*)
(**)
(*I often comment only the first instance of a construct that might not be self-explanatory.*)
(*Therefore it is helpful to do a first reading from the beginning.*)
(**)
(*TO DO:*)
(*1.   $MaxAbsBranchNumberForRemember, $MaxAbsIndexForRemember and similarly for individual functions.*)
(*2.  Do remaining special functions of interest.*)


(* ::Section::Closed:: *)
(*Usage :*)


BeginPackage["Zeros`"];


(* ::Subsection::Closed:: *)
(*Usage of public functions :*)


EnhanceBuiltinZeroFunctions::usage =
"The Zeros package consistently numbers zeros sequentially increasing from left to right, with number 1 being the smallest zero > 0 if there is one, or number -1 being the largest zero < 0 if there is one, or number 0 being the one and only real zero at abscissa 0.
EnhanceBuiltinZeroFunctions [] adds rules so that:
1. BesselJZero also works for non-positive zero numbers.
2. For upward-compatible consistency with k >= 0, AiryAiZero[-k] := AiryZero[k] and AiryBiZero[-k] := AiryBiZero[k].";


IntegerToFloatWithAppropriatlyPrecisionOrAccuracyOf::usage =
"IntegerToFloatWithAppropriatlyPrecisionOrAccuracyOf [n_Integer, float_Real] :=
  If [MachineNumberQ [float],
      SetPrecision [n, MachinePrecision],  (* :Would be disastrous for n === 0 with Arbitrary precision *)
      SetAccuracy [n, Accuracy [n]]];      (* :Would be disastrous for n === 0 with MachineNumberQ [n] *)";


WholeNumberQ::usage =
 "WholeNumberQ [x] returns True if and only if x is an Integer or a Real with Accuracy at least $MinWholeNumberAccuracy and FractionalPart == 0.0";


AiryAiPrimeZero::usage =
 "For float whole number k, AiryAiPrimeZero[k] returns the abscissa of the kth real zero of the AiryAiPrime function with the corresponding Precision.
  AiryAiPrimeZero [] returns a list containing the smallest then largest implemented k.";
AiryBiPrimeZero::usage =
 "For float whole number k, AiryBiPrimeZero[k] returns the abscissa of the kth real zero of the AiryBiPrime function with the corresponding Precision.
  AiryBiPrimeZero [] returns a list containing the smallest then largest implemented k.";
BesselIZero::usage =
 "If r is a real number and k is a whole number with at least one of them float, then BesselIZero[r,k] returns the abscissa x of the kth real zero of BesselIZero[r,x] with the corresponding Accuracy.
  BesselIZero [] returns a list containing the smallest then largest implemented k.";
BesselJZeroRemember::usage =
 "If n is a nonnegative whole number and k is a positive whole numbers with at least one of them float, then BesselJZeroRemember[r,k] returns the abscissa x of the kth real zero of BesselIZero[n,x] with the corresponding Accuracy.
  It has the side effect of remembering the result. Therefore it is faster than BesselJZero after the first invocation with a particular argument pair.";
BesselYZeroRemember::usage =
 "If n is a nonnegative whole number and k is a positive whole numbers with at least one of them float, then BesselYZeroRemember[r,k] returns the abscissa x of the kth real zero of BesselIZero[n,x] with the corresponding Accuracy.
  It has the side effect of remembering the result so it is faster than BesselYZero after the first invocation with a particular argument pair.";
CoshIntegralZero::usage =
 "CoshIntegralZero[1.0] or CoshInegralZero[1``...] returns the abscissa of the one real zero of the CoshIntegral function with the corresponding Precision.";
CosIntegralZero::usage =
 "For a float whole number k, CosIntegralZero[k] returns the abscissa of the kth real zero of the CosIntegral function with the corresponding Precision.
  CosIntegral [] returns a list containing the smallest then largest implemented k.";
ExpIntegralEiZero::usage =
 "ExpIntegralEiZero[1.0] or ExpIntegralEi[1`...] returns the abscissa of the one real zero of the ExpIntegralEi function with the corresponding Precision.";
LogGammaZero::usage =
 "For a float whole number k, LogGammaZero[k] returns the abscissa of the kth real zero of the LogGamma function with the corresponding Precision.
  LogGammaZero [] returns a list containing the smallest then largest implemented k.";
LogIntegralZero::usage = "";
 "LogIntegralZero[1.0] or LogIntegral[1`...] returns the abscissa of the one real zero of the LogIntegral function with the corresponding Precision.";
PolyGammaZero::usage =
 "If at least one of whole-numbers n and k is a float, then PolyGammaZero[n,k] returns the abscissa x of the kth real zero of PolyGamma[n,x] with the corresponding Precision.
  PolyGammaZero [n] returns a list containing the smallest then largest implemented k for NumberQ parameter n.
  PolyGammaZero [] returns a list containing the smallest then largest implemented k over all integer n";
RamanujanTauThetaZero::usage =
 "For a float whole number k == -1.0, 0.0 or 1.0, RamanujanTauThetaZero[k] returns the abscissa of the corresponding real zero of the RamanujanTauTheta function with the corresponding Precision.";
RiemannSiegelThetaZero::usage =
 "For a float whole number k == -1.0, 0.0 or 1.0, RiemannSiegelThetaZero[k] returns the abscissa of the corresponding real zero of the RiemannSiegelTheta function with the corresponding Precision.";
SphericalBesselJZero::usage =
 "If r is a real number and k is a float with at least one of them float, then SphericalBesselJZero[r,k] returns the abscissa x of the kth real zero of SphericalBesselJZero[r,x] with the corresponding Precision.
  SphericalBesselJZero [] returns a list containing the smallest then largest implemented k.";
SphericalBesselYZero::usage =
 "If r is a real number and k is a float with at least one of them float, then SphericalBesselYZero[r,k] returns the abscissa x of the kth real zero of SphericalBesselYZero[r,x] with the corresponding Precision.
  SphericalBesselYZero [] returns a list containing the smallest then largest implemented k.";
StruveHZero::usage =
 "If at least one of whole-numbers n and k is a float, then StruveHZero[n,k] returns the abscissa x of the kth real zero of StruveHZero[n,x] with the corresponding Precision.
  StruveHZero [] returns a list containing the smallest then largest implemented k.";


(* ::Subsection::Closed:: *)
(*Usage of public package-level variables :*)


(* ::Subsubsection:: *)
(*Variables that only an expert should change :*)


$exactZeroWheneverPossibleQ::usage =
  "Initially False. Set it to True to make, for example, SphericalBesselJ[0.0, 2.0] return 2*Pi rather than 6.28319.
   The default value of False is appropriate when you want more certainty that float arguments yield float results.";

$MinWholeNumberAccuracy::usage =
 "WholeNumberQ [x_] := IntegerQ[x] ||
    Head[x] === Real && Accuracy[x] > $MinWholeNumberAccuracy && Round[x] == x;";

$ZerosPrecisionGoalFactor::usage =
 "Ratio of PrecisionGoal to WorkingPrecision in FindRoot[...] used in ...Zero[...] functions.";

$zerosCount::usage =
 "Use this global variable to count total FindRoot iterations for ...Zeros, or shadow it with
  Block [{$zerosCount = 0}, ..., {..., $zerosCount}] to count number of iterations for one ...Zero.";

$MinWorkingPrecision::usage = "";


(* ::Subsubsection::Closed:: *)
(*Read-only variables of interest to all users :*)


$ZerosVersionNumber::usage = "Include the value of this variable in any emails to AskConstants about this package.";


$BesselIZeroParameterRange::usage =
  "A list containing the smallest then largest implemented parameter r for computing float values of BesselIZeroAbscissa[r,k].";
$BesselJZeroParameterRange::usage =
  "A list containing the smallest then largest implemented parameter r for computing float values of BesselJZeroAbscissa[r,k].";
$BesselYZeroParameterRange::usage =
  "A list containing the smallest then largest implemented parameter r for computing float values of BesselYZeroAbscissa[r,k].";

$PolyGammaZeroParameterRange::usage =
  "A list containing the smallest then largest implemented whole-number parameter n for computing float values of KelvinKerZeroAbscissa[n,k].";
$SphericalBesselJZeroParameterRange::usage =
  "A list containing the smallest then largest implemented parameter r for computing float values of SphericalBesselJZeroAbscissa[r,k].";
$SphericalBesselYZeroParameterRange::usage =
  "A list containing the smallest then largest implemented parameter r for computing float values of SphericalBesselYZeroAbscissa[r,k].";
$StruveHZeroParameterRange::usage =
  "A list containing the smallest then largest implemented whole-number parameter n for computing float values of StruveHZeroAbscissa[n,k].";


(* ::Subsection::Closed:: *)
(*Usage of optionally-public package-level functions and variables :*)


(* ::Text:: *)
(*To reduce the chance of name conflicts, the code in this Section should be commented out*)
(*   in the distributed version.*)
(*Uncommenting this code is helpful during development and testing for convenient access *)
(*  and for syntax coloring that reveals misspellings.*)


(*
BesselJZeroRemembered::usage = "";
BesselYZeroRemembered::usage = "";  
SphericalBesselJZeroAux::usage = "";
$Float32::usage = "";
*)


(* ::Section::Closed:: *)
(*Initialization of some package-level variables :*)


Begin ["`Private`"];


(* ::Subsection::Closed:: *)
(*Initialization of public package-level variables :*)


Unprotect [$ZerosVersionNumber];  $ZerosVersionNumber = 1.0;  Protect [$ZerosVersionNumber];

Unprotect [$BesselJZeroParameterRange];
  $BesselJZeroParameterRange = {-Infinity, Infinity};  Protect [$BesselJZeroParameterRange];

Unprotect [$BesselYZeroParameterRange];
  $BesselYZeroParameterRange = {-Infinity, Infinity};  Protect [$BesselYZeroParameterRange];


$exactZeroWheneverPossibleQ = False;  (* False is best for Propose [...]. *)
$MinWorkingPrecision = 10.0;  (* Originally 10.0: Minimum WorkingPrecision for FindRoot. *)
$ZerosPrecisionGoalFactor = 0.75;  (* Originally 0.75: The tradeoff is precision of the result versus iteration count. Deserves more experimentation. *)
$MinWholeNumberAccuracy = 1.0;
$Float32 = 32.0;


(* ::Section::Closed:: *)
(*Function definitions :*)


(* ::Subsection::Closed:: *)
(*Utility functions :*)


(* ::Subsubsection::Closed:: *)
(*IntegerToFloatWithAppropriatlyPrecisionOrAccuracyOf*)


IntegerToFloatWithAppropriatlyPrecisionOrAccuracyOf [n_Integer, float_Real] :=
  If [MachineNumberQ [float],
      SetPrecision [n, MachinePrecision],  (* :Disastrous for n === 0 with Arbitrary precision *)
      SetAccuracy [n, Accuracy [float]]];      (* :Disastrous for n === 0 with MachineNumberQ [n] *)


(* ::Subsubsection::Closed:: *)
(*WholeNumberQ*)


Unprotect [WholeNumberQ];
ClearAll [WholeNumberQ];

WholeNumberQ [x_] := IntegerQ[x] ||
  Head[x] === Real && Accuracy[x] > $MinWholeNumberAccuracy && Round[x] == x;

Protect [WholeNumberQ];


(* ::Subsection::Closed:: *)
(*OptionalEnhancements to AiryAiZero, AiryBiZero, and BesselJZero :*)


(* If you invoke this function, then:
   a) Additional nonpositive zeros are defined for the builtin BesselJZero function, making it
      consistent with the other ...Zero[...] functions defined in this package.
   b) Duplicate nonpositive zeros are defined for the builtin AiryAiZero and AiryBiZero
      functions, making their numbering for those duplicates more consistent with the other
      ...Zero[...] functions defined in this package. *)

Unprotect [EnhanceBuiltinZeroFunctions];
EnhanceBuiltinZeroFunctions [] :=  (
   Unprotect [AiryAiZero, AiryBiZero, BesselJZero, BesselYZero];
     (* The three-argument variants of BesselJZero are not enhanced, but that
          would be easy to do ifdesired.
        Non-positive indices return non-positive zeros, down to BesselJZero[r, -Infinity] -> -Infinity: *)
   BesselJZero [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                k_/; k <= 0 && Accuracy[k] > $MinWholeNumberAccuracy] :=  -BesselJZero [zero, 1 - k];
   BesselJZero [r_/; Accuracy[r] > $MinWholeNumberAccuracy && (r > 0 || WholeNumberQ[r]),
                zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
     If [$exactZeroWheneverPossibleQ,
         0,
         (r - r) + zero];  (* :Appropriately 0 or machine 0.0 or arbitrary precision 0.0`accuracy. *)
   BesselJZero [r_Real | r_Integer | r_Rational, Infinity] := Infinity;
   BesselJZero [n_? WholeNumberQ,  -Infinity] := -Infinity;
   BesselJZero [n_? WholeNumberQ,  k_/; k < 0 && Accuracy[k] > $MinWholeNumberAccuracy] :=
     -BesselJZero [n, -k];

   BesselYZero [r_Real | r_Integer | r_Rational,  Infinity] :=
     Infinity;

     (* The two-argument variants of AiryAiZero and AiryBiZero are not enhanced,
           but that would be easy to do if wanted.
        For upward-compatible consistency with the rest of this package,
        AiryAiZero[0] == AiryAiZero[1],  AiryAiZero[-1] == AiryAiZero[2] etc.,
        and similarly for AiryBiZero: *)
   AiryAiZero [n_/; n < 0 && WholeNumberQ [n]] := AiryAiZero [-n];
   AiryAiZero [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] := Infinity;
   AiryAiZero [n_Real /; WholeNumberQ [n]] :=
     (* This is a workaround for the bug that N [AiryAiZero [3]] works but AiryAiZero [3.0] does not: *)
     If [MachineNumberQ [n],
         N [AiryAiZero [Round [n]]],
         N [AiryAiZero [Round [n]], Precision [n]]];
   AiryAiZero [-Infinity] := -Infinity;

   AiryBiZero [n_/; n < 0 && WholeNumberQ [n]] := AiryAiZero [-n];
   AiryBiZero [n_Real /; WholeNumberQ [n]] :=
     (* This is a workaround for the bug that N [AiryAiZero [3]] works but AiryAiZero [3.0] does not: *)
     If [MachineNumberQ [n],
         N [AiryBiZero [Round [n]]],
         N [AiryBiZero [Round [n]], Precision [n]]];
   AiryBiZero [-Infinity] := -Infinity;

   Protect [AiryAiZero, AiryBiZero, BesselJZero, BesselYZero];
   "AiryAiZero, AiryBiZero, BesselJZero, and BesselYZero now also work for non-positive and \[PlusMinus]Infinity arguments.");
Protect [EnhanceBuiltinZeroFunctions];


(* ::Subsection::Closed:: *)
(*AiryAiPrimeZero :*)


Unprotect [AiryAiPrimeZero];
  (* Such ClearAll [...] avoids lingering obsolete rules during development, but could be conditionally ommitted
     in distributed versions to avoid clobbering any prior AiryAiPrimeZero rules from outside this package: *)
ClearAll [AiryAiPrimeZero];

SetAttributes [AiryAiPrimeZero, {NumericFunction, Listable}];

  (* Make N [AiryAiPrimeZero [0], precision] not do
       AiryAiPrimeZero [N [0, precision]] --> AiryAiPrime [0]: *)
N [AiryAiPrimeZero [0], precision_Real | precision_Integer | precision_rational] :=
  AiryAiPrimeZero [SetAccuracy [0, precision]];

AiryAiPrimeZero [k_Real /; k <= 0.0 && WholeNumberQ [k]] :=
  Module [{precision = Precision [k - 1],  (* :Avoid Precision [0``accuracy] --> 0.0 *)
           integerk = Round[k],
           standardizedPrecision, lowerBound, upperBound, guess},
    standardizedPrecision = If [precision === MachinePrecision,
                                MachinePrecision,
                                16.0 * Ceiling [0.0625 * precision]];
     N [If [integerk === 0,
            guess = If [MachineNumberQ[k],
                        -1.018792971647471`,
                        -1.018792971647471089017324783399743824218205441255`32.];
            lowerBound = -1.1;  upperBound = -1.0,
        (* else: *)
            lowerBound = N [AiryAiZero [1 - integerk]];
            upperBound = N [AiryAiZero [-integerk]];
            guess = 0.5 * (lowerBound + upperBound)];
            If [integerk === 0 && precision <= $Float32,
                guess,
(*Print [{AiryAiPrimeZero, lowerBound, guess, upperBound}];*)  (* :This is an example of a useful development & debugging technique. *) 
                Quiet [FindRoot [AiryAiPrime [var],  {var, guess, lowerBound, upperBound}, (* :secant method *)
(*EvaluationMonitor :>  ++$zerosCount,*)
                (* :For testing, uncomment the above line, then press the Run Package button, then do in a notebook, for example,
                    Block [{$zerosCount = 0, answer},
                           answer = AiryAiPrimeZero [-3`64];
                           {$zerosCount, answer}]  *)
                                 WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                                 PrecisionGoal -> $ZerosPrecisionGoalFactor * precision,
  (* Here and elsewhere, AccuracyGoal is set to be applicable only where needed for solutions at 0,
     as described by M. Trott, The Mathematica GuideBook for Numerics, p. 266: *)
                                 AccuracyGoal -> {Infinity, 0.0}][[1,2]]]],
        precision]];

AiryAiPrimeZero [one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := Infinity;

  (* Minimum then maximum implemented zero number: *)
  (* Successful results probably require increasing precision as zero # --> -Infinity *)
AiryAiPrimeZero [] := {-Infinity, 1};
  (* : #1 is the one positive zero at +Infinity. *)

Protect [AiryAiPrimeZero];


(* ::Subsection::Closed:: *)
(*AiryBiPrimeZero :*)


Unprotect [AiryBiPrimeZero];
ClearAll [AiryBiPrimeZero];

SetAttributes [AiryBiPrimeZero, {NumericFunction, Listable}];

N [AiryBiPrimeZero [0], precision_Real | precision_Integer | precision_rational] :=
  AiryBiPrimeZero [SetAccuracy [0, precision]];

AiryBiPrimeZero [k_Real /; k <= 0 && WholeNumberQ [k]] :=
  Module [{precision = Precision [k - 1],
           integerk = Round[k],
           standardizedPrecision, lowerBound, upperBound, guess},
    standardizedPrecision = If [precision === MachinePrecision,
                                MachinePrecision,
                                16.0 * Ceiling [0.0625 * precision]];
    lowerBound = N [AiryBiZero [2 - integerk]];
    upperBound = N [AiryBiZero [1 -integerk]];
    guess = 0.5 * (lowerBound + upperBound);
    N [Quiet [FindRoot [AiryBiPrime [var],  {var, guess, lowerBound, upperBound}, (* :secant method *)
(*EvaluationMonitor :>  ++$zerosCount,*)
                        WorkingPrecision -> standardizedPrecision,
                        PrecisionGoal -> $ZerosPrecisionGoalFactor * standardizedPrecision,
                        AccuracyGoal -> {Infinity, 0.0}]][[1,2]],
       precision]];

  (* Minimum then maximum implemented zero number: *)

AiryBiPrimeZero [] := {-Infinity, 0};
  (* : #0 is the rightmost nonpositive zero at -2.29443... *)
Protect [AiryBiPrimeZero];


(* ::Subsection::Closed:: *)
(*BesselIZero :*)


Unprotect [BesselIZero, $BesselIZeroParameterRange];
ClearAll [BesselIZero];

SetAttributes [BesselIZero, {NumericFunction, Listable}];

$BesselIZeroParameterRange = {-Infinity, Infinity};

BesselIZero [r_/; r > 0 || r < 0 && WholeNumberQ [r],
             zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  If [$exactZeroWheneverPossibleQ,
      0,
      (r - r) + zero];

  (* Conjecture: Negative fractional r is rare, so do not bother to precompute or remember: *)

BesselIZero [r_/; r < 0 && Accuracy[r] > $MinWholeNumberAccuracy &&
               ! WholeNumberQ[r] && EvenQ[Floor[r]],
             one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    (Head[r] === Real || Head[one] === Real) :=
  Module [{precision = Precision [r - one],
           (* This guess could use improvement: *)
           guess = (0.1793974038941584`  - 0.6567648527209184`*(Floor[r] + 0.5))
                     *2.0*Sqrt[0.25 - (r - (Floor[r] + 0.5))^2]},
    Quiet [FindRoot [Re [BesselI [r, var]], {var, guess},  (* :Newton method *)
(*EvaluationMonitor :> ++$zerosCount,*)
                     (*Method -> "Brent",*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $ZerosPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1, 2]]];

  (* : Real zeros exist for negative whole-number parameters, isolated in the real domain;
       but they are not implemented. *)

  (* Minimum then maximum implemented zero number: *)
BesselIZero [] := {0, 1};
  (* For all real r, BesselIZero [r, 1] is the leftmost positive zero. *)
Protect [BesselIZero, $BesselIZeroParameterRange];


(* ::Subsection::Closed:: *)
(*BesselJZeroRemember :*)


Unprotect [BesselJZeroRemember];
(* Built-in BesselJZero is relative slow, hence worth remembering.
   Remembering is in a differently named function to avoid changing or supplementing the built-in BesselJZero. *)
ClearAll [BesselJZeroRemember];

BesselJZeroRemember [n_/; n >= 0.0 && WholeNumberQ[n],
                     k_/; k >= 1.0 && WholeNumberQ[k]] /;
    (Head[n] === Real || Head[k] === Real)  :=
  Module [{precision = Precision [n + k],
           integern = Round[n],
           integerk = Round[k],
           standardizedPrecision},
    (* Standardize the arguments to both be MachinePrecision or both be the same "multiple of 16" precision
       to avoid accumulating many slightly different memories some of which differ negligibly: *)
    If [precision === MachinePrecision,
        BesselJZeroRemembered [N[integern], N[integerk]],
        standardizedPrecision = 16.0 * Ceiling [0.0625 * precision];
        N [BesselJZeroRemembered [N [integern, If [integern === 0,
                                                   {Infinity, standardizedPrecision},
                                                   standardizedPrecision]],
                                  N [integerk, standardizedPrecision]],
           precision]]];

BesselJZeroRemember [zero_/; zero == 0.0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                     k_/; k <= 0.0 && WholeNumberQ[k]] :=
  -BesselJZeroRemember [zero, 1 - k]

BesselJZeroRemember [n_? WholeNumberQ,
                     zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
 If [$exactZeroWheneverPossibleQ,
     0,
     (n - n) + zero];

BesselJZeroRemember [n_/; n < 0.0 && WholeNumberQ[n],
                     k_? WholeNumberQ] := BesselJZeroRemember [-n, k];

BesselJZeroRemember [n_? WholeNumberQ,
                     k_/; k < 0.0 && WholeNumberQ[k]] := -BesselJZeroRemember [n, -k];

BesselJZeroRemember [n_, k_] := BesselJZero [n, k];
Protect [BesselJZeroRemember];


(* ::Subsection::Closed:: *)
(*BesselJZeroRemembered :*)


ClearAll [BesselJZeroRemembered];

BesselJZeroRemembered [n_, k_] :=
   BesselJZeroRemembered [n, k] = BesselJZero [n, k];


(* ::Subsection::Closed:: *)
(*BesselYZeroRemember :*)


Unprotect [BesselYZeroRemember];
ClearAll [BesselYZeroRemember];

BesselYZeroRemember [n_/; n >= 0.0 && WholeNumberQ[n],
                     k_/; k >= 1.0 && WholeNumberQ[k]] /;
    Head[n] === Real || Head[k] === Real  :=
  Module [{precision = Precision [n + k],
           integern = Round[n],
           integerk = Round[k],
           standardizedPrecision},
    (* Standardize arguments to both be MachinePrecision or both be the same "multiple of 16" precision
       to avoid accumulating many memories, some of which differ negligibly: *)
    If [precision === MachinePrecision,
        BesselYZeroRemembered [N[integern], N[integerk]],
        standardizedPrecision = 16.0 * Ceiling [0.0625 * precision];
        N [BesselYZeroRemembered [N [integern, If [integern === 0,
                                                   {Infinity, standardizedPrecision},
                                                   standardizedPrecision]],
                                  N [integerk, standardizedPrecision]],
           precision]]];
Protect [BesselYZeroRemember];


(* ::Subsection::Closed:: *)
(*BesselYZeroRemembered :*)


ClearAll [BesselYZeroRemembered];

BesselYZeroRemembered [n_, k_] :=
   BesselYZeroRemembered [n, k] = BesselYZero [n, k];


(* ::Subsection::Closed:: *)
(*CoshIntegralZero :*)


Unprotect [CoshIntegralZero];
ClearAll [CoshIntegralZero];

SetAttributes [CoshIntegralZero, {NumericFunction, Listable}];

CoshIntegralZero [float1_Real /; float1 == 1.0 && Accuracy[float1] > $MinWholeNumberAccuracy] :=
  Module [{accuracy},
    Which [MachineNumberQ [float1],
             0.52382257138986441`,
           accuracy = Accuracy[float1];
           accuracy <= $Float32,
             N [0.523822571389864406450958294383255667615248030067`32., accuracy],
           True,
             Quiet [FindRoot [CoshIntegral [var],
                              {var, 0.523822571389864406450958294383255667615248030067`32.}, (* :secant method *)
(*EvaluationMonitor :> ++$zerosCount,*)
                              WorkingPrecision -> accuracy,
                              PrecisionGoal -> $ZerosPrecisionGoalFactor * accuracy,
                              AccuracyGoal -> {Infinity, 0.0}][[1,2]]]]];

  (* Minimum then maximum implemented zero number: *)

CoshIntegralZero [] := {1, 1};
  (* : #1 is the one and only zero, at 0.523822... *)
Protect [CoshIntegralZero];


(* ::Subsection::Closed:: *)
(*CosIntegralZero :*)


Unprotect [CosIntegralZero];
ClearAll [CosIntegralZero];

SetAttributes [CosIntegralZero, {NumericFunction, Listable}];

CosIntegralZero [k_Real /; k > 0.0 && WholeNumberQ [k]] :=
  Module [{precision = Precision [k],
           guess = If [k == 1.0,
                       0.616505485620716233797110404100172747539495898182`32.,
                       (k - 1) * Pi],
           standardizedPrecision},
    standardizedPrecision = If [precision === MachinePrecision,
                                MachinePrecision,
                                16.0 * Ceiling [0.0625 * precision]];
    (* Remember the result: *)
    N [CosIntegralZero [N [Round[k], standardizedPrecision]] =  (* Secant method: *)
         Quiet [FindRoot [Re [CosIntegral[var]], {var, guess}, (* :Re discards troublesome occasional tiny Im part *)
(*EvaluationMonitor :> ++$zerosCount,*)
                          WorkingPrecision -> standardizedPrecision,
                          PrecisionGoal -> $ZerosPrecisionGoalFactor * standardizedPrecision,
                          AccuracyGoal -> {Infinity, 0.0}]][[1, 2]],
       precision]];

CosIntegralZero [Infinity] := Infinity;

  (* Minimum then maximum implemented zero number: *)

CosIntegralZero [] := {1, Infinity};
  (* #1 is the leftmost positive zero at 0.616505... *)
Protect [CosIntegralZero];


(* ::Subsection::Closed:: *)
(*ExpIntegralEiZero :*)


Unprotect [ExpIntegralEiZero];
ClearAll [ExpIntegralEiZero];

SetAttributes [ExpIntegralEiZero, {NumericFunction, Listable}];

(* To Do: Switch to memorize ?: *)

ExpIntegralEiZero [float1_Real /; float1 == 1.0 && Accuracy[float1] > $MinWholeNumberAccuracy] :=
  Module [{accuracy},
    Which [MachineNumberQ [float1],
             0.37250741078136663`,
           accuracy = Accuracy[float1];
           accuracy <= $Float32,
             N [0.372507410781366634461991866580119133535689497772`32., accuracy],
           True,
             Quiet [FindRoot [ExpIntegralEi [var],
                              {var, 0.372507410781366634461991866580119133535689497772`32.}, (* :secant method *)
(*EvaluationMonitor :> ++$zerosCount,*)
                              WorkingPrecision -> accuracy,
                              PrecisionGoal -> $ZerosPrecisionGoalFactor * accuracy,
                              AccuracyGoal -> {Infinity, 0.0}][[1,2]]]]];

ExpIntegralEiZero [zero_/; zero == 0.0 && Accuracy[zero] > $MinWholeNumberAccuracy] := -Infinity;

  (* Minimum then maximum implemented zero number: *)

ExpIntegralEiZero [] := {0, 1};
  (* #1 is the leftmost positive zero at 0.372507... *)
Protect [ExpIntegralEiZero];


(* ::Subsection::Closed:: *)
(*LogGammaZero :*)


Unprotect [LogGammaZero];
ClearAll [LogGammaZero];

SetAttributes [LogGammaZero, {NumericFunction, Listable}];

LogGammaZero [one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  If [$exactZeroWheneverPossibleQ,
      1,
      one];

LogGammaZero [two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] :=
  If [$exactZeroWheneverPossibleQ,
      2,
      two];

  (* Minimum then maximum implemented zero number: *)

LogGammaZero [] := {1, 2};
Protect [LogGammaZero];


(* ::Subsection::Closed:: *)
(*LogIntegralZero :*)


Unprotect [LogIntegralZero];
ClearAll [LogIntegralZero];

SetAttributes [LogIntegralZero, {NumericFunction, Listable}];

LogIntegralZero [float1_Real /; float1 == 1.0 && Accuracy[float1] > $MinWholeNumberAccuracy] :=
  Module [{accuracy},
    Which [MachineNumberQ [float1],
             1.4513692348833811`,
           accuracy = Accuracy[float1];
           accuracy <= $Float32,
             N [1.451369234883381050283968485892027449493032283648`32., accuracy],
           True,
             Quiet [FindRoot [LogIntegral [var],
                              {var, 1.451369234883381050283968485892027449493032283648`32.},  (* :secant method *)
(*EvaluationMonitor :> ++$zerosCount,*)
                              WorkingPrecision -> accuracy,
                              PrecisionGoal -> $ZerosPrecisionGoalFactor * accuracy,
                              AccuracyGoal -> {Infinity, 0.0}][[1,2]]]]];

LogIntegralZero [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  If [$exactZeroWheneverPossibleQ,
      0,
      zero];

  (* Minimum then maximum implemented zero number: *)

LogIntegralZero [] := {0, 1};
(* #1 is the one and only positive zero at 1.45136... *)
Protect [LogIntegralZero];


(* ::Subsection::Closed:: *)
(*PolyGammaZero :*)


Unprotect [PolyGammaZero, $PolyGammaZeroParameterRange];
ClearAll [PolyGammaZero];

SetAttributes [PolyGammaZero, {NumericFunction, Listable}];

$PolyGammaZeroParameterRange = {-Infinity, Infinity}; (* :Whole-numbers only. *)

PolyGammaZero [n_/; n > 0 && WholeNumberQ[n],
               one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  Infinity;

  (* Precomputed for n = 0, k = 1 with MachinePrecision or Precision <= 32: *)
  (* Switch to memorizing?: *)

N [PolyGammaZero [0, 0], precision_? NumberQ] := PolyGammaZero [0, SetAccuracy [0, precision]];

PolyGammaZero [n_/; n >= 0 && WholeNumberQ[n] && EvenQ[Round[n]],
               k_/; k <= 1 && WholeNumberQ[k]] /;
   (Head[n] === Real || Head[k] === Real) && (k <= 0 || n == 0) :=
  Module [{precision = Precision [2 + n - k],  (* :Avoid Precision [zero] *)
           guess},
    (*Assert [k != 0];*) (* :I cannot remember why I inserted this, but untrue for Propose [N [RealInverseGamma[161/99,0]]] *)
    guess = If [n == 0 && k == 1,
                If [precision === MachinePrecision,
                    Return [1.4616321449683622`]];
                If [precision <= $Float32,
                    Return [N [1.461632144968362341262659542325721328468196204006`32., precision]],
                    1.461632144968362341262659542325721328468196204006`32.],
            (* else: *)
              k - 0.5];
    Quiet [FindRoot [Re [PolyGamma [n, var]], {var, guess},  (* :secant method *)
(*EvaluationMonitor :> ++$zerosCount,*)
                     WorkingPrecision -> precision,
                     PrecisionGoal -> $ZerosPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1, 2]]];

  (* Special values: *)

PolyGammaZero [minus1_/; minus1 == -1 && Accuracy[minus1] > $MinWholeNumberAccuracy,
               k_/; k == 1 || k == 2] := LogGammaZero [-minus1*k];

PolyGammaZero [n_/; n < 0 && WholeNumberQ[n],
               one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  If [$exactZeroWheneverPossibleQ,
      0,
      (one - one) + (n - n)];  (* :Let infection determine the Accuracy of the returned zero. *)

PolyGammaZero [n_/; n > 0 && WholeNumberQ[n],
               one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  Infinity;

  (* Minimum then maximum implemented zero number: *)

PolyGammaZero [] := {-Infinity, 2};

PolyGammaZero [n_? WholeNumberQ] :=
  Which [n == -1,          {1, 2},
         n < -1,           {1, 1},
         EvenQ[Round[n]],  {-Infinity, 1},
         True,             {1, 1}];

Protect [PolyGammaZero, $PolyGammaZeroParameterRange];


(* ::Subsection::Closed:: *)
(*RamanujanTauThetaZero :*)


Unprotect [RamanujanTauThetaZero];
ClearAll [RamanujanTauThetaZero];

SetAttributes [RamanujanTauThetaZero, {NumericFunction, Listable}];

RamanujanTauThetaZero [float1_Real /; float1 == 1.0 && Accuracy[float1] > $MinWholeNumberAccuracy] :=
  Module [{accuracy},
    Which [MachineNumberQ [float1],
             5.5120587740152661`,
           accuracy = Accuracy[float1];
           accuracy <= $Float32,
             N [5.512058774015266122736583526522052076411346248806`32., accuracy],
           True,
             Quiet [FindRoot [RamanujanTauTheta [var],
                              {var, 5.512058774015266122736583525`32., 5.512058774015266122736583527`32.},
(*EvaluationMonitor :> ++$zerosCount,*)
                              Method -> "Brent",  (* :Because RamanujanTauThetaZero'[x] is noisy. *)
                              WorkingPrecision -> accuracy,
                              PrecisionGoal -> $ZerosPrecisionGoalFactor * accuracy,
                              AccuracyGoal -> {Infinity, 0.0}][[1,2]]]]];

RamanujanTauThetaZero [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  If [$exactZeroWheneverPossibleQ,
      0,
      zero];

RamanujanTauThetaZero [minus1_/; minus1 == -1 && Accuracy[minus1] > $MinWholeNumberAccuracy] :=
  -RamanujanTauThetaZero [-minus1];

  (* Minimum then maximum implemented zero number: *)

RamanujanTauThetaZero [] := {-1, 1};
  (* : #1 is the leftmost positive zero at 5.51205... *)
Protect [RamanujanTauThetaZero];


(* ::Subsection::Closed:: *)
(*RiemannSiegelThetaZero :*)


Unprotect [RiemannSiegelThetaZero];
ClearAll [RiemannSiegelThetaZero];

SetAttributes [RiemannSiegelThetaZero, {NumericFunction, Listable}];

RiemannSiegelThetaZero [float1_Real /; float1 == 1.0 && Accuracy[float1] > $MinWholeNumberAccuracy] :=
  Module [{accuracy},
    Which [MachineNumberQ [float1],
             17.845599540410861`,
           accuracy = Accuracy[float1];
           accuracy <= $Float32,
             N [17.845599540410860816826338412519097035693287433696`32., accuracy],
           True,
             Quiet [FindRoot [RiemannSiegelTheta [var],
                              {var, 17.845599540410860816826338412519097035693287433696`32.},  (* :Newton method *)
(*EvaluationMonitor :> ++$zerosCount,*)
                              WorkingPrecision -> accuracy,
                              PrecisionGoal -> $ZerosPrecisionGoalFactor * accuracy,
                              AccuracyGoal -> {Infinity, 0.0}][[1,2]]]]];

RiemannSiegelThetaZero [zero_ /; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  If [$exactZeroWheneverPossibleQ,
      0,
      zero];

RiemannSiegelThetaZero [minus1_/; minus1 == -1 && Accuracy[minus1] > $MinWholeNumberAccuracy] :=
  -RiemannSiegelThetaZero [-minus1];

  (* Minimum then maximum implemented zero number: *)

RiemannSiegelThetaZero [] := {-1, 1};
  (* : #1 is the leftmost positive zero at 17.84559... *)
Protect [RiemannSiegelThetaZero];


(* ::Subsection::Closed:: *)
(*SphericalBesselJZero :*)


(* We cannot Protect SphericalBesselJZero, because it makes assignments to remember values. *)
ClearAll [SphericalBesselJZero];

SetAttributes [SphericalBesselJZero, {NumericFunction, Listable}];

Unprotect [$SphericalBesselJZeroParameterRange];
$SphericalBesselJZeroParameterRange = {0, Infinity};
Protect [$SphericalBesselJZeroParameterRange];

  (* The general case for n > 0 and k > 0: *) (* Could do for r < 0 && WholeNumberQ[r], but needs separate guess: *)

SphericalBesselJZeroAux [r_, precision_, guess_] :=
    Quiet [FindRoot [Re [SphericalBesselJ [r, var]], {var, guess(*, guess - 0.3*)},  (* :Newton method *)
(*EvaluationMonitor :> ++$zerosCount,*)
                     (*Method -> "Brent",*)
                     WorkingPrecision -> precision,
                     PrecisionGoal -> $ZerosPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1, 2]];

SphericalBesselJZero [r_/; r > 0 && Accuracy[r] > $MinWholeNumberAccuracy,
                      k_/; k > 0 && WholeNumberQ[k]] /;
    Head[r] === Real || Head[k]=== Real :=
  Module [{precision = Precision [{r, k}],
           standardizedPrecision, purifiedr, purifiedk},
    If [WholeNumberQ [r],
        (*If [r == 1 && k == 1,   (* Requires this file to know about SincInfimumOrSupremumAbscissa: *)
            Return [SincInfimumOrSupremumAbscissa [1/2(r + k)]]];*)
        standardizedPrecision = If [precision === MachinePrecision,
                                    MachinePrecision,
                                    16.0 * Ceiling [0.0625 * precision]];
        purifiedr = N [Round[r], standardizedPrecision];
        purifiedk = N [Round[k], standardizedPrecision];
        (* This guess is wasteful:  We compute BesselJZero to Machine precision, but it is a crude
           approximation to SphericalBesselJZero. Replace with a formula based directly on the
           shifted decaying asymptotic sinusoid: *)
        N [SphericalBesselJZero [purifiedr, purifiedk] =
             SphericalBesselJZeroAux [purifiedr, standardizedPrecision,
                0.7853981633974483` + BesselJZeroRemember [N[purifiedr], N[purifiedk]]],
           precision],
    (* else: *)
        SphericalBesselJZeroAux [r, precision, 0.7853981633974483` + BesselJZero [N[r], N[k]]]]];

(* Consider implementing for negative noninteger r ?? *)

  (* For negative whole parameter n, compute via SphericalBesselYZero: *)

SphericalBesselJZero [n_/; n < 0 && WholeNumberQ [n],  k_] :=
  SphericalBesselYZero [-1 - n, k];

  (* Exploitation of symmetries with respect to k: *)

SphericalBesselJZero [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                      k_/; k <= 0 && WholeNumberQ[k]] := -SphericalBesselJZero [zero, 1 - k];

SphericalBesselJZero [n_? WholeNumberQ,  k_/; k < 0 && WholeNumberQ[k]] :=
  -SphericalBesselJZero [n, -k];

  (* Special values: *)

SphericalBesselJZero [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                      k_? WholeNumberQ] :=
  If [$exactZeroWheneverPossibleQ,
      Round[k] * Pi,
      zero + k * Pi];

SphericalBesselJZero [
    r_/; r > 0 || WholeNumberQ[r],
    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  If [$exactZeroWheneverPossibleQ,
      0,
      (r - r) + zero];

SphericalBesselJZero [r_Integer | r_Real | r_Rational,  Infinity] := Infinity;
SphericalBesselJZero [r_Integer | r_Real | r_Rational,  -Infinity] := -Infinity;

  (* : "Isolated" real zeros exist for negative whole-number parameters, but are not implemented. *)

  (* Minimum then maximum implemented zero number: *)

SphericalBesselJZero [] := {-Infinity, Infinity};
  (* For all real r, SphericalBesselJZero [r, 1] is the leftmost positive zero. *)


(* ::Subsection::Closed:: *)
(*SphericalBesselYZero :*)


(* We cannot Protect SphericalBesselYZero, because it makes assignments to remember values. *)
ClearAll [SphericalBesselYZero];

SetAttributes [SphericalBesselYZero, {NumericFunction, Listable}];

Unprotect [$SphericalBesselYZeroParameterRange];
$SphericalBesselYZeroParameterRange = {-Infinity, Infinity};
Protect [$SphericalBesselYZeroParameterRange];

 (* The general case for r > 0 and whole-number k > 0: *)

SphericalBesselYZeroAux [r_, precision_, guess_] :=
    Quiet [FindRoot [Re [SphericalBesselY [r, var]], {var, guess(*, guess - 0.3*)},  (* :Newton method *)
(*EvaluationMonitor :> ++$zerosCount,*)
                     (*Method -> "Brent",*)
                     WorkingPrecision -> precision,
                     PrecisionGoal -> $ZerosPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1, 2]];

SphericalBesselYZero [r_/; r > 0 && Accuracy[r] > $MinWholeNumberAccuracy,
                      k_/; k > 0 && WholeNumberQ[k]] /;
    Head[r] === Real || Head[k]=== Real :=
  Module [{precision = Precision [{r, k}],
           standardizedPrecision, purifiedr, purifiedk},
    If [WholeNumberQ [r],
        standardizedPrecision = If [precision === MachinePrecision,
                                    MachinePrecision,
                                    16.0 * Ceiling [0.0625 * precision]];
        purifiedr = N [Round[r], standardizedPrecision];
        purifiedk = N [Round[k], standardizedPrecision];
        N [SphericalBesselYZero [purifiedr, purifiedk] =
             SphericalBesselYZeroAux [purifiedr, standardizedPrecision,
        (* This guess is wasteful:  We compute BesselYZero to Machine precision, but it is a crude
           approximation to SphericalBesselYZero. Replace with a formula based directly on the
           shifted decaying asymptotic sinusoid: *)
                0.7853981633974483` + BesselYZeroRemember [N[purifiedr], N[purifiedk]]],
           precision],
    (* else: *)
        SphericalBesselYZeroAux [r, precision, 0.7853981633974483` + BesselYZero [N[r], N[k]]]]];

  (* Special values for zeros of SphericalBesselY [0, x]: *)

SphericalBesselYZero [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                      k_/; k > 0 && WholeNumberQ [k]] :=
  If [$exactZeroWheneverPossibleQ,
      (Round[k] - 1/2) * Pi,
      zero + (k - 1/2) * Pi];

  (* Exploit identities for Negative whole n and nonpositive k: *)

SphericalBesselYZero [n_/; n < 0 && WholeNumberQ[n],  k_] :=
  SphericalBesselJZero [-1 - n, k];

SphericalBesselYZero [n_? WholeNumberQ,
                      k_/; k <= 0 && Accuracy[k] > $MinWholeNumberAccuracy] :=
  With [{y = SphericalBesselYZero [n, 1 - k]},
        If [EvenQ [Round [n]],  -y,  y]];

SphericalBesselYZero [r_/; Im[r] == 0,  Infinity] := Infinity;
SphericalBesselYZero [r_/; Im[r] == 0, -Infinity] := -Infinity;

  (* Minimum then maximum implemented zero number: *)

SphericalBesselYZero [] := {-Infinity, Infinity};
  (* For all real r, SphericalBesselYZero [r, 1] is the leftmost positive zero. *)


(* ::Subsection::Closed:: *)
(*StruveHZero :*)


(* We cannot Protect StruveHZero, because it makes assignments to remember values. *)
ClearAll [StruveHZero];

SetAttributes [StruveHZero, {NumericFunction, Listable}];

Unprotect [$StruveHZeroParameterRange];
$StruveHZeroParameterRange = {0, 0};
Protect [$StruveHZeroParameterRange];

  (* The general case for k > 0: *)

StruveHZero [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
             k_/; k > 0 && WholeNumberQ[k]] /; Head[zero] === Real || Head[k] === Real :=
  Module [{precision = Precision [zero + k],
           guess = BesselJZeroRemember [1.0, k],
           standardizedPrecision},
    standardizedPrecision = If [precision === MachinePrecision,
                                MachinePrecision,
                                16.0 * Ceiling [0.0625 * precision]];
    N [StruveHZero [If [standardizedPrecision === MachinePrecision,
                        0.0,
                        SetAccuracy [0, standardizedPrecision]],
                    N [Round[k], standardizedPrecision]] =
         Quiet [FindRoot [Re [StruveH [0, var]], {var, guess},  (* :Newton method *)
(*EvaluationMonitor :> ++$zerosCount,*)
                     WorkingPrecision -> standardizedPrecision,
                     PrecisionGoal -> $ZerosPrecisionGoalFactor * standardizedPrecision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1, 2]],
       precision]];

(* Consider implementing for negative r ?? *)

  (* Exploitation of symmetries with respect to k: *)

StruveHZero [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
             k_/; k < 0 && Accuracy[k] > $MinWholeNumberAccuracy] :=
  -StruveHZero [zero, -k];

  (* Special values: *)

StruveHZero [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
             cero_/; cero == 0 && Accuracy[cero] > $MinWholeNumberAccuracy] :=
  If [$exactZeroWheneverPossibleQ,
      0,
      cero + zero];

StruveHZero [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,  Infinity] :=
  Infinity;

  (* Minimum then maximum implemented zero number: *)

StruveHZero [] := {-Infinity, Infinity};


(* ::Section::Closed:: *)
(*End private context then End the package :*)


End [];
EndPackage [];


(* ::Title::Closed:: *)
(*InfimaAndSuprema package*)


(* ::Section::Closed:: *)
(*Summary :*)


(* ::Subsection::Closed:: *)
(*Ultra permissive "MIT copyright" notice:*)


(* ::Text:: *)
(*Copyright (c) 2016, David R. Stoutemyer *)
(**)
(*Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:*)
(**)
(*The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.*)
(**)
(*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.*)


(* ::Subsection::Closed:: *)
(*History and purpose:*)


(* ::Text:: *)
(*As of August 2015, this Mathematica package is under development by David R. Stoutemyer (dstout@hawaii.edu).*)
(**)
(*It is analogous to the built-in AiryAiZero, AiryBiZero, BesselJZero, and BesselYZero functions, but instead computes the abscissas and ordinates of their infima and suprema and of many other built-in Mathematica special functions having the NumericFunction Attribute and nontrivial infima and suprema.*)


(* ::Subsection::Closed:: *)
(*Some programming issues:*)


(* ::Text:: *)
(*This version of this package is given by the value of the public package-level variable*)
(*    $InfimaAndSupremaVersionNumber.*)
(**)
(*1:  For approximate abscissas, I generally use  FindRoot [D [f [x], x] == 0, ...] rather than*)
(*     FindMinimum [f[x], ...], which is usually much less accurate unless perhaps D [f[x]], x] *)
(*     was computed by finite differences.*)
(*     *)
(*2:  For parametrized functions such as BesselJ [r, x], I regard r as fixed and consider*)
(*     consequent infima and suprema along the x direction. I do not consider infima and*)
(*     suprema in the r direction with x fixed, and I do not consider infima and suprema with*)
(*     both r and x free to vary arbitrarily.*)
(**)
(*3:  OptionPattern []  (Direction -> ...) is ignored in ...Ordinate functions except where *)
(*     direction matters, such as for odd-order poles, where it behaves like the Direction*)
(*     argument for the Mathematica Limit function. However, the optional Direction argument*)
(*     is allowed for all infima and suprema so that users do not have to remember which*)
(*     functions do not ignore it.*)
(*     *)
(*4.  I often enclose a special-function evaluation in Re[...] even though the function arguments*)
(*    are in the real domain, because float arguments sometimes cause a spurious 0.0*I or*)
(*    epsilon*I that thwarts desired goals.*)
(*    *)
(*5.  I often define a function using subexpressions such as  zero + ...,  one*...,  one - one, or*)
(*    zero^3,  even though  zero == 0.0  and  one == 1.0 .  The reason is to intentionally:*)
(*    *)
(*    a) make the result a machine float if "zero" or "one" is a machine float,*)
(*    *)
(*    b) otherwise make the result have an appropriate Accuracy if zero or one is an arbitrary-*)
(*        precision float,*)
(*       *)
(*    c) othewise make the result be ExactNumberQ.*)
(*    *)
(*6.  Naming conventions:*)
(**)
(*    a)  All function names are capitalized.*)
(*    *)
(*    b)  Global indeterminate read-only symbols that end users might see, such as optional-argument*)
(*            names, are merely capitalilzed.*)
(*         Otherwise global variables and dynamically-scoped variables intended for access outside*)
(*            the Block  where they are defined begin with $.*)
(*         *)
(*    c)  Such variables that are not expected to change value after "Run Package" are capitalized.*)
(**)


(* ::Text:: *)
(*TO DO:*)
(**)
(*1.  Make it consistent with ExactIfPossible for Zeros and InfSups, all via optional keyword parameters.*)
(*     (See implementation for FresnelS)*)
(**)
(*2.  $MaxAbsBranchNumberForRemember, $MaxAbsIndexForRemember and similarly for individual functions.*)
(**)
(*3.  Do remaining special functions of interest.*)


(* ::Section::Closed:: *)
(*Usage :*)


If [$VersionNumber < 8.0,
    Print ["Sorry, but the functions in this InfimaAndSuprema package will not work properly for Mathematica versions before 8.0."]];


On [Assert];  (* : New in Mathematica version 8.0 *)


BeginPackage["InfimaAndSuprema`", {"Zeros`"}];


(* ::Subsection::Closed:: *)
(*Usage of public function names:*)


If [$VersionNumber < 10.0,
    DirichletBeta::usage = "http://reference.wolfram.com/language/ref/DirichletBeta.html?q=DirichletBeta";
    DirichletEta::usage = "http://reference.wolfram.com/language/ref/DirichletEta.html?q=DirichletEta";
    DirichletLambda::usage = "http://reference.wolfram.com/language/ref/DirichletLambda.html?q=DirichletLambda"];


AiryAiInfimumOrSupremumAbscissa::usage =
  "For float whole-number k, AiryAiInfimumOrSupremumAbscissa[k] returns the abscissa of the kth local infimum or supremum of the AiryAi function with the corresponding Accuracy.
   AiryAiInfimumOrSupremumAbscissa [] returns a list containing the smallest then largest implemented k.";
AiryAiInfimumOrSupremumOrdinate::usage =
  "For float whole-number k, AiryAiInfimumOrSupremumOrdinate[k] returns the ordinate of the kth local infimum or supremum of the AiryAi function with the corresponding Accuracy.
   AiryAiInfimumOrSupremumOrdinate [] returns a list containing the smallest then largest implemented k.";

AiryBiInfimumOrSupremumAbscissa::usage =
  "For float whole-number k, AiryBiInfimumOrSupremumAbscissa[k] returns the abscissa of the kth local infimum or supremum of the AiryBi function with the corresponding Accuracy.
   AiryBiInfimumOrSupremumAbscissa [] returns a list containing the smallest then largest implemented k.";
AiryBiInfimumOrSupremumOrdinate::usage =
  "For float whole-number k, AiryBiInfimumOrSupremumOrdinate[k] returns the ordinate of the kth local infimum or supremum of the AiryBi function with the corresponding Accuracy.
   AiryBiInfimumOrSupremumOrdinate [] returns a list containing the smallest then largest implemented k.";

BarnesGInfimumOrSupremumAbscissa::usage =
  "For float whole-number k, BarnesGInfimumOrSupremumAbscissa[k] returns the abscissa of the kth local infimum or supremum of the BarnesG function with corresponding Accuracy.
   BarnesGInfimumOrSupremumAbscissa [] returns a list containing the smallest then largest implemented k.";
BarnesGInfimumOrSupremumOrdinate::usage =
  "For float whole-number k, BarnesGInfimumOrSupremumOrdinate[k] returns the ordinate of the kth local infimum or supremum of the BarnesG function with corresponding Accuracy.
   BarnesGInfimumOrSupremumOrdinate [] returns a list containing the smallest then largest implemented k.";

BesselIInfimumOrSupremumAbscissa::usage =
  "If at least one of real r and whole-number k is a float, then BesselIInfimumOrSupremumAbscissa[r,k] returns the abscissa x of the kth local infimum or supremum of BesselI[r,x] with the corresponding Accuracy.
   BesselIInfimumOrSupremumAbscissa [] returns a list containing the smallest then largest implemented k.";
BesselIInfimumOrSupremumOrdinate::usage =
  "If at least one of real r and whole-number k is a float, then BesselIInfimumOrSupremumOrdinate[r,k] returns the ordinate of the kth local infimum or supremum of BesselI[r,x] with corresponding Accuracy.
   BesselIInfimumOrSupremumOrdinate [r] returns a list containing the smallest then largest implemented k for NumberQ parameter r.
   BesselIInfimumOrSupremumOrdinate [] returns a list containing the smallest then largest implemented k over all real r";

BesselJInfimumOrSupremumAbscissa::usage =
  "If at least one of real r and whole-numbers k is a float, then BesselJInfimumOrSupremumAbscissa[r,k] returns the abscissa x of the kth local infimum or supremum of BesselJ[r,x] with the corresponding Accuracy.
   BesselJInfimumOrSupremumAbscissa [] returns a list containing the smallest then largest implemented k.";
BesselJInfimumOrSupremumOrdinate::usage =
  "If at least one of real r and whole-numbers k is a float, then BesselJInfimumOrSupremumOrdinate[r,k] returns the ordinate of the kth local infimum or supremum of BesselJ[r,x] with corresponding Accuracy.
   BesselJInfimumOrSupremumOrdinate [r] returns a list containing the smallest then largest implemented k for NumberQ parameter r.
   BesselJInfimumOrSupremumOrdinate [] returns a list containing the smallest then largest implemented k over all real r";

BesselYInfimumOrSupremumAbscissa::usage = "";
  "If at least one of real r and whole-numbers k is a float, then BesselYInfimumOrSupremumAbscissa[r,k] returns the abscissa x of the kth local infimum or supremum of BesselJ[n,x] with corresponding Accuracy.
   BesselYInfimumOrSupremumAbscissa [r] returns a list containing the smallest then largest implemented k for parameter r.
   BesselYInfimumOrSupremumAbscissa [] returns a list containing the smallest then largest implemented k over all real r";
BesselYInfimumOrSupremumOrdinate::usage = "";
  "If at least one of real r and whole-numbers k is a float, then BesselYInfimumOrSupremumOrdinate[r,k] returns the ordinate x of the kth local infimum or supremum of BesselJ[n,x] with the corresponding Accuracy.
   BesselYInfimumOrSupremumOrdinate [r] returns a list containing the smallest then largest implemented k for parameter r.
   BesselYInfimumOrSupremumOrdinate [] returns a list containing the smallest then largest implemented k over all real r";

CosIntegralInfimumOrSupremumAbscissa::usage =
  "For float whole-number k, CosIntegralInfimumOrSupremumAbscissa[k] returns the abscissa of the kth local infimum or supremum of the CosIntegral function with the corresponding Accuracy.
   CosIntegralInfimumOrSupremumAbscissa [] returns a list containing the smallest then largest implemented k.";
CosIntegralInfimumOrSupremumOrdinate::usage =
  "For whole-number k >= 0, CosIntegralInfimumOrSupremumOrdinate[k] returns the ordinate of the kth local infimum or supremum of the DawsonF function with the corresponding Accuracy.
   CosIntegralInfimumOrSupremumOrdinate [] returns a list containing the smallest then largest implemented k.";

DawsonFInfimumOrSupremumAbscissa::usage =
  "For float whole-number k, DawsonFInfimumOrSupremumAbscissa[k] returns the abscissa of the kth local infimum or supremum of the DawsonF function with the corresponding Accuracy.
   DawsonFInfimumOrSupremumAbscissa [] returns a list containing the smallest then largest implemented k.";
DawsonFInfimumOrSupremumOrdinate::usage =
  "For float whole-number k, DawsonFInfimumOrSupremumOrdinate[k] returns the ordinate of the kth local infimum or supremum of the DawsonF function with the corresponding Accuracy.
   DawsonFInfimumOrSupremumOrdinate [] returns a list containing the smallest then largest implemented k.";

DirichletBetaInfimumOrSupremumAbscissa::usage =
  "For float whole-number k, DirichletBetaInfimumOrSupremumAbscissa[k] returns the abscissa of the kth local infimum or supremum of the DirichletBeta function with the corresponding Accuracy.
   DirichletBetaInfimumOrSupremumAbscissa [] returns a list containing the smallest then largest implemented k.";
DirichletBetaInfimumOrSupremumOrdinate::usage =
  "For float whole-number k, DirichletBetaInfimumOrSupremumOrdinate[k] returns the ordinate of the kth local infimum or supremum of the DirichletBeta function with the corresponding Accuracy.
   DirichletBetaInfimumOrSupremumOrdinate [] returns a list containing the smallest then largest implemented k.";

DirichletEtaInfimumOrSupremumAbscissa::usage =
  "For float whole-number k, DirichletEtaInfimumOrSupremumAbscissa[k] returns the abscissa of the kth local infimum or supremum of the DirichletEta function with the corresponding Accuracy.
   DirichletEtaInfimumOrSupremumAbscissa [] returns a list containing the smallest then largest implemented k.";
DirichletEtaInfimumOrSupremumOrdinate::usage =
  "For float whole-number k, DirichletEtaInfimumOrSupremumOrdinate[k] returns the ordinate of the kth local infimum or supremum of the DirichletEta function with the corresponding Accuracy.
   DirichletEtaInfimumOrSupremumOrdinate [] returns a list containing the smallest then largest implemented k.";

DirichletLambdaInfimumOrSupremumAbscissa::usage =
  "For float whole-number k, DirichletLambdaInfimumOrSupremumAbscissa[k]] returns the abscissa of the kth local infimum or supremum of the DirichletLambda function with the corresponding Accuracy.
   DirichletLambdaInfimumOrSupremumAbscissa [] returns a list containing the smallest then largest implemented k.";
DirichletLambdaInfimumOrSupremumOrdinate::usage =
  "For float whole-number k, DirichletLambdaInfimumOrSupremumOrdinate[k]] returns the ordinate of the kth local infimum or supremum of the DirichletLambda function with the corresponding Accuracy.
   DirichletLambdaInfimumOrSupremumOrdinate [2, Direction -> 1] returns -Infinity.
   DirichletLambdaInfimumOrSupremumOrdinate [2, Direction -> -1] returns Infinity.
   DirichletLambdaInfimumOrSupremumOrdinate [] returns a list containing the smallest then largest implemented k.";

Factorial2InfimumOrSupremumAbscissa::usage =
  "For float whole-number k, Factorial2InfimumOrSupremumAbscissa[k] returns the abscissa of the kth local infimum or supremum of the Factorial2 function with the corresponding Accuracy.
   Factorial2InfimumOrSupremumAbscissa [] returns a list containing the smallest then largest implemented k.";
Factorial2InfimumOrSupremumOrdinate::usage =
  "For float whole-number k, Factorial2InfimumOrSupremumOrdinate[k] returns the ordinate of the kth local infimum or supremum of the Factorial2 function with the corresponding Accuracy.
   Factorial2InfimumOrSupremumOrdinate [k_/; k < 0 && EvenQ[k], Direction -> 1] returns -Infinity if OddQ[k/2], otherwise Infinity..
   Factorial2InfimumOrSupremumOrdinate [k_/; k < 0 && EvenQ[k], Direction -> -1] returns Infinity if OddQ[k/2], otherwise -Infinity..
   Factorial2InfimumOrSupremumOrdinate [] returns a list containing the smallest then largest implemented k.";

FresnelCInfimumOrSupremumAbscissa::usage ==
  "For whole-number k, FresnelCInfimumOrSupremumAbscissa[k]] returns the abscissa of the kth local infimum or supremum of the FresnelC function with the corresponding Accuracy.
   FresnelCInfimumOrSupremumAbscissa [] returns a list containing the smallest then largest implemented k.";
FresnelCInfimumOrSupremumOrdinate::usage ==
  "For float whole-number k, FresnelCInfimumOrSupremumOrdinate[k]] returns the ordinate of the kth local infimum or supremum of the FresnelC function with the corresponding Accuracy.
   FresnelCInfimumOrSupremumOrdinate [] returns a list containing the smallest then largest implemented k.";

FresnelSInfimumOrSupremumAbscissa::usage ==
  "For whole-number k, FresnelSInfimumOrSupremumAbscissa[k]] returns the abscissa of the kth local infimum or supremum of the FresnelS function with the corresponding Accuracy.
   FresnelSInfimumOrSupremumAbscissa [] returns a list containing the smallest then largest implemented k.";
FresnelSInfimumOrSupremumOrdinate::usage ==
  "For float whole-number k, FresnelSInfimumOrSupremumOrdinate[k]] returns the ordinate of the kth local infimum or supremum of the FresnelS function with the corresponding Accuracy.
   FresnelSInfimumOrSupremumOrdinate [] returns a list containing the smallest then largest implemented k.";

GammaInfimumOrSupremumAbscissa::usage =
  "For float whole-number k, GammaInfimumOrSupremumAbscissa[k] returns the abscissa of the kth local infimum or supremum of the Gamma function with the corresponding Accuracy.
   GammaInfimumOrSupremumOrdinate [0``accuracy] returns 0.885603... with the appropriate Accuracy.
   GammaInfimumOrSupremumAbscissa [] returns a list containing the smallest then largest implemented k.";
GammaInfimumOrSupremumOrdinate::usage =
  "For float whole-number k, GammaInfimumOrSupremumOrdinate[k] returns the ordinate of the kth local infimum or supremum of the Gamma function with the corresponding Accuracy.
   GammaInfimumOrSupremumOrdinate [k_/; k <= 0, Direction -> 1] returns -Infinity if EvenQ[k], otherwise Infinity.
   GammaInfimumOrSupremumOrdinate [k_/; k <= 0], Direction -> -1] returns Infinity if EvenQ[k]], otherwise -Infinity.
   GammaInfimumOrSupremumOrdinate [] returns a list containing the smallest then largest implemented k.";

HyperfactorialInfimumOrSupremumAbscissa::usage =
  "For float whole-number k, HyperfactorialInfimumOrSupremumAbscissa[k] returns the abscissa of the kth local infimum or supremum of the Hyperfactorial function with the corresponding Accuracy.
   HyperfactorialInfimumOrSupremumAbscissa [] returns a list containing the smallest then largest implemented k.";
HyperfactorialInfimumOrSupremumOrdinate::usage =
  "For float whole-number k, HyperfactorialInfimumOrSupremumOrdinate[k] returns the ordinate of the kth local infimum or supremum of the Hyperfactorial function with the corresponding Accuracy.
   HyperfactorialInfimumOrSupremumOrdinate [] returns a list containing the smallest then largest implemented k.";

LogBarnesGInfimumOrSupremumAbscissa::usage =
  "For float whole-number k, LogBarnesGInfimumOrSupremumAbscissa[k] returns the abscissa of the kth local infimum or supremum of the LogBarnesG function with corresponding Accuracy.
   LogBarnesGInfimumOrSupremumAbscissa [] returns a list containing the smallest then largest implemented k.";
LogBarnesGInfimumOrSupremumOrdinate::usage =
  "For float whole-number k, LogBarnesGInfimumOrSupremumOrdinate[k] returns the ordinate of the kth local infimum or supremum of the LogBarnesG function with corresponding Accuracy.
   LogBarnesGInfimumOrSupremumOrdinate [] returns a list containing the smallest then largest implemented k.";

LogGammaInfimumOrSupremumAbscissa::usage =
  "For whole-number k, LogGammaInfimumOrSupremumAbscissa[k] returns the abscissa of the kth local infimum or supremum of the LogGamma function with the corresponding Accuracy.
   LogGammaInfimumOrSupremumAbscissa [] returns a list containing the smallest then largest implemented k.";
LogGammaInfimumOrSupremumOrdinate::usage =
  "For whole-number k, LogGammaInfimumOrSupremumOrdinate[k] returns the ordinate of the kth local infimum or supremum of the LogGamma function with the corresponding Accuracy.
   LogGammaInfimumOrSupremumOrdinate [] returns a list containing the smallest then largest implemented k.";

ParabolicCylinderDInfimumOrSupremumAbscissa::usage =
  "If at least one of whole numbers n and k is a float, then ParabolicCylinderDInfimumOrSupremumAbscissa[n,k] returns the abscissa x of the kth local infimum or supremum  of ParabolicCylinderD[n,x] with the corresponding Accuracy.
   ParabolicCylinderDInfimumOrSupremumAbscissa [] returns a list containing the smallest then largest implemented k.";
ParabolicCylinderDInfimumOrSupremumOrdinate::usage =
  "If at least one of whole numbers n and k is a float, then ParabolicCylinderDInfimumOrSupremumAbscissa[n,k] returns the ordinate x of the kth local infimum or supremum  of ParabolicCylinderD[n,x] with the corresponding Accuracy.
   ParabolicCylinderDInfimumOrSupremumOrdinate [] returns a list containing the smallest then largest implemented k.";

PolyGammaInfimumOrSupremumAbscissa::usage =
  "If at least one of whole-numbers n and k is a float, then PolyGammaInfimumOrSupremumAbscissa[n,k] returns the abscissa x of the kth local infimum or supremum of PolyGamma[n,x] with the corresponding Accuracy.
   PolyGammaInfimumOrSupremumAbscissa [] returns a list containing the smallest then largest implemented k.";
PolyGammaInfimumOrSupremumOrdinate::usage =
  "If at least one of whole-numbers n and k is a float, then PolyGammaInfimumOrSupremumOrdinate[r,k] returns the ordinate of the kth local infimum or supremum of PolyGamma[n,x] with corresponding Accuracy.
   PolyGammaInfimumOrSupremumOrdinate [n] returns a list containing the smallest then largest implemented k for NumberQ parameter n.
   PolyGammaInfimumOrSupremumOrdinate [] returns a list containing the smallest then largest implemented k over all n";

RamanujanTauThetaInfimumOrSupremumAbscissa::usage =
  "For float whole-number k, RamanujanTauThetaInfimumOrSupremumAbscissa[k] returns the abscissa of the kth local infimum or supremum of the RamanujanTauTheta function with the corresponding Accuracy.
   RamanujanTauThetaInfimumOrSupremumAbscissa [] returns a list containing the smallest then largest implemented k.";
RamanujanTauThetaInfimumOrSupremumOrdinate::usage =
  "For float whole-number k, RamanujanTauThetaInfimumOrSupremumOrdinate[k] returns the ordinate of the kth local infimum or supremum of the RamanujanTauTheta function with the corresponding Accuracy.
   RamanujanTauThetaInfimumOrSupremumOrdinate [] returns a list containing the smallest then largest implemented k.";

RiemannSiegelThetaInfimumOrSupremumAbscissa::usage =
  "For float whole-number k, RiemannSiegelThetaInfimumOrSupremumAbscissa[k] returns the abscissa of the kth local infimum or supremum of the RiemannSiegelTheta function with the corresponding Accuracy.
   RiemannSiegelThetaInfimumOrSupremumAbscissa [] returns a list containing the smallest then largest implemented k.";
RiemannSiegelThetaInfimumOrSupremumOrdinate::usage =
  "For float whole-number k, RiemannSiegelThetaInfimumOrSupremumOrdinate[k] returns the ordinate of the kth local infimum or supremum of the RiemannSiegelTheta function with the corresponding Accuracy.
   RiemannSiegelThetaInfimumOrSupremumOrdinate [] returns a list containing the smallest then largest implemented k.";

SincInfimumOrSupremumAbscissa::usage ==
  "For float whole-number k, SincInfimumOrSupremumAbscissa[k]] returns the abscissa of the kth local infimum or supremum of the Sinc function with the corresponding Accuracy.
   SincInfimumOrSupremumAbscissa [] returns a list containing the smallest then largest implemented k.";
SincInfimumOrSupremumOrdinate::usage ==
  "For float whole-number k, SincInfimumOrSupremumOrdinate[k]] returns the ordinate of the kth local infimum or supremum of the Sinc function with the corresponding Accuracy.
   SincInfimumOrSupremumOrdinate [] returns a list containing the smallest then largest implemented k.";

SinIntegralInfimumOrSupremumAbscissa::usage ==
  "For float whole-number k, SinIntegralInfimumOrSupremumAbscissa[k]] returns the abscissa of the kth local infimum or supremum of the SinIntegral function with the corresponding Accuracy.
   SinIntegralInfimumOrSupremumAbscissa [] returns a list containing the smallest then largest implemented k.";
SinIntegralInfimumOrSupremumOrdinate::usage ==
  "For float whole-number k, SinIntegralOrSupremumOrdinate[k]] returns the ordinate of the kth local infimum or supremum of the SinIntegral function with the corresponding Accuracy.
   SinIntegralOrSupremumOrdinate [] returns a list containing the smallest then largest implemented k.";

SphericalBesselJInfimumOrSupremumAbscissa::usage =
  "If at least one of real r and whole-numbers k is a float, then SphericalBesselJInfimumOrSupremumAbscissa[n,k] returns the abscissa of the kth local infimum or supremum of SphericalBesselJ[n,\[Ellipsis]] with the corresponding Accuracy.
   SphericalBesselJInfimumOrSupremumAbscissa [] returns a list containing the smallest then largest implemented k.";
SphericalBesselJInfimumOrSupremumOrdinate::usage =
  "If at least one of real r and whole-numbers k is a float, then SphericalBesselJInfimumOrSupremumOrdinate[n,k] returns the ordinate of the kth local infimum or supremum of SphericalBesselJ[n,\[Ellipsis]] with the corresponding Accuracy.
   SphericalBesselJInfimumOrSupremumOrdinate [] returns a list containing the smallest then largest implemented k.";

SphericalBesselYInfimumOrSupremumAbscissa::usage =
  "If at least one of real r and whole-numbers k is a float, then SphericalBesselYInfimumOrSupremumAbscissa[n,k] returns the abscissa of the kth local infimum or supremum of SphericalBesselY[n,\[Ellipsis]] with the corresponding Accuracy.
   SphericalBesselYInfimumOrSupremumAbscissa [] returns a list containing the smallest then largest implemented k.";
SphericalBesselYInfimumOrSupremumOrdinate::usage =
  "If at least one of real r and whole-numbers k is a float, then SphericalBesselYInfimumOrSupremumOrdinate[n,k] returns the ordinate of the kth local infimum or supremum of SphericalBesselY[n,\[Ellipsis]] with the corresponding Accuracy.
   SphericalBesselYInfimumOrSupremumOrdinate [] returns a list containing the smallest then largest implemented k.";

StruveHInfimumOrSupremumAbscissa::usage =
  "If at least one of whole-numbers n and k is a float, then StruveHInfimumOrSupremumAbscissa[n,k] returns the abscissa x of the kth local infimum or supremum of StruveH[n,x] with the corresponding Accuracy.
   StruveHInfimumOrSupremumAbscissa [] returns a list containing the smallest then largest implemented k.";
StruveHInfimumOrSupremumOrdinate::usage =
  "If at least one of whole-numbers n and k is a float, then StruveHInfimumOrSupremumOrdinate[r,k] returns the ordinate of the kth local infimum or supremum of StruveH[n,x] with corresponding Accuracy.
   StruveHInfimumOrSupremumOrdinate [n] returns a list containing the smallest then largest implemented k for NumberQ parameter n.
   StruveHInfimumOrSupremumOrdinate [] returns a list containing the smallest then largest implemented k over all real r";

ZetaInfimumOrSupremumAbscissa::usage =
  "For float whole-number k, ZetaInfimumOrSupremumAbscissa[k] returns the abscissa of the kth local infimum or supremum of the Zeta function with the corresponding Accuracy.
   ZetaInfimumOrSupremumAbscissa [] returns a list containing the smallest then largest implemented k.";
ZetaInfimumOrSupremumOrdinate::usage =
  "For float whole-number k, ZetaInfimumOrSupremumOrdinate[k] returns the ordinate of the kth local infimum or supremum of the Zeta function with the corresponding Accuracy.
   ZetaInfimumOrSupremumOrdinate [] returns a list containing the smallest then largest implemented k.";


(* ::Subsection::Closed:: *)
(*Usage of optionally-public functions:*)


(* ::Text:: *)
(*To reduce the chance of name conflicts, the code in this Section should be commented out*)
(*   in the distributed version.*)
(*Uncommenting this code is helpful during development and testing for convenient access *)
(*  and for  syntax coloring that reveals misspellings.*)


(*
BesselJInfimumOrSupremumAbscissaAux::usage = "";
BesselYInfimumOrSupremumAbscissaAux::usage = "";
DirichletLambdaInfimumOrSupremumAbscissaAux::usage = "";
*)


(* ::Subsection::Closed:: *)
(*Usage of public package-level variables:*)


$InfimaAndSupremaVersionNumber::usage = "Include the value of this variable in any emails to AskConstants about this package.";


ExactInfimaOrSupremaIfPossible::usage =
  "Use optional keyword parameter  ExactInfimaOrSupremaIfPossible -> False  if you do not want the default True value.";

$ExactInfSupWheneverPossibleQ::usage =
  "Initially True. Set to False to make, for example, GammaInfimumOrSupremumAbscissa[0.0] return 0 rather than 0.0";

$InfSupPrecisionGoalFactor::usage =
  "Used in FindRoot [..., ...], PrecisionGoal = $InfSupPrecisionGoalFactor * WorkingPrecision.";

$infSupCount::usage =
 "Use this global variable to count total FindRoot iterations for ...InfimumOr..., or shadow it with
  Block [{$infSupCount = 0}, ..., {..., $infSupCount}] to count number of iterations for one ...InfimumOr...";


$BesselIInfimumOrSupremumParameterRange::usage =
  "A list containing the smallest then largest implemented whole-number parameter n for computing float values of BesselIInfimumOrSupremumAbscissa[n,k] and BesselIInfimumOrSupremumOrdinate[n,k].";
$BesselJInfimumOrSupremumParameterRange::usage =
  "A list containing the smallest then largest implemented whole-number parameter n for computing float values of BesselJInfimumOrSupremumAbscissa[n,k] and BesselJInfimumOrSupremumOrdinate[n,k].";
$BesselYInfimumOrSupremumParameterRange::usage =
  "A list containing the smallest then largest implemented whole-number parameter n for computing float values of BesselYInfimumOrSupremumAbscissa[n,k] and BesselYInfimumOrSupremumOrdinate[n,k].";
$KelvinBeiInfimumOrSupremumParameterRange::usage =
  "A list containing the smallest then largest implemented whole-number parameter n for computing float values of KelvinBeiInfimumOrSupremumAbscissa[n,k] and KelvinBeiInfimumOrSupremumOrdinate[n,k].";
$KelvinBerInfimumOrSupremumParameterRange::usage =
  "A list containing the smallest then largest implemented whole-number parameter n for computing float values of KelvinBerInfimumOrSupremumAbscissa[n,k] and KelvinBerInfimumOrSupremumOrdinate[n,k].";
$KelvinKeiInfimumOrSupremumParameterRange::usage =
  "A list containing the smallest then largest implemented whole-number parameter n for computing float values of KelvinKeiInfimumOrSupremumAbscissa[n,k] and KelvinKeiInfimumOrSupremumOrdinate[n,k].";
$KelvinKerInfimumOrSupremumParameterRange::usage =
  "A list containing the smallest then largest implemented whole-number parameter n for computing float values of KelvinKerInfimumOrSupremumAbscissa[n,k] and KelvinKerInfimumOrSupremumOrdinate[n,k].";
$ParabolicCylinderDInfimumOrSupremumParameterRange::usage =
  "A list containing the smallest then largest implemented whole-number parameter n for computing float values of ParabolicCylinderDAbscissa[n,k] and ParabolicCylinderDInfimumOrSupremumOrdinate[n,k].";
$PolyGammaInfimumOrSupremumParameterRange::usage =
  "A list containing the smallest then largest implemented whole-number parameter n for computing float values of PolyGammaAbscissa[n,k] and PolyGammaInfimumOrSupremumOrdinate[n,k].";
$SphericalBesselJInfimumOrSupremumParameterRange::usage =
  "A list containing the smallest then largest implemented whole-number parameter n for computing float values of SphericalBesselJInfimumOrSupremumAbscissa[n,k] and SphericalBesselJInfimumOrSupremumOrdinate[n,k].";
$SphericalBesselYInfimumOrSupremumParameterRange::usage =
  "A list containing the smallest then largest implemented whole-number parameter n for computing float values of SphericalBesselYInfimumOrSupremumAbscissa[n,k] and SphericalBesselYInfimumOrSupremumOrdinate[n,k].";
$StruveHInfimumOrSupremumParameterRange::usage =
  "A list containing the smallest then largest implemented whole-number parameter n for computing float values of StruveHInfimumOrSupremumAbscissa[n,k] and StruveHInfimumOrSupremumOrdinate[n,k].";


(* ::Section::Closed:: *)
(*Initialization of some package-level variables :*)


Begin ["`Private`"];


Unprotect [$InfimaAndSupremaVersionNumber];
$InfimaAndSupremaVersionNumber = 1.0;
Protect [$InfimaAndSupremaVersionNumber];

$ExactInfSupWheneverPossibleQ = False;  (* :False is best for Propose [...]. *)
$InfSupPrecisionGoalFactor = 0.75;  (* The tradeoff is precision of the result versus iteration count. Deserves more experimentation. *)
$Float32 = 32.0;


(* ::Section::Closed:: *)
(*Function definitions :*)


(* ::Subsection::Closed:: *)
(*AiryAi infimum or supremum*)


(* ::Subsubsection::Closed:: *)
(*AiryAiInfimumOrSupremumAbscissa*)


Unprotect [AiryAiInfimumOrSupremumAbscissa];
ClearAll [AiryAiInfimumOrSupremumAbscissa];  (* :Prevent obsolete rules from interferring during development. *)

SetAttributes [AiryAiInfimumOrSupremumAbscissa, {NumericFunction, Listable}];

  (* General case: AiryAiPrimeZero is fast, so it is not worth remembering: *)

AiryAiInfimumOrSupremumAbscissa [k_/; k <= 0 && WholeNumberQ [k]] :=
  AiryAiPrimeZero[k];

AiryAiInfimumOrSupremumAbscissa [
  one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := Infinity;

AiryAiInfimumOrSupremumAbscissa [-Infinity] := -Infinity;

AiryAiInfimumOrSupremumAbscissa [] := {-Infinity, 1};
Protect [AiryAiInfimumOrSupremumAbscissa];                                 


(* ::Subsubsection::Closed:: *)
(*AiryAiInfimumOrSupremumOrdinate*)


Unprotect [AiryAiInfimumOrSupremumOrdinate];
ClearAll [AiryAiInfimumOrSupremumOrdinate];

SetAttributes [AiryAiInfimumOrSupremumOrdinate, {NumericFunction, Listable}];

Options [AiryAiInfimumOrSupremumOrdinate] = {Direction -> 0};

  (* General case: AiryAi is fast, so not worth remembering: *)

N [AiryAiInfimumOrSupremumOrdinate [0, OptionsPattern[]],
   precision_Real | precision_Integer | precision_Rational] :=
  AiryAiInfimumOrSupremumOrdinate [SetAccuracy [0, precision]];  (* :Because, for example, N [0, 32] returns Integer 0 *)

AiryAiInfimumOrSupremumOrdinate [k_Real /; k <= 0 && WholeNumberQ [k],
                                 OptionsPattern[]] :=
  Re [AiryAi [AiryAiInfimumOrSupremumAbscissa [k]]];

AiryAiInfimumOrSupremumOrdinate [
  one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy,
  OptionsPattern[]] := one - one;  (* DO NOT SIMPLIFY such expressions.  They propagate type and Accuracy as desired. *)

AiryAiInfimumOrSupremumOrdinate [-Infinity, OptionsPattern[]] := 0;

AiryAiInfimumOrSupremumOrdinate [OptionsPattern[]] := AiryAiInfimumOrSupremumAbscissa [];
Protect [AiryAiInfimumOrSupremumOrdinate];


(* ::Subsection::Closed:: *)
(*AiryBi infimum or supremum*)


(* ::Subsubsection::Closed:: *)
(*AiryBiInfimumOrSupremumAbscissa*)


Unprotect [AiryBiInfimumOrSupremumAbscissa];
ClearAll [AiryBiInfimumOrSupremumAbscissa];

SetAttributes [AiryBiInfimumOrSupremumAbscissa, {NumericFunction, Listable}];

  (* General case: AiryBiPrimeZero is fast, so not worth rememberi: *)

AiryBiInfimumOrSupremumAbscissa [k_/; k <= 0 && WholeNumberQ [k]] :=
  AiryBiPrimeZero [k];

AiryBiInfimumOrSupremumAbscissa [
  one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := Infinity;

AiryBiInfimumOrSupremumAbscissa [-Infinity] := -Infinity;

AiryBiInfimumOrSupremumAbscissa [] := {-Infinity, 1};
Protect [AiryBiInfimumOrSupremumAbscissa];                                   


(* ::Subsubsection::Closed:: *)
(*AiryBiInfimumOrSupremumOrdinate*)


Unprotect [AiryBiInfimumOrSupremumOrdinate];
ClearAll [AiryBiInfimumOrSupremumOrdinate];

SetAttributes [AiryBiInfimumOrSupremumOrdinate, {NumericFunction, Listable}];

Options [AiryBiInfimumOrSupremumOrdinate] = {Direction -> 0};

N [AiryBiInfimumOrSupremumOrdinate [0, OptionsPattern[]],
   precision_Real | precision_Integer | precision_Rational] :=
  AiryBiInfimumOrSupremumOrdinate [SetAccuracy [0, precision]];

  (* General case: AiryBi is fast, so not worth remembering: *)

AiryBiInfimumOrSupremumOrdinate [k_Real /; k <= 0 && WholeNumberQ [k],
                                 OptionsPattern[]] :=
  Re [AiryBi [AiryBiInfimumOrSupremumAbscissa [k]]];

AiryBiInfimumOrSupremumOrdinate [
  one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy,
  OptionsPattern[]] := Infinity;

AiryBiInfimumOrSupremumOrdinate [-Infinity, OptionsPattern[]] := 0;

AiryBiInfimumOrSupremumOrdinate [OptionsPattern[]] := AiryBiInfimumOrSupremumAbscissa [];
Protect [AiryBiInfimumOrSupremumOrdinate];


(* ::Subsection::Closed:: *)
(*BarnesG infimum or supremum*)


(* ::Subsubsection::Closed:: *)
(*BarnesGInfimumOrSupremumAbscissa*)


Unprotect [BarnesGInfimumOrSupremumAbscissa];
ClearAll [BarnesGInfimumOrSupremumAbscissa];

SetAttributes [BarnesGInfimumOrSupremumAbscissa, {NumericFunction, Listable}];

(* k = 0.0, 1.0 and 2.0 are surely most common, so precompute them for Precision[k + 1] <= $Float32: *)

N [BarnesGInfimumOrSupremumAbscissa [0], precision_Real | precision_Integer | precision_Rational] :=
  BarnesGInfimumOrSupremumAbscissa [SetAccuracy [0, precision]];

BarnesGInfimumOrSupremumAbscissa [k_Real /; 0.0 <= k < 3.0 && WholeNumberQ [k]] :=
(*BarnesGInfimumOrSupremumAbscissa [k] =*)
  If [MachineNumberQ [k],
      Switch [Round[k],
        2,  2.5576639327890196`,
        1,  1.391470381041095`,
        _,  -0.366293400091744`],
      Module [{precision = Precision [k + 1],                               
               guess = Switch [Round [k],
                  2,  2.557663932789019434221440600499355020352290831999`32.,
                  1,  1.391470381041095173451048858474321500306735033977`32.,
                  _,  -0.366293400091743993673345151383791403180437258787`32.]},
        If [precision <= $Float32,
            N [guess, precision],
(*Print [{BarnesGInfimumOrSupremumAbscissa, precision, guess}];*) (* :This is an example of a useful development & debugging technique. *)
            Re [Quiet [FindRoot [BarnesG'[var],
                       {var, guess},  (* :Newton method *)
(*EvaluationMonitor :> ++$infSupCount,*)
                (* :For testing, uncomment the above line, then press the Run Package button, then do in a notebook, for example,
                    Block [{$infSupCount = 1, answer},
                           answer = Timing [BarnesGInfimumOrSupremumAbscissa [2`64]];
                           {$infSupCount, answer}]  *)
                        WorkingPrecision -> precision,
                        (* TO DO:  See if Brent or Secanct method is faster than Newton here too. *)
                        PrecisionGoal -> $InfSupPrecisionGoalFactor * precision,
                        AccuracyGoal -> {Infinity, 0.0}]][[1,2]]]]]];

(* Negative k is surely rare, so do not bother to remember them: *)

BarnesGInfimumOrSupremumAbscissa [k_/; k < 0 && WholeNumberQ[k] && Mod [Round[k], 3] === 2] :=
  k/k + 2 * Quotient[Round[k], 3];

  (* Consider omitting the inner Re[...], which requires going back to Newton: *)

BarnesGInfimumOrSupremumAbscissa [k_Real /; k < 0.0 && WholeNumberQ [k]] :=
(*BarnesGInfimumOrSupremumAbscissa [k] =*)
  Module [{integerK = Round [k],
           precision = Precision [k],
           guess},
    guess = 2 * Quotient [integerK, 3];
    guess = Switch [Mod [integerK, 3],
              0,  -0.5 + guess,
              1,  0.5 + guess,
              2,  Return [N [1 + guess, precision]]];
    Re [Quiet [FindRoot [Re [BarnesG'[var]],
                             (* Helpful undocumented form mentioned in M. Trott's book: *)
                             {var, guess - 0.32, guess + 0.32, guess - 0.49, guess + 0.49},
(*EvaluationMonitor :> ++$infSupCount,*)
                         Method -> "Brent",
                         WorkingPrecision -> precision,
                         PrecisionGoal -> $InfSupPrecisionGoalFactor * precision,
                         AccuracyGoal -> {Infinity, 0.0}]][[1,2]]]];

BarnesGInfimumOrSupremumAbscissa [
  three_/; three == 3 && Accuracy[three] > $MinWholeNumberAccuracy] := Infinity;

  (* Minimum and maximum supremum or infimum number: *)

BarnesGInfimumOrSupremumAbscissa [] := {-Infinity, 3};
Protect [BarnesGInfimumOrSupremumAbscissa];


(* ::Subsubsection::Closed:: *)
(*BarnesGInfimumOrSupremumOrdinate*)


Unprotect [BarnesGInfimumOrSupremumOrdinate];
ClearAll [BarnesGInfimumOrSupremumOrdinate];

SetAttributes [BarnesGInfimumOrSupremumOrdinate, {NumericFunction, Listable}];

Options [BarnesGInfimumOrSupremumOrdinate] = {Direction -> 0};

(* k = 0.0, 1.0 and 2.0 are surely most common, so precompute them for Precision[k + 1] < $Float32,
   and do not bother to remember the others: *)

N [BarnesGInfimumOrSupremumOrdinate [0, OptionsPattern[]],
   precision_Real | precision_Integer | precision_Rational] :=
  BarnesGInfimumOrSupremumOrdinate [SetAccuracy [0, precision]];

BarnesGInfimumOrSupremumOrdinate [
    k_/; WholeNumberQ[k] && k <= 2 && (Head[k] === Real || Mod [Round[k], 3] === 2),
    OptionsPattern[]] :=
(*BarnesGInfimumOrSupremumOrdinate [k] =*)
  If [MachineNumberQ [k],
      Switch [Round[k],
        2,  0.9468456052697061`,
        1,  1.0730517856831012`,
        0,  -0.19276497741595136`,
        _,  Re [BarnesG [BarnesGInfimumOrSupremumAbscissa [k]]]],
      With [{precision = Precision [-3 + k]},
        If [precision <= $Float32,
            Switch [Round[k],
              2,  N[0.946845605269706113873367884513341931639569356799`32., precision],
              1,  N[1.073051785683101156810950749279456728694724903096`32., precision],
              0,  N[-0.192764977415951348658316160855592167771990628187`32., precision],
              _,  Re [BarnesG [BarnesGInfimumOrSupremumAbscissa [k]]]],
            Re [BarnesG [BarnesGInfimumOrSupremumAbscissa [k]]]]]];

BarnesGInfimumOrSupremumOrdinate [
  three_/; three == 3 && Accuracy[three] > $MinWholeNumberAccuracy] := Infinity;

BarnesGInfimumOrSupremumOrdinate [OptionsPattern[]] := BarnesGInfimumOrSupremumAbscissa [];
Protect [BarnesGInfimumOrSupremumOrdinate];


(* ::Subsection::Closed:: *)
(*Bessel infimum or supremum*)


(* ::Subsubsection::Closed:: *)
(*BesselIInfimumOrSupremumAbscissa*)


Unprotect [BesselIInfimumOrSupremumAbscissa, $BesselIInfimumOrSupremumParameterRange];
ClearAll [BesselIInfimumOrSupremumAbscissa];

SetAttributes [BesselIInfimumOrSupremumAbscissa, {NumericFunction, Listable}];

$BesselIInfimumOrSupremumParameterRange = {-Infinity, Infinity}; (* All extended real numbers. *)

 (* Cases where +Infinity is the abscissa of an infimum or supremum: *)

BesselIInfimumOrSupremumAbscissa [
    r_/; WholeNumberQ[r] || r >= 0 || EvenQ[Floor[r]],
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := Infinity;

BesselIInfimumOrSupremumAbscissa [r_/; r < 0 &&
    Accuracy[r] > $MinWholeNumberAccuracy && r != Round[r] && OddQ[Floor[r]],
  two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] := Infinity;

  (* Cases where -Infinity is the abscissa of an infimum or supremum: *)

BesselIInfimumOrSupremumAbscissa [
    n_/; WholeNumberQ[n] && EvenQ [Round [n]],
    minus1_/; minus1 == -1 && Accuracy[minus1] > $MinWholeNumberAccuracy] := -Infinity;

BesselIInfimumOrSupremumAbscissa [
    n_/; WholeNumberQ[n] && OddQ [Round [n]],
    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] := -Infinity;

  (* Cases where abscissa == 0 is an infimum or supremum: *)

BesselIInfimumOrSupremumAbscissa [(r_Integer | r_Real | r_Rational),
   zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  If [$ExactInfSupWheneverPossibleQ,
      0,
     (r - r) + zero];

 (* Compute BesselIInfimumOrSupremumAbscissa [r, one] when it entails FindRoot.
     Surely negative r is rare, so do not bother to remember: *)

BesselIInfimumOrSupremumAbscissa [r_/; r < 0 &&
    Accuracy[r] > $MinWholeNumberAccuracy && r != Round[r] && OddQ[Floor[r]],
                                  one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    Head[one] === Real || Head[r] === Real :=
  Module [{precision = Precision[r - one],
           guess = Mean[{Floor[r], Ceiling[r]}]},
           guess = 0.3007493622879303`  - 0.6553404868954505`*guess
                    - 1.2*(0.5 - Sqrt[0.25 - (r - guess)^2]);
    Quiet [FindRoot [D[BesselI[r, var], var],  {var,  guess},  (* :Newton method *)
(*EvaluationMonitor :> ++$infSupCount,*)
                     WorkingPrecision -> precision,
                     PrecisionGoal -> $InfSupPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];  (* Minimum and maximum supremum or infimum number over all real parameters: *)

  (* Minimum and maximum branch number for a specific real parameter n: *)

BesselIInfimumOrSupremumAbscissa [n_? WholeNumberQ] := If [OddQ[Round[n]],
                                                           {0, 1},
                                                           {-1, 1}];

BesselIInfimumOrSupremumAbscissa [r_Real | r_Rational] :=
  If [r > 0 || OddQ[Floor[r]],
      {0, 1},
      {0, 2}];

BesselIInfimumOrSupremumAbscissa [] := {-1, 2};
Protect [BesselIInfimumOrSupremumAbscissa, $BesselIInfimumOrSupremumParameterRange];


(* ::Subsubsection::Closed:: *)
(*BesselIInfimumOrSupremumOrdinate*)


Unprotect [BesselIInfimumOrSupremumOrdinate];
ClearAll [BesselIInfimumOrSupremumOrdinate];

SetAttributes [BesselIInfimumOrSupremumOrdinate, {NumericFunction, Listable}];

Options [BesselIInfimumOrSupremumOrdinate] = {Direction -> 0};

  (* Non-negative and whole-number parameter r: *)

BesselIInfimumOrSupremumOrdinate [
  r_/; r >= 0 || WholeNumberQ[r],
  one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy,
  OptionsPattern[]] := Infinity;

BesselIInfimumOrSupremumOrdinate [
  n_/; WholeNumberQ[n] && OddQ[Round[n]],
  zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
  OptionsPattern[]] := -Infinity;

BesselIInfimumOrSupremumOrdinate [
    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
    cero_/; cero == 0 && Accuracy[cero] > $MinWholeNumberAccuracy,
    OptionsPattern[]] :=
  If [$ExactInfSupWheneverPossibleQ,
      1,
      zero + cero + 1];

BesselIInfimumOrSupremumOrdinate [
    n_/; WholeNumberQ[n] && EvenQ[Round[n]],
    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
    OptionsPattern[]] :=
  If [$ExactInfSupWheneverPossibleQ,
      0,
      n * zero];

BesselIInfimumOrSupremumOrdinate [
  n_/; WholeNumberQ[n] && EvenQ[Round[n]],
  minus1_/; minus1 == -1 && Accuracy[minus1] > $MinWholeNumberAccuracy,
  OptionsPattern[]] := Infinity;

  (* Negative fractional parameter r, which is surely rare, so do not bother to remember: *)

BesselIInfimumOrSupremumOrdinate [
  r_/; r < 0 && Accuracy[r] > $MinWholeNumberAccuracy && r != Round[r],
  one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy,
  OptionsPattern[]] := If [EvenQ [Floor[r]],
                           Infinity,
                           BesselI [r, BesselIInfimumOrSupremumAbscissa [r, one]]];

BesselIInfimumOrSupremumOrdinate [r_/; r < 0 && Accuracy[r] > $MinWholeNumberAccuracy &&
    r != Round[r] && OddQ[Floor[r]],
  two_/; two == 0 && Accuracy[two] > $MinWholeNumberAccuracy,
  OptionsPattern[]] := Infinity;

  (* Handle queries about the minimum and maximum infimum or supremum number: *)

BesselIInfimumOrSupremumOrdinate [OptionsPattern[]] := BesselIInfimumOrSupremumAbscissa [];

BesselIInfimumOrSupremumOrdinate [r_,  OptionsPattern[]] :=
  BesselIInfimumOrSupremumAbscissa [r];
Protect [BesselIInfimumOrSupremumOrdinate];


(* ::Subsection::Closed:: *)
(*BesselJ infimum or supremum*)


(* ::Subsubsection::Closed:: *)
(*BesselJInfimumOrSupremumAbscissa*)


(* We cannot protect BesselJInfimumOrSupremumAbscissa, because assignments remember numeric values. *)
ClearAll [BesselJInfimumOrSupremumAbscissa];

SetAttributes [BesselJInfimumOrSupremumAbscissa, {NumericFunction, Listable}];

Unprotect [$BesselJInfimumOrSupremumParameterRange];
$BesselJInfimumOrSupremumParameterRange = {-Infinity, Infinity};
Protect [$BesselJInfimumOrSupremumParameterRange];

  (* Exploit symmetry with respect to negative whole-number n: *)

BesselJInfimumOrSupremumAbscissa [n_/; n < 0 && WholeNumberQ [n],
                                  k_] := BesselJInfimumOrSupremumAbscissa [-n, k];

  (* Cases where x = 0 is an infimum or supremum: *)

BesselJInfimumOrSupremumAbscissa [r_/; EvenQ [Round[r]] || r != Round[r],
                                  zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  If [$ExactInfSupWheneverPossibleQ,
      0,
      (r - r) + zero];

  (* Exploit symmetries with respect to non-positive whole-number k: *)

BesselJInfimumOrSupremumAbscissa [n_/; WholeNumberQ[n] && EvenQ[Round[n]],
                                  k_/; k < 0 && WholeNumberQ [k]] :=
  -BesselJInfimumOrSupremumAbscissa [n, -k];

BesselJInfimumOrSupremumAbscissa [n_/; WholeNumberQ[n] && OddQ[Round[n]],
                                  k_/; k <= 0 && WholeNumberQ [k]] :=
  -BesselJInfimumOrSupremumAbscissa [n, 1 - k];

  (* Parameter 0 is a special case. Remember specific instances for speed: *)

BesselJInfimumOrSupremumAbscissa [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                                  k_/; k > 0 && WholeNumberQ [k]] :=
  BesselJZeroRemember [1 + zero, k];

  (* General case requiring FindRoot. For whole-number arguments, remember standardized
     specific instances for speed: *)

BesselJInfimumOrSupremumAbscissaAux [r_, standardizedPrecision_, guess_] :=
    (*Re [*)Quiet [FindRoot [D[BesselJ[r, var], var], {var, guess},  (* :Newton method *)
EvaluationMonitor :> ++$infSupCount,
                     WorkingPrecision -> standardizedPrecision,
                     PrecisionGoal -> $InfSupPrecisionGoalFactor * standardizedPrecision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1, 2]](*]*)(*)*);

BesselJInfimumOrSupremumAbscissa [r_/; r > 0 && Accuracy[r] > $MinWholeNumberAccuracy,
                                  k_/; k > 0 && WholeNumberQ[k]] /;
    Head[r] === Real || Head[k] === Real :=
  Module [{precision = Precision[{r, k}],
           standardizedPrecision, purifiedr, purifiedk, guess},
    guess = Which [(*r < 0,
                     guess = Ceiling[r] - r;
                     If [guess > 0.16,
                         BesselJZeroRemember[r, k + 1.0] - 1.5707963267948966`,
                         If [k == 1,
                             (guess * Exp[-3.641859919792357` - 2.5143989340206367`*r])^(-r^-1),
                             BesselJZeroRemember[r, k + 2] - 1.5707963267948966`]],*)
                   k != 1,    BesselJZeroRemember[N[r], N[k]] - 1.5707963267948966`,
                   r > 0.26,  BesselJZeroRemember[N[r], N[k]] - 1.9738560434071097`,
                   True,      1.4657488792213442`*Sqrt[r]];                       
    If [WholeNumberQ [r],
        standardizedPrecision = If [precision === MachinePrecision,
                                    MachinePrecision,
                                    16.0 * Ceiling [0.0625 * precision]];
        purifiedr = N [Round[r], standardizedPrecision];
        purifiedk = N [Round[k], standardizedPrecision];
        N [BesselJInfimumOrSupremumAbscissa [purifiedr, purifiedk] =
             BesselJInfimumOrSupremumAbscissaAux [purifiedr, standardizedPrecision, guess],
           precision],
    (* else: *)
        BesselJInfimumOrSupremumAbscissaAux [r, precision, guess]]];

  (* Minimum and maximum supremum or infimum number over all real parameters: *)

BesselJInfimumOrSupremumAbscissa [] := {-Infinity, Infinity};

  (* Minimum and maximum branch number for a specific real parameter: *)

BesselJInfimumOrSupremumAbscissa [_? WholeNumberQ] := {-Infinity, Infinity};

BesselJInfimumOrSupremumAbscissa [_Real | _Rational] := {0, Infinity};


(* ::Subsubsection::Closed:: *)
(*BesselJInfimumOrSupremumOrdinate*)


(* We cannot protect BesselJInfimumOrSupremumAbscissa, because assignments remember numeric values. *)
ClearAll [BesselJInfimumOrSupremumOrdinate];

SetAttributes [BesselJInfimumOrSupremumOrdinate, {NumericFunction, Listable}];

Options [BesselJInfimumOrSupremumOrdinate] = {Direction -> 0};

BesselJInfimumOrSupremumOrdinate [
    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
    cero_/; cero == 0 && Accuracy[cero] > $MinWholeNumberAccuracy,
    OptionsPattern[]] :=
  If [$ExactInfSupWheneverPossibleQ,
      1,
      (zero + cero) + 1];

  (* Exploit symmetries with respect to negative whole-number n: *)

BesselJInfimumOrSupremumOrdinate [n_/; n < 0 && WholeNumberQ [n],  k_,  OptionsPattern[]] :=
  If [EvenQ [Round [n]],
      BesselJInfimumOrSupremumOrdinate [-n, k],
      -BesselJInfimumOrSupremumOrdinate [-n, k]];

  (* Exploit symmetries with respect to non-positive whole-number k: *)

BesselJInfimumOrSupremumOrdinate [n_? WholeNumberQ ,
                                  k_/; k < 0 && WholeNumberQ [k],  OptionsPattern[]] :=
  If [EvenQ [Round [n]],
      BesselJInfimumOrSupremumOrdinate [n, -k],
     -BesselJInfimumOrSupremumOrdinate [n, 1 - k]];

  (* Avoid Indeterminate for BesselJInfimumOrSupremumOrdinate [r, 0] with non-whole r < 0: *)

BesselJInfimumOrSupremumOrdinate [r_/; r < 0 && ! WholeNumberQ[r],
                                  zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                                  OptionsPattern[]] :=
  If [EvenQ [Floor[r]],
      Infinity,
      -Infinity];

  (* Remember ?? *)
BesselJInfimumOrSupremumOrdinate [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                                  k_/; k > 0 && WholeNumberQ [k],  OptionsPattern[]] /;
    (Head[zero] === Real || Head[k] === Real) :=
  Module [{precision = Precision [zero + k],
           standardizedPrecision, purifiedZero, purifiedk},
     standardizedPrecision = If [precision === MachinePrecision,
                                 MachinePrecision,   
                                 16.0 * Ceiling [0.0625 * precision]];
     purifiedZero = If [standardizedPrecision === MachinePrecision,
                        0.0,
                        SetAccuracy [0, standardizedPrecision]];
     purifiedk = N [Round[k], standardizedPrecision];
     N [BesselJInfimumOrSupremumOrdinate [purifiedZero, purifiedk] =
          (*Re [*)BesselJ [purifiedZero, BesselJZeroRemember [1 + purifiedZero, purifiedk]](*]*),
        precision]];

  (* General case. Remember for whole-number r for speed: *)

BesselJInfimumOrSupremumOrdinate [r_Integer | r_Real | r_Rational,
                                  k_? WholeNumberQ,  OptionsPattern[]] /;
    (Head[r] === Real || Head[k] === Real) :=
  If [WholeNumberQ[r],
      Assert [r >= 0 && k >= 0];
      Module [{precision = Precision [{r, k}],
               standardizedPrecision, purifiedr, purifiedk},
        standardizedPrecision = If [precision === MachinePrecision,
                                    MachinePrecision,
                                    16.0 * Ceiling [0.0625 * precision]];
        purifiedr = N [Round[r], standardizedPrecision];
        purifiedk = N [Round[k], standardizedPrecision];
        N [BesselJInfimumOrSupremumOrdinate [purifiedr, purifiedk] =
             (*Re [*)BesselJ [purifiedr, BesselJInfimumOrSupremumAbscissa [purifiedr, purifiedk]](*]*),
           precision]],
      (*Re [*)BesselJ [r, BesselJInfimumOrSupremumAbscissa [r, k]]](*]*);

BesselJInfimumOrSupremumOrdinate [OptionsPattern[]] := BesselJInfimumOrSupremumAbscissa [];

BesselJInfimumOrSupremumOrdinate [r_,  OptionsPattern[]] := BesselJInfimumOrSupremumAbscissa [r];


(* ::Subsection::Closed:: *)
(*BesselY infimum or supremum*)


(* ::Subsubsection::Closed:: *)
(*BesselYInfimumOrSupremumAbscissa*)


(* We cannot protect BesselJInfimumOrSupremumAbscissa, because assignments remember numeric values. *)
ClearAll [BesselYInfimumOrSupremumAbscissa];

SetAttributes [BesselYInfimumOrSupremumAbscissa, {NumericFunction, Listable}];

Unprotect [$BesselYInfimumOrSupremumParameterRange];
$BesselYInfimumOrSupremumParameterRange = {-Infinity, Infinity};
Protect [$BesselYInfimumOrSupremumParameterRange];

  (* Exploit symmetry with respect to whole-number n: *)

BesselYInfimumOrSupremumAbscissa [n_/; n < 0 && WholeNumberQ [n],
                                  k_] := BesselYInfimumOrSupremumAbscissa [-n, k];

  (* Cases where x = 0 is an infimum or supremum: *)

BesselYInfimumOrSupremumAbscissa [r_Integer | r_Real | r_Rational,
     zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  If [$ExactInfSupWheneverPossibleQ,
      0,
      (r - r) + zero];

  (* Parameter 0 is a special case. Remember specific instances for speed: *)

BesselYInfimumOrSupremumAbscissa [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                                  k_/; k > 0 && Accuracy[k] > $MinWholeNumberAccuracy] /;
    Head [r] === Real || Head [zero] === Real :=
  BesselYZeroRemember [1, k + zero];

  (* General case. Remember specific cases for speed: *)

BesselYInfimumOrSupremumAbscissaAux [r_, standardizedPrecision_, guess_] :=
    Re [Quiet [FindRoot [D[BesselY[r, var], var], {var, guess},  (* Newton method *)
(*EvaluationMonitor :> ++$infSupCount,*)
                     WorkingPrecision -> standardizedPrecision,
                     PrecisionGoal -> $InfSupPrecisionGoalFactor * standardizedPrecision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1, 2]]](*)*);

BesselYInfimumOrSupremumAbscissa [r_/; WholeNumberQ [r] || r > 0 && Accuracy[r] > $MinWholeNumberAccuracy,
                                  k_/; k > 0 && WholeNumberQ [k]] /;
    Head[k] === Real || Head[r] === Real :=
  Module [{precision = Precision[Abs[r] + k],
             (* guess is about Pi/2 left of next zero: *)
           guess = -1.5707963267948966` + If [WholeNumberQ [r],
                                              BesselYZeroRemember,
                                              BesselYZero] [N[r], k + 1.0],
           standardizedPrecision, purifiedr, purifiedk},
    (*Assert [r != 0];*)
    If [WholeNumberQ [r],
        standardizedPrecision = If [precision === MachinePrecision,
                                    MachinePrecision,
                                    16.0 * Ceiling [0.0625 * precision]];
        purifiedr = N [Round[r], standardizedPrecision];
        purifiedk = N [Round[k], standardizedPrecision];
        N [BesselYInfimumOrSupremumAbscissa [purifiedr, purifiedk] =
             BesselYInfimumOrSupremumAbscissaAux [purifiedr, standardizedPrecision, guess],
           precision],
    (* else: *)
        BesselYInfimumOrSupremumAbscissaAux [r, precision, guess]]];

  (* Minimum and maximum supremum or infimum number over all real parameters: *)

BesselYInfimumOrSupremumAbscissa [] := {0, Infinity};

  (* Minimum and maximum branch number for a specific real parameter: *)

BesselYInfimumOrSupremumAbscissa [_Integer | _Real | _Rational] :=
  BesselYInfimumOrSupremumAbscissa [];


(* ::Subsubsection::Closed:: *)
(*BesselYInfimumOrSupremumOrdinate*)


(* We cannot protect BesselYInfimumOrSupremumOrdinate, because assignments remember numeric values. *)
ClearAll [BesselYInfimumOrSupremumOrdinate];

SetAttributes [BesselYInfimumOrSupremumOrdinate, {NumericFunction, Listable}];

Options [BesselYInfimumOrSupremumOrdinate] = {Direction -> 0};

BesselYInfimumOrSupremumOrdinate [r_Integer | r_Real | r_Rational,
    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
    OptionsPattern[]] := If [r >= 0 || EvenQ [Floor[r + 1/2]],
                             -Infinity,
                             Infinity];

  (* Exploit symmetries with respect to whole-number n: *)

BesselYInfimumOrSupremumOrdinate [n_/; n < 0 && WholeNumberQ [n],
                                  k_,  OptionsPattern[]] :=
  If [EvenQ [Round[n]],
      BesselYInfimumOrSupremumOrdinate [-n, k],
      -BesselYInfimumOrSupremumOrdinate [-n, k]];

  (* General case. Remember for whole-number r for speed: *)

BesselYInfimumOrSupremumOrdinate [
    r_Integer | r_Real | r_Rational,
    k_/; k > 0 && WholeNumberQ [k],
    OptionsPattern[]] /; Head[r] === Real || Head[k] === Real :=
  If [WholeNumberQ[r],
      Assert [r >= 0];
      Module [{precision = Precision [{r, k}],
               standardizedPrecision, purifiedr, purifiedk},
        standardizedPrecision = If [precision === MachinePrecision,
                                    MachinePrecision,
                                    16.0 * Ceiling [0.0625 * precision]];
        purifiedr = N [Round[r], If [standarPrecision === MachinePrecision || r != 0,
                                     standardizedPrecision,
                                     {0, standardizedPrecision}]];
        purifiedk = N [Round[k], standardizedPrecision];
        N [BesselYInfimumOrSupremumOrdinate [purifiedr, purifiedk] =
             Re [BesselY [purifiedr, BesselYInfimumOrSupremumAbscissa [purifiedr, purifiedk]]],
           precision]],
      Re [BesselY [r, BesselYInfimumOrSupremumAbscissa [r, k]]]];

BesselYInfimumOrSupremumOrdinate [OptionsPattern[]] := BesselYInfimumOrSupremumAbscissa [];

BesselYInfimumOrSupremumOrdinate [r_,  OptionsPattern[]] :=
  BesselYInfimumOrSupremumAbscissa [r];


(* ::Subsection::Closed:: *)
(*CosIntegral infimum or supremum*)


(* ::Subsubsection::Closed:: *)
(*CosIntegralInfimumOrSupremumAbscissa*)


Unprotect [CosIntegralInfimumOrSupremumAbscissa];
ClearAll [CosIntegralInfimumOrSupremumAbscissa];

SetAttributes [CosIntegralInfimumOrSupremumAbscissa, {NumericFunction, Listable}];

CosIntegralInfimumOrSupremumAbscissa [] := {0, Infinity};

CosIntegralInfimumOrSupremumAbscissa [k_/; k >= 0 && WholeNumberQ[k]] :=
  With [{kk = If [$ExactInfSupWheneverPossibleQ,
                  Round [k],
                  k]},
    If [kk == 0,
        kk,
        (2*kk - 1)/2 * Pi]];  (* : Not worth remembering *)
Protect [CosIntegralInfimumOrSupremumAbscissa];


(* ::Subsubsection::Closed:: *)
(*CosIntegralInfimumOrSupremumOrdinate*)


(* We cannot protect CosIntegralInfimumOrSupremumOrdinate, because assignments remember numeric values. *)
ClearAll [CosIntegralInfimumOrSupremumOrdinate];

SetAttributes [CosIntegralInfimumOrSupremumOrdinate, {NumericFunction, Listable}];

Options [CosIntegralInfimumOrSupremumOrdinate] = {Direction -> 0};

CosIntegralInfimumOrSupremumOrdinate [k_/; k >= 0 && WholeNumberQ[k],  OptionsPattern[]] :=
  Which [
    k == 0,
      -Infinity,
    Head[k] === Real,
      Module [{precision = Precision[k],
               integerk = Round[k],
               standardizedPrecision},
        standardizedPrecision = If [precision === MachinePrecision,
                                    MachinePrecision,
                                    16.0 * Ceiling [0.0625 * precision]];
        N [CosIntegralInfimumOrSupremumOrdinate [N [integerk, standardizedPrecision]] =
             N [CosIntegral [(2*integerk - 1)/2 * Pi], standardizedPrecision],  precision]],
    True,
      CosIntegral [(2*k - 1)/2 * Pi]];

CosIntegralInfimumOrSupremumOrdinate [OptionsPattern[]] := {0, Infinity};


(* ::Subsection::Closed:: *)
(*DawsonF infimum or supremum*)


(* ::Subsubsection::Closed:: *)
(*DawsonFInfimumOrSupremumAbscissa*)


Unprotect [DawsonFInfimumOrSupremumAbscissa];
ClearAll [DawsonFInfimumOrSupremumAbscissa];

SetAttributes [DawsonFInfimumOrSupremumAbscissa, {NumericFunction, Listable}];

DawsonFInfimumOrSupremumAbscissa [
    float1_Real /; float1 == 1.0 && Accuracy [float1] > $MinWholeNumberAccuracy] :=
  If [MachineNumberQ [float1],
      0.92413887300459177`,
      With [{accuracy = Accuracy [float1]},  (* == Precision [float1] *)
        If [accuracy <= $Float32,
            SetPrecision [0.924138873004591767012823271504345975696291559935`32., accuracy],
            Quiet [FindRoot [DawsonF'[var],
                             {var, 0.924138873004591767012823271504345975696291559935`32.},  (* :Newton method *)
(*EvaluationMonitor :> ++$infSupCount,*)
                             WorkingPrecision -> accuracy,
                             PrecisionGoal -> $InfSupPrecisionGoalFactor * accuracy,
                             AccuracyGoal -> {Infinity, 0.0}]][[1,2]]]]];

DawsonFInfimumOrSupremumAbscissa [two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] :=
  Infinity;

DawsonFInfimumOrSupremumAbscissa [k_ /; k <= 0 && Accuracy[k] > $MinWholeNumberAccuracy] :=
  -DawsonFInfimumOrSupremumAbscissa [1 - k];

DawsonFInfimumOrSupremumAbscissa [] := {-1, 2};
Protect [DawsonFInfimumOrSupremumAbscissa];


(* ::Subsubsection::Closed:: *)
(*DawsonFInfimumOrSupremumOrdinate*)


Unprotect [DawsonFInfimumOrSupremumOrdinate];
ClearAll [DawsonFInfimumOrSupremumOrdinate];

SetAttributes [DawsonFInfimumOrSupremumOrdinate, {NumericFunction, Listable}];

Options [DawsonFInfimumOrSupremumOrdinate] = {Direction -> 0};

DawsonFInfimumOrSupremumOrdinate [
    float1_Real/; float1 == 1 && Accuracy[float1] > $MinWholeNumberAccuracy,
    OptionsPattern[]] :=
  If [MachineNumberQ[float1],
      0.5410442246351816`,
      With [{accuracy = Accuracy[float1]},
        If [accuracy <= $Float32,
            SetPrecision [0.541044224635181698472759330241477186390604676827`32., accuracy],
            Re [DawsonF [DawsonFInfimumOrSupremumAbscissa [float1]]]]]];

DawsonFInfimumOrSupremumOrdinate [two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy,
                                  OptionsPattern[]] :=
  If [$ExactInfSupWheneverPossibleQ,
      0,
      two - two];

DawsonFInfimumOrSupremumOrdinate [
    minus1_/; minus1 == -1 && Accuracy[minus1] > $MinWholeNumberAccuracy,
    OptionsPattern[]] :=
  If [$ExactInfSupWheneverPossibleQ,
      0,
      minus1 - minus1];

DawsonFInfimumOrSupremumOrdinate [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                                  OptionsPattern[]] :=
  - DawsonFInfimumOrSupremumOrdinate [1 + zero];

DawsonFInfimumOrSupremumOrdinate [OptionsPattern[]] := DawsonFInfimumOrSupremumAbscissa [];
Protect [DawsonFInfimumOrSupremumOrdinate];


(* ::Subsection::Closed:: *)
(*DirichletBeta infimum or supremum*)


If [$VersionNumber < 10.0,
    DirichletBeta [s_] := 4^-s (Zeta[s, 1/4] - Zeta[s, 3/4])];


(* ::Subsubsection::Closed:: *)
(*DirichletBetaInfimumOrSupremumAbscissa*)


Unprotect [DirichletBetaInfimumOrSupremumAbscissa];
ClearAll [DirichletBetaInfimumOrSupremumAbscissa];

SetAttributes [DirichletBetaInfimumOrSupremumAbscissa, {NumericFunction, Listable}];

N [DirichletBetaInfimumOrSupremumAbscissa [0], precision_Real | precision_Integer | precision_Rational] :=
  DirichletBetaInfimumOrSupremumAbscissa [SetAccuracy [0, precision]];

  (* General case: Remember for speed: *)

DirichletBetaInfimumOrSupremumAbscissa [
    k_Real /; First[DirichletBetaInfimumOrSupremumAbscissa[]] <= k <= 0.0 && WholeNumberQ [k]] :=
(*DirichletBetaInfimumOrSupremumAbscissa [k] =*)
  Module [{guess, precision},
    If [k < -2,
        guess = 2 * k - 5/2,
        If [MachineNumberQ[k],
            Return [Switch [Round[k],
                      0,  -2.2261369513046967`,
                     -1,  -4.400228673181311`,
                      _,  -6.483872120501297`]],
            guess = Switch [Round [k],
                      0,  -2.226136951304696858456243445093634337150940106594`32.,
                     -1,  -4.400228673181310959497875314209290697605331223161`32.,
                      _,  -6.483872120501297176544942206773606629412082676278`32.];
            precision = Accuracy [k - 1];   (* :Avoid Accuracy[0.0] which is inappropriately small. *)
            If [precision <= $Float32,
                Return [N [guess, precision]]]]];
        Re [Quiet [FindRoot [DirichletBeta'[var], (* : Slow because DirichletBeta is slow & noisy. *)
                {var,  guess,  - 3.0 + 2.0 * k,  -1.0 + 2.0 * k},  (* :secant method *)
(*EvaluationMonitor :> ++$infSupCount,*)
                WorkingPrecision -> precision,
                PrecisionGoal -> $InfSupPrecisionGoalFactor * precision,
                AccuracyGoal -> {Infinity, 0.0}]][[1,2]]]];

DirichletBetaInfimumOrSupremumAbscissa [
  one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := Infinity;

(* Limit to k >= -2 because mysteriously difficult to compute by any variant of FindRoot or
     FindArgMax [Abs [...],...] for smaller k in Mathematica 10.0.2.0: *)
DirichletBetaInfimumOrSupremumAbscissa [] := {-2, 1};
Protect [DirichletBetaInfimumOrSupremumAbscissa];


(* ::Subsubsection::Closed:: *)
(*DirichletBetaInfimumOrSupremumOrdinate*)


Unprotect [DirichletBetaInfimumOrSupremumOrdinate];
ClearAll [DirichletBetaInfimumOrSupremumOrdinate];

SetAttributes [DirichletBetaInfimumOrSupremumOrdinate, {NumericFunction, Listable}];

Options [DirichletBetaInfimumOrSupremumOrdinate] = {Direction -> 0};

N [DirichletBetaInfimumOrSupremumOrdinate [0, OptionsPattern[]],
   precision_Real | precision_Integer | precision_Rational] :=
  DirichletBetaInfimumOrSupremumOrdinate [SetAccuracy [0, precision]];

DirichletBetaInfimumOrSupremumOrdinate [k_Real /; WholeNumberQ [k]
  && First[DirichletBetaInfimumOrSupremumAbscissa[]] <= k <= 0,
                                        OptionsPattern[]] :=
  Module [{precision},
    Which [MachineNumberQ [k],
             Switch [Round[k],
                       0,  -0.5301184975052127`,
                      -1,  3.1415530771948297`,
                      -2,  -44.757723797075826`],
           precision = Precision [k - 1];
           precision <= $Float32,
             N [Switch [Round[k],
                  0,  -0.53011849750521269711974558568803302658236572171`32.,
                 -1,  3.141553077194829594109413922087610417996796280815`32.,
                 -2,  -44.757723797075824940248276869736500894359498855158`32.],
                        precision],
           True,
             Re [DirichletBeta [DirichletBetaInfimumOrSupremumAbscissa [k]]]]];

DirichletBetaInfimumOrSupremumOrdinate [
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy,
    OptionsPattern[]] :=
  If [$ExactInfSupWheneverPossibleQ,
      1,
      one];

DirichletBetaInfimumOrSupremumOrdinate [OptionsPattern[]] :=
  DirichletBetaInfimumOrSupremumAbscissa [];
Protect [DirichletBetaInfimumOrSupremumOrdinate];


(* ::Subsection::Closed:: *)
(*DirichletEta infimum or supremum*)


If [$VersionNumber < 10.0,
    DirichletEta [z_] := (1-2^(1-z)) Zeta[z]];


(* ::Subsubsection::Closed:: *)
(*DirichletEtaInfimumOrSupremumAbscissa*)


(* We cannot protect DirichletEtaInfimumOrSupremumAbscissa, because assignments remember numeric values. *)
ClearAll [DirichletEtaInfimumOrSupremumAbscissa];

SetAttributes [DirichletEtaInfimumOrSupremumAbscissa, {NumericFunction, Listable}];

N [DirichletEtaInfimumOrSupremumAbscissa [0], precision_Real | precision_Integer | precision_Rational] :=
  DirichletEtaInfimumOrSupremumAbscissa [SetAccuracy [0, precision]];

DirichletEtaInfimumOrSupremumAbscissa [
    zero_Real/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  If [MachineNumberQ [zero],
      -3.0433277142827566`,
      With [{accuracy = Accuracy [zero],
             guess = -3.043327714282756703766618542732699710015965072491`32.},
        If [accuracy <= $Float32,
            N [guess, accuracy],
            Quiet [FindRoot [DirichletEta'[var],
                     {var,  guess,  guess - 0.9999999999999999999999999999,
                                     guess + 0.0000000000000000000000000001}, (* :secant method *)
(*EvaluationMonitor :> ++$infSupCount,*)
                     (*Method -> "Brent",*)
                     WorkingPrecision -> accuracy,
                     PrecisionGoal -> $InfSupPrecisionGoalFactor * accuracy,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]]]];        

  (* General case: Remember for speed: *)

DirichletEtaInfimumOrSupremumAbscissa [k_Real /;
    First[DirichletEtaInfimumOrSupremumAbscissa[]] <= k < 0.0 && WholeNumberQ [k]] :=
  Module [{precision = Precision[k],
           standardizedPrecision, guess},
        standardizedPrecision = If [precision === MachinePrecision,
                                    MachinePrecision,
                                    16.0 * Ceiling [0.0625 * precision]];
    N [DirichletEtaInfimumOrSupremumAbscissa [N [Round[k], standardizedPrecision]] =
        guess = -3.134702276321654` + 2.072139938029378`* k;
        Quiet [FindRoot [DirichletEta'[var],
                     {var,  guess - 0.1,  guess + 0.1,  - 4.0 + 2.0 * k,  -2.0 + 2.0 * k},
EvaluationMonitor :> ++$infSupCount,
                     Method -> "Brent",
                     WorkingPrecision -> standardizedPrecision,
                     PrecisionGoal -> $InfSupPrecisionGoalFactor * standardizedPrecision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]],
        precision]];

DirichletEtaInfimumOrSupremumAbscissa [
  one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := Infinity;

(* Limit to k >= -6 because mysteriously difficult to compute by any variant of FindRoot or
     FindArgMax [Abs [...],...] for smaller k in Mathematica 10.0.2.0: *)

DirichletEtaInfimumOrSupremumAbscissa [] := {-6, 1};


(* ::Subsubsection::Closed:: *)
(*DirichletEtaInfimumOrSupremumOrdinate*)


Unprotect [DirichletEtaInfimumOrSupremumOrdinate];
ClearAll [DirichletEtaInfimumOrSupremumOrdinate];

SetAttributes [DirichletEtaInfimumOrSupremumOrdinate, {NumericFunction, Listable}];

(* TO DO:  Memorize: *)

Options [DirichletEtaInfimumOrSupremumOrdinate] = {Direction -> 0};

N [DirichletEtaInfimumOrSupremumOrdinate [0, OptionsPattern[]],
   precision_Real | precision_Integer | precision_Rational] :=
  DirichletEtaInfimumOrSupremumOrdinate [SetAccuracy [0, precision]];

DirichletEtaInfimumOrSupremumOrdinate [k_Real /; WholeNumberQ [k]
    && First [DirichletEtaInfimumOrSupremumOrdinate[]] <= k < 1.0,
                                       OptionsPattern[]] :=
  Module [{precision = Precision [k - 1],
           purifiedk, standardizedPrecision, ordinate},
    If [k == 0,
        Which [MachineNumberQ [k],
                 Return [-0.12525492960310586`],
               precision <= $Float32,
                 Return [N [-0.125254929603105867973690486093575190346216791897`32., precision]]]];
    standardizedPrecision = If [MachineNumberQ [k],
                                precision,
                                16.0 * Ceiling [0.0625 * precision]];
    purifiedk = N [Round[k], If [MachineNumberQ[k] || k != 0.0,
                                 standardizedPrecision,
                                 {0, standardizedPrecision}]];
    ordinate = Re [DirichletEta [DirichletEtaInfimumOrSupremumAbscissa [purifiedk]]];
    (*DirichletEtaInfimumOrSupremumOrdinate [purifiedk] = ordinate;*)  (* :For some reason this fails! *)
    SetPrecision [ordinate, precision]];

DirichletEtaInfimumOrSupremumOrdinate [
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy,
    OptionsPattern[]] :=
  If [$ExactInfSupWheneverPossibleQ,
      1,
      one];

DirichletEtaInfimumOrSupremumOrdinate [OptionsPattern[]] := {-1, 1};  (* :Restricted until fix mystery in InfimaAndSupremaTest.nb *)
Protect [DirichletEtaInfimumOrSupremumOrdinate];


(* ::Subsection::Closed:: *)
(*DirichletLambda infimum or supremum*)


If [$VersionNumber < 10.0,
    DirichletLambda [s_] := (1 - 2^-s) Zeta[s]];


(* ::Subsubsection::Closed:: *)
(*DirichletLambdaInfimumOrSupremumAbscissa*)


Unprotect [DirichletLambdaInfimumOrSupremumAbscissa];
ClearAll [DirichletLambdaInfimumOrSupremumAbscissa];

SetAttributes [DirichletLambdaInfimumOrSupremumAbscissa, {NumericFunction, Listable}];

N [DirichletLambdaInfimumOrSupremumAbscissa [0], precision_Real | precision_Integer | precision_Rational] :=
  DirichletLambdaInfimumOrSupremumAbscissa [SetAccuracy [0, precision]];

  (* General: *)

DirichletLambdaInfimumOrSupremumAbscissaAux [standardizedPrecision_, guess1_, guess2_] :=
  Quiet [FindRoot [DirichletLambda'[var],  {var,  guess1,  guess2},
(*EvaluationMonitor :> ++$infSupCount,*)
                   Method -> "Brent",
                   WorkingPrecision -> standardizedPrecision,
                   PrecisionGoal -> $InfSupPrecisionGoalFactor * standardizedPrecision,
                   AccuracyGoal -> {Infinity, 0.0}]][[1,2]];  

DirichletLambdaInfimumOrSupremumAbscissa [k_Real /;
    First[DirichletLambdaInfimumOrSupremumAbscissa[]] <= k <= 0.0 && WholeNumberQ[k]] :=
  Block [{precision = Precision [k - 1],
          $MaxExtraPrecision = 0.0,  (* Prevent Mathematica from time-consuming low-benefit extra precision *)
          standardizedPrecision, abscissa},
    standardizedPrecision = If [precision === MachinePrecision,
                                MachinePrecision,
                                16.0 * Ceiling [0.0625 * precision]];
    abscissa = If [k == 0.0,
                   If [MachineNumberQ [k],
                       -0.7052642558113678`,
                       If [precision <= $Float32,
                           -0.70526425581136780143240848376605664419392313736`32.,
                           DirichletLambdaInfimumOrSupremumAbscissaAux [standardizedPrecision,
                             -0.70526425581136780143240848376`32.,
                             -0.70526425581136780143240848377`32.]]],
                   DirichletLambdaInfimumOrSupremumAbscissaAux [standardizedPrecision,
                                                                -1.99 + 2.0*k, 2.0*k - 0.01]];
    N [DirichletLambdaInfimumOrSupremumAbscissa [N [Round[k],
         If [precision === MachineNumberQ [k] || k != 0.0,
             standardizedPrecision,
             {0, standardizedPrecision}]]] = abscissa,        
       precision]];

DirichletLambdaInfimumOrSupremumAbscissa [
  two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] := Infinity;

DirichletLambdaInfimumOrSupremumAbscissa [
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  If [$ExactInfSupWheneverPossibleQ,
      1,
      one];

(* Limit to k >= -6 because mysteriously difficult to compute by any variant of FindRoot or
     FindArgMax [Abs [...],...] for smaller k in Mathematica 10.0.2.0: *)

DirichletLambdaInfimumOrSupremumAbscissa [] := {-6, 2};
Protect [DirichletLambdaInfimumOrSupremumAbscissa];


(* ::Subsubsection::Closed:: *)
(*DirichletLambdaInfimumOrSupremumOrdinate*)


ClearAll [DirichletLambdaInfimumOrSupremumOrdinate];

SetAttributes [DirichletLambdaInfimumOrSupremumOrdinate, {NumericFunction, Listable}];

Options [DirichletLambdaInfimumOrSupremumOrdinate] = {Direction -> 0};

N [DirichletLambdaInfimumOrSupremumOrdinate [0, OptionsPattern[]],
   precision_Real | precision_Integer | precision_Rational] :=
  DirichletLambdaInfimumOrSupremumOrdinate [SetAccuracy [0, precision]];

DirichletLambdaInfimumOrSupremumOrdinate [k_Real /; WholeNumberQ [k]
      && First [DirichletLambdaInfimumOrSupremumAbscissa []] <= k <= 0.0,
    OptionsPattern[]] :=
  Module [{precision, standardizedPrecision, abscissa},
    If [k == 0,
        Which [MachineNumberQ [k],
                 Return [0.0913288538460035`],
               precision = Precision[k - 1];
               precision <= $Float32,
                 Return [N [0.091328853846003506288246390957849575884603182219`32., precision]]],
        precision = Precision[k]];
    abscissa = DirichletLambdaInfimumOrSupremumAbscissa [k];
    standardizedPrecision = If [precision === MachinePrecision,
                                MachinePrecision,
                                16.0 * Ceiling [0.0625 * precision]];
    N [DirichletLambdaInfimumOrSupremumOrdinate [N [Round[k],
                                                 If [k == 0,
                                                     {0, standardizedPrecision},
                                                     standardizedPrecision]]] =
         Re [DirichletLambda [abscissa]],
       precision]];

DirichletLambdaInfimumOrSupremumOrdinate [
    two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy,  OptionsPattern[]] :=
  If [$ExactInfSupWheneverPossibleQ,
      1,
      two/two];

DirichletLambdaInfimumOrSupremumOrdinate [
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy,
    OptionsPattern[]] :=
  Switch [Quiet[OptionValue [Direction]],
    1,  -Infinity,
    -1,  Infinity,
    _,   ComplexInfinity];

DirichletLambdaInfimumOrSupremumOrdinate [OptionsPattern[]] :=
  DirichletLambdaInfimumOrSupremumAbscissa [];


(* ::Subsection::Closed:: *)
(*Factorial2 infimum or supremum*)


(* ::Subsubsection::Closed:: *)
(*Factorial2InfimumOrSupremumAbscissa*)


Unprotect [Factorial2InfimumOrSupremumAbscissa];
ClearAll [Factorial2InfimumOrSupremumAbscissa];

SetAttributes [Factorial2InfimumOrSupremumAbscissa, {NumericFunction, Listable}];

N [Factorial2InfimumOrSupremumAbscissa [0], precision_Real | precision_Integer | precision_Rational] :=
  Factorial2InfimumOrSupremumAbscissa [SetAccuracy [0, precision]];

Factorial2InfimumOrSupremumAbscissa [k_Real /; k < 0 && WholeNumberQ[k] && OddQ[Round[k]]] :=
  If [$ExactInfSupWheneverPossibleQ,
      Round[k],
      k] - 1;

  (* Nontrivial cases: Remember for speed: *)

Factorial2InfimumOrSupremumAbscissa [k_Real /; k <= 2.0 && WholeNumberQ [k]] :=
  Module [{precision, guess},
    If [k < 0,
        precision = Precision [k];
        guess = -1.99 + k,  (* :approximately the midpoint between two adjacent poles *)
        If [MachineNumberQ [k],
            Return [Switch [Round[k],
              2,  0.6970947388117147`,
              1,  0.08251110424512602`,
              _,  -0.662568899418796`]],
            guess = Switch [Round [k],
                      2,  precision = Precision[k];
                          0.697094738811714669349645840926219836265384446682`32.,
                      1,  precision = Precision[k];
                          0.08251110424512601833912826994668031143347686117`32.,
                      _,  precision = Accuracy [k];
                          -0.662568899418795987942812739291004224884087101056`32.];
            If [precision <= $Float32,
                Return [N [guess, precision]]]]];
    Quiet [FindRoot [Factorial2'[var],
                     If [k < 0,
                         {var,  guess,  -0.01 + k},
                         {var,  1.000000000001*guess,  0.999999999999*guess}],
(*EvaluationMonitor :> ++$infSupCount,*)
                     Method->"Brent",
                     WorkingPrecision -> precision,
                     PrecisionGoal -> $InfSupPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

Factorial2InfimumOrSupremumAbscissa [
  three_/; three == 3 && Accuracy[three] > $MinWholeNumberAccuracy] := Infinity;

Factorial2InfimumOrSupremumAbscissa [] := {-Infinity, 3};
Protect [Factorial2InfimumOrSupremumAbscissa];


(* ::Subsubsection::Closed:: *)
(*Factorial2InfimumOrSupremumOrdinate*)


Unprotect [Factorial2InfimumOrSupremumOrdinate];
ClearAll [Factorial2InfimumOrSupremumOrdinate];

SetAttributes [Factorial2InfimumOrSupremumOrdinate, {NumericFunction, Listable}];

Options [Factorial2InfimumOrSupremumOrdinate] = {Direction -> 0};

N [Factorial2InfimumOrSupremumOrdinate [0], precision_Real | precision_Integer | precision_Rational] :=
  Factorial2InfimumOrSupremumOrdinate [SetAccuracy [0, precision]];

Factorial2InfimumOrSupremumOrdinate [k_Real /; k < 0 && WholeNumberQ[k] && OddQ[Round[k]],
                                     OptionsPattern[]] :=
  Switch [Quiet [OptionValue [Direction]],
    -1,  If [OddQ [Round[(k+1)/2]],
                   -Infinity,
                   Infinity],
    1,  If [OddQ [Round[(k+1)/2]],
                   Infinity,
                   -Infinity],
    _,  ComplexInfinity];

Factorial2InfimumOrSupremumOrdinate [k_Real /; WholeNumberQ [k]
    && First [Factorial2InfimumOrSupremumAbscissa []] <= k <
       Last [Factorial2InfimumOrSupremumAbscissa []],  OptionsPattern[]] :=
(*Factorial2InfimumOrSupremumOrdinate [k] =*)
  If [k >= 0,
      If [MachineNumberQ[k],
          Switch [Round[k],
            2,  0.949426318103377`,
            1,  1.0023864286013853`,
            _,  0.9073261357664262`],
          With [{precision = Precision [k - 3]},
            If [precision <= $Float32,
                N [Switch [Round[k],
                     2,  0.949426318103376962326599295073211792241806151238`32.,
                     1,  1.002386428601385242224676300378472968921290688774`32.,
                     _,  0.907326135766426128527999586900185224950850998452`32.], precision],
                Re [Factorial2 [Factorial2InfimumOrSupremumAbscissa [k]]]]]],
       Re [Factorial2 [Factorial2InfimumOrSupremumAbscissa [k]]]];

Factorial2InfimumOrSupremumOrdinate [
    three_/; three == 3 && Accuracy[three] > $MinWholeNumberAccuracy,  OptionsPattern[]] :=
  Infinity;

Factorial2InfimumOrSupremumOrdinate [OptionsPattern[]] :=
  Factorial2InfimumOrSupremumAbscissa [];
Protect [Factorial2InfimumOrSupremumOrdinate];


(* ::Subsection::Closed:: *)
(*FresnelC infimum or supremum*)


(* ::Subsubsection::Closed:: *)
(*FresnelCInfimumOrSupremumAbscissa*)


Unprotect [FresnelCInfimumOrSupremumAbscissa];
ClearAll [FresnelCInfimumOrSupremumAbscissa];

SetAttributes [FresnelCInfimumOrSupremumAbscissa, {NumericFunction, Listable}];

FresnelCInfimumOrSupremumAbscissa [k_/; k <= 0 && WholeNumberQ[k]] :=
  -FresnelCInfimumOrSupremumAbscissa [1 - k];

FresnelCInfimumOrSupremumAbscissa [k_/; k > 0 && WholeNumberQ[k]] :=
  Sqrt [2*If [$ExactInfSupWheneverPossibleQ,
              Round[k],
              k] - 1];

FresnelCInfimumOrSupremumAbscissa [] := {-Infinity, Infinity};
Protect [FresnelCInfimumOrSupremumAbscissa];


(* ::Subsubsection::Closed:: *)
(*FresnelCInfimumOrSupremumOrdinate*)


ClearAll [FresnelCInfimumOrSupremumOrdinate];

SetAttributes [FresnelCInfimumOrSupremumOrdinate, {NumericFunction, Listable}];

Options [FresnelCInfimumOrSupremumOrdinate] = {Direction -> 0};

FresnelCInfimumOrSupremumOrdinate [k_/; k <= 0,  OptionsPattern[]] :=
  -FresnelCInfimumOrSupremumOrdinate [1 - k];

FresnelCInfimumOrSupremumOrdinate [k_? WholeNumberQ,  OptionsPattern[]] :=
  If [Head[k] === Real,
      Module [{precision = Precision[k],
               integerk = Round[k],
               standardizedPrecision},
        Assert [k > 0];
        standardizedPrecision = If [precision === MachinePrecision,
                                    MachinePrecision,
                                    16.0 * Ceiling [0.0625 * precision]];
        N [FresnelCInfimumOrSupremumOrdinate [N [integerk, standardizedPrecision]] =
             N [FresnelC [FresnelCInfimumOrSupremumAbscissa [integerk]], standardizedPrecision],
                precision]],
      FresnelC [FresnelCInfimumOrSupremumAbscissa [k]]];

FresnelCInfimumOrSupremumOrdinate [OptionsPattern[]] := FresnelCInfimumOrSupremumAbscissa [];


(* ::Subsection::Closed:: *)
(*FresnelS infimum or supremum*)


(* ::Subsubsection::Closed:: *)
(*FresnelSInfimumOrSupremumAbscissa*)


Unprotect [FresnelSInfimumOrSupremumAbscissa];
ClearAll [FresnelSInfimumOrSupremumAbscissa];

SetAttributes [FresnelSInfimumOrSupremumAbscissa, {NumericFunction, Listable}];

FresnelSInfimumOrSupremumAbscissa [] := {-Infinity, Infinity};

FresnelSInfimumOrSupremumAbscissa [k_/; k <= 0 && WholeNumberQ[k]] :=
  -FresnelSInfimumOrSupremumAbscissa [1 - k];

FresnelSInfimumOrSupremumAbscissa [k_/; k > 0 && WholeNumberQ[k]] :=
  Sqrt [2*If [$ExactInfSupWheneverPossibleQ,  Round[k],  k]];
Protect [FresnelSInfimumOrSupremumAbscissa];


(* ::Subsubsection::Closed:: *)
(*FresnelSInfimumOrSupremumOrdinate*)


ClearAll [FresnelSInfimumOrSupremumOrdinate];

SetAttributes [FresnelSInfimumOrSupremumOrdinate, {NumericFunction, Listable}];

Options [FresnelSInfimumOrSupremumOrdinate] = {Direction -> 0};

FresnelSInfimumOrSupremumOrdinate [k_/; k <= 0,  OptionsPattern[]] :=
  -FresnelSInfimumOrSupremumOrdinate [1 - k];

FresnelSInfimumOrSupremumOrdinate [k_? WholeNumberQ,  OptionsPattern[]] :=
  If [Head[k] === Real,
      Module [{precision = Precision[k],
               integerk = Round[k],
               standardizedPrecision},
        Assert [k > 0];
        standardizedPrecision = If [precision === MachinePrecision,
                                    MachinePrecision,
                                    16.0 * Ceiling [0.0625 * precision]];
        N [FresnelSInfimumOrSupremumOrdinate [N [integerk, standardizedPrecision]] =
             N [FresnelS [FresnelSInfimumOrSupremumAbscissa [integerk]], standardizedPrecision],
                precision]],
      FresnelS [FresnelSInfimumOrSupremumAbscissa [k]]];

FresnelSInfimumOrSupremumOrdinate [OptionsPattern[]] := FresnelSInfimumOrSupremumAbscissa [];


(* ::Subsection::Closed:: *)
(*Gamma infimum or supremum*)


(* ::Subsubsection::Closed:: *)
(*GammaInfimumOrSupremumAbscissa*)


Unprotect [GammaInfimumOrSupremumAbscissa];
ClearAll [GammaInfimumOrSupremumAbscissa];

SetAttributes [GammaInfimumOrSupremumAbscissa, {NumericFunction, Listable}];

GammaInfimumOrSupremumAbscissa [k_/; k <= 0 && WholeNumberQ[k] && EvenQ [Round[k]]] :=
  With [{q = Quotient [Round[k], 2]},
    If [$ExactInfSupWheneverPossibleQ,
        q,
        (k - k) + q]];

  (* Nontrivial cases: *)

GammaInfimumOrSupremumAbscissa [k_/; k <= 1 && WholeNumberQ[k]] :=
  PolyGammaZero [0, (k + 1)/2];

GammaInfimumOrSupremumAbscissa [two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] :=
  Infinity;

GammaInfimumOrSupremumAbscissa [] := {-Infinity, 2};
Protect [GammaInfimumOrSupremumAbscissa];


(* ::Subsubsection::Closed:: *)
(*GammaInfimumOrSupremumOrdinate*)


Unprotect [GammaInfimumOrSupremumOrdinate];
ClearAll [GammaInfimumOrSupremumOrdinate];

SetAttributes [GammaInfimumOrSupremumOrdinate, {NumericFunction, Listable}];

Options [GammaInfimumOrSupremumOrdinate] = {Direction -> 0};

GammaInfimumOrSupremumOrdinate [k_Real /; k <= 0 && WholeNumberQ[k] && EvenQ[Round[k]],
                                OptionsPattern[]] :=
  Switch [Quiet [OptionValue [Direction]],
    -1,  If [OddQ [Round[(k)/2]],
                   -Infinity,
                   Infinity],
    1,  If [OddQ [Round[k/2]],
                   Infinity,
                   -Infinity],
    _,  ComplexInfinity];

GammaInfimumOrSupremumOrdinate [k_Real /; WholeNumberQ [k]
  && First [GammaInfimumOrSupremumAbscissa []] <= k <
     Last [GammaInfimumOrSupremumAbscissa []],  OptionsPattern[]] :=
  If [k == 1.0,
      If [MachineNumberQ [k],
          0.8856031944108887`,
          With [{precision = Accuracy[k]},
            If [precision <= $Float32,
                N [0.88560319441088870027881590058258873320795153367`32., precision],
                Re [Gamma [GammaInfimumOrSupremumAbscissa [k]]]]]],
      Re [Gamma [GammaInfimumOrSupremumAbscissa [k]]]];

GammaInfimumOrSupremumOrdinate [
    two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy,  OptionsPattern[]] :=
  Infinity;

GammaInfimumOrSupremumOrdinate [OptionsPattern[]] := GammaInfimumOrSupremumAbscissa [];
Protect [GammaInfimumOrSupremumOrdinate];


(* ::Subsection::Closed:: *)
(*Hyperfactorial infimum or supremum*)


(* ::Subsubsection::Closed:: *)
(*HyperfactorialInfimumOrSupremumAbscissa*)


Unprotect [HyperfactorialInfimumOrSupremumAbscissa];
ClearAll [HyperfactorialInfimumOrSupremumAbscissa];

SetAttributes [HyperfactorialInfimumOrSupremumAbscissa, {NumericFunction, Listable}];

N [HyperfactorialInfimumOrSupremumAbscissa [0], precision_Real | precision_Integer | precision_Rational] :=
  HyperfactorialInfimumOrSupremumAbscissa [SetAccuracy [0, precision]];

HyperfactorialInfimumOrSupremumAbscissa [float0or1_Real /; (float0or1 == 0.0 || float0or1 == 1.0)
     && Accuracy[float0or1] > $MinWholeNumberAccuracy] :=
  With [{accuracy = Accuracy[float0or1]},
    Which [
      MachineNumberQ [float0or1],
        If [float0or1 == 0.0,
            -0.70904301330081920`,
            0.53768886373648651`],
      accuracy <= $Float32,
        N [If [float0or1 == 0.0,
               -0.709043013300819204078200533013208041411663089289`32.,
               0.537688863736486510690713291271131371822514173326`32.],  accuracy],
      True,
        With [{precision = Accuracy[1 + float0or1]},
          Quiet [FindRoot [2*(var + LogGamma[1 + var]) == Log[2*\[Pi]] - 1,
                  {var, N [If [float0or1 == 0.0,
                                -0.709043013300819204078200533013208041411663089289`32.,
                                0.537688863736486510690713291271131371822514173326`32.]]},
(*EvaluationMonitor :> ++$infSupCount,*)
                   WorkingPrecision -> precision,
                   PrecisionGoal -> $InfSupPrecisionGoalFactor * precision,
                   AccuracyGoal -> {Infinity, 0.0}]][[1,2]]]]];

HyperfactorialInfimumOrSupremumAbscissa [
    minus1_/; minus1 == -1 && Accuracy[minus1] > $MinWholeNumberAccuracy] :=
   If [$ExactInfSupWheneverPossibleQ,
       -1,
       minus1];

HyperfactorialInfimumOrSupremumAbscissa [
  two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] := Infinity;

HyperfactorialInfimumOrSupremumAbscissa [] := {-1, 2};
Protect [HyperfactorialInfimumOrSupremumAbscissa];


(* ::Subsubsection::Closed:: *)
(*HyperfactorialInfimumOrSupremumOrdinate*)


Unprotect [HyperfactorialInfimumOrSupremumOrdinate];
ClearAll [HyperfactorialInfimumOrSupremumOrdinate];

SetAttributes [HyperfactorialInfimumOrSupremumOrdinate, {NumericFunction, Listable}];

Options [HyperfactorialInfimumOrSupremumOrdinate] = {Direction -> 0};

N [HyperfactorialInfimumOrSupremumOrdinate [0, OptionsPattern[]],
   precision_Real | precision_Integer | precision_Rational] :=
  HyperfactorialInfimumOrSupremumOrdinate [SetAccuracy [0, precision]];

HyperfactorialInfimumOrSupremumOrdinate [float0or1_Real /; (float0or1 == 0.0 || float0or1 == 1.0)
     && ($accuracy = Accuracy[float0or1]) > $MinWholeNumberAccuracy,  OptionsPattern[]] :=
  Which [MachineNumberQ [float0or1],
           If [float0or1 == 0.0,
               1.2986723069317708`,
               0.87978684305939942`],
         $accuracy <= $Float32,
           N [If [float0or1 == 0.0,
                  1.298672306931770843376150521382188742189864417393`32.,
                  0.879786843059399416788144230697371901661792584183`32.],  $accuracy],
         True,
           Re [Hyperfactorial [HyperfactorialInfimumOrSupremumAbscissa [float0or1]]]];

HyperfactorialInfimumOrSupremumOrdinate [
  two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy,
  OptionsPattern[]] := Infinity;

HyperfactorialInfimumOrSupremumOrdinate [
    minus1_/; minus1 == -1 && Accuracy[minus1] > $MinWholeNumberAccuracy,
    OptionsPattern[]] :=
  If [$ExactInfSupWheneverPossibleQ,
      1,
      -minus1];

HyperfactorialInfimumOrSupremumOrdinate [OptionsPattern[]] :=
  HyperfactorialInfimumOrSupremumAbscissa [];
Protect [HyperfactorialInfimumOrSupremumOrdinate];


(* ::Subsection::Closed:: *)
(*LogBarnesG infimum or supremum*)


(* ::Subsubsection::Closed:: *)
(*LogBarnesGInfimumOrSupremumAbscissa*)


Unprotect [LogBarnesGInfimumOrSupremumAbscissa];
ClearAll [LogBarnesGInfimumOrSupremumAbscissa];

SetAttributes [LogBarnesGInfimumOrSupremumAbscissa, {NumericFunction, Listable}];

LogBarnesGInfimumOrSupremumAbscissa [k_/; 1 <= k <= 3 && WholeNumberQ[k]] :=
  BarnesGInfimumOrSupremumAbscissa [k];

LogBarnesGInfimumOrSupremumAbscissa [
    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  If [$ExactInfSupWheneverPossibleQ,
      0,
      zero];

  (* Minimum and maximum supremum or infimum number: *)

LogBarnesGInfimumOrSupremumAbscissa [] := {0, 3};
Protect [LogBarnesGInfimumOrSupremumAbscissa];


(* ::Subsubsection::Closed:: *)
(*LogBarnesGInfimumOrSupremumOrdinate*)


Unprotect [LogBarnesGInfimumOrSupremumOrdinate];
ClearAll [LogBarnesGInfimumOrSupremumOrdinate];

SetAttributes [LogBarnesGInfimumOrSupremumOrdinate, {NumericFunction, Listable}];

Options [LogBarnesGInfimumOrSupremumOrdinate] = {Direction -> 0};

LogBarnesGInfimumOrSupremumOrdinate [
    k_Real/; (k == 1 || k == 2) && Accuracy[k] > $MinWholeNumberAccuracy,
    OptionsPattern[]] :=
  If [MachineNumberQ[k],
      If [k == 1.0,
          0.0705067250031631`,
          -0.054619234705860456`],
      With [{precision = Precision[k]},
        If [precision <= $Float32,
            N [If [k == 1.0,
                   0.070506725003163097516745798571230982594108891899`32.,
                   -0.054619234705860456312903199884773655507739744945`32.],  precision],
            Re [LogBarnesG [BarnesGInfimumOrSupremumAbscissa [k]]]]]]; (* :Re discards spurious 0.0*I and epsilon*I. *)

LogBarnesGInfimumOrSupremumOrdinate [
  zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
  OptionsPattern[]] := -Infinity;

LogBarnesGInfimumOrSupremumOrdinate [
  three_/; three == 3 && Accuracy[three] > $MinWholeNumberAccuracy,
  OptionsPattern[]] := Infinity

LogBarnesGInfimumOrSupremumOrdinate [OptionsPattern[]] := LogBarnesGInfimumOrSupremumAbscissa [];
Protect [LogBarnesGInfimumOrSupremumOrdinate];


(* ::Subsection::Closed:: *)
(*LogGamma infimum or supremum*)


(* ::Subsubsection::Closed:: *)
(*LogGammaInfimumOrSupremumAbscissa*)


Unprotect [LogGammaInfimumOrSupremumAbscissa];
ClearAll [LogGammaInfimumOrSupremumAbscissa];

SetAttributes [LogGammaInfimumOrSupremumAbscissa, {NumericFunction, Listable}];

LogGammaInfimumOrSupremumAbscissa [
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  GammaInfimumOrSupremumAbscissa [one];

LogGammaInfimumOrSupremumAbscissa [
    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  If [$ExactInfSupWheneverPossibleQ,
      0,
      zero];

LogGammaInfimumOrSupremumAbscissa [
  two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] := Infinity;

  (* Minimum then maximum implemented infimum or supremum number: *)

LogGammaInfimumOrSupremumAbscissa [] := {0, 2};
Protect [LogGammaInfimumOrSupremumAbscissa];


(* ::Subsubsection::Closed:: *)
(*LogGammaInfimumOrSupremumOrdinate*)


Unprotect [LogGammaInfimumOrSupremumOrdinate];
ClearAll [LogGammaInfimumOrSupremumOrdinate];

SetAttributes [LogGammaInfimumOrSupremumOrdinate, {NumericFunction, Listable}];

Options [LogGammaInfimumOrSupremumOrdinate] = {Direction -> 0};

LogGammaInfimumOrSupremumOrdinate [
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy,
    OptionsPattern[]] :=
  If [MachineNumberQ [one],
      -0.12148629053584961`,
      With [{precision = Accuracy[one]},
        If [precision <= $Float32,
            N [-0.12148629053584960809551455717769158215135617313`32., precision],
            Re [LogGamma [GammaInfimumOrSupremumAbscissa [one]]]]]];

LogGammaInfimumOrSupremumOrdinate [
    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
  OptionsPattern[]] := Infinity;

LogGammaInfimumOrSupremumOrdinate [
  two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy,
  OptionsPattern[]] := Infinity;

LogGammaInfimumOrSupremumOrdinate [OptionsPattern[]] :=
  LogGammaInfimumOrSupremumAbscissa [];
Protect [LogGammaInfimumOrSupremumOrdinate];


(* ::Subsection::Closed:: *)
(*ParabolicCylinderD infimum or supremum*)


(*Unprotect [ParabolicCylinderD];
  ParabolicCylinderD [r_Integer | r_Real | r_Rational, Infinity] :=
    0;  (* Exactness is justified by all derivatives being 0 at infinity?? *)
Protect [ParabolicCylinderD];*)


(* ::Subsubsection::Closed:: *)
(*ParabolicCylinderDInfimumOrSupremumAbscissa*)


Unprotect [ParabolicCylinderDInfimumOrSupremumAbscissa, $ParabolicCylinderDInfimumOrSupremumParameterRange];
ClearAll [ParabolicCylinderDInfimumOrSupremumAbscissa];

SetAttributes [ParabolicCylinderDInfimumOrSupremumAbscissa, {NumericFunction, Listable}];

(* A 3D plot suggests that implementing non-integer parameter n is doable,
   but I choose not to implement it. *)

(* For some reason this does not work: *)
N [ParabolicCylinderDInfimumOrSupremumAbscissa [0, 0],
   precision_Real | precision_Integer | precision_Rational] := SetAccuracy [1, precision];
  (* :Because, for example, N [0, 32] returns Integer 0 *)

  (* Cases where abscissa 0 is an infimum or supremum: *)

ParabolicCylinderDInfimumOrSupremumAbscissa [
    n_/; n >= 0 && WholeNumberQ[n] && EvenQ[Round[n]],
    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  If [$ExactInfSupWheneverPossibleQ,
      0,
      (n - n) + zero];

  (* Exploit symmetry with respect to non-positive whole-number k: *)

ParabolicCylinderDInfimumOrSupremumAbscissa [n_/; WholeNumberQ [n] && n >= 0,
                                             k_/; k <= 0 && WholeNumberQ [k]] :=
  -ParabolicCylinderDInfimumOrSupremumAbscissa [n, If [OddQ[Round[n]],
                                                       1 - k,
                                                       -k]];

  (* Cases where Infinity is an infimum or supremum: *)

ParabolicCylinderDInfimumOrSupremumAbscissa [
    n_/; n >= 0 && WholeNumberQ[n],
    k_/; k >= 0 && WholeNumberQ[k]] /; k == 1 + Ceiling[n/2] := Infinity;

  (* ParabolicCylinderDInfimumOrSupremumAbscissa [1, k > 0]: *)

ParabolicCylinderDInfimumOrSupremumAbscissa [
    uno_/; uno == 1 && Accuracy[uno] > $MinWholeNumberAccuracy,
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  Sqrt [If [$ExactInfSupWheneverPossibleQ,  2,  one + uno]];

  (* ParabolicCylinderDInfimumOrSupremumAbscissa [2, k > 0]: *)

ParabolicCylinderDInfimumOrSupremumAbscissa [
    two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy,
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  Sqrt [If [$ExactInfSupWheneverPossibleQ,  5,  one + two + two]];

  (* ParabolicCylinderDInfimumOrSupremumAbscissa [3, k > 0]: *)

ParabolicCylinderDInfimumOrSupremumAbscissa [
    three_/; three == 3 && Accuracy[three] > $MinWholeNumberAccuracy,
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  Sqrt [If [$ExactInfSupWheneverPossibleQ,
            1/2 * (9 - Sqrt[57]),
            one/2 * (three*three - Sqrt[57])]];

ParabolicCylinderDInfimumOrSupremumAbscissa [
    three_/; three == 3 && Accuracy[three] > $MinWholeNumberAccuracy,
    two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] :=
  Sqrt [If [$ExactInfSupWheneverPossibleQ,
            1/2 * (9 + Sqrt[57]),
            1/two * (three*three + Sqrt[57])]];

  (* ParabolicCylinderDInfimumOrSupremumAbscissa [4, k > 0]: *)

ParabolicCylinderDInfimumOrSupremumAbscissa [
    four_/; four == 4 && Accuracy[four] > $MinWholeNumberAccuracy,
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  Sqrt [If [$ExactInfSupWheneverPossibleQ,
            7,
            one + four + 2] - Sqrt[22]];

ParabolicCylinderDInfimumOrSupremumAbscissa [
    four_/; four == 4 && Accuracy[four] > $MinWholeNumberAccuracy,
    two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] :=
  Sqrt [If [$ExactInfSupWheneverPossibleQ,
            7,
            1 + two + four] + Sqrt[22]];

ParabolicCylinderDInfimumOrSupremumAbscissa [] :=
  With [{nMax = Last[$ParabolicCylinderDInfimumOrSupremumParameterRange]},
        {Floor [(-1 - nMax)/2],  1 + Ceiling [nMax/2]}];

  (* Minimum and maximum branch number for a specific whole-number parameter n: *)

ParabolicCylinderDInfimumOrSupremumAbscissa [n_/; WholeNumberQ[n]
    && First[$ParabolicCylinderDInfimumOrSupremumParameterRange] <= n
       <= Last[$ParabolicCylinderDInfimumOrSupremumParameterRange]] :=
  {Floor [(-1 - n)/2],  1 + Ceiling [n/2]};  (* : Propagate float ?? *)

$ParabolicCylinderDInfimumOrSupremumParameterRange = {0, 4};
Protect [ParabolicCylinderDInfimumOrSupremumAbscissa, $ParabolicCylinderDInfimumOrSupremumParameterRange];


(* ::Subsubsection::Closed:: *)
(*ParabolicCylinderDInfimumOrSupremumOrdinate*)


Unprotect [ParabolicCylinderDInfimumOrSupremumOrdinate];
ClearAll [ParabolicCylinderDInfimumOrSupremumOrdinate];

SetAttributes [ParabolicCylinderDInfimumOrSupremumOrdinate, {NumericFunction, Listable}];

Options [ParabolicCylinderDInfimumOrSupremumOrdinate] = {Direction -> 0};

  (* Consider using six precomputed MachinePrecision and Precision 32 values: *)

ParabolicCylinderDInfimumOrSupremumOrdinate [
   r_/; r >= 0 && WholeNumberQ[r],
   k_? WholeNumberQ,
   OptionsPattern[]] /; First [ParabolicCylinderDInfimumOrSupremumAbscissa [r]] <=
                    k <= Last [ParabolicCylinderDInfimumOrSupremumAbscissa [r]] :=
  Re [ParabolicCylinderD [r, ParabolicCylinderDInfimumOrSupremumAbscissa [r, k]]];

ParabolicCylinderDInfimumOrSupremumOrdinate [OptionsPattern[]] :=
  ParabolicCylinderDInfimumOrSupremumAbscissa [];

ParabolicCylinderDInfimumOrSupremumOrdinate [n_,  OptionsPattern[]] :=
 ParabolicCylinderDInfimumOrSupremumAbscissa [n];
Protect [ParabolicCylinderDInfimumOrSupremumOrdinate];


(* ::Subsection::Closed:: *)
(*PolyGamma infimum or supremum*)


(* ::Subsubsection::Closed:: *)
(*PolyGammaInfimumOrSupremumAbscissa*)


Unprotect [PolyGammaInfimumOrSupremumAbscissa, $PolyGammaInfimumOrSupremumParameterRange];
ClearAll [PolyGammaInfimumOrSupremumAbscissa];

SetAttributes [PolyGammaInfimumOrSupremumAbscissa, {NumericFunction, Listable}];

  (* Minimum and maximum supremum or infimum number over all real parameters:
     (Only whole-number values are implemented.) *)

$PolyGammaInfimumOrSupremumParameterRange = {-Infinity, Infinity};

  (* Special values: *)

PolyGammaInfimumOrSupremumAbscissa [
  minus1_/; minus1 == -1 && Accuracy[minus1] > $MinWholeNumberAccuracy,
  k_] := LogGammaInfimumOrSupremumAbscissa [(minus1 - minus1) + k]

PolyGammaInfimumOrSupremumAbscissa [
  minus2_/; minus2 == -2 && Accuracy[minus2] > $MinWholeNumberAccuracy,
  k_/; 0 <= k <= 3 && WholeNumberQ[k]] := Which [(*Round[k]*) k == 3,
                                                   Infinity,
                                                 $ExactInfSupWheneverPossibleQ,
                                                   Round[k],
                                                 True,
                                                   (minus2 - minus2) + k];

PolyGammaInfimumOrSupremumAbscissa [
    n_? WholeNumberQ,
    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  If [$ExactInfSupWheneverPossibleQ,
      0,
      (n - n) + zero];

PolyGammaInfimumOrSupremumAbscissa [
  n_? WholeNumberQ,
  one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := Infinity;

PolyGammaInfimumOrSupremumAbscissa [
    n_/; n >= 0 && WholeNumberQ[n] && EvenQ[Round[n]],
    k_/; k <= 0 && WholeNumberQ[k]] :=
  If [$ExactInfSupWheneverPossibleQ,
       Round[k],
       (n - n) + k];

PolyGammaInfimumOrSupremumAbscissa [
    n_/; n > 0 && WholeNumberQ[n],
    k_/; k <= 0 && WholeNumberQ[k] && EvenQ [Round[k]]] :=
  (Assert [OddQ[Round[n]]];
   If [$ExactInfSupWheneverPossibleQ,
       (1/2)*Round[k],
       (n - n) + (1/2)*k]);

  (* Nonnegative odd whole-number n and negative odd whole-number k: *)

PolyGammaInfimumOrSupremumAbscissa [
  n_/; n > 0 WholeNumberQ[n],
  k_/; k < 0 && WholeNumberQ [k]] :=
  (Assert [OddQ[Round[n]] && EvenQ[Round[k]]];
   PolyGammaZero [n + 1, (k + 1)/2]);

  (* Minimum and maximum branch number for a specific real parameter: *)

PolyGammaInfimumOrSupremumAbscissa [n_? WholeNumberQ] :=
  Which [n == -1,   {0, 2},
         n == -2,   {0, 3},
         n < -2,    {0, 1},
         True,      {-Infinity, 1}];

PolyGammaInfimumOrSupremumAbscissa [] := {-Infinity, 3}; (* Whole numbers only. *)
Protect [PolyGammaInfimumOrSupremumAbscissa, $PolyGammaInfimumOrSupremumParameterRange];


(* ::Subsubsection::Closed:: *)
(*PolyGammaInfimumOrSupremumOrdinate*)


Unprotect [PolyGammaInfimumOrSupremumOrdinate];
ClearAll [PolyGammaInfimumOrSupremumOrdinate];

SetAttributes [PolyGammaInfimumOrSupremumOrdinate, {NumericFunction, Listable}];

Options [PolyGammaInfimumOrSupremumOrdinate] = {Direction -> 0};

  (* Special cases: *)

PolyGammaInfimumOrSupremumOrdinate [
  minus1_/; minus1 == -1 && Accuracy[minus1] > $MinWholeNumberAccuracy,
  k_,  OptionsPattern[]] := LogGammaInfimumOrSupremumOrdinate [-minus1 * k]

PolyGammaInfimumOrSupremumOrdinate [
  minus2_/; minus2 == -2 && Accuracy[minus2] > $MinWholeNumberAccuracy,
  three_/; three == 3 && Accuracy[three] > $MinWholeNumberAccuracy,
  OptionsPattern[]] := Infinity;

PolyGammaInfimumOrSupremumOrdinate [
  n_/; n <= -3 && WholeNumberQ[n],
  one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy,
  OptionsPattern[]] := Infinity;

PolyGammaInfimumOrSupremumOrdinate [
    n_/; n <= -2 && WholeNumberQ[n],
    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
    OptionsPattern[]] :=
  If [$ExactInfSupWheneverPossibleQ,
      0,
     (n - n) + zero];
  
PolyGammaInfimumOrSupremumOrdinate [n_/; n >= 0 && WholeNumberQ[n] && EvenQ[Round[n]],
                                    k_/; k <= 0 && WholeNumberQ[k],
                                    OptionsPattern[]] :=
  Switch [Quiet [OptionValue [Direction]],
    -1,  -Infinity,
     1,  Infinity,
     _,  ComplexInfinity];

PolyGammaInfimumOrSupremumOrdinate [n_/; n >= 0 && WholeNumberQ[n] && OddQ[Round[n]],
                                    k_/; k <= 0 && WholeNumberQ[k] && EvenQ[Round[k]],
                                    OptionsPattern[]] := Infinity;

  (* General case: *)

PolyGammaInfimumOrSupremumOrdinate [n_? WholeNumberQ,  k_? WholeNumberQ,  OptionsPattern[]] /;
  (Head[n] === Real || Head[k] === Real) && First [PolyGammaInfimumOrSupremumAbscissa [n]] <=
    k <= Last [PolyGammaInfimumOrSupremumAbscissa [n]] :=
  Re [PolyGamma [n, PolyGammaInfimumOrSupremumAbscissa [n, k]]];

PolyGammaInfimumOrSupremumOrdinate [OptionsPattern[]] := PolyGammaInfimumOrSupremumAbscissa [];

PolyGammaInfimumOrSupremumOrdinate [n_,  OptionsPattern[]] :=
  PolyGammaInfimumOrSupremumAbscissa [n];
Protect [PolyGammaInfimumOrSupremumOrdinate];


(* ::Subsection::Closed:: *)
(*RamanujanTauTheta infimum or supremum*)


(* ::Subsubsection::Closed:: *)
(*RamanujanTauThetaInfimumOrSupremumAbscissa*)


Unprotect [RamanujanTauThetaInfimumOrSupremumAbscissa];
ClearAll [RamanujanTauThetaInfimumOrSupremumAbscissa];

SetAttributes [RamanujanTauThetaInfimumOrSupremumAbscissa, {NumericFunction, Listable}];

RamanujanTauThetaInfimumOrSupremumAbscissa [
    float1_Real /; float1 == 1.0 && Accuracy[float1] > $MinWholeNumberAccuracy] :=
  With [{accuracy = Accuracy[float1]},
    Which [
      MachineNumberQ[float1],
        3.0304653192867512`,
      accuracy <= $Float32,
        N [3.030465319286751293754929341435224231128610459081`32., accuracy],
      True,  (* Slow. Switch to FindMinimum with no derivatives using twice the precision ?? *)
        Quiet [FindRoot [RamanujanTauTheta'[var],
                         {var, 3.030465319286751293754929341`32.,
                               3.030465319286751293754929342`32.},
(*EvaluationMonitor :> ++$infSupCount,*)
                         Method-> "Brent",
                         WorkingPrecision -> accuracy,
                         PrecisionGoal -> $InfSupPrecisionGoalFactor * accuracy,
                         AccuracyGoal -> {Infinity, 0.0}]][[1,2]]]];

RamanujanTauThetaInfimumOrSupremumAbscissa [] := {-1, 2};

RamanujanTauThetaInfimumOrSupremumAbscissa [
  two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] := Infinity;

RamanujanTauThetaInfimumOrSupremumAbscissa [k_/; k <= 0] :=
  -RamanujanTauThetaInfimumOrSupremumAbscissa [1 - k];
Protect [RamanujanTauThetaInfimumOrSupremumAbscissa];


(* ::Subsubsection::Closed:: *)
(*RamanujanTauThetaInfimumOrSupremumOrdinate*)


Unprotect [RamanujanTauThetaInfimumOrSupremumOrdinate];
ClearAll [RamanujanTauThetaInfimumOrSupremumOrdinate];

SetAttributes [RamanujanTauThetaInfimumOrSupremumOrdinate, {NumericFunction, Listable}];

Options [RamanujanTauThetaInfimumOrSupremumOrdinate] = {Direction -> 0};

RamanujanTauThetaInfimumOrSupremumOrdinate [
    float1_Real/; float1 == 1 && Accuracy[float1] > $MinWholeNumberAccuracy,
    OptionsPattern[]] :=
  With [{accuracy = Accuracy[float1]},
    Which [
      MachineNumberQ[float1],
        -0.2591576039606814`,
      accuracy <= $Float32,
        -0.259157603960681380662550820702285918695927882085`32.,
      True,
        Re [RamanujanTauTheta [RamanujanTauThetaInfimumOrSupremumAbscissa [float1]]]]];
       
RamanujanTauThetaInfimumOrSupremumOrdinate [
  zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
  OptionsPattern[]] := -RamanujanTauThetaInfimumOrSupremumOrdinate [zero + 1];

RamanujanTauThetaInfimumOrSupremumOrdinate [
  two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy,
  OptionsPattern[]] := Infinity;

RamanujanTauThetaInfimumOrSupremumOrdinate [
  minus1_/; minus1 == -1 && Accuracy[minus1] > $MinWholeNumberAccuracy,
  OptionsPattern[]] := -Infinity;

RamanujanTauThetaInfimumOrSupremumOrdinate [OptionsPattern[]] :=
  RamanujanTauThetaInfimumOrSupremumAbscissa [];
Protect [RamanujanTauThetaInfimumOrSupremumOrdinate];


(* ::Subsection::Closed:: *)
(*RiemannSiegelTheta infimum or supremum*)


(* ::Subsubsection::Closed:: *)
(*RiemannSiegelThetaInfimumOrSupremumAbscissa*)


Unprotect [RiemannSiegelThetaInfimumOrSupremumAbscissa];
ClearAll [RiemannSiegelThetaInfimumOrSupremumAbscissa];

SetAttributes [RiemannSiegelThetaInfimumOrSupremumAbscissa, {NumericFunction, Listable}];

RiemannSiegelThetaInfimumOrSupremumAbscissa [
    float1_Real /; float1 == 1.0 && Accuracy[float1] > $MinWholeNumberAccuracy] :=
  With [{accuracy = Accuracy[float1]},
    Which [
      MachineNumberQ[float1],
        6.289835988836903`,
      accuracy <= $Float32,
        6.289835988836902779665090100821853396658312945193`32.,
      True,
        Re [Quiet [FindRoot [RiemannSiegelTheta'[var],
                             {var, 6.2898359888369027796650901007`32.,
                                   6.2898359888369027796650901009`32.},
(*EvaluationMonitor :> ++$infSupCount,*)
                            Method -> "Brent",
                            WorkingPrecision -> accuracy,
                            PrecisionGoal -> $InfSupPrecisionGoalFactor * accuracy,
                            AccuracyGoal -> {Infinity, 0.0}]][[1,2]]]]];

RiemannSiegelThetaInfimumOrSupremumAbscissa [
  two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] := Infinity;

RiemannSiegelThetaInfimumOrSupremumAbscissa [k_/; k <= 0] :=
  -RiemannSiegelThetaInfimumOrSupremumAbscissa [1 - k];

RiemannSiegelThetaInfimumOrSupremumAbscissa [] := {-1, 2};
Protect [RiemannSiegelThetaInfimumOrSupremumAbscissa];


(* ::Subsubsection::Closed:: *)
(*RiemannSiegelThetaInfimumOrSupremumOrdinate*)


Unprotect [RiemannSiegelThetaInfimumOrSupremumOrdinate];
ClearAll [RiemannSiegelThetaInfimumOrSupremumOrdinate];

SetAttributes [RiemannSiegelThetaInfimumOrSupremumOrdinate, {NumericFunction, Listable}];

Options [RiemannSiegelThetaInfimumOrSupremumOrdinate] = {Direction -> 0};

RiemannSiegelThetaInfimumOrSupremumOrdinate [
    float1_/; float1 == 1 && Accuracy[float1] > $MinWholeNumberAccuracy,
    OptionsPattern[]] :=
  With [{accuracy = Accuracy[float1]},
    Which [
      MachineNumberQ[float1],
        -3.5309728290166076`,
      accuracy <= $Float32,
        -3.530972829016607437704244487986459815407208179091`32.,
      True,
        Re [RiemannSiegelTheta [RiemannSiegelThetaInfimumOrSupremumAbscissa [float1]]]]];

RiemannSiegelThetaInfimumOrSupremumOrdinate [
  zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
  OptionsPattern[]] := -RiemannSiegelThetaInfimumOrSupremumOrdinate [zero + 1];

RiemannSiegelThetaInfimumOrSupremumOrdinate [
  two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy,
  OptionsPattern[]] := Infinity;

RiemannSiegelThetaInfimumOrSupremumOrdinate [
  minus1_/; minus1 == -1 && Accuracy[minus1] > $MinWholeNumberAccuracy,
  OptionsPattern[]] := -Infinity;

RiemannSiegelThetaInfimumOrSupremumOrdinate [OptionsPattern[]] :=
  RiemannSiegelThetaInfimumOrSupremumAbscissa [];
Protect [RiemannSiegelThetaInfimumOrSupremumOrdinate];


(* ::Subsection::Closed:: *)
(*SincInfimumOrSupremumAbscissa*)


(* ::Text:: *)
(*Sinc [x] = SphericalBesselJ [0, x], so SphericalBesselJInfimumOrSupremum...[0, k] can invoke SincInfimumOrSupremum...[k].*)


ClearAll [SincInfimumOrSupremumAbscissa];

SetAttributes [SincInfimumOrSupremumAbscissa, {NumericFunction, Listable}];

SincInfimumOrSupremumAbscissa [k_Real /; k > 0.0 && WholeNumberQ[k]] :=
  Module [{precision = Precision[k],
           standardizedPrecision, guess},
    standardizedPrecision = If [precision === MachinePrecision,
                                MachinePrecision,
                                16.0 * Ceiling [0.0625 * precision]];
    N [SincInfimumOrSupremumAbscissa [N [Round[k], standardizedPrecision]] =
        (guess = (k + 0.5) * Pi - 0.21897952247562547`;
         Quiet [FindRoot [var * Cos [var] == Sin [var],
                          {var,  guess},
(*EvaluationMonitor :> ++$infSupCount,*)
                          WorkingPrecision -> standardizedPrecision,
                          PrecisionGoal -> $InfSupPrecisionGoalFactor * standardizedPrecision,
                          AccuracyGoal -> {Infinity, 0.0}]][[1,2]]),
       precision]];

SincInfimumOrSupremumAbscissa [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  zero;

SincInfimumOrSupremumAbscissa [k_ /; k < 0.0 && WholeNumberQ[k]] :=
  -SincInfimumOrSupremumAbscissa [-k];

SincInfimumOrSupremumAbscissa [] := {-Infinity, Infinity};


(* Sinc[x] is so fast that it is not worth implementing a SincInfimumOrSupremumOrdinate[k] *)


(* ::Subsection::Closed:: *)
(*SinIntegral infimum or supremum*)


(* ::Subsubsection::Closed:: *)
(*SinIntegralInfimumOrSupremumAbscissa*)


Unprotect [SinIntegralInfimumOrSupremumAbscissa];
ClearAll [SinIntegralInfimumOrSupremumAbscissa];

SetAttributes [SinIntegralInfimumOrSupremumAbscissa, {NumericFunction, Listable}];

SinIntegralInfimumOrSupremumAbscissa [k_/; k <= 0 && WholeNumberQ [k]] :=
  -SinIntegralInfimumOrSupremumAbscissa [1 - k];

SinIntegralInfimumOrSupremumAbscissa [k_? WholeNumberQ] :=
  With [{integerk = Round [k]},
    If [$ExactInfSupWheneverPossibleQ || IntegerQ [k],
        integerk * Pi,
        N [integerk * Pi, Precision [k]]]];

SinIntegralInfimumOrSupremumAbscissa [] := {-Infinity, Infinity};
Protect [SinIntegralInfimumOrSupremumAbscissa];


(* ::Subsubsection::Closed:: *)
(*SinIntegralInfimumOrSupremumOrdinate*)


ClearAll [SinIntegralInfimumOrSupremumOrdinate];

SetAttributes [SinIntegralInfimumOrSupremumOrdinate, {NumericFunction, Listable}];

Options [SinIntegralInfimumOrSupremumOrdinate] = {Direction -> 0};

SinIntegralInfimumOrSupremumOrdinate [k_/; k <= 0,  OptionsPattern[]] :=
  -SinIntegralInfimumOrSupremumOrdinate [1 - k];

SinIntegralInfimumOrSupremumOrdinate [k_? WholeNumberQ,  OptionsPattern[]] :=
  If [Head[k] === Real,
      Module [{precision = Precision[k],
               integerk = Round[k],
               standardizedPrecision},
        Assert [k > 0];
        standardizedPrecision = If [precision === MachinePrecision,
                                    MachinePrecision,
                                    16.0 * Ceiling [0.0625 * precision]];
        N [SinIntegralInfimumOrSupremumOrdinate [N [integerk, standardizedPrecision]] =
             N [SinIntegral [integerk * Pi], standardizedPrecision],
           precision]],
      SinIntegral [k * Pi]];

SinIntegralInfimumOrSupremumOrdinate [OptionsPattern[]] :=
  SinIntegralInfimumOrSupremumAbscissa [];


(* ::Subsection::Closed:: *)
(*SphericalBesselJ infimum or supremum*)


(* ::Subsubsection::Closed:: *)
(*SphericalBesselJInfimumOrSupremumAbscissa*)


ClearAll [SphericalBesselJInfimumOrSupremumAbscissa];

SetAttributes [SphericalBesselJInfimumOrSupremumAbscissa, {NumericFunction, Listable}];

Unprotect [$SphericalBesselJInfimumOrSupremumParameterRange];
$SphericalBesselJInfimumOrSupremumParameterRange = {0, Infinity};
Protect [$SphericalBesselJInfimumOrSupremumParameterRange];

  (* Parameter 0 is a special case: *)

SphericalBesselJInfimumOrSupremumAbscissa [
  zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
  k_? WholeNumberQ] := SincInfimumOrSupremumAbscissa [zero + k];

  (* Exploit symmetries with respect to whole-number k: *)

SphericalBesselJInfimumOrSupremumAbscissa [n_/; WholeNumberQ[n] && EvenQ [Round[n]],
                                           k_/; k < 0 && WholeNumberQ[k]] :=
  -SphericalBesselJInfimumOrSupremumAbscissa [n, -k];

SphericalBesselJInfimumOrSupremumAbscissa [n_/; (*n > 0 && *)WholeNumberQ[n] && OddQ [Round[n]],
                                           k_/; k <= 0 && WholeNumberQ[k]] :=
  -SphericalBesselJInfimumOrSupremumAbscissa [n, 1 - k];

  (* Cases where abscissa 0 is an infimum or supremum: *)

SphericalBesselJInfimumOrSupremumAbscissa [
    r_/; Accuracy[r] > $MinWholeNumberAccuracy &&
      (r != Round[r] || r < 0 || EvenQ [Round[r]]),
    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  If [$ExactInfSupWheneverPossibleQ,
      0,
     (r - r) + zero];

  (* General case for k > 0: *)

SphericalBesselJInfimumOrSupremumAbscissaAux [r_,  standardizedPrecision_,  guess_] :=
  Quiet [FindRoot [Re [SphericalBesselJ[r, var] -
                         var * (SphericalBesselJ[r - 1, var] - SphericalBesselJ[r + 1, var])],
                   {var, guess},  (* :Newton's method *)
(*EvaluationMonitor :> ++$infSupCount,*)
                   WorkingPrecision -> standardizedPrecision,
                   PrecisionGoal -> $InfSupPrecisionGoalFactor * standardizedPrecision,
                   AccuracyGoal -> {Infinity, 0.0}]][[1, 2]];

SphericalBesselJInfimumOrSupremumAbscissa [
    (r_Real | r_Integer | r_Rational) /; (*r > 0 &&*) Accuracy[r] > $MinWholeNumberAccuracy,
    k_/; k > 0 && WholeNumberQ[k]] /; Head[r] === Real || Head[k] === Real :=
  Module [{precision = Precision [{r, k}],
           standardizedPrecision, purifiedr, purifiedk, guess},
    Assert [r != 0];
    If [WholeNumberQ [r],
        standardizedPrecision = If [precision === MachinePrecision,
                                    MachinePrecision,
                                    16.0 * Ceiling [0.0625 * precision]];
        purifiedr = N [Round[r], standardizedPrecision];
        purifiedk = N [Round[k], standardizedPrecision];
        guess = Max [0.01,
                     Which [
                       r > 0,  (* Wasteful to compute BesselJZero for such a crude guess: *)
                         BesselJZeroRemember [N[purifiedr], N[purifiedk]] - 1.0(*0.7853981633974483`*), (* :N[Pi/4] *)
                       r > -1.5,
                         BesselJZero [0.6666666666666666`*r, k + 1.0] - 1.5707963267948966`,
                       True,
                         BesselJZero [0.5 + r, k + 1.0] - 1.5707963267948966`]];
        N [SphericalBesselJInfimumOrSupremumAbscissa [purifiedr, purifiedk] =
             SphericalBesselJInfimumOrSupremumAbscissaAux [
                               purifiedr, standardizedPrecision, guess],
           precision],
    (* else: *)
        guess = Max [0.01,
                     Which [
                       r > 0,
                         BesselJZero [N[r], N[k]] - 1.0(*0.7853981633974483`*), (* :N[Pi/4] *)
                       r > -1.5,
                         BesselJZero [0.6666666666666666`*r, k + 1.0] - 1.5707963267948966`,
                       True,
                         BesselJZero [0.5 + r, k + 1.0] - 1.5707963267948966`]];
        SphericalBesselJInfimumOrSupremumAbscissaAux [r, precision, guess]]];

SphericalBesselJInfimumOrSupremumAbscissa [] := {-Infinity, Infinity};

  (* Minimum and maximum branch number for a specific real parameter: *)

SphericalBesselJInfimumOrSupremumAbscissa [_? WholeNumberQ] := {-Infinity, Infinity};

  (* There are unimplemented fairly regular isolated real negative values of x for non-whole r: *)
SphericalBesselJInfimumOrSupremumAbscissa [_Real | _Rational] := {0, Infinity};


(* ::Subsubsection::Closed:: *)
(*SphericalBesselJInfimumOrSupremumOrdinate*)


Unprotect [SphericalBesselJInfimumOrSupremumOrdinate];
ClearAll [SphericalBesselJInfimumOrSupremumOrdinate];

SetAttributes [SphericalBesselJInfimumOrSupremumOrdinate, {NumericFunction, Listable}];

Options [SphericalBesselJInfimumOrSupremumOrdinate] = {Direction -> 0};

  (* Ordinate number 0 is a special case: *)

SphericalBesselJInfimumOrSupremumOrdinate [n_? WholeNumberQ,
    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
    OptionsPattern[]] :=
  With [{roundedn = Round[n]},
    Which [roundedn === 0,
             1 + If [$ExactInfSupWheneverPossibleQ,
                     roundedn,
                     n + zero],  (* :0 for n==0+, +|-Infinity for n==0-. *)
           roundedn > 0,
                 If [EvenQ[roundedn],
                     If [$ExactInfSupWheneverPossibleQ,
                         0,  (* 0 for n - 1 < n < n + 1. Non-real for zero = 0-: *)
                         (n - n) + zero],
                     -SphericalBesselJInfimumOrSupremumOrdinate [n, 1 + zero]],
           EvenQ[roundedn],
             -Infinity,
           True,  Switch [OptionValue [Direction],
                    -1,  Infinity,
                     1,   -Infinity,
                     _,   ComplexInfinity]]];

SphericalBesselJInfimumOrSupremumOrdinate [r_Real | r_Rational,
    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
    OptionsPattern[]] :=
  Which [r > 0,  If [$ExactInfSupWheneverPossibleQ,
                     0,
                     (r - r) + zero],
         r > -3/2 || EvenQ [Floor[r + 1/2]],  Infinity,
         True,                                -Infinity];

  (* General case: *)  (* Consider remembering for speed: *)

SphericalBesselJInfimumOrSupremumOrdinate [r_Integer | r_Real | r_Rational,
                                           k_? WholeNumberQ,
                                           OptionsPattern[]] /;
    Head[r] === Real || Head[k] === Real :=
  Re [SphericalBesselJ [r, SphericalBesselJInfimumOrSupremumAbscissa [r, k]]];

SphericalBesselJInfimumOrSupremumOrdinate [OptionsPattern[]] :=
  SphericalBesselJInfimumOrSupremumAbscissa [];

SphericalBesselJInfimumOrSupremumOrdinate [r_,  OptionsPattern[]] :=
  SphericalBesselJInfimumOrSupremumAbscissa [r];
Protect [SphericalBesselJInfimumOrSupremumOrdinate];


(* ::Subsection::Closed:: *)
(*SphericalBesselY infimum or supremum*)


(* ::Subsubsection::Closed:: *)
(*SphericalBesselYInfimumOrSupremumAbscissa*)


ClearAll [SphericalBesselYInfimumOrSupremumAbscissa];

SetAttributes [SphericalBesselYInfimumOrSupremumAbscissa, {NumericFunction, Listable}];

  (* Overall minimum and maximum infimum or supremum index number: *)
  
Unprotect [$SphericalBesselYInfimumOrSupremumParameterRange];
$SphericalBesselYInfimumOrSupremumParameterRange = {-Infinity, Infinity};
Protect [$SphericalBesselYInfimumOrSupremumParameterRange];

  (* Exploit symmetry with respect to whole-numbers k: *)

SphericalBesselYInfimumOrSupremumAbscissa [n_/; n < 0 && WholeNumberQ[n] && EvenQ[Round[n]],
                                           k_/; k <= 0 && WholeNumberQ[k]] :=
  -SphericalBesselYInfimumOrSupremumAbscissa [n, 1 - k];

SphericalBesselYInfimumOrSupremumAbscissa [n_? WholeNumberQ,
                                           k_/; k < 0 && WholeNumberQ[k]] :=
  -SphericalBesselYInfimumOrSupremumAbscissa [n, -k];

  (* Abscissa 0 is an infimum or supremum for all remaining cases: *)

SphericalBesselYInfimumOrSupremumAbscissa [
    r_/; Accuracy[r] > $MinWholeNumberAccuracy,
      (* Returning exact 0 because 0 is an infSupa for all r except for even negative r: *)
    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  If [$ExactInfSupWheneverPossibleQ,
      0,
      (r - r) + zero];

  (* General case for r >= 0 and k > 0. Remember specific instances for speed: *)

SphericalBesselYInfimumOrSupremumAbscissaAux [r_, standardizedPrecision_, guess_] :=
    Quiet [FindRoot [D[SphericalBesselY[r, var], var], {var, guess},
(*EvaluationMonitor :> ++$infSupCount,*)
                     WorkingPrecision -> standardizedPrecision,
                     PrecisionGoal -> $InfSupPrecisionGoalFactor * standardizedPrecision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1, 2]];

SphericalBesselYInfimumOrSupremumAbscissa [r_/; (*r > 0 &&*) Accuracy[r] > $MinWholeNumberAccuracy,
                                           k_/; k > 0 && WholeNumberQ [k]] /;
    Head[k] === Real || Head[r] === Real :=
  Module [{precision = Precision[Abs[r] + k],
           guess = Max [0.01,  BesselYZero [0.5 + r, k + 1.0] - 1.5707963267948966`],
           standardizedPrecision, purifiedr, purifiedk},
    If [WholeNumberQ [r],
        standardizedPrecision = If [precision === MachinePrecision,
                                    MachinePrecision,
                                    16.0 * Ceiling [0.0625 * precision]];
        purifiedr = N [Round[r], If [standardizedPrecision === MachinePrecision || r != 0,
                                     standardizedPrecision,
                                     {0, standardizedPrecision}]];
        purifiedk = N [Round[k], standardizedPrecision];
        N [SphericalBesselYInfimumOrSupremumAbscissa [purifiedr, purifiedk] =
             SphericalBesselYInfimumOrSupremumAbscissaAux [purifiedr, standardizedPrecision, guess],
           precision],
    (* else: *)
        SphericalBesselYInfimumOrSupremumAbscissaAux [purifiedr, precision, guess]]];

SphericalBesselYInfimumOrSupremumAbscissa [] := {-Infinity, Infinity};

  (* Minimum and maximum branch number for a specific real parameter n: *)

SphericalBesselYInfimumOrSupremumAbscissa [n_? WholeNumberQ] :=
  SphericalBesselYInfimumOrSupremumAbscissa [];

SphericalBesselYInfimumOrSupremumAbscissa [_Real | _Rational] := {0, Infinity};


(* ::Subsubsection::Closed:: *)
(*SphericalBesselYInfimumOrSupremumOrdinate*)


Unprotect [SphericalBesselYInfimumOrSupremumOrdinate];
ClearAll [SphericalBesselYInfimumOrSupremumOrdinate];

SetAttributes [SphericalBesselYInfimumOrSupremumOrdinate, {NumericFunction, Listable}];

Options [SphericalBesselYInfimumOrSupremumOrdinate] = {Direction -> 0};

  (* Return minimum and maximum ordinate number: *)

SphericalBesselYInfimumOrSupremumOrdinate [OptionsPattern[]] :=
  SphericalBesselYInfimumOrSupremumAbscissa [];

SphericalBesselYInfimumOrSupremumOrdinate [r_,  OptionsPattern[]] :=
  SphericalBesselYInfimumOrSupremumAbscissa [r];

  (* Exploit symmetry with respect to whole-numbers k: *)

SphericalBesselYInfimumOrSupremumOrdinate [n_/; n < 0 && WholeNumberQ[n] && EvenQ[Round[n]],
                                           k_/; k <= 0 && WholeNumberQ[k]] :=
  -SphericalBesselYInfimumOrSupremumOrdinate [n, 1 - k];

SphericalBesselYInfimumOrSupremumOrdinate [n_? WholeNumberQ,
                                           k_/; k < 0 && WholeNumberQ[k]] :=
  SphericalBesselYInfimumOrSupremumOrdinate [n, -k];

  (* Trivial cases: *)

SphericalBesselYInfimumOrSupremumOrdinate [
    minus1_/; minus1 == -1 && Accuracy[minus1] > $MinWholeNumberAccuracy,
    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
    OptionsPattern[]] :=
  If [$ExactInfSupWheneverPossibleQ,
      1,
      zero - minus1];

SphericalBesselYInfimumOrSupremumOrdinate [
    n_? WholeNumberQ,
    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
    OptionsPattern[]] :=
  Which [n < 0,            Assert [SphericalBesselYInfimumOrSupremumOrdinate];  (* :Conjecture *)
Print [{SphericalBesselYInfimumOrSupremumOrdinate, n, " < 0"}];
                           If [$ExactInfSupWheneverPossibleQ,
                               0,
                              (n - n) + zero],
         OddQ [Round[n]],  -Infinity,
         True,             Switch [OptionValue [Direction],
                             -1,  -Infinity,
                              1,   Infinity,
                              _,   ComplexInfinity]];

SphericalBesselYInfimumOrSupremumOrdinate [
    r_Rational | (r_Real /; Accuracy[r] > $MinWholeNumberAccuracy && r != Round[r]),
    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
    OptionsPattern[]] := If [r > -1/2 || OddQ[Floor[r]],
                             -Infinity,
                             Infinity];

  (* General case for negative even r or nonzero ordinate number: *)    (* Consider remembering for speed: *)

SphericalBesselYInfimumOrSupremumOrdinate [
  r_/; r >= 0 || WholeNumberQ[r],  k_? WholeNumberQ,  OptionsPattern[]] /;
   (Head[r] === Real || Head[k] === Real) (*&& First[SphericalBesselYInfimumOrSupremumAbscissa[r]] <= 
    k <= Last[SphericalBesselYInfimumOrSupremumAbscissa[r]*) :=
SphericalBesselYInfimumOrSupremumOrdinate [r, k] =
  Re [SphericalBesselY [r, SphericalBesselYInfimumOrSupremumAbscissa [r, k]]];
Protect [SphericalBesselYInfimumOrSupremumOrdinate];


(* ::Subsection::Closed:: *)
(*StruveH infimum or supremum*)


(* ::Subsubsection::Closed:: *)
(*StruveHInfimumOrSupremumAbscissa*)


Unprotect [StruveHInfimumOrSupremumAbscissa, $StruveHInfimumOrSupremumParameterRange];
ClearAll [StruveHInfimumOrSupremumAbscissa];

SetAttributes [StruveHInfimumOrSupremumAbscissa, {NumericFunction, Listable}];

  (* Minimum and maximum supremum or infimum number over all real parameters:
     (Only whole-number values are implemented.) *)

$StruveHInfimumOrSupremumParameterRange = {-1, 1};

  (* Exploit symmetry with respect to negative whole-number n: *)

StruveHInfimumOrSupremumAbscissa [n_/; n < 0 && WholeNumberQ [n],
                                  k_] := StruveHInfimumOrSupremumAbscissa [-n, k];

  (* Cases where x = 0 is an infimum or supremum: *)

StruveHInfimumOrSupremumAbscissa [
    n_/; WholeNumberQ[n] && OddQ[Round[n]],
    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  If [$ExactInfSupWheneverPossibleQ,
      0,
     (n - n) + zero];

  (* Exploit symmetry with respect to non-positive whole-number k: *)

StruveHInfimumOrSupremumAbscissa [n_? WholeNumberQ,
                                  k_/; k <= 0 && WholeNumberQ [k]] :=
  -StruveHInfimumOrSupremumAbscissa [n, If [EvenQ[Round[n]],
                                            1 - k,
                                            -k]];

  (* General case. Consider remembering for whole-number arguments: *)

StruveHInfimumOrSupremumAbscissa [
    n_/; WholeNumberQ[n],
    k_/; k > 0 && WholeNumberQ [k]] /;  Head[n] === Real || Head[k] === Real  :=
  Module [{precision = Precision [n + k],
           guess = BesselJInfimumOrSupremumAbscissa[n + 1.0, k]},
    Re [Quiet [FindRoot [D[StruveH[n, var], var],  {var,  guess(*, guess + 0.6*)},
(*EvaluationMonitor :> ++$infSupCount,*)
                     (*Method -> "Brent",*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InfSupPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]]];

StruveHInfimumOrSupremumAbscissa [] := {-Infinity, Infinity};

  (* Minimum and maximum branch number for a specific real parameter: *)

StruveHInfimumOrSupremumAbscissa [_? WholeNumberQ] := {-Infinity, Infinity};
Protect [StruveHInfimumOrSupremumAbscissa, $StruveHInfimumOrSupremumParameterRange];


(* ::Subsubsection::Closed:: *)
(*StruveHInfimumOrSupremumOrdinate*)


Unprotect [StruveHInfimumOrSupremumOrdinate];
ClearAll [StruveHInfimumOrSupremumOrdinate];

SetAttributes [StruveHInfimumOrSupremumOrdinate, {NumericFunction, Listable}];

Options [StruveHInfimumOrSupremumOrdinate] = {Direction -> 0};
  (* Avoid Indeterminate for StruveHInfimumOrSupremumOrdinate [-1, 0]: *)

StruveHInfimumOrSupremumOrdinate [
    minus1_/; minus1 == -1 && Accuracy[minus1] > $MinWholeNumberAccuracy,
    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
    OptionsPattern[]] :=
  If [$ExactInfSupWheneverPossibleQ,
      2/Pi,
      zero - minus1*2/Pi];

  (* General case. Consider remembering for whole-number arguments: *)

StruveHInfimumOrSupremumOrdinate [n_, k_? WholeNumberQ,  OptionsPattern[]] /;
  Head[n] === Real || Head[k] === Real :=
  Re [StruveH [n, StruveHInfimumOrSupremumAbscissa [n, k]]];

StruveHInfimumOrSupremumOrdinate [OptionsPattern[]] := StruveHInfimumOrSupremumAbscissa [];

StruveHInfimumOrSupremumOrdinate [n_,  OptionsPattern[]] := StruveHInfimumOrSupremumAbscissa [n];
Protect [StruveHInfimumOrSupremumOrdinate];


(* ::Subsection::Closed:: *)
(*Zeta infimum or supremum*)


(* ::Subsubsection::Closed:: *)
(*ZetaInfimumOrSupremumAbscissa*)


Unprotect [ZetaInfimumOrSupremumAbscissa];
ClearAll [ZetaInfimumOrSupremumAbscissa];

SetAttributes [ZetaInfimumOrSupremumAbscissa, {NumericFunction, Listable}];

N [ZetaInfimumOrSupremumAbscissa [0], precision_Real | precision_Integer | precision_Rational] :=
  ZetaInfimumOrSupremumAbscissa [SetAccuracy [0, precision]];

  (* General: Remember for speed: *)

ZetaInfimumOrSupremumAbscissa [k_Real/;
    First[ZetaInfimumOrSupremumAbscissa[]] <= k <= 0.0 && WholeNumberQ[k]] :=
(*ZetaInfimumOrSupremumAbscissa [k] =*)
  Module [{precision , guess1, guess2},
    If [k == 0.0,
        If [MachineNumberQ [k],
            Return [-2.717262829204574`],
            guess1 = -2.717262829204574101570580661676528412424751853917`32.;
            precision = Accuracy [k];
            If [precision <= $Float32,
                Return [N [guess1, precision]],
                guess2 = guess1 - 1`32*^-28;
                guess1 += 1`32*^-28]],
        precision = Precision [k];
        guess1 = -3.99 + 2.0*k;
        guess2 = -2.01 + 2.0*k];
        Quiet [FindRoot [Zeta'[var],  {var,  (*guess,*)  guess1,  guess2},
(*EvaluationMonitor :> ++$infSupCount,*)
                         Method -> "Brent",
                         WorkingPrecision -> precision,
                         PrecisionGoal -> $InfSupPrecisionGoalFactor * precision,
                         AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

ZetaInfimumOrSupremumAbscissa [
  two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] := Infinity;

ZetaInfimumOrSupremumAbscissa [
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  If [$ExactInfSupWheneverPossibleQ,
      1,
      one];

(* Recommend k >= -13 for MachinePrecision: *)

ZetaInfimumOrSupremumAbscissa [] := {-Infinity, 2};
Protect [ZetaInfimumOrSupremumAbscissa];


(* ::Subsubsection::Closed:: *)
(*ZetaInfimumOrSupremumOrdinate*)


Unprotect [ZetaInfimumOrSupremumOrdinate];
ClearAll [ZetaInfimumOrSupremumOrdinate];

SetAttributes [ZetaInfimumOrSupremumOrdinate, {NumericFunction, Listable}];

Options [ZetaInfimumOrSupremumOrdinate] = {Direction -> 0};

N [ZetaInfimumOrSupremumOrdinate [0], precision_Real | precision_Integer | precision_Rational] :=
  ZetaInfimumOrSupremumOrdinate [SetAccuracy [0, precision]];

ZetaInfimumOrSupremumOrdinate [k_Real /; k <= 0 && WholeNumberQ[k],  OptionsPattern[]] :=
(*ZetaInfimumOrSupremumOrdinate [k] =*)
  Module [{accuracy},
    If [k == 0.0,
        If [MachineNumberQ [k],
            Return [0.009159890119903463`]];
        accuracy = Accuracy [k];
        If [accuracy <= $Float32,
            Return [N [0.009159890119903461840056038728643927232684502734`32., accuracy]]]];
    Re [Zeta [ZetaInfimumOrSupremumAbscissa [k]]]];

ZetaInfimumOrSupremumOrdinate [
    two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy,  OptionsPattern[]] :=
  If [$ExactInfSupWheneverPossibleQ,
      1,
      two/two];

ZetaInfimumOrSupremumOrdinate [
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy,
    OptionsPattern[]] :=
  Switch [Quiet[OptionValue [Direction]],
    1,  -Infinity,
    -1,  Infinity,
    _,   ComplexInfinity];

ZetaInfimumOrSupremumOrdinate [OptionsPattern[]] :=
  ZetaInfimumOrSupremumAbscissa [];
Protect [ZetaInfimumOrSupremumOrdinate];


(* ::Section::Closed:: *)
(*End private block, then EndPackage :*)


End [];
EndPackage [];


(* ::Title::Closed:: *)
(*RealInverse package*)


(* ::Section::Closed:: *)
(*Summary :*)


(* ::Subsection::Closed:: *)
(*Ultra permissive "MIT copyright" notice:*)


(* ::Text:: *)
(*Copyright (c) 2016, David R. Stoutemyer *)
(**)
(*Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:*)
(**)
(*The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.*)
(**)
(*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.*)


(* ::Subsection::Closed:: *)
(*History and purpose:*)


(* ::Text:: *)
(*As of September 2015, this Mathematica package is under development by David R. Stoutemyer (dstout@hawaii.edu).*)
(**)
(*Only a small percent of the Mathematica special functions have built-in named inverse functions. InverseErf [...], InverseEllipticNomeQ [...] and InverseHaversine [...]  are rare examples, and they work for all complex values of their arguments.*)
(**)
(*There is a general-purpose Mathematica method for specifying an inverse of any function w = f [z]  as  InverseFunction [f] [w].*)
(**)
(*For numeric w, InverseFunction appears to use  FindRoot [f [z] == w,  {z, guess}].*)
(*However, for most special functions it is a daunting task to make the guess always close enough to converge to an accurate inverse in a reasonable number of iterations. Moreover, different values of w might cause convergence to different inverse branches when there is more than one, which is true of most special functions.  For example, try*)
(**)
(*                                Plot [InverseFunction [ExpIntegralEi] [y], {y, -4, 1}] .*)


(* ::Text:: *)
(*In practice, a large percent of scientific computation concerns only the real domain, and inversion is much easier if the goal is merely to implement an inverse of  y = f [x]  where both x and y are real. This file does that for many of the Mathematica special functions. Moreover, it usually implements all of the real inverse branches when there is more than one.  For example, RealInverseExpIntegralEi [y, 0] implements the upper branch 0 partially shown in the above plot, whereas  RealInverseExpIntegralEi [y, 1]  implements the lower branch.*)


(* ::Text:: *)
(*To accomplish this task:*)
(**)
(*1 This package uses a prerequisite package named  InfimaAndSuprema  to partition the interval for real x in which f [x] is real into maximally-monotonic segments numbered with successive integer branch numbers. The branch numbers are the infima or suprema numbers of the right endpoints of the subintervals of  f [x].*)
(**)
(*2. If the given value of  y = f [x]  is in the corresponding y interval, then RealInversef uses FindRoot with a guess for x that is appropriate to the given value of y in the requested branch.*)


(* ::Subsection::Closed:: *)
(*Some programming issues:*)


(* ::Text:: *)
(*This version of this package is given by the value of the public package-level variable*)
(*    $RealInverseVersionNumber.*)
(**)
(*1:  For parametrized functions such as  y = BesselJ [r, x],  I regard r as fixed and implement only*)
(*     RealInverseBesselJ [r, y, k]  where k is the requested branch number and the inverse is with*)
(*     respect to x rather than r.*)
(**)
(*2.  I often enclose a special-function evaluation in  Re[...]  even though the function arguments*)
(*    are in the real domain, because float arguments sometimes cause a spurious 0.0*I or*)
(*    epsilon*I that thwarts desired goals.*)
(*    *)
(*3.  With function parameters named such as "zero" or "one",*)
(*     I often define a function using subexpressions such as  zero + ...,  one*...,  one - one,  etc.,*)
(*     even though paramter  zero == 0.0  and and parameter  one == 1.0 .*)
(*     The reason is:*)
(*    *)
(*    a) to make the result a machine float if parameter "zero" or parameter "one" is a machine float,*)
(*    *)
(*    b) otherwise to make the result have an appropriate Accuracy if either parameter is an arbitrary-*)
(*        precision float,*)
(*       *)
(*    c) otherwise to make the result be ExactNumberQ.*)
(*    *)
(* 4. Naming conventions:*)
(**)
(*    a)  All function names are capitalized.*)
(*    *)
(*    b)  Global indeterminate read-only symbols that end users might see, such as optional-argument*)
(*              names, are merely capitalilzed.*)
(*         Otherwise global variables and dynamically-scoped variables intended for access outside*)
(*             the Block  where they are defined begin with $.*)
(*         *)
(*    c)  Such variables that are not expected to change value after "Run Package" are capitalized.*)
(**)


(* ::Text:: *)
(*TO DO:*)
(**)
(*1.  Make it consistent with ExactIfPossible for Zeros and InfSups, all via optional keyword parameters.*)
(*     (See implementation for FresnelS)*)
(**)
(*2.  $MaxAbsBranchNumberForRemember, $MaxAbsIndexForRemember and similarly for individual functions.*)
(**)
(*3.  Implement it for more Mathematica built-in special functions.*)


(* ::Text:: *)
(*4.  Make the functions adaptively use extra precision if necessary to make the result have a Precision that matches that of the least precise RealInverse... [...] argument -- or to match the Accuracy of the least Accurate argument when all of the Real arguments are arbitrary-precision float zeros.*)
(**)
(*5. Try creative rounding to the nearest whole-number argument.*)
(**)
(*6. Improve the guesses where an unwelcome number of iterations occurs.*)


(* ::Section::Closed:: *)
(*Usage :*)


BeginPackage["RealInverseFunctions`", {"Zeros`", "InfimaAndSuprema`"}];


If [$VersionNumber < 8.0,
    Print ["Sorry, but the functions in this RealInverse package will not work properly for Mathematica versions before 8.0."]];


On [Assert];  (* : New in Mathematica version 8.0 *)


(* ::Subsection::Closed:: *)
(*Usage of public functions :*)


MinExponentOfSn::usage =
 "For non-negative Integer n, MinExponentOfSn[n] returns the minimal exponent of the symmetric group Sn.";


RealInverseAiryAi::usage =
 "RealInverseAiryAi [y_Real, k] more robustly and quickly returns the kth real branch value of InverseFunction[AiryAi] [y].
  RealInverseAiryAi [] returns {-Infinity, 1}: a list containing the smallest then largest implemented k.";
RealInverseAiryBi::usage =
 "RealInverseAiryBi [y_Real, k] more robustly and quickly returns the kth real real branch value of InverseFunction[AiryBi] [y].
  RealInverseAiryBi [] returns a list containing the smallest then largest implemented k.";
RealInverseArithmeticGeometricMean1::usage =
 "RealInverseArithmeticGeometricMean1 [y_Real /; y >= 0] more robustly and quickly returns the unique InverseFunction[ArithmeticGeometricMean1[1,#] &] [y].";
RealInverseBarnesG::usage =
 "RealInverseBarnesG [y_Real, k] more robustly and quickly returns the kth real branch value of InverseFunction[BarnesG] [y].
  RealInverseBarnesG [] returns a list containing the smallest then largest implemented k.";
RealInverseBesselI::usage =
 "RealInverseBesselI [r, y_Real, k] more robustly and quickly returns the kth real real branch value of InverseFunction[BesselI[r, #] &] [y] for negative whole-number or non-negative r.
  RealInverseBarnesI [] returns a list containing {0, 1}: the smallest then largest implemented k.";
RealInverseBesselJ::usage =
 "RealInverseBesselJ [n, y_Real] more robustly and quickly returns the kth real real branch value of InverseFunction[BesselJ[n, #] &] [y] for whole number n >= 0.
  RealInverseBesselJ [] returns a list containing the smallest then largest implemented k.";
RealInverseBesselY::usage =
 "RealInverseBesselY [n, y_Real] more robustly and quickly returns the kth real real branch value of InverseFunction[BesselY[n, #] &] [y] for whole number n >= 0.
  RealInverseBesselY [] returns a list containing the smallest then largest implemented k.";
RealInverseBesselK::usage =
 "RealInverseBesselK [n, y_Real] more robustly and quickly returns the unique real value of InverseFunction[BesselK[n, #] &] [y] for whole number n >= 0.";
RealInverseCosIntegral::usage =
 "RealInverseCosIntegral [y_Real, k] more robustly and quickly returns the kth real real branch of InverseFunction[CosIntegral] [y].
  RealInverseCosIntegral [] returns a list containing the smallest then largest implemented k.";
RealInverseCoshIntegral::usage =
 "RealInverseCoshIntegral [y_Real] more robustly and quickly returns the unique real InverseFunction[CoshIntegral] [y]";
RealInverseDawsonF::usage =
 "RealInverseDawsonF [y_Real, k] more robustly and quickly returns the kth real branch value of InverseFunction[DawsonF] [y].
  RealInverseDawsonF [] returns a list containing the smallest then largest implemented k.";
RealInverseDirichletBeta::usage =
 "RealInverseDirichletBeta [y_Real, k] more robustly and quickly returns the kth real branch value of InverseFunction[DirichletBeta] [y].
  RealInverseDirichletBeta [] returns a list containing the smallest then largest implemented n.";
RealInverseDirichletEta::usage =
 "RealInverseDirichletEta [y_Real, k] more robustly and quickly returns the kth real branch value of InverseFunction[DirichletEta] [y].
  RealInverseDirichletEta [] returns a list containing the smallest then largest implemented n.";
RealInverseDirichletLambda::usage =
 "RealInverseDirichletLambda [y_Real, k] more robustly and quickly returns the kth real branch value of InverseFunction[DirichletLambda] [y].
  RealInverseDirichletLambda [] returns a list containing the smallest then largest implemented k.";
RealInverseEllipticE::usage =
 "RealInverseEllipticE [y_Real /; y >= 1 more robustly and quickly returns the unique real InverseFunction[EllipticE] [y]";
RealInverseEllipticK::usage =
 "RealInverseEllipticK [y_Real /; y >= 0 more robustly and quickly returns the unique real InverseFunction[EllipticK] [y]";
RealInverseEllipticTheta2Zero::usage =
 "RealInverseEllipticTheta2Zero [y_Real /; y >= 0 more robustly and quickly returns the unique real InverseFunction[EllipticTheta[2,0,#]&] [y]";
RealInverseEllipticTheta3Zero::usage =
 "RealInverseEllipticTheta3Zero [y_Real /; y >= 0 more robustly and quickly returns the unique real InverseFunction[EllipticTheta[3,0,#]&] [y].";
RealInverseErfi::usage =
 "RealInverseErfi [y_Real] more robustly and quickly returns the unique real InverseFunction[Erfi] [y]";
RealInverseExpIntegralEi::usage =
 "RealInverseExpIntegralEi [y_Real, k] more robustly and quickly returns the kth real branch of InverseFunction[EllipticEi] [y].
  RealInverseExpIntegralEi [] returns a list containing the smallest then largest implemented k.";
RealInverseExpIntegralE::usage =
 "RealInverseExpIntegralE [n, y_Real] more robustly and quickly returns unique real value of InverseFunction[ExpIntegralE[n,#] &] [y].";
RealInverseFactorial::usage =
 "RealInverseFactorial [y_Real, k] more robustly and quickly returns the kth real branch value of InverseFunction[Factorial] [y].
  RealInverseFactorial [] returns a list containing the smallest then largest implemented k.";
RealInverseFactorial2::usage =
 "RealInverseFactorial2 [y_Real, k] more robustly and quickly returns the kth real branch value of InverseFunction[Factorial2] [y].
  RealInverseFactorial2 [] returns a list containing the smallest then largest implemented k.";
RealInverseFresnelC::usage =
 "RealInverseFresnelC [y_Real,  k] more robustly and quickly returns the kth real branch value of InverseFunction[FresnelC] [y].
  RealInverseFresnelC [] returns a list containing the smallest then largest implemented k.";
RealInverseFresnelS::usage =
 "RealInverseFresnelS [y_Real /; Abs[y] <= FresnelS[Sqrt[2]],  k] more robustly and quickly returns the kth real branch value of InverseFunction[FresnelS] [y].
  RealInverseFresnelS [] returns a list containing the smallest then largest implemented k.";
RealInverseGamma::usage =
 "RealInverseGamma [y_Real, k] more robustly and quickly returns the kth real branch value of InverseFunction[Gamma] [y].
  RealInverseGamma [] returns a list containing the smallest then largest implemented k.";
RealInverseHyperfactorial::usage =
 "RealInverseHyperfactorial [y_Real, k] more robustly and quickly returns the kth real branch value of InverseFunction[Hyperfactorial] [y].
  RealInverseHyperfactorial [] returns a list containing the smallest then largest implemented k.";
RealInverseLogBarnesG::usage =
 "RealInverseLogBarnesG [y_Real, k] more robustly and quickly returns the kth real branch value of InverseFunction[LogBarnesG] [y].
  RealInverseLogBarnesG [] returns a list containing the smallest then largest implemented k.";
RealInverseLogGamma::usage =
 "RealInverseLogGamma [y_Real, k] more robustly and quickly returns the kth real branch value of InverseFunction[LogBarnesG] [y].
  RealInverseLogGamma [] returns a list containing the smallest then largest implemented k.";
RealInverseLogIntegral::usage =
 "RealInverseLogIntegral [y_Real, k] more robustly and quickly returns the kth real branch value of InverseFunction[LogIntegral] [y].
  RealInverseLogIntegral [] returns a list containing the smallest then largest implemented k.";
RealInverseParabolicCylinderD::usage =
 "RealInverseParabolicCylinderD [m, y_Real, k] more robustly and quickly returns the kth real branch value of InverseFunction[ParabolicCylinderD[m, #] &] [y]2.
  RealInverseParabolicCylinderD [] returns a list containing the smallest then largest implemented k.";
RealInversePolyGamma::usage =
 "RealInversePolyGamma [n, y_Real, k] more robustly and quickly returns the kth real branch of InverseFunction[PolyGamma[n, #] &] [y] for whole number n >= 0.
  RealInversePolyGamma [] returns a list containing the smallest then largest implemented k.";
RealInversePolyLog::usage =
 "RealInversePolyLog [n, y_Real] more robustly and quickly returns the unique real InverseFunction[PolyLog[n, #] &] [y] for whole number n >= 0.";
RealInverseRamanujanTauTheta::usage =
 "RealInverseRamanujanTauTheta [y_Real, k] more robustly and quickly returns the kth real branch value of InverseFunction[RamanujanTauTheta] [y].
  RealInverseRamanujanTauTheta [] returns a list containing the smallest then largest implemented k.";
RealInverseRiemannSiegelTheta::usage =
 "RealInverseRiemannSiegelTheta [y_Real, k] more robustly and quickly returns the kth real branch value of InverseFunction[RiemannSiegelTheta] [y].
  RealInverseRiemannSiegelTheta [] returns a list containing the smallest then largest implemented k.";
RealInverseSinc::usage =
 "RealInverseSinc [y_Real] more robustly and quickly returns the unique real InverseFunction[Sinc] [y].
  RealInverseSinc [] returns a list containing the smallest then largest implemented k.";
RealInverseSinhIntegral::usage =
 "RealInverseSinhIntegral [y_Real] more robustly and quickly returns the unique real InverseFunction[SinhIntegral] [y].
  RealInverseSinhIntegral [] returns a list containing the smallest then largest implemented k.";
RealInverseSinIntegral::usage =
 "RealInverseSinIntegral [y_Real, k] more robustly and quickly returns the kth real real branch of InverseFunction[SinIntegral] [y].
  RealInverseSinIntegral [] returns a list containing the smallest then largest implemented k.";
RealInverseSphericalBesselJ::usage =
 "RealInverseSphericalBesselJ [n, y_Real] more robustly and quickly returns the kth real real branch value of InverseFunction[SphericalBesselJ[n, #] &] [y] for whole number n >= 0.
  RealInverseSphericalBesselJ [] returns a list containing the smallest then largest implemented k.";
RealInverseSphericalBesselY::usage =
 "RealInverseSphericalBesselY [n, y_Real] more robustly and quickly returns the kth real real branch value of InverseFunction[SphericalBesselY[n, #] &] [y] for whole number n >= 0.
  RealInverseSphericalBesselY [] returns a list containing the smallest then largest implemented k.";
RealInverseStruveL::usage =
 "RealInverseStruveL [n, y_Real, k] more robustly and quickly returns the kth real real branch of InverseFunction[StruveL[n, #] &] [y] for whole number n >= 0.
  RealInverseStruveL [] returns a list containing the smallest then largest implemented k.";
RealInverseZeta::usage =
 "RealInverseZeta [y_Real, k] more robustly and quickly returns the kth real branch value of InverseFunction[Zeta] [y].
  RealInverseZeta [] returns a list containing the smallest then largest implemented k.";


(* ::Subsection::Closed:: *)
(*Usage of public package-level variables :*)


 $AskConstantsVersionNumber::usage = "Include the value of this variable in any emails to AskConstants about this package.";


$InverseFunctionsPrecisionGoalFactor::usage = "";
$InverseFunctionsAccuracyGoalFactor::usage = "";
$RealInverseUnderflowMachineNumberTo0Q::usage = "";
$RealInverseOverflowMachineNumberToSignedInfinityQ::usage = "";
$RealInverseAccuracyDelta::usage = "";

$realInverseCount::usage =
 "Use this global variable to count total FindRoot iterations for RealInverse..., or shadow it with
  Block [{$realInverseCount = 0}, ..., {..., $realInverseCount}] to count number of iterations for one RealInverse...";

$RealInverseBesselIParameterRange::usage =
  "A list containing the smallest then largest implemented real parameter r for computing float values of RealInverseBesselI[r,y,k].";
$RealInverseBesselJParameterRange::usage =
  "A list containing the smallest then largest implemented real parameter r for computing float values of RealInverseBesselJ[r,y,k].";
$RealInverseBesselIParameterRange::usage =
  "A list containing the smallest then largest implemented real parameter r for computing float values of RealInverseBesselK[r,y,k].";
$RealInverseBesselKParameterRange::usage =
  "A list containing the smallest then largest implemented real parameter r for computing float values of RealInverseBesselI[r,y,k].";
$RealInverseBesselYParameterRange::usage =
  "A list containing the smallest then largest implemented real parameter r for computing float values of RealInverseBesselY[r,y,k].";
$RealInverseExponentialIntegralEParameterRange::usage =
  "A list containing the smallest then largest implemented real parameter r for computing float values of RealInverseExponentialIntegralE[r,y,k].";
$RealInversePolyGammaParameterRange::usage =
  "A list containing the smallest then largest implemented real parameter r for computing float values of RealInversePolyGamma[r,y,k].";
$RealInversePolyLogParameterRange::usage =
  "A list containing the smallest then largest implemented real parameter r for computing float values of RealInversePolyLog[r,y,k].";


(* ::Subsection::Closed:: *)
(*Usage of optionally-public package-level variables :*)


(* ::Text:: *)
(*To reduce the chance of name conflicts, the code in this Section should be commented out*)
(*   in the distributed version.*)
(*Uncommenting this code is helpful during development and testing for convenient access *)
(*  and for  syntax coloring that reveals misspellings.*)


(*
$AbsLogMinMachineNumber::usage = "";
$AiryAiAccuracyDelta::usage = "";
$AiryBiAccuracyDelta::usage = "";
$BesselIAccuracyDelta::usage = "";
$BesselJAccuracyDelta::usage = "";
$DirichletBetaAccuracyDelta::usage = "";
$EllipticEAccuracyDelta::usage = "";
$EllipticKAccuracyDelta::usage = "";
$EllipticTheta3ZeroAccuracyDelta::usage = "";
$ReciprocalAbsLogMinMachineNumber::usage = "";
$HyperfactorialAccuracyDelta::usage = "";

EllipticTheta3ZeroRectified::usage = "";
GuessesRealInverseExpIntegralE1::usage = "";
GuessesRealInverseExpIntegralEGE2::usage = "";
*)


(* ::Section::Closed:: *)
(*Initialization of some package-level variables :*)


Begin ["`Private`"];

Unprotect [$AskConstantsVersionNumber];
$AskConstantsVersionNumber = 0.8;
Protect [$AskConstantsVersionNumber];

$InverseFunctionsPrecisionGoalFactor = 0.9;
$InverseFunctionsAccuracyGoalFactor  = 0.5;
$RealInverseUnderflowMachineNumberTo0Q = True;
$RealInverseOverflowMachineNumberToSignedInfinityQ = False;
$RealInverseAccuracyDelta = -2.0;

$AbsLogMinMachineNumber = -Log[$MinMachineNumber];
$ReciprocalAbsLogMinMachineNumber = $AbsLogMinMachineNumber ^ -1;


(* ::Section::Closed:: *)
(*Function definitions :*)


(* ::Subsection::Closed:: *)
(*MinExponentOfSn*)


Unprotect [MinExponentOfSn];
ClearAll [MinExponentOfSn];

MinExponentOfSn [0 | 1] := 1;

MinExponentOfSn [n_Integer /; n > 1] := LCM [n, MinExponentOfSn [n - 1]];
Protect [MinExponentOfSn];


(* ::Subsection::Closed:: *)
(*RealInverseAiryAi*)


Unprotect [RealInverseAiryAi];
ClearAll [RealInverseAiryAi];

SetAttributes [RealInverseAiryAi, {NumericFunction, Listable}];

(* This was based on sensitivity analysis at the stationary point.
   I abandoned the idea for most subsequently implemented functions,
   but I leave it in as a reminder for possible future implementation in other functions: *)
$AiryAiAccuracyDelta = $RealInverseAccuracyDelta + 0.1372658393903524`;
  (* :Abs [RealExponent [AiryAi[0.0]/AiryAiPrime[0.0]]] *)

  (* Branch 1 returns -1.01879... <= x <= Infinity such that AiryAi[x] == y: *)

RealInverseAiryAi [y_Real, k_/; k <= 0 && WholeNumberQ [k]] /;
    y == AiryAiInfimumOrSupremumOrdinate [(y - y) + k] :=
  AiryAiInfimumOrSupremumAbscissa [(y - y) + k];

RealInverseAiryAi [y_/; y > 0,
                   one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[one] === Real) &&
      y <= AiryAiInfimumOrSupremumOrdinate [(y-y)/y - (one - one)] :=
  Module [{precision = Precision [{y, one}],
           xLeft = AiryAiInfimumOrSupremumAbscissa [(y-y)/y - (one - one)],
           guess, var},
    guess = Which [y > 0.4834878548525063`,  (* Max [..., 0.0} precludes negligible Im part: *)
                     xLeft + Sqrt[Max [1.9631073786913142`  - 3.6648613559536845`*y, 0.0]],
                   y < 0.21852382269309426`,
                     (-1.5*Log[3.5449077018110318`*y]) ^ 0.6666666666666667`,
                   True,
                     1.3717211641984484` - 3.863697950562207`*y];
(*Print [{RealInverseAiryAi, y, one, guess}];*)  (* :This is an example of a useful development & debugging technique. *)
    Re [Quiet [FindRoot [Re [AiryAi [var]] == y,  {var, guess, xLeft, Infinity},
(*EvaluationMonitor:> ++$realInverseCount,*)
                         WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                         PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                         AccuracyGoal -> {If [Abs[y - 0.3550280538878173`] < 0.1,
                                              $AiryAiAccuracyDelta + precision,
                                              Infinity],  0.0}]][[1,2]]]];

  (* Branch k <= 0 returns AiryAiPrimeZero[k-1] <= x <= AiryAiPrimeZero[k] such that AiryAi[x] == y: *)

RealInverseAiryAi [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                   k_/; k < 1 && WholeNumberQ[k]] :=
  If [MachineNumberQ [zero] || MachineNumberQ[k],
      N [AiryAiZero[Round [1 - k]]],  (* AiryAiZero[wholeFloat]] does not work in Version 10.0.2.0 *)
      N [AiryAiZero[Round [1 - k]], {Infinity, Accuracy [{zero, k}]}]];

(* For x0 = AiryAiZero[1-k], consider using AiryAiPrime[x-x0]*(x-x0) when Abs[x-x0] < Sqrt[3*floatEpsilon/x0]: *)

(* These assignments to global variables such as $yLeft avoid some time-consuming duplication computation,
     but they are not thread safe.
   Is there a thread-safe way to avoid all duplicate and unnecessary computation?
   I particularly do not want to invoke FindRoot when the given y value is out of range! *)
RealInverseAiryAi [y_/; Abs[y] < 0.5356566560157`, (* :A quick strict bound. *)
                   k_/; k <= 0 && WholeNumberQ[k]] /;
  (Head[y] === Real || Head[k] === Real) &&
    ($yLeft = AiryAiInfimumOrSupremumOrdinate [$floatkMinus1 = (y - y) + k - 1];
     $yRight = AiryAiInfimumOrSupremumOrdinate [$floatk = $floatkMinus1 + 1];
     If [OddQ [Round[k]],
         $yRight <= y <= $yLeft,
         $yLeft <= y <= $yRight]) :=
  Module [{precision = Precision [$floatkMinus1],
           xLeft = AiryAiInfimumOrSupremumAbscissa [$floatkMinus1],
           xRight = AiryAiInfimumOrSupremumAbscissa [$floatk],
           guess, var},
    Assert [y != 0];
           guess = If [Abs [$yLeft - y] < Abs [$yRight - y],
                       xLeft + Sqrt [2.0 * Abs [($yLeft - y) / (xLeft * $yLeft)]],
                       xRight - Sqrt [2.0 * Abs [($yRight - y) / (xRight * $yRight)]]];
    Quiet [FindRoot [Re [AiryAi [var]] == y,   {var, guess, xLeft, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

RealInverseAiryAi [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                   one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  Infinity;

RealInverseAiryAi [AiryAiInfimumOrSupremumOrdinate [k_/; k <= 0 && WholeNumberQ [k]],
                   kPlus1_] /; kPlus1 == k + 1  :=
  AiryAiInfimumOrSupremumAbscissa [(kPlus1 - kPlus1) + k];

  (* Branch 1 is the default and what InverseFunction[AiryAi] [y] gives: *)

RealInverseAiryAi [y_] := RealInverseAiryAi [y, 1];

RealInverseAiryAi [] := {-Infinity, 1};  (* : This is all real branches, with 1 being the rightmost. *)
Protect [RealInverseAiryAi];


(* ::Subsection::Closed:: *)
(*RealInverseAiryBi*)


Unprotect [RealInverseAiryBi];
ClearAll [RealInverseAiryBi];

SetAttributes [RealInverseAiryBi, {NumericFunction, Listable}];

$AiryBiAccuracyDelta = $RealInverseAccuracyDelta + 0.1372658393903523`;
  (* :Abs[RealExponent [AiryBi[0.0]/AiryBiPrime[0.0]]] *)

  (* Some special values: *)

RealInverseAiryBi [y_Real, k_/; k <= 0 && WholeNumberQ [k]] /;
    y == AiryBiInfimumOrSupremumOrdinate [(y - y) + k] :=
  AiryBiInfimumOrSupremumAbscissa [(y - y) + k];

RealInverseAiryBi [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                   k_/; k <= 1 && WholeNumberQ[k]] :=
  If [MachineNumberQ [zero] || MachineNumberQ [k],
      N [AiryBiZero[Round [2 - k]]],
      N [AiryBiZero[Round [2 - k]], {Infinity, Accuracy [{zero, k}]}]];

RealInverseAiryBi [y_Real | y_Integer | y_Rational,
                   one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[one] === Real) &&
      y >= AiryBiInfimumOrSupremumOrdinate [$float0 = (y-y)/y - (one-one)] :=
  Module [{precision = Precision [{y, one}],
           xLeft = AiryBiInfimumOrSupremumAbscissa [$float0],
           guess, var},
    Assert [y != 0];
    guess = Which [y > 1.0367038491751195`,
                     (1.5*Log[1.7724538509055159`*y])^(2/3),
                   y < 0.009023710051651146`,
                     xLeft + Sqrt[Max [0.8716725112256338` + 1.9159979605684057`*y, 0.0]],
                   True,
                     -1.3717211641984484` + 2.2307070518244956`*y];
    Re [Quiet [FindRoot [Re [AiryBi [var]] == y,  {var, guess, xLeft, Infinity},
EvaluationMonitor :> ++$realInverseCount,
                         WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                         PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                         AccuracyGoal -> {If [Abs[y - 0.3550280538878173`] < 0.1,
                                              $AiryBiAccuracyDelta + precision,
                                              Infinity],  0.0}]][[1,2]]]];

  (* Returns x for branch k <= 0 such that AiryBi[x] == y: *)

(* For x0 = AiryBiZero[1-k], consider using AiryBiPrime[x-x0]*(x-x0) when Abs[x-x0] < Sqrt[3*floatEpsilon/x0]: *)

RealInverseAiryBi [y_/; Abs[y] < 0.4549443836396574`,  (* :A quick strict bound. *)
                   k_ /; k <= 0 && WholeNumberQ[k]] /;
  (Head[y] === Real || Head[k] === Real) &&
    ($floatkMinus1 = k - y/y;
     $yLeft = AiryBiInfimumOrSupremumOrdinate [$floatkMinus1];
     $yRight = AiryBiInfimumOrSupremumOrdinate [$floatk = $floatkMinus1 + 1];
     If [EvenQ [Round[k]],
         $yRight <= y <= $yLeft,
         $yLeft <= y <= $yRight]) :=
  Module [{precision = Precision [$floatkMinus1],
           xLeft = AiryBiInfimumOrSupremumAbscissa [$floatkMinus1],
           xRight = AiryBiInfimumOrSupremumAbscissa [$floatk],
           guess, var},
    guess = If [(*Abs [$yLeft - y] < Abs [$yRight - y],*)
                Sign [$yLeft] === Sign [y],
                xLeft + Sqrt [2.0 * Abs [($yLeft - y) / (xLeft * $yLeft)]],
                xRight - Sqrt [2.0 * Abs [($yRight - y) / (xRight * $yRight)]]];
    Assert [y != 0];
    Quiet [FindRoot [Re [AiryBi [var]] == y,  {var, guess, xLeft, xRight},
EvaluationMonitor :> ++$realInverseCount,
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

RealInverseAiryBi [AiryBiInfimumOrSupremumOrdinate [k_/; k <= 0 && WholeNumberQ [k]],
                   kPlus1_] /; kPlus1 == k + 1  :=
  AiryBiInfimumOrSupremumAbscissa [(kPlus1 - kPlus1) + k];

  (* Branch 1 is the default and what InverseFunction[AiryBi] [y] gives: *)

RealInverseAiryBi [y_] := RealInverseAiryBi [y, 1];

RealInverseAiryBi [Infinity, one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  Infinity;  (* Branch 1 returns -2.29444... <= x <= Infinity such that AiryBi[x] == y: *)

RealInverseAiryBi [] := {-Infinity, 1};  (* : This is all real branches, with 1 being the rightmost. *)
Protect [RealInverseAiryBi];


(* ::Subsection::Closed:: *)
(*RealInverseArithmeticGeometricMean1*)


Unprotect [RealInverseArithmeticGeometricMean1];
ClearAll [RealInverseArithmeticGeometricMean1];

SetAttributes [RealInverseArithmeticGeometricMean1, {NumericFunction, Listable}];

  (* Positive real y: *)

RealInverseArithmeticGeometricMean1 [
    y_/; y > 0,
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
      Head[y] === Real || Head[one] === Real :=
  If [$RealInverseUnderflowMachineNumberTo0Q && y < $ReciprocalAbsLogMinMachineNumber && 
       (MachineNumberQ[y] || MachineNumberQ[one]),
      0.0,
      Module [{precision = Precision [{y, one}],
               guess = Which [
                         y > 15.0,                 -1.0 + Exp [-ProductLog[-1, -y^-1]],
                         y > 0.8391773217118681`,  2.9474218223731254`*(-0.6607204328850198` + y),
                         True,                     4.0 * Sqrt[Exp [-\[Pi]/y]]],
               var},
      Quiet [FindRoot [ArithmeticGeometricMean [1, var] == y, {var, guess, 0, Infinity},
(*EvaluationMonitor :> ++$realInverseCount,*)
                       WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                       PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                       AccuracyGoal -> {Infinity, 0.0}]][[1,2]]]];

  (* Some special values: *)

RealInverseArithmeticGeometricMean1 [
  zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
  one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := zero;
  (* :Exact result for float zero because Limit[D[ArithmeticGeometricMean[1,x],x], x->0] returns Infinity. *)

RealInverseArithmeticGeometricMean1 [
  zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
  cero_/; cero == 0 && Accuracy[cero] > $MinWholeNumberAccuracy] := -1 + zero;  (* ?? *)

RealInverseArithmeticGeometricMean1 [Infinity,
  one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := Infinity;

  (* Branch 1 is the default: *)

RealInverseArithmeticGeometricMean1 [y_] :=
  RealInverseArithmeticGeometricMean1 [y, 1];

  (* Branch 0 is an isolated real value 0 at abscissa -1: *)
RealInverseArithmeticGeometricMean1 [] := {0, 1};
Protect [RealInverseArithmeticGeometricMean1];


(* ::Subsection::Closed:: *)
(*RealInverseBarnesG*)


Unprotect [RealInverseBarnesG];
ClearAll [RealInverseBarnesG];

SetAttributes [RealInverseBarnesG, {NumericFunction, Listable}];

  (* Branch 3 returns x >= 2.55766... such that BarnesG[x] == y: *)

RealInverseBarnesG [one_/; one == 1, uno_/; uno == 1] := one*uno;

RealInverseBarnesG [one_/; one == 1, two_/; two == 2] := one*two;

RealInverseBarnesG [one_/; one == 1, three_/; three == 3] := one*three;

RealInverseBarnesG [y_/; y > 0.9468456052697061,  (* :A close strict lower bound. *)
                    three_/; three == 3 && Accuracy[three] > $MinWholeNumberAccuracy] /;
    (Head[y] == Real || Head[three] == Real) &&
       y >= ($yLeft = BarnesGInfimumOrSupremumOrdinate [$float2 = three - y/y]) :=
  Module [{precision = Precision[$float2],
           xLeft = BarnesGInfimumOrSupremumAbscissa [$float2],
           guess, var},
    Assert [y > 0];
    guess = If [y > 2.048558754700491`,
                Exp [0.5 *(3.0 + ProductLog [0.19914827347145578` * Log[y]])], (* 0.19914827347145578 == 4/E^3 *)
                xLeft + Sqrt [4.454325085725663` * (y - $yLeft)]];
    Quiet [FindRoot [Re [BarnesG [var]] == y,
             {var, guess, xLeft, Infinity},
(*EvaluationMonitor:> ++$realInverseCount,*)
              WorkingPrecision -> Max [precision, $MinWorkingPrecision],
              PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
              AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Branch 2 returns 1.39147.... <= x <= 2.55766... such that BarnesG[x] == y: *)

RealInverseBarnesG [y_Real | y_Integer | y_Rational,
                    two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[two] === Real) &&
     (BarnesGInfimumOrSupremumOrdinate [$float2 = If [y == 0, (y - y) + two,
                                                      (y/y)*two]] <= 
         y <= BarnesGInfimumOrSupremumOrdinate [$float1 = $float2 - 1]) :=
  Module [{precision = Precision[$float2],
           xLeft = BarnesGInfimumOrSupremumAbscissa [$float1],
           xRight = BarnesGInfimumOrSupremumAbscissa [$float2],
           guess, var},
    Assert [y != 0];
    guess = If [y > 1.0199153614150056`,
                xLeft + Sqrt [-2.800914024370942`*(y - 1.073051785683102`)],
                xRight - Sqrt [4.454325085725663`*(y - 0.9468456052697061`)]];
    Quiet [FindRoot [Re [BarnesG [var]] == y,
      {var, guess, xLeft, xRight},
(*EvaluationMonitor:> ++$realInverseCount,*)
      WorkingPrecision -> Max [precision, $MinWorkingPrecision],
      PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
      AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

RealInverseBarnesG[zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                   k_/; k <= 1 && WholeNumberQ[k]] :=
  If [IntegerQ [zero],
      zero,
      ((zero (*+ k - k*)) / BarnesG[2 - k]) ^ (1/(2 - k))]; (* :Used series to properly set Accuracy. *)

  (* Branch 1 returns -0.366293... <= x <= 1.39147... such that BarnesG[x] == y: *)

(* The following definition is 7% slower than InverseFunction[BarnesG],
   but it is much more accurate near x = 0: *)
RealInverseBarnesG [y_Real | y_Integer | y_Rational,
                    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[one] === Real) &&
      ($yRight = BarnesGInfimumOrSupremumOrdinate [$float1 = (y/y) * one]) >=
        y >= ($yLeft = BarnesGInfimumOrSupremumOrdinate [$float0 = $float1 - $float1]) :=
  Module [{precision = Precision [$float1],
           xLeft = BarnesGInfimumOrSupremumAbscissa [$float0],
           xRight = BarnesGInfimumOrSupremumAbscissa [$float1],
           guess, var},
    Assert [y != 0];
    guess = Which [y < -0.07411882834438371`,
                      xLeft + Sqrt [0.7195006415611549`*(y - $yLeft)],
                   y > 1.0,
                      xRight - Sqrt [2.800914024370942`*($yRight - y)],
                   True,
                      y];
    Re [Quiet [FindRoot [Re [BarnesG [var]] == y,
          {var, guess, xLeft, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*)
          (*Method -> "Brent",*)
          WorkingPrecision -> Max [precision, $MinWorkingPrecision],
          PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
          AccuracyGoal -> {Infinity, 0.0}][[1,2]]]]];

  (* Non-positive branches that contain a stationary inflection: *)

RealInverseBarnesG [y_Real | y_Integer | y_Rational,
    k_/; First[RealInverseBarnesG[]] <= k <= -2 && WholeNumberQ[k] && Mod[Round[k],3] === 1] /;
  (Head[y] === Real || Head[k] === Real) &&
    (($yRight = BarnesGInfimumOrSupremumOrdinate [$floatk = (y/y)*k]) <=
        y <= ($yLeft = BarnesGInfimumOrSupremumOrdinate [$floatkMinus1 = $floatk - 1]) ||
      $yRight > y > $yLeft) :=
  Module [{precision = Precision[$floatk],
           xLeft = BarnesGInfimumOrSupremumAbscissa [$floatkMinus1],
           xRight = BarnesGInfimumOrSupremumAbscissa [$floatk],
           xEdge, guess, var},
    Assert [y != 0];
    guess = If [Sign[y] === Sign[$yLeft],
                If [Abs[y] < 0.43 * Abs[$yLeft],
                    -2.0 + 0.6666666666666666`*($floatk + 2.0)  (* : == right x *)
                      - (Abs[y] / BarnesG[2.0 - $floatk]) ^ (1.0/(1.0 - $floatk)),
                    xEdge = xLeft;
                    xEdge + Sqrt [2.0*Abs[($yLeft - y)/BarnesG''[xEdge]]]],
                If [Abs[y] < 0.43 * Abs[ $yRight],
                    -2.0 + 0.6666666666666666`*($floatk + 2.0)  (* : == left x *)
                      + (Abs[y] / BarnesG[2.0 - $floatk]) ^ (1.0/(1.0 - $floatk)),
                    xEdge = xRight;
                    xEdge - Sqrt [2.0*Abs[($yRight - y)/BarnesG''[xEdge]]]]];
    Quiet [FindRoot [Re [BarnesG [var]] == y,
                     {var, guess, xLeft, xRight},
(*EvaluationMonitor:> ++$realInverseCount,*)
                      WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                      PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                      AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Non-positive branches that do not contain a stationary inflection: *)

RealInverseBarnesG [y_Real | y_Integer | y_Rational,
                    k_/; First[RealInverseBarnesG[]] <= k <= 0 && WholeNumberQ[k]] /;
    (Head[y] === Real || Head[k] === Real) &&
      (($yRight = BarnesGInfimumOrSupremumOrdinate [($floatk = If [k == 0,
                                                                   (y - y)/y + k,
                                                                   (y/y)*k])]) <=
         y <= ($yLeft = BarnesGInfimumOrSupremumOrdinate [$floatkMinus1 = $floatk - 1]) ||
       $yRight > y > $yLeft) :=      
  Module [{precision = Precision [$floatkMinus1],
           xLeft = BarnesGInfimumOrSupremumAbscissa [$floatkMinus1],
           xRight = BarnesGInfimumOrSupremumAbscissa [$floatk],
           xEdge, guess, var},
    Assert [y != 0];
    guess = If [$yLeft != 0,
                Assert [$yRight == 0];
                If [Abs[y] < 0.43 * Abs[$yLeft],
                    Quotient[2*Round[k] - 1, 3]  (* : == xRight *)
                      - (Abs[y] / BarnesG[2.0 - $floatk]) ^ (1.0/(1.0 - $floatk)),
                    xEdge = xLeft;
                    xEdge + Sqrt [2.0*Abs[($yLeft - y)/BarnesG''[xEdge]]]],
                Assert [$yRight != 0];
                If [Abs[y] < 0.43 * Abs[$yRight],
                    Quotient[2*Round[k] - 1, 3]  (* : == xLeft *)
                      + (Abs[y] / BarnesG[2.0 - $floatk]) ^ (1.0/(2.0 - $floatk)),
                    xEdge = xRight;
                    xEdge - Sqrt [2.0*Abs[($yRight - y)/BarnesG''[xEdge]]]]];
    Quiet [FindRoot [Re [BarnesG [var]] == y,
                     {var, guess, xLeft, xRight},
(*EvaluationMonitor:> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Branch 1 is the default and what InverseFunction[BarnesG] [y] gives: *)

RealInverseBarnesG [y_] := RealInverseBarnesG [y, 1];

  (* Some special values: *)

RealInverseBarnesG [Infinity,
                    three_/; three == 3 && Accuracy[three] > $MinWholeNumberAccuracy] := Infinity;

RealInverseBarnesG [] := {-8, 3};
 (* :In principle, works for all negative n, but Plot[BarnesG[x], {x,-7,-6}]
    reveals problems below -8, and there is Overflow[] at n = -11 and clips to bounds at n = -10. *)
Protect [RealInverseBarnesG];


(* ::Subsection::Closed:: *)
(*RealInverseBesselI*)


Unprotect [RealInverseBesselI, $RealInverseBesselIParameterRange];
ClearAll [RealInverseBesselI];

SetAttributes [RealInverseBesselI, {NumericFunction, Listable}];

$BesselIAccuracyDelta = -2.0;

$RealInverseBesselIParameterRange = {-Infinity, Infinity};

RealInverseBesselI [] := {0, 2};  (* :I think that his is all real branches over all real parameters,
  but I have not implemented the isolated inverses for negative x with non-integer negative r. *)

  (* There is only real branch 1 for parameters that are odd or positive non-whole real numbers: *)

RealInverseBesselI [(r_Integer | r_Real | r_Rational)] :=
  If [WholeNumberQ[r],
      If [EvenQ [Round[r]],
          {0, 1},
          {1, 1}],
      If [r < 0,
          If [OddQ [Floor[r]],
              {1, 2},
              {0, 1}],
          {1, 1}]];

  (* Branch 1 is the default and what InverseFunction[BesselK] [y] gives. *)

RealInverseBesselI [r_, y_] := RealInverseBesselI [r, y, 1];

  (* Exploit symmetry to compute for negative whole-number parameter n: *)

RealInverseBesselI [n_/; n < 0 && WholeNumberQ[n],
                    y_,
                    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  RealInverseBesselI [-n, y, one];

  (* Exploit symmetry to compute the 0 branch for non-negative even n: *)

RealInverseBesselI [n_/; n >= 0 && WholeNumberQ[n] && EvenQ[Round[n]],
                    y_,
                    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  -RealInverseBesselI [n, y, 1 + zero];

  (* Exploit symmetry to compute the negative half of the 1 branch for negative odd n: *)

RealInverseBesselI [n_/; (*n > 0 &&*) WholeNumberQ[n] && OddQ[Round[n]],
                    y_/; y < 0,
                    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  -RealInverseBesselI [n, -y, one];

  (* Some trivial special values: *)

RealInverseBesselI [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy,
                    uno_/; uno == 1 && Accuracy[uno] > $MinWholeNumberAccuracy] :=
  Sqrt [4*(zero + one - uno)];  (* Abs ?? *) (* : Used series wrto y to compute a more correct Accuracy. *)

RealInverseBesselI [r_/; r > 0,
                    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  (zero * (2*r)!!) ^ (one/r);  (* : Used series with respect to y to compute a more correct Accuracy. *)

RealInverseBesselI [r_/; r < 0 && Accuracy[r] > $MinWholeNumberAccuracy &&
                         EvenQ [Floor[r]],
                    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  BesselIZero [r + zero, one];

RealInverseBesselI [
  r_/; r < 0 && Accuracy[r] > $MinWholeNumberAccuracy && r != Round[r] && OddQ[Floor[r]],
  Infinity,
  one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := (r/r) - one;

RealInverseBesselI [
    r_/; r < 0 && Accuracy[r] > $MinWholeNumberAccuracy && r != Round[r] && EvenQ[Floor[r]],
    -Infinity,
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := (one - one) + (r - r);

RealInverseBesselI [r_/; r >= 0 || WholeNumberQ[r] || EvenQ[Floor[r]],
                    Infinity,
                    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := Infinity;

RealInverseBesselI [r_/; r < 0 && ! WholeNumberQ[r] && OddQ[Floor[r]],
                    Infinity,
                    two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] := Infinity;  (* Parameter 0 is a special case: *)

  (* Parameter == 0 is a special case: *)

RealInverseBesselI [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                    y_/; y > 1 && Accuracy[y] > $MinWholeNumberAccuracy,
                    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    Head[y] === Real || Head[zero] === Real || Head[one] === Real :=
  Module [{precision = Precision [y + one + zero],
           guess = If [y > 2.4590534595396947`,
                       Mean [{Log [1.0 + 2.5066282746310002`*y], (* 2.5066282746310002 == Sqrt[2.0*\[Pi]] *)
                              -ProductLog [-1.0, - (2.5066282746310002`*y + 1.0) ^ -1]}],
                       2.0 * Sqrt [y - 1.0]],
           var},
    Quiet [FindRoot [BesselI [0, var] == y,  {var, guess, 0, Infinity},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> If [y < 1.01,
                                         {0.0, $BesselIAccuracyDelta + precision},
                                         {Infinity, 0.0}]]][[1,2]]];

  (* Positive parameter r, where there is only branch 1: *)

RealInverseBesselI [r_/; r > 0 && Accuracy[r] > $MinWholeNumberAccuracy,
                    y_/; y > 0 && Accuracy[y] > $MinWholeNumberAccuracy,
                    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    Head[y] === Real || Head[r] === Real || Head[one] === Real :=
  Module [{absY = Abs [y],
           precision = Precision [{y, r, one}],
           guess, var},
    guess = If [absY > 0.05173609513299951` + 1.6206860812409978`/(0.6732332451066045` + r),
                Mean [{Log [1.0 + 2.5066282746310002`*absY],
                       -ProductLog [-1.0, -(1.0/(2.5066282746310002`*absY + 2.0^r))]}],
                2.0 * (r! * absY)^(1/r)] * Sign [y];
    Assert [y != 0];
    Quiet [FindRoot [Re [BesselI[r, var]] == y, {var, guess, 0, Infinity},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Negative parameter r where there is only branch 1: *)

RealInverseBesselI [r_/; r < 0 && Accuracy[r] > $MinWholeNumberAccuracy && EvenQ[Floor[r]],
                    y_/; Accuracy[y] > $MinWholeNumberAccuracy,
                    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[r] === Real || Head[one] === Real) :=
  Module [{precision = Precision [{y, r, one}],
           machiner, x0, gamma, y0, guess, var},
    Assert [y != 0];
    guess = If [y > 2.1,
                  0.5*(Log[2.5066282746310002`*y] - ProductLog[-1, (-2.5066282746310002` y)^-1]),
                machiner = N[r];
                x0 = BesselIZero [machiner, one];
                gamma = Gamma[1.0 + machiner];
                y0 = (0.5*x0)^machiner / gamma;
                If [y < y0,
                    2.0*(gamma*y - y0) ^ (machiner ^ -1),
                    x0 + y / (D[BesselI[machiner, var], var] /. var -> x0)]];
    Quiet [FindRoot [Re [BesselI[r, var]] == y, {var, guess},  (* :-Infinity, Infinity *)
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Negative parameter r.  Branch 1 when there is also a branch 2: *)

RealInverseBesselI [r_/; r < 0 && Accuracy[r] > $MinWholeNumberAccuracy && OddQ[Floor[r]],
                    y_/; Accuracy[y] > $MinWholeNumberAccuracy,
                    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[r] === Real || Head[one] === Real) &&
       y >= BesselIInfimumOrSupremumOrdinate [r, $float1 = (r/r)*(y/y)*one] :=
  Module [{precision = Precision [$float1],
           xMin, yMin, guess, var},
    xMin = BesselIInfimumOrSupremumAbscissa [r, $float1];
    yMin = BesselIInfimumOrSupremumOrdinate [r, $float1];
    guess = Max [Min [0.95 * xMin,  (2.0^r*Gamma[1.0 + r]*y) ^ (1.0/r)],
                 xMin - Sqrt [Max [0.0, 2.0*(y - yMin)
                                         / (D[BesselI[r,var], {var,2}] /. var -> xMin)]]];
    Assert [y != 0];
    Quiet [FindRoot [Re [BesselI[r, var]] == y, {var, guess, 0, xMin},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0}]][[1,2]]];

  (* Negative parameter r.  Branch 2: *)

RealInverseBesselI [r_/; r < 0 && Accuracy[r] > $MinWholeNumberAccuracy && OddQ[Floor[r]],
                    y_/; y > 0 && Accuracy[y] > $MinWholeNumberAccuracy,
                    two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[r] === Real || Head[two] === Real) &&
      y >= BesselIInfimumOrSupremumOrdinate [r, $float1 = two - (r/r)*(y/y)] :=
  Module [{precision = Precision [$float1],
           xMin = BesselIInfimumOrSupremumAbscissa [r, $float1],
           guess, var},
    Assert [y != 0];
    guess = If [y > 8.0,
                0.5*(Log[2.5066282746310002`*y] - ProductLog[-1, (-2.5066282746310002` y)^-1]),
                xMin + Sqrt[Max [0.0, 2.0*(y - BesselIInfimumOrSupremumOrdinate [r, 1.0])
                                      / (D[BesselI[r,var], {var, 2}] /. var -> xMin)]]];
    Quiet [FindRoot [Re [BesselI[r, var]] == y, {var, guess, xMin, Infinity},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];
Protect [RealInverseBesselI, $RealInverseBesselIParameterRange];


(* ::Subsection::Closed:: *)
(*RealInverseBesselJ*)


Unprotect [RealInverseBesselJ, $RealInverseBesselJParameterRange];
ClearAll [RealInverseBesselJ];

SetAttributes [RealInverseBesselJ, {NumericFunction, Listable}];

$BesselJAccuracyDelta = -2.0;

$RealInverseBesselJParameterRange = {-Infinity, Infinity};
 (* Negative non-whole parameters are not implemented because for x > 0 they have complicated exprema
    locuses that end at an inflection, and because they also have isolated real inverses for negative x. *)

  (* Exploit symmetry to compute non-positive branches: *)

RealInverseBesselJ [n_/; WholeNumberQ[n],
                    y_,
                    k_/; k <= 0 && WholeNumberQ[k]] :=
  -If [EvenQ [Round [n]],
       RealInverseBesselJ [n, y, 1 - k],
       RealInverseBesselJ [n, -y, 2 - k]];

(* Exploit symmetry to compute for negative whole-number indices: *)

RealInverseBesselJ [n_/; n < 0 && WholeNumberQ[n],  y_,  k_] :=
  RealInverseBesselJ [-n,  If [EvenQ [Round [n]],
                                y,
                                -y],  k];

(* Exploit symmetry to compute left half of first branch for odd n: *)

RealInverseBesselJ [n_/; WholeNumberQ[n] && OddQ[Round[n]],
                    y_/; y < 0 && Accuracy[y] > $MinWholeNumberAccuracy,
                    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  -RealInverseBesselJ [n, -y, one];

  (* Special values: *)

RealInverseBesselJ [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy,
                    uno_/; uno == 1 && Accuracy[uno] > $MinWholeNumberAccuracy] :=
  Sqrt [4*((one - one) + zero)];  (* : Used series for more correct Accuracy computation. *)

 (* RealInverseBesselJ [0, y, 1]: *)

RealInverseBesselJ [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                    y_/; -0.402759395702553` < y < 1 && Accuracy[y] > $MinWholeNumberAccuracy,
                    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    Head[y] === Real || Head[zero] === Real || Head[one] === Real :=
  Module [{precision = Precision [zero + one + y],
           xRight = BesselJInfimumOrSupremumAbscissa [zero, (y - y) + one],
           guess, var},
    Assert [y != 0];
    guess = If [y > 0.40437917824064684`,
                2.0 * Sqrt [1.0 - y],
                xRight - Sqrt [Max [0.0, 2.000000000000001` + 4.965743869267907`*y]]];
    Quiet [FindRoot [BesselJ [0, var] == y,  {var, guess, 0, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> If [y > 0.99,
                                         {0.0, $BesselJAccuracyDelta + precision},
                                         {Infinity, 0.0}]]][[1,2]]];

RealInverseBesselJ [n_/; n > 0 && Accuracy[n] > $MinWholeNumberAccuracy,
                    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  ((2*n)!! * ((one - one) * zero)) ^ (1/n);  (* : Used series for more correct Accuracy computation. *)

RealInverseBesselJ [n_/; n >= 0 && Accuracy[n] > $MinWholeNumberAccuracy,
                    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                    k_/; WholeNumberQ[k]] := BesselJZeroRemember [n, k + zero]; (* : Propagate Accuracy[zero]. *)

 (* RealInverseBesselJ [1, y, 1] : *)

RealInverseBesselJ [one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy,
                    y_/; 0 < y < 0.5818652242815964` && Accuracy[y] > $MinWholeNumberAccuracy,
                    uno_/; uno == 1 && Accuracy[uno] > $MinWholeNumberAccuracy] /;
    Head[y] === Real || Head[one] === Real || Head[uno] === Real :=
  Module [{precision = Precision [y + one + uno],
           xRight = BesselJInfimumOrSupremumAbscissa [one, (y - y) + uno],
           guess, var},
    Assert [y > 0];
    guess = If [y < 0.3094433665657142`,
                2.0 * y,
                xRight - Sqrt [Max [0.0, 2.8368348887716217` - 4.875415767068978`*y]]];
    Quiet [FindRoot [BesselJ [one, var] == y,  {var, guess, 0, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

 (* RealInverseBesselJ [r > 0, y > 0, 1] : *)

RealInverseBesselJ [r_/; r > 0 && Accuracy[r] > $MinWholeNumberAccuracy,
                    y_/; y > 0 && Accuracy[y] > $MinWholeNumberAccuracy,
                    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
   (Head[y] === Real || Head[r] === Real || Head[one] === Real) && y <= 
      ($yRight = BesselJInfimumOrSupremumOrdinate [$r = (y - y) + r, one]) :=
  Module [{precision = Precision [{$r, one}],
           xRight = BesselJInfimumOrSupremumAbscissa [$r, one],
           guess, var},
    guess = xRight - Sqrt[(2.0 / D [BesselJ [r, var], {var, 2}] /. var -> xRight)
                                 *(y - $yRight)];
    guess = Which [r < 0.8,
                     Max [guess, 2.0 * (r! * y)^(r^-1)],
                   y > (0.03399896653660787`
                        + 0.6191155095988193` * Exp [-0.1110761557615487` * r]) * $yRight,
                     guess,
                   True,
                     2.0 * (r! * y)^(r^-1)];
    Quiet [FindRoot [BesselJ [r, var] == y,  {var, guess, 0, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*) 
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* RealInverseBesselJ [r >= 0, y, k > 1] : *)

RealInverseBesselJ [(r_Integer | r_Real | r_Rational) /; r >= 0,
                    y_,
                    k_/; k > 1 && WholeNumberQ[k]] /;
    (Head[y] === Real || Head[r] === Real || Head[k] === Real) &&
      (($yLeft = BesselJInfimumOrSupremumOrdinate [$r = (y/y)*r, k - 1]) <= y <=
        ($yRight = BesselJInfimumOrSupremumOrdinate [$r, k]) || $yLeft >= y >= $yRight) :=
  Module [{precision = Precision [{k, If [$r == 0, $r + 1, $r]}],
           xLeft = BesselJInfimumOrSupremumAbscissa [$r, k - 1],
           xRight = BesselJInfimumOrSupremumAbscissa [$r, k],
           guess, var},
    Assert [y != 0.0];
    guess = xLeft + (xRight - xLeft) *
              ArcCos [Clip[(2.0 * y - $yLeft - $yRight) / ($yLeft - $yRight)]] / Pi;
    Quiet [FindRoot [BesselJ [r, var] == y,  {var, guess, xLeft, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Default Branch is branch 1: *)

RealInverseBesselJ [n_, y_] := RealInverseBesselJ [n, y, 1];

RealInverseBesselJ [r_/; r >= 0,  zero_/; zero == 0,  Infinity] := Infinity;

RealInverseBesselJ [] := {-Infinity, Infinity};  (* ?? *)

RealInverseBesselJ [(r_Integer | r_Real | r_Rational)] :=
  If [WholeNumberQ [r],
      {-Infinity, Infinity},
      {1, Infinity}];

Protect [RealInverseBesselJ, $RealInverseBesselJParameterRange];


(* ::Subsection::Closed:: *)
(*RealInverseBesselK*)


Unprotect [RealInverseBesselK, $RealInverseBesselKParameterRange];
ClearAll [RealInverseBesselK];

SetAttributes [RealInverseBesselK, {NumericFunction, Listable}];

$RealInverseBesselKParameterRange = {-Infinity, Infinity}; 

  (* Some special values: *)

RealInverseBesselK [r_,
  zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
  one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := Infinity;

RealInverseBesselK [r_Integer | r_Real | r_Rational,
                    Infinity,
                    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  (one - one) + (r - r);

  (* General floating-point y: *)

RealInverseBesselK [r_/; r >= 0,
                    y_/; y > 0,
                    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    Head[y] === Real || Head[r] === Real || Head[one] === Real :=
  Module [{precision = Precision [{y, r, one}],
           guess, var},
    guess = Switch [Round [r],  (* Refine dependence on r ?? *)
              0,  Which [y < 0.628296489926303`,
                           Log [1.2533141373155001` / y],  (* 1.2533141373155001` == Sqrt [0.5*Pi] *)
                         $RealInverseUnderflowMachineNumberTo0Q &&
                              precision === MachinePrecision &&
                              y > $AbsLogMinMachineNumber - 2.0,                              
                           0.0,
                         True,  2.0*Exp [-EulerGamma - y]],
              1,  If [y < 0.3248621399497435`,
                      Log [1.2533141373155001` / y],
                      guess = 1.2318630313168248`; (* 1.2318630313168248` == 1.0 - 2.0*EulerGamma + 2.0*Log[2.0] *)
                      -2.0*y / guess + 2.0*Sqrt[y^2 +guess] / guess],
              _,  If [y < 3.276369192506156`/(5.4908754013071945` + r ^ 3),
                      Log [1.2533141373155001` / y],
                      2.0*(Gamma[r]/(2.0*y))^(1/r)]];
    If [guess == 0,
        guess,
        Quiet [FindRoot [Re [BesselK[r, var]] == y, {var, guess, 0, Infinity},
(*EvaluationMonitor :> ++$realInverseCount,*)
                         WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                         PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                         AccuracyGoal -> {Infinity, 0.0}]][[1,2]]]];

  (* Branch 1 is the default: *)

RealInverseBesselK [r_, y_] := RealInverseBesselK [r, y, 1];

RealInverseBesselK [] := {1, 1};
  (* :Not implemented, isolated branch 0 for x < 0 with 1 < |r| < 2, 3 < |r| < 4, etc. *)

Protect [RealInverseBesselK, $RealInverseBesselKParameterRange];


(* ::Subsection::Closed:: *)
(*RealInverseBesselY*)


Unprotect [RealInverseBesselY, $RealInverseBesselYParameterRange];
ClearAll [RealInverseBesselY];

SetAttributes [RealInverseBesselY, {NumericFunction, Listable}];

$RealInverseBesselYParameterRange = {-Infinity, Infinity};

  (* Exploit symmetry for negative whole-number parameters n: *)

RealInverseBesselY [n_/; n < 0 && WholeNumberQ[n],
                    y_Real | y_Integer | y_Rational,
                    k_/; k > 0 && WholeNumberQ[k]] :=
  If [OddQ[Round[n]],
      RealInverseBesselY [-n, -y, k],
      RealInverseBesselY [-n, y, k]];

  (* Special values: *)

RealInverseBesselY [r_Real | r_Integer | r_Rational, 
                    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                    k_/; k > 0 && WholeNumberQ[k]] := BesselYZeroRemember [r, k + zero];

RealInverseBesselY [
  r_/; r > -1/2 || 1 > Mod[r + 1/2, 2] > 0 && Accuracy[r] > $MinWholeNumberAccuracy,
  -Infinity,
  one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := (r - r) + (one - one)  (* :0 ?? *);

 (* Inverse for the first branch of BesselY [n, x] for integer n >= 0: *)

RealInverseBesselY [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                    y_/; y <= 0.52078641240226752`,
                    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    Head[y] === Real || Head[zero] === Real || Head[one] === Real :=
  Module [{precision = Precision [zero + one - y],
           xRight, guess, var},
    Assert [y != 0.0];
    If [$RealInverseUnderflowMachineNumberTo0Q && precision === MachinePrecision &&
           y < 1.0 - $AbsLogMinMachineNumber,
        0.0,
        xRight = BesselYInfimumOrSupremumAbscissa [zero, (y/y)*one];
        guess = Which [y < -0.3912960779120256`,
                         2.0 * Exp [-EulerGamma + 1.5707963267948966`*y],
                       y < 0.2146058996238252`,
                         0.893576966280575` + 1.1371120596214972`*y,
                       True,
                         guess = 2.0`  - 3.8403459698083546`*y;
                         xRight - If [guess > 0.0,  Sqrt[guess],  0.0]];
        Quiet [FindRoot [BesselY [0, var] == y,  {var, guess, 0, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*)
                         WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                         PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                         AccuracyGoal -> {Infinity, 0.0}]][[1,2]]]];

  (* Do we need this special treatment for r == 1 ?? *)

RealInverseBesselY [one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy,
                    y_Real /; y < 0.41672992810645138`,
                    uno_/; uno == 1 && Accuracy[uno] > $MinWholeNumberAccuracy] /;
    Head[y] === Real || Head[one] === Real || Head[uno] === Real :=
  Module [{precision = Precision [one + uno - y],
           xRight = BesselYInfimumOrSupremumAbscissa [one, (y/y)*uno],
           guess, var},
    Assert [y != 0];
    guess = If [y < -0.3878933896233279`,
                -0.6366197723675814` / y,
                guess = 2.1591766446435843` - 5.181237293070143`*y;
                xRight - If [guess > 0.0,  Sqrt[guess],  0.0]];
    Quiet [FindRoot [BesselY [1, var] == y,  {var, guess, 0, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

 (* TO DO: Separately implement r == -1/2 ?? (Because BesselY[-1/2, 0] == 0.) *)

RealInverseBesselY [r_/; r >= 0.1 && Accuracy[r] > $MinWholeNumberAccuracy,
                    y_,
                    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[one] === Real || Head[r] === Real) &&
      y < ($yRight = BesselYInfimumOrSupremumOrdinate [$r = (y/y)*r, one]) :=
  Module [{precision = Precision [{$r, one}],
           xRight = BesselYInfimumOrSupremumAbscissa [$r, one],
           guess, var},
    guess = Which [y < -0.9,
                     2.0 * (-((-1+r)!/(\[Pi]*y)))^(1/r),
                   y < 0.5 * $yRight,
                     guess = BesselYZero[r, 1.0];
                     guess - y / BesselY[1 + r, guess],
                   True,
                     xRight - Sqrt [Max [0.0, 2.0 (y - $yRight)
                       / (BesselY[-2 + r, xRight] - 2.0*$yRight + BesselY[2 + r, xRight])]]];
    Assert [y != 0.0];
    Quiet [FindRoot [Re[BesselY [r, var]] == y,  {var, guess, 0, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Inverse for the kth real branch of BesselY [r, x] with r >= -1/2 and k > 1: *)

RealInverseBesselY [r_/; r >= -1/2 && Accuracy[r] > $MinWholeNumberAccuracy,
                    y_, 
                    k_/; k > 1 && WholeNumberQ[k]] /;
    (Head[y] === Real || Head[k] === Real || Head[r] === Real) &&
      (($yRight = BesselYInfimumOrSupremumOrdinate [r, $floatk = (r - r) + (y/y)*k]) >=
         y >= ($yLeft = BesselYInfimumOrSupremumOrdinate [r, $floatkMinus1 = $floatk - 1]) ||
       $yRight <= y <= $yLeft) :=
  Module [{precision = Precision [$floatk],
           xLeft = BesselYInfimumOrSupremumAbscissa [r, $floatkMinus1],
           xRight = BesselYInfimumOrSupremumAbscissa [r, $floatk],
           guess, var},
    Assert [y != 0.0];
           guess = xLeft + (xRight - xLeft)
                    * ArcCos [Clip[(2.0 * y - $yLeft - $yRight) / ($yLeft - $yRight)]] / Pi;
    Quiet [FindRoot [BesselY [r, var] == y,  {var, guess, xLeft, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Default Branch is branch 1: *)

RealInverseBesselY [r_, y_] := RealInverseBesselY [r, y, 1];

RealInverseBesselY [r_Real | r_Integer | r_Rational,
                    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                    Infinity] := Infinity;

RealInverseBesselY [
  r_/; r < -1/2 && Mod[r + 1/2, 2] > 1 && Accuracy[r] > $MinWholeNumberAccuracy,
  Infinity, 
  one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := r/r - one;

RealInverseBesselY [] := {1, Infinity};
  (* Not implemented: real inverses that are isolated with respect to x for negative x. *)
Protect [RealInverseBesselY, $RealInverseBesselYParameterRange];


(* ::Subsection::Closed:: *)
(*RealInverseCoshIntegral*)


Unprotect [RealInverseCoshIntegral];
ClearAll [RealInverseCoshIntegral];

SetAttributes [RealInverseCoshIntegral, {NumericFunction, Listable}];

  (* Some special values: *)

RealInverseCoshIntegral [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  CoshIntegralZero [zero + 1]; (* : Propagate Accuracy. *)

  (* General real argument y: *)

RealInverseCoshIntegral [y_Real] :=
  Module [{precision = Precision [y],
           guess, var},
    Assert [y != 0];
    If [$RealInverseUnderflowMachineNumberTo0Q && precision === MachinePrecision &&
          y < 1.0 - $AbsLogMinMachineNumber,
        0.0,
        guess = Which [y < 0.5632568464841183`,  Exp [y - EulerGamma],
                       y < 3.4805354346822623`,  1.5430806348152437` * y - 0.7052136938350355`,
                       True,                     -ProductLog[-1, -(2.0 * y) ^ -1]];
        Quiet [FindRoot [Re[CoshIntegral [var]] == y,  {var, guess},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]]];

  (* There is only one real branch, so it is default: *)

RealInverseCoshIntegral [y_,
    one_/; one == 1  && Accuracy[one] > $MinWholeNumberAccuracy] :=
  RealInverseCoshIntegral [(one - one) + y];

RealInverseCoshIntegral [Infinity] := Infinity;

RealInverseCoshIntegral [-Infinity] := 0;

RealInverseCoshIntegral [] := {1, 1};
Protect [RealInverseCoshIntegral];


(* ::Subsection::Closed:: *)
(*RealInverseCosIntegral*)


Unprotect [RealInverseCosIntegral];
ClearAll [RealInverseCosIntegral];

SetAttributes [RealInverseCosIntegral, {NumericFunction, Listable}];

  (* Some special values: *)

RealInverseCosIntegral [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                        k_/; k > 0 && WholeNumberQ [k]] :=
  CosIntegralZero [zero + k];  (* : Propagate Accuracy. *)

RealInverseCosIntegral [-Infinity,
                        one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  0;  (* one - one ?? *)  (* ExactRealInverseIfPossible ?? !! *)

  (* General float y value: *)

RealInverseCosIntegral [y_/; y <= 0.4720006514395687, (* :Close strict upper bound. *)
                        one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[one] === Real) &&
     (($machineFloatQ = MachineNumberQ[y] || MachineNumberQ[one]) ||
      y <= CosIntegralInfimumOrSupremumOrdinate [(y-y) + one]) :=
  If [$machineFloatQ && $RealInverseUnderflowMachineNumberTo0Q && y < 1.0 - $AbsLogMinMachineNumber,
      0.0,  (* :Forced underflow to 0.0 *)
      Module [{precision = Precision [{y, one}],
               guess = If [y < 0.23704530067108526`,
                           Exp [y - EulerGamma], (* ?? !! *)
                           1.5707963267948966`
                             - Sqrt [3.141592653589793`*(0.4720006514395687` - y)]],
               var},
        Assert [y != 0];
        Quiet [FindRoot [CosIntegral [var] == y,  {var, guess, 0, Pi/2},
(*EvaluationMonitor :> ++$realInverseCount,*)
                         WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                         PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                         AccuracyGoal -> {Infinity, 0.0}]][[1,2]]]];

RealInverseCosIntegral [y_/; y <= 0.4720006514395687,  (* :Strict upper bound. *)
                        k_/; k > 1 && WholeNumberQ [k]] /;
  (Head[y] === Real || Head[k] === Real) &&
    ($yRight = CosIntegralInfimumOrSupremumOrdinate [$floatk = (y/y)*k];
     $yLeft = CosIntegralInfimumOrSupremumOrdinate [$floatk - 1];
     If [EvenQ [Round [k]],
         $yRight <= y <= $yLeft,
         $yLeft <= y <= $yRight]) :=
  Module [{precision = Precision [$floatk],
           xLeft = ($floatk - 3/2) * Pi,
           xRight, guess, var},
    Assert [y != 0];
    xRight = xLeft + Pi;
    guess = If [Abs [$yRight - y] < Abs [$yLeft - y],
                xRight - Sqrt [Sign[$yRight] * (6.2831853071795865`*k - 1.0) * ($yRight - y)],
                xLeft + Sqrt [Sign [$yLeft] * (6.2831853071795865`*k - 3.0)*k * ($yLeft - y)]];
    Quiet [FindRoot [CosIntegral [var] == y,  {var, guess(*, xLeft, xRight*)},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Default branch number is 1: *)

RealInverseCosIntegral [y_] := RealInverseCosIntegral [y, 1];

RealInverseCosIntegral [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                        Infinity] := Infinity;

RealInverseCosIntegral [] := {1, Infinity};  (* : This is all real branches, with 1 being the leftmost. *)
Protect [RealInverseCosIntegral];


(* ::Subsection::Closed:: *)
(*RealInverseDawsonF*)


Unprotect [RealInverseDawsonF];
ClearAll [RealInverseDawsonF];

SetAttributes [RealInverseDawsonF, {NumericFunction, Listable}];

(* Special values: *)

RealInverseDawsonF [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := (one - one) + zero;

  (* Branch 1 returns -0.924139... < x < 0.924139... such that DawsonF[x] == y: *)

RealInverseDawsonF [y_Real | y_Integer | y_Rational,
                    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[one] === Real) &&
     Abs[y] <= ($yMax = DawsonFInfimumOrSupremumOrdinate [$float1 = (y/y)*one]) :=
  Module [{absY = Abs [y],
           precision = Precision [$float1],
           xMax = DawsonFInfimumOrSupremumAbscissa [$float1],
           guess, var},
    guess = If [absY < 0.45,
                y * (1.0 + 0.6666666666666667 * y * y),
                Sign[y] *  (* Sqrt[2/DawsonF''[xMax]*(absY - $yMax)]: *)
                 (xMax - Sqrt [($yMax - absY) / (xMax + (1.0 - 2.0 * xMax * xMax) * $yMax)])];
    Assert [y != 0];
    Quiet [FindRoot [DawsonF[var] == y,  {var,  guess,  -xMax,  xMax},
(*EvaluationMonitor :> ++$realInverseCount,*)
      WorkingPrecision -> Max [precision, $MinWorkingPrecision],
      PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
      AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Branch 2 returns x > 0.924139... such that DawsonF[x] == y: *)

RealInverseDawsonF [y_ /; y > 0,
                    two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] /;
  (Head[y] === Real || Head[two] === Real) &&
    y <= ($yMax = DawsonFInfimumOrSupremumOrdinate [$float1 = two - y/y]) :=
  Module [{precision = Precision [$float1],
           xMax = DawsonFInfimumOrSupremumAbscissa [$float1],
           guess, var},
    guess = If [y < 0.3197620147070163`,
                0.5 * y ^ -1,  (* Sqrt[2/DawsonF''[xMax]*(absY - $yMax)]: *)
                xMax + Sqrt [($yMax - y) / (xMax + (1.0 - 2.0 * xMax * xMax) * $yMax)]];
    Quiet [FindRoot [DawsonF[var] == y,  {var,  guess,  xMax,  Infinity},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

RealInverseDawsonF [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                    two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] := Infinity;

  (* Branch 1 is the default and what InverseFunction[DawsonF] [y] gives: *)

RealInverseDawsonF [y_] := RealInverseDawsonF [y, 1];

  (* Branch 0 returns x < -0.924139... such that DawsonF[x] == y: *)

RealInverseDawsonF [y_/; y <= 0 && Accuracy[y] > $MinWholeNumberAccuracy,
                    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  -RealInverseDawsonF [-y, zero + 2];  (* : Propagate Accuracy[zero]. *)

RealInverseDawsonF [] := {0, 2}; (* This is all real branches, with 2 being the rightmost *)
Protect [RealInverseDawsonF];


(* ::Subsection::Closed:: *)
(*RealInverseDirichletBeta*)


Unprotect [RealInverseDirichletBeta];
ClearAll [RealInverseDirichletBeta];

SetAttributes [RealInverseDirichletBeta, {NumericFunction, Listable}];

$DirichletBetaAccuracyDelta =
  $RealInverseAccuracyDelta + RealExponent [DirichletBeta[0.0]/DirichletBeta'[0.0]];

  (* Special values: *)

RealInverseDirichletBeta [zero_/; zero == 0  && Accuracy[zero] > $MinWholeNumberAccuracy,
                          k_/; k <= 1 && WholeNumberQ[k]] :=
  (2*k - 3) + zero;  (* For significance floats we could Increase the result Accuracy as k -> -Infinity *)

  (* General case for branch 1: *)

RealInverseDirichletBeta [y_/; -0.5301184975052127` <= y < 1,
                          one_/; one == 1  && Accuracy[one] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[one] === Real) && (MachineNumberQ[y] || MachineNumberQ[one] ||
      y >= DirichletBetaInfimumOrSupremumOrdinate [(y - y) + (one - one)]) :=
  Module [{precision = Precision [{y, one}],
           guess1, guess2, method, var},
    Assert [y != 0];
    Which [y < 0,  (*guess1 = 1.714907565066381` * (-0.583121808061586` + y);*)
                   guess1 = 7.29642610424368`  - Sqrt[68.8306861031759`  - 28.45520777836065`*y];
                   guess2 = -2.226136951380778` + 1.235786910540439` * Sqrt[y + 0.5301184975666305`];
                   method = "Brent",
           y < 0.796,  guess1 = 0.0069 + 1.68186893029023` - Sqrt[7.123609077223369`  - 8.589851957095483`*y];
                       guess2 = guess1 - 0.1;
                       method = "Brent",
           True,   guess1 = -Log [4.0, 1.0 - y];
                   guess2 = -0.7213475204444816` ProductLog[-1, -1.3862943611198908` + 1.3862943611198908`*y];
                   method = "Secant"];
    Quiet [FindRoot [DirichletBeta[var] == y,  {var, guess1, guess2, -2.226136951380778`, Infinity},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     Method-> method,
                     WorkingPrecision -> precision,
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {If [Abs[y - 0.5] < 0.1,
                                          $DirichletBetaAccuracyDelta + precision,
                                          Infinity],  0.0}]][[1,2]]];

  (* General floating-point y for non-positive branches: *)

RealInverseDirichletBeta [y_Real | y_Integer | y_Rational, 
                          k_/; First[RealInverseDirichletBeta[]] <= k <= 0 && WholeNumberQ[k]] /;
  (Head[y] === Real || Head[k] === Real) &&
    ($yRight = DirichletBetaInfimumOrSupremumOrdinate [$floatk = If [k == 0,
                                                                     (y - y)/y + k,
                                                                     (y/y)*k]];
     $yLeft = DirichletBetaInfimumOrSupremumOrdinate [$floatkMinus1 = $floatk - 1];
     If [EvenQ [Round[k]],
         $yLeft >= y >= $yRight,
         $yLeft <= y <= $yRight]) :=        
  Module [{precision = Precision [$floatkMinus1],
           xLeft = DirichletBetaInfimumOrSupremumAbscissa [$floatkMinus1],
           xRight = DirichletBetaInfimumOrSupremumAbscissa [$floatk],
           var},
    Assert [y != 0];
    Quiet [FindRoot [DirichletBeta[var] == y,  {var, xLeft, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     Method -> "Brent",
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> 0.5 * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

RealInverseDirichletBeta [one_/; one == 1  && Accuracy[one] > $MinWholeNumberAccuracy,
                          uno_/; uno == 1  && Accuracy[uno] > $MinWholeNumberAccuracy] :=
  Infinity;

RealInverseDirichletBeta [y_] := RealInverseDirichletBeta [y, 1];

  (* Limited lowest branch to -1 because of FindRoot difficulties below that: *)
RealInverseDirichletBeta [] := {-1, 1};
Protect [RealInverseDirichletBeta];


(* ::Subsection::Closed:: *)
(*RealInverseDirichletEta*)


Unprotect [RealInverseDirichletEta];
ClearAll [RealInverseDirichletEta];

SetAttributes [RealInverseDirichletEta, {NumericFunction, Listable}];

$DirichletEtaAccuracyDelta =
  $RealInverseAccuracyDelta + RealExponent [DirichletEta[0.0]/DirichletEta'[0.0]]; 

  (* Special values: *)

RealInverseDirichletEta [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                         k_/; k <= 1 && WholeNumberQ[k]] :=
  (2*k - 4) + zero;

RealInverseDirichletEta [ln2_/; ln2 == Log[2],
                         one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  (ln2 - ln2) + one + one;

RealInverseDirichletEta [one_/; one == 1  && Accuracy[one] > $MinWholeNumberAccuracy,
                         uno_/; uno == 1  && Accuracy[uno] > $MinWholeNumberAccuracy] :=
  Infinity;

  (* Branch 1 for general floating-point y: *)

RealInverseDirichletEta [y_/; y <= 1,
                         one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[one] === Real) &&
       y > DirichletEtaInfimumOrSupremumOrdinate [$float0 = ((y - y)/y) * one] :=
  Module [{precision = Precision [one + $float0],
           xLeft = DirichletEtaInfimumOrSupremumAbscissa [$float0],
           guess, guess2, var},
    Assert [y != 0];
    Which [y < 0.10832794194651502`,
             guess = xLeft + 2.70774443121443`*Sqrt[y + 0.1252549296031059`];
             guess2 = 0.95*guess,
           y > 0.917`,
             guess = -Log[2.0, 1.0 - y];
             guess2 = guess - 1.0,
           True,
             guess = 3.6997299765970353` - Sqrt[30.073616022067778` - 32.771228244674155`*y];
             guess2 = 1.05*guess];
    Quiet [FindRoot [DirichletEta[var] == y,
                     {var,  guess,  guess2,  xLeft,  Infinity},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     Method -> "Secant",
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {If [Abs[y - 0.5] < 0.1,
                                          $DirichletEtaAccuracyDelta + precision,
                                          Infinity],  0.0}]][[1,2]]];

  (* General floating-point y for non-positive branches: *)

RealInverseDirichletEta [y_, 
                         k_/; First[RealInverseDirichletEta[]] <= k <= 0 && WholeNumberQ[k]] /;
  (Head[y] === Real || Head[k] === Real) &&
    ($floatk = If [k == 0,
                   (y - y)/y + k,
                   (y/y)*k];
     $yRight = DirichletEtaInfimumOrSupremumOrdinate [$floatk];
     $yLeft = DirichletEtaInfimumOrSupremumOrdinate [$floatkMinus1 = $floatk - 1];
     If [EvenQ [Round [k]],
         $yLeft >= y >= $yRight,
         $yLeft <= y <= $yRight]) :=        
  Module [{precision = Precision [$floatkMinus1],
           xLeft = DirichletEtaInfimumOrSupremumAbscissa [$floatkMinus1],
           xRight = DirichletEtaInfimumOrSupremumAbscissa [$floatk],
           guess, deltaLeft, deltaRight, secondGuess, var},
    Assert [y != 0];
    guess = xLeft + (xRight - xLeft)
                    * ArcCos [Clip[(2.0 * y - $yLeft - $yRight) / ($yLeft - $yRight)]] / Pi;
    deltaLeft = guess - xLeft;
    deltaRight = xRight - guess;
    secondGuess = If [deltaLeft < deltaRight,
                      Max [0.99999999*xLeft,  guess - 0.1*deltaLeft],
                      Min [1.00000001*xRight,  guess - 0.1*(deltaRight)]];
      (* Newton's method is noisy because of complicated derivative.
         Give two guesses to force secant method: *)
    Quiet [FindRoot [DirichletEta[var] == y,  {var, guess, secondGuess, xLeft, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     Method -> "Secant",
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0}]][[1,2]]];

RealInverseDirichletEta [y_] := RealInverseDirichletEta [y, 1];

  (* Limit to branch # >= -5 because FindRoot doesn't work well below that even for Precision 32: *)
RealInverseDirichletEta [] := {-5, 1};
Protect [RealInverseDirichletEta];


(* ::Subsection::Closed:: *)
(*RealInverseDirichletLambda*)


Unprotect [RealInverseDirichletLambda];
ClearAll [RealInverseDirichletLambda];

SetAttributes [RealInverseDirichletLambda, {NumericFunction, Listable}];

  (* Branch 1 returns -0.705264... <= x <= 1 such that DirichletLambda[x] == y: *)

RealInverseDirichletLambda [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                            k_/; k <= 1 && WholeNumberQ[k]] :=
  (2*k - 2) + zero;

RealInverseDirichletLambda [y_Real | y_Integer | y_Rational,
                            one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[one] === Real) &&
      y <= DirichletLambdaInfimumOrSupremumOrdinate [$float0 = ((y - y)/y) * one] :=
  Module [{precision = Precision [$float0 + one],
           xLeft = DirichletLambdaInfimumOrSupremumAbscissa [$float0],
           guess, var},
    Assert [y != 0];
    guess = Which [y < -0.11583822040943681`,
                     With [{part = Log[2] + EulerGamma - 2 * y},  (* Log[2] + EulerGamma *)
                           (part - 1) / part],
                   y > 0.06074788086764511`,
                     xLeft + Sqrt [0.8388425664883771` - 9.184858138073347` * y],
                   True,  -2.8853900817779268` * y];
    If [guess == 1.0,
        guess, (* :Avoid ComplexInfinity followed by time-consuming Underflow with warning. *)
        Quiet [FindRoot [DirichletLambda[var] == y,
                         {var,  guess,  xLeft,  1},
(*EvaluationMonitor :> ++$realInverseCount,*)
                         WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                         PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                         AccuracyGoal -> {Infinity, 0.0}]][[1,2]]]];

  (* Branch 2 returns 1 <= x <= Infinity such that DirichletLambda[x] == y: *)

RealInverseDirichletLambda [one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy,
                            two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] :=
  Infinity;

RealInverseDirichletLambda [Infinity,
                            two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] := 1;

RealInverseDirichletLambda [y_/; y > 1 && Accuracy[y] > $MinWholeNumberAccuracy,
                            two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[two] === Real) :=
  Module [{precision = Precision [{y, two}],
           guess = If [y > 1.0463180580572908`,
                       With [{part = EulerGamma + Log[2] - 2 * y},
                             (part - 1) / part],
                       - Log [4.0, y - 1.0]],
           var},
    Assert [y != 0];
    If [guess == 1.0,
        guess, (* :Avoid ComplexInfinity followed by time-consuming Underflow with warning. *)
        Quiet [FindRoot [DirichletLambda[var] == y,  {var, guess, 1, Infinity},
(*EvaluationMonitor :> ++$realInverseCount,*)
               WorkingPrecision -> Max [precision, $MinWorkingPrecision],
               PrecisionGoal -> (*$InverseFunctionsPrecisionGoalFactor * *)precision,
               AccuracyGoal -> {Infinity, 0.0}]][[1,2]]]];

  (* General floating-point y for non-positive branches: *)

RealInverseDirichletLambda [y_Real | y_Rational | y_Integer, 
       k_/; First[RealInverseDirichletLambda[]] <= k <= 0 && WholeNumberQ[k]] /;
  (Head[y] === Real || Head[k] === Real) &&
    ($floatkMinus1 = k - y/y;
     $yRight = DirichletLambdaInfimumOrSupremumOrdinate [$floatk = (y/y)*k];
     $yLeft = DirichletLambdaInfimumOrSupremumOrdinate [$floatkMinus1 = $floatk - 1];
     If [OddQ [Round[k]],
         $yLeft >= y >= $yRight,
         $yLeft <= y <= $yRight]) :=        
  Module [{precision = Precision [$floatkMinus1],
           xLeft = DirichletLambdaInfimumOrSupremumAbscissa [$floatkMinus1],
           xRight = DirichletLambdaInfimumOrSupremumAbscissa [$floatk],
           guess, deltaLeft, deltaRight, secondGuess, var},
    Assert [y != 0];
    guess = xLeft + (xRight - xLeft)
                    * ArcCos [Clip[(2.0 * y - $yLeft - $yRight) / ($yLeft - $yRight)]] / Pi;
    deltaLeft = guess - xLeft;
    deltaRight = xRight - guess;
    secondGuess = If [deltaLeft < deltaRight,
                      Max [0.99999999*xLeft,  guess - 0.1*deltaLeft],
                      Min [1.00000001*xRight,  guess - 0.1*(deltaRight)]];
      (* Newton's method is noisy because of complicated derivative.
         Give two guesses to force secant method: *)
    Quiet [FindRoot [DirichletLambda[var] == y,  {var, guess, secondGuess, xLeft, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

RealInverseDirichletLambda [-Infinity,
                            one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := 1;

RealInverseDirichletLambda [y_] := RealInverseDirichletLambda [y, 1];

  (* FindRoot has troubles below branch -5 even for Precision 32: *)
RealInverseDirichletLambda [] := {-5, 2}; (* : Consider implementing {-5, 2} *)
Protect [RealInverseDirichletLambda];


(* ::Subsection::Closed:: *)
(*RealInverseEllipticE*)


Unprotect [RealInverseEllipticE];
ClearAll [RealInverseEllipticE];

SetAttributes [RealInverseEllipticE, {NumericFunction, Listable}];

$EllipticEAccuracyDelta = $RealInverseAccuracyDelta
  + 0.6020599913279624`;  (* Abs [RealExponent [EllipticE[0] / EllipticE'[0]]] *)

  (* Some special values: *)

RealInverseEllipticE [one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  one;  (* Use 1 or a ProductLog because of EllipticE` == Infinity?? *)

RealInverseEllipticE [piOn2_/; piOn2 == 1/2 * Pi && Accuracy[piOn2] > $MinWholeNumberAccuracy] :=
  piOn2 - piOn2;

  (* General float argument exceeding 1: *)

RealInverseEllipticE [y_Real /; y > 1] :=
  Module [{precision = Precision [y],
           guess = Which [
                     y < 1.32,
                       1.0 - 16.0 * Exp [-1.0 + ProductLog [-1, 0.25*(1.0  - y) * y]],
                     y > 1.9423176258318344`,
                       0.5*(1.8862943611198906` - y * (y + Sqrt[y*y - 3.772588722239781`])),
                     True,
                       4.0` - 2.5464790894703255` * y],
           var},
      Quiet [FindRoot [Re[EllipticE [var]] == y, {var, guess, -Infinity, 1},
(*EvaluationMonitor :> ++$realInverseCount,*)
                       WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                       PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                       AccuracyGoal -> {If [Abs [y - 1.5707963267948966`] < 0.1,
                                            $EllipticEAccuracyDelta + precision,
                                            Infinity],  0.0}]][[1,2]]];

RealInverseEllipticE [Infinity] := -Infinity;

  (* There is only one real branch: *)

RealInverseEllipticE [y_,
  one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := RealInverseEllipticE [one*y];

RealInverseEllipticE [] := {1, 1};
Protect [RealInverseEllipticE];


(* ::Subsection::Closed:: *)
(*RealInverseEllipticK*)


Unprotect [RealInverseEllipticK];
ClearAll [RealInverseEllipticK];

SetAttributes [RealInverseEllipticK, {NumericFunction, Listable}];

$EllipticKAccuracyDelta = $RealInverseAccuracyDelta +
  0.6020599913279624`;   (* :Abs [RealExponent [EllipticK[0]/EllipticK'[0]]] *)

RealInverseEllipticK [] := {1, 1};

  (* There is only one real branch: *)

RealInverseEllipticK [y_,
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  RealInverseEllipticK [(one - one) + y];

  (* Some special values: *)

RealInverseEllipticK [piOn2_/; piOn2 == 1/2*Pi] := piOn2 - piOn2;  (* :Propagate Accuracy *)

RealInverseEllipticK [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  -Infinity;

RealInverseEllipticK [Infinity] := 1;

  (* General positive float argument: *)

RealInverseEllipticK [y_Real /; y > 0] :=
  Module [{precision = Precision[y],
           guess, var},
    If [RealExponent [y] < 2.0 - precision,
        -Infinity,  (* : Because EllipticK becomes too noisy. *)
        guess = Which [y < 1.3978794959022456`,
                         0.5 + (-16.0 * Exp [2.0 * ProductLog[-1, -(0.25*y)]]) ^ -1,
                       y > 1.787452613625671`,
                         1.0 - 16.0 * Exp [-2.0 * y],
                       True,
                         -4.0` + 2.5464790894703255` * y];
    Quiet [FindRoot [EllipticK [var] == y, {var, guess, -Infinity, 1},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
(*MaxIterations->100,*)
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {If [Abs [y - 1.5707963267948966`] < 0.1,
                                          $EllipticKAccuracyDelta + precision,
                                          Infinity],  0.0}]][[1,2]]]];
Protect [RealInverseEllipticK];


(* ::Subsection::Closed:: *)
(*RealInverseEllipticTheta2Zero*)


Unprotect [RealInverseEllipticTheta2Zero];
ClearAll [RealInverseEllipticTheta2Zero];

SetAttributes [RealInverseEllipticTheta2Zero, {NumericFunction, Listable}];

  (* Some special values: *)

RealInverseEllipticTheta2Zero [
  zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] := (zero/2)^4; (* :Dominant term of series. *)

  (* General positive float arguments: *)

RealInverseEllipticTheta2Zero [y_Real /; y > 0] :=
  Module [{precision = Precision [y],
           guess = Which [y < 1.1359306015682802`,  (0.5 * y) ^ 4,
                          y > 3.47`,                1.0 - Pi * y ^ -2,
                          True,                     0.2997233349579616` * (-0.8022895788763842` + y)],
           var},
    Quiet [FindRoot [EllipticTheta [2, 0, var] == y, {var, guess, 0, 1},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

RealInverseEllipticTheta2Zero [Infinity] := 1; 

  (* There is only one real branch: *)

RealInverseEllipticTheta2Zero [y_,
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  RealInverseEllipticTheta2Zero [(one - one) + y];

RealInverseEllipticTheta2Zero [] := {1, 1};
Protect [RealInverseEllipticTheta2Zero];


(* ::Subsection::Closed:: *)
(*RealInverseEllipticTheta3Zero*)


Unprotect [RealInverseEllipticTheta3Zero];
ClearAll [RealInverseEllipticTheta3Zero];

SetAttributes [RealInverseEllipticTheta3Zero, {NumericFunction, Listable}];

$EllipticTheta3ZeroAccuracyDelta = $RealInverseAccuracyDelta +
  0.3010299956639812`;  (* :Abs [RealExponent [EllipticTheta3Zero[0]/EllipticTheta3Zero'[0]]] *)

EllipticTheta3ZeroRectified [x_Real] := (* This rectifies blemishes in EllipticTheta [3, 0, x] *)
  Which [x == -1,  x - x,
         x == 1,   Infinity,
         True,     With [{y = Re [EllipticTheta [3, 0, x]]},
                     If [y < 0,
                         y - y,
                         y]]];

  (* Some special values: *)

RealInverseEllipticTheta3Zero [zero_/; zero == 0  && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  zero - 1;

RealInverseEllipticTheta3Zero [
  one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := one - one;

  (* The general floating-point case: *)

RealInverseEllipticTheta3Zero [y_Real /; y > 0] :=
  Module [{precision = Precision [y],
           guess, guess2, var},
    If [RealExponent [y] < 0.2  - 3.7*Log[precision], 
        -1.0,   (* : underflow to machine float limit because EllipticTheta[3, 0, x] is too noisy. *)
        Which [y > 2.5635673153327807`,
                 guess = 1 - Pi * y ^ -2;       (* :Intentional non-float coefficients: *)
                 guess2 = guess + (3/4)*(1 - guess),
                 (*guess2 = y*(-0.9746841090577587` - y);
                 guess2 = (2.904090375477364` \[VeryThinSpace]+ guess2)/(-0.23750227811242922` + guess2),*)
               y > 1.8375526484903735`,
                 guess = y*(-0.9746841090577587` - y);
                 guess= (2.904090375477364`  + guess)/(-0.23750227811242922` + guess);
                 guess2 = guess - 0.05,
               y > 0.2974614493956317`,
                 guess = 0.5 * (y - 1);         (* :Intentional non-float 1 *)
                 guess2 = guess - 0.3;
                 guess += 0.0000000000001,
               y > 0.03387490505808436`,
                 guess = 0.9351572129068151`*(-0.6557936658211379` +  y);
                 guess2 = guess - 0.1;
                 guess += 0.01,
               True,
                 guess = -Log [y, 10*y];  (* :Intentionally not 10.0 and -1.0*: *)
                 guess2 = -1];
    If [EllipticTheta3ZeroRectified[guess2] === Infinity,
        y/y,
        Quiet [FindRoot [EllipticTheta3ZeroRectified [var] == y,
                     {var, guess, guess2, -1, 1},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     Method -> "Brent",
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {If [Abs [y - 1] < 0.1,
                                          $EllipticTheta3ZeroAccuracyDelta + precision,
                                          Infinity],  0.0}]][[1,2]]]]];

RealInverseEllipticTheta3Zero [Infinity] := 1;

  (* There is only one real branch: *)

RealInverseEllipticTheta3Zero [y_,
    one_/; one == 1  && Accuracy[one] > $MinWholeNumberAccuracy] :=
  RealInverseEllipticTheta3Zero [(one - one) + y];

RealInverseEllipticTheta3Zero [] := {1, 1};
Protect [RealInverseEllipticTheta3Zero];


(* ::Subsection::Closed:: *)
(*RealInverseErfi*)


Unprotect [RealInverseErfi];
ClearAll [RealInverseErfi];

SetAttributes [RealInverseErfi, {NumericFunction, Listable}];

RealInverseErfi [
  zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] := zero;

  (* Real y: *)

RealInverseErfi [y_Real] :=
  Module [{absY = Abs [y],
           precision = Precision [y],
           guess, var},
    guess = Sign [y] * If [absY < Sqrt [0.5],
                           absY * (1/2 * Sqrt[Pi] - absY * Pi / 24),
                           Sqrt [Log [Sqrt [Pi] * absY]]];
    Assert [y != 0];
    Quiet [FindRoot [Erfi [var] == y, {var, guess},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Branch 1 is the default: *)

RealInverseErfi [y_,
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  RealInverseErfi [(one - one) + y];

RealInverseErfi [Infinity] := Infinity;
RealInverseErfi [-Infinity] := -Infinity;

RealInverseErfi [] := {1, 1};  (* : There is only one real branch. *)
Protect [RealInverseErfi];


(* ::Subsection::Closed:: *)
(*RealInverseExpIntegralE*)


Unprotect [RealInverseExpIntegralE, $RealInverseExponentialIntegralEParameterRange];
ClearAll [RealInverseExpIntegralE];

SetAttributes [RealInverseExpIntegralE, {NumericFunction, Listable}];

$RealInverseExponentialIntegralEParameterRange = {-Infinity, Infinity};

  (* Special values: *)

RealInverseExpIntegralE [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                         y_/; y > 0] := ProductLog [y^-1];

RealInverseExpIntegralE [r_Integer | r_Real | r_Rational,
  zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] := Infinity;

RealInverseExpIntegralE [r_/; r <= 1 && Accuracy[r] > $MinWholeNumberAccuracy,
                         Infinity] := r - r;

RealInverseExpIntegralE [r_/; r > 1 && Accuracy[r] > $MinWholeNumberAccuracy,
                         y_/; y > 0 && Accuracy[y] > $MinWholeNumberAccuracy] /;
    y == (r - 1)^-1 := (r-r) + (y-y);

  (* General floating-point y: *)

GuessesRealInverseExpIntegralE1 [y_, precision_] :=
  Module [{guess1},
    Which [y < 0.4785417375179337`,
             guess1 = ProductLog [y ^ -1];
             {guess1 - 0.3, guess1},
           $RealInverseUnderflowMachineNumberTo0Q &&
               precision === MachinePrecision && y > $AbsLogMinMachineNumber - 1.0,
             {0.0, 0.0},   (* Forced underflow to 0.0 *)
           True,
             {0.5614594835668`, 0.9270507591928968`}*Exp[-y]]];

GuessesRealInverseExpIntegralEGE2 [r_, y_, precision_] :=
  With [{guess = Max [0, ProductLog[1.0/y] - ProductLog[Max [0.632120558828558`, -1.0 + r]]]},
    {guess,  If [Re[ExpIntegralE [r, guess]] < y,
                 Max [-1.0 + guess, 0.9*guess],  (* :guess too large, making ExpIntegral too small *)
                 Min [1.2 + guess, 1.4*guess]]}];

(* Inaccurate for r = 2 near y = 1.  Revisit: *)

RealInverseExpIntegralE [r_/; r >= 1,  y_/; y > 0] /;
    (Head[y] === Real || Head[r] === Real) && (r <= 1 || y < (r - 1) ^ -1) :=
  Module [{precision = Precision [{y, r}],
           method = "Secant",
           guess, guess2, var},
    {guess, guess2} =
      Which [r == 1,
               method = "Brent"; 
               GuessesRealInverseExpIntegralE1 [y, precision],
             r >= 2,
               GuessesRealInverseExpIntegralEGE2 [r, y, precision],
             r < -1,
               {guess = If [y < -0.320810490051148/(r - 0.103269548278749),
                           ProductLog [y ^ -1],
                           ((1.0 + y*(1.0 - r))/Gamma[2.0 - r])^(-1.0 + r)^-1],
                Assert[Head[guess] == Real];
                If [Re[ExpIntegralE [r, guess]] < y,
                    Max [-1.0 + guess, 0.9*guess], (* :guess too large, making ExpIntegral too small *)
                    Min [1.0 + guess, 1.2*guess]]},
             True,
               (2.0 - r) * GuessesRealInverseExpIntegralE1 [y, precision] +
                 (r - 1.0) * GuessesRealInverseExpIntegralEGE2 [r, y, precision]];
    If [guess === 0.0,
        guess,
        Quiet [FindRoot [Re[ExpIntegralE [r, var]] == y,  {var, guess, guess2, 0, Infinity},
(*EvaluationMonitor:> ++$realInverseCount,*)
                         Method -> method,
                         WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                         PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision(*,
                         AccuracyGoal -> {If [r > 1 && y > 0.9*(r - 1) ^ -1,
                                              (2 - r) * precision / (-1 + r),
                                              Infinity], 0.0}*)]][[1,2]]]];

RealInverseExpIntegralE [r_/; 0 < r < 1,  y_/; y > 0] /;
    (Head[y] === Real || Head[r] === Real) :=
  Module [{precision = Precision [{y, r}],
           guess, var},
   guess = If [y < (0.2625` +0.25` r)/(0.05` +r),
               ProductLog [y^-1],
               guess = -1.0 + r;
               ((-1.0 + guess*y)/(guess*Gamma[-guess]))^(1/guess)];
    If [guess === 0.0,
        guess,
        Quiet [FindRoot [Re[ExpIntegralE [r, var]] == y,  {var, guess, 0, Infinity},
(*EvaluationMonitor:> ++$realInverseCount,*)
                         WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                         PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                         AccuracyGoal -> {Infinity, 0.0}]][[1,2]]]];

RealInverseExpIntegralE [r_/; r < 0,  y_/; y > 0] /;
    (Head[y] === Real || Head[r] === Real) :=
  Module [{precision = Precision [{y, r}],
           factorial = (-r)!,
           guess, var},
   guess = factorial^(-1.0/r);
   guess = If [y < Exp [-guess] / guess,
               ProductLog [y^-1],
               guess = 1.0 - r;
               guess*ProductLog [(y/factorial)^(-1/guess)/guess]];
    If [guess === 0.0,
        guess,
        Quiet [FindRoot [Re[ExpIntegralE [r, var]] == y,  {var, guess, 0, Infinity},
(*EvaluationMonitor:> ++$realInverseCount,*)
                         WorkingPrecision -> precision,
                         PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                         AccuracyGoal -> {Infinity, 0.0}]][[1,2]]]];

  (* There is only one real branch: *)

RealInverseExpIntegralE [parameter_,  y_,
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  RealInverseExpIntegralE [parameter, (one - one) + y];

RealInverseExpIntegralE [] := {-Infinity, Infinity};

Protect [RealInverseExpIntegralE, $RealInverseExponentialIntegralEParameterRange];


(* ::Subsection::Closed:: *)
(*RealInverseExpIntegralEi*)


Unprotect [RealInverseExpIntegralEi];
ClearAll [RealInverseExpIntegralEi];

SetAttributes [RealInverseExpIntegralEi, {NumericFunction, Listable}];

  (* Some special values: *)

RealInverseExpIntegralEi [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                          one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  ExpIntegralEiZero [one + zero];

  (* General floating-point argument for branch 1: *)

RealInverseExpIntegralEi [y_Real | y_Rational | y_Integer,
                          one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    Head[y] === Real || Head[one] === Real :=
  Module [{precision = Precision [{y, 1}],
           guess, var},
    Assert [y != 0.0];
    guess = Which [$RealInverseUnderflowMachineNumberTo0Q &&
                       precision === MachinePrecision && y < 1.0 - $AbsLogMinMachineNumber,
                     0.0,   (* Forced underflow to 0.0 *)
                   y < -0.34686866580442444`,   Exp [-one * EulerGamma + y],
                   y > 8.083849731053338`,      -ProductLog[-1, -one/y],
                   True,                        one + (y - ExpIntegralEi [one]) / E];
    If [guess === 0.0,
        guess,
        Quiet [FindRoot [ExpIntegralEi [var] == y, {var, guess},
(*EvaluationMonitor :> ++$realInverseCount,*)
                         WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                         PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                         AccuracyGoal -> {Infinity, 0.0}]][[1,2]]]];

RealInverseExpIntegralEi [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
  cero_/; cero == 0 && Accuracy[cero] > $MinWholeNumberAccuracy] := -Infinity;

RealInverseExpIntegralEi [y_Real /; y < 0,
                          zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  -RealInverseExpIntegralE [1, zero - y];

RealInverseExpIntegralEi [y_] := RealInverseExpIntegralEi [y, 1];

RealInverseExpIntegralEi [Infinity,
  one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := Infinity;

RealInverseExpIntegralEi [-Infinity,
  one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := 0;

RealInverseExpIntegralEi [-Infinity,
  zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] := -Infinity;

RealInverseExpIntegralEi [] := {0, 1};  (* This is all real branches, with 1 being the rightmost. *)
Protect [RealInverseExpIntegralEi];


(* ::Subsection::Closed:: *)
(*RealInverseFactorial*)


Unprotect [RealInverseFactorial];
ClearAll [RealInverseFactorial];

SetAttributes [RealInverseFactorial, {NumericFunction, Listable}];

RealInverseFactorial [] := RealInverseGamma [];

  (* Branch 1 is the default: *)

RealInverseFactorial [y_] := RealInverseGamma[y, 1];

  (* Special values: *)

RealInverseFactorial [y_, k_] := RealInverseGamma[y, k] - 1;
Protect [RealInverseFactorial];


(* ::Subsection::Closed:: *)
(*RealInverseFactorial2*)


Unprotect [RealInverseFactorial2];
ClearAll [RealInverseFactorial2];

SetAttributes [RealInverseFactorial2, {NumericFunction, Listable}];

$Factorial2AccuracyDelta = $RealInverseAccuracyDelta +
  1.2368284819093869`;  (* : Abs [RealExponent [Factorial2[0.0]/Factorial2'[0.0]]] *)

  (* Special values: *)

RealInverseFactorial2 [one_/; one == 1, three_/; three == 3] := one*(three/three);

RealInverseFactorial2 [one_/; one == 1, uno_/; uno == 1] := one - uno;

RealInverseFactorial2 [one_/; one == 1, zero_/; zero == 0] := zero - one;

RealInverseFactorial2 [minusOne_/; minusOne == -1, menosUno_/; menosUno == -1] :=
  minusOne + minusOne + menosUno;

(* I have not implemented other instances where the result is a negative integer,
   but see RealInverseGamma for how to do so. *)

RealInverseFactorial2 [Infinity,
  three_/; three == 3 && Accuracy[three] > $MinWholeNumberAccuracy] := Infinity;

RealInverseFactorial2 [y_/; y > 0.94942631810337696`,  (* :Close strict lower bound. *)
                       three_/; three == 3 && Accuracy[three] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[three] === Real) && 
    y >= Factorial2InfimumOrSupremumOrdinate [$float2 = three - y/y] :=
  Module [{precision = Precision [$float2],
           xLeft, guess, var},
    xLeft = Factorial2InfimumOrSupremumAbscissa [$float2];
    guess = If [y < 5.0,
                xLeft + Sqrt[(y - 0.9494263181033767`) / 0.43501297708810205`],
                guess = Log [0.3989422804014327`*(0.03653381448490034` + y^2)];
                0.5 + guess / ProductLog [guess/E]];
    Quiet [FindRoot [Factorial2 [var] == y,  {var, guess, xLeft, Infinity},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Returns 0.0825111... <= x <= 0.697095... such that Factorial2[x] == y: *)

  (* Consider replacing ArcCos below with quadratic numbers: *)
RealInverseFactorial2 [y_/; 0.94942631810337696` <= y <= 1.0023864286013853`, (* :Close strict bounds. *)
                       two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[two] === Real) &&
     Factorial2InfimumOrSupremumOrdinate [$float2 = two*(y/y)] <= y <=
       Factorial2InfimumOrSupremumOrdinate [$float1 = $float2 - 1] :=
  Module [{precision = Precision [$float2],
           guess = 0.0825111039668083` + 0.6145836345665887`
            * ArcCos [Clip[(2.0 * y - 1.9518127467047623`) / 0.052960110498008084`]] / Pi,
           var},
    Quiet [FindRoot [Factorial2 [var] == y, 
                     {var, guess, Factorial2InfimumOrSupremumAbscissa [$float1],
                                  Factorial2InfimumOrSupremumAbscissa [$float2]},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Returns -0.662569... <= x <= 0.0825111... such that Factorial2[x] == y: *)

  (* Consider replacing ArcSin below with quadratic numbers: *)
RealInverseFactorial2 [y_/; 0.90732613576642612` <= y <= 1.0023864286013853`,
                       one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[one] === Real) &&
      Factorial2InfimumOrSupremumOrdinate [$float1 = one*(y/y)] >=
        y >= Factorial2InfimumOrSupremumOrdinate [$float0 = $float1 - $float1] :=
  Module [{precision = Precision [$float1],
           guess = -0.2900288975868349`
             + 0.23716633116408137` * ArcSin [21.039278760405345`*(y - 0.9548562821839168`)],
           var},
    Quiet [FindRoot [Factorial2 [var] == y,
                     {var, guess, Factorial2InfimumOrSupremumAbscissa[$float0],
                                  Factorial2InfimumOrSupremumAbscissa[$float1]},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {If [guess > -0.1,
                                          $Factorial2AccuracyDelta + precision,
                                          Infinity],  0.0}]][[1,2]]];

RealInverseFactorial2 [Infinity,
    k_/; k <= 0 && WholeNumberQ[k] && Mod [$integerK = Round[k], 4] <= 1] :=
  If [OddQ [$integerK],
      k - 1,
      k - 2];
  
RealInverseFactorial2 [-Infinity,
    k_/; k < 0 && WholeNumberQ[k] && Mod [$integerK = Round[k], 4] > 1] :=
  If [OddQ [$integerK],
      k - 1,
      k - 2];  (* Returns x >= 0.697095... such that Factorial2[x] == y: *)

RealInverseFactorial2 [y_/; y != 0,
                       k_/; k <= 0 && Accuracy[k] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[k] === Real) &&
      ($yRight = Factorial2InfimumOrSupremumOrdinate [$floatk = If [k == 0,
                                                                    (y - y)/y + k,
                                                                    (y/y)*k],  Direction -> 1];
       $yLeft = Factorial2InfimumOrSupremumOrdinate [$floatkMinus1 = $floatk - 1,
                                                     Direction -> -1];
       If [$yRight > $yLeft,
           $yLeft <= y <= $yRight,
           $yLeft >= y >= $yRight] ) :=
  Module [{precision = Precision [$floatkMinus1],
           integerk = Round [k],
           xLeft = Factorial2InfimumOrSupremumAbscissa [$floatkMinus1],
           xRight = Factorial2InfimumOrSupremumAbscissa [$floatk],
           yStationary, xStationary, xPole, absxPole, constant, guess, var},
    If [NumberQ [$yRight],
        yStationary = $yRight;
        xStationary = xRight;
        xPole = $floatkMinus1 - 1,
    (* else: *)
        yStationary = $yLeft;
        xStationary = xLeft;
        xPole = $floatkMinus1];
    absxPole = -xPole;
    guess = If [yStationary < If [EvenQ [integerk],
                                  1.2,
                                  0.8983874966123256`  - 0.1738077221702177`*k],
                xStationary + Sign [xPole - xStationary]
                   * Sqrt [2.0*Abs [(yStationary - y)/Factorial2''[xStationary]]],
                constant = 0.11593151565841242` +
                             If [integerk == 0,
                                 0.0,   
                                 2.0 - MinExponentOfSn[Round[absxPole]/2 - 1] ^ -1];
                constant /= (0.5*absxPole - 1.0)! * 2.0 ^ (0.5*absxPole);
                ((absxPole - 2.0)!! * (y*(-1)^(1 + Round[0.5*absxPole]) - constant)) ^ -1 - absxPole];
    Quiet [FindRoot [Factorial2[var] == y,  {var, guess, xLeft, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Default is branch 1: *)

RealInverseFactorial2 [y_] := RealInverseFactorial2 [y, 1];

RealInverseFactorial2 [] := {-Infinity, 3};
Protect [RealInverseFactorial2];


(* ::Subsection::Closed:: *)
(*RealInverseFresnelC*)


Unprotect [RealInverseFresnelC];
ClearAll [RealInverseFresnelC];

SetAttributes [RealInverseFresnelC, {NumericFunction, Listable}];

RealInverseFresnelC [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                     one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  (one - one) + zero; (* :Propagate Accuracy. *)

  (* General float values: *)

RealInverseFresnelC [y_/; Abs[y] <= 0.77989340037682283`,
                     one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[one] === Real) :=
  Module [{precision = Precision [{y, one}],
           guess, sqrt2, var},
    Assert [y != 0];
    sqrt2 = N [Sqrt[2], precision];
    guess = If [Abs[y] < 0.7312240603789558`,
                y*(1.0 + y^4 * 0.24674011002723395`),  (* : Pi^2 / 40. *)
                Sign [y] * (1.0 - 0.7978845608028654`*Sqrt[0.77989340037682283` - y])];
    Quiet [FindRoot [FresnelC[var] == y,  {var, guess, -sqrt2, sqrt2},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

RealInverseFresnelC [y_/;  0.32105618641067806` <= y <= 77989340037682283`,
                     k_/; k > 1 && WholeNumberQ[k]] /;
  (Head[y] === Real || Head[k] === Real) &&
    ($yRight = FresnelCInfimumOrSupremumOrdinate [$floatk = (y/y)*k];
     $yLeft = FresnelCInfimumOrSupremumOrdinate [$floatkMinus1 = $floatk - 1];
     If [EvenQ [Round[k]],
         $yRight <= y <= $yLeft,
         $yLeft <= y <= $yRight]) :=
  Module [{precision = Precision [$floatk],
           xLeft = FresnelCInfimumOrSupremumAbscissa [$floatkMinus1],
           xRight = FresnelCInfimumOrSupremumAbscissa [$floatk],
           guess, var},
    Assert [y != 0.0];
    guess = If [Abs [$yRight - y] < Abs [$yLeft - y],
                xRight -
                  Sqrt [0.6366197723675814` * (2.0*k - 1.0) ^ -(1/2) * Abs[$yRight - y]], (* :2.0/Pi *)
                xLeft +
                  Sqrt [0.6366197723675814` * (2.0*k - 3.0) ^ -(1/2) * Abs[$yLeft - y]]];
    Quiet [FindRoot [FresnelC [var] == y,  {var, guess, xLeft, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Exploit antisymmetry for non-positive branches: *)

RealInverseFresnelC [y_, k_/; k <= 0] := -RealInverseFresnelC [-y, 2 - k];

  (* Branch 1 is default: *)

RealInverseFresnelC [y_] := RealInverseFresnelC [y, 1];

RealInverseFresnelC [] := {-Infinity, Infinity};  (* This is all real branches. *)
Protect [RealInverseFresnelC];


(* ::Subsection::Closed:: *)
(*RealInverseFresnelS*)


Unprotect [RealInverseFresnelS];
ClearAll [RealInverseFresnelS];

SetAttributes [RealInverseFresnelS, {NumericFunction, Listable}];

  (* Exploit antisymmetry for negative half of branch 1: *)

RealInverseFresnelS [y_/; y < 0,
                     one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  -RealInverseFresnelS [-y, one];

  (* Special values: *)

RealInverseFresnelS [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                     one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  (((one - one) + zero)*6/Pi) ^ (1/3)  (* :Used series to propagate Accuracy. *)

  (* General float argument: *)

RealInverseFresnelS [y_/; 0 < y,
                     one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[one] === Real) &&
      y <= FresnelSInfimumOrSupremumOrdinate [$float1 = (y/y)*one] :=
  Module [{precision = Precision [$float1],
           sqrt2, guess, var},
    Assert [y != 0.0];
    sqrt2 = N[Sqrt[2], precision];
    guess = If [y < 0.4525754067626743`,
                (y * 1.909859317102744`) ^ (1/3),  (* : 1.9... == 6/Pi *)
                sqrt2 - 0.6709382669654139` * Sqrt[0.71397221402193962` - y]];
    Quiet [FindRoot [FresnelS[var] == y,  {var, guess, 0, sqrt2},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

RealInverseFresnelS [y_/; 0.34341567836369824` <= y <= 0.7139722140219396`,
                     k_/; k > 1 && WholeNumberQ[k]] /;
  (Head[y] === Real || Head[k] === Real) &&
    ($yRight = FresnelSInfimumOrSupremumOrdinate [$floatk = (y/y)*k];
     $yLeft = FresnelSInfimumOrSupremumOrdinate [$floatkMinus1 = $floatk - 1];
     If [EvenQ [Round[k]],
         $yRight <= y <= $yLeft,
         $yLeft <= y <= $yRight]) :=
  Module [{precision = Precision [$floatk],
           xLeft = FresnelSInfimumOrSupremumAbscissa [$floatkMinus1],
           xRight = FresnelSInfimumOrSupremumAbscissa [$floatk],
           guess, var},
    Assert [y != 0.0];
    guess = If [Abs [$yRight - y] < Abs [$yLeft - y],  (* == Sqrt[2.0]/Pi: *)
                xRight - Sqrt [0.4501581580785531`*Sqrt[($floatk + 1.0)^-1]*Abs[$yRight - y]],
                xLeft + Sqrt [0.4501581580785531` * Sqrt[$floatk^-1] * Abs[$yLeft - y]]];
    Quiet [FindRoot [FresnelS [var] == y,  {var, guess, xLeft, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Branch 1 is the default: *)

RealInverseFresnelS [y_] := RealInverseFresnelS [y, 1];

  (* Exploit antisymmetry for non-positive branches: *)

RealInverseFresnelS [y_, k_/; k <= 0] := -RealInverseFresnelS [-y, 2 - k];

RealInverseFresnelS [] := {-Infinity, Infinity}; (* This is all real branches. *)
Protect [RealInverseFresnelS];


(* ::Subsection::Closed:: *)
(*RealInverseGamma*)


Unprotect [RealInverseGamma];
ClearAll [RealInverseGamma];

SetAttributes [RealInverseGamma, {NumericFunction, Listable}];

RealInverseGamma [one_/; one == 1, uno_/; uno == 1] := one/uno;

RealInverseGamma [one_/; one == 1, two_/; two == 2] := one*two;

RealInverseGamma [y_/; y > 0.8856031944108887`,
                  two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[two] === Real) :=
  Module [{precision = Precision [{y, two}],
           xLeft, guess, var},
    xLeft = GammaInfimumOrSupremumAbscissa [SetPrecision [1, precision]];
    guess = If [y > 0.99, (* :Equal discrepancy magnitude breakpoint. *)
                  (* : From http://mathforum.org/kb/message.jspa?messageID=342551&tstart=0: *)
                guess = Log [0.3989422804014327`*(0.03653381448490034` + y)];
                0.5 + guess / ProductLog [guess/E],
                  (* From series at local minimum at left edge: *)
                xLeft + 1.5276760433847776` * Sqrt [y - 0.8856031944108887`]];
    Quiet [FindRoot [Gamma[var] == y, {var, guess, xLeft, Infinity},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

RealInverseGamma [Infinity,
    k_/; k <= 1 && WholeNumberQ[k] && Mod [1 + ($integerk = Round[k]), 4] > 1] :=
  Ceiling [($integerk - 1)/2];

RealInverseGamma [-Infinity,
    k_/; k <= 0 && WholeNumberQ[k] && Mod [1 + ($integerk = Round[k]), 4] <= 1] :=
  Ceiling [($integerk - 1)/2];

RealInverseGamma [y_/; y != 0,
                  k_/; k <= 1 && WholeNumberQ[k]] /;
    (Head[y] === Real || Head[k] === Real) &&
      ($yRight = GammaInfimumOrSupremumOrdinate [$floatk = If [k == 0,
                                                               (y - y)/y + k,
                                                               (y/y)*k],  Direction -> 1];
       $floatkMinus1 = $floatk - 1;
       $yLeft = GammaInfimumOrSupremumOrdinate [$floatkMinus1, Direction -> -1];
       If [$yRight > $yLeft,
           $yLeft <= y <= $yRight,
           $yLeft >= y >= $yRight]) :=
  Module [{precision = Precision [{y, k - 2}],
           yStationary, xLeft, xRight, xStationary, xPole, m, guess1, guess2, guess, var},
    Assert [y != 0];
    If [NumberQ [$yRight],
        yStationary = $yRight;
        xRight = xStationary = GammaInfimumOrSupremumAbscissa [$floatk];
        xLeft = xPole = Floor [k/ 2],
    (* else: *)
        yStationary = $yLeft;
        xLeft = xStationary = GammaInfimumOrSupremumAbscissa [$floatk - 1];
        xRight = xPole = Floor [k/ 2]];
    m = -xPole;
    guess1 = xStationary + Sign [xPole - xStationary]
                   * Sqrt [2.0*Abs [(yStationary - y)/Gamma''[xStationary]]];
    guess2 = If [m == 0,
                 (y + EulerGamma)^-1,
                 -m + (m!*If [EvenQ[m],  y,  -y] +
                   EulerGamma*(0.0030473073347290214`  - 0.877977463243091`/(0.193710670648521` + m) - 1.73338302794751`*Log[m]))^-1];
    guess = If [Abs[xStationary - guess1] < Abs[xStationary - guess2],
                guess1,
                guess2];
    Quiet [FindRoot [Gamma[var] == y,  {var, guess, xLeft, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Branch 1 is the default: *)

RealInverseGamma [y_] := RealInverseGamma[y, 1];

RealInverseGamma [] := {-Infinity, 2};
Protect [RealInverseGamma];


(* ::Subsection::Closed:: *)
(*RealInverseHyperfactorial*)


Unprotect [RealInverseHyperfactorial];
ClearAll [RealInverseHyperfactorial];

SetAttributes [RealInverseHyperfactorial, {NumericFunction, Listable}];

$HyperfactorialAccuracyDelta = $RealInverseAccuracyDelta + 0.3778496921846877`;
  (* :Abs[RealExponent [Hyperfactorial[0.0]/Hyperfactorial[0.0]]] *)

  (* Special values: *)

RealInverseHyperfactorial[one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy,
                          k_/; 0 <= k <= 2 && WholeNumberQ[k]] :=
  k - one;  (* :Approximately set Accuracy. *)

(* ALL BRANCHES TAKING TOO MANY ITERATIONS. CONSIDER CHANGING TO Brent or Secant: *)

  (* Branch 2 returns 0.53769... <= x <= Infinity such that Hyperfactorial[x] == y: *)

RealInverseHyperfactorial [y_/; y >= 0.53768886373648651`,
                           two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[two] === Real) &&
      y >= HyperfactorialInfimumOrSupremumOrdinate [$float1 = two - y/y] :=
  Module [{precision = Precision [$float1],
           xLeft = HyperfactorialInfimumOrSupremumAbscissa [$float1],
           guess, var},
    guess = If [y > 1.17,  (* :Equal discrepancy magnitude breakpoint. *)
                guess = Log[0.11904378830784534`  + y];
                -0.45` + (2.`*Sqrt[-0.24875447703378425` + guess]) /
                  Re[Sqrt[ProductLog[-1.4715177646857693`*(0.24875447703378425` - guess)]]],
                0.5376888637364865` + Sqrt[-1.8671603853744` + 2.1222872336684904`*y]];
    Quiet [FindRoot [Re [Hyperfactorial [var]] == y,   {var, guess, xLeft, Infinity},
(*EvaluationMonitor :> ++$realInverseCount,*)
      (*Method -> "Secant",*)
      WorkingPrecision -> Max [precision, $MinWorkingPrecision],
      PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
      AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Branch 1 returns -0.70904... <= x <= 0.53769... such that Hyperfactorial[x] == y: *)

RealInverseHyperfactorial [y_Real | y_Integer | y_Rational /; y > 0,
                           one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[one] === Real) &&
       HyperfactorialInfimumOrSupremumOrdinate [$float1 = (y/y)*one] <= y <=
         HyperfactorialInfimumOrSupremumOrdinate [$float0 = $float1 - $float1] :=
  Module [{precision = Precision [$float1],
           xLeft = HyperfactorialInfimumOrSupremumAbscissa [$float0],
           xRight = HyperfactorialInfimumOrSupremumAbscissa [$float1],
           guess, var},
    guess = If [y > 1.16,  (* :Equal discrepancy magnitude breakpoint. *)
                xLeft + Sqrt[0.7643999393441229` - 0.5886010930271438`*y],
                xRight - Sqrt[-1.8671603853744` + 2.1222872336684904`*y]];
    Quiet [FindRoot [Re [Hyperfactorial [var]] == y,
                     {var, guess, xLeft, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {If [0.98 < y < 1.02,
                                          $HyperfactorialAccuracyDelta + precision,
                                          Infinity],  0.0}]][[1,2]]];

  (* Branch 0 returns -1 <= x <= -0.70904... such that Hyperfactorial[x] == y: *)

RealInverseHyperfactorial [y_/; y > 1,
                           zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[zero] === Real) &&
     y <= HyperfactorialInfimumOrSupremumOrdinate [$float0 = (y-y)/y + zero] :=
  Module [{precision = Precision [y + $float0],
           xRight = HyperfactorialInfimumOrSupremumAbscissa [$float0],
           guess, var},
    guess = If [y > 1.2532487771285707`,  (* :Equal discrepancy magnitude breakpoint. *)
                xRight - Sqrt[0.7643999393441224` - 0.5886010930271438`*y],
                -1.0 + (y - 1.0)^(3/2)];
    Quiet [FindRoot [Re [Hyperfactorial [var]] == y,
                     {var, guess, -1, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*)
                      WorkingPrecision -> precision,
                      PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                      AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Branch 1 is the default and what InverseFunction[Hyperfactorial] [y] gives: *)

RealInverseHyperfactorial [y_] := RealInverseHyperfactorial [y, 1];

RealInverseHyperfactorial [Infinity,
  two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] := Infinity;

RealInverseHyperfactorial [] := {0, 2};
 (* : It is feasible to do the countably infinite number of isolated negative branches. *)
Protect [RealInverseHyperfactorial];


(* ::Subsection::Closed:: *)
(*RealInverseLogBarnesG*)


Unprotect [RealInverseLogBarnesG];
ClearAll [RealInverseLogBarnesG];

SetAttributes [RealInverseLogBarnesG, {NumericFunction, Listable}];

RealInverseLogBarnesG [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                       k_/; 1 <= k <= 3 && WholeNumberQ[k]] := k + zero;

(* Branch three returns x >= 2.55766... such that LogBarnesG[x] == y: *)

RealInverseLogBarnesG [y_Real | y_Integer | y_Rational,
                       three_/; three == 3 && Accuracy[three] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[three] === Real) &&
      y >= LogBarnesGInfimumOrSupremumOrdinate [$float2 = three - y/y] :=
  Module [{precision = Precision [$float2],
           xLeft = LogBarnesGInfimumOrSupremumAbscissa [$float2],
           guess, var},
    Assert [y != 0.0];
    guess = If [y < 2.4742135241572676`,
                2.5576639327890196` + Sqrt [0.2303597974897842` + 4.217558131861954`*y],
                2.0 Sqrt [y / ProductLog[0.19914827347145578`*y]]];  (* :4/E^3 *)
    Quiet [FindRoot [LogBarnesG[var] == y,  {var, guess, xLeft, Infinity},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Branch 1 returns 0 <= x <= 1.391470... such that LogBarnesG[x] == y: *)

RealInverseLogBarnesG [y_Real | y_Integer | y_Rational,
                       one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[one] === Real) &&
     y <= LogBarnesGInfimumOrSupremumOrdinate [$float1 = (y - y)/y + one] :=
  Module [{precision = Precision [$float1],
           xRight = LogBarnesGInfimumOrSupremumAbscissa [$float1],
           guess, var},
    Assert [y != 0];
    If [$RealInverseUnderflowMachineNumberTo0Q (*&& precision === MachinePrecision*) &&
          y <= -$AbsLogMinMachineNumber,
        0.0,  (* :Intentionally underflow to 0.0. *)
        guess = If [y < 0,
                    Exp [y],
                    xRight - Sqrt [0.21190978074590558` - 3.00552579539608` * y]];
        Quiet [FindRoot [LogBarnesG[var] == y,  {var, guess, 0, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*)
                         WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                         PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                         AccuracyGoal -> {Infinity, 0.0}]][[1,2]]]];

  (* Branch 2 returns 1.39147... <= x <= 2.55766... such that LogBarnesG[x] == y: *)

RealInverseLogBarnesG [y_Real | y_Integer | y_Rational,
                       two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[two] === Real) &&
       LogBarnesGInfimumOrSupremumOrdinate [$float2 = (y - y)/y + two] <= y <=
         LogBarnesGInfimumOrSupremumOrdinate [$float1 = $float2 - 1] :=
  Module [{precision = Precision [$float1],
           xLeft = LogBarnesGInfimumOrSupremumAbscissa [$float1],
           xRight = LogBarnesGInfimumOrSupremumAbscissa [$float2],
           guess, var},
    Assert [y != 0.0];
    guess = If [y > 0.019742642358690943`,
                xLeft + Sqrt [0.21190978074590558`  - 3.00552579539608` * y],
                xRight - Sqrt [0.2303597974897842` + 4.217558131861954` * y]];
    Quiet [FindRoot [LogBarnesG[var] == y,
                     {var, guess, xLeft, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Branch 1 is default: *)

RealInverseLogBarnesG [y_] := RealInverseLogBarnesG [y, 1];

RealInverseLogBarnesG [Infinity,
                       three_/; three == 3 && Accuracy[three] > $MinWholeNumberAccuracy] :=
  Infinity;

RealInverseLogBarnesG [-Infinity,
                       one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  one - one;

RealInverseLogBarnesG [] := {1, 3}; (* : This is all real branches, with 3 being the righmost. *)
Protect [RealInverseLogBarnesG];


(* ::Subsection::Closed:: *)
(*RealInverseLogGamma*)


Unprotect [RealInverseLogGamma];
ClearAll [RealInverseLogGamma];

SetAttributes [RealInverseLogGamma, {NumericFunction, Listable}];

(* NOTE:  LogGamma[x] is intentionally not entirely equivalent to Log[Gamma[x]].
   Try  Plot [{Im[LogGamma[x]], Im[Log[Gamma[x]]}, {x, -3, 1}] *)

RealInverseLogGamma [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                     k_/; (k == 1 || k == 2) && WholeNumberQ[k]] := k + zero;

  (* Branch 1 returns x <= 1.46163... such that LogGamma[x] == y: *)

RealInverseLogGamma [y_Real | y_Integer | y_Rational,
                     one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[one] === Real) &&
      y > LogGammaInfimumOrSupremumOrdinate [$float1 = (y - y)/y + one] :=
  Module [{precision = Precision [$float1],
           xRight = LogGammaInfimumOrSupremumAbscissa [$float1],
           guess, var},
    Assert [y != 0];
    If [$RealInverseUnderflowMachineNumberTo0Q (*&& precision === MachinePrecision*) &&
          y >= $AbsLogMinMachineNumber,
        0.0,  (* :Intentionally underflow to 0.0. *)
        guess = If [y > 0.0,
                    Exp [-y],
                    xRight - Sqrt [0.25108974884291135` + 2.066815504328999`*y]];
        Quiet [FindRoot [LogGamma[var] == y,  {var, guess, 0, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*)
                         WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                         PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                         AccuracyGoal -> {Infinity, 0.0}]][[1,2]]]];

  (* Branch 2 returns x >= 1.46163... such that LogGamma[x] == y: *)

RealInverseLogGamma [y_Real | y_Integer | y_Rational,
                     two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[two] === Real) &&
      y > LogGammaInfimumOrSupremumOrdinate [$float1 = two - y/y] :=
  Module [{precision = Precision [$float1],
           xLeft = LogGammaInfimumOrSupremumAbscissa [$float1],
           guess, var},
    Assert [y != 0.0];
    guess = If [y < 0.775426736071383`,
                xLeft + Sqrt[0.25108974884291135` + 2.066815504328999`*y],
                Exp [1.0 + ProductLog [y/E]]];
    Quiet [FindRoot [LogGamma[var] == y,
                     {var,  guess, xLeft, Infinity},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Branch 1 is the default: *)

RealInverseLogGamma [y_] := RealInverseLogGamma [y, 1];

RealInverseLogGamma [Infinity,
                     one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  one - one;

RealInverseLogGamma [Infinity,
                     two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] :=
  Infinity;

RealInverseLogGamma [] := {1, 2};  (* : This is all real branches, with 2 being the rightmost. *)
Protect [RealInverseLogGamma];


(* ::Subsection::Closed:: *)
(*RealInverseLogIntegral*)


Unprotect [RealInverseLogIntegral];
ClearAll [RealInverseLogIntegral];

SetAttributes [RealInverseLogIntegral, {NumericFunction, Listable}];

RealInverseLogIntegral [-Infinity,
                        one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := one;

RealInverseLogIntegral [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
  one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := (one - one) + zero;

  (* Branch 1 returns 0 <= x <= 1 such that LogIntegral [x] == y: *)

RealInverseLogIntegral [y_/; y < 0,
                        one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    Head[y] === Real || Head[one] === Real :=
  Module [{precision = Precision [{y, one}],
           guess, var},
    (* Part of the following test is commented out because I cannot otherwise avoid a FindRoot error message: *)
    If [(*$RealInverseUnderflowMachineNumberTo0Q && precision === MachinePrecision &&*)
          y < 1 - $AbsLogMinMachineNumber,
        1.0,  (* :Intentionally underflow 1 - epsilon to 1.0. *)
        guess = Which [y > -0.09204472196355923`,
                         Exp [-ProductLog[- y ^ -1]],
                       y < -1.0674304305883346`,
                         1.0 - Exp [y - 0.57721566490153286`], (* :EulerGamma *)
                       True,
                         guess = 0.37867104306108795`  + y;
                         0.5 - (0.6931471805599453` + guess) * guess];
       If [guess == 1,
           guess,
           Quiet [FindRoot [LogIntegral[var] == y,  {var,  guess,  0,  1},
(*EvaluationMonitor :> ++$realInverseCount,*)
                            WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                            PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                            AccuracyGoal -> {Infinity, 0.0}]][[1,2]]]]];

RealInverseLogIntegral [Infinity,
                        two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] := Infinity;

RealInverseLogIntegral [-Infinity,
                        two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] := two/two;

RealInverseLogIntegral [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                        two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] :=
  LogIntegralZero [(two - two) + zero];

(* Returns x >= 1.0. such that LogIntegral [x] == y: *)

RealInverseLogIntegral [y_Real | y_Integer | y_Rational,
                        two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] /;
    Head[y] === Real || Head[two] === Real :=
  Module [{precision = Precision [{y, two}],
           guess, var},
    Assert [y != 0];
    (* Part of the following test is commented out because I cannot otherwise avoid a FindRoot error message: *)
    If [(*$RealInverseUnderflowMachineNumberTo0Q && precision === MachinePrecision &&*)
          y < 1 - $AbsLogMinMachineNumber,
         1.0,   (* :Intentionally underflow 1 + epsilon to 1.0 *)
         guess = Which [y > 3.9922408857219556`,
                          0.67 * Exp [-ProductLog[-1, -y ^ -1]],
                        y < 0.18853261056407736`,
                          1.0 + Exp [y - EulerGamma],
                        True,
                          With [{difference = y - 1.8951178163559368`}, (* :ExpIntegralEi [1.0] *)
                            E + difference * (1.0 + 0.18393972058572117` * difference)]];
        If [guess == 1,
            guess,
            Quiet [FindRoot [LogIntegral[var] == y,  {var, guess, 1, Infinity},
(*EvaluationMonitor :> ++$realInverseCount,*)
                             WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                             PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                             AccuracyGoal -> {Infinity, 0.0}]][[1,2]]]]];

  (* Branch 1 is the default: *)

RealInverseLogIntegral [y_] := RealInverseLogIntegral [y, 1];

RealInverseLogIntegral [] := {1, 2}; (* : This is all real branches, with 2 being the rightmost. *)
Protect [RealInverseLogIntegral];


(* ::Subsection::Closed:: *)
(*RealInverseParabolicCylinderD*)


(* Currently implement NumericFunction only for the 1st branch of only indices 1 and 2: *)

Unprotect [RealInverseParabolicCylinderD];
ClearAll [RealInverseParabolicCylinderD];

SetAttributes [RealInverseParabolicCylinderD, {NumericFunction, Listable}];

RealInverseParabolicCylinderD [n_/; n > 0 && WholeNumberQ[n] && OddQ[Round[n]],
                               zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                               one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  (n - n) + (one - one) + zero;

RealInverseParabolicCylinderD [n_/; n > 0 && WholeNumberQ[n],
                               zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                               k_/; k > 1 && WholeNumberQ[k]] /;
    Quotient [Round[n] + 3, 2] == k  := Infinity;

RealInverseParabolicCylinderD [
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy,
    sqrt2OnE_/; sqrt2OnE == Sqrt[2/E],
    uno_/; uno == 1 && Accuracy[uno] > $MinWholeNumberAccuracy] :=
  (sqrt2OnE - sqrt2OnE) + Sqrt [one + uno];

RealInverseParabolicCylinderD [one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy,
    fourExpMinus5fourths_/; fourExpMinus5fourths == 4*Exp[-5/4],
    uno_/; uno == 1 && Accuracy[uno] > $MinWholeNumberAccuracy] :=
  (fourExpMinus5fourths - fourExpMinus5fourths) + Sqrt [one + uno + uno + uno + uno];

  (* Returns -Sqrt[2] <= x <= Sqrt[2] such that ParabolicCylinderD [1, x] == y: *)

RealInverseParabolicCylinderD [one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy,
      y_/; y*y <= 2 / E,
      uno_/; uno == 1 && Accuracy[uno] > $MinWholeNumberAccuracy] /;
    Head[y] === Real || Head[uno] === Real || Head[one] === Real :=
  Module [{absY = Abs [y],
           precision = Precision [one + uno + y],
           guess, var},
    guess = Sign [y] * If [absY < 0.49678314314906563`,
                           absY,
                           Sqrt[2] - Sqrt[2 - Sqrt[2 * E] * absY]];
    Assert [y != 0.0];
    Re [Quiet [FindRoot [ParabolicCylinderD [1, var] == y,  {var, guess, -Sqrt[2], Sqrt[2]},
(*EvaluationMonitor :> ++$infSupCount,*)
                         WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                         PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                         AccuracyGoal -> {Infinity, 0.0}]][[1,2]]]];

RealInverseParabolicCylinderD [two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy,
    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := two - one + zero;

RealInverseParabolicCylinderD [two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy,
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy,
    uno_/; uno == 1 && Accuracy[uno] > $MinWholeNumberAccuracy] :=
  two - one - uno;  (* ?? *)

  (* Returns 0 <= x <= 2.236067... such that ParabolicCylinderD [2, x] == y: *)

RealInverseParabolicCylinderD [
    two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy,
    y_/; -1 <= y <= 4 * Exp[-5/4],
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
      (Head[y] === Real || Head[one] === Real || Head[two] === Real) :=
  Module [{precision = Precision [one + two + y],
           xRight = ParabolicCylinderDInfimumOrSupremumAbscissa [two, (y - y) + one],
           guess, var},
    Assert [y != 0.0];
    guess = If [y > -0.4153492466570097`,
                2.2360679774997896 - Sqrt [1.6 - 1.3961371829847367`*y],
                Sqrt [0.8*(1.0 + y)]];
    Quiet [FindRoot [ParabolicCylinderD [2, var] == y,  {var, guess, -1, xRight},
(*EvaluationMonitor :> ++ $infSupCount,*)
                      WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                      PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                      AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

RealInverseParabolicCylinderD [
    two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy,
    y_/; -1 <= y <= 4 * Exp[-5/4],
    too_/; too == 2 && Accuracy[too] > $MinWholeNumberAccuracy] /;
      (Head[y] === Real || Head[too] === Real || Head[two] === Real) :=
  Module [{precision = Precision [too + two + y],
           xRight = ParabolicCylinderDInfimumOrSupremumAbscissa [two, (y - y) + too],
           guess, var},
    Assert [y != 0.0];
    guess = If [y > 0.8`,
                2.23606797749979` + Sqrt [1.6 - 1.3961371829847367`*y],
                2.0 Sqrt[-ProductLog [-1, -0.25*y]]];
    Quiet [FindRoot [ParabolicCylinderD [2, var] == y,  {var, guess, Sqrt[5], Infinity},
                      WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                      PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                      AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Exploit symmetries for non-positive branches: *)

RealInverseParabolicCylinderD [n_/; EvenQ[Round[n]], y_, k_/; k <= 0] :=
  -RealInverseParabolicCylinderD [n, y, 1 - k];

RealInverseParabolicCylinderD [n_/; OddQ[Round[n]], y_, k_/; k <= 0] :=
  -RealInverseParabolicCylinderD [n, -y, 2 - k];

  (* Branch 1 is the default branch: *)

RealInverseParabolicCylinderD [n_, y_] := RealInverseParabolicCylinderD [n, y, 1];

RealInverseParabolicCylinderD [] := {1, 1};  (* : Consider doing all branches for all indices. *)
Protect [RealInverseParabolicCylinderD];


(* ::Subsection::Closed:: *)
(*RealInversePolyGamma*)


Unprotect [RealInversePolyGamma, $RealInversePolyGammaParameterRange];
ClearAll [RealInversePolyGamma];

SetAttributes [RealInversePolyGamma, {NumericFunction, Listable}];

  (* It is not too difficult to include negative integers; and possible to include all rational parameters: *)

$RealInversePolyGammaParameterRange = {-1, Infinity};  (* : Whole numbers only. *)

RealInversePolyGamma [n_? WholeNumberQ,
                      zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                      one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  PolyGammaZero [n, one + zero];

RealInversePolyGamma [n_/; n >= 0 && WholeNumberQ[n] && EvenQ [Round [n]],
                      zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                      k_/; k <= 1 && WholeNumberQ[k]] :=
  PolyGammaZero [n, zero + k];

RealInversePolyGamma [n_/; n >= 0 && WholeNumberQ[n] && EvenQ [Round [n]],
                      -Infinity,
                      k_/; k <= 1 && WholeNumberQ[k]] := (n - n) + k - 1;

RealInversePolyGamma [n_/; n >= 0 && WholeNumberQ[n],
                      Infinity,
                      k_/; k <= 0 && WholeNumberQ[k]] :=
  If [EvenQ [Round [n]],
      (n - n) + k,
      (n - n) + (k - k) + Floor [k/2]];

  (* Branch 1 for parameter n == 0: *)

RealInversePolyGamma [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                      y_Real | y_Integer | y_Rational,
                      one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    Head[y] === Real || Head[zero] === Real || Head[one] === Real := 
  Module [{precision = Precision [{y, one + zero}],
           guess, var},
    If [$RealInverseOverflowMachineNumberToSignedInfinityQ && precision === MachinePrecision &&
           y > -1.0 + $AbsLogMinMachineNumber,
        Infinity,  (* :Intentional overflow to correctly signed infinity. *)
        guess = If [y < -1.4714905520647192`,
                    (-y) ^ -1,
                    0.45 + Exp[y]];
        Quiet [FindRoot [PolyGamma [var] == y,  {var, guess},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]]];

RealInversePolyGamma [n_/; n > 0 && WholeNumberQ[n] && OddQ[Round[n]],
                      Infinity,
                      one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  (one - one) + (n - n);

  (* Branch 1 for parameter n >= 1: *)

RealInversePolyGamma [n_/; n > 0 && WholeNumberQ[n],
                      y_Integer | y_Real | y_Rational,
                      one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    (Head[n] === Real || Head[y] === Real || Head[one] === Real) &&
    Sign[y] === If [OddQ [Round[n]],  1,  -1] :=
  Module [{integerN = Round [n],
           absY = Abs [y],
           precision = Precision [{y, n, one}],
           guess, var},
    guess = If [absY < (n - one)! / n ^ n,
                ((n - one)! / absY) ^ (1/n),
                (n! / absY) ^ (1/(n + one))];
    Quiet [FindRoot [PolyGamma [integerN, var] == y,  {var, guess, 0, Infinity},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Branch k <= 0 for even parameter n >= 0: *)

RealInversePolyGamma [n_/; n >= 0 && WholeNumberQ[n] && EvenQ[$integern = Round[n]],
                      y_Integer | y_Real | y_Rational,
                      k_/; k <= 0 && WholeNumberQ[k]] /;
    (Head[n] === Real || Head[y] === Real || Head[k] === Real) :=
  Module [{precision = Precision [1 + n - k + Abs[y]],  (* :Assert arg is positive *)
           integerk = Round [k],
           guess = If [y > 0,
                       k - (y/n! + 2.0 ^ (1.0 + n)) ^ -(1.0 + n)^-1,
                       k - 1.0 + (-y + 2.0 ^ (1.0 + n)) ^ -(1.0 + n)^-1],
           var},
    Assert [y != 0];
    Quiet [FindRoot [PolyGamma [$integern, var] == y,  {var, guess, integerk - 1, integerk},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Branch k <= 0 for odd parameter n >= 1: *)

RealInversePolyGamma [n_/; n > 0 && WholeNumberQ[n] && OddQ[$integerN = Round[n]],
                      y_/; y > 0,
                      k_/; k <= 0 && WholeNumberQ[k]] /;
    (Head[y] === Real || Head[n] === Real || Head[k] === Real) &&
      ($yRight = PolyGammaInfimumOrSupremumOrdinate [n, $floatk = (n - n) + (y - y)/y + k,
                                                     Direction -> 1];
       $yLeft = PolyGammaInfimumOrSupremumOrdinate [n, $floatkMinus1 = $floatk - 1,
                                                    Direction -> -1];
       If [$yRight > $yLeft,
           $yLeft <= y <= $yRight,
           $yLeft >= y >= $yRight]) :=
  Module [{precision = Precision [$floatkMinus1],
           yStationary, xStationary, xPole, xLeft, xRight, guess1, guess2, guess, var},
    If [NumberQ [$yRight],
        yStationary = $yRight;
        xStationary = xRight = PolyGammaInfimumOrSupremumAbscissa [n, 1 + $floatkMinus1];
        xPole = xLeft = Floor [($floatkMinus1 + 1)/ 2],
    (* else: *)
        yStationary = $yLeft;
        xStationary = xLeft = PolyGammaInfimumOrSupremumAbscissa [n, $floatkMinus1];
        xPole = xRight = Floor [($floatkMinus1 + 1)/ 2]];
    guess1 = xStationary + Sign [xPole - xStationary]
                   * Sqrt [2.0*(y - yStationary) / PolyGamma[n + 2, xStationary]];
    guess2 = xPole + Sign[xStationary - xPole] * (n!/y) ^ (1.0/(1.0 + n));
    guess = If [Abs[xStationary - guess1] < Abs[xStationary - guess2],
                guess1,
                guess2];
    Quiet [FindRoot [PolyGamma[$integerN, var] == y,  {var, guess, xLeft, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

RealInversePolyGamma [minus1_/; minus1 == -1 && Accuracy[minus1] > $MinWholeNumberAccuracy,
                      y_,  k_] := RealInverseLogGamma [y, (minus1 - minus1) + k];

  (* The following two interpretations of a single argument conflict, so one must be commented out: *)

(*RealInversePolyGamma [n_? WholeNumberQ] := PolyGammaInfimumOrSupremumAbscissa [n];*)

  (* Parameter 0 (DiGamma) is the default parameter, and Branch 1 is the default branch: *)

RealInversePolyGamma [y_] := RealInversePolyGamma [0, y, 1];

RealInversePolyGamma [r_, y_] := RealInversePolyGamma [r, y, 1];

  (* Minimum then maximum implemented branch number: *)

RealInversePolyGamma [] := PolyGammaInfimumOrSupremumAbscissa [];
Protect [RealInversePolyGamma, $RealInversePolyGammaParameterRange];


(* ::Subsection::Closed:: *)
(*RealInversePolyLog*)


Unprotect [RealInversePolyLog, $RealInversePolyLogParameterRange];
ClearAll [RealInversePolyLog];

SetAttributes [RealInversePolyLog, {NumericFunction, Listable}];

$RealInversePolyLogParameterRange = {0, Infinity};

RealInversePolyLog [
  r_Real | r_Integer | r_Rational,
  zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
  one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := (r - r) + (one - one) + zero;

RealInversePolyLog [r_/; r > 1,
                    zetaOfr_,
                    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
  zetaOfr == Zeta[r] := (zetaOfr - zetaOfr) + (r - r) + one;

RealInversePolyLog [r_/; r > 0,
                    -Infinity,
                    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := -Infinity;

  (* General case: *)

RealInversePolyLog [n_/; n > 1 && WholeNumberQ[n],  (* :Slowly works for some nonwhole numbers *)
    y_,
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[n] === Real || Head[one] === Real) && y < Zeta [n] :=
  Module [{precision = Precision [{y, n, one}],
           yEstimateAtxEqMinusPrecision, guess, var},
    guess = If [Round [n] == 2,
                Which [
                  $RealInverseOverflowMachineNumberToSignedInfinityQ &&
                      precision === MachinePrecision &&
                      y < -0.5*$AbsLogMinMachineNumber*$AbsLogMinMachineNumber,
                    -Infinity,  (* :Intentional overflow to -Infinity. *)   
                  y < -1.883849751881095`,
                    -Exp [Sqrt [-3.2898681336964524` - 2.0*y]],
                  y > 1.4670529569883173`,
                    guess = y - 1.6449340668482262`;
                    1 - guess / ProductLog[-1, guess],
                  y > 1.0,
                    0.3977877271608699`  + 0.3661011617280187`*y,
                  True,
                    y*(1 + y*(-0.25 + 0.013888888888888888`*y))],
                Which [
                  y < -0.8224670334241132`,
                    yEstimateAtxEqMinusPrecision = precision * Erf [-0.1573768622754561` * n];
                    -precision + (precision - 1.0)
                      * (y - yEstimateAtxEqMinusPrecision) / (1.0 - yEstimateAtxEqMinusPrecision),
                  y > 0.8,
                    guess = Zeta [n - 1.0];
                    (y + guess - Zeta[n])/guess,
                  True,
                    guess = 2.0 ^ n;
                    0.5 * (Sqrt[guess * (guess + 4.0 * y)] - guess)]];
    Assert [y != 0];
    If [guess === -Infinity,
        guess,
        Quiet [FindRoot [Re [PolyLog[n, var]] == y,  {var, guess, -Infinity, Zeta[n]},
(*EvaluationMonitor:> ++$realInverseCount,*)
                         WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                         PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                         AccuracyGoal -> {Infinity, 0.0}]][[1,2]]]];

(*RealInversePolyLog [minus1_/; minus1 == -1 && Accuracy[minus1] > $MinWholeNumberAccuracy,
                    (y_Real | y_Integer | y_Rational) /; y >= -1/4,
                    uno_/; uno == 1 && Accuracy[uno] > $MinWholeNumberAccuracy] :=
  (uno + 2*y - Sqrt[4*y - minus1])/(2*y);

RealInversePolyLog [minus1_/; minus1 == -1 && Accuracy[minus1] > $MinWholeNumberAccuracy,
                    (y_Real | y_Integer | y_Rational) /; y >= -1/4,
                    two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] :=
  (1 + two*y + Sqrt[4*y - minus1])/(two*y);*)

  (* Branch 1 is the default, and the only branch for nonnegative parameter values: *)

RealInversePolyLog [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                    minus1_/; minus1 == -1 && Accuracy[minus1] > $MinWholeNumberAccuracy,
                    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := -Infinity;

RealInversePolyLog [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
    y_Real | y_Rational | y_Integer,
    oneOr2_/; (oneOr2 == 1 || oneOr2 == 2) && Accuracy[oneOr2] > $MinWholeNumberAccuracy] :=
  zero + y / (oneOr2/oneOr2 + y);

RealInversePolyLog [one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy,
                    y_Real | y_Rational | y_Integer,
                    uno_/; uno == 1 && Accuracy[uno] > $MinWholeNumberAccuracy] :=
  one*uno - Exp[-y];

RealInversePolyLog [r_/; r <= 1 && Accuracy[r] > $MinWholeNumberAccuracy,
                    Infinity,
                    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  (r - r) + one;

RealInversePolyLog [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                    minus1_/; minus1 == -1 && Accuracy[minus1] > $MinWholeNumberAccuracy,
                    two_/; two == 1 && Accuracy[two] > $MinWholeNumberAccuracy] := Infinity;

RealInversePolyLog [n_,  y_] := RealInversePolyLog [n, y, 1];

RealInversePolyLog [] := {1, 2};  (* : Only PolyLog[0,x] has two branches. *)
Protect [RealInversePolyLog, $RealInversePolyLogParameterRange];


(* ::Subsection::Closed:: *)
(*RealInverseRamanujanTauTheta*)


Unprotect [RealInverseRamanujanTauTheta];
ClearAll [RealInverseRamanujanTauTheta];

SetAttributes [RealInverseRamanujanTauTheta, {NumericFunction, Listable}];

RealInverseRamanujanTauTheta [] := {0, 2};  (* : This is all of the real branches. *)

  (* Branch 1 is the default: *)

RealInverseRamanujanTauTheta [y_] := RealInverseRamanujanTauTheta [y, 1];

  (* Exploit anti-symmetry to compute branch 0 and left half of branch 1: *)

RealInverseRamanujanTauTheta [y_,
                              zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  -RealInverseRamanujanTauTheta [-y,  zero + 2];  (* : MachineNumberQ or Accuracy of zero effects 2nd arg. *)

RealInverseRamanujanTauTheta [y_/; y > 0,
                              one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  -RealInverseRamanujanTauTheta [-y,  one];

  (* Special values: *)

RealInverseRamanujanTauTheta [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                              one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  (one - one) + zero;

RealInverseRamanujanTauTheta [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                              two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] :=
  RamanujanTauThetaZero [zero + two/two];

RealInverseRamanujanTauTheta [Infinity,
                              two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] :=
 Infinity;

  (* General cases: *)

RealInverseRamanujanTauTheta [y_/; -0.25915760396068138` <= y < 0,
                              one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    Head[y] === Real || Head[one] === Real :=
  Module [{precision = Precision [{y, one}],
           guess = If [y > -0.17,
                       -7.589591447362443`*y,
                       3.030465319286616` - Sqrt [23.762783651473985`*(y  + 0.25915760396068244`)]],
           var},
    Assert [y != 0];
      Quiet [FindRoot [RamanujanTauTheta[var] == y,  {var, guess(*, 3.0304653192867513`, Infinity*)},
(*EvaluationMonitor :> ++$realInverseCount,*)
                       WorkingPrecision -> precision,
                       PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                       AccuracyGoal -> Infinity]][[1,2]]];

RealInverseRamanujanTauTheta [y_/; y >= -0.25915760396068138`,
                              two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[two] === Real) :=
  Module [{guess = If [y > 0.0,
                       3.0025630980756417` * (1.835784492771516` + y ^ 0.7142857142857143),
                       3.030465319286616` + Sqrt [23.762783651473985`*(y  + 0.25915760396068244`)]],
           precision, var},
    Assert [y != 0];
    precision = Precision [{y, two}];
    Quiet [FindRoot [RamanujanTauTheta[var] == y,  {var, guess(*, 3.0304653192867513`, Infinity*)},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> precision,
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> Infinity]][[1,2]]];
Protect [RealInverseRamanujanTauTheta];


(* ::Subsection::Closed:: *)
(*RealInverseRiemannSiegelTheta*)


Unprotect [RealInverseRiemannSiegelTheta];
ClearAll [RealInverseRiemannSiegelTheta];

SetAttributes [RealInverseRiemannSiegelTheta, {NumericFunction, Listable}];

RealInverseRiemannSiegelTheta [] := {0, 2};  (* : This is all of the real branches. *)

RealInverseRiemannSiegelTheta [y_] := RealInverseRiemannSiegelTheta [y, 1];

  (* Exploit anti-symmetry to compute branch 0: *)

RealInverseRiemannSiegelTheta [y_,
    zero_/; zero == 0  && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  -RealInverseRiemannSiegelTheta [-y,  zero + 2];  (* : MachineNumberQ or Accuracy of zero effects 2nd arg. *)

  (* Special values: *)

RealInverseRiemannSiegelTheta [
  zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
  one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := (one - one) + zero;

RealInverseRiemannSiegelTheta [
  zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
  two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] :=
  RiemannSiegelThetaZero [zero + two/two];

RealInverseRiemannSiegelTheta [Infinity,
  two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] := Infinity;

  (* Branch 1 returns -6.289836... < x 6.28986... such that RiemannSiegelTheta[x] == y: *)

RealInverseRiemannSiegelTheta [y_/; Abs[y] <= 3.5309728290166074,
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    Head[y] === Real || Head[one] === Real :=
  Module [{absY = Abs [y],
           precision = Precision [{y, one}],
           guess, var},
    Assert [y != 0];
    guess = If [absY < 1.2129494398247131`,
                -0.37228810781897603` * y,
                guess = Pi - 8.0 * absY;
                Sign[y] * guess / (-4.0 * ProductLog [-1, 0.014637457881079792`*guess])];
    Quiet [FindRoot [RiemannSiegelTheta[var] == y,
                     {var, guess(*, -6.2898359888369028`, 6.2898359888369028`*)},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> precision,
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> Infinity]][[1,2]]];

  (* Returns x > 6.289836... such that RiemannSiegelTheta[x] == y: *)

RealInverseRiemannSiegelTheta [y_Real /; -3.5309728290166074 <= y,
       two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] /;
     Head[y] === Real || Head[two] === Real :=
  Module [{precision = Precision [{y, two}],
           guess = Pi + 8.0 * y,
           var},
    guess = guess / (4.0 * ProductLog [0.014637457881079792`*guess ]);
    Assert [y != 0.0];
    Quiet [FindRoot [RiemannSiegelTheta[var] == y,
                     {var, guess(*, 6.2898359888369028`, Infinity*)},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> precision,
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> Infinity]][[1,2]]];

Protect [RealInverseRiemannSiegelTheta];


(* ::Subsection::Closed:: *)
(*RealInverseSinIntegral*)


Unprotect [RealInverseSinIntegral];
ClearAll [RealInverseSinIntegral];

SetAttributes [RealInverseSinIntegral, {NumericFunction, Listable}];

RealInverseSinIntegral [] := {-Infinity, Infinity}; (* : This is all real branches. *)

  (* Special values: *)

RealInverseSinIntegral [
  zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
  one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := (one - one) + zero;

  (* Branch 1: *)

RealInverseSinIntegral [y_Real | y_Integer | y_Rational,
                        one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[one] === Real) &&
      Abs[y] <= ($yRight = SinIntegralInfimumOrSupremumOrdinate [$float1 = (y/y)*one]) :=
  Module [{absY = Abs [y],
           precision = Precision [$float1],
           guess, var},  
    Assert [y != 0];
    guess = If [absY < 1.5376077322004913`,
                y * (1.0 + 0.05555555555555555` * y * y),
                Sign[y] * (Pi - Sqrt [6.283185307179586`*($yRight - absY)])];
    Quiet [FindRoot [SinIntegral [var] == y,  {var, guess, -Pi, Pi},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Branch k >= 1: *)

RealInverseSinIntegral [y_Real | y_Integer | y_Rational,
                        k_/; k >= 2 && WholeNumberQ[k]] /;
  (Head[y] === Real || Head[k] === Real) &&
    ($yRight = SinIntegralInfimumOrSupremumOrdinate [$floatk = (y/y)*k];
     $yLeft = SinIntegralInfimumOrSupremumOrdinate [$floatkMinus1 = $floatk - 1];
     If [EvenQ [Round[k]],
         $yRight <= y <= $yLeft,
         $yLeft <= y <= $yRight]) :=
  Module [{precision = Precision [$floatk],
           xRight = SinIntegralInfimumOrSupremumAbscissa [$floatk],
           xLeft = SinIntegralInfimumOrSupremumAbscissa [$floatkMinus1],
           guess, var},
    Assert [y != 0.0];
    guess = If [Abs [$yRight - y] < Abs [$yLeft - y],
                xRight - Sqrt [6.283185307179586`*($floatk + 1.0)*Abs[$yRight - y]],
                xLeft + Sqrt [(6.283185307179586`*$floatk) * Abs[$yLeft - y]]];
    Quiet [FindRoot [SinIntegral [var] == y,  {var, guess, xLeft, xRight},
(*EvaluationMonitor:> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Use symmetry to compute non-positive branches: *)

RealInverseSinIntegral [y_, k_/; k <= 0 && WholeNumberQ[k]] :=
  -RealInverseSinIntegral [-y, 1 - k];

  (* Branch 1 is default: *)

RealInverseSinIntegral [y_] := RealInverseSinIntegral [y, 1];

RealInverseSinIntegral [piOn2_/; piOn2 == Pi/2,  Infinity] := Infinity;

RealInverseSinIntegral [] := {-Infinity, Infinity}; (* : This is all real branches. *)

Protect [RealInverseSinIntegral];


(* ::Subsection::Closed:: *)
(*RealInverseSinc*)


Unprotect [RealInverseSinc];
ClearAll [RealInverseSinc];

SetAttributes [RealInverseSinc, {NumericFunction, Listable}];

RealInverseSinc [] := {-Infinity, Infinity}; (* : This is all real branches. *)

  (* Branch 1 is default: *)

RealInverseSinc [y_] := RealInverseSinc [y, 1];

RealInverseSinc [y_, k_] := RealInverseSphericalBesselJ [0, y, k];

Protect [RealInverseSinc];


(* ::Subsection::Closed:: *)
(*RealInverseSinhIntegral*)


Unprotect [RealInverseSinhIntegral];
ClearAll [RealInverseSinhIntegral];

SetAttributes [RealInverseSinhIntegral, {NumericFunction, Listable}];

  (* Special values: *)

RealInverseSinhIntegral [
  zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] := zero;

  (* Real y: *)

RealInverseSinhIntegral [y_Real] :=
  Module [{absY = Abs [y],
           precision = Precision [y],
           absGuess, var},
    absGuess = If [absY > 2.6178666130668127`,
                   -ProductLog[-1, (-2.0 * absY) ^ -1],
                   absY];
    Assert [y != 0];
    Quiet [FindRoot [SinhIntegral [var] == y, {var, Sign [y] * absGuess(*, -absGuess, absGuess*)},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Branch 1 is the default: *)

RealInverseSinhIntegral [y_,
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  RealInverseSinhIntegral [(one - one) + y];

RealInverseSinhIntegral [Infinity] := Infinity;
RealInverseSinhIntegral [-Infinity] := -Infinity;

RealInverseSinhIntegral [] := {1, 1};  (* : There is only one real branch. *)

Protect [RealInverseSinhIntegral];


(* ::Subsection::Closed:: *)
(*RealInverseSphericalBesselJ*)


Unprotect [RealInverseSphericalBesselJ];
ClearAll [RealInverseSphericalBesselJ];

SetAttributes [RealInverseSphericalBesselJ, {NumericFunction, Listable}];

$SphericalBesselJAccuracyDelta = -2.0;

  (* Exploit symmetry to compute non-positive branches: *)

RealInverseSphericalBesselJ [n_? WholeNumberQ,
                             y_/; Im[y] == 0,
                             k_/; k <= 0 && WholeNumberQ[k]] :=
  -If [EvenQ [Round [n]],
       RealInverseSphericalBesselJ [n, y, 1 - k],
       RealInverseSphericalBesselJ [n, -y, 2 - k]];

 (* For negative whole parameters n, compute via RealInverseSphericalBesselY: *)

RealInverseSphericalBesselJ [n_/; n < 0 && WholeNumberQ[n],
                             y_,
                             k_? WholeNumberQ] :=
  If [OddQ[Round[n]],
      -RealInverseSphericalBesselY [1 - n, y, k],
      RealInverseSphericalBesselY [1 - n, y, k]];

 (* Exploit symmetry to compute left half of first branch for odd n: *)

RealInverseSphericalBesselJ [n_/; WholeNumberQ[n] && OddQ[Round[n]],
                             y_/; y < 0,
                             one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  -RealInverseSphericalBesselJ [n, -y, one];

  (* Special values: *)

RealInverseSphericalBesselJ [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                             one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy,
                             uno_/; uno == 1 && Accuracy[uno] > $MinWholeNumberAccuracy] :=
  (one - one) + (uno - uno) + zero;

RealInverseSphericalBesselJ [
  r_/; r > 0,
  zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
  one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] := (r - r) + (one - one) + zero;

RealInverseSphericalBesselJ [r_/; r >= 0,  (* : Make it work for negative r too !! *)
                             zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                             k_? WholeNumberQ] := SphericalBesselJZero [r, k];

 (* Inverse for the first branch of SphericalBesselJ [n, x] for integer n >= 0: *)

RealInverseSphericalBesselJ [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                             y_/; y < 1,
                             one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[zero] === Real || Head[one] === Real) &&
       y > ($yRight = SphericalBesselJInfimumOrSupremumOrdinate [zero,
                                                                 $float1 = (y - y)/y + zero + one]) :=
  Module [{precision = Precision [$float1],
           xRight = SphericalBesselJInfimumOrSupremumAbscissa [zero, $float1],
           guess, var},
    Assert [y != 0.0];
    guess = If [y > 0.6055505928519709`,
                Sqrt [6.0*(1.0 - y)],
                xRight - 3.0342507637806415` Sqrt[y - $yRight]];
    Quiet [FindRoot [SphericalBesselJ [0, var] == y,  {var, guess, 0, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> If [y > 0.99,
                                         {0.0, $SphericalBesselJAccuracyDelta + precision},
                                         {Infinity, 0.0}]]][[1,2]]];

  (* The following special case code saves only about one iteration: *)
(*RealInverseSphericalBesselJ [one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy,
                             y_/; y < 0.4361818172714585`,
                             uno_/; uno == 1 && Accuracy[uno] > $MinWholeNumberAccuracy] /;
    Head[y] === Real || Head[uno] === Real || Head[one] === Real :=
  Module [{precision = Precision [one + uno + y],
           guess = If [y < 0.2181584799710291`,
                       3.0 * y,
                       2.0815759778181007`
                         - 2.9182330715402314`* Sqrt [Max [0.0, 0.43618181727145856` - y]]],
           var},
    Assert [y > 0];
    Quiet [FindRoot [SphericalBesselJ [1, var] == y,  {var, guess},
EvaluationMonitor :> ++$realInverseCount,
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> Infinity]][[1,2]]];*)

RealInverseSphericalBesselJ [r_/; r > 0,
                             y_/; 0 < y < 1,
                             one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[r] === Real || Head[one] === Real) &&
      y <= ($yRight = SphericalBesselJInfimumOrSupremumOrdinate [r, $float1 = (y/y)*one])  :=
  Module [{precision = Precision [$float1],
           xRight = SphericalBesselJInfimumOrSupremumAbscissa [r, $float1],
           guess, var},
    Assert [y != 0];
    guess = If [y < (0.033870477672652735` + 0.6053962498875188`*Exp[-0.11085477822367691`*r])
                       * $yRight,
                (Factorial2[2.0*r + 1.0] * y)^(1/r),
                xRight - Sqrt[Max [0.0,
                           (2.0 / D [SphericalBesselJ [r, var], {var, 2}] /. var -> xRight)
                                 *(y - $yRight)]]];
    Quiet [FindRoot [SphericalBesselJ [r, var] == y,  {var, guess, 0, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Inverse for the kth real branch of SphericalBesselJ [r, x] with r >= 0 and k > 1: *)

RealInverseSphericalBesselJ [r_Real | r_Integer | r_Rational,
                             y_Real | y_Integer | y_Rational,
                             k_/; k > 1 && WholeNumberQ[k]] /;
   (Head[y] === Real || Head[r] === Real || Head[k] === Real) &&
       (($yRight = SphericalBesselJInfimumOrSupremumOrdinate [r, $floatk = (r-r) + (y/y)*k]) <=
          y <= ($yLeft = SphericalBesselJInfimumOrSupremumOrdinate [r, $floatkMinus1 = $floatk - 1]) ||
        $yRight >= y >= $yLeft) :=
  Module [{precision = Precision [$floatk],
           xLeft = SphericalBesselJInfimumOrSupremumAbscissa [r, $floatkMinus1],
           xRight = SphericalBesselJInfimumOrSupremumAbscissa [r, $floatk],
           guess, var},
    Assert [y != 0.0];
    guess = xLeft + (xRight - xLeft)
                    * ArcCos [Clip[(2.0 * y - $yLeft - $yRight) / ($yLeft - $yRight)]] / Pi;
    Quiet [FindRoot [SphericalBesselJ [r, var] == y,  {var, guess, xLeft, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

RealInverseSphericalBesselJ [r_Real | r_Integer | r_Rational,
                             zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
                             Infinity] := Infinity;

  (* Default Branch is branch 1: *)

RealInverseSphericalBesselJ [n_, y_] := RealInverseSphericalBesselJ [n, y, 1];

RealInverseSphericalBesselJ [] := {-Infinity, Infinity};  (* ?? *)

Protect [RealInverseSphericalBesselJ];
















(* ::Subsection::Closed:: *)
(*RealInverseSphericalBesselY*)


Unprotect [RealInverseSphericalBesselY];
ClearAll [RealInverseSphericalBesselY];

SetAttributes [RealInverseSphericalBesselY, {NumericFunction, Listable}];

 (* For negative whole parameters n, compute via RealInverseSphericalBesselY: *)

RealInverseSphericalBesselY [n_/; n < 0 && WholeNumberQ[n],
                             y_,
                             k_? WholeNumberQ] :=
  If [OddQ[Round[n]],
      RealInverseSphericalBesselJ [1 - n, y, k],
      -RealInverseSphericalBesselJ [1 - n, y, k]];

  (* Exploit symmetry to compute non-positive branches: *)

RealInverseSphericalBesselY [n_? WholeNumberQ,
                             y_,
                             k_/; k <= 0 && WholeNumberQ[k]] :=
  -RealInverseSphericalBesselY [n,  If [EvenQ [Round [n]],
                                        -y,
                                        y],  1 - k];

  (* Special values: *)

RealInverseSphericalBesselY [n_/; n >= 0 && WholeNumberQ[n],
  zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
  k_/; k > 0 && WholeNumberQ[k]] := SphericalBesselYZero [n, k + zero];

 (* Inverse for the first branch of SphericalBesselY [n, x] for integer n >= 0: *)

RealInverseSphericalBesselY [n_/; n >= 0 && WholeNumberQ[n],
                             y_Real | y_Integer | y_Rational,
                             one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    (Head[y] === Real || Head[n] === Real || Head[one] === Real) &&
     y <= ($yRight = SphericalBesselYInfimumOrSupremumOrdinate [n, $float1 = (n-n) + (y/y)*one]) :=
  Module [{precision = Precision [$float1],
           xRight = SphericalBesselYInfimumOrSupremumAbscissa [n, $float1],
           guess, var},
    guess = If [n == 0 && y < -0.6902262070034775` || n != 0 && y < -1.44 + Exp[-0.5*n],
                (-Factorial2 [2*n - 1] / y) ^ (1/(1+n)),
                xRight -
                  Sqrt [-2.0*($yRight - y)/(D[SphericalBesselY[n,var],{var,2}] /. var -> xRight)]];
    Assert [y != 0.0];
    Quiet [FindRoot [SphericalBesselY [n, var] == y,
                     {var, guess, 0, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Inverse for the kth real branch of SphericalBesselY [n, x] with n >= 0 and k > 1: *)

RealInverseSphericalBesselY [n_/; n >= 0 && WholeNumberQ[n],
                             y_Real | y_Integer | y_Rational,
                             k_/; k > 1 && WholeNumberQ[k]] /;
    (Head[y] === Real || Head[n] === Real || Head[k] === Real) &&
      ($yRight = SphericalBesselYInfimumOrSupremumOrdinate [n, $floatk = (n-n) + (y/y)*k];
       $yLeft = SphericalBesselYInfimumOrSupremumOrdinate [n, $floatkMinus1 = $floatk - 1];
       $yLeft >= y >= $yRight || $yLeft <= y <= $yRight) :=
  Module [{precision = Precision [$floatk],
           xLeft = SphericalBesselYInfimumOrSupremumAbscissa [n, $floatkMinus1],
           xRight = SphericalBesselYInfimumOrSupremumAbscissa [n, $floatk],
           guess, var},
    Assert [y != 0.0];
    guess = xLeft + (xRight - xLeft)
             * ArcCos [Clip[(2.0 * y - $yLeft - $yRight) / ($yLeft - $yRight)]] / Pi;
    Quiet [FindRoot [SphericalBesselY [n, var] == y,
                     {var, guess, xLeft, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Default Branch is branch 1: *)

RealInverseSphericalBesselY [n_, y_] := RealInverseSphericalBesselY [n, y, 1];

RealInverseSphericalBesselY [n_/; n >= 0 && WholeNumberQ[n],  zero_/; zero == 0, Infinity] := Infinity;
RealInverseSphericalBesselY [n_/; n >= 0 && WholeNumberQ[n],  -Infinity,
                    k_/; k > 0 && WholeNumberQ[k]] := (n - n) + (k - k);

RealInverseSphericalBesselY [] := {-Infinity, Infinity};  (* ?? *)

Protect [RealInverseSphericalBesselY];
















(* ::Subsection::Closed:: *)
(*RealInverseStruveL*)


Unprotect [RealInverseStruveL];

ClearAll [RealInverseStruveL];

SetAttributes [RealInverseStruveL, {NumericFunction, Listable}];

  (* Exploit anti-symmetry to compute the left half for even n: *)

RealInverseStruveL [n_/; WholeNumberQ[n] && EvenQ[Round[n]],
  y_/; y < 0,
  one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
 -RealInverseStruveL [n, -y, one];

  (* Some special values: *)

RealInverseStruveL [n_/; WholeNumberQ[n],
  zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
  one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  zero*((2*n + 1)!!/2) ^ (1/(n + 1));

  (* Returns 0 <= x <= Infinity such that StruveL[n, x] == y: *)

RealInverseStruveL [n_/; 0 <= n <= Last[RealInverseStruveL []] && WholeNumberQ [n],
    y_/; y > 0,
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
      Head[y] === Real || Head[n] === Real || Head[one] === Real :=
  Module [{integerN = Round [n],
           precision = Precision [{y, n, one}],
           guess, guess2, var},
    If [integerN === 0 && y > 1.390252358442759`
         || integerN > 0 && y > 0.3 + 2.0*Exp[-0.5*n], (* Insufficient for n > 2: *)
        guess = -0.5*ProductLog[-1, -0.6366197723675814`*(2.0*n + y)^-2];
        guess2 = guess + 0.9;
        guess -= 0.5,
        guess = (1.5707963267948966`*(2*integerN + 1)!! * y) ^ (1/(integerN + 1));
        guess2 = 0.7*guess;
        guess *= 1.00001];
    Quiet [FindRoot [Re [StruveL[integerN, var]] == y,
                     {var, guess, guess2, 0, Infinity},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     Method -> "Brent",
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> {Infinity, 0.0}]][[1,2]]];

  (* Other special values: *)

  (* Branch 1 is the default and what InverseFunction[StruveL[r,#]&, [y] gives.
     Branch 0 exists only for even indices.
     There are some unimplemented isolated real inverses for negative r: *)

RealInverseStruveL [n_,  y_] := RealInverseStruveL [n, y, 1];

  (* Exploit symmetry to compute the 0 branch for odd n: *)

RealInverseStruveL [n_/; WholeNumberQ[n] && OddQ[Round[n]],
    y_Real | y_Integer | y_Rational,
    zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
 -RealInverseStruveL [n, y, 1 + zero];

RealInverseStruveL [n_/; n != 0 && WholeNumberQ[n], Infinity] := Infinity;

RealInverseStruveL [] := {0, 2};

Protect [RealInverseStruveL];


(* ::Subsection::Closed:: *)
(*RealInverseZeta*)


Unprotect [RealInverseZeta];
ClearAll [RealInverseZeta];

SetAttributes [RealInverseZeta, {NumericFunction, Listable}]; 

  (* Special values: *)

RealInverseZeta [one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy,
                 two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] := Infinity;

RealInverseZeta [Infinity,
    two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] :=
  two - 1;  (* Cause appropriate result type. *)

RealInverseZeta [-Infinity,
                 one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  one;  (* Cause appropriate result type. *)

  (* Branch 2 returns x > 1 such that Zeta[x] == y: *)

RealInverseZeta [y_/; y > 1,
                 two_/; two == 2 && Accuracy[two] > $MinWholeNumberAccuracy] /;
    Head[y] === Real || Head[two] === Real :=
  Module [{precision = Precision [{y, two}],
           guess1, guess2, var},
    If [y > 1.1486539565886495`,
        guess1 = two/two + (y - EulerGamma)^-1;
        If [guess1 == 1.0,
            Return [guess1]],
        guess1 = -0.9999*Log[2.0, y - 1.0]];
    guess2 = guess1 + 0.6;
    Quiet [FindRoot [Zeta[var] == y,  {var, guess1, guess2, 1, Infinity},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     Method -> "Secant",
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> Infinity]][[1,2]]];

RealInverseZeta [
    minus1Half_/; minus1Half == -1/2 && Accuracy[minus1Half] > $MinWholeNumberAccuracy,
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  one*(minus1Half - minus1Half) + 1/2;  (* : Propagate Accuracy *)

RealInverseZeta [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy,
  k_/; k < 2 && WholeNumberQ[k]] := zero + 2*k - 4;

  (* Branch 1 returns -2.71726... < x < 1 such that Zeta[x] == y: *)

RealInverseZeta [y_Real | y_Integer | y_Rational,
                 one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] /;
    (Head [y] === Real || Head[one] === Real) &&
     y <= ZetaInfimumOrSupremumOrdinate [$float0 = (y/y) - one] :=
  Module [{precision = Precision [$float0 + one],
           xLeft = ZetaInfimumOrSupremumAbscissa [$float0],
           guess, guess2, var},
    Assert [y != 0];
    Which [y < -1.5941449980536322`,
             guess = y ^ -1;
             guess = one + guess * (one + EulerGamma * guess);
             If [guess == 1.0,
                 Return [guess]];
             guess2 = guess - 0.1,
           y < -0.1772343014272617`,
             guess = -2.963530609769054` + 6.866637291358321` * y
                      + 6.866637291358321` * Sqrt [(-1.1169038915052887` + y)
                                             *(-0.03752743829777701` + y)];
             guess2 = guess - 0.5,
           y < -0.010593905109102242`,
             guess = -1.5037647030432553` - 6.045176436519064` * y;
             guess2 = guess - 0.36,
           True,
             guess2 = Sqrt [0.7568134354677598` - 82.62254520098281`*y];
             guess = xLeft + guess2;
             guess2 = xLeft + 0.5*guess2];
    Assert [y != 0.0];
    Quiet [FindRoot [Zeta[var] == y,
                     {var, guess, guess2, xLeft, 1},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     Method -> If [y < -1.5941449980536322`,  "Secant",  "Brent"],
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> If [-0.55 < y < -0.45,
                                         $InverseFunctionsAccuracyGoalFactor * precision,
                                         Infinity]]][[1,2]]];

  (* Branch k <= 0: *)

RealInverseZeta [y_/; y != 0,
                 k_/; k <= 0 && WholeNumberQ[k]] /;
  (Head[y] === Real || Head[k] === Real) &&
    ($yRight = ZetaInfimumOrSupremumOrdinate [$floatk = (y - y)/y + k];
     $yLeft = ZetaInfimumOrSupremumOrdinate [$floatkMinus1 = $floatk - 1];
     If [OddQ [Round[k]],
         $yRight <= y <= $yLeft,
         $yLeft <= y <= $yRight]) :=
  Module [{precision = Precision [$floatkMinus1],
           xLeft = ZetaInfimumOrSupremumAbscissa [$floatkMinus1],
           xRight = ZetaInfimumOrSupremumAbscissa [$floatkMinus1 + 1],
           (*guess,*) var},
    Assert [y != 0];
           (*guess =  xLeft + (ZetaInfimumOrSupremumAbscissa [$floatkMinus1 + 1] - xLeft)
                    * ArcCos [Clip[(2.0 * y - $yLeft - $yRight) / ($yLeft - $yRight)]] / Pi;*)
    Quiet [FindRoot [Re [Zeta [var]] == y,
                     {var, (*guess *)xLeft, xRight},
(*EvaluationMonitor :> ++$realInverseCount,*)
                     (*Method -> "Brent",*)
                     WorkingPrecision -> Max [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> Infinity]][[1,2]]];

  (* Branch 1 is the default: *)

RealInverseZeta [y_] := RealInverseZeta [y, 1];

RealInverseZeta [] := {-Infinity, 2};

Protect [RealInverseZeta];


(* ::Section::Closed:: *)
(*End private, then EndPackage :*)


End [];
EndPackage [];


(* ::Title::Closed:: *)
(*Propose package*)


(* ::Section::Closed:: *)
(*Summary :*)


(* ::Subsection::Closed:: *)
(*Ultra permissive "MIT copyright" notice:*)


(* ::Text:: *)
(*Copyright (c) 2016, David R. Stoutemyer *)
(**)
(*Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:*)
(**)
(*The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.*)
(**)
(*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.*)


(* ::Subsection::Closed:: *)
(*History and purpose:*)


(* ::Text:: *)
(*This Mathematica package is under development by David R. Stoutemyer as part of the  AskConstants  program freely downloadable from either  AskContants.org  or  math.hawaii.edu/AskConstants*)
(**)
(*The AskConstants program requires Mathematica version 8.0 or later.*)
(**)
(*This version of the  Propose  package is given by the value of the public package-level variable*)
(*    $ProposeVersionNumber*)
(**)
(*Propose [floatingPointNumber_]  is a function that attempts to identify real symbolic constant subexpressions from their float or interval approximations in expression.*)
(**)
(*This package also contains an  NSimplify [u]   function that attempts to simplify non-float real constant expressions u  by using  Propose [N [u, precision]],  where precision is estimated to enable  Propose [...]  to propose an equivalent expression if modeled.*)
(**)
(*The Usage subsections briefly describe these and other useful functions and global variables.*)


(* ::Subsection::Closed:: *)
(*An algorithm synopsis, to be replaced by a detailed separate document at the download site:*)


(* ::Text:: *)
(*Propose [...]  uses two methods :*)


(* ::Subsubsection::Closed:: *)
(*1:  Table lookup :*)


(* ::Text:: *)
(*The first method is table lookup is inspired by descriptions of Simon Plouffe's Inverter and his work with Jon and Peter Borwein on Inverse Symbolic Calculator.*)


(* ::Item:: *)
(*Propose [...] uses a packed array of machine floats sorted in non-decreasing order, and a corresponding list of non-float constant expressions.*)


(* ::Item:: *)
(*Binary search of the float table gives the index of the nearest float less than or equal to a float y derived from the user's float.*)


(* ::Item:: *)
(*Linear search in the table of floats is done in both directions from that index until the relative difference between y and a float-table entry exceeds a certain threshold.*)


(* ::Item:: *)
(*Corresponding entries in the nonfloat table provide candidate expressions whose Merit can be assessed from the Agreement between y and the nonfloat candidate, together with the Entropy10 of the nonfloat candidate.*)


(* ::Item:: *)
(*To make the process more efficient, let c be a symbolic constant that we want in the table, such as Sqrt [2].*)


(* ::Subitem:: *)
(*The float given by the user is replaced by its absolute value, then the table result is multiplied by the Sign [...] of the given float.*)


(* ::Subitem:: *)
(*Each c and its corresponding float is multiplied by the appropriate power of 2 so that the table entries are all in the interval  [0.5, 1.0),  and the absolute value of the given float is multiplied by the appropriate power of two so that it is in this interval too. Before assessing a candidate nonfloat, it is divided by the power of two used to make the given float be in this interval. This enables each pair of entries to be applicable to any power of 2 times the nonfloat entry.*)


(* ::Subitem:: *)
(*Rather than just one such scaled search, the search is repeated for the given float is being multiplied by a succession of reduced rational numbers having an odd denominator and an odd numerator not exceeding a certain bound. This enables Propose [...] to assess many commonly-occurring rational multiples of the table entries.*)


(* ::Subitem:: *)
(*For each c, an appropriate multiple of 1/2 is also added to c and the corresponding float so that those table entries are also in the interval  [1/2, 1).  Each given float is also displaced by the appropriate multiple of 1/2 so that it is in this interval too.  Before assessing a candidate nonfloat, the multiple of 1/2 used to put the given float in this interval is subtracted from the candidate nonfloat.  This enables ech pair of entries to be applicable to any integer multiple of 1/2 plus the nonfloat table entry.*)


(* ::Subitem:: *)
(*Rather than just one such displaced search, the search is repeated for the given float being added to a successon of reduced rational numbers in the interval [0, 1/2) a numerator and denominator not exceeding a certain bound.  This enables Propose [...] to assess many instances of a table entry plus a commonly-occurring rational number.*)


(* ::Subsubsection::Closed:: *)
(*2:  Integer linear regression :*)


(* ::Text:: *)
(*The second method can be viewed as linear regression on a single data point in which the resulting coefficients are constrained to be integers.*)
(**)
(*It is inspired by:*)
(**)
(*A. Meichsner, Integer relation algorithms and the recognition of numerical constants, M. S. thesis, Simon Fraser University, 2001.  http://www.collectionscanada.gc.ca/obj/s4/f2/dsk3/ftp04/MQ61592.pdf*)
(*    *)
(*Peter Borwein, Kevin G. Hare and Alan Meichsner, "Reverse Symbolic Computations: The IDENTIFY Function ", 2002,  http://wayback.cecm.sfu.ca/CAG/products.html*)
(**)
(*but  Propose [...]  includes additional models and techniques.*)


(* ::Text:: *)
(*\[Bullet] Propose [...]  uses the Mathematica function  FindIntegerNullVector [...]  to determine the needed unknown rational coefficients in the models.*)


(* ::Subsubsubsection::Closed:: *)
(*\[Bullet] Propose [...]  is data driven to make it easy to select subsets of the built-in models and for users to implement additional models without modifying any functions in the  Propose  package or its prerequisite packages :*)


(* ::Subitem:: *)
(*Propose [...]  loops over a list of task records -- each corresponding to one model with one invocation of FindIntegerNullVector [...] -- accumulating candidate results that have sufficiently favorable merit.*)


(* ::Subitem:: *)
(*Each task record is a list of fixed relevant model information including the name of a function to apply to that record data and the user's float input. For example, if the model is  float = Pi*(n1 + n2*Log[2]+ n3*Sqrt[2]) / n4,  where  n1, n2, n3, and n4  are unknown integers to be determined by  FindIntegerNullVector [...],  then the corresponding task record includes the overall multiplier Pi, the "basis vector"  {1, Pi, Sqrt[2]}, and the function name  TryLinearCombinationTimesMultiplier.*)


(* ::Subitem:: *)
(*There are twelve such categories of models. For nine of these categories, adding a new model requires no more effort than studying a few examples of that category in the Initialization section of this package, then assigning an appropriate task record to a variable such as  $myLinearCombinationTimesMultiplier1,  then including that record in the optional  TaskList argument of  Propose [...]. There are many named tasklists that you can include with yours. Examples include $CompulsoryTasks, $PiTasks, $LogFamilyTasks, $SortedDefaultTasks, and $SortedAllTasks.  To avoid introducing errors into this package, your custom task records should be included in your own supplementary notebooks or packages rather than in this package file.  However, nominations for additional models of any kind to include in this package are welcome, as are literature citations supporting the occurrence of those models.*)


(* ::Subitem:: *)
(*The other three categories entail models of the form  float = resultMultiplier * f [...],  and work by using  FindIntegerNullVector [...]  to model the transformed float given by  transformedFloat = fInverse [float / resultMultiplier]  in some desired way, such as an overall argument multiplier times an algebraic number of a certain degree. Many functions f have multiple branches, each with limited real domains and ranges. This requires custom handling via a handler function whose name is included in the task record. For example, the handler function used for the model   float =  \[PlusMinus]1*ArcSinh [algebraicNumberOfdegreeN]  is  TryPlusOrMinusArcSinh [...].  If none of the handler functions in this package is suitable for an additional model that you want, then you must implement your own handler function in a supplementary notebook. There are many handler functions in this package that you can study for ideas.*)


(* ::Subitem:: *)
(*Adding a new category of models is more work -- but it can be done by studying the dispatch functions for existing categories, then implementing an analogous dispatch function for your new category in a supplementary notebook or package.*)


(* ::Subitem:: *)
(*Most users would like to see alternative equivalent candidates when one of them has a favorable merit. Therefore it is worthwhile trying other models that could be equivalent even after finding a very favorable merit.*)


(* ::Subitem:: *)
(*However, if a very favorable InverseTrigFamily candidate is generated, then it is very unlikely that a subsequent candidate belonging to any other named family such as TrigFamily will also be very favorable.  Thus task records include a family name, and Propose [...] skips task records outside a family after encountering a model in that family having Merit >= $LowestSkipOtherFamiliesMerit. (However, the initial family name None means useful equivalent expressions are unlikely, so skip all remaining tasks.)*)


(* ::Subitem:: *)
(*To further reduce the expected search time, each "cooked" record contains a float ratio R that is proportional to the estimated number of times N out of 20000 submissions that model is applicable to a float input submitted by a random user from a diverse ensemble, divided by the estimated computing time T for that model on a particular computer.  The cooked task records are sorted in non-increasing order of those ratios. The resulting order is independent of the clock speed of the particular computer that I used.*)


(* ::Subitem:: *)
(*To avoid the hazardous effort of manually computing the ratios R, each model is entered as one of twelve functions applied to a "raw" record. During program initialization, that function invocation converts the raw record to a cooked record. *)


(* ::Subitem:: *)
(*For example,  MakeTryLinearCombinationTimesMultiplier [LogFamily, 15.0, {1, Log [2], Sqrt [2]}, Pi],  produces a cooked record  {LogFamily, ..., TryLinearCombinationTimesMultiplier,  {1, Log [2], Sqrt [2]},  Pi},  wherein "..." is the float ratio used for sorting and "TryLinearCombinationTimesMultiplier" is the handler function applied to the user's input float together with record data  {1, Log [2], Sqrt [2]}  and  Pi.*)


(* ::Subitem:: *)
(*Notice that the above model is in the LogFamily despite also containing Pi and the algebraic number Sqrt[2]. That is why you can obtain a result containing components that do not belong to any of the families in your TaskList. I have put models in the family of their estimated rarest components. Ubiquitous components such as Pi and quadratic numbers are often obtained for free, but including $PiFamily in your optional TaskList Propose argument includes more models containing Pi.*)


(* ::Subsubsubsection::Closed:: *)
(*\[Bullet] More detail about models of the form  float = resultMultiplier * f [argumentMultiplier * degreeNAlgebraicNumber] :*)


(* ::Subitem:: *)
(*Computing such candidates requires inverse functions, many of which have more than one real branch. These handler functions have a branchNumber argument that defaults to 1 but is ignored when irrelevant. Often the handling of some branches is so different from the others that the handler for that branch is a separate function whose name includes the branch number.*)


(* ::Subitem:: *)
(*I try only degree 1 (rational numbers) if I have never seen a published instance of a higher degree algebraic number for f.*)


(* ::Subitem:: *)
(*So far, I have only seen published higher degrees for the InverseTrigFamily and for the LogFamily, which includes inverse hyperbolics. The addition identities for those families account for the occurrence of arbitrarily-high degree arguments. Nominations for higher degrees for other functions are welcome, as are literature citations supporting the occurrence of those models.*)


(* ::Subitem:: *)
(*argumentMultiplier defaults to 1, but Pi occurs almost universally for TrigFamily. Square-roots of 2 and/or Pi occur for some members of ErfFamily, etc.*)


(* ::Subitem:: *)
(*resultMultiplier defaults to 1, and the most common non-default multiplier is -1.*)


(* ::Subitem:: *)
(*However, handler functions named  TryPlusOrMinus...  automatically handle multipliers 1 and -1 for anti-symmetric functions  -f [x_] == f [-x]. Also, when f[x] is entirely nonnegative or entirely nonpositive for one of its maximally-monotonic subintervals of x, then the implementation for that subinterval accomodates both multipliers 1 and -1 by computing a candidate for the absolute value of the given float, then multipying the result by the Sign of the given float.*)


(* ::Subitem:: *)
(*For a function such as Erfc [...], if the magnitude of given float F exceeds the positive maximum value 2 of Erfc, then rather than giving up I often try the result multiplier n = Ceiling [F/2], thus salvaging the model by "multiplicative range extension". Such handler function names have a suffix such as  "Times2N". This technique for finessing an extra unknown coefficient often succeeds for integer multiples of functions such as Erfc that are more than half their maximum for a large portion of their argument domain. This technique is less frequently successful for functions such as ArcSin [x], that are less than half their positive maximum for a large portion of their argument domain. The same technique works for negative minimums.*)


(* ::Subitem:: *)
(*For a function such as Cosh [...], if the magnitude of given float F is less than the positive minimum value 1 of Cosh, then rather than giving up I often try the reciprocal result multiplier  r = Ceiling [1/F]^-1, thus salvaging that model by "reciprocal multiplicative range extension". Such handler function names have the suffix "OnN". This technique for finessing an extra unknown coefficient often succeeds for reciprocal multiples of functions such as Coth that are less than twice their minimum for a large portion of their argument domain. This technique is less frequently successful for functions that are more than twice their positive minimum for a large portion of their argument domain. The same technique works for negative maximums.*)


(* ::Subitem:: *)
(*For a finite-range function such as ArcTan [...], if the magnitude of given float F exceeds the positive maximum value Pi/2 of ArcTan, then rather than giving up I try the model  ArcTan [Mod [F, Pi, -Pi/2]] + n*d, where d = Pi is the difference between the maximum and minimum values of ArcTan [...] and n = Quotient [F, d, -Pi/2], thus salvaging the model by "additive range Completion". Such handler function names have the suffix of the form "Plus...N...". Although this technique is applicable to any float F, it suffers from catastrophic cancellation when Mod [F, ...]  is a small percentage of F.*)


(* ::Subitem:: *)
(*For a function such as Cosh [...], if the magnitude of given float positive float F is less than the positive minimum value 1 of Cosh, then rather than giving up I often try subtracting the minimum value, thus salvaging that model by "subtractive range completion". Such handler function names have the suffix of the form "Minus...". Although this technique is applicable to any float F between the positive minimum and 0.0, it suffers from catastrophic cancellation when the difference is a small percentage of F.*)


(* ::Subsection::Closed:: *)
(*Some programming issues:*)


(* ::Text:: *)
(*Naming conventions:*)
(**)
(*    a)  All function names are capitalized except for passive variants of built-in Mathematica functions,*)
(*         such as log10, ellipticNomeQ, and dirichletBeta.*)
(*    *)
(*    b)  Global variables and dynamically-scoped variables intended for access outside the Block*)
(*         where they are defined begin with $.*)
(*         *)
(*    c)  Such variables that are not expected to change value after "Run Package" are capitalized.*)
(**)
(*Issue:  Modularity would be improved by splitting this file into one for Propose and a dependent one for*)
(*   NSimplify, and I have sectioned this file to make that easy to do.  However, for some reason doing so*)
(*   causes "unfound file" errors -- at least in version 10.*)


(* ::Section::Closed:: *)
(*Propose usage :*)


BeginPackage["Propose`", {"Zeros`", "InfimaAndSuprema`", "RealInverseFunctions`", "Developer`", "ProposeLookupTable`"}];


If [$VersionNumber < 8.0,
    Print ["Sorry, but the functions in this Propose package will not work properly for Mathematica versions before 8.0."]];


On [Assert];  (* : New in Mathematica version 8.0 *)


  (* Use True during development to assess time limits.  Use False for distribution: *)
$reportTimeoutQ = True;


(* ::Subsection::Closed:: *)
(*Usage of public functions :*)


If [$VersionNumber < 10.0,
    FareySequence::usage = "";
    Unprotect [LogisticSigmoid];
    LogisticSigmoid::usage = "Mathematica function introduced in Version 10.0";
    LogisticSigmoid [z_] := (1 + E^-z) ^ -1;
    Attributes [LogisticSigmoid] = {Listable, NumericFunction, Protected};
    Protect [LogisticSigmoid]];


Agreement::usage = "Agreement [float, nonFloatConstant] returns the number of significant digits of agreement between the float and nonFloatConstant.
The maximum result value is the number of significand digits in the float.";

ProposeBestVerbose::usage = "ProposeBestVerbose [r_Real] returns either an empty list or a list of the form
  {nonFloatConstant,  {\!\(\*SubscriptBox[\(Agreement\), \(10\)]\), \!\(\*SubscriptBox[\(Entropy\), \(10\)]\), ... Merit} = ,{floatAgreement, floatEntropy10, Merit}},
  where \"...\" is one of the adjectives Excellent, Good, Medium, Poor, Bad, or Terrible.
Optional named arguments, their defaults, and example alternatives are
  TaskList -> $SortedDefaultTasks,      (* $SortedAllTasks *)
  MinAcceptableAgreement -> -Infinity,  (* $MinAcceptableAgreement *)
  MinAcceptableMerit -> -Infinity,      (* $LowestBadAgreement - 1 *)
  MaxAllowedEntropy10 -> Infinity,      (* 42 *)
  MaxSearchSec -> Infinity,             (* 8 *)";

ProposeBestBetterThanOrInput::usage =
"ProposeBestBetterThanOrInput [givenFloat] returns either the givenFloat or a proposed nonFloat limit as the precision
   of givenFloat -> Infinity.
Optional named arguments, their defaults, and example alternatives are
  TaskList -> $SortedDefaultTasks,                    (* $SortedAllTasks *)
  MinAcceptableAgreement -> $MinAcceptableAgreement,  (* 14 *)
  MinAcceptableMerit -> $LowestGoodMerit,             (* $LowestExcellentMerit *) 
  MaxAllowedEntropy10 -> Infinity,                    (* 21 *)
  MaxSearchSec -> Infinity,                          (* 1.5: A timeout returns best acceptable result found until then *)";

Propose::usage =
"By default, Propose [r_Real] returns a list of equivalence classes.
Each equivalence class is a list of triples ordered in non-increasing order of their last elements.
Each triple is a list of the form
   {nonFloatConstant,  {\!\(\*SubscriptBox[\(Agreement\), \(10\)]\), \!\(\*SubscriptBox[\(Entropy\), \(10\)]\), ... Merit} = ,{floatAgreement, floatEntropy10, floatMerit}},
   where \"...\" is one of the adjectives Excellent, Good, Medium, Poor, Bad, or Terrible.
The expressions in each equivalence class are equivalent.
The equivalence classes are sorted in non-increasing order of the merit of their first triple.
   where \"...\" is one of the adjectives Excellent, Good, Medium, Poor, Bad, or Terrible.
Optional named arguments, their defaults, and example alternatives are
     TaskList -> $SortedDefaultTasks,  (* $SortedAllTasks *)
     VerboseQ -> True,          (* If False, the middle element of each triple is omitted. *)
     PairWithRejectsQ -> False, (* If True, the list of equivalence classes is paired with a list of rejected triples. *)
     CollectEquivalentCandidatesQ -> True,   (* If False, the list of equivalence classes is replaced with a list of triples *)
     MinAcceptableAgreement -> $MinAcceptableAgreement,  (* 14 *) 
     MinSaveRejectAgreement -> $MinAcceptableAgreement,  (* 12: Applicable only if PairWithRejectsQ -> True *)
     MinAcceptableMerit -> $LowestBadMerit,  (* $LowestGoodMerit *)
     MinSaveRejectMerit -> 0,                (* $LowestBadMerit - 2: Applicable only if PairWithRejectsQ -> True *)
     MaxAcceptableCount -> Infinity,         (* 1 *)
     MaxAllowedEntropy10 -> Infinity,        (* 16 *)
     MaxSearchSec -> Infinity,               (* 1.5: A timeout returns the results accumulated until then *)
     EvidentFamily -> Null                   (* LogFamily: This is used only for development *)";

Entropy10::usage =
 "Entropy10 [nonFloatConstant]  returns the complexity measure used by Propose[\[Ellipsis]] to help compute Merit.
It is the sum of the base 10 logs of the absolute values of the nonzero integers,
   plus about 1.0 per function or operator.";

RandomDefault::usage = "RandomDefault [ ]  returns a nonFloat constant modeled by one of the tasts in $SortedDefaultTasks, with random rational coefficients.";

dirichletBeta::usage =
 "This function returns the float value of DirichletBeta for InexactNumberQ arguments, otherwise returning itself.
  To make an expression containing it transform other arguments, do
  expression /. dirichletBeta -> DirichletBeta";
dirichletEta::usage =
 "This function returns the float value of DirichletEta for InexactNumberQ arguments, otherwise returning itself.
  To make an expression containing it transform other arguments, do
  expression /. dirichletEta -> DirichletEta";
dirichletLambda::usage =
 "This function returns the float value of dirichletLambda for InexactNumberQ arguments, otherwise returning itself.
  To make an expression containing it transform other arguments, do
  expression /. dirichletLambda -> DirichletLambda";
Einstein1::usage =
 "Einstein1[x] is described at Weisstein, Eric W. 'Einstein Functions.' From MathWorld--A Wolfram Web Resource. http://mathworld.wolfram.com/Einsteins.html";
ellipticNomeQ::usage =
 "This function returns the float value of EllipticNomeQ for InexactNumberQ arguments, otherwise returning itself.
  To make an expression containing it transform other arguments, do
  expression /. ellipticNomeQ -> EllipticNomeQ";
RealInverseEinstein1::usage =
 "RealInverseEinstein1 [y_Real /; 0 \[LessEqual] y \[LessEqual] 1] more robustly and quickly returns the kth real branch value of InverseFunction[Einstein1] [y].
  RealInverseEinstein1 [] returns a list containing the smallest then largest implemented k.";
Einstein2::usage =
 "Einstein2[x] is described at Weisstein, Eric W. 'Einstein Functions.' From MathWorld--A Wolfram Web Resource. http://mathworld.wolfram.com/Einsteins.html";
RealInverseEinstein2::usage =
 "RealInverseEinstein2 [y_Real /; y >= 0] more robustly and quickly returns the unique real InverseFunction[Einstein2] [y].";
FromRoot::usage = "Analogous to the Mathematica ToRadicals[\[Ellipsis]] function, but tries harder and also considers converting to trigonometric expressions.";
GentleLogCombine::usage =
  "Combines linear combinations of logarithms to the extent that it is valid and reduces Entropy10[\[Ellipsis]].";
GentleSimplifiedArcCos::usage = "Converts ArcCos [1 / denominator] to ArcSec [denominator]";
GentleSimplifiedArcSin::usage = "Converts ArcSin [1 / denominator] to ArcCsc [denominator]";
GentleSimplifiedArcTan::usage = "Converts ArcTan [1 / denominator] to ArcCot [denominator]";
GentleExponentialsToHyperbolic::usage =
  "Combines linear combinations of exponetials to hyperbolic functions to the extent that it reduces Entropy10[\[Ellipsis]].";
inverseLogisticSigmoid::usage = "Inverse of the Mathematica LogisticSigmoid function introduced in Version 10.0";
log2::usage =
 "This function returns the float value of Log2 for InexactNumberQ arguments, otherwise returning itself.
  To make an expression containing it transform other arguments, do
  expression /. log2 -> Log2";
log10::usage =
 "This function returns the float value of Log10 for InexactNumberQ arguments, otherwise returning itself.
  To make an expression containing it transform other arguments, do
  expression /. log10 -> Log10";
NForMeritGoal::usage = "NForMeritGoal [nonFloatConstant]  returns a float approximation of nonFloatConstant,
  computed to a precision estimated to make Propose [float] propose an equivalent nonFloatConstant if
  one is modeled in the TaskList.";
QuietPossibleZeroQ::usage = "";
TimedPropose::usage = "Returns the computing time followed by the Propose output.";
ToString1D::usage = ":= ToString [expression, InputForm]";
VerbosifyCandidate::usage = "{nonFloat, float1, float2, float3} ->
  {expression1, Agreement \[TildeEqual] float1, Entropy10 \[TildeEqual] float2, meritPhrase \[TildeEqual] float3},
  where meritPhrase is one of Excellent merit, Good merit, Medium merit, Poor merit, Bad merit, or Terrible merit";


  (* These are for people who want to create their own tasks.  See examples of their use below: *)

MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch::usage = "";
MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch::usage = "";
MakeTryApproximatelyEqual::usage = "";
MakeTryLinearCombinationTimesMultiplier::usage = "";
MakeTryLinFracComboTimesMultiplier::usage = "";
MakeTryProduct::usage = "";
MakeTryQuadraticNumberTimesMultiplier::usage = "";
MakeTryRationalTimesMultiplier::usage = "";
MakeTryReciprocalOfAFunction::usage = "";
MakeTryReciprocalPowerOfRootApproximant::usage = "";
MakeTrySqrtOfLinearCombination::usage = "";
MakeTrySqrtOfLinFracCombo::usage = "";
MakeTrySqrtRationalTimesMultiplier::usage = "";



(* ::Subsection::Closed:: *)
(*Usage of optionally-public functions :*)


(* To reduce the chance of name conflicts, and possible inadvertent corruption,
     comment out all of these usage commands for the distributed version.
   During development, uncomment these usage commands to simplify access and
     to recognize misspellings via syntax coloring: *)

(*BetterRoot::usage = "";

DeMoivreSeptic::usage = "";
DeMoivreQuintic::usage = "";
DenestSqrt::usage = "";
DisplacePositiveFloatToHalfLEResultLT1::usage = "";

ExpandFreeOf::usage = "";

FailSymbolOrFunFormCandidateAndComplexity::usage = "";
FailSymbolOrRawCandidateRecord::usage = "";
FofRandomQuadratic::usage = "";
FofRandomRational::usage = "";
FromDecomposition::usage = "";
FromRootIfScaledPalindromial::usage = "";
FromRootIfShiftedBinomial::usage = "";
FromRootIfShiftedBinomialOrReciprocalThereof::usage = "";

GammaOrEquivalentFactorial::usage = "";

InferMachineFloatPrecisionGoal::usage = "";
IntegerOrRationalQ::usage = "";

largestBy::usage = "";
LinearCombinationTime::usage = "";
LookupDisplacedCandidates::usage = "";
LookupDisplacedCandidatesWithDisplacements::usage = "";
LookupScaledCandidatesWithMultipliers::usage = "";

MaybeDistributeSign::usage = "";
MinNon0Abs::usage = "";

NumericContentAndPrimitivePartOfALinearCombination::usage = "";

OddOnOddFareySequence::usage = "";

PalindromicScaleFactorOrFalse::usage = "";

QuietMod::usage = "";
QuietQuotient::usage = "";
QuietTimeConstrainedReComplexExpand::usage = "";
QuietTimeConstrainedFullSimplify::usage = "";
QuietTimeConstrainedSimplify::usage = "";

RandomAlgebraicNumber::usage = "";
RandomDeMoivreQuintic::usage = "";
RandomDeMoivreSeptic::usage = "";
RandomLinComb1kAndConstant::usage = "";
RandomLinearCombination::usage = "";
RandomLinFracCombination::usage = "";
RandomPalindromicRoot::usage = "";
RandomProduct::usage = "";
RandomReciprocalComposeDeg2Of3::usage = "";
RandomReciprocalShiftedBinomialRoot::usage = "";
RandomSign::usage = "";
RandomTrueOrFalse::usage = "";
RandomUnitNormalPoly::usage = "";
RequestedDegreeRootApproximantOrFailed::usage = "";

ScalePositiveMachineFloatToHalfLEResultLT1::usage = "";
SupplementSetWithEquivalents::usage = "";

TableIndexOfGLB::usage = "";
TimeForFunctionOfAlgNumbArg::usage = "";

TryAiryBiTimesN::usage = "";
TryArcCosOrArcSecTimesN::usage = "";
TryArcCosOrArcSecPlusNPi::usage = "";
TryArcSinOrArcCscPlusNPi::usage = "";
TryArcSinOrArcCscTimesN::usage = "";
TryArcTanOrArcCotPlusNPi::usage = "";
TryArcTanOrArcCotTimesN::usage = "";

TryBarnesGTimesOrOnN::usage = "";
TryBesselJOnN::usage = "";
TryBesselYTimesN::usage = "";

TryCoshIntegral::usage = "";
TryCosIntegralTimesN::usage = "";
TryCothMaybeDividedByN::usage = "";

TryDirichletBeta::usage = "";
TryDirichletEta::usage = "";
TryDirichletLambda::usage = "";

TryEinstein1TimesN::usage = "";
TryEllipticNomeQPlus2N::usage = "";
TryApproximatelyEqual::usage = "";
TryPlusOrMinusErfi::usage = "";
TryErfTimesN::usage = "";

TryPlusOrMinusFresnelCTimesOrOnN::usage = "";
TryPlusOrMinusFresnelSTimesOrOnN::usage = "";
TryFunctionOfAnAlgNumber::usage = "";

TryHaversineTimesN::usage = "";
TryHyperfactorialTimesOrOnN::usage = "";

TryInvBarnesG::usage = "";
TryInvDirichletBeta::usage = "";
TryInvDirichletEta::usage = "";
TryInvDirichletLambda::usage = "";
TryInvEllipticEPlusN::usage = "";
TryInvEllipticETimesN::usage = "";
TryInvEllipticKPlusN::usage = "";
TryInvEllipticKTimesN::usage = "";
TryInvEllipticNomeQPlusN::usage = "";
TryInvEllipticNomeQTimesN::usage = "";
TryInvEllipticTheta3ZeroTimesN::usage = "";
TryInvEllipticTheta3ZeroPlusN::usage = "";
TryInverseErfc::usage = "";
TryInverseErf::usage = "";
TryPlusOrMinusInverseHaversineTimesN::usage = "";
TryInvFactorial2::usage = "";
TryInvHyperfactorial::usage = "";
TryInvPolyLogPlusN::usage = "";
TryInvPolyLogTimesN::usage = "";
TryInvZetaBranch1TimesN::usage = "";
TryInvZetaBranch1PlusN::usage = "";

TryLinearCombinationTimesMultiplier::usage = "";
TryLinCombLinFracCombBasisPairsFromRoot::usage = "";
TryLinFracComboTimesMultiplier::usage = "";
TryLogBarnesGOnN::usage = "";
TryLogGammaMinusNTimesMinOrdinate::usage = "";
TryLogGammaTimesN::usage = "";
TryLogIntegral::usage = "";
TryLogisticSigmoidTimesN::usage = "";
TryLogOnProductLogOfLog::usage = "";
TryParabolicCylinderD1TimesN::usage = "";
TryParabolicCylinderD2TimesN::usage = "";

TryPlusOrMinusArcCosh::usage = "";
TryPlusOrMinusArcSinh::usage = "";
TryPlusOrMinusArcTanh::usage = "";
TryPlusOrMinusArithmeticGeometricMean1::usage = "";
TryPlusOrMinusBesselI::usage = "";
TryPlusOrMinusBesselK::usage = "";
TryPlusOrMinusCoshMaybeDividedByN::usage = "";
TryPlusOrMinusCoshMaybeMinus1::usage = "";
TryPlusOrMinusCothMaybeMinus1::usage = "";
TryPlusOrMinusCsch::usage = "";
TryPlusOrMinusDawsonFTimesN::usage = "";
TryPlusOrMinusEinstein1PlusN::usage = "";
TryPlusOrMinusEinstein2::usage = "";
TryPlusOrMinusEinstein3::usage = "";
TryPlusOrMinusErfcTimesN::usage = "";
TryPlusOrMinusExpIntegralEi::usage = "";
TryPlusOrMinusGudermannianTimesN::usage = "";
TryPlusOrMinusInvCosIntegral::usage = "";
TryPlusOrMinusInvEllipticTheta2ZeroTimesN::usage = "";
TryPlusOrMinusInvEllipticTheta2ZeroPlusN::usage = "";
TryPlusOrMinusEllipticEOnN::usage = "";
TryPlusOrMinusEllipticEMaybeMinus1::usage = "";
TryPlusOrMinusEllipticK::usage = "";
TryPlusOrMinusEllipticTheta2Zero::usage = "";
TryPlusOrMinusEllipticTheta3Zero::usage = "";
TryPlusOrMinusErfcPlus2n::usage == "";
TryPlusOrMinusErfPlus2n::usage == "";
TryPlusOrMinusExp::usage = "";
TryPlusOrMinusExpIntegralEOnN::usage = "";
TryPlusOrMinusExpIntegralEPlusNTimesRecipMMinus1::usage = "";
TryPlusOrMinusFactorial2TimesOrOnN::usage = "";
TryPlusOrMinusGammaMaybeMinusMinOrdinate::usage = "";
TryPlusOrMinusGammaOnN::usage = "";
TryPlusOrMinusGudermannianPlusNpi::usage = "";
TryPlusOrMinusHaversinePlusN::usage = "";

TryPlusOrMinusInvArithmeticGeometricMean1::usage = "";
TryPlusOrMinusInvBesselI::usage = "";
TryPlusOrMinusInvBesselJ::usage = "";
TryPlusOrMinusInvBesselK::usage = "";
TryPlusOrMinusInvBesselY::usage = "";
TryPlusOrMinusInvCoshIntegral::usage = "";
TryPlusOrMinusInvCoshIntegral::usage = "";
TryPlusOrMinusInvDawsonF::usage = "";
TryPlusOrMinusInvErfi::usage = "";
TryPlusOrMinusInverseGudermannian::usage = "";
TryPlusOrMinusInverseHaversinePlusNPi::usage = "";
TryPlusOrMinusInvExpIntegralE::usage = "";
TryPlusOrMinusInvExpIntegralEi::usage = "";
TryPlusOrMinusInvFresnelC::usage = "";
TryPlusOrMinusInvFresnelS::usage = "";
TryPlusOrMinusInvGammaBranch1PlusNExtremumAbscissa1::usage = "";
TryPlusOrMinusInvGammaBranch1TimesN::usage = "";
TryPlusOrMinusInvGammaBranch2MaybeMinusExtremumAbscissa1::usage = "";
TryPlusOrMinusInvGammaBranch2OnN::usage = "";
TryPlusOrMinusInvLogBarnesG::usage = "";
TryPlusOrMinusInvLogGammaBranch2MaybeMinusMinAbscissa::usage = "";
TryPlusOrMinusInvLogGammaBranch1PlusNMinAbscissa::usage = "";
TryPlusOrMinusInvLogIntegralBranch1PlusN::usage = "";
TryPlusOrMinusInvLogIntegralBranch1TimesN::usage = "";
TryPlusOrMinusInvLogIntegralBranch2OnN::usage = "";
TryPlusOrMinusInvLogIntegralBranch2MaybeMinus1::usage = "";
TryPlusOrMinusInvPolyGamma::usage = "";
TryPlusOrMinusInvRamanujanTauTheta::usage = "";
TryPlusOrMinusInvRiemannSiegelTheta::usage = "";
TryPlusOrMinusInvSinhIntegral::usage = "";
TryPlusOrMinusInvSinIntegral::usage = "";
TryPlusOrMinusInvSphericalBesselJ::usage = "";
TryPlusOrMinusInvSphericalBesselY::usage = "";
TryPlusOrMinusInvStruveL::usage = "";
TryPlusOrMinusInvZetaBranch2MaybeMinus1::usage = "";
TryPlusOrMinusInvZetaBranch2OnN::usage = "";

TryPlusOrMinusLog::usage = "";
TryPlusOrMinusLog2::usage = "";
TryPlusOrMinusLog10::usage = "";
TryPlusOrMinusLogCoshOrSech::usage = "";
TryPlusOrMinusLogCothOrTanh::usage = "";
TryPlusOrMinusLogCsch::usage = "";
TryPlusOrMinusLogisticSigmoidPlusN::usage = "";
TryPlusOrMinusLogSinCosSecOrCsc::usage = "";
TryPlusOrMinusLogSinh::usage = "";
TryPlusOrMinusProductLogBranchMinus1OnN::usage = "";
TryPlusOrMinusProductLogBranchMinus1Plus1::usage = "";
TryPlusOrMinusSechPlusInteger::usage = "";
TryPlusOrMinusSecOrCscMaybeMinus1::usage = "";
TryPlusOrMinusSinh::usage = "";
TryPlusOrMinusSinOrCosPlus2n::usage = "";
TryPlusOrMinusSinOrCosTimesN::usage = "";
TryPlusOrMinusStruveL::usage = "";
TryPlusOrMinusTanhPlus2N::usage = "";
TryPlusOrMinusTanOrCot::usage = "";
TryPlusOrMinusZetaBranch2OnN::usage = "";
TryPlusOrMinusZetaBranch2Minus1::usage = "";

TryPolyGamma::usage = "";
TryPolyLogTimesN::usage = "";
TryPolyLogPlusNZetaOfM::usage = "";
TryProduct::usage = "";
TryProductLogBranch0MinusN::usage = "";
TryProductLogBranch0TimesN::usage = "";

TryQuadraticTimesMultiplier::usage = "";

TryRamanujanTauTheta::usage = "";  (* RamanujanTauZ[z] is too slow to justify trying to recognize it. *)
TryRationalTimesMultiplier::usage = "";
TryReciprocalOfAFunction::usage = "";
TryReciprocalPowerOfRootApproximantTimesMultiplier::usage = "";
TryRiemannSiegelTheta::usage = "";

TrySecOrCscDividedByN::usage = "";
TrySechTimesN::usage = "";
TryPlusOrMinusSinhIntegral::usage = "";
TrySinIntegralTimesOrOnN::usage = "";
TrySphericalBesselJTimesN::usage = "";
TrySphericalBesselYTimesN::usage = "";
TrySqrtOfLinearCombination::usage = "";
TrySqrtOfLinFracCombo::usage = "";
TrySqrtRationalTimesMultiplier::usage = "";

TryTanhTimesN::usage = "";

TryZetaBranch1PlusNTimesInfimumOrdinate::usage = "";
TryZetaBranch1TimesN::usage = "";

VieteOrShiftedBinomialCubicSolution::usage = "";*)


(* ::Subsection::Closed:: *)
(*Usage of public non-builtin named mathematical constants*)


AlladiGrinstead::usage = "N [AlladiGrinstead, precision_]  is effective up through about 100 digits.
See https://oeis.org/ for arbitrary-precision Mathematica code for this and most other constants in this subsection.";
AtkinsonNegroSantoro::usage = "";
AverageClassNumber::usage = "";
Backhouse::usage = "";
Baxter::usage = "";
Bendersky2nd::usage = "";
Bernstein::usage = "";
BinarySelfNumbersDensity::usage = "";
BrownWang::usage = "";
Brun::usage = "";
Cahen::usage = "";
Carefree::usage = "";
Conway::usage = "";
ConwayGuy::usage = "";
Dottie::usage = "";
DeVicciTesseract::usage = "";
Elbert::usage = "";
ErdosBorwein::usage = "";
EulerGompertz::usage = "";
FeigenbaumAlpha::usage = "";
FeigenbaumDelta::usage = "";
FellerTornier::usage = "";
FibonacciFactorial::usage = "";
FibonacciReciprocal::usage = "";
FineStructureConstant::usage = "";
FlajoletMartin::usage = "";
FlajoletOdlyzko::usage = "";
Foias::usage = "";
FransenRobinson::Usage = "";
GeneralizedStirling::usage = "";
GohSchmutz::usage = "";
GohSchmutzB::usage = "";
GolombDickman::usage = "";
GaussKuzminWirsing::usage = "";
Gieseking::usage = "";
GrazingGoat::usage = "";
Grossman::usage = "";
HafnerSarnakMcCurley::usage = "";
HallMontgomery::usage = "";
HardHexagonEntropy::usage = "";
HardSquareEntropy::usage = "";
HeathBrownMoroz::usage = "";
John::usage = "";
KeplerBouwkamp::usage = "";
KneserMahlerBeta::usage = "";
KomornikLoreti::usage = "";
KuijlaarsSaff::usage = "";
Lal::usage = "";
LandauRamanujan::usage = "";
LaplaceLimit::usage = "";
Lehmer::usage = "";
Lengyel::usage = "";
Lebesgue1st::usage = "";
Lebesgue2nd::usage = "";
Lebesgue3rd::usage = "";
LemniscateArclength::usage = "";
LurothLevy::usage = "";
LurothKhintchine1st::usage = "";
LurothKhintchine2nd::usage = "";
Madelung3DNaCl::usage = "";
MadelungHexagonal::usage = "";
Magata::usage = "";
MasserGramainC::usage = "";
Mill::usage = "";
MinAcceptableMerit::usage = "";
MinkowskiBower::usage = "";
MovingSofa::usage = "";
MrsMiniver::usage = "";
Murata::usage = "";
Myrberg::usage = "";
Niven::usage = "";
Norton::usage = "";
OdlyzkoWilf::usage = "";
OneNinth::usage = "";
PaperFolding::usage = "";
Paris::usage = "";
Pell::usage = "";
Plate::usage = "";
PlouffeK::usage = "";
Porter::usage = "";
PrimeReciprocal::usage = "";
ProuhetThueMorse::usage = "";
QuadraticResidues1st::usage = "";
QuadraticResidues2nd::usage = "";
Rabbit::usage = "";
RamanujanSoldner::usage = "";
ReciprocalFineStructureConstant::usage = "";
RobinsonA::usage = "";
RobinsonB::usage = "";
RobinsonC::usage = "";
RobinsonD::usage = "";
Rod::usage = "";
Rosser::usage = "";
Salem::usage = "";
Shallit::usage = "";
ShapiroDrinfeld::usage = "";
Sierpinski::usage = "";
StolarskyHarborth::usage = "";
StronglyCarefree::usage = "";
TakeuchiPrelberg::usage = "";
TriangularEntropyOfFolding::usage = "";
Trott1::usage = "";
TwinPrime::usage = "";
Ubiquitous::usage = "";
Vallee::usage = "";
VanDerCorput::usage = "";
Viswanath::usage = "";
Weierstrass::usage = "";
Zagier::usage = "";
ZolotarevSchur::usage = "";


(* ::Subsection::Closed:: *)
(*Usage of public package-level variables :*)


$ProposeVersionNumber::usage = "Include the value of this variable in any emails to AskConstants about this package.";

$printFailSymbolCountsQ::usage = "This variable should be False for the distributed version.
To aid development, True accumulates counts of the various causes of a model being rejected.";

$printTaskTimesQ::usage = "This variable should be False for the distributed version.
True causes a timing print for every model to aid development tuning and to locate the model causing error messages such as a division by 0.";

$reportTimeoutQ::usage = "This variable should be False for the distributed version.
TimeConstrained [...] is used in a few instances to prevent indefinite computing times on models any one of which has a very small probability of success.
The time limits cannot possibly be optimal accross for all computers, so there is an optional Print [...] to aid tuning compromise.";

$showRandomDefaultTypeQ::usage = "This variable should be False for the distributed version.
True is helpful for developing examples for the AskConstants Propose tab Random default choice.";

$systemThrow::usage = "A list of two lists. The first is the computation time for the thrown task and the given float.
The second is the task list.";

$allSystemThrows::usage = "A list of all instances of $systemThrow";

$LowestExcellentMerit::usage = "Merit == 11";
$LowestGoodMerit::usage = "Merit == 9";
$LowestMediumMerit::usage = "Merit == 7";
$LowestPoorMerit::usage = "Merit == 5";
$LowestBadMerit::usage = "Merit == 3.";


(* ::Text:: *)
(*Yes, this is large number of variables to expose, but AskConstants needs them :*)


$AiryAiTasks::usage = "";
$AiryBiTasks::usage = "";
$AlladiGrinsteadTasks::usage = "";
$AllApproximationConstants::usage = "";
$AllApproximationConstantsTasks::usage = "";
$AllBasicConstantsTasks::usage = "";
$AllBesselFamilyTasks::usage = "";
$AllBasicFunctionsTasks::usage = "";
$AllComplexAnalysisConstantsTasks::usage = "";
$AllEllipticFamilyTasks::usage = "";
$AllEnumerationConstantsTasks::usage = "";
$AllErfFamilyTasks::usage = "";
$AllErfAndInverseErfFamilyTasks::usage = "";
$AllFactorialFamilyTasks::usage = "";
$allFunctions::usage = "";
$AllGeometryConstantsTasks::usage = "";
$AllInequalitiesConstantsTasks::usage = "";
$AllInverseBesselFamilyTasks::usage = "";
$AllInverseMiscellaneousIntegralsTasks::usage = "";
$AllInverseOtherFunctionsTasks::usage = "";
$AllInverseZetaFamilyTasks::usage = "";
$AllIterationConstantsTasks::usage = "";
$AllExpIntegralFamilyTasks::usage = "";
$AllNumberTheoryConstantsTasks::usage = "";
$AllWellKnownConstantsTasks::usage = "";
$AllZetaFamilyTasks::usage = "";
$AllZetaAndInverseZetaFamilyTasks::usage = "";
$ArithmeticGeometricMean1Tasks::usage = "";
$AtkinsonNegroSantoroTasks::usage = "";
$AverageClassNumberTasks::usage = "";

$BackhouseTasks::usage = "";
$BarnesGTasks::usage = "";
$Bendersky2ndTasks::usage = "";
$BernsteinTasks::usage = "";
$BesselITasks::usage = "";
$BesselJOrdinateConstants::usage = "";
$BesselJTasks::usage = "";
$BesselKTasks::usage = "";
$BesselJAbscissaConstants::usage = "";
$BesselYAbscissaConstants::usage = "";
$BesselYTasks::usage = "";
$BinarySelfNumbersDensityTasks::usage = "";
$BrownWangTasks::usage = "";

$CahenTasks::usage = "";
$CarefreeTasks::usage = "";
$CatalanTasks::usage = "";
CollectEquivalentCandidatesQ::usage = "";
$CompulsoryTasks::usage = "";
$ConwayGuyTasks::usage = "";
$ConwayTasks::usage = "";
$CoshIntegralTasks::usage = "";
$CosIntegralTasks::usage = "";

$DawsonFTasks::usage = "";
$DefaultProductBases::usage = "";
$DirichletBetaTasks::usage = "";
$DirichletEtaTasks::usage = "";
$DirichletLambdaTasks::usage = "";
$DefaultApproximationConstantsTasks::usage = "";
$DefaultBasicConstantsTasks::usage = "";
$DefaultBasicFunctionsTasks::usage = "";
$DefaultBesselFamilyTasks::usage = "";
$DefaultComplexAnalysisConstantsTasks::usage = "";
$DefaultCosIntegralTasks::usage = "";
$DefaultEllipticFamilyTasks::usage = "";
$DefaultEnumerationConstantsTasks::usage = "";
$DefaultErfFamilyTasks::usage = "";
$DefaultExpIntegralETasks::usage = "";
$DefaultFactorialFamilyTasks::usage = "";
$DefaultFresnelCTasks::usage = "";
$DefaultFresnelSTasks::usage = "";
$DefaultRationalArgFunctions::usage = "";
$DefaultGeometryConstantsTasks::usage = "";
$DefaultInverseErfFamilyTasks::usage = "";
$DefaultInverseMiscellaneousIntegralsTasks::usage = "";
$DefaultInverseOtherFunctionsTasks::usage = "";
$DefaultInequalitiesConstantsTasks::usage = "";
$DefaultInverseBasicFunctionsTasks::usage = "";
$DefaultInverseBesselFamilyTasks::usage = "";
$DefaultInverseExpIntegralETasks::usage = "";
$DefaultInversePolyGammaTasks::usage = "";
$DefaultInversePolyLogTasks::usage = "";
$DefaultInverseZetaFamilyTasks::usage = "";
$DefaultIterationConstantsTasks::usage = "";
$DefaultLinCombBases::usage = "";
$DefaultExpIntegralFamilyTasks::usage = "";
$DefaultNumberTheoryConstantsTasks::usage = "";
$DefaultPolyGammaTasks::usage = "";
$DefaultPolyLogTasks::usage = "";
$DefaultSinIntegralTasks::usage = "";
$DefaultStiltjesGammaTasks::usage = "";
$DefaultWellKnownConstantsTasks::usage = "";
$DefaultZetaFamilyTasks::usage = "";
$DefaultZetaAndInverseZetaFamilyTasks::usage = "";
$DottieTasks::usage = "";

$ElbertTasks::usage = "";
$EllipticFamilyTasks::usage = "";
$EllipticETasks::usage = "";
$EllipticKTasks::usage = "";
$EllipticNomeQTasks::usage = "";
$EllipticTheta2ZeroTasks::usage = "";
$EllipticTheta3ZeroTasks::usage = "";
$ErdosBorweinTasks::usage = "";
$ErfcTasks::usage = "";
$ErfiTasks::usage = "";
$ErfTasks::usage = "";
$EulerGammaTasks::usage = "";
MinAcceptableMerit::usage = "";
ExpFamily::usage = "";
$ExpFamilyTasks::usage = "";
$EulerGompertzTasks::usage = "";
$ExpIntegralEiTasks::usage = "";
$ExpIntegralETasks::usage = "";

$Factorial2Tasks::usage = "";
FactorialFamily::usage = "";
$FibonacciReciprocalTasks::usage = "";
$FeigenbaumAlphaTasks::usage = "";
$FeigenbaumDeltaTasks::usage = "";
$FellerTornierTasks::usage = "";
$FibonacciFactorialTasks::usage = "";
$FlajoletMartinTasks::ussage = "";
$FlajoletOdlyzkoTasks::usage = "";
$FlattenedAllFactorialFamilyTasks::usage = "";
$FlattenedDefaultConstantsTasks::usage = "";
$FlattenedAllFunctionsTasks::usage = "";
$FlattenedDefaultFunctionsTasks::usage = "";
$FoiasTasks::usage = "";
$FransenRobinsonTasks::usage = "";
$FresnelCTasks::usage = "";
$FresnelSTasks::usage = "";

$GammaTasks::usage = "";
$GaussKuzminWirsingTasks::usage = "";
$GeneralizedStirlingTasks::usage = "";
$GiesekingTasks::usage = "";
$GlaisherTasks::usage = "";
$GohSchmutzBTasks::usage = "";
$GohSchmutzTasks::usage = "";
$GoldenRatioTasks::usage = "";
$GolombDickmanTasks::usage = "";
$GrazingGoatTasks::usage = "";
$GrossmanTasks::usage = "";
$GudermannianTasks::usage = "";

$HafnerSarnakMcCurleyTasks::usage = "";
$HallMontgomeryTasks::usage = "";
$HardHexagonEntropyTasks::usage = "";
$HardSquareEntropyTasks::usage = "";
$HeathBrownMorozTasks::usage = "";
$HyperfactorialTasks::usage = "";

$InverseAiryAiTasks::usage = "";
$InverseAiryBiTasks::usage = "";
$InverseArithmeticGeometricMean1Tasks::usage = "";
$InverseBarnesGTasks::usage = "";
$InverseBesselITasks::usage = "";
$InverseBesselJTasks::usage = "";
$InverseBesselKTasks::usage = "";
$InverseBesselYTasks::usage = "";
$InverseCoshIntegralTasks::usage = "";
$InverseCosIntegralTasks::usage = "";
$InverseDawsonFTasks::usage = "";
$InverseDirichletBetaTasks::usage = "";
$InverseDirichletEtaTasks::usage = "";
$InverseDirichletLambdaTasks::usage = "";
$InverseEllipticETasks::usage = "";
$InverseEllipticKTasks::usage = "";
$InverseEllipticNomeQTasks::usage = "";
$InverseEllipticTheta2ZeroTasks::usage = "";
$InverseEllipticTheta3ZeroTasks::usage = "";
$InverseErfcTasks::usage = "";
$InverseErfiTasks::usage = "";
$InverseErfTasks::usage = "";
$InverseExpIntegralEiTasks::usage = "";
$InverseExpIntegralETasks::usage = "";
$InverseFactorial2Tasks::usage = "";
$InverseFresnelCTasks::usage = "";
$InverseFresnelSTasks::usage = "";
$InverseGammaTasks::usage = "";
$InverseGudermannianTasks::usage = "";
$InverseHaversineTasks::usage = "";
$InverseHyperfactorialTasks::usage = "";
$InverseLogBarnesGTasks::usage = "";
$InverseLogGammaTasks::usage = "";
$InverseLogIntegralTasks::usage = "";
$InversePolyGammaTasks::usage = "";
$InversePolyLogTasks::usage = "";
$InverseRamanujanTauThetaTasks::usage = "";
$InverseRiemannSiegelThetaTasks::usage = "";
$InverseSinhIntegralTasks::usage = "";
$InverseSinIntegralTasks::usage = "";
$InverseSphericalBesselJTasks::usage = "";
$InverseSphericalBesselYTasks::usage = "";
$InverseStruveLTasks::usage = "";
InverseTrigFamily::usage = "";
$InverseTrigFamilyTasks::usage = "";
$InverseZetaTasks::usage = "";

$JohnTasks::usage = "";

$KeplerBouwkampTasks::usage = "";
$KhinchinTasks::usage = "";
$KneserMahlerBetaTasks::usage = "";
$KuijlaarsSaffTasks::usage = "";
$KomornikLoretiTasks::usage = "";

$LandauRamanujanTasks::usage = "";
$LaplaceLimitTasks::usage = "";
$Lebesgue1stTasks::usage = "";
$Lebesgue2ndTasks::usage = "";
$Lebesgue3rdTasks::usage = "";
$LehmerTasks::usage = "";
$LemniscateArclengthTasks::usage = "";
$LengyelTasks::usage = "";
$LogBarnesGTasks::usage = "";
LogFamily::usage = "";
$LogFamilyTasks::usage = "";
$LogGammaTasks::usage = "";
$LogIntegralTasks::usage = "";
$LurothLevyTasks::usage = "";
$LurothKhintchine1stTasks::usage = "";
$LurothKhintchine2ndTasks::usage = "";

$Madelung3DNaClTasks::usage = "";
$MadelungHexagonalTasks::usage = "";
$MagataTasks::usage = "";
$MasserGramainCTasks::usage = "";
MaxSearchSec::usage = "";
$MaxAllowedBesselIIndex::usage = "";
$MaxAllowedBesselJIndex::usage = "";
$MaxAllowedBesselJBranch::usage = "";
$MaxAllowedBesselKIndex::usage = "";
$MaxAllowedBesselYIndex::usage = "";
$MaxAllowedBesselYBranch::usage = "";
MaxAllowedEntropy10::usage = "";
$MaxAllowedCosIntegralBranch::usage = "";
$MaxAllowedExpIntegralEIndex::usage = "";
$MaxAllowedFresnelCBranch::usage = "";
$MaxAllowedFresnelSBranch::usage = "";
$MaxAllowedInverseBesselIIndex::usage = "";
$MaxAllowedInverseBesselJIndex::usage = "";
$MaxAllowedInverseBesselKIndex::usage = "";
$MaxAllowedInverseBesselYIndex::usage = "";
$MaxAllowedInverseExpIntegralEIndex::usage = "";
$MaxAllowedInversePolyGammaIndex::usage = "";
$MaxAllowedInversePolyLogIndex::usage = "";
$MaxAllowedInverseSphericalBesselJIndex::usage = "";
$MaxAllowedInverseSphericalBesselYIndex::usage = "";
$MaxAllowedInverseStruveLIndex::usage = "";
$MaxAllowedPolyLogIndex::usage = "";
$MaxAllowedPolyGammaIndex::usage = "";
$MaxAllowedRealInverseBarnesGBranch::usage = "";
$MaxAllowedRealInverseDawsonFBranch::usage = "";
$MaxAllowedRealInverseDirichletBetaBranch::usage = "";
$MaxAllowedRealInverseDirichletEtaBranch::usage = "";
$MaxAllowedRealInverseDirichletLambdaBranch::usage = "";
$MaxAllowedRealInverseExpIntegralEiBranch::usage = "";
$MaxAllowedRealInverseFactorial2Branch::usage = "";
$MaxAllowedRealInverseGammaBranch::usage = "";
$MaxAllowedRealInverseHyperfactorialBranch::usage = "";
$MinAllowedRealInverseHyperfactorialBranch::usage = "";
$MaxAllowedRealInverseLogBarnesGBranch::usage = "";
$MaxAllowedRealInverseLogGammaBranch::usage = "";
$MaxAllowedRealInverseLogIntegralBranch::usage = "";
$MaxAllowedRealInverseRamanujanTauThetaBranch::usage = "";
$MaxAllowedRealInverseRiemannSiegelThetaBranch::usage = "";
$MaxAllowedRealInverseZetaBranch::usage = "";
$MaxAllowedSinIntegralBranch::usage = "";
$MaxAllowedSphericalBesselJIndex::usage = "";
$MaxAllowedSphericalBesselJBranch::usage = "";
$MaxAllowedSphericalBesselYIndex::usage = "";
$MaxAllowedSphericalBesselYBranch::usage = "";
$MaxAllowedStieltjesGammaIndex::usage = "";
$MaxAllowedStruveLIndex::usage = "";
MaxAcceptableCount::usage = "";
$MillTasks::usage = "";
MinAcceptableAgreement::usage = "";
$MinAllowedAiryAiBranch::usage = "";
$MinAllowedAiryBiBranch::usage = "";
$MinAllowedDirichletBetaBranch::usage = "";
$MinAllowedDirichletEtaBranch::usage = "";
$MinAllowedDirichletLambdaBranch::usage = "";
$MinAllowedPrecisionGoal::usage = "";
$MinAllowedRealInverseBarnesGBranch::usage = "";
$MinAllowedRealInverseDawsonFBranch::usage = "";
$MinAllowedRealInverseDirichletBetaBranch::usage = "";
$MinAllowedRealInverseDirichletEtaBranch::usage = "";
$MinAllowedRealInverseDirichletLambdaBranch::usage = "";
$MinAllowedRealInverseExpIntegralEiBranch::usage = "";
$MinAllowedRealInverseFactorial2Branch::usage = "";
$MinAllowedRealInverseGammaBranch::usage = "";
$MinAllowedRealInverseHyperfactorialBranch::usage = "";
$MinAllowedRealInverseLogBarnesGBranch::usage = "";
$MinAllowedRealInverseLogGammaBranch::usage = "";
$MinAllowedRealInverseLogIntegralBranch::usage = "";
$MinAllowedRealInverseRamanujanTauThetaBranch::usage = "";
$MinAllowedRealInverseRiemannSiegelThetaBranch::usage = "";
$MinAllowedRealInverseZetaBranch::usage = "";
MinAcceptableMerit::usage = "";
MinSaveRejectAgreement::usage = "";
MinSaveRejectMerit::usage = "";
$MinkowskiBowerTasks::usage = "";
$MostMiscellaneousIntegralsTasks::usage = "";
$MostDefaultMiscellaneousIntegralsTasks::usage = "";
$MrsMiniverTasks::usage = "";
$MurataTasks::usage = "";
$MyrbergTasks::usage = "";

$NivenTasks::usage = "";
$NonFloatTransformedFloat::usage = "";
$NortonTasks::usage = "";

$OdlyzkoWilfTasks::usage = "";
$OneNinthTasks::usage = "";
$OptionalFunctions::usage = "";

PairWithRejectsQ::usage = "";
$PaperFoldingTasks::usage = "";
$ParisTasks::usage = "";
$PellTasks::usage = "";
$PiTasks::usage = "";
$PlouffeKTasks::usage = "";
$PolyGammaTasks::usage = "";
$PolyLogTasks::usage = "";
$PorterTasks::usage = "";
$PrimeReciprocalTasks::usage = "";
$ProductLogTasks::usage = "";
$proposeTimeoutQ::usage = "";
$ProuhetThueMorseTasks::usage = "";

$QuadraticResidues1stTasks::usage = "";
$QuadraticResidues2ndTasks::usage = "";

$RabbitTasks::usage = "";
$RamanujanSoldnerTasks::usage = "";
$RamanujanTauThetaTasks::usage = "";
$RiemannSiegelThetaTasks::usage = "";
$RodTasks::usage = "";
$RobinsonATasks::usage = "";
$RobinsonBTasks::usage = "";
$RobinsonCTasks::usage = "";
$RobinsonDTasks::usage = "";
$RootTasks::usage = "";
$RosserTasks::usage = "";

$SalemTasks::usage = "";
$ShapiroDrinfeldTasks::usage = "";
$SierpinskiTasks::usage = "";
$SinIntegralTasks::usage = "";
$SinhIntegralTasks::usage = "";
$SomeBesselAndInverseBesselFamilyTasks::usage = "";
$SomeDefaultBesselAndInverseBesselFamilyTasks::usage = "";
$SortedDefaultTasks::usage = "";
$SphericalBesselJTasks::usage = "";
$SphericalBesselYTasks::usage = "";
$StieltjesGammaTasks::usage = "";
$StolarskyHarborthTasks::usage = "";
$StronglyCarefreeTasks::usage = "";
$StruveLTasks::usage = "";

$TakeuchiPrelbergTasks::usage = "";
TaskList::usage = "";
$TriangularEntropyOfFoldingTasks::usage = "";
TrigFamily::usage = "";
$TrigFamilyTasks::usage = "";
$Trott1Tasks::usage = "";
$TwinPrimeTasks::usage = "";

$UbiquitousTasks::usage = "";

$VanDerCorputTasks::usage = "";
VerboseQ::usage = "";

$WeierstrassTasks::usage = "";

$ZagierTasks::usage = "";
ZetaFamily::usage = "";
$ZolotarevSchurTasks::usage = "";


(* ::Subsection::Closed:: *)
(*Usage of optionally public package-level variables :*)


(* To reduce the chance of name conflicts, and possible inadvertent corruption,
     comment out all of these usage commands for the distributed version.
   During development, uncomment these usage commands to simplify access and
     to recognize misspellings via syntax coloring: *)

(*$acceptableTableAgreementCount::usage = "";
$AccuracyIncForArbPrecisionSubtract::usage = "";
$AGMEllipticEKFactorialAndZetaFamilyTasks::usage = "";
$AiryAiAbscissaConstants::usage = "";
$AiryAiOrdinateConstants::usage = "";
$AiryBiAbscissaConstants::usage = "";
$AiryBiOrdinateConstants::usage = "";
$AllowanceForMaximallyWrongLastEnteredDigit::usage = "";
$ArcCoshLinComboBasis1::usage = "";
$ArcCoshLinComboBasis2::usage = "";
$ArcCoshLinComboBasis3::usage = "";
$ArcCoshRatList::usage = "";
$ArcCoshRatPairs::usage = "";
$ArcCoshTasks::usage = "";
$ArcCosRatList::usage = "";
$ArcCosRatPairs::usage = "";
$ArcCotRatList::usage = "";
$ArcCotRatPairs::usage = "";
$ArcCscRatList::usage = "";
$ArcCschRatList::usage = "";
$ArcCschRatPairs::usage = "";
$ArcCscRatPairs::usage = "";
$ArcSecRatList::usage = "";
$ArcSecRatPairs::usage = "";
$ArcSinhLinComboBasis1::usage = "";
$ArcSinRatList::usage = "";
$ArcSinRatPairs::usage = "";
$ArcSinhLinComboBasis2::usage = "";
$ArcSinhQuadraticNumberList::usage = "";
$ArcSinhQuadraticNumberPairs::usage = "";
$ArcSinhRatList::usage = "";
$ArcSinhRatPairs::usage = "";
$ArcSinhTasks::usage = "";
$ArcCothRatList::usage = "";
$ArcCothRatPairs::usage = "";
$ArcTanhTasks::usage = "";
$ArcTanRatList::usage = "";
$ArcTanRatPairs::usage = "";
$BadString::usage = "";
$BarnesGAbscissaConstants::usage = "";
$BarnesGOrdinateConstants::usage = "";
$BasisHasInsufficientPrecision::usage = "";
$BesselYOrdinateConstants::usage = "";

$categories::usage = "";
$categoryIndex::usage = "";
$ChooseDeMoivre5Q::usage = "";
$CommonFunctionEntropy10::usage = "";
$CommonFunctionList::usage = "";
$CoshConstants::usage = "";
$CoshRatList::usage = "";
$CoshRatPairs::usage = "";
$CosRatPiList::usage = "";
$CosRatPiPairs::usage = "";
$CoshTasks::usage = "";
$CothConstants::usage = "";
$CothTasks::usage = "";
$CschConstants::usage = "";
$CschTasks::usage = "";
$CscSecTasks::usage = "";
Cubic::usage == "";

$DefaultLinComb1AndConstantBases::usage = "";
$DefaultNonTrigLinFracBasisPairs::usage = "";
$DefaultNonTrigLinCombBases::usage = "";
$DefaultExpProductBases::usage = "";
$DefaultGammaProductBases::usage = "";
$DefaultLogProductBases::usage = "";
$DefaultTrigLinFracBasisPairs::usage = "";
$DefaultZetaProductBases::usage = "";
deMoivre::usage == "";

$Einstein1AccuracyDelta::usage = "";
$EllipticERatList::usage = "";
$EllipticERatPairs::usage = "";
$EllipticKRatList::usage = "";
$EllipticKRatPairs::usage = "";
$EllipticTheta2ZeroRatList::usage = "";
$EllipticTheta2ZeroRatPairs::usage = "";
$EllipticTheta3ZeroRatList::usage = "";
$EllipticTheta3ZeroRatPairs::usage = "";
$ErfcRatList::usage = "";
$ErfcRatPairs::usage = "";

$ErfRatList::usage = "";
$ErfRatPairs::usage = "";
$EToIntegerBasis::usage = "";
EvidentFamily::usage = "";
$ExcessiveComplexity::usage = "";
$ExcessNullVectorNorm::usage = "";
$ExcellentString::usage = "";
$ExpConstants::usage = "";
$ExpIntegralEiRatList::usage = "";
$ExpIntegralEiRatPairs::usage = "";
$ExpLinFracBasisPair1::usage = "";
$ExpLinFracNumDenBasis1::usage = "";
$ExpRatList::usage = "";
$ExpRatPairs::usage = "";
$ExpTasks::usage = "";

$Factorial2AbscissaConstants::usage = "";
$Factorial2OrdinateConstants::usage = "";
$Factorial2RatList::usage = "";
$Factorial2RatPairs::usage = "";
$FactorialFamilyTasks::usage = "";
$Farey25::usage = "";
$First3SinCosPiOn11Basis::usage = "";
$First3SinCosPiOn13Basis::usage = "";
$First3SinCosPiOn14Basis::usage = "";
$First3SinCosPiOn15Basis::usage = "";
$First3SinCosPiOn16Basis::usage = "";
$First3SinCosPiOn17Basis::usage = "";
$First3SinCosPiOn20Basis::usage = "";
$First3SinCosPiOn24Basis::usage = "";
$First3SinCosPiOn30Basis::usage = "";
$First3SinCosPiOn36Basis::usage = "";
$First3SinCosPiOn40Basis::usage = "";
$First3SinCosPiOn45Basis::usage = "";
$First3SinCosPiOn60Basis::usage = "";
$First3SinCosPiOn72Basis::usage = "";
$First3SinCosPiOn90Basis::usage = "";
$First3SinCosPiOn120Basis::usage = "";
$First3SinCosPiOn180Basis::usage = "";
$First3SinCosPiOn360Basis::usage = "";

$First5SinCosPiOn30Basis::usage = "";
$First5SinCosPiOn36Basis::usage = "";
$First5SinCosPiOn40Basis::usage = "";
$First5SinCosPiOn45Basis::usage = "";
$First5SinCosPiOn60Basis::usage = "";
$First5SinCosPiOn72Basis::usage = "";
$First5SinCosPiOn90Basis::usage = "";
$First5SinCosPiOn120Basis::usage = "";
$First5SinCosPiOn180Basis::usage = "";
$First5SinCosPiOn360Basis::usage = "";

$FlattenedAllConstantsTasks::usage = "";
$FlattenedAllBasicFunctionTasks::usage = "";
$FlattenedAllEllipticFamilyTasks::usage = "";
$FlattenedAllFunctionsAndInverseFunctionsTasks::usage = "";
$FlattenedDefaultBasicFunctionsTasks::usage = "";
$FlattenedDefaultEllipticFamilyTasks::usage = "";
$fOfQuadraticIndex::usage = "";
FOfRational::usage == "";
$fOfRationalIndex::usage = "";
$FoundGoodOrBetterLowerDegree::usage = "";
$FunctionsOfQuadratics::usage = "";

$GammaConstants::usage = "";
GammaProductBasis1::usage = "";
GammaProductBasis2::usage = "";
GammaProductBasis3::usage = "";
GammaProductBasis4::usage = "";
GammaProductBasis5::usage = "";
GammaProductBasis6::usage = "";
GammaProductBasis7::usage = "";
$GammaRatList::usage = "";
$GammaRatPairs::usage = "";
$GivenFloatHasInsufficientPrecision::usage = "";
$GoodString::usage = "";
$GudermannianRatList::usage = "";
$GudermannianRatPairs::usage = "";

$HaversineRatPiList::usage = "";
$HaversineRatPiPairs::usage = "";
$HaversineTasks::usage = "";
$HyperfactorialConstants::usage = "";
$HyperfactorialRatList::usage = "";
$HyperfactorialRatPairs::usage = "";
$InverseHyperfactorialAbscissaConstants::usage = "";

$IllConditionedRemainder::usage = "";
$InsufficientAgreement::usage = "";
$InsufficientMeritForRetentionAsReject::usage = "";
$InverseGudermannianRatPiList::usage = "";
$InverseGudermannianRatPiPairs::usage = "";
$InverseHaversineRatList::usage = "";
$InverseHaversineRatPairs::usage = "";
$InvEllipticFamilyTasks::usage = "";
$InvFactorialFamilyTasks::usage = "";
$InvZetaConstants::usage = "";
$InvZetaFamilyTasks::usage = "";

$LessCommonFunctionEntropy10::usage = "";
$LessCommonFunctionList::usage = "";
$linComb1AndConstantIndex::usage = "";
$LinCombArcCoshBases::usage = "";
$LinCombArcSinhBases::usage = "";
$LinCombArcTanBasis1::usage = "";
$LinCombArcTanBasis2::usage = "";
$LinCombArcTanBasis3::usage = "";
$LinCombExpBases::usage = "";
$LinCombInverseTrigBases::usage = "";
$LinCombLogBases::usage = "";
$linFracNonTrigIndex::usage = "";
$LinCombExpIntegralEiBasis1::usage = "";
$LinCombExpIntegralEiBasis2::usage = "";
$LinCombExpIntegralEiBasis3::usage = "";
$LinCombExpIntegralEiBasis4::usage = "";
$LinCombPolyLogBasis1::usage = "";
$LinCombPolyLogBasis2::usage = "";
$LinCombTrigFamilyBases::usage = "";
$LinCombZetaBasis1::usage = "";
$LinCombZetaBasis2::usage = "";
$LinCombZetaFamilyBases::usage = "";
$linFracTrigIndex::usage = "";
LinComb1AndConst::usage == "";
LinCombNonTrig::usage == "";
LinCombTrig::usage == "";
LinFracNonTrig::usage == "";
LinFracTrig::usage == "";
$log2RatList::usage == "";
$log2RatPairs::usage == "";
$log10RatList::usage == "";
$log10RatPairs::usage == "";
$LogFamilyTasks::usage = "";
$LogGammaRatList::usage = "";
$LogGammaRatPairs::usage = "";
$LogIntegralRatList::usage = "";
$LogIntegralRatPairs::usage = "";
$LogLinComboBasis1::usage = "";
$LogLinComboBasis2::usage = "";
$LogLinComboBasis3::usage = "";
$LogLinComboBasis4::usage = "";
$LogLinComboBasis5::usage = "";
$LogLinComboBasis6::usage = "";
$LogLinFracBasisPair1::usage = "";
$LogLinFracBasisPair2::usage = "";
$LogLinFracNumDenBasis1::usage = "";
$LogRatList::usage = "";
$LogRatPairs::usage = "";
$LogQuadraticList::usage = "";
$LogQuadraticPairs::usage = "";
$LogTasks::usage = "";
$LowestSkipOtherFamiliesMerit::usage = "";

$MagnitudeTooExtreme::usage = "";
$MaxAllowedPrecisionGoalForMachineFloat::usage = "";
$maxAllowedQuotientMagnitude::usage = "";
$MaxIntegerBesselIArg::usage = "";
$MaxIntegerBesselJArg::usage = "";
$MaxIntegerBesselKArg::usage = "";
$MaxIntegerBesselYArg::usage = "";
$MaxIntegerSphericalBesselJArg::usage = "";
$MaxIntegerSphericalBesselYArg::usage = "";
$MaxRelErrForTableLookup::usage = "";
$MediumString::usage = "";
$MinAcceptableAgreement::usage = "";
$MinAcceptableMerit::usage = "";
$MinAllowedPrecision::usage = "";
$MinAllowedRelativeErrorBound::usage = "";
$MinExpectedGuardDigits::usage = "";
$MinisculeNullVectorComponent::usage = "";
$MinPrecisionForNoBoost::usage = "";
$MixedTrigOn15Basis::usage = "";
$MixedTrigOn18Basis::usage = "";
$MixedTrigOn20Basis::usage = "";
$MixedTrigOn24Basis::usage = "";
$MixedTrigOn30Basis::usage = "";
$MixedTrigOn36Basis::usage = "";
$MixedTrigOn40Basis::usage = "";
$MixedTrigOn45Basis::usage = "";
$MixedTrigOn60Basis::usage = "";
$MixedTrigOn72Basis::usage = "";
$MixedTrigOn90Basis::usage = "";
$MixedTrigOn120Basis::usage = "";
$MixedTrigOn180Basis::usage = "";
$MixedTrigOn360Basis::usage = "";
$MixedTrigTasks::usage = "";
$MultiplierOfAbsErrBoundFor0Ordinates::usage = "";
$MultiplierOfAbsErrBoundForFiniteNon0Ordinates::usage = "";
$MultiplierOfAbsErrBoundForInfMagOrdinates::usage = "";
$Multipliers::usage = "";

$Non0Farey25::usage = "";
$Non0Farey25AndRecip::usage = "";
$Non0Non1Farey25::usage = "";
(*$Non0Non1Farey45::usage = "";*)
$Non0Non1NonReciprocalFarey25::usage = "";

$NonFiniteRealFunctionalForm::usage = "";
$NonFloatInverseFunctionValue::usage = "";
$NonRealCandidate::usage = "";
$nonTrigLinComIndex::usage = "";
$NoNullVector::usage = "";

$OneSin1Cos1Sin2Cos2Basis::usage = "";
$OOFarey25::usage = "";
$OOMultipliers::usage = "";
$OperationEntropy10::usage = "";
$OutOfRange::usage = "";

Palindromic::usage == "";
$PiLinComboBasis1::usage = "";
$PiLinFracBasisPair1::usage = "";
$PiLinFracBasisPair2::usage = "";
$PiLinFracNumAndDenBasis2::usage = "";
$PiLinFracDenominator1::usage = "";
$PiLinFracNumerator1::usage = "";
$PolyGamma0RatList::usage = "";
$PolyGamma0RatPairs::usage = "";
$PolyGamma1RatList::usage = "";
$PolyGamma1RatPairs::usage = "";
$PolyGamma2RatList::usage = "";
$PolyGamma2RatPairs::usage = "";
$PolyLog2RatList::usage = "";
$PolyLog3RatList::usage = "";
$PolyLog2RatPairs::usage = "";
$PolyLog3RatPairs::usage = "";
$ProductBasis1::usage = "";
$ProductBasis2::usage = "";
$ProductBasis3::usage = "";
$ProductBasis4::usage = "";
$PolyGammaConstants::usage = "";
$PoorString::usage = "";
$PrecisionOfMachineNon0::usage = "";
$productIndex::usage = "";
Products::usage == "";
$PureFunctionEntropy10Overhead::usage = "";

$RandomDefault::usage = "";
$RareFunctionEntropy10::usage = "";
$Redundant::usage = "";
$ReapCandidateRecordsTag::usage = "";
RecipCompose::usage == "";
$ReciprocalFactorial2RatList::usage == ""; 
$ReciprocalFactorial2RatPairs::usage == "";
$ReciprocalGammaRatList::usage == ""; 
$ReciprocalGammaRatPairs::usage == "";
RecipShiftBinom::usage == "";
$RootApproximantFailed::usage = "";
$RootApproximantReturnedLowerDegree::usage = "";

$SechConstants::usage = "";
$SechTasks::usage = "";
$ShuffledCategories::usage = "";
$ShuffledTrigLinCombBases::usage = "";
$ShuffledNonTrigLinCombBases::usage = "";
$ShuffledLinComb1AndConstantBases::usage = "";
$ShuffledTrigLinFracBasisPairs::usage = "";
$ShuffledNonTrigLinFracBasisPairs::usage = "";
$ShuffledProductBases::usage = "";
$ShuffledDefaultFunctions::usage = "";
$ShuffledFunctionsOfQuadratics::usage = "";
$SinCosPiOn7Basis::usage = "";
$SinCosPiOn9Basis::usage = "";
$SinCosPiOn11Basis::usage = "";
$SinCosPiOn13Basis::usage = "";
$SinCosPiOn14Basis::usage = "";
$SinCosPiOn15Basis::usage = "";
$SinCosPiOn16Basis::usage = "";
$SinCosPiOn17Basis::usage = "";
$SinCosPiOn20Basis::usage = "";
$SinCosPiOn24Basis::usage = "";
$SinCosTasks::usage = "";
$SinhConstants::usage = "";
$SinhRatList::usage = "";
$SinRatPiPairs::usage = "";
$SinRatPiList::usage = "";
$SinhRatPairs::usage = "";
$SinhTasks::usage = "";
$SlightlyMoreThanMaxExpectedGuardDigits::usage = "";
$SortedAllTasks::usage = "";
$SortedFloats::usage = "";
$SortedNonFloats::usage = "";
$sortedPairs::usage = "";
$SphericalBesselJAbscissaConstants::usage = "";
$SphericalBesselJOrdinateConstants::usage = "";
$SphericalBesselYAbscissaConstants::usage = "";
$SphericalBesselYOrdinateConstants::usage = "";

$TanCotConstants::usage = "";
$TanCotTasks::usage = "";
$TanhConstants::usage = "";
$TanhTasks::usage = "";
$TanhRatList::usage = "";
$TanhRatPairs::usage = "";
$TanRatPiList::usage = "";
$TanRatPiPairs::usage = "";
$TerribleString::usage = "";
$TimeOutFunctionalForm::usage = "";
$TimeOutInverseErfOrErfc::usage = "";
$TimeUnitForTimeConstrainedComplexExpand::usage = "";
$TimeUnitForTimeConstrainedFullSimplify::usage = "";
$TimeUnitForTimeConstrainedSimplify::usage = "";
$TimeUnitForTimeConstrainedFunctionalForm::usage = "";
$timeUnitForTimeConstrainedFunctionalForm::usage = "";
$TimeOutExp::usage = "";

$totalAcceptableTableAgreementCount::usage = "";
$totalNumberOfTasks::usage = "";
$totalInsufficientMeritForRetentionAsReject::usage = "";
$totalNoNullVector::usage = "";
$totalExcessNullVectorNorm::usage = "";
$totalMinisculeNullVectorComponent::usage = "";
$totalRootApproximantFailed::usage = "";
$totalRedundant::usage = "";
$totalRootApproximantReturnedLowerDegree::usage = "";
$totalBasisHasInsufficientPrecision::usage = "";
$totalExcessiveComplexity::usage = "";
$totalFoundGoodOrBetterLowerDegree::usage = "";
$totalGivenFloatHasInsufficientPrecision::usage = "";
$totalIllConditionedRemainder::usage = "";
$totalInsufficientAgreement::usage = "";
$totalMagnitudeTooExtreme::usage = "";
$totalNonFiniteRealFunctionalForm::usage = "";
$totalNonFloatInverseFunctionValue::usage = "";
$totalNonRealCandidate::usage = "";
$totalOutOfRange::usage = "";
$totalTimeOutExp::usage = "";
$totalTimeOutInverseErfOrErfc::usage = "";
$totalTimeOutFunctionalForm::usage = "";
$totalValueTooCloseTo1::usage = "";
$totalZeroDenominator::usage = "";
$totalZeroNumerator::usage = "";

$TrigBasisPairsForFromRootDeg6::usage = "";
$TrigBasisPairsForFromRootDeg8::usage = "";
$TrigBasisPairsForFromRootDeg10::usage = "";
$TrigBasisPairsForFromRootDeg12::usage = "";
$TrigBasisPairsForFromRootDeg16::usage = "";
$TrigBasisPairsForFromRootDeg24::usage = "";
$TrigBasisPairsForFromRootDeg32::usage = "";
$TrigBasisPairsForFromRootDeg48::usage = "";
$TrigBasisPairsForFromRootDeg96::usage = "";
$TrigAndAlgebraicNumberTasks::usage = "";
$trigLinComIndex::usage = "";
$TrigLinFracBasisPair1::usage = "";
$TrigLinFracBasisPair2::usage = "";
$TrigLinFracBasisPair3::usage = "";
$TrigLinFracBasisPair4::usage = "";
$TrigLinFracBasisPair5::usage = "";
$TrigLinFracBasisPair6::usage = "";
$TrigLinFracBasisPair7::usage = "";
$TrigLinFracBasisPair8::usage = "";
$TrigLinFracBasisPair9::usage = "";
$TrigLinFracBasisPair10::usage = "";
$TrigLinFracBasisPair11::usage = "";
$TrigLinFracBasisPair12::usage = "";
$TrigLinFracBasisPair13::usage = "";
$TrigLinFracBasisPair14::usage = "";
$TrigLinFracBasisPair15::usage = "";
$TrigLinFracBasisPair16::usage = "";
$TrigLinFracBasisPair17::usage = "";
$TrigLinFracBasisPair18::usage = "";
$TrigLinFracBasisPair19::usage = "";
$TrigLinFracBasisPair20::usage = "";

$TryApproximatelyEqualTime::usage = "";
$TryRationalTimesMultiplierlTime::usage = "";
$TryReciprocalPowerOfRootApproximantBaselineTime::usage = "";
$TryQuadraticNumberTimesMultiplierTime::usage = "";
$TrySqrtRationalTimesMultiplier::usage = "";

$ValueTooCloseTo1::usage = "";

$ZeroDenominator::usage = "";
$ZeroNumerator::usage = "";
$ZetaConstants::usage = "";
$ZetaFamilyTasks::usage = "";
$ZetaRatList::usage = "";
$ZetaRatPairs::usage = "";
$ZetaTasks::usage = "";
$ZeroToHalfFarey25::usage = "";*)


(* ::Section::Closed:: *)
(*NSimplify usage :*)


(* ::Subsection::Closed:: *)
(*Usage of public functions :*)


NSimplify::usage =
 "NSimplify [floatFreeConstant]  returns a list of pairs, with each pair being a float-free constant equivalent to floatFreeConstant followed by its Entropy10.
  The returned list is sorted into non-decreasing order of these Entropy10 values.";

TimedNSimplify::usage = "TimedNSimplify [floatFreeConstant]  returns a list of the computing time in seconds, then the result of NSimplify [floatFreeConstant]";


(* ::Subsection::Closed:: *)
(*Usage of optionally-public functions and Associations :*)


(* To reduce the chance of name conflicts, and possible inadvertent corruption,
     comment out all of these usage commands for the distributed version.
   During development, uncomment these usage commands to simplify access and
     to recognize misspellings via syntax coloring: *)

(*BasicConstantAndFunctionNames::usage = "";
Family::usage = "";
NamedConstantsFamily::usage = "";
TaskListForNSimplify::usage = "";
TaskListForSymbol::usage = "";*)


(* ::Subsection::Closed:: *)
(*Usage of optionally-public package-level variables :*)


(* To reduce the chance of name conflicts, and possible inadvertent corruption,
     comment out all of these usage commands for the distributed version.
   During development, uncomment these usage commands to simplify access and
     to recognize misspellings via syntax coloring: *)

(*$BesselIKTasks::usage =
$ErfAndErfcTasks::usage = "";
$ExpFamilySymbols::usage = "";
$FactorialFamilySymbols::usage = "";
$FlattenedExpEiESinhCoshAndLogIntegralTasks::usage = "";
$FlattenedInverseBesselIKTasks::usage = "";
$FlattenedInverseEllipticFamilyTasks::usage = "";
$FlattenedInverseErfAndErfCTasks::usage = "";
$FlattenedInverseExpEiESinhCoshAndLogIntegralTasks::usage = "";
$FlattenedInverseFactorialFamilyTasks::usage = "";
$FlattenedInverseZetaFamilyTasks::usage = "";

$InvFactorialFamilySymbols::usage = "";
$InvTrigFamilySymbols::usage = "";

$LogFamilySymbols::usage = "";
$TrigFamilySymbols::usage = "";*)


(* ::Section::Closed:: *)
(*Propose Code :*)


Begin ["`Private`"];


If [$VersionNumber < 10.0,
    FareySequence [n_] := DeleteDuplicates [Sort [Flatten [Table [k/m, {m, n}, {k, 0, m}]]]]];


(* ::Subsection::Closed:: *)
(*Initializations and their prerequisite functions:*)


(* ::Subsubsection::Closed:: *)
(*Debugging flags :*)


$printFailSymbolCountsQ = False; 
$printTaskTimesQ = False;
$reportTimeoutQ = False;
$showRandomDefaultTypeQ = False;
$proposeTimeoutQ = False;


(* ::Subsubsection::Closed:: *)
(*Off [distracting or baffling warnings about harmless events] :*)


Off [FindIntegerNullVector::norel, FindIntegerNullVector::rnf];


(* ::Subsubsection::Closed:: *)
(*Global named constants that probably no one would want to change either during a session or in this file :*)


(* ::Subsubsubsection::Closed:: *)
(*Qualiltative result label strings:*)


$TerribleString =  "Terrible Merit";
$BadString =       "Bad Merit";
$PoorString =      "Poor Merit";
$MediumString =    "Medium Merit";
$GoodString =      "Good Merit";
$ExcellentString = "Excellent Merit";


(* ::Subsubsubsection::Closed:: *)
(*Initialize event counts for development:*)


$totalAcceptableTableAgreementCount = 0;
$totalNumberOfTasks = 0;
$totalInsufficientMeritForRetentionAsReject = 0;
$totalNoNullVector = 0;
$totalExcessiveComplexity = 0;
$totalExcessNullVectorNorm = 0;
$totalMinisculeNullVectorComponent = 0;
$totalRootApproximantFailed = 0;
$totalRedundant = 0;
$totalRootApproximantReturnedLowerDegree = 0;
$totalBasisHasInsufficientPrecision = 0;
$totalFoundGoodOrBetterLowerDegree = 0;
$totalGivenFloatHasInsufficientPrecision = 0;
$totalIllConditionedRemainder = 0;
$totalInsufficientAgreement = 0;
$totalMagnitudeTooExtreme = 0;
$totalNonFiniteRealFunctionalForm = 0;
$totalNonFloatInverseFunctionValue = 0;
$totalNonRealCandidate = 0;
$totalOutOfRange = 0;
$totalTimeOutExp = 0;
$totalTimeOutFunctionalForm = 0;
$totalTimeOutInverseErfOrErfc = 0;
$totalValueTooCloseTo1 = 0;
$totalZeroDenominator = 0;
$totalZeroNumerator = 0;


(* ::Subsubsubsection::Closed:: *)
(*Some magic numbers that should probably be the same for any platform using IEEE binary64 Machine floats :*)


$Einstein1AccuracyDelta = -2.0;
$MinExpectedGuardDigits = Log10 [2.0*^32];  (* : 64-bit CPUs might have 2.0*^64, but 2.0*^32 is plenty. *)
$MinPrecisionForNoBoost = 3.5;
$SlightlyMoreThanMaxExpectedGuardDigits = Log10 [2.0^64];  (* : 64-bit CPUs might have 2.0*^128, but 2.0*^64 is plenty. *)


(* ::Subsubsection::Closed:: *)
(*Some functions needed for initialization, and some global named constants that an expert user might want to change :*)


Unprotect [$ProposeVersionNumber];
  $ProposeVersionNumber = 1.1;
Protect [$ProposeVersionNumber];

$allSystemThrows = {};


(* ::Subsubsubsection::Closed:: *)
(*Functions for building table-lookup multiplier lists :*)


OddOnOddFareySequence [n_] :=
  Select [Rest [FareySequence [n]], OddQ [Numerator [#]] && OddQ [Denominator [#]] &];


$MaxRelErrForTableLookup = 1.0*^-7;

$Farey25 = FareySequence[25];  (* :Omit 0 *)
$ZeroToHalfFarey25 = Sort [Select [$Farey25, # < 1/2 &],  Entropy10 [#1] < Entropy10 [#2] &];

$OOFarey25 = OddOnOddFareySequence [25];
$OOMultipliers = Sort [Join [$OOFarey25, Most [$OOFarey25] ^ -1],  Entropy10 [#1] < Entropy10 [#2] &];

$Multipliers = $OOMultipliers;


(* ::Subsubsubsection::Closed:: *)
(*Max allowed # seconds for attempting certain tasks at Precision 16 or less*)


(* These constants are appropriate for an Intel (R) Core (TM)2 Duo CPU U9600 @ 1.60GHz with Windows Vista.
   The values are not critical.
   They are merely to prevent grossly disproportionate time being spent trying to make a candidate have
     lower complexity, and most candidates end up being rejected anyway.
   The actual time limits are automatically increased for higher precision float inputs. *)

$TimeUnitForTimeConstrainedSimplify = 0.1;
$TimeUnitForTimeConstrainedFullSimplify = 0.1;
$TimeUnitForTimeConstrainedComplexExpand = 0.1;
$TimeUnitForTimeConstrainedFunctionalForm = (*0.05;*) 0.15;

(* The following assignment is necessary for initialization table building.
   Thereafter the value of this temporally-scoped variable is set in the Block [..] body of the Propose [...] function: *)
$timeUnitForTimeConstrainedFunctionalForm = 4.0 * $TimeUnitForTimeConstrainedFunctionalForm;


(* ::Subsubsubsection::Closed:: *)
(*Multipliers for bounding certain functional forms away from  ordinates that are troublesome for them:*)


$MultiplierOfAbsErrBoundFor0Ordinates = 100.0;
$MultiplierOfAbsErrBoundForFiniteNon0Ordinates = (*100;*)1.0;
$MultiplierOfAbsErrBoundForInfMagOrdinates = 100.0;


(* ::Subsubsubsection::Closed:: *)
(*Thresholds for acceptable Accuracy, Precision, absolute error and relative error:*)


$AccuracyIncForArbPrecisionSubtract = 3.0;
$AllowanceForMaximallyWrongLastEnteredDigit = Log10[9.0];
$MaxAllowedPrecisionGoalForMachineFloat = 14.0;
$maxAllowedQuotientMagnitude = 32;  (* Should set in Propose depending on precision of given ?? !! *)
$MinAllowedPrecision = 1.9;
$MinAllowedPrecisionGoal = 5.0;
$MinAllowedRelativeErrorBound = 0.001;
$PrecisionOfMachineNon0 = $MachinePrecision - 2.4;


(* ::Subsubsubsection::Closed:: *)
(*Constants & lists used to compute Entropy10 [expression] :*)


$OperationEntropy10 = 0.5;
$PureFunctionEntropy10Overhead = 2.0;

$CommonFunctionList = {Power, Log, Sin, Cos, Tan, ArcTan, ArcSin, ArcCos};
$CommonFunctionEntropy10 = 0.75;

$LessCommonFunctionList = {Cot, Csc, Sec, ArcCot, ArcCsc, ArcSec,
  Sinh, Cosh, Tanh, Csch, Sech, Coth, ArcSinh, ArcCosh, ArcTanh, ArcCoth, ArcCsch, ArcSech,
  Erf, Erfc, Factorial, Gamma, Zeta, ProductLog};
$LessCommonFunctionEntropy10 = 1.0;

$RareFunctionEntropy10 = 1.5;


(* ::Subsubsubsection::Closed:: *)
(*Constants used to compute Merit, its effect on retained candidates, & quitting search early: *)


$MinAcceptableAgreement = 4.0;

Unprotect [$LowestBadMerit, $LowestPoorMerit,
  $LowestMediumMerit, $LowestGoodMerit, $LowestExcellentMerit];

$LowestBadMerit = 3.0;
$LowestPoorMerit = $LowestBadMerit + 2.0;
$LowestMediumMerit = $LowestPoorMerit + 2.0;
$LowestGoodMerit = $LowestMediumMerit + 2.0;
$LowestExcellentMerit = $LowestGoodMerit + 2.0;

Protect [$ProposeVersionNumber, $LowestBadMerit, $LowestPoorMerit,
  $LowestMediumMerit, $LowestGoodMerit, $LowestExcellentMerit];

$MinAcceptableMerit = $LowestBadMerit;
$LowestSkipOtherFamiliesMerit = $LowestExcellentMerit;


(* ::Subsubsubsection::Closed:: *)
(*Average computing times for various tasks:*)


(* The times below are in milliseconds on an 32-bit Intel (R) Core (TM)2 Duo CPU U9600 @ 1.60GHz with Windows Vista for 16-digit floats.
   Only the relative times are important.
   Propose [...] tries a sequence of models, each represented by a task record.
   One field in the record is a family name, such as InverseTrigFamily.
   Most users would like to see alternative equivalent candidates when one of them has a favorable Merit.
   If a very favorable InverseTrigFamily candidate is generated, then it is very unlikely that a
     subsequent candidate belonging to any other named family will also be very favorable.
   Thus Propose [...] skips task records outside a family after encountering a model in that family
     having Merit >= $LowestSkipOtherFamiliesMerit.
   Tasks in the family named None are never skipped. *)

LinearCombinationTime[1] = 2.1;  (* :the time for computing rational r1 in float = r1*symbolicConstant *)
LinearCombinationTime[2] = 3.3;  (* :the time for computing rationals r1 & r2 in float = r1*symbolicConstant1 + r2*symbolicConstant2 *)
LinearCombinationTime[3] = 5.5;
LinearCombinationTime[4] = 8.6;
LinearCombinationTime[5] = 16.6;
LinearCombinationTime[6] = 29.2;
LinearCombinationTime[7] = 39.5;
LinearCombinationTime[8] = 52.7;
LinearCombinationTime[9] = 90.0;
LinearCombinationTime[10] = 140.0;
LinearCombinationTime[n_] := 1.4*n*n; (* : A crude empirical approximation *)

$TryApproximatelyEqualTime = 0.02;
$TryRationalTimesMultiplierlTime = 1.6;
$TrySqrtRationalTimesMultiplier = 2.6;
$TryQuadraticNumberTimesMultiplierTime = 15.6;
$TryReciprocalPowerOfRootApproximantBaselineTime = 177.0;

TimeForFunctionOfAlgNumbArg [functionTime_, degree_] :=
  functionTime + Switch [degree,
                   1,  $TryRationalTimesMultiplierlTime,
                   2,  $TryQuadraticNumberTimesMultiplierTime,
                   _,  $TryReciprocalPowerOfRootApproximantBaselineTime + degree];


(* ::Subsubsubsection::Closed:: *)
(*Helper functions for making refined task records:*)


(* Each raw task record contains a float that is proportional to the estimated number of times
     its model is applicable to a float input submitted by a random user.
   The following Make... functions use that float together with the constants and function
     in the above sub-sub-subsection and the length of any basis vectors in the record
     to compute and store the float used for sorting the refined task records.
   Many of the Make... have default values for omitted trailing arguments,
     making easier for you to insert raw records. *)

MakeTryApproximatelyEqual [family_, exampleCount_, nonFloatConstant_] :=
 {family, exampleCount / $TryApproximatelyEqualTime, TryApproximatelyEqual, nonFloatConstant};

MakeTryRationalTimesMultiplier [family_, exampleCount_, multipler_:1] :=
 {family, exampleCount/$TryRationalTimesMultiplierlTime, TryRationalTimesMultiplier, multipler};

MakeTrySqrtRationalTimesMultiplier [family_, exampleCount_, multipler_:1] :=
 {family, exampleCount/$TrySqrtRationalTimesMultiplier, TrySqrtRationalTimesMultiplier, multipler};

MakeTryQuadraticNumberTimesMultiplier [family_, exampleCount_, multiplier_:1] :=
 {family, exampleCount / $TryQuadraticNumberTimesMultiplierTime, TryQuadraticTimesMultiplier, multiplier};

MakeTryReciprocalPowerOfRootApproximant [family_, exampleCount_, degree_, multiplier_:1] :=
 {family, exampleCount / ($TryReciprocalPowerOfRootApproximantBaselineTime + degree),
   TryReciprocalPowerOfRootApproximantTimesMultiplier, degree, multiplier};

MakeTryLinearCombinationTimesMultiplier [family_, exampleCount_, basisConstants_, multiplier_:1] :=
 {family, exampleCount / LinearCombinationTime [Length[basisConstants]],
   TryLinearCombinationTimesMultiplier, basisConstants, multiplier};

MakeTrySqrtOfLinearCombination [family_, exampleCount_, basisConstants_] :=
 {family, exampleCount / LinearCombinationTime [Length[basisConstants]],
   TrySqrtOfLinearCombination, basisConstants};

MakeTryProduct [family_, exampleCount_, basisConstants_] :=
 {family, exampleCount / LinearCombinationTime [Length [basisConstants]],
    TryProduct, basisConstants};

MakeTryLinFracComboTimesMultiplier [
    family_, exampleCount_, numeratorConstants_, denominatorConstants_, multiplier_:1] :=
 {family, exampleCount /
     LinearCombinationTime [-1 + Length[numeratorConstants] + Length[denominatorConstants]],
   TryLinFracComboTimesMultiplier, numeratorConstants, denominatorConstants, multiplier};

MakeTrySqrtOfLinFracCombo [family_, exampleCount_, numeratorConstants_, denominatorConstants_] :=
 {family, exampleCount /
     LinearCombinationTime [-1 + Length[numeratorConstants] + Length[denominatorConstants]],
   TrySqrtOfLinFracCombo, numeratorConstants, denominatorConstants};

MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [family_, exampleCount_,
    functionTime_, functionName_, resultMultiplier_:1, argMultiplier_:1, degree_:1, branch_:1] :=
  {family, exampleCount / TimeForFunctionOfAlgNumbArg[functionTime, degree],
    functionName, resultMultiplier, argMultiplier, degree, branch};

MakeTryReciprocalOfAFunction [family_, exampleCount_,
    functionTime_, functionName_, resultMultiplier_:1, argMultiplier_:1, degree_:1, branch_:1] :=
  {family, exampleCount / TimeForFunctionOfAlgNumbArg[functionTime, degree],
    TryReciprocalOfAFunction, functionName, resultMultiplier, argMultiplier, degree, branch};

MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [family_, exampleCount_,
    functionTime_, functionName_, otherArg_, resultMultiplier_:1, argMultiplier_:1, degree_:1, branch_:1] :=
  {family, exampleCount / TimeForFunctionOfAlgNumbArg[functionTime, degree],
    functionName, otherArg, resultMultiplier, argMultiplier, degree, branch};


(* ::Subsubsubsection::Closed:: *)
(*Save space by making $SortedNonFloats share common subexpressions :*)


Share [$SortedNonFloats]


(* ::Subsubsection::Closed:: *)
(*Make compulsory task records:*)


(* The floats in raw task records are the estimated number of times that model is applicable
     to a float input submitted by a random user out of N total submissions.
   My wild guess is that about half of the submissions are for approximate floats whose
     limit as  WorkingPrecision -> Infinity is a rational number,  making N approximately 20,000.
   Only the relative numbers matter, and rare models should have positive floats less than 1.0: *)

$CompulsoryTasks = { (* AskConstants tries these models even if all of the functions in the
   "Choose functions" subtab and all of the named constants in the "Choose named constants"
   subtab are deselected: *)
 MakeTryRationalTimesMultiplier        [None, 9999.0],
 MakeTrySqrtRationalTimesMultiplier    [None, 2000.0],
 MakeTryQuadraticNumberTimesMultiplier [None, 4000.0]
};


(* ::Subsubsection::Closed:: *)
(*Make Constants task records:*)


(* ::Subsubsubsection::Closed:: *)
(*Basic constants tasks:*)


(* ::Subsubsubsubsection::Closed:: *)
(*$PiTasks*)


(* Pi is the most notable component of these tasks.
   Pi also occurs in families named for their more notable components.
   The same remark applies to all tasks for a family:
   The family is assigned based on the most notable component. *)

$PiLinComboBasis1 = {Sqrt[2]*Pi, 1, Pi, Pi^2, Pi^3, Pi^4};
$PiLinFracNumerator1 = {1, Pi, Sqrt[3], Pi*Sqrt[3]};
$PiLinFracDenominator1 = {1, Pi, Sqrt[3]};
$PiLinFracBasisPair1 = {$PiLinFracNumerator1, $PiLinFracDenominator1};
$PiLinFracNumAndDenBasis2 = {1, Pi, Pi^2};
$PiLinFracBasisPair2 = {$PiLinFracNumAndDenBasis2, $PiLinFracNumAndDenBasis2};

$PiTasks = {
 MakeTryRationalTimesMultiplier [None, 4000.0, Pi],
 MakeTryRationalTimesMultiplier [None,  800.0, Pi^2],
 MakeTryRationalTimesMultiplier [None,  720.0, Sqrt[Pi]],
 MakeTryRationalTimesMultiplier [None,  400.0, Pi*Sqrt[2]],
 MakeTryRationalTimesMultiplier [None,  320.0, Pi*Sqrt[3]],
 MakeTryRationalTimesMultiplier [None,  240.0, Sqrt[2*Pi]],
 MakeTryRationalTimesMultiplier [None,  160.0, Sqrt[3*Pi]],
 MakeTryRationalTimesMultiplier [None,  200.0, Pi^-1],
 MakeTryRationalTimesMultiplier [None,  200.0, Pi^-(1/2)],

 MakeTryLinearCombinationTimesMultiplier [None, 700.0, {1, Pi}],
 MakeTryLinearCombinationTimesMultiplier [None, 200.0, {1, Pi^2}],
 MakeTryLinearCombinationTimesMultiplier [None, 190.0, {1, Sqrt[Pi]}],
 MakeTryLinearCombinationTimesMultiplier [None, 180.0, {1, Pi*Sqrt[2]}],
 MakeTryLinearCombinationTimesMultiplier [None, 170.0, {1, Pi*Sqrt[3]}],
 MakeTryLinearCombinationTimesMultiplier [None, 160.0, {1, Sqrt[2*Pi]}],
 MakeTryLinearCombinationTimesMultiplier [None, 150.0, {1, Sqrt[3*Pi]}],
 MakeTryLinearCombinationTimesMultiplier [None, 140.0, {1, Pi^-1}],
 MakeTryLinearCombinationTimesMultiplier [None, 130.0, {1, Pi^-(1/2)}],

 MakeTrySqrtRationalTimesMultiplier    [None, 500.0, Pi],
 MakeTrySqrtRationalTimesMultiplier    [None, 200.0, Pi^1],

 MakeTryQuadraticNumberTimesMultiplier [None, 1000.0, Pi],
 MakeTryQuadraticNumberTimesMultiplier [None,  400.0, Pi^2],

 MakeTryLinearCombinationTimesMultiplier [None,  60.0, $PiLinComboBasis1, Sqrt[2]],
 MakeTryLinearCombinationTimesMultiplier [None,  60.0, $PiLinComboBasis1],
 MakeTryLinearCombinationTimesMultiplier [None,   6.0, {Pi^E, E^Pi, Pi}],

 MakeTryProduct [None, 25.0, {Log[5]*Pi, Log[2]*Pi, Log[2]*Sqrt[2]}],  (* Eg: 2^(Sqrt[2]+Pi)*5^Pi *)

 MakeTryLinFracComboTimesMultiplier [None, 90.0, $PiLinFracNumerator1, $PiLinFracDenominator1],
 MakeTryLinFracComboTimesMultiplier [None, 80.0, $PiLinFracNumAndDenBasis2, $PiLinFracNumAndDenBasis2],

 MakeTrySqrtOfLinearCombination [None, 20.0, {Pi^-1, 1, Pi, Pi^2}]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$EulerGammaTasks*)


$EulerGammaTasks = {
  MakeTryLinearCombinationTimesMultiplier [None, 4.0, {1, EulerGamma}],
  MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, EulerGamma ^ -1}]};  (* Also try  m/(n + k*EulerGamma) ?? *)


(* ::Subsubsubsubsection::Closed:: *)
(*$CatalanTasks*)


$CatalanTasks = {
 MakeTryLinearCombinationTimesMultiplier [None, 3.0, {1, Catalan}],
 MakeTryLinearCombinationTimesMultiplier [None, 3.0, {1, Catalan ^ -1}],
 MakeTryLinearCombinationTimesMultiplier [None, 2.0, {1, Catalan/Pi}],
 MakeTryLinearCombinationTimesMultiplier [None, 2.0, {1, Catalan/Pi^2}]};


(* ::Subsubsubsubsection::Closed:: *)
(*$KhinchinTasks*)


$KhinchinTasks = {
 MakeTryLinearCombinationTimesMultiplier [None, 3.0, {1, Khinchin}],
 MakeTryLinearCombinationTimesMultiplier [None, 0.3, {1, Khinchin ^ -1}]};


(* ::Subsubsubsubsection::Closed:: *)
(*$GlaisherTasks*)


$GlaisherTasks = {
 MakeTryLinearCombinationTimesMultiplier [None, 3.0, {1, Glaisher}],
 MakeTryLinearCombinationTimesMultiplier [None, 3.0, {1, Glaisher ^ -1}]};


(* ::Subsubsubsubsection::Closed:: *)
(*$AllBasicConstantsTasks and $DefaultBasicConstantsTasks*)


$AllBasicConstantsTasks = {$PiTasks, $CatalanTasks, $EulerGammaTasks, $GlaisherTasks, $KhinchinTasks};

$DefaultBasicConstantsTasks = $AllBasicConstantsTasks;


(* ::Subsubsubsection::Closed:: *)
(*Well-known constants tasks:*)


$FeigenbaumAlphaTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, FeigenbaumAlpha}]};
$FeigenbaumDeltaTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, FeigenbaumDelta}]};
$FeigenbaumDeltaTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, FeigenbaumDelta}]};
$FibonacciFactorialTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, FibonacciFactorial}]};
  (* We do not want to recognize  rational + rational*GoldenRatio or even rational*GoldenRatio,
     because then almost any occurrence of Sqrt[5] could be distractingly expressed in terms of GoldenRatio,
     forcing users to apply FunctionExpand if they forgot the definition. *)
$GoldenRatioTasks = {MakeTryApproximatelyEqual [None, 7.0, GoldenRatio],
                     MakeTryApproximatelyEqual [None, 7.0, GoldenRatio^-1]};
$LurothLevyTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, LurothLevy}]};
$LurothKhintchine1stTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, LurothKhintchine1st}]};
$LurothKhintchine2ndTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, LurothKhintchine2nd}]};
$Madelung3DNaClTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Madelung3DNaCl}]};
$MadelungHexagonalTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, MadelungHexagonal}]};
$MyrbergTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Myrberg}]};
$ParisTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Paris}]};
$RobinsonATasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, RobinsonA}]};
$RobinsonBTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, RobinsonB}]};
$RobinsonCTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, RobinsonC}]};
$RobinsonDTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, RobinsonD}]};

$AllWellKnownConstantsTasks = {$FeigenbaumAlphaTasks, $FeigenbaumDeltaTasks, $FibonacciFactorialTasks, $GoldenRatioTasks,
 $LurothLevyTasks, $LurothKhintchine1stTasks, $LurothKhintchine2ndTasks, $Madelung3DNaClTasks, $MadelungHexagonalTasks,
 $MyrbergTasks, $ParisTasks, $RobinsonATasks, $RobinsonBTasks, $RobinsonCTasks, $RobinsonDTasks};

$DefaultWellKnownConstantsTasks = {(*$GoldenRatioTasks*)};


(* ::Subsubsubsection::Closed:: *)
(*Number theory constants tasks:*)


$AlladiGrinsteadTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, AlladiGrinstead}]};
$AtkinsonNegroSantoroTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, AtkinsonNegroSantoro}]};
$AverageClassNumberTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, AverageClassNumber}]};
$BinarySelfNumbersDensityTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, BinarySelfNumbersDensity}]};
$Bendersky2ndTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Bendersky2nd}]};
$CarefreeTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Carefree}]};
$ConwayGuyTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, ConwayGuy}]};
$FellerTornierTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, FellerTornier}]};
$GaussKuzminWirsingTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, GaussKuzminWirsing}]};
$GeneralizedStirlingTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, GeneralizedStirling}]};
$HafnerSarnakMcCurleyTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, HafnerSarnakMcCurley}]};
$HallMontgomeryTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, HallMontgomery}]};
$HeathBrownMorozTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, HeathBrownMoroz}]};
$LandauRamanujanTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, LandauRamanujan}]};
$MillTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Mill}]};
$MurataTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Murata}]};
$NivenTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Niven}]};
$NortonTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Norton}]};
$OdlyzkoWilfTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, OdlyzkoWilf}]};
$PellTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Pell}]};
$PorterTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Porter}]};
$PrimeReciprocalTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, PrimeReciprocal}]};
$QuadraticResidues1stTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, QuadraticResidues1st}]};
$QuadraticResidues2ndTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, QuadraticResidues2nd}]};
$RosserTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Rosser}]};
$SalemTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Salem}]};
$SierpinskiTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Sierpinski}]};
$MaxAllowedStieltjesGammaIndex = 5;
$StieltjesGammaTasks = Table [MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, StieltjesGamma [k]}],
                                 {k, $MaxAllowedStieltjesGammaIndex}];
$StolarskyHarborthTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, StolarskyHarborth}]};
$StronglyCarefreeTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, StronglyCarefree}]};
$TwinPrimeTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, TwinPrime}]};
$ZagierTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Zagier}]};

$AllNumberTheoryConstantsTasks = {$AlladiGrinsteadTasks, $AtkinsonNegroSantoroTasks, $AverageClassNumberTasks,
 $Bendersky2ndTasks, $BinarySelfNumbersDensityTasks, $CarefreeTasks, $ConwayGuyTasks, $FellerTornierTasks,
 $GaussKuzminWirsingTasks, $GeneralizedStirlingTasks, $HafnerSarnakMcCurleyTasks, $HallMontgomeryTasks,
 $HeathBrownMorozTasks, $LandauRamanujanTasks, $MillTasks, $MurataTasks, $NivenTasks, $NortonTasks,
 $OdlyzkoWilfTasks, $PellTasks, $PorterTasks, $PrimeReciprocalTasks, $QuadraticResidues1stTasks,
 $QuadraticResidues2ndTasks, $RosserTasks, $SalemTasks, $SierpinskiTasks, $StieltjesGammaTasks,
 $StolarskyHarborthTasks, $StronglyCarefreeTasks, $TwinPrimeTasks, $ZagierTasks};

$DefaultNumberTheoryConstantsTasks = {};

$DefaultStiltjesGammaTasks = {};


(* ::Subsubsubsection::Closed:: *)
(*Inequalitites constants tasks:*)


$BrownWangTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, BrownWang}]};
$ElbertTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Elbert}]};
$GiesekingTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Gieseking}]};
$KneserMahlerBetaTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, KneserMahlerBeta}]};
$ShapiroDrinfeldTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, ShapiroDrinfeld}]};
$VanDerCorputTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, VanDerCorput}]};
$ZolotarevSchurTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, ZolotarevSchur}]};

$AllInequalitiesConstantsTasks = {$BrownWangTasks, $ElbertTasks, $GiesekingTasks, $KneserMahlerBetaTasks,
 $ShapiroDrinfeldTasks, $VanDerCorputTasks, $ZolotarevSchurTasks};

$DefaultInequalitiesConstantsTasks = {};


(* ::Subsubsubsection::Closed:: *)
(*Approximation constants tasks:*)


$AllApproximationConstants = {Bernstein, Conway, FransenRobinson, LaplaceLimit,
  Lebesgue1st, Lebesgue2nd, Lebesgue3rd, OneNinth, Rod};
$BernsteinTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Bernstein}]};
$ConwayTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Conway}]};
$FransenRobinsonTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, FransenRobinson}]};
$LaplaceLimitTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, LaplaceLimit}]};
$Lebesgue1stTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Lebesgue1st}]};
$Lebesgue2ndTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Lebesgue2nd}]};
$Lebesgue3rdTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Lebesgue3rd}]};
$OneNinthTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, OneNinth}]};
$RodTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Rod}]};

$AllApproximationConstantsTasks = {$BernsteinTasks, $ConwayTasks, $FransenRobinsonTasks, $LaplaceLimitTasks,
 $Lebesgue1stTasks, $Lebesgue2ndTasks, $Lebesgue3rdTasks, $OneNinthTasks, $RodTasks};

$DefaultApproximationConstantsTasks = {};


(* ::Subsubsubsection::Closed:: *)
(*Enumeration constants tasks:*)


$BackhouseTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Backhouse}]};
$ErdosBorweinTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, ErdosBorwein}]};
$FibonacciReciprocalTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, FibonacciReciprocal}]};
$FlajoletOdlyzkoTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, FlajoletOdlyzko}]};
$GohSchmutzTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, GohSchmutz}]};
$GohSchmutzBTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, GohSchmutzB}]};
$GolombDickmanTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, GolombDickman}]};
$HardHexagonEntropyTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, HardHexagonEntropy}]};
$HardSquareEntropyTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, HardSquareEntropy}]};
$LengyelTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Lengyel}]};
$MagataTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Magata}]};
$TakeuchiPrelbergTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, TakeuchiPrelberg}]};
$TriangularEntropyOfFoldingTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, TriangularEntropyOfFolding}]};

$AllEnumerationConstantsTasks = {$BackhouseTasks, $ErdosBorweinTasks, $FibonacciReciprocalTasks, $FlajoletOdlyzkoTasks,
 $GohSchmutzTasks, $GohSchmutzBTasks, $GolombDickmanTasks, $HardHexagonEntropyTasks, $HardSquareEntropyTasks,
 $LengyelTasks, $MagataTasks, $TakeuchiPrelbergTasks, $TriangularEntropyOfFoldingTasks};

$DefaultEnumerationConstantsTasks = {};


(* ::Subsubsubsection::Closed:: *)
(*Iteration constants tasks:*)


$CahenTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Cahen}]};
$DottieTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Dottie}]};
$EulerGompertzTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, EulerGompertz}]};
$FlajoletMartinTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, FlajoletMartin}]};
$FoiasTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Foias}]};
$GrossmanTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Grossman}]};
$KeplerBouwkampTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, KeplerBouwkamp}]};
$KomornikLoretiTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, KomornikLoreti}]};
$LehmerTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Lehmer}]};
$LemniscateArclengthTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, LemniscateArclength}]};
$MinkowskiBowerTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, MinkowskiBower}]};
$PaperFoldingTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, PaperFolding}]};
$PlouffeKTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, PlouffeK}]};
$ProuhetThueMorseTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, ProuhetThueMorse}]};
$RabbitTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Rabbit}]};
$RamanujanSoldnerTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, RamanujanSoldner}]};
$Trott1Tasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Trott1}]};
$UbiquitousTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Ubiquitous}]};
$WeierstrassTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, Weierstrass}]};

$AllIterationConstantsTasks = {$CahenTasks, $DottieTasks,
 $EulerGompertzTasks, $FlajoletMartinTasks, $FoiasTasks, $GrossmanTasks, $KeplerBouwkampTasks, $KomornikLoretiTasks,
 $LehmerTasks, $LemniscateArclengthTasks, $MinkowskiBowerTasks, $PaperFoldingTasks, $PlouffeKTasks,
 $ProuhetThueMorseTasks, $RabbitTasks, $RamanujanSoldnerTasks, $Trott1Tasks, $UbiquitousTasks, $WeierstrassTasks};

$DefaultIterationConstantsTasks = {};


(* ::Subsubsubsection::Closed:: *)
(*Complex analysis constants tasks:*)


$JohnTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, John}]};
$MasserGramainCTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, MasserGramainC}]};

$AllComplexAnalysisConstantsTasks = {$JohnTasks, $MasserGramainCTasks};

$DefaultComplexAnalysisConstantsTasks = {};


(* ::Subsubsubsection::Closed:: *)
(*Geometry constants tasks:*)


$GrazingGoatTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, GrazingGoat}]};
$KuijlaarsSaffTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, KuijlaarsSaff}]};
$MrsMiniverTasks = {MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, MrsMiniver}]};

$AllGeometryConstantsTasks = {$GrazingGoatTasks, $KuijlaarsSaffTasks, $MrsMiniverTasks};

$DefaultGeometryConstantsTasks = {};


(* ::Subsubsubsection::Closed:: *)
(*$FlattenedAllConstantsTasks and $FlattenedDefaultConstantsTasks:*)


$FlattenedAllConstantsTasks = Flatten [{$AllBasicConstantsTasks, $AllWellKnownConstantsTasks, $AllNumberTheoryConstantsTasks,
 $AllInequalitiesConstantsTasks, $AllApproximationConstantsTasks, $AllEnumerationConstantsTasks,
 $AllIterationConstantsTasks, $AllComplexAnalysisConstantsTasks, $AllGeometryConstantsTasks}, 2];


$FlattenedDefaultConstantsTasks = Flatten [{$DefaultBasicConstantsTasks, $DefaultWellKnownConstantsTasks,
 $DefaultNumberTheoryConstantsTasks, $DefaultInequalitiesConstantsTasks, $DefaultApproximationConstantsTasks,
 $DefaultEnumerationConstantsTasks, $DefaultIterationConstantsTasks, $DefaultComplexAnalysisConstantsTasks,
 $DefaultGeometryConstantsTasks}, 2];


(* ::Subsubsection::Closed:: *)
(*Make function family task records:*)


(* ::Subsubsubsection::Closed:: *)
(*Basic functions tasks:*)


(* ::Subsubsubsubsection::Closed:: *)
(*$ExpFamilyTasks*)


$ExpConstants = {E, E^(1/2), E^((1/2)*Pi), E^(1/3), E^((1/3)*Pi), E^(2/3), E^((2/3)*Pi), E^(1/4),
 E^((1/4)*Pi), E^(3/4), E^((3/4)*Pi), E^(1/6), E^((1/6)*Pi), E^(5/6), E^((5/6)*Pi)};

$ExpLinFracNumDenBasis1 = {1, E^Pi, E^(2Pi)};

(*$EToTimesPiBasis = {1, E^(Pi/4), E^-(Pi/4), E^(4Pi), E^-(4*Pi)};*)  (* :magnitudes of E^(4Pi) & E^-(4*Pi) are too extreme *)
$EToIntegerBasis = {1, E, E^2, E^3, E^4, E^5, E^6, E^7, E^8};

$LinCombExpBases = {(*$EToTimesPiBasis,*) $EToIntegerBasis};

$ExpTasks = Join [
 (*MapIndexed [MakeTryRationalTimesMultiplier [ExpFamily, 8.0*(2.0 - First[#2]/Length[$ExpConstants]), #1] &, $ExpConstants],*)
 MapIndexed [MakeTryLinearCombinationTimesMultiplier [ExpFamily, 8.0*(2.0 - First[#2]/Length[$ExpConstants]), {1, #1}] &, $ExpConstants],

 {(*MakeTryLinearCombinationTimesMultiplier [ExpFamily, 15.0, $EToTimesPiBasis],*)
  MakeTryLinearCombinationTimesMultiplier [ExpFamily, 20.0, $EToIntegerBasis],

  MakeTrySqrtOfLinearCombination [ExpFamily, 10.0, {1, E^2, E^4, E^6, E^8}],
  MakeTrySqrtOfLinearCombination [ExpFamily, 10.0, {E^-4, E^-2, 1, E^2, E^4, E^6}],
  MakeTrySqrtOfLinearCombination [ExpFamily, 10.0, {1, E^(2*Pi), E^(4*Pi)}],

  MakeTryLinFracComboTimesMultiplier [ExpFamily, 50.0, {1, E, E^2, E^3, E^4}, {1, E, E^2}],
  MakeTryLinFracComboTimesMultiplier [ExpFamily, 20.0, {1, E, E^2, E^3, E^4}, {1, E, E^2}, Pi],
  MakeTryLinFracComboTimesMultiplier [ExpFamily, 20.0, $ExpLinFracNumDenBasis1, $ExpLinFracNumDenBasis1, Pi],
  MakeTryLinFracComboTimesMultiplier [ExpFamily, 20.0, $ExpLinFracNumDenBasis1, $ExpLinFracNumDenBasis1, Sqrt[2]*Pi],

  MakeTryProduct [ExpFamily, 25.0, {Log[Pi]*E, EulerGamma, Pi, Log[Pi], Log[2]}],
                                       (* Eg: 2*E^(EulerGamma+Pi)*Pi^(1+E) *)
  MakeTryProduct [ExpFamily, 25.0, {Log[Pi]*Pi, Log[Pi]*E, 1, Log[Pi], Log[2], Log[3], Log[5]}],
                                       (* Eg: 30*E*Pi^(1+E+Pi) *)
  MakeTryProduct [ExpFamily, 25.0, {Log[EulerGamma]*E, Log[EulerGamma], Log[Pi], Log[2]}],
                                       (* Eg: 2*EulerGamma^(1+E)*Pi *)
  MakeTryProduct [ExpFamily, 25.0, {E, 1/E, 1}],
                                       (* Eg: E^(1+1/E+E) *)
  MakeTrySqrtOfLinFracCombo [ExpFamily, 30.0, {1, E^2, E^4}, {1, E^2, E^4, E^6}],

  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 90, 1.87, TryPlusOrMinusExp],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 40, 1.87, TryPlusOrMinusExp, 1, Pi],
  (*MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 40, 1.86, TryLogisticSigmoidTimesN],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 40, 1.96, TryPlusOrMinusLogisticSigmoidPlusN],*)
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 40, 2.04, TryPlusOrMinusEinstein2],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 10, 3.85, TryEinstein1TimesN],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 10, 3.85, TryPlusOrMinusEinstein1PlusN]
}];  (* Einstein3, Einstein4, PlanckRadiation, inverse ProductLog ?? *)

$ExpLinFracBasisPair1 = {{1, E, E^2, E^3, E^4}, {1, E, E^2}};

$ProductBasis1 = {\[Pi]^E, E^EulerGamma, E^\[Pi], \[Pi], 2};
$ProductBasis2 = {\[Pi]^\[Pi], \[Pi]^E, E, \[Pi], 2, 3, 5};
$ProductBasis3 = {EulerGamma^E, EulerGamma, \[Pi], 2};
$ProductBasis4 = {E^E, E^(1/E), E};
$DefaultExpProductBases = {$ProductBasis1, $ProductBasis2, $ProductBasis3, $ProductBasis4};


$CoshConstants = {Cosh[1], Cosh[Pi], Cosh[1/2], Cosh[(1/2)Pi], Cosh[1/3], Cosh[(1/3)Pi],
  Cosh[2/3], Cosh [(2/3)Pi], Cosh[1/4], Cosh[(1/4)Pi], Cosh[3/4], Cosh[(3/4)Pi]};

$CoshTasks = Join [
 (*MapIndexed [MakeTryRationalTimesMultiplier [ExpFamily, 6.0*(2.0 - First[#2]/Length[$CoshConstants]), #1] &, $CoshConstants],*)
 MapIndexed [MakeTryLinearCombinationTimesMultiplier [ExpFamily, 6.0*(2.0 - First[#2]/Length[$CoshConstants]), {1, #1}] &, $CoshConstants],

 {MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 80, 1.79, TryPlusOrMinusCoshMaybeDividedByN],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 40, 1.79, TryPlusOrMinusCoshMaybeDividedByN, Pi],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 20, 1.79, TryPlusOrMinusCoshMaybeDividedByN, 1, Pi],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 10, 1.79, TryPlusOrMinusCoshMaybeDividedByN, Pi, Pi],

  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 80, 1.89, TryPlusOrMinusCoshMaybeMinus1],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 40, 1.89, TryPlusOrMinusCoshMaybeMinus1, Pi],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 20, 1.89, TryPlusOrMinusCoshMaybeMinus1, 1, Pi],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 10, 1.89, TryPlusOrMinusCoshMaybeMinus1, Pi, Pi]
}];


$SechConstants = $CoshConstants ^ -1;

$SechTasks = Join [
 MapIndexed [MakeTryRationalTimesMultiplier [ExpFamily, 4.0*(2.0 - First[#2]/Length[$SechConstants]), #1] &, $SechConstants],
 (*MapIndexed [MakeTryLinearCombinationTimesMultiplier [ExpFamily, 4.0*(2.0 - First[#2]/Length[$SechConstants]), {1, #1}] &, $SechConstants],*)

 {MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 59, 1.90, TrySechTimesN],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 39, 1.90, TrySechTimesN, Pi],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 18, 1.90, TrySechTimesN, 1, Pi],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily,  8, 1.90, TrySechTimesN, Pi, Pi],

  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 59, 1.95, TryPlusOrMinusSechPlusInteger],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 39, 1.95, TryPlusOrMinusSechPlusInteger, Pi],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 18, 1.95, TryPlusOrMinusSechPlusInteger, 1, Pi],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily,  8, 1.95, TryPlusOrMinusSechPlusInteger, Pi, Pi]
}];


$SinhConstants = {Sinh[1], Sinh[Pi], Sinh[1/2], Sinh[Pi/2], Sinh[1/3], Sinh[(1/3)Pi],
  Sinh[2/3], Sinh[(2/3)Pi], Sinh[1/4], Sinh[(1/4)Pi], Sinh[3/4], Sinh[(3/4)Pi]};

$SinhTasks = Join [
 (*MapIndexed [MakeTryRationalTimesMultiplier [ExpFamily, 6.0*(2.0 - First[#2]/Length[$SinhConstants]), #1] &, $SinhConstants],*)
 MapIndexed [MakeTryLinearCombinationTimesMultiplier [ExpFamily, 6.0*(2.0 - First[#2]/Length[$SinhConstants]), {1, #1}] &, $SinhConstants],

 {MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 80, 1.90, TryPlusOrMinusSinh],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 40, 1.90, TryPlusOrMinusSinh, Pi],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 20, 1.90, TryPlusOrMinusSinh, 1, Pi],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 105, 1.90, TryPlusOrMinusSinh, Pi, Pi]
}];


$CschConstants = $SinhConstants ^ -1;

$CschTasks = Join [
 (*MapIndexed [MakeTryRationalTimesMultiplier [ExpFamily, 4.0*(2.0 - First[#2]/Length[$CschConstants]), #1] &, $CschConstants],*)
 MapIndexed [MakeTryLinearCombinationTimesMultiplier [ExpFamily, 4.0*(2.0 - First[#2]/Length[$CschConstants]), {1, #1}] &, $CschConstants],

 {MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 79, 1.75, TryPlusOrMinusCsch],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 39, 1.75, TryPlusOrMinusCsch, Pi],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 18, 1.75, TryPlusOrMinusCsch, 1, Pi],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily,  8, 1.75, TryPlusOrMinusCsch, Pi, Pi]
}];


$TanhConstants = {Tanh[1], Tanh[Pi], Tanh[1/2], Tanh[(1/2)Pi], Tanh[1/3], Tanh[(1/3)Pi],
  Tanh[2/3], Tanh[(2/3)Pi], Tanh[1/4], Tanh[(1/4)Pi], Tanh[3/4], Tanh[(3/4)Pi]};

$TanhTasks = Join [
 (*MapIndexed [MakeTryRationalTimesMultiplier [ExpFamily, 6.0*(2.0 - First[#2]/Length[$TanhConstants]), #1] &, $TanhConstants],*)
 MapIndexed [MakeTryLinearCombinationTimesMultiplier [ExpFamily, 6.0*(2.0 - First[#2]/Length[$TanhConstants]), {1, #1}] &, $TanhConstants],

 {MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 80, 1.93, TryTanhTimesN],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 40, 1.93, TryTanhTimesN, Pi],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 20, 1.93, TryTanhTimesN, 1, Pi],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 10, 1.93, TryTanhTimesN, Pi, Pi],

  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 80, 1.99, TryPlusOrMinusTanhPlus2N],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 40, 1.99, TryPlusOrMinusTanhPlus2N, Pi],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 20, 1.99, TryPlusOrMinusTanhPlus2N, 1, Pi],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 10, 1.99, TryPlusOrMinusTanhPlus2N, Pi, Pi]
}];


$CothConstants = $TanhConstants ^ -1;

$CothTasks = Join [
 (*MapIndexed [MakeTryRationalTimesMultiplier [ExpFamily, 15.0/First[#2], #1] &, $CothConstants],*)
 MapIndexed [MakeTryLinearCombinationTimesMultiplier [ExpFamily, 10.0/First[#2], {1, #1}] &, $CothConstants],

 {MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 79, 1.92, TryCothMaybeDividedByN],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 39, 1.92, TryCothMaybeDividedByN, Pi],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 18, 1.92, TryCothMaybeDividedByN, 1, Pi],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily,  8, 1.92, TryCothMaybeDividedByN, Pi, Pi],

  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 79, 1.98, TryPlusOrMinusCothMaybeMinus1],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 39, 1.98, TryPlusOrMinusCothMaybeMinus1, Pi],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily, 18, 1.98, TryPlusOrMinusCothMaybeMinus1, 1, Pi],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [ExpFamily,  8, 1.98, TryPlusOrMinusCothMaybeMinus1, Pi, Pi]
}];


$ExpFamilyTasks = Join [$ExpTasks, $SinhTasks, $CoshTasks, $TanhTasks, $CschTasks, $SechTasks, $CothTasks];


(* ::Subsubsubsubsection::Closed:: *)
(*$LogFamilyTasks, including inverse hyperbolic, ProductLog (aka LambertW),  and InverseGudermannian*)


$ArcCoshLinComboBasis1 = {ArcCosh[2], Sqrt[3], ArcSinh[1], Sqrt[2], Pi, 1};
$ArcCoshLinComboBasis2 = {ArcCosh[2]*Pi, ArcSinh[1]*Sqrt[2], Log[2]*Pi, Catalan, Pi^2, Pi, 1};
$ArcCoshLinComboBasis3 = {ArcCosh[2]*Sqrt[3], Sqrt[3]*Pi, ArcSinh[1]*Sqrt[2], Sqrt[2]*Pi, Sqrt[2], Log[2], Pi, 1};

$LinCombArcCoshBases = {$ArcCoshLinComboBasis1, $ArcCoshLinComboBasis2, $ArcCoshLinComboBasis3};

$ArcCoshTasks = {
 MakeTryRationalTimesMultiplier [LogFamily, 15.0, ArcCosh[2]],

 MakeTryLinearCombinationTimesMultiplier [LogFamily, 15.0, {1, ArcCosh[2]}],

 MakeTryLinearCombinationTimesMultiplier [LogFamily, 60.0, $ArcCoshLinComboBasis1],
 MakeTryLinearCombinationTimesMultiplier [LogFamily, 16.0, $ArcCoshLinComboBasis1, Sqrt[2]*Pi],
 MakeTryLinearCombinationTimesMultiplier [LogFamily, 16.0, $ArcCoshLinComboBasis1, Sqrt[3]*Pi],
 MakeTryLinearCombinationTimesMultiplier [LogFamily, 16.0, $ArcCoshLinComboBasis1, Sqrt[2]/Pi],
 MakeTryLinearCombinationTimesMultiplier [LogFamily, 16.0, $ArcCoshLinComboBasis1, Pi^-1],

 MakeTryLinearCombinationTimesMultiplier [LogFamily, 90.0, $ArcCoshLinComboBasis2],
 MakeTryLinearCombinationTimesMultiplier [LogFamily, 16.0, $ArcCoshLinComboBasis2, Pi^-1],

 MakeTryLinearCombinationTimesMultiplier [LogFamily, 80.0, $ArcCoshLinComboBasis3],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 80.0, 1.78, TryPlusOrMinusArcCosh],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 10.0, 1.78, TryPlusOrMinusArcCosh, Pi],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 59.0, 3.78, TryPlusOrMinusArcCosh, 1, 1, 2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily,  9.0, 3.78, TryPlusOrMinusArcCosh, Pi, 1, 2]
};


$ArcSinhLinComboBasis1 = {ArcSinh[2]*Sqrt[5], Log[2]*Sqrt[5], Sqrt[3]*Pi, 1};
$ArcSinhLinComboBasis2 = {ArcSinh[2], Sqrt[5], ArcSinh[1], Sqrt[2], Pi, 1};

$LinCombArcSinhBases = {$ArcSinhLinComboBasis1, $ArcSinhLinComboBasis2};

$ArcSinhTasks = {
 MakeTryRationalTimesMultiplier [LogFamily, 15.0, ArcSinh[1]],
 MakeTryRationalTimesMultiplier [LogFamily, 12.0, ArcSinh[2]],

 MakeTryLinearCombinationTimesMultiplier [LogFamily, 15.0, {1, ArcSinh[1]}],
 MakeTryLinearCombinationTimesMultiplier [LogFamily, 12.0, {1, ArcSinh[2]}],

 MakeTryLinearCombinationTimesMultiplier [LogFamily, 15.0, $ArcSinhLinComboBasis1],

 MakeTryLinearCombinationTimesMultiplier [LogFamily, 60.0, $ArcSinhLinComboBasis2],
 MakeTryLinearCombinationTimesMultiplier [LogFamily, 18.0, $ArcSinhLinComboBasis2, Pi],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 60.0, 1.93, TryPlusOrMinusArcSinh],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 24.0, 1.93, TryPlusOrMinusArcSinh, 2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 20.0, 1.93, TryPlusOrMinusArcSinh, Pi],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 60.0, 3.93, TryPlusOrMinusArcSinh, 1, 1, 2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 59.0, 3.93, TryPlusOrMinusArcSinh, 2, 1, 2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 16.0, 3.93, TryPlusOrMinusArcSinh, Pi, 1, 2]
};


$ArcTanhTasks = {
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 60.0, 1.99, TryPlusOrMinusArcTanh],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 24.0, 1.99, TryPlusOrMinusArcTanh, 2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 16.0, 1.99, TryPlusOrMinusArcTanh, Pi],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 59.0, 3.99, TryPlusOrMinusArcTanh, 1, 1, 2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 22.0, 3.99, TryPlusOrMinusArcTanh, 2, 1, 2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 14.0, 3.99, TryPlusOrMinusArcTanh, Pi, 1, 2]
};


$LogLinComboBasis1 = {Log[2], Log[3], Log[5], Log[7], Log[11], Pi, 1};
$LogLinComboBasis2 = {Log[Glaisher], Log[Pi], Log[2], 1};
  (* {LogGamma[1/3], Log[Pi], Log[2], Log[3]} with multipliers {Sqrt[3]*Pi}} ?? *)
(*$LogLinComboBasis3 = {LogGamma[1/4], EulerGamma, (*Log[Pi],*) Log[2]};*)
$LogLinComboBasis4 = {EulerGamma, Log[Pi], Log[2], Log[3], Log[5], Pi, 1};
$LogLinComboBasis5 = {EulerGamma, Log[3]^2, Log[3], Sqrt[3]*Pi, 1};
$LogLinComboBasis6 = {EulerGamma^2, Log[2]^2, Log[2], 1, Log[2]*Pi, Pi^2, Pi};
(*$LogLinComboBasis7 = {LogGamma[2/3], (*LogGamma[1/3],*) EulerGamma, Log[2], Log[3], 1};*)

$LinCombLogBases = {$LogLinComboBasis1, $LogLinComboBasis2, (*$LogLinComboBasis3,*)
  $LogLinComboBasis4, $LogLinComboBasis5, $LogLinComboBasis6(*, $LogLinComboBasis7*)};

$LogLinFracNumDenBasis1 = {1, Log[2], Log[3], Log[5]};

$LogTasks = {
 MakeTryRationalTimesMultiplier [LogFamily, 45.0, Log[2]],
 MakeTryRationalTimesMultiplier [LogFamily,  8.0, Log[Log[2]]],
 MakeTryRationalTimesMultiplier [LogFamily,  8.0, Log[EulerGamma]],
 MakeTryRationalTimesMultiplier [LogFamily,  6.0, Log[Khinchin]],
 MakeTryRationalTimesMultiplier [LogFamily,  4.0, Log[Khinchin]*Log[2]],

 MakeTryProduct [LogFamily, 25.0, {Log[Catalan], Log[Log[2]], 1, Log[Pi], Log[2], Log[3]}], (* &/or ExpFamily *)
                                       (* Eg: Catalan*E*Pi*Log[64] *)
 MakeTryLinearCombinationTimesMultiplier [LogFamily, 45.0, {1, Log[2]}],
 MakeTryLinearCombinationTimesMultiplier [LogFamily,  8.0, {1, Log[Log[2]]}],
 MakeTryLinearCombinationTimesMultiplier [LogFamily,  8.0, {1, Log[EulerGamma]}],
 MakeTryLinearCombinationTimesMultiplier [LogFamily,  6.0, {1, Log[Khinchin]}],
 MakeTryLinearCombinationTimesMultiplier [LogFamily,  4.0, {1, Log[Khinchin]*Log[2]}],

 MakeTryLinearCombinationTimesMultiplier [LogFamily, 80.0, $LogLinComboBasis1],

 MakeTryLinearCombinationTimesMultiplier [LogFamily, 20.0, $LogLinComboBasis2],

 (*MakeTryLinearCombinationTimesMultiplier [LogFamily, 16.0, $LogLinComboBasis3, Pi],*)

 MakeTryLinearCombinationTimesMultiplier [LogFamily, 60.0, $LogLinComboBasis4],
 MakeTryLinearCombinationTimesMultiplier [LogFamily, 40.0, $LogLinComboBasis4, Sqrt[3*Pi]],

 MakeTryLinearCombinationTimesMultiplier [LogFamily, 60.0, $LogLinComboBasis5],
 MakeTryLinearCombinationTimesMultiplier [LogFamily, 30.0, $LogLinComboBasis5, Sqrt[3]*Pi],

 MakeTryLinearCombinationTimesMultiplier [LogFamily, 40.0, $LogLinComboBasis6],
 MakeTryLinearCombinationTimesMultiplier [LogFamily, 30.0, $LogLinComboBasis6, Pi],

 MakeTryLinFracComboTimesMultiplier [LogFamily, 60, $LogLinFracNumDenBasis1, $LogLinFracNumDenBasis1],
 MakeTryLinFracComboTimesMultiplier [LogFamily, 20, {Log[2], Sqrt[2], 1}, {Sqrt[2], 1}],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 90.0, 1.81, TryPlusOrMinusLog],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 20.0, 1.81, TryPlusOrMinusLog, Pi],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 99.0, 3.81, TryPlusOrMinusLog, 1, 1, 2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 18.0, 3.81, TryPlusOrMinusLog, Pi, 1, 2],
(* : Consider continuing to degree 4, 6 or 8 *)

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 40.0, 1.78, TryPlusOrMinusLog10],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 40.0, 1.86, TryPlusOrMinusLog2],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 40.0, 2.12, TryPlusOrMinusLogSinCosSecOrCsc, 1, Pi],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 40.0, 1.86, TryPlusOrMinusLogCoshOrSech, 1, Pi],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 40.0, 2.01, TryPlusOrMinusLogCothOrTanh, 1, Pi],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 40.0, 1.87, TryPlusOrMinusLogSinh, 1, Pi],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 40.0, 2.07, TryPlusOrMinusLogCsch, 1, Pi],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 10.0, 3.85, TryPlusOrMinusEinstein3](*,

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 118.0, 4.81, TryPlusOrMinusLog, 1, 1, 3],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily,  16.0, 4.81, TryPlusOrMinusLog, Pi, 1, 3],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 114.0, 5.81, TryPlusOrMinusLog, 1, 1, 4],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily,  14.0, 5.81, TryPlusOrMinusLog, Pi, 1, 4],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 112.0, 6.81, TryPlusOrMinusLog, 1, 1, 5],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily,  12.0, 6.81, TryPlusOrMinusLog, Pi, 1, 5],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily, 110.0, 7.81, TryPlusOrMinusLog, 1, 1, 6],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [LogFamily,  10.0, 7.81, TryPlusOrMinusLog, Pi, 1, 6]*)
};


$LogLinFracBasisPair1 = {$LogLinFracNumDenBasis1, $LogLinFracNumDenBasis1};
$LogLinFracBasisPair2 = {{Log[2], Sqrt[2], 1}, {Sqrt[2], 1}};


$DefaultLogProductBases = {{Catalan,Log[2],E,\[Pi],2,3}};


$InverseGudermannianTasks = {
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 40.0, 1.87, TryPlusOrMinusInverseGudermannian, 1, Pi]};


$ProductLogTasks ={
 (*MakeTryRationalTimesMultiplier [None, 10.0, ProductLog[1]],
 MakeTryRationalTimesMultiplier [None, 10.0, ProductLog[1/E]],*)

 MakeTryLinearCombinationTimesMultiplier [None, 15.0, {1, ProductLog[1]}],
 MakeTryLinearCombinationTimesMultiplier [None, 15.0, {1, ProductLog[1/E]}],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 60.0, 1.88, TryProductLogBranch0TimesN, -1, -1],               (* eg 1c *)
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 60.0, 1.93, TryPlusOrMinusProductLogBranchMinus1OnN, -1, -1],  (* eg 1c *)
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 60.0, 1.80, TryPlusOrMinusProductLogBranchMinus1Plus1, -1, -1], (* eg 1c *)

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 60.0, 1.88, TryProductLogBranch0TimesN, -1/Log[2], -Log[2]],               (* eg 1a *)
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 60.0, 1.93, TryPlusOrMinusProductLogBranchMinus1OnN, -1/Log[2], -Log[2]],  (* eg 1a *)
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 60.0, 1.80, TryPlusOrMinusProductLogBranchMinus1Plus1, -1/Log[2], -Log[2]], (* eg 1a *)

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 60.0, 1.88, TryProductLogBranch0TimesN, -1/Log[10], -Log[10]],               (* eg 1b *)
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 60.0, 1.93, TryPlusOrMinusProductLogBranchMinus1OnN, -1/Log[10], -Log[10]],  (* eg 1b *)
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 60.0, 1.80, TryPlusOrMinusProductLogBranchMinus1Plus1, -1/Log[10], -Log[10]], (* eg 1b *)

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 60.0, 1.88, TryLogOnProductLogOfLog, 1, 1, 1, 0],  (* eg 2, solves x^x \[Equal] y *)
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 60.0, 1.88, TryLogOnProductLogOfLog, 1, 1, 1, -1],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 60.0, 1.88, TryProductLogOfRatOnRat, 1, 1, 1, 0],  (* eg 3, solves x^n \[Equal] Exp [-r*x] *)
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 60.0, 1.88, TryProductLogOfRatOnRat, 1, 1, 1, -1],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 60.0, 1.88, TryProductLogOfMinusLogOnMinusLog, 1, 1, 1, 0],  (* eg 4, solves x^x^...^x \[Equal] y *)
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 60.0, 1.88, TryProductLogOfMinusLogOnMinusLog, 1, 1, 1, -1],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 60.0, 1.88, TryExpOfProductLog, 1, 1, 1, 0],  (* eg 5, solves x * Log[x] \[Equal] y *)
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 60.0, 1.88, TryExpOfProductLog, 1, 1, 1, -1],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 60.0, 1.88, TryExpOfProductLog, 1, Log[2], 1, 0],  (* eg 5, solves x * Log2[x] \[Equal] y *)
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 60.0, 1.88, TryExpOfProductLog, 1, Log[2], 1, -1],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 60.0, 1.88, TryExpOfProductLog, 1, Log[10], 1, 0],  (* eg 5, solves x * Log10[x] \[Equal] y *)
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 60.0, 1.88, TryExpOfProductLog, 1, Log[10], 1, -1],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 60.0, 1.88, TryRatMinusProductLogOfEToRat, 1, 1, 1, 0] (* eg 14, solves x/(1-E^x) \[Equal] y *)
 (*MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 60.0, 1.88, TryRatMinusProductLogOfEToRat, 1, 1, 1, -1]*) (*: can't make it work *)
};


$LogFamilyTasks = Join [$ArcCoshTasks, $ArcSinhTasks, $ArcTanhTasks, $LogTasks, $InverseGudermannianTasks, $ProductLogTasks];


(* ::Subsubsubsubsection::Closed:: *)
(*$TrigFamilyTasks*)


(* Mathematica automatically converts most missing small-denominator trig constants to radicals,
   which are obtained directly by generating algebraic-number candidates: *)

$TanCotConstants = {Tan[(1/8)\[Pi]], Cot[(1/8)\[Pi]], Tan[(1/9)\[Pi]], Cot[(1/9)\[Pi]],
   Tan[(2/9)\[Pi]], Cot[(2/9)\[Pi]], Tan[(1/15)\[Pi]], Cot[(1/15)\[Pi]], Tan[(2/15)\[Pi]], Cot[(2/15)\[Pi]],
   Tan[(1/18)\[Pi]], Cot[(1/18)\[Pi]], Tan[(1/30)\[Pi]], Cot[(1/30)\[Pi]]};

(* Use MapIndexed to initialize increasing denominators to decreasing likelihood: *)

$TanCotTasks = {
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [TrigFamily, 100, 1.97, TryPlusOrMinusTanOrCot, 1, Pi],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [TrigFamily,  20, 1.97, TryPlusOrMinusTanOrCot, Pi, Pi],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [TrigFamily,  19, 1.97, TryPlusOrMinusTanOrCot],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [TrigFamily,  18, 1.97, TryPlusOrMinusTanOrCot, Pi]
};


$OneSin1Cos1Sin2Cos2Basis = {1, Cos[1], Sin[1], Cos[2], Sin[2]};

$SinCosPiOn7Basis = {1, Sin[Pi/7], Cos[Pi/7]};
$SinCosPiOn9Basis = {1, Sin[Pi/9], Cos[Pi/9], Sin[(2/9)*Pi], Cos[(2/9)*Pi]};
$SinCosPiOn11Basis = {1, Sin[\[Pi]/11], Cos[\[Pi]/11], Sin[2\[Pi]/11], Cos[2\[Pi]/11]};

$SinCosPiOn13Basis = {1, Sin[\[Pi]/13], Cos[\[Pi]/13], Sin[(2\[Pi])/13], Cos[(2\[Pi])/13], Sin[(3\[Pi])/13], Cos[(3\[Pi])/13]};
$SinCosPiOn14Basis = {1, Sin[\[Pi]/14], Cos[\[Pi]/14], Sin[\[Pi]/7], Cos[\[Pi]/7](*, Sin[(3\[Pi])/14], Cos[(3\[Pi])/14]*)}; (* Needed mystery !! *)
$SinCosPiOn15Basis = {1,Sin[\[Pi]/15], Cos[\[Pi]/15], Sin[(2 \[Pi])/15], Cos[(2 \[Pi])/15], Sqrt[5/8-Sqrt[5]/8], Sqrt[5]};
$SinCosPiOn16Basis = {1, Sin[\[Pi]/16], Cos[\[Pi]/16], Sin[\[Pi]/8], Cos[\[Pi]/8], Sin[(3\[Pi])/16], Cos[(3\[Pi])/16], Sin[\[Pi]/4]};
$SinCosPiOn17Basis = {1, Sin[\[Pi]/17], Cos[\[Pi]/17], Sin[(2 \[Pi])/17], Cos[(2 \[Pi])/17], Sin[(3 \[Pi])/17], Cos[(3 \[Pi])/17],
  Sin[(4 \[Pi])/17], Cos[(4 \[Pi])/17]};
$SinCosPiOn20Basis = {1, Sin[\[Pi]/20], Cos[\[Pi]/20], Sqrt[5], Sqrt[5/8 + (1/8)*Sqrt[5]],
  Sqrt[5/8-Sqrt[5]/8], Sqrt[2]}; (* :omits , Sin[(3 \[Pi])/20] and Cos[(3 \[Pi])/20] *)
$SinCosPiOn24Basis = {1, Sin[\[Pi]/24], Cos[\[Pi]/24], Sqrt[6], Sin[\[Pi]/8], Cos[\[Pi]/8], Sqrt[3], Sqrt[2]}; (* :omits Sin&Cos[5*Pi/24] *)
$First5SinCosPiOn30Basis = {1, Sin[\[Pi]/30], Cos[\[Pi]/30], Sin[\[Pi]/15], Cos[\[Pi]/15]};
$First5SinCosPiOn36Basis = {1, Sin[\[Pi]/36], Cos[\[Pi]/36], Sin[\[Pi]/18], Cos[\[Pi]/18]};
$First5SinCosPiOn40Basis = {1, Sin[\[Pi]/40], Cos[\[Pi]/40], Sin[\[Pi]/20], Cos[\[Pi]/20]};
$First5SinCosPiOn45Basis = {1, Sin[\[Pi]/45], Cos[\[Pi]/45], Sin[2\[Pi]/45], Cos[2\[Pi]/45]};
$First5SinCosPiOn60Basis = {1, Sin[\[Pi]/60], Cos[\[Pi]/60], Sin[\[Pi]/30], Cos[\[Pi]/30]};
$First5SinCosPiOn72Basis = {1, Sin[\[Pi]/72], Cos[\[Pi]/72], Sin[\[Pi]/36], Cos[\[Pi]/36]};
$First5SinCosPiOn90Basis = {1, Sin[\[Pi]/90], Cos[\[Pi]/90], Sin[\[Pi]/45], Cos[\[Pi]/45]};
$First5SinCosPiOn120Basis = {1, Sin[\[Pi]/120], Cos[\[Pi]/120], Sin[\[Pi]/60], Cos[\[Pi]/60]};
$First5SinCosPiOn180Basis = {1, Sin[\[Pi]/180], Cos[\[Pi]/180], Sin[\[Pi]/90], Cos[\[Pi]/90]};
$First5SinCosPiOn360Basis = {1, Sin[\[Pi]/360], Cos[\[Pi]/360], Sin[\[Pi]/180], Cos[\[Pi]/180]};

$First3SinCosPiOn11Basis = Take [$SinCosPiOn11Basis, 3];
$First3SinCosPiOn13Basis = Take [$SinCosPiOn13Basis, 3];
$First3SinCosPiOn14Basis = Take [$SinCosPiOn14Basis, 3];
$First3SinCosPiOn15Basis = Take [$SinCosPiOn15Basis, 3];
$First3SinCosPiOn16Basis = Take [$SinCosPiOn16Basis, 3];
$First3SinCosPiOn17Basis = Take [$SinCosPiOn17Basis, 3];
$First3SinCosPiOn20Basis = Take [$SinCosPiOn20Basis, 3];
$First3SinCosPiOn24Basis = Take [$SinCosPiOn24Basis, 3];
$First3SinCosPiOn30Basis = Take [$First5SinCosPiOn30Basis, 3];
$First3SinCosPiOn36Basis = Take [$First5SinCosPiOn36Basis, 3];
$First3SinCosPiOn40Basis = Take [$First5SinCosPiOn40Basis, 3];
$First3SinCosPiOn45Basis = Take [$First5SinCosPiOn45Basis, 3];
$First3SinCosPiOn60Basis = Take [$First5SinCosPiOn60Basis, 3];
$First3SinCosPiOn72Basis = Take [$First5SinCosPiOn72Basis, 3];
$First3SinCosPiOn90Basis = Take [$First5SinCosPiOn90Basis, 3];
$First3SinCosPiOn120Basis = Take [$First5SinCosPiOn120Basis, 3];
$First3SinCosPiOn180Basis = Take [$First5SinCosPiOn180Basis, 3];
$First3SinCosPiOn360Basis = Take [$First5SinCosPiOn360Basis, 3];

$SinCosTasks = {
  MakeTryLinearCombinationTimesMultiplier [TrigFamily,  4, $SinCosPiOn7Basis],
  MakeTryLinearCombinationTimesMultiplier [TrigFamily, 30, $SinCosPiOn9Basis],
  MakeTryLinearCombinationTimesMultiplier [TrigFamily,  3, $SinCosPiOn11Basis],
  MakeTryLinearCombinationTimesMultiplier [TrigFamily,  2, $SinCosPiOn13Basis],
  MakeTryLinearCombinationTimesMultiplier [TrigFamily,  9, $SinCosPiOn14Basis],
  MakeTryLinearCombinationTimesMultiplier [TrigFamily, 20, $SinCosPiOn15Basis],
  MakeTryLinearCombinationTimesMultiplier [TrigFamily, 20, $SinCosPiOn16Basis],
  MakeTryLinearCombinationTimesMultiplier [TrigFamily,  1, $SinCosPiOn17Basis],
  MakeTryLinearCombinationTimesMultiplier [TrigFamily, 17, $SinCosPiOn20Basis],
  MakeTryLinearCombinationTimesMultiplier [TrigFamily, 17, $SinCosPiOn24Basis],

  MakeTryLinearCombinationTimesMultiplier [TrigFamily, 16, $First5SinCosPiOn30Basis],
  MakeTryLinearCombinationTimesMultiplier [TrigFamily, 15, $First5SinCosPiOn36Basis],
  MakeTryLinearCombinationTimesMultiplier [TrigFamily, 10, $First5SinCosPiOn40Basis],
  MakeTryLinearCombinationTimesMultiplier [TrigFamily, 15, $First5SinCosPiOn45Basis],
  MakeTryLinearCombinationTimesMultiplier [TrigFamily, 15, $First5SinCosPiOn60Basis],
  MakeTryLinearCombinationTimesMultiplier [TrigFamily, 15, $First5SinCosPiOn72Basis],
  MakeTryLinearCombinationTimesMultiplier [TrigFamily, 14, $First5SinCosPiOn90Basis],
  MakeTryLinearCombinationTimesMultiplier [TrigFamily, 13, $First5SinCosPiOn120Basis],
  MakeTryLinearCombinationTimesMultiplier [TrigFamily, 10, $First5SinCosPiOn180Basis],
  MakeTryLinearCombinationTimesMultiplier [TrigFamily,  9, $First5SinCosPiOn360Basis],

  MakeTryLinFracComboTimesMultiplier [TrigFamily,  7, $OneSin1Cos1Sin2Cos2Basis, $OneSin1Cos1Sin2Cos2Basis],

  MakeTryLinFracComboTimesMultiplier [TrigFamily, 10, $SinCosPiOn7Basis, $SinCosPiOn7Basis],
  MakeTryLinFracComboTimesMultiplier [TrigFamily, 20, $SinCosPiOn9Basis, $SinCosPiOn9Basis],
  MakeTryLinFracComboTimesMultiplier [TrigFamily,  5, $First3SinCosPiOn11Basis, $First3SinCosPiOn11Basis],
  MakeTryLinFracComboTimesMultiplier [TrigFamily,  4, $First3SinCosPiOn13Basis, $First3SinCosPiOn13Basis],
  MakeTryLinFracComboTimesMultiplier [TrigFamily,  5, $First3SinCosPiOn14Basis, $First3SinCosPiOn14Basis],
  MakeTryLinFracComboTimesMultiplier [TrigFamily,  6, $First3SinCosPiOn15Basis, $First3SinCosPiOn15Basis],
  MakeTryLinFracComboTimesMultiplier [TrigFamily,  6, $First3SinCosPiOn16Basis, $First3SinCosPiOn16Basis],
  MakeTryLinFracComboTimesMultiplier [TrigFamily,  3, $First3SinCosPiOn17Basis, $First3SinCosPiOn17Basis],
  MakeTryLinFracComboTimesMultiplier [TrigFamily,  5, $First3SinCosPiOn20Basis, $First3SinCosPiOn20Basis],
  MakeTryLinFracComboTimesMultiplier [TrigFamily,  5, $First3SinCosPiOn24Basis, $First3SinCosPiOn24Basis],
  MakeTryLinFracComboTimesMultiplier [TrigFamily,  7, $First3SinCosPiOn30Basis, $First3SinCosPiOn30Basis],
  MakeTryLinFracComboTimesMultiplier [TrigFamily,  6, $First3SinCosPiOn36Basis, $First3SinCosPiOn36Basis],
  MakeTryLinFracComboTimesMultiplier [TrigFamily,  4, $First3SinCosPiOn40Basis, $First3SinCosPiOn40Basis],
  MakeTryLinFracComboTimesMultiplier [TrigFamily,  4, $First3SinCosPiOn45Basis, $First3SinCosPiOn45Basis],
  MakeTryLinFracComboTimesMultiplier [TrigFamily,  4, $First3SinCosPiOn60Basis, $First3SinCosPiOn60Basis],
  MakeTryLinFracComboTimesMultiplier [TrigFamily,  3, $First3SinCosPiOn72Basis, $First3SinCosPiOn72Basis],
  MakeTryLinFracComboTimesMultiplier [TrigFamily,  3, $First3SinCosPiOn90Basis, $First3SinCosPiOn90Basis],
  MakeTryLinFracComboTimesMultiplier [TrigFamily,  3, $First3SinCosPiOn120Basis, $First3SinCosPiOn120Basis],
  MakeTryLinFracComboTimesMultiplier [TrigFamily,  2, $First3SinCosPiOn180Basis, $First3SinCosPiOn180Basis],
  MakeTryLinFracComboTimesMultiplier [TrigFamily,  2, $First3SinCosPiOn360Basis, $First3SinCosPiOn360Basis],

  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [TrigFamily, 100, 2.06, TryPlusOrMinusSinOrCosTimesN, 1, Pi],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [TrigFamily,  20, 2.06, TryPlusOrMinusSinOrCosTimesN],

  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [TrigFamily, 100, 2.16, TryPlusOrMinusSinOrCosPlus2n, 1, Pi],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [TrigFamily,  20, 2.16, TryPlusOrMinusSinOrCosPlus2n]
};


$TrigLinFracBasisPair1 = {$SinCosPiOn7Basis, $SinCosPiOn7Basis};
$TrigLinFracBasisPair2 = {$SinCosPiOn9Basis, $SinCosPiOn9Basis};
$TrigLinFracBasisPair3 = {$First3SinCosPiOn11Basis, $First3SinCosPiOn11Basis};
$TrigLinFracBasisPair4 = {$First3SinCosPiOn13Basis, $First3SinCosPiOn13Basis};
$TrigLinFracBasisPair5 = {$First3SinCosPiOn14Basis, $First3SinCosPiOn14Basis};
$TrigLinFracBasisPair6 = {$First3SinCosPiOn15Basis, $First3SinCosPiOn15Basis};
$TrigLinFracBasisPair7 = {$First3SinCosPiOn16Basis, $First3SinCosPiOn16Basis};
$TrigLinFracBasisPair8 = {$First3SinCosPiOn17Basis, $First3SinCosPiOn17Basis};
$TrigLinFracBasisPair9 = {$First3SinCosPiOn20Basis, $First3SinCosPiOn20Basis};
$TrigLinFracBasisPair10 = {$First3SinCosPiOn24Basis, $First3SinCosPiOn24Basis};
$TrigLinFracBasisPair11 = {$First3SinCosPiOn30Basis, $First3SinCosPiOn30Basis};
$TrigLinFracBasisPair12 = {$First3SinCosPiOn36Basis, $First3SinCosPiOn36Basis};
$TrigLinFracBasisPair13 = {$First3SinCosPiOn40Basis, $First3SinCosPiOn40Basis};
$TrigLinFracBasisPair14 = {$First3SinCosPiOn45Basis, $First3SinCosPiOn45Basis};
$TrigLinFracBasisPair15 = {$First3SinCosPiOn60Basis, $First3SinCosPiOn60Basis};
$TrigLinFracBasisPair16 = {$First3SinCosPiOn72Basis, $First3SinCosPiOn72Basis};
$TrigLinFracBasisPair17 = {$First3SinCosPiOn90Basis, $First3SinCosPiOn90Basis};
$TrigLinFracBasisPair18 = {$First3SinCosPiOn120Basis, $First3SinCosPiOn120Basis};
$TrigLinFracBasisPair19 = {$First3SinCosPiOn180Basis, $First3SinCosPiOn180Basis};
$TrigLinFracBasisPair20 = {$First3SinCosPiOn360Basis, $First3SinCosPiOn360Basis};


$CscSecTasks = {
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [TrigFamily, 80, 3.90, TrySecOrCscDividedByN, 1, Pi],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [TrigFamily, 16, 3.90, TrySecOrCscDividedByN],

  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [TrigFamily, 80, 3.95, TryPlusOrMinusSecOrCscMaybeMinus1, 1, Pi],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [TrigFamily, 16, 3.99, TryPlusOrMinusSecOrCscMaybeMinus1]
  };


$MixedTrigOn15Basis = {1, Sin[Pi/15], Cos[Pi/15], Tan[Pi/15], Csc[Pi/15], Sec[Pi/15], Cot[Pi/15]};
$MixedTrigOn16Basis = {1, Sin[Pi/16], Cos[Pi/16], Tan[Pi/16], Csc[Pi/16], Sec[Pi/16], Cot[Pi/16]};
$MixedTrigOn18Basis = {1, Sin[Pi/18], Cos[Pi/18], Tan[Pi/18], Csc[Pi/18], Sec[Pi/18], Cot[Pi/18]};
$MixedTrigOn20Basis = {1, Sin[Pi/20], Cos[Pi/20], Tan[Pi/20], Csc[Pi/20], Sec[Pi/20], Cot[Pi/20]};
$MixedTrigOn24Basis = {1, Sin[Pi/24], Cos[Pi/24], Tan[Pi/24], Csc[Pi/24], Sec[Pi/24], Cot[Pi/24]};
$MixedTrigOn30Basis = {1, Sin[Pi/30], Cos[Pi/30], Tan[Pi/30], Csc[Pi/30], Sec[Pi/30], Cot[Pi/30]};
$MixedTrigOn36Basis = {1, Sin[Pi/36], Cos[Pi/36], Tan[Pi/36], Csc[Pi/36], Sec[Pi/36], Cot[Pi/36]};
$MixedTrigOn40Basis = {1, Sin[Pi/40], Cos[Pi/40], Tan[Pi/40], Csc[Pi/40], Sec[Pi/40], Cot[Pi/40]};
$MixedTrigOn45Basis = {1, Sin[Pi/45], Cos[Pi/45], Tan[Pi/45], Csc[Pi/45], Sec[Pi/45], Cot[Pi/45]};
$MixedTrigOn60Basis = {1, Sin[Pi/60], Cos[Pi/60], Tan[Pi/60], Csc[Pi/60], Sec[Pi/60], Cot[Pi/60]};
$MixedTrigOn72Basis = {1, Sin[Pi/72], Cos[Pi/72], Tan[Pi/72], Csc[Pi/72], Sec[Pi/72], Cot[Pi/72]};
$MixedTrigOn90Basis = {1, Sin[Pi/90], Cos[Pi/90], Tan[Pi/90], Csc[Pi/90], Sec[Pi/90], Cot[Pi/90]};
$MixedTrigOn120Basis = {1, Sin[Pi/120], Cos[Pi/120], Tan[Pi/120], Csc[Pi/120], Sec[Pi/120], Cot[Pi/120]};
$MixedTrigOn180Basis = {1, Sin[Pi/180], Cos[Pi/180], Tan[Pi/180], Csc[Pi/180], Sec[Pi/180], Cot[Pi/180]};
$MixedTrigOn360Basis = {1, Sin[Pi/360], Cos[Pi/360], Tan[Pi/360], Csc[Pi/360], Sec[Pi/360], Cot[Pi/360]};


$TrigBasisPairsForFromRootDeg6 = {
  {$SinCosPiOn7Basis, $SinCosPiOn7Basis},
  {$SinCosPiOn9Basis, $SinCosPiOn9Basis},
  {$SinCosPiOn14Basis, $First3SinCosPiOn14Basis}};

(*$ListOfLinCombFromRootDeg8 = {$SinCosPiOn15Basis, $SinCosPiOn16Basis, $SinCosPiOn20Basis,
                              $SinCosPiOn24Basis, $First5SinCosPiOn30Basis};
$ListOfLinFracCombFromRootDeg8 = {$First3SinCosPiOn15Basis, $First3SinCosPiOn16Basis, $First3SinCosPiOn20Basis,
                                  $First3SinCosPiOn24Basis, $First3SinCosPiOn30Basis};*)
$TrigBasisPairsForFromRootDeg8 = {
  {$SinCosPiOn15Basis, $First3SinCosPiOn15Basis},
  {$SinCosPiOn16Basis, $First3SinCosPiOn16Basis},
  {$SinCosPiOn20Basis, $First3SinCosPiOn20Basis}, (* :Cannot get $SinCosPiOn20Basis nor any useful subset to work. *)
  {$SinCosPiOn24Basis, $First3SinCosPiOn24Basis},
  {$First5SinCosPiOn30Basis, $First3SinCosPiOn30Basis}};

$TrigBasisPairsForFromRootDeg10 = {
  {$SinCosPiOn11Basis, $First3SinCosPiOn11Basis}};

(*$ListOfLinCombFromRootDeg12 = {$SinCosPiOn13Basis, $First5SinCosPiOn36Basis};
$ListOfLinFracCombFromRootDeg12 = {$First3SinCosPiOn13Basis, $First3SinCosPiOn36Basis};*)
$TrigBasisPairsForFromRootDeg12 = {
  {$SinCosPiOn13Basis, $First3SinCosPiOn13Basis},
  {$First5SinCosPiOn36Basis, $First3SinCosPiOn36Basis}};

(*$ListOfLinCombFromRootDeg16 = {$SinCosPiOn17Basis, $First5SinCosPiOn40Basis, $First5SinCosPiOn60Basis};
$ListOfLinFracCombFromRootDeg16 = {$First3SinCosPiOn17Basis, $First3SinCosPiOn40Basis, $First3SinCosPiOn60Basis};*)
$TrigBasisPairsForFromRootDeg16 = {
  {$SinCosPiOn17Basis, $First3SinCosPiOn17Basis},
  {$First5SinCosPiOn40Basis, $First3SinCosPiOn40Basis},
  {$First5SinCosPiOn60Basis, $First3SinCosPiOn60Basis}};

(*$ListOfLinCombFromRootDeg24 = {$First5SinCosPiOn45Basis, $First5SinCosPiOn72Basis, $First5SinCosPiOn90Basis};
$ListOfLinFracCombFromRootDeg16 = {$First3SinCosPiOn45Basis, $First3SinCosPiOn72Basis, $First3SinCosPiOn90Basis};*)
$TrigBasisPairsForFromRootDeg24 = {
  {$First5SinCosPiOn45Basis, $First3SinCosPiOn45Basis},
  {$First5SinCosPiOn72Basis, $First3SinCosPiOn72Basis},
  {$First5SinCosPiOn90Basis, $First3SinCosPiOn90Basis}};

$TrigBasisPairsForFromRootDeg32 = {
  {$First5SinCosPiOn120Basis, $First3SinCosPiOn120Basis}};

$TrigBasisPairsForFromRootDeg48 = {
  {$First5SinCosPiOn180Basis, $First3SinCosPiOn180Basis}};

$TrigBasisPairsForFromRootDeg96 = {
  {$First5SinCosPiOn360Basis, $First3SinCosPiOn360Basis}};


$HaversineTasks = {
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [TrigFamily, 90, 1.84, TryHaversineTimesN, 1, Pi],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [TrigFamily, 18, 1.84, TryHaversineTimesN],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [TrigFamily, 90, 1.94, TryPlusOrMinusHaversinePlusN, 1, Pi],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [TrigFamily, 18, 1.94, TryPlusOrMinusHaversinePlusN]
};


$MixedTrigTasks = {
 MakeTryLinearCombinationTimesMultiplier [TrigFamily, 5.0, $MixedTrigOn15Basis],
 MakeTryLinearCombinationTimesMultiplier [TrigFamily, 5.0, $MixedTrigOn18Basis],
 MakeTryLinearCombinationTimesMultiplier [TrigFamily, 5.0, $MixedTrigOn20Basis],
 MakeTryLinearCombinationTimesMultiplier [TrigFamily, 5.0, $MixedTrigOn24Basis],
 MakeTryLinearCombinationTimesMultiplier [TrigFamily, 5.0, $MixedTrigOn30Basis],
 MakeTryLinearCombinationTimesMultiplier [TrigFamily, 5.0, $MixedTrigOn36Basis],
 MakeTryLinearCombinationTimesMultiplier [TrigFamily, 5.0, $MixedTrigOn40Basis],
 MakeTryLinearCombinationTimesMultiplier [TrigFamily, 5.0, $MixedTrigOn45Basis],
 MakeTryLinearCombinationTimesMultiplier [TrigFamily, 5.0, $MixedTrigOn60Basis],
 MakeTryLinearCombinationTimesMultiplier [TrigFamily, 5.0, $MixedTrigOn72Basis],
 MakeTryLinearCombinationTimesMultiplier [TrigFamily, 5.0, $MixedTrigOn90Basis],
 MakeTryLinearCombinationTimesMultiplier [TrigFamily, 5.0, $MixedTrigOn120Basis],
 MakeTryLinearCombinationTimesMultiplier [TrigFamily, 5.0, $MixedTrigOn180Basis],
 MakeTryLinearCombinationTimesMultiplier [TrigFamily, 5.0, $MixedTrigOn360Basis]
};


$TrigFamilyTasks = Join [$TanCotTasks, $SinCosTasks, $CscSecTasks, $HaversineTasks, $MixedTrigTasks];


$LinCombTrigFamilyBases = {$SinCosPiOn7Basis, $SinCosPiOn9Basis, $SinCosPiOn11Basis, $SinCosPiOn13Basis,
  $SinCosPiOn14Basis, $SinCosPiOn15Basis, $SinCosPiOn16Basis, $SinCosPiOn17Basis, $SinCosPiOn20Basis,
  $SinCosPiOn24Basis, $First5SinCosPiOn30Basis, $First5SinCosPiOn36Basis, $First5SinCosPiOn40Basis,
  $First5SinCosPiOn45Basis, $First5SinCosPiOn60Basis, $First5SinCosPiOn72Basis, $First5SinCosPiOn90Basis,
  $First5SinCosPiOn120Basis, $First5SinCosPiOn180Basis, $First5SinCosPiOn360Basis};


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseTrigFamilyTasks*)


$LinCombArcTanBasis1 = {ArcTan[Sqrt[2]]*Sqrt[2], Sqrt[2]*Pi, Pi};
$LinCombArcTanBasis2 = {ArcTan[Sqrt[2]], Sqrt[2], Pi, 1};
$LinCombArcTanBasis3 = {ArcTan[2], Log[2], Log[3], Log[5], Pi, 1};

$InverseTrigFamilyTasks = {
 MakeTryRationalTimesMultiplier [InverseTrigFamily, 15.0, ArcTan[2]],
 MakeTryRationalTimesMultiplier [InverseTrigFamily, 12.0, ArcTan[Sqrt[2]]],

 MakeTryLinearCombinationTimesMultiplier [InverseTrigFamily, 15.0, {Pi, ArcTan[2]}],
 MakeTryLinearCombinationTimesMultiplier [InverseTrigFamily, 12.0, {Pi, ArcTan[Sqrt[2]]}],
 MakeTryLinearCombinationTimesMultiplier [InverseTrigFamily, 10.0, $LinCombArcTanBasis1],
 MakeTryLinearCombinationTimesMultiplier [InverseTrigFamily, 20.0, $LinCombArcTanBasis2],
 MakeTryLinearCombinationTimesMultiplier [InverseTrigFamily, 50.0, $LinCombArcTanBasis3],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 60.0, 2.11, TryArcTanOrArcCotTimesN],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 10.0, 2.11, TryArcTanOrArcCotTimesN, Pi],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 59.0, 3.11, TryArcTanOrArcCotTimesN, 1, 1, 2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 10.0, 3.11, TryArcTanOrArcCotTimesN, Pi, 1, 2],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 60.0, 2.41, TryArcTanOrArcCotPlusNPi],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 10.0, 2.41, TryArcTanOrArcCotPlusNPi, Pi],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 59.0, 3.41, TryArcTanOrArcCotPlusNPi, 1, 1, 2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 10.0, 3.41, TryArcTanOrArcCotPlusNPi, Pi, 1, 2],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 60.0, 2.11, TryArcSinOrArcCscTimesN],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 10.0, 2.11, TryArcSinOrArcCscTimesN, Pi],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 30.0, 2.11, TryArcSinOrArcCscTimesN, 1/2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 59.0, 3.11, TryArcSinOrArcCscTimesN, 1, 1, 2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily,  8.0, 3.11, TryArcSinOrArcCscTimesN, Pi, 1, 2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 28.0, 3.11, TryArcSinOrArcCscTimesN, 1/2, 1, 2],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 60.0, 2.41, TryArcSinOrArcCscPlusNPi],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 10.0, 2.41, TryArcSinOrArcCscPlusNPi, Pi],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 30.0, 2.41, TryArcSinOrArcCscPlusNPi, 1/2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 59.0, 3.41, TryArcSinOrArcCscPlusNPi, 1, 1, 2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily,  8.0, 3.41, TryArcSinOrArcCscPlusNPi, Pi, 1, 2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 28.0, 3.41, TryArcSinOrArcCscPlusNPi, 1/2, 1, 2],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 60.0, 2.06, TryArcCosOrArcSecTimesN],
 (*MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 40.0, 2.06, TryArcCosOrArcSecTimesN, -1],*)
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 10.0, 2.06, TryArcCosOrArcSecTimesN, Pi],
(* MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily,  4.0, 2.06, TryArcCosOrArcSecTimesN, -Pi],*)
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 59.0, 3.06, TryArcCosOrArcSecTimesN, 1, 1, 2],
(* MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 39.0, 2.06, TryArcCosOrArcSecTimesN, -1, 1, 2],*)
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily,  8.0, 3.06, TryArcCosOrArcSecTimesN, Pi, 1, 2],
(* MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily,  2.0, 2.06, TryArcCosOrArcSecTimesN, -Pi, 1, 2],*)

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 60.0, 2.46, TryArcCosOrArcSecPlusNPi],
(* MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 40.0, 2.06, TryArcCosOrArcSecPlusNPi, -1],*)
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 10.0, 2.46, TryArcCosOrArcSecPlusNPi, Pi],
(* MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily,  4.0, 2.06, TryArcCosOrArcSecPlusNPi, -Pi],*)
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 59.0, 3.46, TryArcCosOrArcSecPlusNPi, 1, 1, 2],
(* MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 39.0, 2.06, TryArcCosOrArcSecPlusNPi, -1, 1, 2],*)
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily,  8.0, 3.46, TryArcCosOrArcSecPlusNPi, Pi, 1, 2]
(* MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily,  2.0, 2.06, TryArcCosOrArcSecPlusNPi, -Pi, 1, 2],*)

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 50.0, 3.85, TryPlusOrMinusInverseHaversineTimesN],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 50.0, 3.85, TryPlusOrMinusInverseHaversineTimesN, 1, 1, 2],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 50.0, 3.95, TryPlusOrMinusInverseHaversinePlusNPi],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 50.0, 3.95, TryPlusOrMinusInverseHaversinePlusNPi, 1, 1, 2],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 30.0, 4.07, TryPlusOrMinusGudermannianTimesN],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [InverseTrigFamily, 30.0, 4.27, TryPlusOrMinusGudermannianPlusNpi]
};


$LinCombInverseTrigBases = {$LinCombArcTanBasis1, $LinCombArcTanBasis2, $LinCombArcTanBasis3};


(* ::Subsubsubsubsection::Closed:: *)
(*$RootTasks*)


(* Make sure that for a given multiplier, the alleged counts strictly decrease with degree.
   This error-prone constraint will be removed in a later version: *)

$RootTasks = {               (* Family, ExampleCount, Multiplier: *)
                                          (* Family, ExampleCount, Degree, Multiplier: *)
 MakeTryReciprocalPowerOfRootApproximant [None, 800.0, 3],
 MakeTryReciprocalPowerOfRootApproximant [None,  81.0, 3, Pi],
 MakeTryReciprocalPowerOfRootApproximant [None, 799.0, 4], (* Actually more common than degree 3, but...*)
 MakeTryReciprocalPowerOfRootApproximant [None,  80.0, 4, Pi],
 MakeTryReciprocalPowerOfRootApproximant [None, 300.0, 5],
 MakeTryReciprocalPowerOfRootApproximant [None, 299.0, 6],
 MakeTryReciprocalPowerOfRootApproximant [None, 200.0, 7],
 MakeTryReciprocalPowerOfRootApproximant [None, 199.0, 8],
 MakeTryReciprocalPowerOfRootApproximant [None, 198.0, 9]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$AllBasicFunctionsTasks and $DefaultBasicFunctionsTasks*)


$AllBasicFunctionsTasks = {$ExpFamilyTasks, $LogFamilyTasks, $TrigFamilyTasks, $InverseTrigFamilyTasks, $RootTasks};
$FlattenedAllBasicFunctionTasks = Flatten [$AllBasicFunctionsTasks, 1];

$DefaultBasicFunctionsTasks = $AllBasicFunctionsTasks;
$FlattenedDefaultBasicFunctionsTasks = Flatten [$DefaultBasicFunctionsTasks, 1];


(* ::Subsubsubsection::Closed:: *)
(*Elliptic family tasks:*)


(* ::Subsubsubsubsection::Closed:: *)
(*$EllipticKTasks*)


$EllipticKTasks = {MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 10, 2.84, TryPlusOrMinusEllipticK]};


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseEllipticKTasks*)


$InverseEllipticKTasks = {
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 2,  2.84, TryInvEllipticKPlusN],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 2,  2.84, TryInvEllipticKPlusN, -1],

  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 2,  2.84, TryInvEllipticKTimesN],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 2,  2.84, TryInvEllipticKTimesN, -1]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$EllipticETasks*)


$EllipticETasks = {
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 10, 3.18, TryPlusOrMinusEllipticEOnN],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 10, 3.38, TryPlusOrMinusEllipticEMaybeMinus1]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseEllipticETasks*)


$InverseEllipticETasks = {
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 10, 3.18, TryInvEllipticEPlusN],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 10, 3.18, TryInvEllipticEPlusN, -1],

  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 10, 3.18, TryInvEllipticETimesN],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 10, 3.18, TryInvEllipticETimesN, -1]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$ArithmeticGeometricMean1Tasks*)


$ArithmeticGeometricMean1Tasks = {
 (*MakeTryRationalTimesMultiplier [{ArithmeticGeometricMean},  7.0, ArithmeticGeometricMean [1, Sqrt[2]]],*)
 MakeTryLinearCombinationTimesMultiplier [None, 7.0, {1, ArithmeticGeometricMean [1, Sqrt[2]]}],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 10, 2.93,
   TryPlusOrMinusArithmeticGeometricMean1]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseArithmeticGeometricMean1Tasks*)


$InverseArithmeticGeometricMean1Tasks = {
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 2, 2.93, TryPlusOrMinusInvArithmeticGeometricMean1]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$EllipticTheta2ZeroTasks*)


$EllipticTheta2ZeroTasks = {
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 10, 2.81, TryPlusOrMinusEllipticTheta2Zero]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseEllipticTheta2ZeroTasks*)


$InverseEllipticTheta2ZeroTasks = {
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 2, 2.81, TryPlusOrMinusInvEllipticTheta2ZeroTimesN],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 1.8, 2.81, TryPlusOrMinusInvEllipticTheta2ZeroPlusN]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$EllipticTheta3ZeroTasks*)


$EllipticTheta3ZeroTasks = {
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 10, 2.81, TryPlusOrMinusEllipticTheta3Zero]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseEllipticTheta3ZeroTasks*)


$InverseEllipticTheta3ZeroTasks = {
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 10, 2.75, TryInvEllipticTheta3ZeroTimesN],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 10, 2.75, TryInvEllipticTheta3ZeroTimesN, -1],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 10, 2.75, TryInvEllipticTheta3ZeroPlusN],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 10, 2.75, TryInvEllipticTheta3ZeroPlusN, -1]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$EllipticNomeQTasks*)


$EllipticNomeQTasks = {
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 15, 2.89, TryEllipticNomeQPlus2N],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  9, 2.89, TryEllipticNomeQPlus2N, -1]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseEllipticNomeQTasks*)


$InverseEllipticNomeQTasks = {
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 8, 2.51, TryInvEllipticNomeQPlusN],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 4, 2.51, TryInvEllipticNomeQPlusN, -1],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 8, 2.51, TryInvEllipticNomeQTimesN],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 4, 2.51, TryInvEllipticNomeQTimesN, -1]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$AllEllipticFamilyTasks and $DefaultEllipticFamilyTasks*)


$EllipticFamilyTasks = {$EllipticKTasks, $EllipticETasks, $ArithmeticGeometricMean1Tasks,
  $EllipticTheta2ZeroTasks, $EllipticTheta3ZeroTasks, $EllipticNomeQTasks};


$InvEllipticFamilyTasks = {$InverseEllipticKTasks, $InverseEllipticETasks, $InverseArithmeticGeometricMean1Tasks,
  $InverseEllipticTheta2ZeroTasks, $InverseEllipticTheta3ZeroTasks, $InverseEllipticNomeQTasks};


$AllEllipticFamilyTasks  = Join [$EllipticFamilyTasks, $InvEllipticFamilyTasks];

$FlattenedAllEllipticFamilyTasks = Flatten [$AllEllipticFamilyTasks, 1];

$DefaultEllipticFamilyTasks = {$EllipticKTasks, $InverseEllipticKTasks, $EllipticETasks, $InverseEllipticETasks,
  $EllipticTheta2ZeroTasks, $InverseEllipticTheta2ZeroTasks, $EllipticTheta3ZeroTasks, $InverseEllipticTheta3ZeroTasks};

$FlattenedDefaultEllipticFamilyTasks = Flatten [$DefaultEllipticFamilyTasks, 1];


(* ::Subsubsubsection::Closed:: *)
(*Factorial family tasks:*)


(* ::Subsubsubsubsection::Closed:: *)
(*$GammaTasks*)


  (* The result of TryPlusOrMinusGammaOnN[...] is expressed as an unexpanded Factorial if that is more concise.
     Therefore there is no separate treatment of Factorial, but its family is named the Factorial Family
       because more people know about factorials than about the Gamma function. *)

$GammaConstants = {GammaInfimumOrSupremumOrdinate[1], Gamma[1/3], Gamma[1/4], Gamma[1/5], Gamma[2/5],
  Gamma[1/6], Gamma[1/8], Gamma[3/8], Gamma[1/12], Gamma[5/12], Gamma[1/24], Gamma[5/24], Gamma[7/24], Gamma[11/24]};
$GammaConstants = Flatten[Map[{#^-1, #}&, $GammaConstants]];

$GammaTasks = Join [  (* Instead do only MakeTryLinearCombinationTimesMultiplier ??: *)
 (*MapIndexed [MakeTryRationalTimesMultiplier [FactorialFamily, 6.0*(2.0 - First[#2]/Length[$GammaConstants]), #1] &, $GammaConstants],*)
 MapIndexed [MakeTryLinearCombinationTimesMultiplier [FactorialFamily, 6.0*(2.0 - First[#2]/Length[$GammaConstants]),
             {1, #1}] &, $GammaConstants],

 {MakeTryProduct [FactorialFamily, 25.0, {Log[Gamma[1/4]], EulerGamma, Pi, Log[Pi], Log[2], Log[3], Log[5], Log[7]}],
                                       (* Eg: 210*E^(EulerGamma+Pi)*Pi*Gamma[1/4] *)
  MakeTryProduct [FactorialFamily, 25.0, {Log[Gamma[1/4]], Log[Glaisher], Log[Pi], 1, Log[2]}],
                                       (* Eg: 2^*E*Glaisher*Pi*Gamma[1/4] *)
  MakeTryProduct [FactorialFamily, 25.0, {Log[Gamma[1/3]], Log[Pi], Log[2], Log[3], Log[5], Log[7]}], (* : Slow on Jolley 11*13*1801*Pi^8/(2^11*3^9*5*7*Sqrt[3]]) *)
                                       (* Eg: 210*Pi*Gamma[1/3] *)
  MakeTryProduct [FactorialFamily, 25.0, {Log[Gamma[1/6]], Log[Pi], Log[2], Log[3], Log[5], Log[7]}],
                                       (* Eg: 210*Pi*Gamma[1/6] *)
  MakeTryProduct [FactorialFamily, 25.0, {Log[Gamma[1/8]], Log[Gamma[3/8]], Log[Pi], Log[2], Log[3], Log[5], Log[7]}],
                                       (* Eg: 210*Pi*Gamma[1/8]*Gamma[3/8] *)
  MakeTryProduct [FactorialFamily, 25.0, {Log[Gamma[1/12]], Log[Pi], Log[2], Log[3], Log[5], Log[7]}],
                                       (* Eg: 210*Pi*Gamma[1/12] *)
  MakeTryProduct [FactorialFamily, 25.0, {Log[Gamma[1/24]], Log[Pi], Log[2], Log[3], Log[5], Log[7]}],
                                       (* Eg: 210*Pi*Gamma[1/24] *)

  MakeTryReciprocalOfAFunction [FactorialFamily, 70, 2.81, TryPlusOrMinusGammaOnN, 1, 1, 1, 2],
  MakeTryReciprocalOfAFunction [FactorialFamily, 70, 2.81, TryPlusOrMinusGammaOnN, 1, 1, 1, 1],

  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [FactorialFamily, 60, 2.81, TryPlusOrMinusGammaOnN, 1, 1, 1, 2],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [FactorialFamily, 50, 2.81, TryPlusOrMinusGammaOnN],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [FactorialFamily, 50, 2.81, TryPlusOrMinusGammaMaybeMinusMinOrdinate, 1, 1, 1, 2],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [FactorialFamily, 50, 2.81, TryPlusOrMinusGammaMaybeMinusMinOrdinate]
}];


GammaProductBasis1 = {Gamma[1/4], E^EulerGamma, E^\[Pi], \[Pi], 2, 3, 5, 7};
GammaProductBasis2 = {Gamma[1/4], Glaisher, \[Pi], E, 2};
GammaProductBasis3 = {Gamma[1/3], \[Pi], 2, 3, 5, 7};
GammaProductBasis4 = {Gamma[1/6], \[Pi], 2, 3, 5, 7};
GammaProductBasis5 = {Gamma[1/8], Gamma[3/8], \[Pi], 2, 3, 5, 7};
GammaProductBasis6 = {Gamma[1/12], \[Pi], 2, 3, 5, 7};
GammaProductBasis7 = {Gamma[1/24], \[Pi], 2, 3, 5, 7};
$DefaultGammaProductBases = {GammaProductBasis1, GammaProductBasis2, GammaProductBasis3,
  GammaProductBasis4, GammaProductBasis5, GammaProductBasis6, GammaProductBasis7};


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseGammaTasks*)


$MaxAllowedRealInverseGammaBranch = 2;
$MinAllowedRealInverseGammaBranch = 1;

$InverseGammaTasks = {
  MakeTryLinearCombinationTimesMultiplier [None, 10.0, {1, GammaInfimumOrSupremumAbscissa[1]}],

  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 30, 2.81, TryPlusOrMinusInvGammaBranch2OnN],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 30, 2.81, TryPlusOrMinusInvGammaBranch1TimesN],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 30, 2.81, TryPlusOrMinusInvGammaBranch1PlusNExtremumAbscissa1],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 30, 2.81, TryPlusOrMinusInvGammaBranch2MaybeMinusExtremumAbscissa1]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$LogGammaTasks*)


$LogGammaTasks = {
 MakeTryRationalTimesMultiplier [None, 10.0, LogGammaInfimumOrSupremumOrdinate[1]],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 60.0, 2.78, TryLogGammaTimesN],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 20.0, 2.78, TryLogGammaTimesN, -1],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 60.0, 2.78, TryLogGammaTimesN, 1, 1, 1, 2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 20.0, 2.78, TryLogGammaTimesN, -1, 1, 1, 2],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 20.0, 2.78, TryLogGammaMinusNTimesMinOrdinate],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 20.0, 2.78, TryLogGammaMinusNTimesMinOrdinate, -1],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 20.0, 2.78, TryLogGammaMinusNTimesMinOrdinate, 1, 1, 1, 2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 20.0, 2.78, TryLogGammaMinusNTimesMinOrdinate, -1, 1, 1, 2]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseLogGammaTasks*)


$MaxAllowedRealInverseLogGammaBranch = 2;
$MinAllowedRealInverseLogGammaBranch = 1;

$InverseLogGammaTasks = {
 MakeTryLinearCombinationTimesMultiplier [None, 10.0, {1, LogGammaInfimumOrSupremumAbscissa[1]}],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 10.0, 2.78, TryPlusOrMinusInvLogGammaBranch1PlusNMinAbscissa],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 10.0, 2.78, TryPlusOrMinusInvLogGammaBranch2MaybeMinusMinAbscissa]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$Factorial2Tasks*)


$Factorial2OrdinateConstants = {Factorial2InfimumOrSupremumOrdinate[2],
   Factorial2InfimumOrSupremumOrdinate[1], Factorial2InfimumOrSupremumOrdinate[0],
   Factorial2[1/2], Factorial2[3/2], Factorial2[1/3], Factorial2[2/3], Factorial2[4/3], Factorial2[5/3]};
$Factorial2OrdinateConstants = Flatten[Map[{#^-1, #}&, $Factorial2OrdinateConstants]];

$Factorial2Tasks = Join [
 (*MapIndexed [MakeTryRationalTimesMultiplier [FactorialFamily, 3.0*(2.0 - First[#2]/Length[$Factorial2OrdinateConstants]), #1] &, $Factorial2OrdinateConstants],*)
 MapIndexed [MakeTryLinearCombinationTimesMultiplier [FactorialFamily,
   3.0*(2.0 - First[#2]/Length[$Factorial2OrdinateConstants]), {1, #1}] &, $Factorial2OrdinateConstants],

 {MakeTryReciprocalOfAFunction [FactorialFamily, 20, 2.81, TryPlusOrMinusFactorial2TimesOrOnN, 1, 1, 1, 3],
  MakeTryReciprocalOfAFunction [FactorialFamily, 8, 2.81, TryPlusOrMinusFactorial2TimesOrOnN, 1, 1, 1, 2],
  MakeTryReciprocalOfAFunction [FactorialFamily, 15, 2.81, TryPlusOrMinusFactorial2TimesOrOnN],

  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [FactorialFamily, 15, 2.96, TryPlusOrMinusFactorial2TimesOrOnN, 1, 1, 1, 3],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [FactorialFamily,  4, 2.96, TryPlusOrMinusFactorial2TimesOrOnN, 1, 1, 1, 2],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [FactorialFamily, 10, 2.96, TryPlusOrMinusFactorial2TimesOrOnN] (* Also do reciprocals !! *)
}];


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseFactorial2Tasks*)


$MaxAllowedRealInverseFactorial2Branch = 3;
$MinAllowedRealInverseFactorial2Branch = 0;

$Factorial2AbscissaConstants = {Factorial2InfimumOrSupremumAbscissa[2],
   Factorial2InfimumOrSupremumAbscissa[1], Factorial2InfimumOrSupremumAbscissa[0]};
$Factorial2AbscissaConstants = Flatten[Map[{#^-1, #}&, $Factorial2AbscissaConstants]];

$InverseFactorial2Tasks = Join [
 (*MapIndexed [MakeTryRationalTimesMultiplier [{Factorial2},
   3.0*(2.0 - First[#2]/Length[$Factorial2AbscissaConstants]), #1] &, $Factorial2AbscissaConstants],*)
 MapIndexed [MakeTryLinearCombinationTimesMultiplier [
   None, 3.0*(2.0 - First[#2]/Length[$Factorial2AbscissaConstants]), {1, #1}] &, $Factorial2AbscissaConstants],

 {MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 7, 2.81, TryInvFactorial2],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 5, 2.81, TryInvFactorial2, -1]
}];


(* ::Subsubsubsubsection::Closed:: *)
(*$BarnesGTasks*)


$BarnesGOrdinateConstants = {BarnesGInfimumOrSupremumOrdinate[2],
    BarnesGInfimumOrSupremumOrdinate[1],  BarnesGInfimumOrSupremumOrdinate[0]};
$BarnesGOrdinateConstants = Flatten[Map[{#^-1, #}&, $BarnesGOrdinateConstants]];

$BarnesGTasks = Join [
 MapIndexed [MakeTryLinearCombinationTimesMultiplier [
   FactorialFamily, 1.0*(2.0 - First[#2]/Length[$BarnesGOrdinateConstants]), {1, #1}] &, $BarnesGOrdinateConstants],

 {MakeTryReciprocalOfAFunction [FactorialFamily,  8, 20.97, TryBarnesGTimesOrOnN,  1, 1, 1, 3],
  MakeTryReciprocalOfAFunction [FactorialFamily, 10, 20.97, TryBarnesGTimesOrOnN, -1, 1, 1, 3],
  MakeTryReciprocalOfAFunction [FactorialFamily,  7, 20.97, TryBarnesGTimesOrOnN],
  MakeTryReciprocalOfAFunction [FactorialFamily,  5, 20.97, TryBarnesGTimesOrOnN, -1],
  MakeTryReciprocalOfAFunction [FactorialFamily,  9, 20.97, TryBarnesGTimesOrOnN,  1, 1, 1, 2],
  MakeTryReciprocalOfAFunction [FactorialFamily,  8, 20.97, TryBarnesGTimesOrOnN, -1, 1, 1, 2],

  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [FactorialFamily,  8, 20.97, TryBarnesGTimesOrOnN, -1, 1, 1, 3],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [FactorialFamily, 10, 20.97, TryBarnesGTimesOrOnN, 1, 1, 1, 3],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [FactorialFamily,  7, 20.97, TryBarnesGTimesOrOnN, 1, 1, 1, 2],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [FactorialFamily,  5, 20.97, TryBarnesGTimesOrOnN, -1, 1, 1, 2],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [FactorialFamily,  9, 20.97, TryBarnesGTimesOrOnN],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [FactorialFamily,  8, 20.97, TryBarnesGTimesOrOnN, -1]
}];


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseBarnesGTasks*)


$MaxAllowedRealInverseBarnesGBranch = 3;
$MinAllowedRealInverseBarnesGBranch = 1;

$BarnesGAbscissaConstants = {BarnesGInfimumOrSupremumAbscissa[2],
    BarnesGInfimumOrSupremumAbscissa[1],  BarnesGInfimumOrSupremumAbscissa[0]};
$BarnesGAbscissaConstants = Flatten[Map[{#^-1, #}&, $BarnesGAbscissaConstants]];

$InverseBarnesGTasks = Join [
 (*MapIndexed [MakeTryRationalTimesMultiplier [{BarnesG}, 1.0*(2.0 - First[#2]/Length[$BarnesGOrdinateConstants]), #1] &, $BarnesGOrdinateConstants],*)
 MapIndexed [MakeTryLinearCombinationTimesMultiplier [
   None, 2.0*(2.0 - First[#2]/Length[$BarnesGAbscissaConstants]), {1, #1}] &, $BarnesGAbscissaConstants],

 {MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  8, 20.97, TryInvBarnesG],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  8, 20.97, TryInvBarnesG, -1]
}];


(* ::Subsubsubsubsection::Closed:: *)
(*$LogBarnesGTasks*)


$LogBarnesGTasks = {
 MakeTryRationalTimesMultiplier [None,  2.0, LogBarnesGInfimumOrSupremumOrdinate[2]],
 MakeTryRationalTimesMultiplier [None,  3.0, LogBarnesGInfimumOrSupremumOrdinate[1]],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 10.0, 11.82, TryLogBarnesGOnN],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  8.0, 11.82, TryLogBarnesGOnN, -1],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 10.0, 11.82, TryLogBarnesGOnN, 1, 1, 1, 2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  8.0, 11.82, TryLogBarnesGOnN, -1, 1, 1, 2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 12.0, 11.82, TryLogBarnesGOnN, 1, 1, 1, 3],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 10.0, 11.82, TryLogBarnesGOnN, -1, 1, 1, 3]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseLogBarnesGTasks*)


$MaxAllowedRealInverseLogBarnesGBranch = 3;
$MinAllowedRealInverseLogBarnesGBranch = 1;

$InverseLogBarnesGTasks = {
 MakeTryLinearCombinationTimesMultiplier [None,  3.0, {1, LogBarnesGInfimumOrSupremumAbscissa[1]}],
 MakeTryLinearCombinationTimesMultiplier [None,  2.0, {1, LogBarnesGInfimumOrSupremumAbscissa[2]}],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 4.0, 11.82, TryPlusOrMinusInvLogBarnesG]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$HyperfactorialTasks*)


$HyperfactorialConstants = {HyperfactorialInfimumOrSupremumOrdinate[1],  HyperfactorialInfimumOrSupremumOrdinate[0]};
$HyperfactorialConstants = Flatten[Map[{#^-1, #}&, $HyperfactorialConstants]];

$HyperfactorialTasks = Join [
 (*MapIndexed [MakeTryRationalTimesMultiplier [FactorialFamily, 1.0*(2.0 - First[#2]/Length[$HyperfactorialConstants]), #1] &, $HyperfactorialConstants],*)
 MapIndexed [MakeTryLinearCombinationTimesMultiplier [
  FactorialFamily, 1.0*(2.0 - First[#2]/Length[$HyperfactorialConstants]), {1, #1}] &, $HyperfactorialConstants],

 {MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [FactorialFamily, 10, 21.36, TryHyperfactorialTimesOrOnN, 1, 1, 1, 2],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [FactorialFamily,  8, 21.36, TryHyperfactorialTimesOrOnN],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [FactorialFamily,  4, 21.36, TryHyperfactorialTimesOrOnN, 1, 1, 1, 0]
}];


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseHyperfactorialTasks*)


$MaxAllowedRealInverseHyperfactorialBranch = 3;
$MinAllowedRealInverseHyperfactorialBranch = 1;

$InverseHyperfactorialAbscissaConstants = {HyperfactorialInfimumOrSupremumAbscissa[1],  HyperfactorialInfimumOrSupremumAbscissa[0]};
$InverseHyperfactorialAbscissaConstants = Flatten[Map[{#^-1, #}&, $InverseHyperfactorialAbscissaConstants]];

$InverseHyperfactorialTasks = 
  MapIndexed [MakeTryLinearCombinationTimesMultiplier [None,
    1.0*(2.0 - First[#2]/Length[$InverseHyperfactorialAbscissaConstants]), {1, #1}] &, $InverseHyperfactorialAbscissaConstants];

(* (* This model and the definition of TryInvHyperfactorial are commented out until TryInvHyperfactorial can be made faster: *)
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  3, 21.36, TryInvHyperfactorial],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  2, 21.36, TryInvHyperfactorial, -1]*)


(* ::Subsubsubsubsection::Closed:: *)
(*$PolyGammaTasks*)


$MaxAllowedPolyGammaIndex = 2;


$PolyGammaConstants = {PolyGammaZero [0, 1], PolyGammaZero [0, 0], PolyGammaZero [2, 0], PolyGamma [0, 1/3], PolyGamma [0, 2/3],
  PolyGamma [1, 1/3], PolyGamma [1, 2/3], PolyGamma [2, 1/3], PolyGamma [2, 2/3]};


$PolyGammaTasks = Join [
  MapIndexed [MakeTryLinearCombinationTimesMultiplier [FactorialFamily,
    6.0*(2.0 - First[#2]/Length[$PolyGammaConstants]), {1, #1}] &, $PolyGammaConstants],

 {MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [FactorialFamily, 30.0, 2.62, TryPolyGamma, 0],
  MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [FactorialFamily, 10.0, 2.62, TryPolyGamma, 0, -1]},

 Table [MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [FactorialFamily, 15.0/k, 2.62, TryPolyGamma, k],
                                 {k, $MaxAllowedPolyGammaIndex}]];


$DefaultPolyGammaTasks = {};


(* ::Subsubsubsubsection::Closed:: *)
(*$InversePolyGammaTasks*)


$MaxAllowedInversePolyGammaIndex = 2;

$InversePolyGammaTasks = {
 (*MakeTryRationalTimesMultiplier [{InversePolyGamma}, 20.0, PolyGammaZero[0,1]],*)
 MakeTryLinearCombinationTimesMultiplier [None, 10.0, {1, PolyGammaZero[0,1]}],

 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [None,  4.0, 2.62, TryPlusOrMinusInvPolyGamma, 0],
 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [None,  4.0, 2.62, TryPlusOrMinusInvPolyGamma, 0, -1],
 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [None,  3.0, 2.62, TryPlusOrMinusInvPolyGamma, 1],
 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [None,  2.0, 2.62, TryPlusOrMinusInvPolyGamma, 2]
};


$DefaultInversePolyGammaTasks = {};


(* ::Subsubsubsubsection::Closed:: *)
(*$FactorialFamilyTasks and $InvFactorialFamilyTasks, and *)


$FactorialFamilyTasks = {$GammaTasks, $LogGammaTasks, $Factorial2Tasks, $BarnesGTasks,
  $LogBarnesGTasks, $HyperfactorialTasks, $PolyGammaTasks};

$InvFactorialFamilyTasks = {$InverseGammaTasks,  $InverseLogGammaTasks, $InverseFactorial2Tasks,
  $InverseBarnesGTasks, $InverseLogBarnesGTasks, $InverseHyperfactorialTasks, $InversePolyGammaTasks};


(* ::Subsubsubsubsection::Closed:: *)
(*$AllFactorialFamilyTasks and $DefaultFactorialFamilyTasks*)


$AllFactorialFamilyTasks  = Join [$FactorialFamilyTasks, $InvFactorialFamilyTasks];

$FlattenedAllFactorialFamilyTasks = Flatten [$AllFactorialFamilyTasks, 1];

$DefaultFactorialFamilyTasks = {$GammaTasks, $InverseGammaTasks, $LogGammaTasks, $InverseLogGammaTasks,
  $Factorial2Tasks, $InverseFactorial2Tasks, $PolyGammaTasks, $InversePolyGammaTasks};


(* ::Subsubsubsection::Closed:: *)
(*Zeta family tasks:*)


(* ::Subsubsubsubsection::Closed:: *)
(*$ZetaTasks*)


$ZetaConstants = {Zeta[3], Zeta[5], Zeta[7], ZetaInfimumOrSupremumOrdinate[0], Zeta[9], Zeta[11]};

$LinCombZetaBasis1 = {Zeta[3], Catalan*Pi, Pi^2, Log[2], 1};
$LinCombZetaBasis2 = {Zeta[3]/Pi^2, Log[Pi], Log[2], 1};

$ZetaTasks = Join [
 (*MapIndexed [MakeTryRationalTimesMultiplier [{Zeta}, 3.0*(2.0 - First[#2]/Length[$ZetaConstants]), #1] &, $ZetaConstants],*)
 MapIndexed [MakeTryLinearCombinationTimesMultiplier [None, 3.0*(2.0 - First[#2]/Length[$ZetaConstants]), {1, #1}] &, $ZetaConstants],

 {MakeTryLinearCombinationTimesMultiplier [None, 12.0, $LinCombZetaBasis1],
  MakeTryLinearCombinationTimesMultiplier [None,  5.0, $LinCombZetaBasis2],
 (*MakeTryLinearCombinationTimesMultiplier [{Pi, Log, Zeta},  4.0, {Zeta[3], Log[2]^3, Log[2]^2, Log[2], 1, Pi^2*Log[2], Pi^2}],*)
 (*MakeTryLinearCombinationTimesMultiplier [{Pi, Log, Zeta},  4.0, {Zeta[5]*Log[2], Zeta[5], Zeta[3]*Log[2], Zeta[3]^2, Zeta[3], Log[2], 1}],*)

  MakeTryProduct [ZetaFamily, 25.0, {Log[Zeta[3]], Log[Pi], Log[2], Log[3], Log[5], Log[7], 1}],
                                       (* Eg: 210*E*Pi*Zeta[3] *)

  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 12, 4.12, TryPlusOrMinusZetaBranch2OnN],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 12, 4.12, TryPlusOrMinusZetaBranch2Minus1],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 12, 4.12, TryZetaBranch1TimesN],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 12, 4.12, TryZetaBranch1TimesN, -1],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 12, 4.12, TryZetaBranch1PlusNTimesInfimumOrdinate],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 12, 4.12, TryZetaBranch1PlusNTimesInfimumOrdinate, -1]
}];


$DefaultZetaProductBases = {{Zeta[3], \[Pi], 2, 3, 5, 7, E}};


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseZetaTasks*)


$MaxAllowedRealInverseZetaBranch = 2;
$MinAllowedRealInverseZetaBranch = 1;

$InvZetaConstants = {ZetaInfimumOrSupremumAbscissa[0], Im[ZetaZero[1]], Im[ZetaZero[2]], Im[ZetaZero[3]]};

$InverseZetaTasks = Join [
 MapIndexed [MakeTryLinearCombinationTimesMultiplier [None, 3.0*(2.0 - First[#2]/Length[$InvZetaConstants]), {1, #1}] &,
             $InvZetaConstants],

 {MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 12, 4.12, TryPlusOrMinusInvZetaBranch2OnN],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 12, 4.12, TryPlusOrMinusInvZetaBranch2MaybeMinus1],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 12, 4.12, TryInvZetaBranch1TimesN],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 12, 4.12, TryInvZetaBranch1TimesN, -1],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 12, 4.12, TryInvZetaBranch1PlusN],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 12, 4.12, TryInvZetaBranch1PlusN, -1]}];


(* ::Subsubsubsubsection::Closed:: *)
(*$DirichletBetaTasks*)


$MinAllowedDirichletBetaBranch = 1;  (* Switch to table: *)

$DirichletBetaTasks = {
 (*MakeTryRationalTimesMultiplier [ZetaFamily, 2.0, DirichletBetaInfimumOrSupremumOrdinate[0]],*)

 MakeTryLinearCombinationTimesMultiplier [None, 2.0, {1, DirichletBetaInfimumOrSupremumOrdinate[0]}],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 6.0, 54.09, TryDirichletBeta],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 3.0, 54.09, TryDirichletBeta, -1]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseDirichletBetaTasks*)


$MaxAllowedRealInverseDirichletBetaBranch = 1;
$MinAllowedRealInverseDirichletBetaBranch = 0;

$InverseDirichletBetaTasks = {
 (*MakeTryRationalTimesMultiplier [None, 2.0, DirichletBetaInfimumOrSupremumAbscissa[0]],*)
 (*MakeTryRationalTimesMultiplier [None, 2.0, DirichletBetaInfimumOrSupremumOrdinate[0]],*)

 MakeTryLinearCombinationTimesMultiplier [None, 2.0, {1, DirichletBetaInfimumOrSupremumAbscissa[0]}],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 1.0, 54.09, TryInvDirichletBeta],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 1.0, 54.09, TryInvDirichletBeta, -1]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$DirichletEtaTasks*)


$MinAllowedDirichletEtaBranch = 1;  (* Switch to table: *)

$DirichletEtaTasks = {
 MakeTryLinearCombinationTimesMultiplier [None, 2.0, {1, DirichletEtaInfimumOrSupremumOrdinate[0]}],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 7.0, 4.13, TryDirichletEta],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 4.0, 4.13, TryDirichletEta, -1]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseDirichletEtaTasks*)


$MaxAllowedRealInverseDirichletEtaBranch = 1;
$MinAllowedRealInverseDirichletEtaBranch = 0;

$InverseDirichletEtaTasks = {
 MakeTryLinearCombinationTimesMultiplier [None, 2.0, {1, DirichletEtaInfimumOrSupremumAbscissa[0]}],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 1.0, 54.09, TryInvDirichletEta],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 1.0, 54.09, TryInvDirichletEta, -1]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$DirichletLambdaTasks*)


$MinAllowedDirichletLambdaBranch = 1;  (* Switch to table: *)

$DirichletLambdaTasks = {
 MakeTryLinearCombinationTimesMultiplier [None, 2.0, {1, DirichletLambdaInfimumOrSupremumOrdinate[0]}],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 7.0, 4.88, TryDirichletLambda],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 4.0, 4.88, TryDirichletLambda, -1],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 7.0, 4.88, TryDirichletLambda, 1, 1, 1, 2]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseDirichletLambdaTasks*)


$MaxAllowedRealInverseDirichletLambdaBranch = 2;
$MinAllowedRealInverseDirichletLambdaBranch = 1;

$InverseDirichletLambdaTasks = {
 MakeTryLinearCombinationTimesMultiplier [None, 2.0, {1, DirichletLambdaInfimumOrSupremumAbscissa[0]}],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 1.0, 4.88, TryInvDirichletLambda],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 1.0, 4.88, TryInvDirichletLambda, -1]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$RiemannSiegelThetaTasks*)


$RiemannSiegelThetaTasks = Join [
 {MakeTryLinearCombinationTimesMultiplier [None, 2.0, {1, RiemannSiegelThetaInfimumOrSupremumOrdinate[1]}],

  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 7.0, 4.54, TryRiemannSiegelTheta],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 4.0, 4.54, TryRiemannSiegelTheta, -1],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 7.0, 4.54, TryRiemannSiegelTheta,  1, 1, 1, 2],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 4.0, 4.54, TryRiemannSiegelTheta, -1, 1, 1, 2]
}];


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseRiemannSiegelThetaTasks*)


$MaxAllowedRealInverseRiemannSiegelThetaBranch = 2;
$MinAllowedRealInverseRiemannSiegelThetaBranch = 1;

$InverseRiemannSiegelThetaTasks = {
  MakeTryLinearCombinationTimesMultiplier [None, 2.0, {1, RiemannSiegelThetaInfimumOrSupremumAbscissa[1]}],
  MakeTryLinearCombinationTimesMultiplier [None, 2.0, {1, RiemannSiegelThetaZero[1]}],

  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 1.0, 4.54, TryPlusOrMinusInvRiemannSiegelTheta]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$RamanujanTauThetaTasks*)


$RamanujanTauThetaTasks = {
  MakeTryLinearCombinationTimesMultiplier [None, 2.0, {1, RamanujanTauThetaInfimumOrSupremumOrdinate[1]}],

  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 7.0, 3.76, TryRamanujanTauTheta],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 7.0, 3.76, TryRamanujanTauTheta,  1, 1, 1, 2],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 4.0, 3.76, TryRamanujanTauTheta, -1, 1, 1, 2]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseRamanujanTauThetaTasks*)


$MaxAllowedRealInverseRamanujanTauThetaBranch = 2;
$MinAllowedRealInverseRamanujanTauThetaBranch = 1;

$InverseRamanujanTauThetaTasks = {
  MakeTryLinearCombinationTimesMultiplier [None, 2.0, {1, RamanujanTauThetaZero[1]}],
  MakeTryLinearCombinationTimesMultiplier [None, 2.0, {RamanujanTauThetaInfimumOrSupremumAbscissa[1]}],

  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 7.0, 3.76, TryRamanujanTauTheta],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 7.0, 3.76, TryRamanujanTauTheta,  1, 1, 1, 2],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 4.0, 3.76, TryRamanujanTauTheta, -1, 1, 1, 2]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$PolyLogTasks*)


$MaxAllowedPolyLogIndex = 3;

$LinCombPolyLogBasis1 = {PolyLog [2, 1/3], PolyLog [2, 2/3], Log[2], Log[3], Pi^2, 1};
$LinCombPolyLogBasis2 = {PolyLog [3, -3], Log[3]^3, Pi*Log[3]^2, Pi^2*Log[3], Pi^3, 1};

$PolyLogTasks = {
 MakeTryLinearCombinationTimesMultiplier [None, 12.0, $LinCombPolyLogBasis1],
 MakeTryLinearCombinationTimesMultiplier [None, 12.0, $LinCombPolyLogBasis2],

 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [LogFamily, 20.0, 3.23, TryPolyLogTimesN, 2],
 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [LogFamily, 15.0, 3.23, TryPolyLogTimesN, 2, -1],
 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [LogFamily, 10.0, 3.23, TryPolyLogTimesN, 3],
 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [LogFamily,  7.0, 3.23, TryPolyLogTimesN, 3, -1],

 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [LogFamily, 20.0, 3.23, TryPolyLogPlusNZetaOfM, 2],
 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [LogFamily, 15.0, 3.23, TryPolyLogPlusNZetaOfM, 2, -1],
 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [LogFamily, 10.0, 3.23, TryPolyLogPlusNZetaOfM, 3],
 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [LogFamily,  7.0, 3.23, TryPolyLogPlusNZetaOfM, 3, -1]
};


$DefaultPolyLogTasks = $PolyLogTasks;


(* ::Subsubsubsubsection::Closed:: *)
(*$InversePolyLogTasks*)


$MaxAllowedInversePolyLogIndex = 3;

$InversePolyLogTasks = {
 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [None, 20.0, 3.23, TryInvPolyLogTimesN, 2],
 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [None, 15.0, 3.23, TryInvPolyLogTimesN, 2, -1],
 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [None, 10.0, 3.23, TryInvPolyLogTimesN, 3],
 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [None,  7.0, 3.23, TryInvPolyLogTimesN, 3, -1],

 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [None, 20.0, 3.23, TryInvPolyLogPlusN, 2],
 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [None, 15.0, 3.23, TryInvPolyLogPlusN, 2, -1],
 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [None, 10.0, 3.23, TryInvPolyLogPlusN, 3],
 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [None,  7.0, 3.23, TryInvPolyLogPlusN, 3, -1]
};


$DefaultInversePolyLogTasks = {};


(* ::Subsubsubsubsection::Closed:: *)
(*$AllZetaFamilyTasks and $DefaultZetaFamilyTasks*)


$LinCombZetaFamilyBases = {$LinCombZetaBasis1, $LinCombZetaBasis2, $LinCombPolyLogBasis1, $LinCombPolyLogBasis2};


$ZetaFamilyTasks = {$ZetaTasks, $DirichletBetaTasks, $DirichletEtaTasks, $DirichletLambdaTasks,
  $RiemannSiegelThetaTasks, $RamanujanTauThetaTasks, $PolyLogTasks};

$InvZetaFamilyTasks = {$InverseZetaTasks, $InverseDirichletBetaTasks, $InverseDirichletEtaTasks,
  $InverseDirichletLambdaTasks, $InverseRiemannSiegelThetaTasks, $InverseRamanujanTauThetaTasks,
  $InversePolyLogTasks};


$AllZetaFamilyTasks = Join [$ZetaFamilyTasks, $InvZetaFamilyTasks];

$DefaultZetaFamilyTasks = {$ZetaTasks, $InverseZetaTasks, $PolyLogTasks, $InversePolyLogTasks};


(* ::Subsubsubsection::Closed:: *)
(*Erf family tasks:*)


(* ::Subsubsubsubsection::Closed:: *)
(*$ErfTasks*)


$ErfTasks = {
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 18.0, 2.36, TryErfTimesN],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 17.0, 2.36, TryErfTimesN, 1/2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 16.0, 2.36, TryErfTimesN, (1/4)*Sqrt[2]],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 15.0, 2.36, TryErfTimesN, (1/2)*Sqrt[Pi]],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 14.0, 2.36, TryErfTimesN, 1/2, Sqrt[2]],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 16.0, 2.26, TryPlusOrMinusErfPlus2n],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 15.0, 2.26, TryPlusOrMinusErfPlus2n, 1/2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 14.0, 2.26, TryPlusOrMinusErfPlus2n, (1/4)*Sqrt[2]],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 13.0, 2.26, TryPlusOrMinusErfPlus2n, (1/2)*Sqrt[Pi]],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 12.0, 2.26, TryPlusOrMinusErfPlus2n, 1/2, Sqrt[2]]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseErfTasks*)


$InverseErfTasks = {
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 60.0, 2.37, TryInverseErf]
};  (* MORE TO DO *) 


(* ::Subsubsubsubsection::Closed:: *)
(*$ErfcTasks*)


$ErfcTasks = {
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 18.0, 2.36, TryPlusOrMinusErfcTimesN],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 17.0, 2.36, TryPlusOrMinusErfcTimesN, 1/2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 16.0, 2.36, TryPlusOrMinusErfcTimesN, (1/4)*Sqrt[2]],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 15.0, 2.36, TryPlusOrMinusErfcTimesN, (1/2)*Sqrt[Pi]],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 14.0, 2.36, TryPlusOrMinusErfcTimesN, 1/2, Sqrt[2]],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 18.0, 2.36, TryPlusOrMinusErfcPlus2n],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 17.0, 2.36, TryPlusOrMinusErfcPlus2n, 1/2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 16.0, 2.36, TryPlusOrMinusErfcPlus2n, (1/4)*Sqrt[2]],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 15.0, 2.36, TryPlusOrMinusErfcPlus2n, (1/2)*Sqrt[Pi]],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 14.0, 2.36, TryPlusOrMinusErfcPlus2n, 1/2, Sqrt[2]]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseErfcTasks*)


$InverseErfcTasks = {
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 60.0, 2.37, TryInverseErfc]
};  (* MORE TO DO *)


(* ::Subsubsubsubsection::Closed:: *)
(*$ErfiTasks*)


$ErfiTasks = {
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 2.0, 2.93, TryPlusOrMinusErfi]};


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseErfiTasks*)


$InverseErfiTasks = {
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 2.0, 2.93, TryPlusOrMinusInvErfi]};


(* ::Subsubsubsubsection::Closed:: *)
(*$DawsonFTasks*)


$DawsonFTasks = {
 MakeTryLinearCombinationTimesMultiplier [None, 3.0, {1, DawsonFInfimumOrSupremumOrdinate[1]}],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 13.0, 3.17, TryPlusOrMinusDawsonFTimesN],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 13.0, 3.17, TryPlusOrMinusDawsonFTimesN, 1, 1, 1, 2]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseDawsonFTasks*)


$MaxAllowedRealInverseDawsonFBranch = 2;
$MinAllowedRealInverseDawsonFBranch = 0;

$InverseDawsonFTasks = {
 MakeTryLinearCombinationTimesMultiplier [None, 9.0, {1, DawsonFInfimumOrSupremumAbscissa[1]}],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 3.0, 3.17, TryPlusOrMinusInvDawsonF]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$FresnelSTasks*)


$MaxAllowedFresnelSBranch = 13;

(*$FresnelSOrdinateConstants = Table [FresnelSInfimumOrSupremumOrdinate[k], {k, $MaxAllowedFresnelSBranch}];*)

$FresnelSTasks = Join [
(* MapIndexed [MakeTryLinearCombinationTimesMultiplier [None, 2.0*(2.0 - First[#2]/Length[$FresnelSOrdinateConstants]), 
              {1, #1}] &, $FresnelSOrdinateConstants],*)
 Flatten [Table [{
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  5, 3.20, TryPlusOrMinusFresnelSTimesOrOnN, 1, 1, 1, k],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  5, 3.20, TryPlusOrMinusFresnelSTimesOrOnN, 1, 1, 2, k],
  (*MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  3, 3.20, TryPlusOrMinusFresnelSTimesOrOnN, Sqrt[Pi/2], Sqrt[2/Pi], 1, k],*)
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  3, 3.20, TryPlusOrMinusFresnelSTimesOrOnN, Sqrt[Pi/2], 1, 1, k],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  3, 3.20, TryPlusOrMinusFresnelSTimesOrOnN, Sqrt[Pi/2], 1, 2, k]},
                  {k, $MaxAllowedFresnelSBranch}], 1]];


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseFresnelSTasks*)


$InverseFresnelSTasks = {
 (*MakeTryLinearCombinationTimesMultiplier [None, 3.0, {1, FresnelCInfimumOrSupremumAbscissa[1]}],*)

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 2, 3.20, TryPlusOrMinusInvFresnelS]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$FresnelCTasks and $DefaultFresnelCTasks*)


$MaxAllowedFresnelCBranch = 13;

(*$FresnelCOrdinateConstants = Table [FresnelSInfimumOrSupremumOrdinate[k], {k, $MaxAllowedFresnelCBranch}];*)

$FresnelCTasks = Join [
 (*MapIndexed [MakeTryLinearCombinationTimesMultiplier [None, 2.0*(2.0 - First[#2]/Length[$FresnelCOrdinateConstants]), 
              {1, #1}] &, $FresnelCOrdinateConstants],*)
 Flatten [Table [{
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  5, 3.20, TryPlusOrMinusFresnelCTimesOrOnN, 1, 1, 1, k],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  5, 3.20, TryPlusOrMinusFresnelCTimesOrOnN, 1, 1, 2, k],
  (*MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  3, 3.20, TryPlusOrMinusFresnelCTimesOrOnN, Sqrt[Pi/2], Sqrt[2/Pi], 1, k],*)
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  3, 3.20, TryPlusOrMinusFresnelCTimesOrOnN, Sqrt[Pi/2], 1, 1, k],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  3, 3.20, TryPlusOrMinusFresnelCTimesOrOnN, Sqrt[Pi/2], 1, 2, k]},
                  {k, $MaxAllowedFresnelCBranch}], 1]];


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseFresnelCTasks*)


$InverseFresnelCTasks = {
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 2, 3.01, TryPlusOrMinusInvFresnelC]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$AllErfFamilyTasks and $DefaultErfFamilyTasks*)


$AllErfFamilyTasks = {$ErfTasks, $InverseErfTasks, $ErfcTasks, $InverseErfcTasks, $ErfiTasks,
  $InverseErfiTasks, $DawsonFTasks, $InverseDawsonFTasks, $FresnelSTasks, $InverseFresnelSTasks,
  $FresnelCTasks, $InverseFresnelCTasks};

$DefaultErfFamilyTasks = {$ErfTasks, $InverseErfTasks, $ErfcTasks, $InverseErfcTasks};


(* ::Subsubsubsection::Closed:: *)
(*Miscellaneous integral tasks:*)


(* ::Subsubsubsubsection::Closed:: *)
(*$ExpIntegralEiTasks*)


$LinCombExpIntegralEiBasis1 = {ExpIntegralEi [-1], Exp [-1], 1};
$LinCombExpIntegralEiBasis2 = {ExpIntegralEi [-2], Exp [-2], 1};
$LinCombExpIntegralEiBasis3 = {ExpIntegralEi [-1/2], Exp [-1/2], 1};
$LinCombExpIntegralEiBasis4 = {ExpIntegralEi [-3/2], Exp [-3/2], 1};

$ExpIntegralEiTasks = {
 MakeTryLinearCombinationTimesMultiplier [None, 12.0, $LinCombExpIntegralEiBasis1],
 MakeTryLinearCombinationTimesMultiplier [None, 12.0, $LinCombExpIntegralEiBasis2],
 MakeTryLinearCombinationTimesMultiplier [None, 12.0, $LinCombExpIntegralEiBasis3],
 MakeTryLinearCombinationTimesMultiplier [None, 12.0, $LinCombExpIntegralEiBasis4],

 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [None, 9.0, 2.61, TryPlusOrMinusExpIntegralEOnN, 1],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 9.0, 2.61, TryPlusOrMinusExpIntegralEi]
};


$LinCombExpIntegralEiBases = {$LinCombExpIntegralEiBasis1, $LinCombExpIntegralEiBasis2,
                              $LinCombExpIntegralEiBasis3, $LinCombExpIntegralEiBasis4};


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseExpIntegralEiTasks*)


$MaxAllowedRealInverseExpIntegralEiBranch = 1;
$MinAllowedRealInverseExpIntegralEiBranch = 0;

$InverseExpIntegralEiTasks = { (* TryProduct with basis {Log[ExpIntegralEi[1]], 1} for Ei[1]^r1 * E^r2 ?? *)
 MakeTryLinearCombinationTimesMultiplier [None, 4.0, {1, ExpIntegralEiZero[1]}],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 2.0, 2.61, TryPlusOrMinusInvExpIntegralEi]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$LogIntegralTasks*)


$LogIntegralTasks = {
 MakeTryRationalTimesMultiplier [None, 10.0, LogIntegral[2]],
 MakeTryLinearCombinationTimesMultiplier [None, 10.0, {1, LogIntegral[2]}],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 20.0, 2.56, TryLogIntegral],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 15.0, 2.56, TryLogIntegral, -1],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 10.0, 2.56, TryLogIntegral, 1, 1, 1, 2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  8.0, 2.56, TryLogIntegral, -1, 1, 1, 2]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseLogIntegralTasks*)


$MaxAllowedRealInverseLogIntegralBranch = 2;
$MinAllowedRealInverseLogIntegralBranch = 1;

$InverseLogIntegralTasks = {
 (*MakeTryRationalTimesMultiplier [None, 10.0, LogIntegralZero[1]],*)
 MakeTryLinearCombinationTimesMultiplier [None, 10.0, {1, LogIntegralZero[1]}],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  8.0, 2.56, TryPlusOrMinusInvLogIntegralBranch2OnN],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  8.0, 2.56, TryPlusOrMinusInvLogIntegralBranch1TimesN],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  8.0, 2.56, TryPlusOrMinusInvLogIntegralBranch1PlusN],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  8.0, 2.56, TryPlusOrMinusInvLogIntegralBranch2MaybeMinus1]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$SinhIntegralTasks*)


$SinhIntegralTasks = {
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 8.0, 4.21, TryPlusOrMinusSinhIntegral]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseSinhIntegralTasks*)


$InverseSinhIntegralTasks = {
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 3.0, 4.21, TryPlusOrMinusInvSinhIntegral]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$CoshIntegralTasks*)


$CoshIntegralTasks = {
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 8.0, 5.76, TryCoshIntegral],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 8.0, 5.76, TryCoshIntegral, -1]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseCoshIntegralTasks*)


$InverseCoshIntegralTasks = {
 (*MakeTryRationalTimesMultiplier [None, 4.0, CoshIntegralZero[1]],*)

 MakeTryLinearCombinationTimesMultiplier [None, 4.0, {1, CoshIntegralZero[1]}],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 3.0, 5.76, TryPlusOrMinusInvCoshIntegral]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$SinIntegralTasks*)


$MaxAllowedSinIntegralBranch = 3;  (* Switch to Table: *)

$SinIntegralTasks = {
 (*MakeTryRationalTimesMultiplier [None, 4.0, SinIntegralInfimumOrSupremumOrdinate[1]],
 MakeTryRationalTimesMultiplier [None, 1.0, SinIntegralInfimumOrSupremumOrdinate[2]],*)

 MakeTryLinearCombinationTimesMultiplier [None, 4.0, {1, SinIntegralInfimumOrSupremumOrdinate[1]}],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 15, 4.98, TrySinIntegralTimesOrOnN],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  7, 4.98, TrySinIntegralTimesOrOnN, Pi],

 MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, SinIntegralInfimumOrSupremumOrdinate[2]}],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  4, 4.98, TrySinIntegralTimesOrOnN, 1,  1, 1, 2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  2, 4.98, TrySinIntegralTimesOrOnN, Pi, 1, 1, 2],

 MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, SinIntegralInfimumOrSupremumOrdinate[3]}],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  4, 4.98, TrySinIntegralTimesOrOnN, 1,  1, 1, 3],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  2, 4.98, TrySinIntegralTimesOrOnN, Pi, 1, 1, 3]
}; (* Also do si[x] := SinIntegral[x] - Pi/2 ?? *)


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseSinIntegralTasks*)


$InverseSinIntegralTasks = {
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 15, 4.98, TryPlusOrMinusInvSinIntegral]
}; (* Also do si[x] := SinIntegral[x] - Pi/2 ?? *)


(* ::Subsubsubsubsection::Closed:: *)
(*$CosIntegralTasks*)


$MaxAllowedCosIntegralBranch = 3;  (* Switch to Table: *)

$CosIntegralTasks = {
 MakeTryLinearCombinationTimesMultiplier [None, 4.0, {1, CosIntegralInfimumOrSupremumOrdinate[1]}],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 15, 6.58, TryCosIntegralTimesN],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  7, 6.58, TryCosIntegralTimesN, -1],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  8, 6.58, TryCosIntegralTimesN, Pi],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  4, 6.58, TryCosIntegralTimesN, -Pi],

 MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, CosIntegralInfimumOrSupremumOrdinate[2]}],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  6, 6.58, TryCosIntegralTimesN, 1,  1, 1, 2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  3, 6.58, TryCosIntegralTimesN, -1,  1, 1, 2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  4, 6.58, TryCosIntegralTimesN, Pi, 1, 1, 2],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  2, 6.58, TryCosIntegralTimesN, -Pi, 1, 1, 2],

 MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, CosIntegralInfimumOrSupremumOrdinate[3]}],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  6, 6.58, TryCosIntegralTimesN, 1,  1, 1, 3],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  3, 6.58, TryCosIntegralTimesN, -1,  1, 1, 3],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  4, 6.58, TryCosIntegralTimesN, Pi, 1, 1, 3],
 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  2, 6.58, TryCosIntegralTimesN, -Pi, 1, 1, 3]
}; (* Also do Cin[x] := EulerGamma + Log[x] - CosIntegral[x] ?? *)


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseCosIntegralTasks*)


$InverseCosIntegralTasks = {
 (*MakeTryRationalTimesMultiplier [{InverseCosIntegral}, 4.0, CosIntegralZero[1]],
 MakeTryRationalTimesMultiplier [{InverseCosIntegral}, 1.0, CosIntegralZero[2]],*)

 MakeTryLinearCombinationTimesMultiplier [None, 4.0, {1, CosIntegralZero[1]}],
 MakeTryLinearCombinationTimesMultiplier [None, 1.0, {1, CosIntegralZero[2]}],

 MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None,  3, 6.58, TryPlusOrMinusInvCosIntegral]
}; (* Also do Cin[x] := EulerGamma + Log[x] - CosIntegral[x] ?? *)


(* ::Subsubsubsubsection::Closed:: *)
(*$ExpIntegralETasks*)


$MaxAllowedExpIntegralEIndex = 4;

$ExpIntegralETasks = {
 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [None, 4.0, 2.61, TryPlusOrMinusExpIntegralEOnN, 2],
 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [None, 2.0, 2.61, TryPlusOrMinusExpIntegralEOnN, 3],
 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [None, 1.0, 2.61, TryPlusOrMinusExpIntegralEOnN, 4],
 
 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [None, 4.0, 2.61, TryPlusOrMinusExpIntegralEPlusNTimesRecipMMinus1, 2],
 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [None, 2.0, 2.61, TryPlusOrMinusExpIntegralEPlusNTimesRecipMMinus1, 3],
 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [None, 1.0, 2.61, TryPlusOrMinusExpIntegralEPlusNTimesRecipMMinus1, 4]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseExpIntegralETasks*)


$MaxAllowedInverseExpIntegralEIndex = 4;

$InverseExpIntegralETasks = {
 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [None, 2.0, 2.62, TryPlusOrMinusInvExpIntegralE, 2],
 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [None, 1.0, 2.62, TryPlusOrMinusInvExpIntegralE, 3],
 MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [None, 0.5, 2.62, TryPlusOrMinusInvExpIntegralE, 4]
};








(* ::Subsubsubsubsection::Closed:: *)
(*$AllExpIntegralFamilyTasks and $DefaultExpIntegralFamilyTasks*)


$AllExpIntegralFamilyTasks = {$ExpIntegralEiTasks, $InverseExpIntegralEiTasks, $LogIntegralTasks,
  $InverseLogIntegralTasks, $SinhIntegralTasks, $InverseSinhIntegralTasks, $CoshIntegralTasks,
  $InverseCoshIntegralTasks, $SinIntegralTasks, $InverseSinIntegralTasks, $CosIntegralTasks,
  $InverseCosIntegralTasks, $ExpIntegralETasks, $InverseExpIntegralETasks};


$DefaultExpIntegralFamilyTasks = {$ExpIntegralEiTasks, $InverseExpIntegralEiTasks,
  $LogIntegralTasks, $InverseLogIntegralTasks};


(* ::Subsubsubsection::Closed:: *)
(*Bessel family tasks:*)


(* ::Subsubsubsubsection::Closed:: *)
(*$BesselJTasks*)


$MaxAllowedBesselJIndex = 4;
$MaxAllowedBesselJBranch = 6;
$MaxIntegerBesselJArg = 10;


$BesselJOrdinateConstants = Flatten [Table [BesselJInfimumOrSupremumOrdinate[j, k],
                                            {j, 0, $MaxAllowedBesselJIndex}, {k, $MaxAllowedBesselJBranch}], 1];

$BesselJTasks = Join [ (* Make desirability proportional to 1/(j+k): *)
 MapIndexed [MakeTryLinearCombinationTimesMultiplier [None, 2.0*(2.0 - First[#2]/Length[$BesselJOrdinateConstants]), 
              {1, #1}] &, $BesselJOrdinateConstants],

 Table [MakeTryLinearCombinationTimesMultiplier [None, 2.0,  {1, BesselJ [0, n], BesselJ [1, n]}], {n, $MaxIntegerBesselJArg}],

 Flatten [Table [MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [
                    None, 4.0, 4.80, TryBesselJOnN, j, resultMultiplier, 1, 1, k],
                 {resultMultiplier, 1, -1, -2}, {j, 0, $MaxAllowedBesselJIndex}, {k, $MaxAllowedBesselJBranch}], 2]];


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseBesselJTasks*)


$MaxAllowedInverseBesselJIndex = 11;

$BesselJAbscissaConstants = Flatten [Table [{BesselJInfimumOrSupremumAbscissa[j, k],
                                             BesselJZero [j, k]},
                                            {j, 0, $MaxAllowedInverseBesselJIndex}, {k, $MaxAllowedBesselJBranch}], 2];

$InverseBesselJTasks = Join [
 MapIndexed [MakeTryLinearCombinationTimesMultiplier [None, 2.0*(2.0 - First[#2]/Length[$BesselJAbscissaConstants]), 
              {1, #1}] &, $BesselJOrdinateConstants],

 Table [MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [
                    None, 4.0, 4.80, TryPlusOrMinusInvBesselJ, j],
                 {j, 0, $MaxAllowedInverseBesselJIndex}]];


(* ::Subsubsubsubsection::Closed:: *)
(*$BesselYTasks*)


$MaxAllowedBesselYIndex = 4;
$MaxAllowedBesselYBranch = 6;
$MaxIntegerBesselYArg = 10;

$BesselYOrdinateConstants = Flatten [Table [BesselYInfimumOrSupremumOrdinate[j, k],
                                            {j, 0, $MaxAllowedBesselYIndex}, {k, $MaxAllowedBesselYBranch}], 1];

$BesselYTasks = Join [ (* Make desirability proportional to 1/(j+k): *)
 MapIndexed [MakeTryLinearCombinationTimesMultiplier [None, 2.0*(2.0 - First[#2]/Length[$BesselYOrdinateConstants]), 
              {1, #1}] &, $BesselYOrdinateConstants],

 Table [MakeTryLinearCombinationTimesMultiplier [None, 2.0,  {1, BesselY [0, n], BesselY [1, n]}], {n, $MaxIntegerBesselYArg}],

 Flatten [Table [MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [
                    None, 4.0, 4.80, TryBesselYTimesN, j, resultMultiplier, 1, 1, k],
                 {resultMultiplier, 1, -1, -2}, {j, 0, $MaxAllowedBesselYIndex}, {k, $MaxAllowedBesselYBranch}], 2]];


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseBesselYTasks*)


$MaxAllowedInverseBesselYIndex = 11;

$BesselYAbscissaConstants = Flatten [Table [{BesselYInfimumOrSupremumAbscissa[j, k],
                                             BesselYZero [j, k]},
                                            {j, 0, $MaxAllowedInverseBesselYIndex}, {k, $MaxAllowedBesselYBranch}], 2];

$InverseBesselYTasks = Join [
 MapIndexed [MakeTryLinearCombinationTimesMultiplier [None, 2.0*(2.0 - First[#2]/Length[$BesselYAbscissaConstants]), 
              {1, #1}] &, $BesselYOrdinateConstants],

 Table [MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [
                    None, 4.0, 4.80, TryPlusOrMinusInvBesselY, j],
                 {j, 0, $MaxAllowedInverseBesselYIndex}]];


(* ::Subsubsubsubsection::Closed:: *)
(*$BesselITasks*)


$MaxAllowedBesselIIndex = 4;
$MaxIntegerBesselIArg = 4;

$BesselITasks = Join [
  Table [MakeTryLinearCombinationTimesMultiplier [None, 2.0,  {1, BesselI [0, n], BesselI [1, n]}], {n, $MaxIntegerBesselIArg}],

  Table [MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [
                         None, 4.0, 4.80, TryPlusOrMinusBesselI, j], {j, 0, $MaxAllowedBesselIIndex}]
];


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseBesselITasks*)


$MaxAllowedInverseBesselIIndex = 4;

$InverseBesselITasks = Table [MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [
                    None, 4.0, 4.80, TryPlusOrMinusInvBesselI, j],
                 {j, 0, $MaxAllowedInverseBesselIIndex}];


(* ::Subsubsubsubsection::Closed:: *)
(*$BesselKTasks*)


$MaxAllowedBesselKIndex = 4;
$MaxIntegerBesselKArg = 4;

$BesselKTasks = Join [
  Table [MakeTryLinearCombinationTimesMultiplier [None, 2.0,  {1, BesselK [0, n], BesselK [1, n]}], {n, $MaxIntegerBesselKArg}],

  Table [MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [
                         None, 4.0, 4.80, TryPlusOrMinusBesselK, j], {j, 0, $MaxAllowedBesselKIndex}]
];


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseBesselKTasks*)


$MaxAllowedInverseBesselKIndex = 4;

$InverseBesselKTasks = Table [MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [
                    None, 4.0, 4.80, TryPlusOrMinusInvBesselK, j],
                 {j, 0, $MaxAllowedInverseBesselKIndex}];


(* ::Subsubsubsubsection::Closed:: *)
(*$SphericalBesselJTasks*)


$MaxAllowedSphericalBesselJIndex = 4;
$MaxAllowedSphericalBesselJBranch = 6;
$MaxIntegerSphericalBesselJArg = 10;

$SphericalBesselJOrdinateConstants = Flatten [Table [SphericalBesselJInfimumOrSupremumOrdinate[j, k],
                                            {j, 0, $MaxAllowedSphericalBesselJIndex}, {k, $MaxAllowedSphericalBesselJBranch}], 1];

$SphericalBesselJTasks = Join [ (* Make desirability proportional to 1/(j+k): *)
 MapIndexed [MakeTryLinearCombinationTimesMultiplier [None, 2.0*(2.0 - First[#2]/Length[$SphericalBesselJOrdinateConstants]), 
              {1, #1}] &, $SphericalBesselJOrdinateConstants],

 Table [MakeTryLinearCombinationTimesMultiplier [None, 2.0,  {1, SphericalBesselJ [0, n], SphericalBesselJ [1, n]}],
        {n, $MaxIntegerSphericalBesselJArg}],

 Flatten [Table [MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [
                    None, 4.0, 4.80, TrySphericalBesselJTimesN, j, resultMultiplier, 1, 1, k],
                 {resultMultiplier, 1, -1, -2}, {j, 0, $MaxAllowedSphericalBesselJIndex}, {k, $MaxAllowedSphericalBesselJBranch}], 2]];


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseSphericalBesselJTasks*)


$MaxAllowedInverseSphericalBesselJIndex = 11;

$SphericalBesselJAbscissaConstants = Flatten [Table [{SphericalBesselJInfimumOrSupremumAbscissa[j, k],
                                             SphericalBesselJZero [j, k]},
                                            {j, 0, $MaxAllowedSphericalBesselJIndex}, {k, $MaxAllowedSphericalBesselJBranch}], 2];

$InverseSphericalBesselJTasks = Join [
 MapIndexed [MakeTryLinearCombinationTimesMultiplier [None,
              2.0*(2.0 - First[#2]/Length[$SphericalBesselJAbscissaConstants]), 
              {1, #1}] &, $SphericalBesselJAbscissaConstants],

 Table [MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [
                    None, 4.0, 4.80, TryPlusOrMinusInvSphericalBesselJ, j],
                 {j, 0, $MaxAllowedInverseSphericalBesselJIndex}]];


(* ::Subsubsubsubsection::Closed:: *)
(*$SphericalBesselYTasks*)


$MaxAllowedSphericalBesselYIndex = 4;
$MaxAllowedSphericalBesselYBranch = 6;
$MaxIntegerSphericalBesselYArg = 10;

$SphericalBesselYOrdinateConstants = Flatten [Table [SphericalBesselYInfimumOrSupremumOrdinate[j, k],
                                            {j, 0, $MaxAllowedSphericalBesselYIndex}, {k, $MaxAllowedSphericalBesselYBranch}], 1];

$SphericalBesselYTasks = Join [ (* Make desirability proportional to 1/(j+k): *)
 MapIndexed [MakeTryLinearCombinationTimesMultiplier [None, 2.0*(2.0 - First[#2]/Length[$SphericalBesselYOrdinateConstants]), 
              {1, #1}] &, $SphericalBesselYOrdinateConstants],

 Table [MakeTryLinearCombinationTimesMultiplier [None, 2.0,  {1, SphericalBesselY [0, n], SphericalBesselY [1, n]}],
        {n, $MaxIntegerSphericalBesselYArg}],

 Flatten [Table [MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [
                    None, 4.0, 4.80, TrySphericalBesselYTimesN, j, resultMultiplier, 1, 1, k],
                 {resultMultiplier, 1, -1, -2}, {j, 0, $MaxAllowedSphericalBesselYIndex}, {k, $MaxAllowedSphericalBesselYBranch}], 2]];


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseSphericalBesselYTasks*)


$MaxAllowedInverseSphericalBesselYIndex = 11;

$SphericalBesselYAbscissaConstants = Flatten [Table [{SphericalBesselYInfimumOrSupremumAbscissa[j, k],
                                             SphericalBesselYZero [j, k]},
                                            {j, 0, $MaxAllowedSphericalBesselYIndex}, {k, $MaxAllowedSphericalBesselYBranch}], 2];

$InverseSphericalBesselYTasks = Join [
 MapIndexed [MakeTryLinearCombinationTimesMultiplier [None, 2.0*(2.0 - First[#2]/Length[$SphericalBesselYAbscissaConstants]), 
              {1, #1}] &, $SphericalBesselYOrdinateConstants],

 Table [MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [
                    None, 4.0, 4.80, TryPlusOrMinusInvSphericalBesselY, j],
                 {j, 0, $MaxAllowedInverseSphericalBesselYIndex}]];


(* ::Subsubsubsubsection::Closed:: *)
(*$StruveLTasks*)


$MaxAllowedStruveLIndex = 1;

$StruveLTasks = {
MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [None,  0.8, 14.34, TryPlusOrMinusStruveL, 0],
MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [None,  0.4, 14.34, TryPlusOrMinusStruveL, 1]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseStruveLTasks*)


$MaxAllowedInverseStruveLIndex = 1;

$InverseStruveLTasks = {
MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [None,  0.8, 14.34, TryPlusOrMinusInvStruveL, 0],
MakeTry2ArgFOfAlgNumbOtherArgResultMultArgMultDegBranch [None,  0.4, 14.34, TryPlusOrMinusInvStruveL, 1]
};


(* ::Subsubsubsubsection::Closed:: *)
(*$AiryAiTasks*)


$MinAllowedAiryAiBranch = -6;

$AiryAiOrdinateConstants = Table [AiryAiInfimumOrSupremumOrdinate[k], {k, $MinAllowedAiryAiBranch, 0}];

$AiryAiTasks = Join [
 MapIndexed [MakeTryLinearCombinationTimesMultiplier [None, 2.0*(2.0 - First[#2]/Length[$AiryAiOrdinateConstants]), 
              {1, #1}] &, $AiryAiOrdinateConstants],
 Flatten [Table [MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [
                   None, 4.0, 2.87, TryAiryAiTimesN, resultMultiplier, 1, 1, k],
                  {k, $MinAllowedAiryAiBranch, 1}, {resultMultiplier, -1, 1, 2}], 1]];


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseAiryAiTasks*)


$AiryAiAbscissaConstants = {AiryAiZero[1], AiryAiPrimeZero[0]};

$InverseAiryAiTasks = Join [
 (*Map [MakeTryRationalTimesMultiplier [None, 4.0, #] &, $AiryAiAbscissaConstants],*)
 Map [MakeTryLinearCombinationTimesMultiplier [None, 4.0, {1, #}] &, $AiryAiAbscissaConstants],

(* TO DO:  Implement and invoke inverses: *)
 {(*MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 2, 3.01, TryInverseAiryAi],
  MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [None, 2, 3.01, TryInverseAiryAi, -1]*)}];


(* ::Subsubsubsubsection::Closed:: *)
(*$AiryBiTasks*)


$MinAllowedAiryBiBranch = -6;

$AiryBiOrdinateConstants = Table [AiryBiInfimumOrSupremumOrdinate[k], {k, $MinAllowedAiryBiBranch, 1}];

$AiryBiTasks = Join [
 MapIndexed [MakeTryLinearCombinationTimesMultiplier [None, 2.0*(2.0 - First[#2]/Length[$AiryBiOrdinateConstants]), 
              {1, #1}] &, $AiryBiOrdinateConstants],
 Flatten [Table [MakeTry1ArgFOfAlgNumbResultMultArgMultDegBranch [
                   None, 4.0, 2.87, TryAiryBiTimesN, resultMultiplier, 1, 1, k],
                  {k, $MinAllowedAiryBiBranch, 1}, {resultMultiplier, -1, 1, 2}], 1]];


(* ::Subsubsubsubsection::Closed:: *)
(*$InverseAiryBiTasks*)


$AiryBiAbscissaConstants = {AiryBiZero[1], AiryBiPrimeZero[0]};

$InverseAiryBiTasks = Join [
 Map [MakeTryLinearCombinationTimesMultiplier [None, 4.0, {1, #}] &, $AiryBiAbscissaConstants],

 { (* TO DO *)
}];



(* ::Subsubsubsubsection::Closed:: *)
(*$AllBesselFamilyTasks and $DefaultBesselFamilyTasks*)


$AllBesselFamilyTasks = {$BesselJTasks, $InverseBesselJTasks, $BesselYTasks, $InverseBesselYTasks,
 $BesselITasks, $InverseBesselITasks, $BesselKTasks, $InverseBesselKTasks, $SphericalBesselJTasks,
 $InverseSphericalBesselJTasks, $SphericalBesselYTasks, $InverseSphericalBesselYTasks, $StruveLTasks,
 $InverseStruveLTasks, $AiryAiTasks, $InverseAiryAiTasks, $AiryBiTasks, $InverseAiryBiTasks};

$DefaultBesselFamilyTasks = {};


(* ::Subsubsubsection::Closed:: *)
(*$AllFunctionsTasks and $DefaultFunctionsTasks:*)


$FlattenedAllFunctionsTasks = Flatten [Join [$AllBasicFunctionsTasks, $AllEllipticFamilyTasks, $AllFactorialFamilyTasks,
  $AllZetaFamilyTasks, $AllErfFamilyTasks, $AllExpIntegralFamilyTasks, $AllBesselFamilyTasks], 1];

$FlattenedDefaultFunctionsTasks = Flatten [Join [$DefaultBasicFunctionsTasks, $DefaultEllipticFamilyTasks, $DefaultFactorialFamilyTasks,
  $DefaultZetaFamilyTasks, $DefaultErfFamilyTasks, $DefaultExpIntegralFamilyTasks, $DefaultBesselFamilyTasks], 1];


(* ::Subsubsubsection::Closed:: *)
(*$AGMEllipticEKFactorialAndZetaFamilyTasks, $GammaZetaEllipticEKSymbols, $InverseGammaZetaEllipticEKTasks, and $InverseGammaZetaEllipticEKSymbols:*)


$AGMEllipticEKFactorialAndZetaFamilyTasks =
  Join [Flatten [$FactorialFamilyTasks, 1], Flatten [$ZetaFamilyTasks, 1],
        $EllipticETasks, $EllipticKTasks, $ArithmeticGeometricMean1Tasks];


(* ::Subsubsubsection::Closed:: *)
(*$TrigAndAlgebraicNumberTasks:*)


$TrigAndAlgebraicNumberTasks = Join [$TrigFamilyTasks, $RootTasks];


(* ::Subsubsection::Closed:: *)
(*$SortedAllTasks and $SortedDefaultTasks :*)


$DefaultTrigLinFracBasisPairs = {$TrigLinFracBasisPair1, $TrigLinFracBasisPair2, $TrigLinFracBasisPair3,
  $TrigLinFracBasisPair4, $TrigLinFracBasisPair5, $TrigLinFracBasisPair6, $TrigLinFracBasisPair7,
  $TrigLinFracBasisPair8, $TrigLinFracBasisPair9, $TrigLinFracBasisPair10, $TrigLinFracBasisPair11,
  $TrigLinFracBasisPair12, $TrigLinFracBasisPair13, $TrigLinFracBasisPair14, $TrigLinFracBasisPair15,
  $TrigLinFracBasisPair16, $TrigLinFracBasisPair17, $TrigLinFracBasisPair18, $TrigLinFracBasisPair19,
  $TrigLinFracBasisPair20};


$DefaultNonTrigLinFracBasisPairs = {$PiLinFracBasisPair1, $PiLinFracBasisPair2, $ExpLinFracBasisPair1,
  $LogLinFracBasisPair1, $LogLinFracBasisPair2};


$DefaultLinComb1AndConstantBases = Join [{Khinchin, ExpIntegralEiZero[1],
  LogIntegralZero[1], GammaInfimumOrSupremumOrdinate[1], GammaInfimumOrSupremumAbscissa[1],
  Gamma[5/12], Gamma[7/24], Factorial2InfimumOrSupremumAbscissa[0], Factorial2InfimumOrSupremumOrdinate[0],
  Factorial2InfimumOrSupremumAbscissa [1], Factorial2InfimumOrSupremumOrdinate [1],
  Factorial2InfimumOrSupremumAbscissa [2], Factorial2InfimumOrSupremumOrdinate [2],
  Factorial2 [1/3], Factorial2 [2/3], Factorial2 [4/3], Factorial2 [5/3],
  LogGammaInfimumOrSupremumOrdinate[1], ZetaInfimumOrSupremumAbscissa[0]}, $PolyGammaConstants,
  {Zeta[3], Zeta[5], Zeta[7], ZetaInfimumOrSupremumOrdinate[0], Zeta[9], Zeta[11]}]; 


$SortedDefaultTasks = Sort [Join [$CompulsoryTasks, $FlattenedDefaultConstantsTasks, $FlattenedDefaultFunctionsTasks],
                            #1[[2]] > #2[[2]] &];


$SortedAllTasks = Sort [Join [$CompulsoryTasks, $FlattenedAllConstantsTasks, $FlattenedAllFunctionsTasks],
                        #1[[2]] > #2[[2]] &];


$DefaultNonTrigLinCombBases = Join [$LinCombExpBases, $LinCombArcCoshBases, $LinCombArcSinhBases, $LinCombLogBases,
  $LinCombInverseTrigBases, $LinCombZetaFamilyBases, $LinCombExpIntegralEiBases];


$DefaultProductBases = Join [$DefaultExpProductBases, $DefaultLogProductBases,
  $DefaultGammaProductBases, $DefaultZetaProductBases];


(* ::Subsubsection::Closed:: *)
(*Initializations for RandomDefault [...] examples :*)


(* ::Subsubsubsection::Closed:: *)
(*$FunctionsOfQuadratics :*)


$FunctionsOfQuadratics = {Log, ArcCosh, ArcSinh, ArcTanh, (*ArcSech, ArcCsch, ArcCoth,*)
                               ArcCos,  (*ArcSin,*)  ArcTan,  (*ArcSec,*)  (*ArcCsc,*)  (*ArcCot,*) InverseHaversine};


(* ::Subsubsubsection::Closed:: *)
(*$DefaultRationalArgFunctions :*)


$DefaultRationalArgFunctions ={Cos, Cosh, Cot, Coth, Csc, Csch, EllipticE, EllipticK, EllipticTheta,
  Erf, Erfc, Exp, ExpIntegralEi, Factorial2, Gamma, Gudermannian, Haversine, InverseErf,
  InverseErfc, InverseGudermannian, InverseHaversine, (*Log,*)log10, log2, LogGamma,
  LogIntegral, PolyGamma, PolyLog, ProductLog, RealInverseEllipticE,
  RealInverseEllipticK, RealInverseEllipticTheta2Zero, RealInverseEllipticTheta3Zero,
  RealInverseExpIntegralEi, RealInverseFactorial2, RealInverseGamma, RealInverseLogGamma,
  RealInverseLogIntegral, RealInversePolyGamma, RealInversePolyLog, RealInverseZeta, Sec, Sech,
  Sin, Sinh, Tan, Tanh, Zeta};


(* ::Subsubsubsection::Closed:: *)
(*$OptionalFunctions :*)


$OptionalFunctions = {AiryAi, AiryBi, ArithmeticGeometricMean, BarnesG, BesselI, BesselJ,
  BesselK, BesselY, CoshIntegral, CosIntegral, DawsonF,(*dirichletBeta,*)
  dirichletEta, dirichletLambda, (*ellipticNomeQ,*)
  Erfi, ExpIntegralE, FresnelC,FresnelS, Hyperfactorial, InverseEllipticNomeQ, LogBarnesG,
  RamanujanTauTheta,(*RealInverseAiryAi,RealInverseAiryBi,*) RealInverseArithmeticGeometricMean1,
  RealInverseBarnesG, RealInverseBesselI, RealInverseBesselJ, RealInverseBesselK,
  RealInverseBesselY, RealInverseCoshIntegral, RealInverseCosIntegral, RealInverseDawsonF,
  RealInverseDirichletBeta, RealInverseDirichletEta, RealInverseDirichletLambda,
  RealInverseErfi, RealInverseExpIntegralE, RealInverseFresnelC, RealInverseFresnelS,
  (*RealInverseHyperfactorial,*) (*RealInverseLogBarnesG,*) (*RealInverseRamanujanTauTheta,*)
  RealInverseRiemannSiegelTheta, RealInverseSinhIntegral, RealInverseSinIntegral,
  RealInverseSphericalBesselJ, RealInverseSphericalBesselY, RealInverseStruveL, RiemannSiegelTheta,
  SinhIntegral, SinIntegral, SphericalBesselJ, SphericalBesselY, StruveL};


(* ::Subsubsubsection::Closed:: *)
(*$allFunctions :*)


$allFunctions = Sort [Join [$DefaultRationalArgFunctions, $OptionalFunctions]];


(* ::Subsubsubsection::Closed:: *)
(*$categories :*)


$categories = {RecipShiftBinom, Palindromic, RecipCompose, Cubic, deMoivre, LinCombTrig, LinCombNonTrig,
  LinComb1AndConst, LinFracTrig, LinFracNonTrig, Products, FofRandomQuadratic,
  FOfRational, FOfRational};  (* :Intentionally include FOfRational twice because there are so many such models. *)


(* ::Subsubsubsection::Closed:: *)
(*$Shuffled... lists :*)


$ShuffledCategories = Permute [$categories, RandomPermutation [Length [$categories]]];
$ShuffledTrigLinCombBases = Permute [$LinCombTrigFamilyBases, RandomPermutation [Length [$LinCombTrigFamilyBases]]];
$ShuffledNonTrigLinCombBases = Permute [$DefaultNonTrigLinCombBases, RandomPermutation [Length [$DefaultNonTrigLinCombBases]]];
$ShuffledLinComb1AndConstantBases = Permute [$DefaultLinComb1AndConstantBases,
                                             RandomPermutation [Length [$DefaultLinComb1AndConstantBases]]];
$ShuffledTrigLinFracBasisPairs = Permute [$DefaultTrigLinFracBasisPairs, RandomPermutation [Length [$DefaultTrigLinFracBasisPairs]]];
$ShuffledNonTrigLinFracBasisPairs = Permute [$DefaultNonTrigLinFracBasisPairs,
                                             RandomPermutation [Length [$DefaultNonTrigLinFracBasisPairs]]];
$ShuffledProductBases = Permute [$DefaultProductBases, RandomPermutation [Length [$DefaultProductBases]]];
$ShuffledDefaultFunctions = Permute [$DefaultRationalArgFunctions, RandomPermutation [Length [$DefaultRationalArgFunctions]]];
$ShuffledFunctionsOfQuadratics = Permute [$FunctionsOfQuadratics, RandomPermutation [Length [$FunctionsOfQuadratics]]];


(* ::Subsubsubsection::Closed:: *)
(*Global indices :*)


$categoryIndex = RandomInteger [{1, Length [$categories]}];
$ChooseDeMoivre5Q = RandomInteger [] === 0;
$trigLinComIndex = RandomInteger [Length [$LinCombTrigFamilyBases]];
$nonTrigLinComIndex = RandomInteger [Length [$DefaultNonTrigLinCombBases]];
$linComb1AndConstantIndex = RandomInteger [Length [$DefaultLinComb1AndConstantBases]];
$linFracTrigIndex = RandomInteger [Length [$DefaultTrigLinFracBasisPairs]];
$linFracNonTrigIndex = RandomInteger [Length [$DefaultNonTrigLinFracBasisPairs]];
$productIndex = RandomInteger [Length [$DefaultProductBases]];
$fOfRationalIndex = RandomInteger [Length [$DefaultRationalArgFunctions]];
$fOfQuadraticIndex = RandomInteger [Length [$FunctionsOfQuadratics]];


(* ::Subsection::Closed:: *)
(*Utility functions :*)


(* ::Subsubsection::Closed:: *)
(*Simplification functions :*)


(* ::Subsubsubsection::Closed:: *)
(*BetterRoot :*)


BetterRoot [TrueOrBestSoFar_, candidate_] :=
  (* Prefer real over non-real and larger reals over smaller ones: *)
  If [TrueQ [TrueOrBestSoFar] ||
        Im [candidate] === 0 && (Im [TrueOrBestSoFar] =!= 0 || candidate > TrueOrBestSoFar),
      candidate,
      TrueOrBestSoFar];


(* ::Subsubsubsection::Closed:: *)
(*DenestSqrt :*)


ClearAll [DenestSqrt];

DenestSqrt [h_. * Sqrt [t_. * (a_? IntegerOrRationalQ + b_. * Sqrt [c_? IntegerOrRationalQ])]] /;
   IntegerOrRationalQ [h] && IntegerOrRationalQ [t] && IntegerOrRationalQ [b] &&
     IntegerOrRationalQ [$denestSqrt = Sqrt [a ^ 2 - b ^ 2 * c]] :=
  h * (Sqrt [(1/2) * t * (a + $denestSqrt)]
     + Sqrt [(1/2) * t * (a - $denestSqrt)] * If [Sign[a] === Sign[b],  1,  -1]);

DenestSqrt [atom_? AtomQ] := atom;

DenestSqrt [anythingElse_] := Map [DenestSqrt, anythingElse];


(* ::Subsubsubsection::Closed:: *)
(*DeMoivreSeptic :*)


DeMoivreSeptic [coefList_, root_] :=
  Module [{result = root,
           b, c1, c2, c3, c4, c5, c6, a, y, q, (*y1,*) y2, r, candidate},
    Assert [Length[coefList] === 8];
    {b, c1, c2, c3, c4, c5, c6} = Most[coefList] / Last[coefList];
    a = c5 / 7;
    If [a === 0 || c2 =!= 0 || c4 =!= 0 || c6 =!= 0 || c3 =!= 14*a*a || c1 =!= 7*a^3,
        Return [root]];
    q = y^2 + b*y - a^7;
    (*y1 = Root[q, 1];*)
    y2 = Root[q, 2] ^ (1/7);
    r = (-1)^(2/7);
    Do [candidate = r^k * y2;
        candidate = candidate - a/candidate;
        If [QuietPossibleZeroQ [candidate - root],
            result = candidate;
            Assert [k === 0];  (* :Conjecture *)
            Break []],
        {k, 0, 6}];
    Assert [result =!= root];
    result];    


(* ::Subsubsubsection::Closed:: *)
(*DeMoivreQuintic :*)


DeMoivreQuintic [coefList_, root_] :=
  Module [{result = root,
           b, c1, c2, c3, c4, a, y, q, (*y1,*) y2, r, candidate},
    Assert [Length [coefList] === 6];
    {b, c1, c2, c3, c4} = Most[coefList] / Last[coefList];
    a = c3/5;
    If [a === 0 || c4 =!= 0 || c2 =!= 0 || c1 =!= 5*a*a,
        Return [root]];
    q = y^2 + b*y - a^5;
    (*y1 = Root[q, 1];*)
    y2 = Root[q, 2] ^ (1/5);
    r = (-1)^(2/5); (* :Consider Viete-like solution to avoid (-1)^(k/5) *)
    Do [candidate = r^k * y2;
        candidate = candidate - a/candidate;
        If [QuietPossibleZeroQ [candidate - root],
            result = candidate;
            Assert [k === 0];  (* :Conjecture *)
            Break []],
        {k, 0, 4}];
    Assert [result =!= root];
    result];    


(* ::Subsubsubsection::Closed:: *)
(*ExpandFreeOf :*)


ClearAll [ExpandFreeOf];

ExpandFreeOf [u_ * head_[v___], head_] := head[v] * Expand [u];

ExpandFreeOf [anyThingElse_, _] := anyThingElse;


(* ::Subsubsubsection::Closed:: *)
(*FromDecomposition :*)


FromDecomposition [constant_, polynomials_, var_, rootOfUndecomposed_] :=
  If [polynomials === {},
      If [QuietPossibleZeroQ [constant - rootOfUndecomposed],
          constant,
          rootOfUndecomposed],
      Module [{poly = First [polynomials],
               remainingPolys = Rest [polynomials],
               foundSolution = False,
               degree, solutions, rootOf1stPoly, denested},
        degree = Exponent [poly, var];
        solutions = Solve [poly == constant, var];
        Do [rootOf1stPoly = solutions[[k, 1, 2]];
            If [FreeQ [rootOf1stPoly, Root],
                denested = QuietTimeConstrainedSimplify [DenestSqrt [rootOf1stPoly]];
                rootOf1stPoly = FromDecomposition [If [Entropy10 [denested] <= Entropy10 [rootOf1stPoly],
                                                       denested,
                                                       rootOf1stPoly],
                                                   remainingPolys, var, rootOfUndecomposed];
                foundSolution = FreeQ [rootOf1stPoly, Root];
                If [foundSolution,
                    Break []]],
            {k, Length [solutions]}];
        If [foundSolution,
            rootOf1stPoly,
            rootOfUndecomposed]]];


(* ::Subsubsubsection::Closed:: *)
(*FromRoot :*)


Unprotect [FromRoot];
ClearAll [FromRoot];

FromRoot [root_/; Head[root] === Root && IntegerQ [Last [root]]] :=
  Module [{var, polyInVar, coefList, candidate, denominator, alternate},
    polyInVar = First[root][var];
    coefList = CoefficientList [polyInVar, var];
    candidate = FromRootIfShiftedBinomialOrReciprocalThereof [coefList, root];
    If [candidate =!= root,
        Return [candidate]];
    Switch [Length [coefList],
      4,
        Return [VieteOrShiftedBinomialCubicSolution [coefList, root]],
      6,
        candidate = DeMoivreQuintic [coefList, root];
        If [FreeQ [candidate, Root],
            Return [candidate]];
        candidate = DeMoivreQuintic [Reverse [coefList], RootReduce [root^-1]];
        If [FreeQ [candidate, Root],
            Return [candidate ^ -1]],
      7,
        candidate = TryLinCombLinFracCombBasisPairsFromRoot [$TrigBasisPairsForFromRootDeg6, coefList, root];
        If [FreeQ [candidate, Root],
            Return [candidate]],
      8,
        candidate = DeMoivreSeptic [coefList, root];
        If [FreeQ [candidate, Root],
            Return [candidate]];
        candidate = DeMoivreSeptic [Reverse [coefList], RootReduce [root^-1]];
        If [FreeQ [candidate, Root],
            Return [candidate ^ -1]],
      9,
        candidate = TryLinCombLinFracCombBasisPairsFromRoot [$TrigBasisPairsForFromRootDeg8, coefList, root];
        If [FreeQ [candidate, Root],
            Return [candidate]],
      11,
        candidate = TryLinCombLinFracCombBasisPairsFromRoot [$TrigBasisPairsForFromRootDeg10, coefList, root];
        If [FreeQ [candidate, Root],
            Return [candidate]],
      13,
        candidate = TryLinCombLinFracCombBasisPairsFromRoot [$TrigBasisPairsForFromRootDeg12, coefList, root];
        If [FreeQ [candidate, Root],
            Return [candidate]],
      17,
        candidate = TryLinCombLinFracCombBasisPairsFromRoot [$TrigBasisPairsForFromRootDeg16, coefList, root];
        If [FreeQ [candidate, Root],
            Return [candidate]],
      25,
        candidate = TryLinCombLinFracCombBasisPairsFromRoot [$TrigBasisPairsForFromRootDeg24, coefList, root];
        If [FreeQ [candidate, Root],
            Return [candidate]]];  (* :end Switch *)
    candidate = Decompose [polyInVar, var];
    If [Length [candidate] > 1,
        Return [FromDecomposition [0, candidate, var, root]]];
    (* See if the reciprocal of root decomposes: *)
    candidate = Decompose [FromDigits[coefList, var], var];
    If [Length [candidate] > 1,
        Return [FromDecomposition [0, candidate, var, root^-1] ^ -1]];
    candidate = FromRootIfScaledPalindromial [coefList, root];
    If [candidate =!= root,
        candidate,
        ToRadicals [root]]];

FromRoot [atom_? AtomQ] := atom;

FromRoot [anythingElse_] := Map [FromRoot, anythingElse];

Protect [FromRoot];


(* ::Subsubsubsection::Closed:: *)
(*FromRootIfScaledPalindromial :*)


FromRootIfScaledPalindromial [coefList_, root_] :=
  Module [{scaleFactor = PalindromicScaleFactorOrFalse [coefList],
           foundRoot = False,
           newCoefListLength, newCoefList, VofZList, z, y, newPoly, k,
           newRoots, twoCandidates, candidate},
    (* W. S. Burnside and A. W. Panton, The Theory of Equations, Volume 1, Articles 32 and 45. *)
    If [scaleFactor === False,
        root,
        Assert [OddQ [Length[coefList]] && scaleFactor > 0];
        newCoefListLength = Quotient [Length [coefList], 2] + 1;
        newCoefList = Table [coefList[[k]] * scaleFactor ^ (1 - k), {k, newCoefListLength}];
        VofZList =
          Join [{1, z},
            RecurrenceTable [{V[k+2] ==z*V[k+1] -V[k], V[0]==2, V[1]==z}, V, {k, 2, newCoefListLength - 1}]];
        newPoly = Expand [Reverse[newCoefList] . VofZList];
        newRoots = Solve [newPoly == 0, z];
        Do [twoCandidates = ExpandAll[Solve [y^2 - newRoots[[k,1,2]]*y + 1 == 0, y]];
            Do [candidate = scaleFactor * twoCandidates[[j,1,2]];
                If [QuietPossibleZeroQ [candidate - root],
                    foundRoot = True;
                    Break []],
                {j, Length [twoCandidates]}];
            If [foundRoot,
                Break []],
            {k, Length [newRoots]}];
        If [foundRoot,
            candidate,
            root]]];        


(* ::Subsubsubsection::Closed:: *)
(*FromRootIfShiftedBinomial :*)


FromRootIfShiftedBinomial [coefList_, rootOrTrue_:True] :=
  Module [{degree, a, b, var, candidate},
    degree = Length [coefList] - 1;
    a = coefList[[degree]] / (-degree * Last [coefList]);
    b = (-a) ^ degree - First [coefList] / Last [coefList];
    If [(b >= 0 || OddQ [degree]) &&
           Expand [(var - a) ^ degree - b - FromDigits[Reverse[coefList], var] / Last [coefList]] === 0,
        (* Minimal polynomial is a shifted binomial: *)
        If [OddQ [degree],
            a + Sign[b] * Abs[b] ^ (1/degree),
            candidate = a + b ^ (1/degree);
            If [TrueQ [rootOrTrue] || QuietPossibleZeroQ [rootOrTrue - candidate],
                candidate,
                a - b ^ (1/degree)]],
        rootOrTrue]];


(* ::Subsubsubsection::Closed:: *)
(*FromRootIfShiftedBinomialOrReciprocalThereof :*)


FromRootIfShiftedBinomialOrReciprocalThereof [coefList_, rootOrTrue_:True] :=
  Module [{rootOrShiftedBinomial = FromRootIfShiftedBinomial [coefList, rootOrTrue]},
    If [Head [rootOrShiftedBinomial] === Root,
        rootOrShiftedBinomial = FromRootIfShiftedBinomial [Reverse[coefList],
                                                           If [TrueQ [rootOrTrue],
                                                               True,
                                                               RootReduce [rootOrTrue^-1]]];
        If [Head [rootOrShiftedBinomial] === Root,
            rootOrTrue,
            rootOrShiftedBinomial ^ -1],
        rootOrShiftedBinomial]];


(* ::Subsubsubsection::Closed:: *)
(*GammaOrEquivalentFactorial :*)


GammaOrEquivalentFactorial [x_] :=
  With [{xMinus1 = x - 1},
    If [Entropy10 [xMinus1] < Entropy10 [x],
        Factorial [xMinus1],
        Gamma [x]]]; 


(* ::Subsubsubsection::Closed:: *)
(*GentleExponentialsToHyperbolic :*)


Unprotect [GentleExponentialsToHyperbolic];
ClearAll [GentleExponentialsToHyperbolic];

(* I can't get rewrite rules to work for E ^ u_ and E ^ -u_ : *)

GentleExponentialsToHyperbolic [w_. * E + w_. * E ^ -1 + any_.] :=
  2 * w * Cosh [1] + GentleExponentialsToHyperbolic [any];

GentleExponentialsToHyperbolic [w_. * E - w_. * E ^ -1 + any_.] :=
  2 * w * Sinh [1] + GentleExponentialsToHyperbolic [any];

GentleExponentialsToHyperbolic [w_. * (1 + E ^ u_.) * (-1 + E ^ u_.) ^ -1] :=
  Coth [u / 2] * GentleExponentialsToHyperbolic [w];

GentleExponentialsToHyperbolic [w_. * (-1 + E ^ u_.) * (1 + E ^ u_.) ^ -1] :=
  Tanh [u / 2] * GentleExponentialsToHyperbolic [w];

GentleExponentialsToHyperbolic[w_ * E / (1 + E^2)] := w * Sech [1] / 2;

GentleExponentialsToHyperbolic[w_ * E / (-1 + E^2)] := w * Csch [1] / 2;

GentleExponentialsToHyperbolic [anythingElse_] := anythingElse;

Protect [GentleExponentialsToHyperbolic];


(* ::Subsubsubsection::Closed:: *)
(*GentleLogCombine :*)


Unprotect [GentleLogCombine];
ClearAll [GentleLogCombine];

GentleLogCombine [Log [m_] - Log[n_] + any_.] :=
  GentleLogCombine [Log[m/n] + any];

GentleLogCombine [n_. * Log [m_] + n_. * Log[k_] + any_.] :=
  GentleLogCombine [n * Log [m * k] + any];

GentleLogCombine [n_ * Log [m_] - n_ * Log[k_] + any_.] :=
  GentleLogCombine [n * Log [m / k] + any];

GentleLogCombine [3 * Log[2] + any_.] := GentleLogCombine [Log[8] + any];

GentleLogCombine [2 * Log [m_Integer/; m < 7] + any_.] :=
  GentleLogCombine [Log [m ^ 2] + any];

GentleLogCombine [anythingElse_] := anythingElse;

Protect [GentleLogCombine];


(* ::Subsubsubsection::Closed:: *)
(*GentleSimplifiedArcCos :*)


(* FullSimplify does this, but not as quickly: *)

Unprotect [GentleSimplifiedArcCos];
ClearAll [GentleSimplifiedArcCos];

GentleSimplifiedArcCos [reciprocal_Rational /; Abs [Numerator [reciprocal]] === 1] :=
  ArcSec [reciprocal ^ -1];

GentleSimplifiedArcCos [coef_. * (base_/; base > 0) ^ (numberq_ /; numberq < 0)] :=
  ArcSec [coef^-1 * base ^ -numberq];

GentleSimplifiedArcCos [anythingElse_] := ArcCos [anythingElse];

Protect [GentleSimplifiedArcCos];


(* ::Subsubsubsection::Closed:: *)
(*GentleSimplifiedArcSin :*)


(* FullSimplify does this, but not as quickly: *)

Unprotect [GentleSimplifiedArcSin];
ClearAll [GentleSimplifiedArcSin];

GentleSimplifiedArcSin [reciprocal_Rational /; Abs[Numerator [reciprocal]] === 1] :=
  ArcCsc [reciprocal ^ -1];

GentleSimplifiedArcSin [coef_. * (base_/; base > 0) ^ (numberq_ /; numberq < 0)] :=
  ArcCsc [coef^-1 * base ^ -numberq];

GentleSimplifiedArcSin [anythingElse_] := ArcSin [anythingElse];

Protect [GentleSimplifiedArcSin];


(* ::Subsubsubsection::Closed:: *)
(*GentleSimplifiedArcTan :*)


Unprotect [GentleSimplifiedArcTan];
ClearAll [GentleSimplifiedArcTan];

GentleSimplifiedArcTan [reciprocal_Rational /; Abs[Numerator [reciprocal]] === 1] := ArcCot [reciprocal ^ -1];

GentleSimplifiedArcTan [coef_. * (base_/; base > 0) ^ (numberq_ /; numberq < 0)] :=
  ArcCot [coef^-1 * base ^ -numberq];

GentleSimplifiedArcTan [anythingElse_] := ArcTan [anythingElse];

Protect [GentleSimplifiedArcTan];


(* ::Subsubsubsection::Closed:: *)
(*MaybeDistributeSign :*)


MaybeDistributeSign [sign_, multiplier_, cofactor_] :=
  If [sign === -1,
      Which [Head [cofactor] === Plus,
               multiplier * (-cofactor),
             Head [cofactor] === Power && Last[cofactor] === -1 && Head [First [cofactor]] === Plus,
               multiplier / -First[cofactor],
             True,
               -multiplier * cofactor],
      multiplier * cofactor];


(* ::Subsubsubsection::Closed:: *)
(*PalindromicScaleFactorOrFalse :*)


PalindromicScaleFactorOrFalse [coefList_] :=
  Module [{degree = Length [coefList] - 1,
           isPalindromicOrAnti = True,
           scaleFactor, sign},
    Assert [First [coefList] != 0 && Last [coefList] != 0];
    (* Would it be faster to first check for correct sign pattern?: *)
    scaleFactor = First [coefList] / Last [coefList];
    sign = Sign [scaleFactor];
    scaleFactor = Abs[scaleFactor] ^ (degree ^ -1);
    If [EvenQ [degree] && sign =!= 1 && coefList[[1 + Quotient [degree, 2]]] =!= 0,
        Return [False]];
    Do [isPalindromicOrAnti = QuietPossibleZeroQ [coefList[[k]] -
                                sign * scaleFactor^(degree + 2 - 2*k) * coefList[[2 + degree - k]]];
        If [! isPalindromicOrAnti,
            Break []],
        {k, 2, Ceiling[degree/2]}];
    If [isPalindromicOrAnti,
        sign*scaleFactor,
        False]];


(* ::Subsubsubsection::Closed:: *)
(*QuietTimeConstrainedFullSimplify :*)


QuietTimeConstrainedFullSimplify [expression_] :=
  With [{result = Quiet [TimeConstrained [FullSimplify [expression,
                                                        ComplexityFunction -> Entropy10],
                                          $TimeUnitForTimeConstrainedFullSimplify]]},
    If [result === $Aborted,
        Quiet [TimeConstrained [Simplify [expression, ComplexityFunction -> Entropy10],
                                $TimeUnitForTimeConstrainedSimplify,
                                If [$reportTimeoutQ, Print [{QuietTimeConstrainedFullSimplify, expression}]];
                                expression]],
        result]];


(* ::Subsubsubsection::Closed:: *)
(*QuietTimeConstrainedReComplexExpand :*)


QuietTimeConstrainedReComplexExpand [expression_] :=
  Quiet [TimeConstrained [Re [ComplexExpand [expression]],
                          $TimeUnitForTimeConstrainedComplexExpand,
                          If [$reportTimeoutQ, Print [{QuietTimeConstrainedReComplexExpand, expression}]];
                          expression]];


(* ::Subsubsubsection::Closed:: *)
(*QuietTimeConstrainedSimplify :*)


QuietTimeConstrainedSimplify [expression_] :=
  Quiet [TimeConstrained [Simplify [expression, ComplexityFunction -> Entropy10],
                          $TimeUnitForTimeConstrainedSimplify,
                          If [$reportTimeoutQ, Print [{QuietTimeConstrainedSimplify, expression}]];
                          expression]];


(* ::Subsubsubsection::Closed:: *)
(*TryLinCombLinFracCombBasisPairsFromRoot :*)


TryLinCombLinFracCombBasisPairsFromRoot [pairs_, coefList_, root_] :=
  Module [{foundEquivalentQ = False,
           minusFloatRoot = -N[root, Max [MachinePrecision, 0.5*Entropy10[root]]],
           pair, basis, basisLength, denominator, candidate, alternate},
    Do [pair = pairs[[k]];
        basis = First [pair]; 
        candidate = Quiet [FindIntegerNullVector [Append [basis, minusFloatRoot],  Max [30, 0.1 * Norm [coefList]]]];
(*Print [{TryLinCombLinFracCombBasisPairsFromRoot, basis, 0.25*Norm[coefList], candidate}];*)
        If [Head[candidate] === List && Last[candidate] =!= 0 && QuietPossibleZeroQ [root -
                                        (candidate = Most[candidate].basis/Last[candidate])],
            foundEquivalentQ = True,
            candidate = root];
        basis = Last [pair];
        basisLength = Length [basis];
        alternate =  Quiet [FindIntegerNullVector [Join [basis,
                      -N[root, Max [MachinePrecision, 0.5*Entropy10[root]]] * basis],
                                                         Max [30, 0.1 * Norm [coefList]]]];
(*Print [{TryLinCombLinFracCombBasisPairsFromRoot, basis, basisLength, 0.25*Norm[coefList], alternate}];*)
        If [Head[alternate] === List && 0 =!= (denominator = basis . Drop[alternate, basisLength]) &&
              QuietPossibleZeroQ [root - (alternate = (basis.Take[alternate, basisLength])/denominator)],
            foundEquivalentQ = True,
            alternate = root];
        If [foundEquivalentQ,
            If [alternate =!= root && (candidate === root || Entropy10 [alternate] < Entropy10 [candidate]),
                candidate = alternate];
            Break []],
        {k, Length [pairs]}];
    candidate];


(* ::Subsubsubsection::Closed:: *)
(*VieteOrShiftedBinomialCubicSolution :*)


VieteOrShiftedBinomialCubicSolution [coefList_, rootOrTrue_:True] :=
  (* For rootOrTrue:  True => we want the simplest real root.
                      Root [polynomial, n] => we want that root. *)
  Module [{foundExplicit = False,
           candidate, a, b, c, d, p, q, r, t},
    Assert [Length [coefList] === 4];
    {d, c, b, a} = coefList;
    (* The following idea increases complexity for Root [2x^3 +3x^2 - 8, 1]: *)
    p = (3*a*c - b^2) / (9*a^2);
    Which [
      p === 0,
        FromRootIfShiftedBinomialOrReciprocalThereof [coefList, rootOrTrue],
      q =(2*b^3 - 9*a*b*c + 27*a^2*d) / (27*a^3);
      d = b / (-3*a);
      4*p^3 + q^2 < 0,  (* => 3 real roots *)
        Assert [p < 0];
        r = (-p) ^ (3/2);
        t = q / (-2*r);
        Assert [-1 <= t <= 1];
        t = ArcCos [t];
        r = 2 Sqrt [-p];
        Do [candidate = d + r * Cos [(t + 2*k*Pi) / 3];
            If [TrueQ [rootOrTrue] || QuietPossibleZeroQ [candidate - rootOrTrue],
                foundExplicit = True;
                Break []],
           {k, 0, 2}];
        If [foundExplicit,
            candidate,
            ToRadicals [rootOrTrue]],
      TrueQ [rootOrTrue] || Quiet [Im [rootOrTrue] === 0],
        candidate = d - 2 * If [p < 0,
                                r = Sqrt [-p];
                                t = (-1/2)*Abs[q]/(p*r);
                                Assert [t >= 1];
                                Sign[q] * r * Cosh [(1/3)*ArcCosh [t]],
                            (* else p > 0: *)
                                r = Sqrt [p];
                                r * Sinh [(1/3)*ArcSinh [(1/2)*q/(p*r)]]];
        Assert [TrueQ [rootOrTrue] || QuietPossibleZeroQ [candidate - rootOrTrue]];
        candidate,
      True,
        ToRadicals [rootOrTrue]]];


(* ::Subsubsection::Closed:: *)
(*Definitions of non-builtin Named constants*)


N [AlladiGrinstead, precision_] := N [0.809394020540639130717931880594091317215953992425000304242028715042999012516547322311518407819723616915,
                                      precision];

N [AtkinsonNegroSantoro, precision_] := N [0.3166841736527058202183565723082883296466799543917083446022005688202001402126146825656501789825504004,
                                           precision];

N [AverageClassNumber, precision_] := N [0.88151383972517077692839182290322784712986925720807673367016853554865790637941697410220455179702096,
                                         precision];

N [Backhouse, precision_] := N [1.45607494858268967139959535111654355765317837484713154027070243741400150626538989559964531940186030910992,
                                precision];

(*N [Baxter, precision_] := N [1.2087177032, precision];*)

N [Bendersky2nd, precision_] := N [1.03091675219739211419331309646694229063319430640348706022726174114516606697829040529293136255480885,
                                   precision];

N [Bernstein, precision_] := N [0.28016949902386913303643649123067200004248213981236, precision];

N [BinarySelfNumbersDensity, precision_] := N [0.2526602590088829221550627143278941418252193396297846130168621722922805484476632566959142447938688949,
                                                       precision];

N [BrownWang, precision_] := N [2.1102339661215721964668281566638451896421130294150648422352312162658970581440133437362918628330122339,
                                precision];

(*N [Brun, precision_] := N [1.902160583104, precision];*)

N [Cahen, precision_] := N [0.643410546288338026182254307757564763286587860268239505987030920307492776461832610848440895550463431954053,
                            precision];

N [Carefree, precision_] := N [0.42824950567709444021876570758182354612129851335593614403190137953212305216108304410534851452468068,
                               precision];

N [Conway, precision_] := N [1.30357726903429639125709911215255189073070250465940487575486139062855088785246155712681576686442522555,
                             precision];

N [ConwayGuy, precision_] := N [0.2351252848111748656355881743918790098809845195835295985826779663167031905137132487471409000015003117,
                                precision];

(*N [DeVicciTesseract, precision_] := N [1.0074347569, precision];*)

N [Dottie, precision_] := N [0.739085133215160641655312087673873404013411758900757464965680635773284654883547594599376106931766531849801246,
                             precision];

N [Elbert, precision_] := N [0.9780124781866462202018279599786826809325386353459141809495304208345994492580710697500556689852039265924,
                             precision];

N [ErdosBorwein, precision_] := N [1.60669515241529176378330152319092458048057967150575643577807955369141842074348669056571180167015557589704,
                                   precision];

N [EulerGompertz, precision_] := N [0.596347362323194074341078499369279376074177860152548781573484910482327219114874417470430497093612760344237,
                                    precision];

N [FeigenbaumAlpha, precision_] := N [2.502907875095892822283902873218, precision];

N [FeigenbaumDelta, precision_] := N [4.669201609102990671853203820466201617258185577475768632745651343004134330211314737138689744023948013817165984855189815134408627142027932522312442988890890859944935463236713411532481714219947455644365823793202009561058330575458617652222070385410646749494284981453391726200568755665952339875603825637225,
                                      precision];

N [FellerTornier, precision_] := N [0.66131704946962233528976584627411853328547528983291635498090562622662503174312230494226174078428187,
                                    precision];

N [FibonacciFactorial, precision_] := N [1.22674201072035324441763023045536165587140969044025041964329730121402213831531216845262156249479774125913,
                                         precision];

N [FibonacciReciprocal, precision_] := N [3.35988566624317755317201130291892717968890513373196848649555381532513031899668338361541621645679008729704,
                                                 precision];

(*N [FineStructureConstant, precision_] := N [0.0072973525664, precision];*)

N [FlajoletMartin, precision_] := N [0.773516290908445304073302585707401200356744476235020761270286428758740158179879010055687,
                                     precision];

N [FlajoletOdlyzko, precision_] := N [0.757823011268492837742175683980099782523658585646080197027095558654241439004660690066868943462388606132170,
                                      precision];

N [Foias, precision_] := N [1.18745235112650105459548015839651935121569268158586035301010412619878041872352540738702465760608657943378,
                            precision];

N [FransenRobinson, precision_] := N [2.80777024202851936522150118655777293230808592093019829122005480959710088912190166551018530816819663814187,
                                      precision];

N [GaussKuzminWirsing, precision_] := N [0.303663002898732658597448121901556233110877352253657895188245481467226995294246910984340811934363636811098,
                                         precision];

N [GeneralizedStirling, precision_] := N [1.003178227954292425605050013364980219099497455080459940584934140428880039199042671382435280164041962,
                                          precision];

N [Gieseking, precision_] := N [1.01494160640965362502120255427452028594168930753029979201748910677659747625824402213647035422825669494586,
                                precision];

N [GohSchmutz, precision_] := N [1.11786415118994497314040996202656544416311551204128842650628651401605455184203859181488007356500527129127,
                                 precision];

N [GohSchmutzB, precision_] := N [2.990470399371904798778275169420631039885377699930109355059036923225406102119867956871658197564811011,
                                  precision];

N [GolombDickman, precision_] := N [0.624329988543550870992936383100837244179642620180529286973551902495638088855113254462460276195539868869,
                                    precision];

N [GrazingGoat, precision_] := N [1.15872847301812151782823350993350914968829226649209651182069588482066980255919609319932161073086043817596,
                                  precision];

N [Grossman, precision_] := N [0.737338303369284964205595712487438717934551857465797864769389146671411949653233937275439,
                               precision];

N [HafnerSarnakMcCurley, precision_] := N [0.3532363718549959845435165504326820112801, precision];

N [HallMontgomery, precision_] := N [0.171500493141536065860439971555212109622262904229550841714211091823698605594308577987971198086800817306423,
                                     precision];

N [HardHexagonEntropy, precision_] := N [1.39548597247930273522950066356688806895410372814466119081747215613576088035869777468983787308527542790,
                                         precision];

N [HardSquareEntropy, precision_] := N [1.5030480824753322643220663294755536893857810, precision];

N [HeathBrownMoroz, precision_] := N [0.001317641154853178109817352322513585951250734323295251678792547422,
                                      precision];

N [John, precision_] := N [7.1879033516410622944051175492444210675457841854154287549580666372820052664400940674349508855853882748,
                           precision];

N [KeplerBouwkamp, precision_] := N [0.1149420448532962007010401574695987428307953372008635168440233965189660128253530511779407724849858369937634,
                                     precision];

N [KneserMahlerBeta, precision_] := N [1.381356444518497793371466956850624126289637262239070560198764845300554963636636245408639767954428116,
                                       precision];

N [KomornikLoreti, precision_] := N [1.78723165018296593301327489033700838533793140296181099778478147050555749175060568699131001863407533302,
                                     precision];

N [KuijlaarsSaff, precision_] := N [0.5530512933575951867799510370871247745508028576019661776330407097059538788407712541687053732631682913,
                                    precision];

(*N [Lal, precision_] := N [0.7922082381, precision];*)

N [LandauRamanujan, precision_] := N [0.7642236535892206629906987312500923281167905413934095147216866737496146416587328588384015050131312337219372691207925926341874206467808432306331543462938053160517116963617750881996124382499427768346905162351392187196205690532956446704,
                                      precision];

N [LaplaceLimit, precision_] := N [0.66274341934918158097474209710925290705623354911502241752039253499097185308651127724965480259895818168,
                                   precision];

N [Lehmer, precision_] := N [0.5926327182016361971040786049957014690842754071971610710995626081582473523641600085106647842971012570511871834654238696349260297206760,
                             precision];

N [Lengyel, precision_] := N [1.09868580552518701301774632572133180793122207106442684074104278157832174436966560823224239174474979906605,
                              precision];

N [Lebesgue1st, precision_] := N [1.4359911241769174323559863299592722161281062940666146389320653739153939402718729230140933909796751117487,
                                  precision];

N [Lebesgue2nd, precision_] := N [1.642188435222121136873627988922940344183823455484887430077620420770466569552502492845640833277007971,
                                  precision];

N [Lebesgue3rd, precision_] := N [1.778322861525875862960961188959283135441615191461574508066345991237606055185700573101526397147234052,
                                  precision];

N [LemniscateArclength, precision_] := N [5.24411510858423962092967917978223882736550990286324632563364340760158117414082850046059106592285816,
                                          precision];

N [LurothLevy, precision_] := N [2.0462774528558785910701761540225234147723276934262138951287680371128969574215630759626900321602739,
                                 precision];

N [LurothKhintchine1st, precision_] := N [0.788530565911508961060276324280770015958614212765454470757277844082852408960598480005073964827294512,
                             precision];

N [LurothKhintchine2nd, precision_] := N [2.20016105809902655319455786837775171022813907537334115273494259436978869061563134996922308501043003,
                                          precision];

N [Madelung3DNaCl, precision_] := N [-1.7475645946331821906362120355443974034851614366247417581528253507,
                               precision];

N [MadelungHexagonal, precision_] := N [1.542219721706505258531415764364245295619480735913154785388164019086321819367696748233911318744368075023,
                                        precision];

N [Magata, precision_] := N [3.40706916562725614221945826282718065355403443801503211619103382757296993870410351430099004093894741087871,
                             precision];

N [MasserGramainC, precision_] := N [0.6462454398948133042664733968457927900220129129631577293303862469929830110002892800527794311317660788130134302015839`98,
                              precision];

N [Mill, precision_] := N [1.30637788386308069046861449260260571291678458515671364436805375996643405376682659882150140370119739570729,
                           precision];

N [MinkowskiBower, precision_] := N [0.420372339423223075640993006646221873949189866600611871291654664686553370885979080355743905603928336,
                                     precision];

(*N [MovingSofa, precision_] := N [2.21953166887197, precision];*)

N [MrsMiniver, precision_] := N [0.2649320846027768624341164947625710686501900660413644528787448932920902508706886389727349852337461844,
                                 precision];

N [Murata, precision_] := N [2.82641999706759157554639174723695374901304110545926687617974583453075762445976240553345866498818445,
                             precision];

N [Myrberg, precision_] := N [1.40115518909205042685880944959124628604700482745542258296271002237985545736745536671523343560204504980,
                              precision];

N [Niven, precision_] := N [1.70521114010536776428855145343450816076202765165346909999428490654731319216812249193424413210087100179,
                            precision];

N [Norton, precision_] := N [0.065351425923037321378782626763107930813024536849423797659071449681577075805431994946942068716364558997423,
                             precision];

N [OdlyzkoWilf, precision_] := N [1.62227050288476731595695098289932411306610556231303743218544338737843399972748447638361653983323341100,
                                  precision];

N [OneNinth, precision_] := N [0.107653919226484576615323445090947190587976563290115086698568146981924341462642643412776199040915873192967,
                               precision];

N [PaperFolding, precision_] := N [0.850736188201867260367797760532066604411399493082710647728168261031830158459319445348545982642193923996091,
                                   precision];

N [Paris, precision_] := N [1.09864196439415648573466891734359621087334839610829716721183305327871989204353133248992889552479994664,
                            precision];

N [Pell, precision_] := N [0.580577558204892402290043892297025747766046765607333250919550083368227949127290806089976754525761804497141,
                           precision];

N [Plate, precision_] := N [3.196220616582541093980527403403720341599081111620222046842270364232333117297615245112627002175220961,
                            precision];

N [PlouffeK, precision_] := N [0.475626076735988554804977252904954714281960531353822752895811134209574040287498400471273876885629523204,
                             precision];

N [Porter, precision_] := N [1.46707807943397547289779848470722995344990332241488777739968581761660674432904480843036932751117401521266,
                             precision];

N [PrimeReciprocal, precision_] := N [0.261497212847642783755426838608695859051566648261199206192064213924924510897368209714142631434246651051617,
                                      precision];

N [ProuhetThueMorse, precision_] := N [0.412454033640107597783361368258455283089478374455769557573379415348793592365782588963804540486212133396256,
                                       precision];

N [QuadraticResidues1st, precision_] := N [3.1477551485024003125166749558797692092729377487933988640596470206647811800916724677997945209488287978691,
                                        precision];

N [QuadraticResidues2nd, precision_] := N [3.67464396601132877899567630908402941167779758877943732831220522017637986704482836041745476457880190113752,
                                           precision];

N [Rabbit, precision_] := N [0.7098034428612913146417873994445755970125022057678605169570026446512871281484659624783161324599938839265,
                             precision];

N [RamanujanSoldner, precision_] := N [1.45136923488338105028396848589202744949303228364801586309300455766242559575451783565953135771108682884,
                                       precision];

(*N [ReciprocalFineStructureConstant, precision_] := N [137.03599914, precision];*)

N [RobinsonA, precision_] := N [2.30384219628377042211237560888226784697119607782880853421930517308563516958906163842260622536386570046189,
                                precision];

N [RobinsonB, precision_] := N [3.30384219630718251298905725146305146363000806852201418586337176944971045473037932257127739941160995184,
                                precision];

N [RobinsonC, precision_] := N [2.22475148098058301537559892492419042423636670798246670169456331574712987866226242784668405661649462359246,
                                precision];

N [RobinsonD, precision_] := N [3.44935889025974041595132185125388836034562450382541591088149410057556960688721013570376942859613360881981,
                                precision];

N [Rod, precision_] := N [4.73004074486270402602404810083388481989834180070684868909635584536913666985201318218195489392732091658591,
                          precision];

N [Rosser, precision_] := N [1.2013035599673622412475559592073834824538384494271130851819559741480099779437752259670643184861976088,
                             precision];

N [Salem, precision_] := N [1.17628081825991750654407033847403505069341580656469525983010634702968837654854996209683011558181539465920,
                           precision];

(*N [Shallit, precision_] := N [1.369451403937, precision];*)

N [ShapiroDrinfeld, precision_] := N [0.4945668172234965261217451541331689906901740490220911095196789390436914477133789790769018837544040194712,
                                      precision];

N [Sierpinski, precision_] := N [2.58498175957925321706589358738317116008805165185263091732154498797193204400115712021111772452706428303134,
                                 precision];

N [StolarskyHarborth, precision_] := N [0.81255655901600638769488210164953671243441922490636156678320347580366003142762953508246848982797937869,
                                        precision];

N [StronglyCarefree, precision_] := N [0.28674742843447873410789271278983844643433184409705699564147785933665224313194325824891268255374237,
                                       precision];

N [TakeuchiPrelberg, precision_] := N [2.239433104005260731754785, precision];

N [TriangularEntropyOfFolding, precision_] := N [0.18956004831635996591772420111696966020428507621463668158517960098732193312542435956788617762034004004138,
                                                 precision];

N [Trott1, precision_] := N [0.10841015122311136151129081140641509112215809093909091, precision];

N [TwinPrime, precision_] := N [0.660161815846869573927812110014555778432623360284733413319448423335405642304495277143760031413839867911779,
                               precision];

N [Ubiquitous, precision_] := N [0.847213084793979086606499123482191636481445910326942185060579372659734004834134759723200293994611229942,
                                 precision];

(*N [Vallee, precision_] := N [0.1994588183, precision];*)

N [VanDerCorput, precision_] := N [3.36431757815589910606771338650344126945671165216123542095557778081362782116856232377457634773739093410938,
                                   precision];

(*N [Viswanath, precision_] := N [1.1319882487943, precision];*)

N [Weierstrass, precision_] := N [0.474949379987920650332504636327982968559549373217202982283331024864557929174883860274275641250502144418903,
                                  precision];

N [Zagier, precision_] := N [0.180717104711806478057792649049167621476305627670882734805388896650560768,
                             precision];

N [ZolotarevSchur, precision_] := N [0.311078866704819209027546959091421802648957158432858674549494917067957528319202753307120527163849517158703,
                                     precision];


(* ::Subsubsection::Closed:: *)
(*Other functions*)


(* ::Subsubsubsection::Closed:: *)
(*Agreement :*)


Unprotect [Agreement];

Agreement [float_Real, nonFloatConstant_? NumericQ] :=
  Module [{NOfnonFloatConstant = Quiet [
             If [MachineNumberQ [float],
                 N [nonFloatConstant, $MachinePrecision + $AccuracyIncForArbPrecisionSubtract],
                 N [nonFloatConstant,
                    {Infinity, $AccuracyIncForArbPrecisionSubtract + Accuracy[float]}]]],
           maxAbs, absDifference},
    (* :I do not do N[float - nonFloatConstant, ...] because its adaptive algorithm can
       require unwarranted time when the difference is 0.0 or nearly so: *)
    maxAbs = Max [Abs[float], Abs[NOfnonFloatConstant]];
    If [maxAbs == 0,
        If [MachineNumberQ [float],
            $MachinePrecision,
            Accuracy [float]],
    (* else maxAbs != 0: *)
        absDifference = Abs [NOfnonFloatConstant -
                             If [MachineNumberQ [float],
                                 SetPrecision [float, $AccuracyIncForArbPrecisionSubtract +
                                                      $MachinePrecision],
                                 SetAccuracy [float, $AccuracyIncForArbPrecisionSubtract +
                                                     Accuracy [float]]]];
        If [absDifference == 0,
            If [MachineNumberQ [float],
                $MachinePrecision,
                $AccuracyIncForArbPrecisionSubtract + Precision [float]],
            -RealExponent [absDifference / maxAbs]]]];

Protect [Agreement];


(* ::Subsubsubsection::Closed:: *)
(*Entropy10 :*)


Unprotect [Entropy10];

ClearAll [Entropy10];

Entropy10 [0.0] := 0.1;

Entropy10 [integer_Integer] :=
  Which [Abs [integer] === 1,  0.2,
         integer =!= 0,        RealExponent [integer],
         True,                 0.1] + If [integer < 0,  0.25,  0.0];

Entropy10 [rat_Rational] :=
  0.75 + Entropy10 [Numerator [rat] * Denominator [rat]];

  (* Should not occur for Propose[...], but included for completeness: *)
Entropy10 [Complex [re_, im_]] :=
  1.5 + Entropy10 [re] + Entropy10 [im];

  (* Should not occur for Propose[...], but included for completeness: *)
Entropy10 [_DirectedInfinity] := Infinity;

  (* Should not occur for Propose[...], but included for completeness: *)
Entropy10 [Indeterminate] := Infinity;

  (* Should not occur for Propose[...], but included for completeness: *)
Entropy10 [real_Real] :=
  Which [real === Underflow [],  Infinity,
         real === Overflow [],   Infinity,
         MachineNumberQ [real],  $PrecisionOfMachineNon0,  (* ?? *)
         True,                   Precision [real]];

Entropy10 [Pi] := 0.5;

Entropy10 [E] := 0.625;

Entropy10 [EulerGamma | Catalan | Glaisher | Khinchin] := 1.0;

Entropy10 [_? AtomQ] := 2.0;

Entropy10 [Sqrt [base_]] := $CommonFunctionEntropy10 + Entropy10 [base];

Entropy10 [Root [pureFunction_, ___]] :=
  Entropy10 [pureFunction] - $PureFunctionEntropy10Overhead;

Entropy10 [functionalForm_] :=
  With [{head = Head [functionalForm]},
    Total [Map [Entropy10, Apply [List, functionalForm]]]
     + Max [1.0, Length [functionalForm] - 1] 
       * Which [head === Plus,            0.5,
                head === Times,           0.625,
                MemberQ [$CommonFunctionList, head],     $CommonFunctionEntropy10,
                MemberQ [$LessCommonFunctionList, head], $LessCommonFunctionEntropy10,
                (*head === Unevaluated,            0.0,*) (* :Neither this nor Hold* worked *)
                True,                                    $RareFunctionEntropy10]];

Protect [Entropy10];


(* ::Subsubsubsection::Closed:: *)
(*dirichletBeta :*)


(* The purpose of this function is to provide a low-Entropy10 DirichletBeta that does not
   unavoidably transform non-float arguments into high-Entropy10 expressions: *)

Unprotect [dirichletBeta];
  dirichletBeta [inexactNumberQ_? InexactNumberQ] := DirichletBeta [inexactNumberQ];
Protect [dirichletBeta];

(* To subsequently cause the transformation in an expression containing dirichletBeta[...],
   do  expression /. dirichletBeta -> DirichletBeta  *)


(* ::Subsubsubsection::Closed:: *)
(*dirichletEta :*)


(* The purpose of this function is to provide a low-Entropy10 DirichletEta that does not
   unavoidably transform non-float arguments into high-Entropy10 expressions: *)

Unprotect [dirichletEta];
dirichletEta [inexactNumberQ_? InexactNumberQ] := DirichletEta [inexactNumberQ];
Protect [dirichletEta];

(* To subsequently cause the transformation in an expression containing dirichletEta[...],
   do  expression /. dirichletEta -> DirichletEta  *)


(* ::Subsubsubsection::Closed:: *)
(*dirichletLambda :*)


(* The purpose of this function is to provide a low-Entropy10 DirichletLambda that does not
   unavoidably transform non-float arguments into high-Entropy10 expressions: *)

Unprotect [dirichletLambda];
  dirichletLambda [inexactNumberQ_? InexactNumberQ] := DirichletLambda [inexactNumberQ];
Protect [dirichletLambda];

(* To subsequently cause the transformation in an expression containing dirichletLambda[...],
   do  expression /. dirichletLambda -> DirichletLambda  *)


(* ::Subsubsubsection::Closed:: *)
(*ellipticNomeQ :*)


(* The purpose of this function is to provide a low-Entropy10 EllipticNomeQ that does not
   unavoidably transform non-float arguments into high-Entropy10 expressions: *)

Unprotect [ellipticNomeQ];
  ellipticNomeQ [inexactNumberQ_? InexactNumberQ] := EllipticNomeQ [inexactNumberQ];
Protect [ellipticNomeQ];

(* To subsequently cause the transformation in an expression containing ellipticNomeQ[...],
   do  expression /. ellipticNomeQ -> EllipticNomeQ  *)


(* ::Subsubsubsection::Closed:: *)
(*InferMachineFloatPrecisionGoal :*)


InferMachineFloatPrecisionGoal [float_] :=
  Which [float == 0.0,            $MachinePrecision,
         MachineNumberQ [float],  $MinAllowedPrecisionGoal,
         _,                       Module [{precisionGoal = $realExponentOfGivenFloat,
                                           shiftedFloat = float},
                                    While [precisionGoal <= $MaxAllowedPrecisionGoalForMachineFloat
                                             && shiftedFloat != Round [shiftedFloat],
                                      ++ precisionGoal;
                                      shiftedFloat *= 10.0];
                                    Max [precisionGoal, $MinAllowedPrecisionGoal]]];


(* ::Subsubsubsection::Closed:: *)
(*largestBy :*)


largestBy [nonEmptylist_, functionName_] :=
  (* Mathematica version 10 MaximalBy subsumes this function, but I want to run in versions >= 8.0 *)
  Module [{element, largestElementSoFar},
    largestElementSoFar = First [nonEmptylist];
    Do [If [functionName [nonEmptylist[[k]]] > functionName [largestElementSoFar],
            largestElementSoFar = nonEmptylist[[k]]],
        {k, 2, Length [nonEmptylist]}];
    largestElementSoFar];


(* ::Subsubsubsection::Closed:: *)
(*log2 :*)


(* The purpose of this function is to provide a low-Entropy10 Log2 that does not
   unavoidably transform non-float arguments into high-Entropy10 expressions: *)

Unprotect [log2];
  log2 [inexactNumberQ_? InexactNumberQ] := Log2 [inexactNumberQ];
Protect [log2];

(* To subsequently cause the transformation in an expression containing log2 [...],
   do  expression /. log10 -> Log10  *)


(* ::Subsubsubsection::Closed:: *)
(*log10 :*)


(* The purpose of this function is to provide a low-Entropy10 EllipticNomeQ that does not
   unavoidably transform non-float arguments into high-Entropy10 expressions: *)

Unprotect [log10];
  log10 [inexactNumberQ_? InexactNumberQ] := Log10 [inexactNumberQ];
Protect [log10];

(* To subsequently cause the transformation in an expression containing log10[...],
   do  expression /. log10 -> Log10  *)


(* ::Subsubsubsection::Closed:: *)
(*QuietMod :*)


QuietMod [u_, v_] := Quiet [Mod [u, v]];


(* ::Subsubsubsection::Closed:: *)
(*QuietPossibleZeroQ :*)


QuietPossibleZeroQ [u_] := Quiet [If [NumericQ [u],
                                      PossibleZeroQ [u],
                                      N[u, 64] == 0] (* :because PossibleZeroQ can exhaust memory with, Cahen etc. *)];


(* ::Subsubsubsection::Closed:: *)
(*QuietQuotient :*)


QuietQuotient [dividend_, divisor_] := Quiet [Quotient [dividend, divisor]];


(* ::Subsubsubsection::Closed:: *)
(*IntegerOrRationalQ :*)


IntegerOrRationalQ [arg_] := IntegerQ [arg] || Head [arg] === Rational;


(* ::Subsubsubsection::Closed:: *)
(*inverseLogisticSigmoid :*)


  (* Not capitalized in case Mathematica introduces InverseLogisticSigmoid in a version after 10. *)
Attributes [inverseLogisticSigmoid] = {Listable, NumericFunction};

inverseLogisticSigmoid [z_] := -Log[-1 + 1/z];


(* ::Subsubsubsection::Closed:: *)
(*MinNon0Abs :*)


MinNon0Abs [list_] := Min [Abs [Select [list, # =!= 0 &]]];


(* ::Subsubsubsection::Closed:: *)
(*NumericContentAndPrimitivePartOfALinearCombination :*)


NumericContentAndPrimitivePartOfALinearCombination [integerCoefficients_, constants_] :=
  Module [{gcd = Apply [GCD, integerCoefficients],
           countPositiveCoefficients = Count [integerCoefficients, n_/; n > 0],
           countNegativeCoefficients = Count [integerCoefficients, n_/; n < 0],
           linearCombination},
    linearCombination = integerCoefficients / gcd;
    If [countNegativeCoefficients > countPositiveCoefficients,
        linearCombination *= -1;
        gcd *= -1];              (* : Combine with dividing out gcd ?? *)
    linearCombination = linearCombination . constants;
    If [! FreeQ [linearCombination, Log],
        linearCombination = GentleLogCombine [linearCombination]];
    {gcd, linearCombination}];


(* ::Subsubsubsection::Closed:: *)
(*RequestedDegreeRootApproximantOrFailed :*)


RequestedDegreeRootApproximantOrFailed [float_, degree_] :=
  Module [{root = Quiet [RootApproximant [float, degree]],
           poly},
    If [degree === 1,
        If [ExactNumberQ [root],
            root,
            $RootApproximantFailed],
    (* else degree > 1: *)
        If [degree === 2,
            If [NumberQ [root],
                $RootApproximantReturnedLowerDegree,  (* : because we have already presumably investigated degree 1. *)
                root],
        (* else degree > 2: *)
            If [Head [root] =!= Root,
              $RootApproximantFailed,
              poly = root[[1, 1]];
              If [degree === Exponent [poly, First [Variables [poly]]],
                  root,
                  $RootApproximantReturnedLowerDegree]]]]];


(* ::Subsubsubsection:: *)
(*SupplementSetWithEquivalents :*)


SupplementSetWithEquivalents [givenFloat_, rawCandidateRecords_] :=
  Module [{record, candidate, coefList, var, transformed, agreement, entropy10,
           ReapOriginalsAndSupplementsTag},
    Sort [First [Last [Reap [
      Do [record = rawCandidateRecords [[k]];
          candidate = First [record];
          Which [
            ! FreeQ [candidate, Root],
              transformed = FromRoot [candidate];
              If [FreeQ [transformed, Root],
                  agreement = Agreement [givenFloat, transformed];
                  entropy10 = Entropy10 [transformed];
                  If [! MemberQ [rawCandidateRecords, {transformed, _, _, _}],
                      Sow [{transformed, agreement, entropy10, agreement - entropy10},
                           ReapOriginalsAndSupplementsTag]];
                  If [! (FreeQ [transformed, Cosh] && FreeQ [transformed, Sinh]),
                      transformed = ToRadicals [candidate];
                      Assert [FreeQ [transformed, Complex]];
                      agreement = Agreement [givenFloat, transformed];
                      entropy10 = Entropy10 [transformed];
                      Sow [{transformed, agreement, entropy10, agreement - entropy10},
                           ReapOriginalsAndSupplementsTag]]],
            ! FreeQ [candidate, log10],
                transformed = candidate /. log10 -> Log10;
                agreement = record[[2]];
                entropy10 = Entropy10 [transformed];
                Sow [{transformed, agreement, entropy10, agreement - entropy10},
                     ReapOriginalsAndSupplementsTag],
            ! FreeQ [candidate, log2],
                transformed = candidate /. log2 -> Log2;
                agreement = record[[2]];
                entropy10 = Entropy10 [transformed];
                Sow [{transformed, agreement, entropy10, agreement - entropy10},
                     ReapOriginalsAndSupplementsTag],
            ! FreeQ [candidate, ellipticNomeQ],
                transformed = candidate /. ellipticNomeQ -> EllipticNomeQ;
                agreement = record[[2]];
                entropy10 = Entropy10 [transformed];
                Sow [{transformed, agreement, entropy10, agreement - entropy10},
                     ReapOriginalsAndSupplementsTag],
            ! FreeQ [candidate, dirichletBeta],
                transformed = candidate /. dirichletBeta -> DirichletBeta;
                agreement = record[[2]];
                entropy10 = Entropy10 [transformed];
                Sow [{transformed, agreement, entropy10, agreement - entropy10},
                     ReapOriginalsAndSupplementsTag],
            ! FreeQ [candidate, dirichletEta],
                transformed = candidate /. dirichletEta -> DirichletEta;
                agreement = record[[2]];
                entropy10 = Entropy10 [transformed];
                Sow [{transformed, agreement, entropy10, agreement - entropy10},
                     ReapOriginalsAndSupplementsTag],
            ! FreeQ [candidate, dirichletLambda],
                transformed = candidate /. dirichletLambda -> DirichletLambda;
                agreement = record[[2]];
                entropy10 = Entropy10 [transformed];
                Sow [{transformed, agreement, entropy10, agreement - entropy10},
                     ReapOriginalsAndSupplementsTag]];
          Sow [record, ReapOriginalsAndSupplementsTag],
          {k, Length[rawCandidateRecords]}], ReapOriginalsAndSupplementsTag]]],
          Last[#1] > Last[#2] &]];


(* ::Subsubsubsection::Closed:: *)
(*ToString1D :*)


Unprotect [ToString1D];
  ToString1D [expression_] := ToString [expression, InputForm];
Protect [ToString1D];


(* ::Subsubsubsection::Closed:: *)
(*VerbosifyCandidate :*)


Unprotect [VerbosifyCandidate];

VerbosifyCandidate [rawCandidateRecord_] :=
   With [{merit = Last [rawCandidateRecord]},
    {First [rawCandidateRecord],
     Agreement \[TildeEqual] rawCandidateRecord[[2]],
     Entropy10 \[TildeEqual] rawCandidateRecord[[3]],
     Which [merit < $LowestBadMerit,       $TerribleString,
            merit < $LowestPoorMerit,      $BadString,
            merit < $LowestMediumMerit,    $PoorString,
            merit < $LowestGoodMerit,      $MediumString,
            merit < $LowestExcellentMerit, $GoodString,
            True,                          $ExcellentString] \[TildeEqual] merit}];

Protect [VerbosifyCandidate];


(* ::Subsubsection::Closed:: *)
(*Einstein1 function*)


Unprotect [Einstein1];
ClearAll [Einstein1];  (* Abramowitz & Stegun Miscellaneous functions *)

(* This function always transforms to an exponential expression. *)

SetAttributes [Einstein1, {NumericFunction, Listable}];

Einstein1 [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  1 + (1/12)*zero^2;

(* Avoid catastrophic cancellation: *)

Einstein1 [z_ /; InexactNumberQ[z]
    && RealExponent [z] < -0.165*Precision[z]] :=
  1 - (1/12)*z^2;

Einstein1 [-x_] := Einstein1 [x];

Einstein1 [Infinity] := 0;

Einstein1 [-Infinity] := 0;

(*Einstein1 [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  1 - (1/12)*zero^2;*)

Einstein1 [anythingElse_] :=  With [{exp = Exp [anythingElse]},
                                     anythingElse ^ 2 * exp * (exp - 1) ^ -2];

Protect [Einstein1];


(* ::Subsubsection::Closed:: *)
(*RealInverseEinstein1*)


Unprotect [RealInverseEinstein1];
ClearAll [RealInverseEinstein1];

SetAttributes [RealInverseEinstein1, {NumericFunction, Listable}];

  (* General floating-point argument y: *)

RealInverseEinstein1 [y_Real /; 0 < y < 1] :=
  Module [{precision = Precision [y],
           guess = If [y > 0.5232355569850471`,
                       Sqrt [12.0 - 12.0 * y],
                       -2.0 * ProductLog [-1, -0.5 * Sqrt [y]]],
           guess2, var},
    (*guess2 = guess + Min [1.2*guess, guess + 0.5];
    guess = Max [0.99*guess, guess - 0.01];*)
    Quiet [FindRoot [Einstein1 [var] == y,
                     {var,  guess(*,  guess + 0.5*)},
(*EvaluationMonitor :> ++ $extraRealInverseCount,*)
                     (*Method -> "Secant",*)
                     WorkingPrecision -> Min [precision, $MinWorkingPrecision],
                     PrecisionGoal -> $InverseFunctionsPrecisionGoalFactor * precision,
                     AccuracyGoal -> If [y > 0.99,
                                         {0.0, $Einstein1AccuracyDelta + precision},
                                         {Infinity, 0.0}]]][[1,2]]];

RealInverseEinstein1 [y_,
                      zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  -RealInverseEinstein1 [zero + y];

RealInverseEinstein1 [one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  one - one;

RealInverseEinstein1 [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] :=
  Infinity;

  (* Branch 1 is the default: *)

RealInverseEinstein1 [y_,
                      one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  RealInverseEinstein1 [(one - one) + y];

RealInverseEinstein1 [] := {0, 1}; (* This is all real branches, with 1 being the rightmost. *)

Protect [RealInverseEinstein1];


(* ::Subsubsection::Closed:: *)
(*Einstein2 function*)


Unprotect [Einstein2];
ClearAll [Einstein2];  (* Abramowitz & Stegun Miscellaneous functions *)

(* This function always transforms to an exponential expression. *)

SetAttributes [Einstein2, {NumericFunction, Listable}];

(* Remove removable singularity at z = 0 for NumberQ arguments: *)

Einstein2 [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] := (1/2)*zero + 1;

(* Avoid catastrophic cancellation: *)

Einstein2 [z_ /; InexactNumberQ[z] && RealExponent [z] < -0.13*Precision[z]] :=
  1 + z (-1/2 + (1/12)*z);

Einstein2 [Infinity] := 0;

Einstein2 [anythingElse_] := anythingElse / (Exp [anythingElse] - 1);

Protect [Einstein2];


(* ::Subsubsection::Closed:: *)
(*RealInverseEinstein2*)


Unprotect [RealInverseEinstein2];
ClearAll [RealInverseEinstein2];

SetAttributes [RealInverseEinstein2, {NumericFunction, Listable}];

  (* Some special values: *)

RealInverseEinstein2 [one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  one - one;

RealInverseEinstein2 [zero_/; zero == 0 && Accuracy[zero] > $MinWholeNumberAccuracy] := Infinity;

  (* The general case for positive float or exact arguments: *)

  (* Avoid catastrophic cancellation: *)

RealInverseEinstein2 [y_Real /; RealExponent[y - 1] < -0.35*Precision[y]] :=
  -2 (-1+y);

RealInverseEinstein2 [y_/; y > 0] := -y - ProductLog [If [y < 1, -1, 0], -Exp [-y]*y];

  (* Other special values: *)

RealInverseEinstein2 [Infinity] := -Infinity;

  (* There is only one real branch: *)

RealInverseEinstein2 [y_,
    one_/; one == 1 && Accuracy[one] > $MinWholeNumberAccuracy] :=
  RealInverseEinstein2 [(one - one) + y];

RealInverseEinstein2 [] := {1, 1};

Protect [RealInverseEinstein2]; 


(* ::Subsection::Closed:: *)
(*Table lookup functions :*)


(* ::Subsubsection::Closed:: *)
(*TableIndexOfGLB*)


TableIndexOfGLB [absFloat_, arrayOfFloats_] :=
  (* The returned index is that of a strict lower bound
     unless Order [tableOfFloatNonFloatPairs[[1]], absFloat] === 0.
   I use Order [...] because unlike "<", it has a fuzziness tolerance of 0 *)
  Module [{lbIndex = 1,
           ubIndex = 1 + Length [arrayOfFloats],
           midIndex},
    While [ubIndex - lbIndex > 1,
      midIndex = Quotient [lbIndex + ubIndex, 2];
      If [Order [arrayOfFloats[[midIndex]], absFloat] === 1,
          (* tableOfFloatNonFloatPairs[[midIndex, 1]] < float *)
          lbIndex = midIndex,
          ubIndex = midIndex]];
    lbIndex];


(* ::Subsubsection::Closed:: *)
(*Functions for recognizing  rational * tableEntry :*)


(* This didn't really help: *)

(*ScalePositiveMachineFloatToHalfLEResultLT1Aux = Compile [{{positiveMachineFloat}},
  Module [{scaledFloat = positiveMachineFloat},
    While [scaledFloat < 0.5,
      scaledFloat = 2.0 * scaledFloat];
    While [scaledFloat >= 1.0,
      scaledFloat = 0.5 * scaledFloat];
    scaledFloat]];*)

(*ScalePositiveMachineFloatToHalfLEResultLT1 [positiveMachineFloat_] :=
  With [{scaledFloat = ScalePositiveMachineFloatToHalfLEResultLT1Aux [positiveMachineFloat]},
    {scaledFloat, If [scaledFloat > positiveMachineFloat,
                      Round [scaledFloat / positiveMachineFloat] ^ -1,
                      Round [positiveMachineFloat / scaledFloat]]}];*)


ScalePositiveMachineFloatToHalfLEResultLT1 [positiveMachineFloat_] :=
  Module [{scaledFloat = positiveMachineFloat},
    While [scaledFloat < 0.5,
      scaledFloat = 2.0 * scaledFloat];
    While [scaledFloat >= 1.0,
      scaledFloat = 0.5 * scaledFloat];
   {scaledFloat, If [scaledFloat > positiveMachineFloat,
                     Round [scaledFloat / positiveMachineFloat] ^ -1,
                     Round [positiveMachineFloat / scaledFloat]]}];


LookupScaledCandidatesWithMultipliers [absGivenFloat_, sign_, arrayOfFloats_,
                                       listOfNonFloats_, multiplierList_] :=
  Module [{multiplier, scaledFloat, scaledAbsFloat, scaleFactor, lbIndex, candidate},
    Do [multiplier = multiplierList[[j]];
        {scaledAbsFloat, scaleFactor} = ScalePositiveMachineFloatToHalfLEResultLT1 [
                                      SetPrecision [absGivenFloat / multiplier, MachinePrecision]];
        lbIndex = TableIndexOfGLB [scaledAbsFloat, arrayOfFloats];
        Do [If [Abs [scaledAbsFloat - arrayOfFloats[[k]]] >= $MaxRelErrForTableLookup,
                  (* :omit *scaledAbsFloat for speed, because scaledAbsFloat varies only betweeen .5 & 1 *)
                Break []];  (* :Next smaller neighbor is too far. *)
            ++$acceptableTableAgreementCount;
            candidate = ((sign * scaleFactor) * multiplier) * listOfNonFloats[[k]];
            candidate = FailSymbolOrRawCandidateRecord [candidate, Entropy10 [candidate]];
            If [Head [candidate] === List,
                $maxMeritSoFar = Max [$maxMeritSoFar, Last [candidate]];
                Sow [candidate, $ReapCandidateRecordsTag]],
            {k, lbIndex, 1, -1}];
        Do [If [Abs [scaledAbsFloat - arrayOfFloats[[k]]] >= $MaxRelErrForTableLookup,
                Break []];  (* :Next larger neighbor is too far. *)
            ++$acceptableTableAgreementCount;
            candidate = ((sign * scaleFactor) * multiplier) * listOfNonFloats[[k]];
            candidate = FailSymbolOrRawCandidateRecord [candidate, Entropy10 [candidate]];
            If [Head [candidate] === List,
                $maxMeritSoFar = Max [$maxMeritSoFar, Last [candidate]];
                Sow [candidate, $ReapCandidateRecordsTag]],
            {k, lbIndex + 1, Length [arrayOfFloats]}],
        {j, Length [multiplierList]}]];


(* ::Subsubsection::Closed:: *)
(*Functions for recognizing  rational + tableEntry :*)


DisplacePositiveFloatToHalfLEResultLT1 [positiveFloat_] :=
  {SetPrecision [Mod [positiveFloat, 1/2, 1/2], MachinePrecision],
   (1/2) * Quotient [positiveFloat, 1/2, 1/2]};


LookupDisplacedCandidatesWithDisplacements [absGivenFloat_, signOfGivenFloat_,
                                            arrayOfFloats_, listOfNonFloats_, displacementList_] :=
  Module [{zeroLEFracLEHalf, firstArgFullyDisplaced, multipleOfHalf,
           signedFirstArgFullyDisplaced, lbIndex, candidate},
    Do [zeroLEFracLEHalf = displacementList[[j]];
        {firstArgFullyDisplaced, multipleOfHalf} =
           DisplacePositiveFloatToHalfLEResultLT1 [absGivenFloat + displacementList[[j]]];
        (*If [multipleOfHalf === 0,
            Return [$Redundant]];*)  (* :Scale factor of 1 gives the same result -- perhaps more accurately. *)
        signedFirstArgFullyDisplaced = signOfGivenFloat * firstArgFullyDisplaced;
        lbIndex = TableIndexOfGLB [firstArgFullyDisplaced, arrayOfFloats];
        Do [If [Abs [firstArgFullyDisplaced - arrayOfFloats[[k]]] >= $MaxRelErrForTableLookup,
                  (* :omit *firstArgFullyDisplaced, because .5 < firstArgFullyDisplaced < 1 *)
                Break []];
            ++$acceptableTableAgreementCount;
            candidate = signOfGivenFloat * ((multipleOfHalf - zeroLEFracLEHalf) + listOfNonFloats[[k]]);
            candidate = FailSymbolOrRawCandidateRecord [candidate, Entropy10 [candidate]];
            If [Head [candidate] === List,
                $maxMeritSoFar = Max [$maxMeritSoFar, Last [candidate]];
                Sow [candidate, $ReapCandidateRecordsTag]],
            {k, lbIndex, 1, -1}];
        Do [If [Abs [firstArgFullyDisplaced - arrayOfFloats[[k]]] >= $MaxRelErrForTableLookup,
                Break []];
            ++$acceptableTableAgreementCount;
            candidate = signOfGivenFloat * ((multipleOfHalf - zeroLEFracLEHalf) + listOfNonFloats[[k]]);
            candidate = FailSymbolOrRawCandidateRecord [candidate, Entropy10 [candidate]];
            If [Head [candidate] === List,
                $maxMeritSoFar = Max [$maxMeritSoFar, Last [candidate]];
                Sow [candidate, $ReapCandidateRecordsTag]],
            {k, lbIndex + 1, Length [arrayOfFloats]}],
        {j, Length [displacementList]}]];


(* ::Subsection::Closed:: *)
(*Multiples of algebraic numbers, including rationals*)


(* ::Text:: *)
(*TrySqrtRationalTimesMultiplier,  TryQuadraticTimesMultiplier,  and TryReciprocalPowerOfRootApproximantTimesMultiplier alter the global variable   $doNotSeekHigherEffectiveDegree,  thus making Propose [..] and its callers not thread safe.*)
(**)
(*TO DO:  Redesign to avoid this.*)


(* ::Subsubsubsection::Closed:: *)
(*TryApproximatelyEqual :*)


TryApproximatelyEqual [floatToModel_, nonFloatConstant_] :=
  If [TrueQ [floatToModel == nonFloatConstant],
      FailSymbolOrRawCandidateRecord [nonFloatConstant, Entropy10 [nonFloatConstant]],
      $InsufficientMeritForRetentionAsReject];


(* ::Subsubsubsection::Closed:: *)
(*TryRationalTimesMultiplier :*)


TryRationalTimesMultiplier [floatToModel_, multiplierOrPair_:1] :=
  Module [{exactMultiplier, approximateMultiplier, candidate},
    If [Head [multiplierOrPair] =!= List,                      (* Do we still need this ?? *)
        exactMultiplier = multiplierOrPair;
        approximateMultiplier = N [exactMultiplier, $precisionOfGivenFloat],
        {exactMultiplier, approximateMultiplier} = multiplierOrPair];
    candidate = Quiet [RootApproximant [floatToModel / approximateMultiplier, 1]];
    If [ExactNumberQ [candidate],
        candidate *= exactMultiplier;
        FailSymbolOrRawCandidateRecord [candidate, Entropy10 [candidate]],
        $RootApproximantFailed]];


(* ::Subsubsubsection::Closed:: *)
(*TrySqrtRationalTimesMultiplier :*)


TrySqrtRationalTimesMultiplier [floatToModel_, multiplier_:1] :=
  Module [{ratio = floatToModel / multiplier,
           failSymbolOrRecord, candidate},
    candidate = Quiet [RootApproximant [ratio * ratio, 1]];
    If [ExactNumberQ [candidate],
        candidate = (Sign [ratio] * multiplier) * Sqrt [candidate];
        failSymbolOrRecord = FailSymbolOrRawCandidateRecord [candidate, Entropy10 [candidate]];
        If [! AtomQ [failSymbolOrRecord] && Last [failSymbolOrRecord] >= $LowestGoodMerit,
            $doNotSeekHigherEffectiveDegree = True];
        failSymbolOrRecord,
        $RootApproximantFailed]];


(* ::Subsubsubsection::Closed:: *)
(*TryQuadraticTimesMultiplier :*)


TryQuadraticTimesMultiplier [floatToModel_, multiplier_:1] :=
  Module [{ratio = floatToModel / multiplier,
           candidate, failSymbolOrRecord, entropy10, expanded, alternateCandidate, alternateEntropy10},
    candidate = Quiet [RootApproximant [ratio, 2]];
    Assert [candidate =!= Undefined];   (* :Conjecture *)
    If [candidate === Undefined || ExactNumberQ [candidate],
        Return [$RootApproximantReturnedLowerDegree]];

    If [FreeQ [candidate, Plus],   (* Eg: (1 + Sqrt[2])/3 *)  (* ?? *)
        (* Unlikely because of previous trial squaring, but it happens for N[Pi/Sqrt[2]]. *)
        candidate *= multiplier;
        failSymbolOrRecord = FailSymbolOrRawCandidateRecord [candidate, Entropy10 [candidate]];
        If [AtomQ [failSymbolOrRecord],
            Return [failSymbolOrRecord]];
        If [Last [failSymbolOrRecord] >= $LowestGoodMerit,
            $doNotSeekHigherEffectiveDegree = True];
        Return [failSymbolOrRecord]];

    entropy10 = Entropy10 [candidate];
    If [Head [candidate] === Plus,
        expanded = candidate;
        If [Head [Last [candidate]] === Times,
            (* Try factoring out the content: *)
            alternateCandidate = FactorSquareFree [candidate];
            If [alternateCandidate =!= candidate
                  && (alternateEntropy10 = Entropy10 [alternateCandidate]) <= entropy10,
                candidate = alternateCandidate;
                entropy10 = alternateEntropy10]],
    (* else candidate has a common denominator factored out, but not necessarily the numerator content: *)
        Assert [Head [candidate] === Times && Head [Last [candidate]] === Plus];
        If [Head [Last [Last [candidate]]] === Times,
            (* Try factoring out the content: *)
            alternateCandidate = FactorSquareFree [candidate];
            If [alternateCandidate =!= candidate
                  && (alternateEntropy10 = Entropy10 [alternateCandidate]) <= entropy10,
                candidate = alternateCandidate;
                entropy10 = alternateEntropy10]];
        (* Try distributing the denominator: *)
        expanded = Expand [candidate];
        If [Entropy10 [expanded] < entropy10,
            candidate = expanded]];

    candidate *= multiplier;
    failSymbolOrRecord = FailSymbolOrRawCandidateRecord [candidate, Entropy10 [candidate]];
    If [! AtomQ [failSymbolOrRecord] && Last [failSymbolOrRecord] >= $LowestGoodMerit,
        $doNotSeekHigherEffectiveDegree = True];
    failSymbolOrRecord];










































































(* ::Subsubsubsection::Closed:: *)
(*TryReciprocalPowerOfRootApproximantTimesMultiplier :*)


(* In practice, minimal degree d polynomials P in Root [P[#] &, m] are polynomials in #^k
     for some integer k > 1.
   When this occurs, for a give float F, RootApproximant [F^k, d/k] succeeds for
     significantly lower precision F than does RootApproximant [F, d].
   This function exploits that by trying this for all divisors k of d before trying Rootpproximant [F, d]. *)
TryReciprocalPowerOfRootApproximantTimesMultiplier [floatToModel_, effectiveDegree_, multiplier_:1] :=
  (* Tries models:  multiplier * RootApproximant [y, k] ^ (1 / (n - k)
     for n = 3, 4, ..., "precision limit", with k = 0, 1, ..., n - 1: *)
  Module [{ratio = floatToModel / multiplier,
           bestFailSymbolOrCandidateRecord = Null,
           failSymbolOrCandidateRecord, absRatio, signRatio, nMax, k, degree, exponent,
           radicand, candidate, polyInVar, var},
    Assert [effectiveDegree >= 3];
    If [$doNotSeekHigherEffectiveDegree, (* :We already found a Good algebraic # with lower effective degree *)
        Return [$FoundGoodOrBetterLowerDegree]];
    absRatio = Abs [ratio];
    signRatio = Sign [ratio];
    (* The resolvability of nth roots increases with Precision
       and decreases for large and small magnitude ratios: *)
    nMax = Floor [$numericPrecisionOfGivenFloat / Max [1.0, Abs [RealExponent [absRatio]]]];
    For [k = effectiveDegree,  k > 0,  --k,    (* :Change to Do[...] *)
        degree = 1 + effectiveDegree - k;
        If [k * degree > nMax,
            Continue []];
        radicand = Quiet [RootApproximant [absRatio ^ k, degree]];
        Switch [degree,
          1,  If [! ExactNumberQ [radicand],
                  If [bestFailSymbolOrCandidateRecord === Null,
                      bestFailSymbolOrCandidateRecord = $RootApproximantFailed];
                  Break []];
              candidate = radicand ^ (1 / k),
          2,  If [NumberQ [radicand],
                  If [bestFailSymbolOrCandidateRecord === Null,
                      bestFailSymbolOrCandidateRecord = $RootApproximantReturnedLowerDegree];
                  Break []];
              If [! NumericQ [radicand],
                  If [bestFailSymbolOrCandidateRecord === Null,
                      bestFailSymbolOrCandidateRecord = $RootApproximantFailed];
                  Break []];
              radicand = radicand ^ (1 / k);
              If [k === 2,
                  candidate = DenestSqrt [radicand];
                  If [Entropy10 [candidate] <= Entropy10 [radicand],
                      radicand = candidate]];
              candidate = radicand,
          _,  If [Head [radicand] =!= Root,
                  If [bestFailSymbolOrCandidateRecord === Null,
                      bestFailSymbolOrCandidateRecord = $RootApproximantFailed];
                  Break []];
              polyInVar = First[radicand][var];
              exponent = Exponent [polyInVar, var];
              If [degree > exponent,
                  If [bestFailSymbolOrCandidateRecord === Null,
                      bestFailSymbolOrCandidateRecord = $RootApproximantReturnedLowerDegree];
                  Break []];
              candidate = FromRootIfShiftedBinomialOrReciprocalThereof [
                            CoefficientList [polyInVar, var], radicand];
              If [Entropy10 [candidate] <= Entropy10 [radicand],
                  radicand = candidate];
              candidate = radicand ^ (1 / k);
              If [k === 2,
                  radicand = DenestSqrt [candidate];
                  If [Entropy10 [radicand] <= Entropy10 [candidate],
                      candidate = radicand]]];
        candidate = MaybeDistributeSign [signRatio, multiplier, candidate];
        failSymbolOrCandidateRecord = FailSymbolOrRawCandidateRecord [candidate, Entropy10 [candidate]];
        If [! AtomQ [failSymbolOrCandidateRecord] &&
              (AtomQ [bestFailSymbolOrCandidateRecord] ||
               Last [failSymbolOrCandidateRecord] > Last [bestFailSymbolOrCandidateRecord]),
            bestFailSymbolOrCandidateRecord = failSymbolOrCandidateRecord];
        If [!AtomQ [bestFailSymbolOrCandidateRecord] && 
               Last [bestFailSymbolOrCandidateRecord] > $LowestGoodMerit,
            $doNotSeekHigherEffectiveDegree = True;
            Break []]];  (* $LowestExcellentMerit ?? *)
    If [bestFailSymbolOrCandidateRecord === Null,
        $RootApproximantFailed,
        bestFailSymbolOrCandidateRecord]];


(* ::Subsection::Closed:: *)
(*Multiples of linear combinations*)


TryLinearCombinationTimesMultiplier [floatToModel_, set_, multiplier_:1] :=
  (* Map because otherwise high precision floatToModel returned bogus results for low-precision special constants: *)
  Module [{floatSet = Map[N [#, $precisionOfGivenFloat] &, set], (*:Why not also for TryLinFracComboTimesMultiplier?? *)
           integers, norm, numerators, gcd, candidate, entropy10, alternate, entropy10OfAlternate},
    If [Precision [floatSet] < $precisionOfGivenFloat,
        Return [$BasisHasInsufficientPrecision]];
    integers = Quiet [FindIntegerNullVector [Append [floatSet, -floatToModel/multiplier],
                                             $maxNullVectorNorm]];
(*If [! FreeQ [set, StieltjesGamma],
Print [{TryLinearCombinationTimesMultiplier, set, multiplier, integers}]];*)  (* :Example debug Print *)
    Which [
      Head [integers] =!= List,
        $NoNullVector,
      Last [integers] === 0,
        $ZeroDenominator,
      (norm = Norm [integers, 1]) > $maxNullVectorNorm,
        $ExcessNullVectorNorm,
      MinNon0Abs [Most[integers]] < norm * 10.0 ^(2.0 - $numericPrecisionOfGivenFloat), (* :prevent spurious epsilon terms. *)
        $MinisculeNullVectorComponent,
      True,
        {gcd, candidate} = NumericContentAndPrimitivePartOfALinearCombination [Most [integers], set];
        If [! FreeQ [candidate, E],
            candidate = GentleExponentialsToHyperbolic [candidate]];
        candidate = ((gcd / Last [integers]) * multiplier) * candidate;
        entropy10 = Entropy10 [candidate];
        If [Head [candidate] === Times,
            alternate = Expand [candidate];
            entropy10OfAlternate = Entropy10 [alternate];
            If [entropy10OfAlternate < entropy10,
                candidate = alternate;
                entropy10 = entropy10OfAlternate]];
        FailSymbolOrRawCandidateRecord [candidate, entropy10]]];


(* ::Subsection::Closed:: *)
(*Multiples of linear fractional combinations*)


TryLinFracComboTimesMultiplier [floatToModel_, numeratorConstants_,
                                denominatorConstants_,  multiplier_:1] :=
  Module [{integers = Quiet [FindIntegerNullVector [Join [numeratorConstants,
                        (- floatToModel / multiplier) * denominatorConstants],
                                                    $maxNullVectorNorm]],
           norm, primitiveNumerator, denominatorContent, primitiveDenominator,
           candidate, entropy10, numeratorContent, alternateCandidate, alternateEntropy10},
    Which [
      Head [integers] =!= List,
        $NoNullVector,
      (norm = Norm [integers, 1]) > $maxNullVectorNorm,
        $ExcessNullVectorNorm,
      MinNon0Abs [integers] < norm * 10.0 ^(2.0 - $numericPrecisionOfGivenFloat),
        $MinisculeNullVectorComponent,
      primitiveNumerator = Take [integers, Length [numeratorConstants]];
      ! MemberQ [primitiveNumerator, element_/; element =!= 0],
        $ZeroNumerator,
      primitiveDenominator = Drop [integers, Length [numeratorConstants]]; (*Take [integers, -Length [denominatorConstants]];*)
      ! MemberQ [primitiveDenominator, element_/; element =!= 0],
        $ZeroDenominator,
      True,
        {numeratorContent, primitiveNumerator} =
           NumericContentAndPrimitivePartOfALinearCombination [primitiveNumerator, numeratorConstants];
        If [! FreeQ [primitiveNumerator, E],
            primitiveNumerator = GentleExponentialsToHyperbolic [primitiveNumerator]];
        {denominatorContent, primitiveDenominator} =
           NumericContentAndPrimitivePartOfALinearCombination [primitiveDenominator, denominatorConstants];
        If [! FreeQ [primitiveDenominator, E],
            primitiveDenominator = GentleExponentialsToHyperbolic [primitiveDenominator]];
        candidate = primitiveNumerator / primitiveDenominator;
        If [! FreeQ [candidate, E],
            candidate = GentleExponentialsToHyperbolic [candidate]];
        candidate = ((numeratorContent / denominatorContent) * multiplier) * candidate;
        entropy10 = Entropy10 [candidate];
        alternateCandidate = Factor [candidate];  (* :No time limit because low degree in practice. *)
        alternateEntropy10 = Entropy10 [alternateCandidate];
        If [alternateEntropy10 < entropy10,
            entropy10 = alternateEntropy10;
            candidate = alternateCandidate];
        alternateCandidate = Apart [candidate];
        If [! FreeQ [alternateCandidate, E],
            alternateCandidate = GentleExponentialsToHyperbolic [alternateCandidate]];
        alternateEntropy10 = Entropy10 [alternateCandidate];
        If [alternateEntropy10 < entropy10,
            entropy10 = alternateEntropy10;
            candidate = alternateCandidate];   
        FailSymbolOrRawCandidateRecord [candidate, entropy10]]];


(* ::Subsection::Closed:: *)
(*Power products*)


TryProduct [floatToModel_, set_] :=  (* Module was Block, but no apparent need for that: *)
  Module [{minusLogAbs = -Log [Abs [floatToModel]],
           floatSet, integers, norm, numerators, gcd, candidate, entropy10, alternate, entropy10OfAlternate},
    If [Abs [minusLogAbs] > 0.5 * $numericPrecisionOfGivenFloat,
        Return [$MagnitudeTooExtreme]];
    floatSet = Map[N [#, $precisionOfGivenFloat] &, set];
    If [Precision [floatSet] < $precisionOfGivenFloat,  (* - delta ?? *)
        Return [$BasisHasInsufficientPrecision]];
    integers = Quiet [FindIntegerNullVector [Append [set, minusLogAbs],
                                             $maxNullVectorNorm]];
    Which [
      Head [integers] =!= List,
        $NoNullVector,
      Last [integers] === 0,
        $ZeroDenominator,
      (norm = Norm [integers, 1]) > $maxNullVectorNorm,
        $ExcessNullVectorNorm,
      True,
        candidate = Most [integers];
        If [MinNon0Abs [candidate] < norm * 10.0 ^ (2.0 - 0.5 * $numericPrecisionOfGivenFloat),
            Return [$MinisculeNullVectorComponent]];
        candidate /= Last [integers];
        candidate = If [Count [candidate, number_/; number =!= 0] < 2,
                        {gcd, candidate} =
                           NumericContentAndPrimitivePartOfALinearCombination [candidate, set];
                        gcd * candidate,     (* BUG ... . basis ?? *)
                        candidate . set];
        candidate = TimeConstrained [Sign [floatToModel] * Exp [candidate],
                                     3.0 * $timeUnitForTimeConstrainedFunctionalForm];
        If [candidate === $Aborted,
            $TimeOutExp,
            FailSymbolOrRawCandidateRecord [candidate, Entropy10[candidate]]]]];


(* ::Subsection::Closed:: *)
(*Try squaring the given float*)


(* ::Subsubsubsection::Closed:: *)
(*TrySqrtOfLinearCombination :*)


TrySqrtOfLinearCombination [floatToModel_, set_] :=
  With [{absGivenFloat = $absGivenFloat,
         givenFloatBoostedForDiscrepancySubtraction = $givenFloatBoostedForDiscrepancySubtraction,
         givenFloatSquared = floatToModel * floatToModel,
         boostedGivenFloatSquared = $givenFloatBoostedForDiscrepancySubtraction *
                                      $givenFloatBoostedForDiscrepancySubtraction},
    Block [{$absGivenFloat = givenFloatSquared, (* :Needed because of unwise dynamic scoping design: *)
            $givenFloatBoostedForDiscrepancySubtraction = boostedGivenFloatSquared,
            resultForSquare, candidate, alternateCandidate, entropy10, alternateEntropy10},
      resultForSquare = TryLinearCombinationTimesMultiplier [givenFloatSquared, set];
      If [AtomQ [resultForSquare],
          resultForSquare,
          resultForSquare = First [resultForSquare];
          candidate = Sign [floatToModel] * Sqrt [resultForSquare];
          entropy10 = Entropy10 [candidate];
          resultForSquare = FactorSquareFree [resultForSquare];
          alternateCandidate = Sign [floatToModel] * Sqrt [resultForSquare];
          alternateEntropy10 = Entropy10 [alternateCandidate];
          If [entropy10 > alternateEntropy10,
              entropy10 = alternateEntropy10;
              candidate = alternateCandidate];
          resultForSquare = Factor [resultForSquare];
          alternateCandidate = Sign [floatToModel] * Sqrt [resultForSquare];
          alternateEntropy10 = Entropy10 [alternateCandidate];
            (* Also consider GentleExpToHyperbolic ?? *)
          $absGivenFloat = absGivenFloat;
          $givenFloatBoostedForDiscrepancySubtraction = givenFloatBoostedForDiscrepancySubtraction;
          If [entropy10 < alternateEntropy10,
              FailSymbolOrRawCandidateRecord [candidate, entropy10],
              FailSymbolOrRawCandidateRecord [alternateCandidate, alternateEntropy10]]]]];


(* ::Subsubsubsection::Closed:: *)
(*TrySqrtOfLinFracCombo :*)


TrySqrtOfLinFracCombo [floatToModel_,  numeratorSet_, denominatorSet_] :=
  With [{absGivenFloat = $absGivenFloat,
         givenFloatBoostedForDiscrepancySubtraction = $givenFloatBoostedForDiscrepancySubtraction,
         givenFloatSquared = floatToModel * floatToModel,
         boostedGivenFloatSquared = $givenFloatBoostedForDiscrepancySubtraction *
                                      $givenFloatBoostedForDiscrepancySubtraction},
    Block [{$absGivenFloat = givenFloatSquared, (* :Needed because of unwise dynamic scoping design: *)
            $givenFloatBoostedForDiscrepancySubtraction = boostedGivenFloatSquared,
            resultForSquare, expandedForSquare, candidate, alternateCandidate, entropy10, alternateEntropy10},
      resultForSquare = TryLinFracComboTimesMultiplier [givenFloatSquared, numeratorSet, denominatorSet, 1];
      If [AtomQ [resultForSquare],
          resultForSquare,
          resultForSquare = First [resultForSquare];
          candidate = Sign [floatToModel] * Sqrt [resultForSquare];
          entropy10 = Entropy10 [candidate];

          resultForSquare = FactorSquareFree [resultForSquare];
          alternateCandidate = Sign [floatToModel] * Sqrt [resultForSquare];
          alternateEntropy10 = Entropy10 [alternateCandidate];
          If [entropy10 > alternateEntropy10,
              entropy10 = alternateEntropy10;
              candidate = alternateCandidate];

          expandedForSquare = ApartSquareFree [resultForSquare];
          alternateCandidate = Sign [floatToModel] * Sqrt [expandedForSquare];
          alternateEntropy10 = Entropy10 [alternateCandidate];
          If [entropy10 > alternateEntropy10,
              entropy10 = alternateEntropy10;
              candidate = alternateCandidate];

          resultForSquare = Factor [resultForSquare];
          alternateCandidate = Sign [floatToModel] * Sqrt [resultForSquare];
          alternateEntropy10 = Entropy10 [alternateCandidate];
          If [entropy10 > alternateEntropy10,
              entropy10 = alternateEntropy10;
              candidate = alternateCandidate];

          expandedForSquare = Apart [resultForSquare];
          alternateCandidate = Sign [floatToModel] * Sqrt [expandedForSquare];
          alternateEntropy10 = Entropy10 [alternateCandidate];
            (* Also consider GentleExpToHyperbolic ?? *)

          $absGivenFloat = absGivenFloat;
          $givenFloatBoostedForDiscrepancySubtraction = givenFloatBoostedForDiscrepancySubtraction;
          If [entropy10 < alternateEntropy10,
              FailSymbolOrRawCandidateRecord [candidate, entropy10],
              FailSymbolOrRawCandidateRecord [alternateCandidate, alternateEntropy10]]]]];


(* ::Subsection::Closed:: *)
(*TryReciprocalOfAFunction*)


TryReciprocalOfAFunction [floatToModel_, tryFunctionName_, resultMultiplier_,
                          argMultiplier_, degree_, branchNumber_] :=
  With [{absGivenFloat = $absGivenFloat,
         givenFloatBoostedForDiscrepancySubtraction = $givenFloatBoostedForDiscrepancySubtraction,
         reciprocalOfGivenfloat = floatToModel ^ -1,
         reciprocalOfBoostedFloat = $givenFloatBoostedForDiscrepancySubtraction ^ -1},
    Block [{$absGivenFloat = reciprocalOfGivenfloat, (* :Needed because of unwise dynamic scoping design: *)
            $givenFloatBoostedForDiscrepancySubtraction = reciprocalOfBoostedFloat,
            resultForReciprocal, candidate, alternateCandidate, entropy10, alternateEntropy10},
      resultForReciprocal = tryFunctionName [reciprocalOfGivenfloat, resultMultiplier, argMultiplier,
                                             degree, branchNumber];
      If [AtomQ [resultForReciprocal],
          resultForReciprocal,
          $absGivenFloat = absGivenFloat;
          $givenFloatBoostedForDiscrepancySubtraction = givenFloatBoostedForDiscrepancySubtraction;
          candidate = First [resultForReciprocal] ^ -1;
          FailSymbolOrRawCandidateRecord [candidate, Entropy10 [candidate]]]]];


(* ::Subsection::Closed:: *)
(*Multiples of functions of multiples of algebraic numbers (Families are grouped approximately as in Abramowitz & Stegun)*)


(* ::Subsubsection::Closed:: *)
(*Dispatch functions :  *)


(* ::Subsubsubsection::Closed:: *)
(*FailSymbolOrFunFormCandidateAndComplexity :*)


FailSymbolOrFunFormCandidateAndComplexity [transformedBoostedGivenSigFloat_,
    resultMultiplier_, functionToApply_, argumentMultiplier_, degree_] :=
  Module [{algebraicNumber = RequestedDegreeRootApproximantOrFailed [
                               transformedBoostedGivenSigFloat / argumentMultiplier, degree],
           candidate, entropy10, alternateCandidate, alternateEntropy10,
           sqrtTerm, coefficients, var},
    Assert [Head [transformedBoostedGivenSigFloat] === Real];  (* Example debug Print: *)
(*If [! FreeQ [functionToApply, RealInverseZeta],
Print [{FailSymbolOrFunFormCandidateAndComplexity, transformedBoostedGivenSigFloat, resultMultiplier, algebraicNumber}]];*)
    If [! NumericQ [algebraicNumber], (* We probably have already tried this rootApproximant *)
        Return [algebraicNumber]]; (* : Conjecture: pointless to try this degree or higher *)
    Switch [degree,
      1, candidate = TimeConstrained [resultMultiplier
                                        * functionToApply [argumentMultiplier * algebraicNumber],
                                      $TimeUnitForTimeConstrainedFunctionalForm];
         If [candidate === $Aborted,
             Return [$TimeOutFunctionalForm]];
         entropy10 = Entropy10 [candidate],
      2, algebraicNumber = Expand [algebraicNumber];
         candidate = TimeConstrained [resultMultiplier
                                        * functionToApply [argumentMultiplier * algebraicNumber],
                                      $TimeUnitForTimeConstrainedFunctionalForm];
         If [candidate === $Aborted,
             Return [$TimeOutFunctionalForm]];
         entropy10 = Entropy10 [candidate];
         alternateCandidate = resultMultiplier *
           functionToApply [argumentMultiplier *
             FactorSquareFree [algebraicNumber]];  (* doing this only for content factoring *)
         alternateEntropy10 = Entropy10 [alternateCandidate];  (* Check for === ?? *)
         If [alternateEntropy10 < entropy10,
             entropy10 = alternateEntropy10;
             candidate = alternateCandidate];
      (* Is there some redundancy here with an earlier function ?? : *)
         If [Head [algebraicNumber] === Plus && Length [algebraicNumber] === 2,
             (* Maybe try alternate quadratic formula that avoids catastrophic cancellation: *)
             sqrtTerm = Last [algebraicNumber];
             If [(First [algebraicNumber] > 0) === (Head [sqrtTerm] === Times && First [sqrtTerm] < 0),
                 coefficients = CoefficientList [MinimalPolynomial [algebraicNumber, var], var];
                 alternateCandidate = resultMultiplier *
                   functionToApply [argumentMultiplier * Cancel [First [coefficients] /
                                      (Last [coefficients] * (First [algebraicNumber] - sqrtTerm))]];
                 alternateEntropy10 = Entropy10 [alternateCandidate];
                 If [alternateEntropy10 <= entropy10,
                     entropy10 = alternateEntropy10;
                     candidate = alternateCandidate]]],
      _,  Assert [Head [algebraicNumber] === Root];
          candidate = TimeConstrained [resultMultiplier
                                         * functionToApply [argumentMultiplier * algebraicNumber],
                                       $TimeUnitForTimeConstrainedFunctionalForm];
          If [candidate === $Aborted,
              Return [$TimeOutFunctionalForm]];
          entropy10 = Entropy10 [candidate];

          algebraicNumber = FromRoot [algebraicNumber];
          If [Head [algebraicNumber] =!= Root,
              alternateEntropy10 = Entropy10 [algebraicNumber];
              If [! FreeQ [algebraicNumber, Complex] && alternateEntropy10 < 2*$numericPrecisionOfGivenFloat,
                  algebraicNumber = QuietTimeConstrainedReComplexExpand [algebraicNumber];
                  alternateEntropy10 = Entropy10 [algebraicNumber]];
              If [alternateEntropy10 < 2*$numericPrecisionOfGivenFloat,
                  alternateCandidate =
                    If [degree === 4,
                        QuietTimeConstrainedFullSimplify [
                          resultMultiplier * functionToApply [argumentMultiplier * algebraicNumber]],
                        QuietTimeConstrainedSimplify [
                          resultMultiplier * functionToApply [argumentMultiplier * algebraicNumber]]];
                  alternateEntropy10 = Entropy10 [alternateCandidate];
                  If [alternateEntropy10 <= entropy10,
                      entropy10 = alternateEntropy10;
                      candidate = alternateCandidate]]]];  (* Example debug Print: *)
(*If [functionToApply === DirichletLambda,
Print [{FailSymbolOrFunFormCandidateAndComplexity, candidate, entropy10}]];*)
    {candidate, entropy10}];


(* ::Subsubsubsection::Closed:: *)
(*TryFunctionOfAnAlgNumber :*)


TryFunctionOfAnAlgNumber[transformedBoostedGivenSigFloat_,
    resultMultiplier_, functionToApply_, argumentMultiplier_, degree_] :=
  Module [{float = transformedBoostedGivenSigFloat,
           failSymbolOrCandidateAndComplexity},
    If [! NumberQ [float],
        Return [$NonFloatTransformedFloat]];
    If [Head [float] === Complex,
        If [Abs [Im [float]] < 100.0 * Abs [$numericPrecisionOfGivenFloat * Re [float]],
            float = Re [float],
            Return [$NonFloatTransformedFloat]]];
    failSymbolOrCandidateAndComplexity = FailSymbolOrFunFormCandidateAndComplexity [float,
                              resultMultiplier, functionToApply, argumentMultiplier, degree];
    (* Example debug Print: *)
(*If [! FreeQ [functionToApply, RealInverseZeta], Print [{TryFunctionOfAnAlgNumber,
transformedBoostedGivenSigFloat, resultMultiplier, transformedBoostedGivenSigFloat, failSymbolOrCandidateAndComplexity}]];*)
    If [AtomQ [failSymbolOrCandidateAndComplexity],
        failSymbolOrCandidateAndComplexity,
        Apply [FailSymbolOrRawCandidateRecord, failSymbolOrCandidateAndComplexity]]];


(* ::Subsubsection::Closed:: *)
(*Log Family, including ProductLog (asa LambertW) and InverseGudermannian :*)


(* ::Subsubsubsection::Closed:: *)
(*TryInvPolyLogPlusN :*)


TryInvPolyLogPlusN [floatToModel_, m_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           polyLogm1 = Zeta [m],
           quotient, remainder},
    quotient = Quotient [ratio, 1];
    If [quotient < 1,
        $Redundant,
        remainder = Mod [ratio, 1];
        If [Precision [remainder] > $minAllowedPrecisionOfARemainder
              (*&& Sqrt [3.0 * $multipleOfRelErrBoundFor0Ordinates] < remainder
                  < polyLogm1 - $multipleOfAbsErrBoundForFiniteNon0Ordinates*),
            TryFunctionOfAnAlgNumber [PolyLog [m, remainder], resultMultiplier,
                                      quotient + RealInversePolyLog [m, #] &, argMultiplier, degree],
            $IllConditionedRemainder]]];


(* ::Subsubsubsection::Closed:: *)
(*TryInvPolyLogTimesN :*)


TryInvPolyLogTimesN [floatToModel_, m_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           n},
    Assert [m >= 2 && WholeNumberQ [m]];
    n = If [ratio > 1,  Ceiling [ratio],  1];
    TryFunctionOfAnAlgNumber [PolyLog [m, ratio/n],  n*resultMultiplier,
                              RealInversePolyLog [m, #] &,  argMultiplier,  degree]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusArcCosh :*)


TryPlusOrMinusArcCosh [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  With [{ratio = floatToModel / resultMultiplier},
    If [Sqrt [24.0 * $multipleOfRelErrBoundFor0Ordinates] < Abs [ratio] < $numericPrecisionOfGivenFloat,
          (*< -0.5 * Log [$multipleOfAbsErrBoundForInfMagOrdinates],*)
        TryFunctionOfAnAlgNumber [Cosh [ratio],  Sign [ratio] * resultMultiplier,
                                  ArcCosh,  argMultiplier,  degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusArcSinh :*)


TryPlusOrMinusArcSinh [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] := 
  With [{ratio = floatToModel / resultMultiplier},
    If [Sqrt [6.0 * $multipleOfRelErrBoundFor0Ordinates] < Abs [ratio] < $numericPrecisionOfGivenFloat,
         (*< -0.5 * Log [$multipleOfAbsErrBoundForInfMagOrdinates],*)
        TryFunctionOfAnAlgNumber [Sinh [ratio],  resultMultiplier,
                                  ArcSinh,  argMultiplier,  degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusArcTanh :*)


TryPlusOrMinusArcTanh [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  With [{ratio = floatToModel / resultMultiplier},
    If [Sqrt [3.0 * $multipleOfRelErrBoundFor0Ordinates] < Abs [ratio] < 0.5*$numericPrecisionOfGivenFloat,
              (*< -0.5 * Log [2.0 * $multipleOfAbsErrBoundForInfMagOrdinates],*)
        TryFunctionOfAnAlgNumber [Tanh [ratio], (*Quiet [Tanh [ratio]],*)
                                  resultMultiplier,  ArcTanh,  argMultiplier,  degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusLog :*)


TryPlusOrMinusLog [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  With [{ratio = floatToModel / resultMultiplier},  (* Automatically handles -Log[positive] = Log[1/positive] *)
    If [Abs [ratio] < $numericPrecisionOfGivenFloat, (* and bound ratio away from 0 ?? *)
            (*2.0 * $multipleOfRelErrBoundFor0Ordinates < Abs [ratio]
             < - Log [$multipleOfAbsErrBoundForInfMagOrdinates],*)
        TryFunctionOfAnAlgNumber [Exp [ratio],  resultMultiplier,  Log,  argMultiplier,  degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusLog2 :*)


TryPlusOrMinusLog2 [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  With [{ratio = floatToModel / resultMultiplier},
    If [Abs [ratio] < $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [2 ^ ratio, resultMultiplier,  log2,  argMultiplier,  degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusLog10 :*)


TryPlusOrMinusLog10 [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  With [{ratio = floatToModel / resultMultiplier},
    If [Abs [ratio] < $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [10 ^ ratio,  resultMultiplier,  log10, argMultiplier, degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInverseGudermannian :*)


(* Automatically does +|- InverseGudermannian by odd symmetry about Pi/4: *)

TryPlusOrMinusInverseGudermannian [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  With [{ratio = floatToModel / resultMultiplier},
    If [Sqrt [6.0 * $multipleOfRelErrBoundFor0Ordinates] < Abs [ratio] < $numericPrecisionOfGivenFloat, (* ?? *)
        TryFunctionOfAnAlgNumber [Gudermannian [ratio], resultMultiplier,
                                  InverseGudermannian, argMultiplier, degree],
        $MagnitudeTooExtreme]];












































































(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusLogCoshOrSech :*)


TryPlusOrMinusLogCoshOrSech [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  With [{ratio = floatToModel / resultMultiplier},
    If [Abs [ratio] < $numericPrecisionOfGivenFloat,
        If [ratio > 0,
            TryFunctionOfAnAlgNumber [ArcCosh [Exp [ratio]], resultMultiplier,
                                      Composition [Log, Cosh], argMultiplier, degree],
            TryFunctionOfAnAlgNumber [ArcSech [Exp [ratio]], resultMultiplier,
                                      Composition [Log, Sech], argMultiplier, degree]],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusLogCothOrTanh :*)


TryPlusOrMinusLogCothOrTanh [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  With [{ratio = floatToModel / resultMultiplier},
    If [Abs [ratio] < $numericPrecisionOfGivenFloat,
        If [ratio > 0,
            TryFunctionOfAnAlgNumber [ArcCoth [Exp [ratio]], resultMultiplier,
                                      Composition [Log, Coth], argMultiplier, degree],
            TryFunctionOfAnAlgNumber [ArcTanh [Exp [ratio]], resultMultiplier,
                                      Composition [Log, Tanh], argMultiplier, degree]],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusLogCsch :*)


TryPlusOrMinusLogCsch [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  With [{ratio = floatToModel / resultMultiplier},
    If [Abs [ratio] < $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [ArcCsch [Exp [ratio]], resultMultiplier,
                                  Composition [Log, Csch], argMultiplier, degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusLogSinCosSecOrCsc :*)


TryPlusOrMinusLogSinCosSecOrCsc [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  With [{ratio = floatToModel / resultMultiplier},
    If [Abs [ratio] < $numericPrecisionOfGivenFloat,
        If [ratio > 0,
            If [2 * ratio - Log[2] < 0,  (* :2*ratio < Log[2] can be unwarented slow due to adaptive algorithm. *)
                TryFunctionOfAnAlgNumber [ArcSec [Exp [ratio]], resultMultiplier,
                                          Composition [Log, Sec], argMultiplier, degree],
                TryFunctionOfAnAlgNumber [ArcCsc [Exp [ratio]], resultMultiplier,
                                          Composition [Log, Csc], argMultiplier, degree]],
            If [2 * ratio < Log[2],
                TryFunctionOfAnAlgNumber [ArcCos [Exp [ratio]], resultMultiplier,
                                          Composition [Log, Cos], argMultiplier, degree],
                TryFunctionOfAnAlgNumber [ArcSin [Exp [ratio]], resultMultiplier,
                                          Composition [Log, Sin], argMultiplier, degree]]],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusLogSinh :*)


TryPlusOrMinusLogSinh [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  With [{ratio = floatToModel / resultMultiplier},
    If [Abs [ratio] < $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [ArcSinh [Exp [ratio]], resultMultiplier,
                                  Composition [Log, Sinh], argMultiplier, degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusProductLogBranchMinus1OnN :*)


TryPlusOrMinusProductLogBranchMinus1OnN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, n},
    absRatio = Abs [ratio];
    If [$numericPrecisionOfGivenFloat ^ -0.5 <= absRatio < 2.0 * $numericPrecisionOfGivenFloat,
        n = Ceiling [absRatio^-1];
        TryFunctionOfAnAlgNumber [(# * Exp[#] &)[-n*absRatio],  -Sign[ratio]*resultMultiplier/n,
                                  ProductLog [-1, #] &,  argMultiplier,  degree],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusProductLogBranchMinus1Plus1 :*)


TryPlusOrMinusProductLogBranchMinus1Plus1 [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, n},
    absRatio = Abs [ratio];
    If [0 < absRatio < 1,
        TryFunctionOfAnAlgNumber [(# * Exp[#] &)[-(1 + absRatio)],  -Sign[ratio]*resultMultiplier,
                                  (1 + ProductLog [-1, #]) &,  argMultiplier,  degree],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryPolyLogPlusNZetaOfM :*)


TryPolyLogPlusNZetaOfM [floatToModel_, m_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           polyLogm1 = Zeta [m],
           quotient, remainder},
    quotient = QuietQuotient [ratio, polyLogm1];
    If [quotient < 1,
        $Redundant,
        remainder = QuietMod [ratio, polyLogm1];
        If [Precision [remainder] > $minAllowedPrecisionOfARemainder
              && Sqrt [3.0 * $multipleOfRelErrBoundFor0Ordinates] < remainder
                  < polyLogm1 - $multipleOfAbsErrBoundForFiniteNon0Ordinates,
            TryFunctionOfAnAlgNumber [RealInversePolyLog [m, remainder], resultMultiplier,
                                      polyLogm1 * quotient + PolyLog [m, #] &, argMultiplier, degree],
            $IllConditionedRemainder]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPolyLogTimesN :*)


TryPolyLogTimesN [floatToModel_, m_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           polyLogm1 = Zeta [m],
           ceiling},
    ceiling = Max [1, Ceiling [ratio / polyLogm1]];
    If [ceiling < $numericPrecisionOfGivenFloat && -$numericPrecisionOfGivenFloat < ratio &&
          Abs [ratio] > 2.0 ^ m * $multipleOfRelErrBoundFor0Ordinates,
        TryFunctionOfAnAlgNumber [RealInversePolyLog [m, ratio / ceiling],  ceiling * resultMultiplier,
                                  PolyLog [m, #] &,  argMultiplier,  degree],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryProductLogBranch0MinusN :*)


TryProductLogBranch0MinusN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           n},
    If [-2.0*$numericPrecisionOfGivenFloat < ratio < -1,
        n = Ceiling [ratio];
        If [100.0 * (ratio - n) < ratio, (* :Precision loss < 2 *)
            Return [TryFunctionOfAnAlgNumber [(# * Exp[#] &)[ratio - n],  resultMultiplier,
                                              (n + ProductLog [0, #]) &,  argMultiplier,  degree]]];
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryProductLogBranch0TimesN :*)


TryProductLogBranch0TimesN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           n}, (* Mysterious failure to fetch value of $maxAllowedQuotientMagnitude: *)
    If [-Sqrt [$numericPrecisionOfGivenFloat] <= ratio < 2.0 * $numericPrecisionOfGivenFloat,
        n = Max [1, -Floor [ratio]];
        If [n < 0.3 * $numericPrecisionOfGivenFloat,
            TryFunctionOfAnAlgNumber [(# * Exp[#] &)[ratio/n],  n * resultMultiplier,
                                      ProductLog [0, #] &,  argMultiplier,  degree],
            $OutOfRange]]];


(* ::Subsubsubsection::Closed:: *)
(*TryLogOnProductLogOfLog :*)


(* Solution x to  x^x \[Equal] y: *)
TryLogOnProductLogOfLog [floatToModel_, resultMultiplier_, argMultiplier_, degree_, branch_] :=
  Module [{ratio = floatToModel / resultMultiplier},
    If [0 < ratio < 2.0 * $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [(# ^ # &)[ratio],  resultMultiplier,
                                  Log[#] / ProductLog [branch, Log[#]] &,  argMultiplier,  degree],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryProductLogOfRatOnRat :*)


(* Solution x to  x^n \[Equal] Exp [-rat*x], or equivalently to  rat1*x*Exp [rat1*x] \[Equal] 1, where rat1 = rat/n : *)
TryProductLogOfRatOnRat [floatToModel_, resultMultiplier_, argMultiplier_, degree_, branch_] :=
  Module [{ratio = floatToModel / resultMultiplier},
    If [0 < ratio < 2.0 * $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [(Log[1/#] / # &)[ratio],  resultMultiplier,
                                  ProductLog [branch, #] / # &,  argMultiplier,  degree],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryProductLogOfMinusLogOnMinusLog :*)


(* Solution x to limit to the infinite exponential tetration  x^x^...^x \[Equal] y: *)
TryProductLogOfMinusLogOnMinusLog [floatToModel_, resultMultiplier_, argMultiplier_, degree_, branch_] :=
  Module [{ratio = floatToModel / resultMultiplier},
    If [0 < ratio < 2.0 * $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [(# ^ # ^ -1 &)[ratio],  resultMultiplier,
                                  -ProductLog [branch, -Log[#]] / Log[#] &,  argMultiplier,  degree],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryExpOfProductLog :*)


(* Solution x to  x * Log[b,x] \[Equal] y: *)
TryExpOfProductLog [floatToModel_, resultMultiplier_, argMultiplier_, degree_, branch_] :=
  Module [{ratio = floatToModel / resultMultiplier},
    If [-2.0 * $numericPrecisionOfGivenFloat < ratio < 2.0 * $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [(# * Log[#] &)[ratio],  resultMultiplier,
                                  E ^ ProductLog [branch, #] &,  argMultiplier,  degree],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryRatMinusProductLogOfEToRat :*)


(* Solution x to  x / (1 - E^x) \[Equal] y: *)
TryRatMinusProductLogOfEToRat [floatToModel_, resultMultiplier_, argMultiplier_, degree_, branch_] :=
  Module [{ratio = floatToModel / resultMultiplier},
    If [-2.0 * $numericPrecisionOfGivenFloat < ratio < 0,
        TryFunctionOfAnAlgNumber [(# / (1 - E^#) &)[ratio],  resultMultiplier,
                                  # - ProductLog [branch,  # * E^#] &,  argMultiplier,  degree],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusEinstein3 :*)


TryPlusOrMinusEinstein3 [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
          absRatio},
    absRatio = Abs [ratio];
    If [absRatio < $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [-Log[1 - Exp [-absRatio]],
          Sign [ratio] * resultMultiplier, -Log[1 - Exp[-#]] &, argMultiplier, degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsection::Closed:: *)
(*Inverse trigonometric family, including Gudermannian and Inverse Haversine :*)


(* ::Subsubsubsection::Closed:: *)
(*TryArcCosOrArcSecTimesN :*)


(* GentleSimplifiedArcCos does ArcCos[1/123] -> ArcSec[123]: *)

TryArcCosOrArcSecTimesN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, ceiling},
    absRatio = Abs [ratio];
    ceiling = Ceiling [absRatio / Pi];
    If [ceiling <= $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [Cos [absRatio / ceiling],
          Sign [ratio] * ceiling * resultMultiplier,  GentleSimplifiedArcCos,  argMultiplier,  degree],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryArcCosOrArcSecPlusNPi :*)


TryArcCosOrArcSecPlusNPi [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           quotient, remainder, absRatio},
    quotient = QuietQuotient [ratio, 2*Pi, -Pi];
    If [quotient === 0,
        $Redundant,
        remainder = QuietMod [ratio, 2*Pi, -Pi];  (* : QuietMod[..., Pi] ?? *)
        If [Precision [remainder] > $minAllowedPrecisionOfARemainder
              && Sqrt [24.0 * $multipleOfRelErrBoundFor0Ordinates] < Abs [remainder]
                                 < Pi - $multipleOfAbsErrBoundForFiniteNon0Ordinates,
            TryFunctionOfAnAlgNumber [Cos [ratio], resultMultiplier,
                                      If [Abs [remainder + remainder] > Pi,
                                          (1 + 2 * quotient) * Pi - ArcCos [#],
                                          2 * quotient * Pi + GentleSimplifiedArcCos [#]] &,
                                      argMultiplier, degree],
            $IllConditionedRemainder]]];


(* ::Subsubsubsection::Closed:: *)
(*TryArcSinOrArcCscTimesN :*)


(* GentleSimplifiedArcSin does ArcSin[1/123] -> ArcCsc[123]: *)

(* Also bound remainder away from +|- Pi/2 ?? *)

TryArcSinOrArcCscTimesN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, ceiling},
    absRatio = Abs [ratio];
    ceiling = Ceiling [2 * absRatio / Pi];
    If [ceiling < 0.5 * $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [Sin [absRatio / ceiling],  Sign[ratio] * ceiling * resultMultiplier,
                                  GentleSimplifiedArcSin,  argMultiplier,  degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryArcSinOrArcCscPlusNPi :*)


TryArcSinOrArcCscPlusNPi [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           quotient, remainder, absRatio},
           quotient = QuietQuotient [ratio, 2*Pi, -Pi];
    If [quotient === 0,
        $Redundant,
        remainder = QuietMod [ratio, 2*Pi, -Pi];  (* : QuietMod[..., Pi] ?? *)
        If [Precision [remainder] > $minAllowedPrecisionOfARemainder
              && Sqrt [6.0 * $multipleOfRelErrBoundFor0Ordinates] < Abs [remainder]
                   < Pi / 2 - $multipleOfAbsErrBoundForFiniteNon0Ordinates,
            TryFunctionOfAnAlgNumber [Sin [ratio], resultMultiplier,
                                      If [Abs [remainder + remainder] > Pi,
                                          (1 + 2 * quotient) * Pi - ArcSin[#],
                                          2 * quotient * Pi + GentleSimplifiedArcSin[#]] &,
                                      argMultiplier,  degree],
            $IllConditionedRemainder]]];


(* ::Subsubsubsection::Closed:: *)
(*TryArcTanOrArcCotTimesN :*)


(* Automatically does ArcCot because automatically, for example, ArcTan[1/123] -> ArcCot[123]: *)

(* Also bound remainder away from +|- Pi/2 ?? *)

TryArcTanOrArcCotTimesN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, ceiling},
    absRatio = Abs [ratio];
    ceiling = Ceiling [2 * absRatio / Pi];
    If [ceiling < $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [Tan [absRatio / ceiling],  Sign [ratio] * ceiling * resultMultiplier,
                                  GentleSimplifiedArcTan,  argMultiplier,  degree],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryArcTanOrArcCotPlusNPi :*)


TryArcTanOrArcCotPlusNPi [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           quotient, remainder, absRatio},
    quotient = QuietQuotient [ratio, Pi, -Pi/2];
    If [quotient === 0,
        $Redundant,
        remainder = QuietMod [ratio, Pi, -Pi/2];
        If [Precision [remainder] > $minAllowedPrecisionOfARemainder
              && Sqrt [3.0 * $multipleOfRelErrBoundFor0Ordinates] < Abs [remainder]
                  < Pi/2.0 - $multipleOfAbsErrBoundForFiniteNon0Ordinates,
            TryFunctionOfAnAlgNumber [Tan [ratio], resultMultiplier,
                                      Pi * quotient + GentleSimplifiedArcTan [#] &, argMultiplier, degree],
            $IllConditionedRemainder]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusGudermannianTimesN :*)


TryPlusOrMinusGudermannianTimesN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, ceiling},
    absRatio = Abs [ratio];
    ceiling = Ceiling [2 * absRatio / Pi];  (* Max [2, Ceiling [2.0 * absRatio / Pi]]; ?? *)
    If [ceiling < 2.0 * $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [Re [InverseGudermannian [absRatio / ceiling]],
          Sign[ratio] * ceiling * resultMultiplier,  Gudermannian,  argMultiplier,  degree],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusGudermannianPlusNpi :*)


TryPlusOrMinusGudermannianPlusNpi [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           tolerance = Sqrt [24.0 * $multipleOfRelErrBoundFor0Ordinates],
           quotient, remainder, pair, absRatio},
    quotient = QuietQuotient [ratio, Pi, -Pi/2];
    If [quotient === 0,
        $Redundant,
        remainder = QuietMod [ratio, Pi, -Pi/2];
        If [Precision [remainder] > $minAllowedPrecisionOfARemainder
              (*&& Sqrt [6.0 * $multipleOfRelErrBoundFor0Ordinates] < Abs [remainder]
                     < Pi/2 * (1 - $multipleOfAbsErrBoundForFiniteNon0Ordinates)*),
            TryFunctionOfAnAlgNumber [ InverseGudermannian [remainder],  resultMultiplier,
                                       quotient * Pi + Gudermannian[#] &,  argMultiplier,  degree],
            $IllConditionedRemainder]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInverseHaversineTimesN :*)


TryPlusOrMinusInverseHaversineTimesN [floatToModel_,  argMultiplier_, resultMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, ceiling},
    absRatio = Abs [ratio];
    ceiling = Ceiling [absRatio / Pi];
    If [ceiling <= $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [Haversine [absRatio / ceiling],  Sign[ratio] * ceiling * resultMultiplier,
                                  InverseHaversine,  argMultiplier, degree],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInverseHaversinePlusNPi :*)


TryPlusOrMinusInverseHaversinePlusNPi [floatToModel_,  argMultiplier_,  resultMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, quotient, remainder, tolerance},
    absRatio = Abs [ratio];
    quotient = QuietQuotient [absRatio, Pi];
    If [quotient === 0,
        $Redundant,
        remainder = QuietMod [absRatio, Pi];
        If [Precision [remainder] > $minAllowedPrecisionOfARemainder
              (*&& Sqrt [6.0 * $multipleOfRelErrBoundFor0Ordinates] < Abs [remainder]
                   < Pi / 2 - $multipleOfAbsErrBoundForFiniteNon0Ordinates*),
            TryFunctionOfAnAlgNumber [Haversine [absRatio],  Sign[ratio] * resultMultiplier,
                   (Pi * quotient + InverseHaversine[If [EvenQ [quotient], #, 1-#]]) &,  argMultiplier, degree],
            $IllConditionedRemainder]]];


(* ::Subsubsection::Closed:: *)
(*Exponential and hyperbolic functions :*)


(* ::Subsubsubsection::Closed:: *)
(*TryCothMaybeDividedByN :*)


TryCothMaybeDividedByN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] := 
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, ceiling},
    absRatio = Abs [ratio];
    If [3.0 * $multipleOfAbsErrBoundForInfMagOrdinates * absRatio > 1.0
         || absRatio * absRatio < $multipleOfRelErrBoundForFiniteNon0Ordinates,
        $MagnitudeTooExtreme,
        ceiling = Ceiling [absRatio ^ -1];
        If [ceiling <= $numericPrecisionOfGivenFloat,
            TryFunctionOfAnAlgNumber [ArcCoth [ceiling * absRatio],
              Sign [ratio] * ceiling ^ -1 * resultMultiplier, Coth, argMultiplier, degree],
            $OutOfRange]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusCothMaybeMinus1 :*)


TryPlusOrMinusCothMaybeMinus1 [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] := 
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, excessOver1, transformedFloat},
    absRatio = Abs [ratio];
    Which [3.0 * $multipleOfAbsErrBoundForInfMagOrdinates * absRatio > 1.0
               || absRatio * absRatio < $multipleOfRelErrBoundForFiniteNon0Ordinates,
             $MagnitudeTooExtreme,
           excessOver1 = absRatio - 1;  excessOver1 >= 0,
             $Redundant,
           Precision [excessOver1] < $minAllowedPrecisionOfARemainder ||
               Abs [excessOver1] <= $multipleOfRelErrBoundForFiniteNon0Ordinates,
             $IllConditionedRemainder,
           True,
             transformedFloat = ArcCoth [absRatio + 1];
             If [Head [transformedFloat] === Real,
                 TryFunctionOfAnAlgNumber [ArcCoth [absRatio + 1],
                                   Sign[ratio] * resultMultiplier, Coth [#] - 1 &, argMultiplier, degree],
                 $NonFiniteRealFunctionalForm]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusCoshMaybeDividedByN :*)


TryPlusOrMinusCoshMaybeDividedByN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] := 
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, ceiling},
    absRatio = Abs [ratio];
    If [absRatio >  0.5 / $multipleOfAbsErrBoundForInfMagOrdinates,
        $MagnitudeTooExtreme,
        ceiling = Ceiling [absRatio ^ -1];
        If [ceiling < 2.0 * $numericPrecisionOfGivenFloat && ceiling * absRatio > 1,
            TryFunctionOfAnAlgNumber [ArcCosh [ceiling * absRatio],
              Sign[ratio] * ceiling ^ -1 * resultMultiplier,  Cosh,  argMultiplier,  degree],
            $MagnitudeTooExtreme]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusCoshMaybeMinus1 :*)


TryPlusOrMinusCoshMaybeMinus1 [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] := 
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, excessOver1, transformedFloat},
    absRatio = Abs [ratio];
    Which [absRatio >  0.5 / $multipleOfAbsErrBoundForInfMagOrdinates,
             $MagnitudeTooExtreme,
           excessOver1 = absRatio - 1;  excessOver1 >= 0,
             $Redundant,
           Precision [excessOver1] < $minAllowedPrecisionOfARemainder ||
                absRatio < $multipleOfAbsErrBoundForFiniteNon0Ordinates,
             $IllConditionedRemainder,
           True,
             TryFunctionOfAnAlgNumber [ArcCosh [absRatio + 1],  resultMultiplier, 
                                       Sign[ratio] * (Cosh [#] - 1) &,  argMultiplier,  degree]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusCsch :*)


TryPlusOrMinusCsch [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  With [{ratio = floatToModel / resultMultiplier},
    If [2.0 * Sqrt [$multipleOfRelErrBoundFor0Ordinates] < Abs [ratio]
            < (6.0 * $multipleOfAbsErrBoundForInfMagOrdinates) ^ -1,
        TryFunctionOfAnAlgNumber [ArcCsch [ratio], resultMultiplier,
                                  Csch, argMultiplier, degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusExp :*)


TryPlusOrMinusExp [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio},
    absRatio = Abs [ratio];
    If [2.0 * Sqrt [$multipleOfRelErrBoundFor0Ordinates] < absRatio < $multipleOfAbsErrBoundForInfMagOrdinates ^ -1
          && Abs [1.0 - absRatio] > $multipleOfAbsErrBoundForFiniteNon0Ordinates,
        TryFunctionOfAnAlgNumber [Log [absRatio], Sign [ratio] * resultMultiplier,
                                  Exp, argMultiplier, degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryLogisticSigmoidTimesN :*)


TryLogisticSigmoidTimesN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] := 
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, ceiling, scaledAbsRatio},
    absRatio = Abs [ratio];
    ceiling = Ceiling [absRatio];
    scaledAbsRatio = absRatio / ceiling;
    Which [
      ceiling > $numericPrecisionOfGivenFloat,
        $OutOfRange,
      scaledAbsRatio == 1,  (* ?? Should we do this test elsewhere too ?? *)
        $ValueTooCloseTo1, 
      True,    
        TryFunctionOfAnAlgNumber [inverseLogisticSigmoid [scaledAbsRatio],
                                  Sign [ratio] * ceiling * resultMultiplier,  LogisticSigmoid,
                                  argMultiplier,  degree]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusLogisticSigmoidPlusN :*)


TryPlusOrMinusLogisticSigmoidPlusN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] := 
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, quotient, remainder},
    absRatio = Abs [ratio];
    quotient = Quotient [absRatio, 1];
    If [quotient === 0,
        $Redundant,
        remainder = Mod [absRatio, 1];
        If [remainder > $multipleOfAbsErrBoundFor0Ordinates
              && Precision [remainder] > $minAllowedPrecisionOfARemainder
              && 1 - remainder > $multipleOfAbsErrBoundForFiniteNon0Ordinates,
            TryFunctionOfAnAlgNumber [inverseLogisticSigmoid [remainder],
                                      Sign[ratio] * resultMultiplier,  quotient + LogisticSigmoid [#] &,
                                      argMultiplier,  degree],
            $IllConditionedRemainder]]];


(* ::Subsubsubsection::Closed:: *)
(*TrySechTimesN :*)


TrySechTimesN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] := 
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, ceiling},
    absRatio = Abs [ratio];
    ceiling = Ceiling [absRatio];
    TryFunctionOfAnAlgNumber [Quiet [ArcSech [absRatio / ceiling]],
          Sign [ratio] * ceiling * resultMultiplier,  Sech,  argMultiplier,  degree]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusSechPlusInteger :*)


TryPlusOrMinusSechPlusInteger [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] := 
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, quotient, remainder},
    absRatio = Abs [ratio];
    quotient = Quotient [absRatio, 1];
    If [quotient === 0,
        $Redundant,
        remainder = Mod [absRatio, 1];
        If [Precision [remainder] > $minAllowedPrecisionOfARemainder  
               && 1 - remainder > Sqrt [2.0 * $multipleOfAbsErrBoundForFiniteNon0Ordinates],
               (*&& 2.0 * Sqrt [$multipleOfRelErrBoundFor0Ordinates] < remainder
                 < 1 - Max [1.0, Abs [quotient]] * $multipleOfAbsErrBoundForFiniteNon0Ordinates,*)
            TryFunctionOfAnAlgNumber [Quiet [ArcSech [remainder]],
              Sign [ratio] * resultMultiplier,  quotient + Sech [#] &,  argMultiplier,  degree],
            $IllConditionedRemainder]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusSinh :*)


TryPlusOrMinusSinh [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  With [{ratio = floatToModel / resultMultiplier},
    If [Sqrt [6.0 * $multipleOfRelErrBoundFor0Ordinates] < Abs [ratio] 
            < 0.5 / $multipleOfAbsErrBoundForInfMagOrdinates,
        TryFunctionOfAnAlgNumber [ArcSinh [ratio], resultMultiplier, Sinh, argMultiplier, degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusTanhPlus2N :*)


TryPlusOrMinusTanhPlus2N [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] := 
  Module [{ratio = floatToModel / resultMultiplier,
           quotient, remainder},
    quotient = Quotient [ratio, 2, -1];
    If [quotient === 0,
        $Redundant,
        remainder = Mod [ratio, 2, -1];
        If [Abs [remainder] > $multipleOfAbsErrBoundFor0Ordinates
              && Precision [remainder] > $minAllowedPrecisionOfARemainder &&
                 Sqrt [3.0 * $multipleOfRelErrBoundFor0Ordinates] < Abs [remainder] <
                   1 - Max [1.0, Abs [quotient]] * $multipleOfAbsErrBoundForFiniteNon0Ordinates,
            TryFunctionOfAnAlgNumber [ArcTanh [remainder],  resultMultiplier,
                                      2 * quotient + Tanh [#] &, argMultiplier, degree],
            $IllConditionedRemainder]]];


(* ::Subsubsubsection::Closed:: *)
(*TryTanhTimesN :*)


TryTanhTimesN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] := 
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, ceiling},
    absRatio = Abs [ratio];
    ceiling = Ceiling [absRatio];
    Which [
      ceiling > $numericPrecisionOfGivenFloat,
        $MagnitudeTooExtreme,
      absRatio /= ceiling;  absRatio == 1,
        $ValueTooCloseTo1,
      True,
        TryFunctionOfAnAlgNumber [ArcTanh [absRatio],
              Sign [ratio] * ceiling * resultMultiplier, Tanh, argMultiplier, degree]]];


(* ::Subsubsubsection::Closed:: *)
(*TryEinstein1TimesN :*)


TryEinstein1TimesN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, ceiling},
    absRatio = Abs [ratio];
    ceiling = Ceiling [absRatio];
    If [ceiling < 3.0 * $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [RealInverseEinstein1 [absRatio / ceiling],
                  Sign[ratio] * ceiling * resultMultiplier, Einstein1,  argMultiplier,  degree],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusEinstein1PlusN :*)


TryPlusOrMinusEinstein1PlusN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, quotient, remainder},
    absRatio = Abs [ratio];
    quotient = Quotient [absRatio, 1];
    Which [
      quotient === 0,
        $Redundant,
      remainder = Mod [absRatio, 1];
      remainder > $multipleOfAbsErrBoundFor0Ordinates
          && Precision [remainder] >= Max [$MachinePrecision - 1.0, $minAllowedPrecisionOfARemainder]
          && 1 - remainder != 0,
        TryFunctionOfAnAlgNumber [RealInverseEinstein1 [remainder, 1],
             Sign [ratio] * resultMultiplier,  quotient + Einstein1 [#] &,  argMultiplier,  degree],
      True,
        $IllConditionedRemainder]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusEinstein2 :*)


TryPlusOrMinusEinstein2 [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio},
    absRatio = Abs [ratio];
    If [0 < absRatio < $numericPrecisionOfGivenFloat && absRatio != 1,
        TryFunctionOfAnAlgNumber [RealInverseEinstein2 [absRatio],
              Sign [ratio] * resultMultiplier, Einstein2, argMultiplier, degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsection::Closed:: *)
(*Trigonometric functions, including Haversine :*)


(* ::Subsubsubsection::Closed:: *)
(*TryHaversineTimesN :*)


TryHaversineTimesN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, ceiling},
    absRatio = Abs [ratio];
    ceiling = Ceiling [absRatio];
    TryFunctionOfAnAlgNumber [InverseHaversine [absRatio / ceiling],
          Sign [ratio] * ceiling * resultMultiplier, Haversine, argMultiplier, degree]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusHaversinePlusN :*)


TryPlusOrMinusHaversinePlusN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, quotient, remainder},
    absRatio = Abs [ratio];
    quotient = Quotient [absRatio, 1];
    If [quotient === 0,
        $Redundant,
        remainder = Mod [absRatio, 1];
        If [Precision [remainder] > $minAllowedPrecisionOfARemainder
              && 3.0 * $multipleOfRelErrBoundFor0Ordinates < remainder
                 < 1 - $multipleOfAbsErrBoundForFiniteNon0Ordinates, 
            TryFunctionOfAnAlgNumber [InverseHaversine [remainder],
                Sign [ratio] * resultMultiplier, quotient + Haversine[#] &, argMultiplier, degree],
            $IllConditionedRemainder]]];


(* ::Subsubsubsection::Closed:: *)
(*TrySecOrCscDividedByN :*)


TrySecOrCscDividedByN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] := 
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, ceiling},
    absRatio = Abs [ratio];
    If [absRatio < 1234567.0, (* :Otherwise we can get 0*Infinity. *)
        ceiling = Ceiling [absRatio ^ -1];
        If [ceiling <= $numericPrecisionOfGivenFloat,
            TryFunctionOfAnAlgNumber [ArcSec [ceiling * absRatio],
              Sign [ratio] * ceiling ^ -1 * resultMultiplier, Sec, argMultiplier, degree],
            $MagnitudeTooExtreme],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusSecOrCscMaybeMinus1 :*)


TryPlusOrMinusSecOrCscMaybeMinus1 [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] := 
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio},
    absRatio = Abs [ratio];
    Which [absRatio >= 1,
             $Redundant,
           absRatio > (6.0 * $multipleOfAbsErrBoundForInfMagOrdinates) ^ -1 ||
               1 - absRatio < $multipleOfAbsErrBoundForFiniteNon0Ordinates,
             $IllConditionedRemainder,
           True,
             TryFunctionOfAnAlgNumber [ArcSec [absRatio + 1], resultMultiplier, 
                                       Sign [ratio] * (Sec [#] - 1) &, argMultiplier, degree]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusSinOrCosPlus2n :*)


TryPlusOrMinusSinOrCosPlus2n [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] := 
  Module [{ratio = floatToModel / resultMultiplier,
           quotient, remainder, absRemainder},
    quotient = Quotient [ratio, 2, -1];
    Which [
      quotient === 0,
        $Redundant,
      remainder = Mod [ratio, 2, -1];  Precision [remainder] < $minAllowedPrecisionOfARemainder,
        $IllConditionedRemainder,
      absRemainder = Abs [remainder];  absRemainder > 0.5,
        If [1 - absRemainder > Max [1.0, Abs [quotient]] * $multipleOfAbsErrBoundForFiniteNon0Ordinates,
            TryFunctionOfAnAlgNumber [ArcCos [remainder], resultMultiplier, 
                                      2 * quotient + Cos [#] &, argMultiplier, degree],
            $ValueTooCloseTo1],
      True,
        If [absRemainder > Max [1.0, Abs [quotient]] * Sqrt [6.0 * $multipleOfRelErrBoundFor0Ordinates],
            TryFunctionOfAnAlgNumber [ArcSin [remainder], resultMultiplier, 
                                      2 * quotient + Sin [#] &, argMultiplier, degree],
            $IllConditionedRemainder]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusSinOrCosTimesN :*)


TryPlusOrMinusSinOrCosTimesN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] := 
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, ceiling},
    absRatio = Abs [ratio];
    ceiling = Ceiling [absRatio];
    If [ceiling <= 2*$numericPrecisionOfGivenFloat,
        (* Mathematica might convert the Sin to a Cos: *)
        TryFunctionOfAnAlgNumber [ArcSin [absRatio / ceiling],
              Sign [ratio] * ceiling * resultMultiplier, Sin, argMultiplier, degree],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusTanOrCot :*)


TryPlusOrMinusTanOrCot [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  With [{ratio = floatToModel / resultMultiplier},
    If [Sqrt [3.0 * $multipleOfRelErrBoundFor0Ordinates] < Abs [ratio]
            <  (3.0 * $multipleOfAbsErrBoundForInfMagOrdinates) ^ -1 &&
          Abs [1 - Abs [ratio]] > $multipleOfAbsErrBoundForFiniteNon0Ordinates,
        TryFunctionOfAnAlgNumber [ArcTan [ratio], resultMultiplier,
                                  Tan, argMultiplier, degree],
        $MagnitudeTooExtreme]];  (* or too close to 1 ?? *)


(* ::Subsubsection::Closed:: *)
(*Factorial family, including Logs thereof and inverses :*)


(* ::Subsubsubsection::Closed:: *)
(*TryBarnesGTimesOrOnN :*)


ClearAll [TryBarnesGTimesOrOnN];

(* To do:  BarnesG - MinimumOrdinate: *)

TryBarnesGTimesOrOnN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, three_/; three == 3] :=
  Module [{ratio = floatToModel / resultMultiplier,
           n},
    If [ratio < 0,
        $OutOfRange, (* :Consider candidate BarnesG[x] - m*BarnesGInfimumOrSupremumOrdinate[2] ?? *)
        n = Ceiling [BarnesGInfimumOrSupremumOrdinate [three - 1] / ratio];
        If [n < $numericPrecisionOfGivenFloat,
            TryFunctionOfAnAlgNumber [RealInverseBarnesG [n * ratio, three],
                                      resultMultiplier / n,  BarnesG,  argMultiplier,  degree],
            $OutOfRange]]];
(* : Consider also BarnesG - 1 or BarnesG - BarnesGInfimumOrSupremumOrdinate [2] ?? *)

TryBarnesGTimesOrOnN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, one_/; one == 1] :=
  Module [{ratio = floatToModel / resultMultiplier,
           n},
    n = Ceiling [ratio / BarnesGInfimumOrSupremumOrdinate [If [ratio > 0, 1, 0]]];
    If [n < 0.5*$numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [RealInverseBarnesG [ratio / n, one],
                                  n * resultMultiplier,  BarnesG,  argMultiplier,  degree],
        $OutOfRange]];

TryBarnesGTimesOrOnN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, two_/; two == 2] :=
  Module [{ratio = floatToModel / resultMultiplier,
           float1 = floatToModel / floatToModel,
           absRatio, localMax, localMin, multiplier},
    absRatio = Abs [ratio];
    If [absRatio > 3.0 * $numericPrecisionOfGivenFloat ||
          absRatio < (3.0 * $numericPrecisionOfGivenFloat)^-1,
        Return [$OutOfRange]];
    localMax = BarnesGInfimumOrSupremumOrdinate [float1];
    localMin = BarnesGInfimumOrSupremumOrdinate [float1 + float1];
    multiplier = Which [absRatio > localMax,
                          Ceiling [absRatio / localMax],
                        absRatio < localMin,
                          Ceiling [localMin / absRatio] ^ -1,
                        True,
                          1];
    If [(4.0 * $numericPrecisionOfGivenFloat) ^ -1 < absRatio < 4.0 * $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [RealInverseBarnesG [absRatio / multiplier, two],
          Sign [ratio] * multiplier * resultMultiplier,  BarnesG, argMultiplier, degree],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryInvBarnesG :*)


TryInvBarnesG [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           branch = 0, n},
    While [ratio - BarnesGInfimumOrSupremumAbscissa [branch] > 0,
           ++branch];
    n = If [branch < 1 && ratio < 0,  Ceiling [ratio / BarnesGInfimumOrSupremumAbscissa [0]],  1];
    ratio /= n;
    If [ratio < Min [0.5*$numericPrecisionOfGivenFloat, 28.0] (*&& Abs [-1 + ratio] > 1.0*^-8*),
        TryFunctionOfAnAlgNumber [Re [BarnesG [ratio]],  n * resultMultiplier,
                                  RealInverseBarnesG [#, Max [1, branch]] &,  argMultiplier,  degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusFactorial2TimesOrOnN :*)


ClearAll [TryPlusOrMinusFactorial2TimesOrOnN];  (* Probably should only try OnN for branches 0 and 3: *)

(* To do:  Factorial2MinusMinumumOrdinate !! *)

TryPlusOrMinusFactorial2TimesOrOnN [floatToModel_, resultMultiplier_, argMultiplier_,
                         degree_, threeOrZero_/; (threeOrZero == 3 || threeOrZero == 0)] :=
  Module [{ratio = floatToModel / resultMultiplier,
           float1 = floatToModel / floatToModel,
           absRatio, n},
    absRatio = Abs [ratio];
    n = Ceiling [Factorial2InfimumOrSupremumOrdinate [If [threeOrZero == 0,
                                                          float1 - float1,
                                                          float1 + float1]] / absRatio];
    If [n < 0.5 * $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [RealInverseFactorial2 [n * absRatio, threeOrZero],
                                  Sign[ratio] * resultMultiplier / n,  Factorial2,  argMultiplier,  degree],
        $OutOfRange]];

TryPlusOrMinusFactorial2TimesOrOnN [floatToModel_, resultMultiplier_, argMultiplier_,
                         degree_, oneOrTwo_/; (oneOrTwo == 2 || oneOrTwo == 1)] :=
  Module [{ratio = floatToModel / resultMultiplier,
           float1 = floatToModel / floatToModel,
           absRatio, localMax, localMin, multiplier},
    absRatio = Abs [ratio];
    If [absRatio > 3.0 * $numericPrecisionOfGivenFloat ||
          absRatio < (3.0 * $numericPrecisionOfGivenFloat)^-1,
        Return [$OutOfRange]];
    localMax = Factorial2InfimumOrSupremumOrdinate [float1];
    localMin = Factorial2InfimumOrSupremumOrdinate [If [oneOrTwo == 2,
                                                        float1 + float1,
                                                        float1 - float1]];
    multiplier = Which [absRatio > localMax,
                          Ceiling [absRatio / localMax],
                        absRatio < localMin,
                          Ceiling [localMin / absRatio] ^ -1,
                        True,
                          1];
    If [(4.0 * $numericPrecisionOfGivenFloat) ^ -1 < absRatio < 4.0 * $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [RealInverseFactorial2 [absRatio / multiplier, oneOrTwo],
          Sign [ratio] * multiplier * resultMultiplier,  Factorial2, argMultiplier, degree],
        $OutOfRange]];

TryPlusOrMinusFactorial2TimesOrOnN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, branchNumber_] :=
  With [{ratio = floatToModel / resultMultiplier},
    TryFunctionOfAnAlgNumber [RealInverseFactorial2 [Abs[ratio], branchNumber],
                              Sign[ratio] * resultMultiplier, Factorial2, argMultiplier, degree]];


(* ::Subsubsubsection::Closed:: *)
(*TryInvFactorial2 :*)


(* This needs revisiting !! : *)

TryInvFactorial2 [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           branch = -1, n},
    While [ratio - Factorial2InfimumOrSupremumAbscissa [branch] > 0,
           ++ branch];
    n = Max [1, Ceiling [(-1/2)*ratio]];
    If [(branch < 3 || ratio < 0.8 * $numericPrecisionOfGivenFloat) (*&&
           Abs [-1 + ratio / n] > 1.0*^-8*),
        TryFunctionOfAnAlgNumber [Factorial2 [ratio / n],  n * resultMultiplier,
                                  RealInverseFactorial2 [#, Max [0, branch]] &,  argMultiplier,  degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusGammaOnN :*)


TryPlusOrMinusGammaOnN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, branchNumber_] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, n},
    absRatio = Abs [ratio];
    n = Ceiling [GammaInfimumOrSupremumOrdinate [Ceiling [
            branchNumber * (floatToModel / (floatToModel + floatToModel))]] / absRatio];
    If [n < 0.5 * $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [RealInverseGamma [n * absRatio, branchNumber],
          Sign[ratio] * resultMultiplier / n,  GammaOrEquivalentFactorial,  argMultiplier,  degree],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusGammaMaybeMinusMinOrdinate :*)


TryPlusOrMinusGammaMaybeMinusMinOrdinate [floatToModel_, resultMultiplier_, argMultiplier_, degree_, branch_] := 
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio},
    absRatio = Abs [ratio];
    If [0.1 < absRatio / GammaInfimumOrSupremumOrdinate [1] < 0.9,
        TryFunctionOfAnAlgNumber [RealInverseGamma [absRatio + GammaInfimumOrSupremumOrdinate [1], branch],
          Sign[ratio] * resultMultiplier, (Gamma [#] - GammaInfimumOrSupremumOrdinate [1]) &,  argMultiplier,  degree]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvGammaBranch1PlusNExtremumAbscissa1 :*)


TryPlusOrMinusInvGammaBranch1PlusNExtremumAbscissa1 [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, quotient},
    absRatio = Abs [ratio];
    quotient = QuietQuotient [absRatio, GammaInfimumOrSupremumAbscissa [1]];
    If [quotient === 0,
        $Redundant,
        If [absRatio < $numericPrecisionOfGivenFloat (*&& Abs [-1 + absRatio] > 1.0*^-8*), (* Instead use precision of remainder ?? *)
            TryFunctionOfAnAlgNumber [Gamma [QuietMod [absRatio, GammaInfimumOrSupremumAbscissa [1]]],  Sign[ratio] * resultMultiplier,
               quotient * GammaInfimumOrSupremumAbscissa [1] + RealInverseGamma [#, 1] &,  argMultiplier,  degree],
            $MagnitudeTooExtreme]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvGammaBranch1TimesN :*)


TryPlusOrMinusInvGammaBranch1TimesN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, n},
    absRatio = Abs [ratio];
    n = Ceiling [absRatio / GammaInfimumOrSupremumAbscissa [1]];
    If [n < $numericPrecisionOfGivenFloat (*&& Abs [-1 + absRatio] > 1.0*^-8*),
        TryFunctionOfAnAlgNumber [Gamma [absRatio / n],  Sign[ratio] * n * resultMultiplier,
                                  RealInverseGamma [#, 1] &,  argMultiplier,  degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvGammaBranch2MaybeMinusExtremumAbscissa1 :*)


TryPlusOrMinusInvGammaBranch2MaybeMinusExtremumAbscissa1 [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, doSubtractQ},
    absRatio = Abs [ratio];
    doSubtractQ = GammaInfimumOrSupremumAbscissa [1] - ratio > 0;
    If [absRatio < $numericPrecisionOfGivenFloat (*&& Abs [-1 + absRatio] > 1.0*^-8*),
        TryFunctionOfAnAlgNumber [Gamma [If [doSubtractQ,  absRatio + GammaInfimumOrSupremumAbscissa[1],  absRatio]],
          Sign[ratio] * resultMultiplier,
          RealInverseGamma [#, 2] - If [doSubtractQ, GammaInfimumOrSupremumAbscissa[1], 0] &,  argMultiplier,  degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvGammaBranch2OnN :*)


TryPlusOrMinusInvGammaBranch2OnN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, n},
    absRatio = Abs [ratio];
    n = Ceiling [GammaInfimumOrSupremumAbscissa [1] / absRatio];
    If [n * absRatio < $numericPrecisionOfGivenFloat (*&& Abs [-1 + absRatio] > 1.0*^-8*),
        TryFunctionOfAnAlgNumber [Gamma [n * absRatio],  (Sign[ratio] / n) * resultMultiplier,
                                  RealInverseGamma [#, 2] &,  argMultiplier,  degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryHyperfactorialTimesOrOnN :*)


ClearAll [TryHyperfactorialTimesOrOnN];

TryHyperfactorialTimesOrOnN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, two_/; two == 2] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, n},
    absRatio = Abs [ratio];
    n = Ceiling [HyperfactorialInfimumOrSupremumOrdinate[floatToModel/floatToModel] / absRatio];
    If [n < 0.5 * $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [RealInverseHyperfactorial [n * Abs[ratio], two],
          Sign[ratio] * resultMultiplier / n,  Hyperfactorial,  argMultiplier,  degree],
        $OutOfRange]];

TryHyperfactorialTimesOrOnN [floatToModel_, resultMultiplier_, argMultiplier_,
                             degree_, oneOrZero_/; (oneOrZero == 1 || oneOrZero == 0)] :=
  Module [{ratio = floatToModel / resultMultiplier,
           float1 = floatToModel / floatToModel,
           absRatio, localMax, localMin, multiplier},
    absRatio = Abs [ratio];
    If [absRatio > 3.0 * $numericPrecisionOfGivenFloat ||
          absRatio < (3.0 * $numericPrecisionOfGivenFloat)^-1,
        Return [$OutOfRange]];
    localMax = HyperfactorialInfimumOrSupremumOrdinate [float1 - float1];
    localMin = If [oneOrZero == 0,
                   1,
                   HyperfactorialInfimumOrSupremumOrdinate [float1]];
    multiplier = Which [absRatio > localMax,
                          Ceiling [absRatio / localMax],
                        absRatio < localMin,
                          Ceiling [localMin / absRatio] ^ -1,
                        True,
                          1];
    If [(4.0 * $numericPrecisionOfGivenFloat) ^ -1 < absRatio < 4.0 * $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [RealInverseHyperfactorial [absRatio / multiplier, oneOrZero],
          Sign [ratio] * multiplier * resultMultiplier,  Hyperfactorial, argMultiplier, degree],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*(* TryInvHyperfactorial : *)*)


(* This and its invocation are commented out until it can be made faster: *)

(*TryInvHyperfactorial [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           branch = 0,
           n = 1},
    If [ratio < -1,
        n = -Floor[ratio],
        While [ratio > HyperfactorialInfimumOrSupremumAbscissa [branch],
               ++branch]];
    If [ratio < Min [0.3 * $numericPrecisionOfGivenFloat, 23.0],
        TryFunctionOfAnAlgNumber [Hyperfactorial [ratio / n],  n * resultMultiplier,
                                  RealInverseHyperfactorial [#, branch] &,  argMultiplier,  degree],
        $MagnitudeTooExtreme]];*)


(* ::Subsubsubsection::Closed:: *)
(*TryLogBarnesGOnN :*)


TryLogBarnesGOnN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, branchNumber_] :=
  Module [{ratio = floatToModel / resultMultiplier,
           float1 = floatToModel / floatToModel,
           localMin = -Infinity,
           localMax = Infinity,
           n},
    If [branchNumber === 1 && ratio < -2.0 * $numericPrecisionOfGivenFloat,
        Return [$MagnitudeTooExtreme]];
    If [branchNumber > 1,
        localMin = LogBarnesGInfimumOrSupremumOrdinate [float1 + float1]];
    If [branchNumber < 3,
        localMax = LogBarnesGInfimumOrSupremumOrdinate [float1]];
    n = Which [ratio < localMin,
                 Ceiling [ratio / localMin],
               ratio > localMax,
                 Ceiling [ratio / localMax],
               True,
                 1];
    If [n < 4 * $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [RealInverseLogBarnesG [ratio / n, branchNumber],
                                  n * resultMultiplier, LogBarnesG, argMultiplier, degree],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvLogBarnesG :*)


TryPlusOrMinusInvLogBarnesG [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           branch = 1,
           absRatio},
    absRatio = Abs [ratio];
    While [absRatio > LogBarnesGInfimumOrSupremumAbscissa [branch] > 0,
           ++ branch];
    If [branch > 1 || absRatio > $MachineEpsilon (* :because otherwise --> 0.0 *)
        TryFunctionOfAnAlgNumber [LogBarnesG [absRatio],  Sign[ratio] * resultMultiplier,
                                  RealInverseLogBarnesG [#, branch] &, argMultiplier,  degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryLogGammaMinusNTimesMinOrdinate :*)


TryLogGammaMinusNTimesMinOrdinate [floatToModel_, resultMultiplier_, argMultiplier_, degree_, branch_] := 
  Module [{ratio = floatToModel / resultMultiplier,
           quotient, remainder},
    quotient = QuietQuotient [ratio, LogGammaInfimumOrSupremumOrdinate [1]];
    If [quotient < 1,
        $Redundant,
        remainder = QuietMod [ratio, LogGammaInfimumOrSupremumOrdinate [1]];
        If [-remainder > $multipleOfAbsErrBoundFor0Ordinates
              && Precision [remainder] > $minAllowedPrecisionOfARemainder,
            TryFunctionOfAnAlgNumber [RealInverseLogGamma [remainder, branch],  resultMultiplier,
              LogGamma [#] + quotient * LogGammaInfimumOrSupremumOrdinate [1] &,  argMultiplier,  degree],
            $IllConditionedRemainder]]];


(* ::Subsubsubsection::Closed:: *)
(*TryLogGammaTimesN :*)


TryLogGammaTimesN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, branchNumber_] :=
  Module [{ratio = floatToModel / resultMultiplier,
           minLogGammaOrdinate = LogGammaInfimumOrSupremumOrdinate[floatToModel / floatToModel],
           n},
    If [ratio > 2.0 * $numericPrecisionOfGivenFloat,
        $MagnitudeTooExtreme,
        n = If [ratio < minLogGammaOrdinate,
                Ceiling [ratio / minLogGammaOrdinate],
                1];
        TryFunctionOfAnAlgNumber [RealInverseLogGamma [ratio / n,  branchNumber],
                            n * resultMultiplier, LogGamma, argMultiplier, degree]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvLogGammaBranch2MaybeMinusMinAbscissa :*)


TryPlusOrMinusInvLogGammaBranch2MaybeMinusMinAbscissa [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, deficit},
    absRatio = Abs [ratio];
    If [absRatio < $numericPrecisionOfGivenFloat (*&& Abs [-1 + absRatio] > 1.0*^-8*), (* Instead use precision of remainder ?? *)
        deficit = If [absRatio - GammaInfimumOrSupremumAbscissa [1] < 0,
                      GammaInfimumOrSupremumAbscissa [1],
                      0];
        TryFunctionOfAnAlgNumber [LogGamma [deficit + absRatio],  Sign[ratio] * resultMultiplier,
           -deficit + RealInverseLogGamma [#, 2] &,  argMultiplier,  degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvLogGammaBranch1PlusNMinAbscissa :*)


TryPlusOrMinusInvLogGammaBranch1PlusNMinAbscissa [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, quotient},
    absRatio = Abs [ratio];
    If [absRatio < $numericPrecisionOfGivenFloat (*&& Abs [-1 + absRatio] > 1.0*^-8*), (* Instead use precision of remainder ?? *)
        quotient = QuietQuotient [absRatio, GammaInfimumOrSupremumAbscissa [1]];
        TryFunctionOfAnAlgNumber [LogGamma [QuietMod [absRatio, GammaInfimumOrSupremumAbscissa [1]]],  Sign[ratio] * resultMultiplier,
           quotient * GammaInfimumOrSupremumAbscissa [1] + RealInverseLogGamma [#, 1] &,  argMultiplier,  degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPolyGamma :*)


ClearAll [TryPolyGamma];

TryPolyGamma [floatToModel_, 0, resultMultiplier_, argMultiplier_, degree_, _] :=
  With [{ratio = floatToModel / resultMultiplier},
    If [ratio < 0.08767 * $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [RealInversePolyGamma [0, ratio],
                                  resultMultiplier, PolyGamma [0, #] &, argMultiplier, degree],
        $MagnitudeTooExtreme]];

TryPolyGamma [floatToModel_, m_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
         absRatio},
    Assert [m > 0];
    absRatio = Abs [ratio];
    TryFunctionOfAnAlgNumber [RealInversePolyGamma [m, If [OddQ [m], Abs[ratio], -Abs[ratio]]],
                              If [OddQ[m], Sign[ratio], -Sign[ratio]] * resultMultiplier,
                              PolyGamma [m, #] &, argMultiplier, degree]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvPolyGamma :*)


ClearAll [TryPlusOrMinusInvPolyGamma];  (* Implementing only branch 1: *)

(* The sign must be handled with a result multiplier for the inverse digamma: *)
TryPlusOrMinusInvPolyGamma [floatToModel_, zero_/; zero == 0, resultMultiplier_, argMultiplier_, degree_, _] :=
  With [{ratio = floatToModel / resultMultiplier},
    If [-12345.0 < ratio < 12345.0,
        TryFunctionOfAnAlgNumber [PolyGamma [ratio],  resultMultiplier,
                                  RealInversePolyGamma [zero, #, 1] &,  argMultiplier,  degree],
        $MagnitudeTooExtreme]];

TryPlusOrMinusInvPolyGamma [floatToModel_, m_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio},
    Assert [m >= 0 && WholeNumberQ [m]];
    absRatio = Abs [ratio];
    If [2*10.0^(-4 + m) < absRatio < 1500.0,
        TryFunctionOfAnAlgNumber [PolyGamma [m, absRatio],  Sign[ratio] * resultMultiplier,
                                  RealInversePolyGamma [m, #, 1] &,   argMultiplier,  degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsection::Closed:: *)
(*Exponential integral family and their inverses :*)


(* ::Subsubsubsection::Closed:: *)
(*TryCosIntegralTimesN :*)


TryCosIntegralTimesN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, branchNumber_] :=
  Module [{ratio = floatToModel / resultMultiplier,
           n},
    If [ratio < -$numericPrecisionOfGivenFloat,
        $OutOfRange,
        n = If [branchNumber === 1 && ratio < 0,
                1,
                Ceiling [ratio / CosIntegralInfimumOrSupremumOrdinate [
                                   branchNumber - Boole [OddQ[branchNumber] === (ratio < 0)]]]];
        TryFunctionOfAnAlgNumber [RealInverseCosIntegral [ratio/n, branchNumber], resultMultiplier,
                                  (n * CosIntegral[#]) & , argMultiplier, degree]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvCosIntegral :*)


TryPlusOrMinusInvCosIntegral [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio},
    absRatio = Abs [ratio];
    TryFunctionOfAnAlgNumber [CosIntegral [absRatio],  Sign[ratio] * resultMultiplier,
                              RealInverseCosIntegral [#, Ceiling [1/2 + absRatio/Pi]] &,  argMultiplier,  degree]];


(* ::Subsubsubsection::Closed:: *)
(*TryCoshIntegral :*)


TryCoshIntegral [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  With [{ratio = floatToModel / resultMultiplier},
    If [ratio < -$numericPrecisionOfGivenFloat,
        $MagnitudeTooExtreme,
        TryFunctionOfAnAlgNumber [RealInverseCoshIntegral [ratio],  resultMultiplier,
                                  CoshIntegral,  argMultiplier,  degree]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvCoshIntegral :*)


TryPlusOrMinusInvCoshIntegral [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio},
    absRatio = Abs [ratio];
    If [absRatio < 2.0 * $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [CoshIntegral [absRatio],  Sign[ratio] * resultMultiplier,
                                  RealInverseCoshIntegral,  argMultiplier,  degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusExpIntegralEi :*)


TryPlusOrMinusExpIntegralEi [floatToModel_, resultMultiplier_, argMultiplier_, degree_, one_/; one == 1] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio},
    absRatio = Abs [ratio];
    If [absRatio < $numericPrecisionOfGivenFloat,
        (* Do not try branch 1 because TryExpIntegralE[1,ratio] returns it when applicable: *)
        TryFunctionOfAnAlgNumber [RealInverseExpIntegralEi [-absRatio, 0],  -Sign[ratio] * resultMultiplier,
                                  ExpIntegralEi,  argMultiplier,  degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvExpIntegralEi :*)


TryPlusOrMinusInvExpIntegralEi [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio},
    absRatio = Abs [ratio];
    If [absRatio < 2.0 * $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [ExpIntegralEi [absRatio],  Sign[ratio] * resultMultiplier,
                                  RealInverseExpIntegralEi [#, 1] &,  argMultiplier,  degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusExpIntegralEOnN :*)


TryPlusOrMinusExpIntegralEOnN [floatToModel_, m_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           k, absRatio},
    absRatio = Abs [ratio];
    If [m === 1 && absRatio > $numericPrecisionOfGivenFloat,
          (*|| m > 1 && (m - 1) * absRatio > 1 - $multipleOfAbsErrBoundForFiniteNon0Ordinates*)
        $MagnitudeTooExtreme,
        If [m === 1 && ratio < 0,
            TryFunctionOfAnAlgNumber [RealInverseExpIntegralE [m, absRatio],  resultMultiplier,
                                      ExpIntegralEi, argMultiplier, degree],
            k = If [m < 2,  1,  Ceiling [absRatio * (m - 1)]];
            If [k > 0.3 * $numericPrecisionOfGivenFloat,
                $OutOfRange,
                TryFunctionOfAnAlgNumber [RealInverseExpIntegralE [m, absRatio / k],
                  Sign [ratio] * k * resultMultiplier, ExpIntegralE [m, #] &, argMultiplier, degree]]]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusExpIntegralEPlusNTimesRecipMMinus1 :*)


TryPlusOrMinusExpIntegralEPlusNTimesRecipMMinus1 [floatToModel_, m_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, maxExpIntegralE, quotient, remainder},
    Assert [m >= 2];
    absRatio = Abs [ratio];
    maxExpIntegralE = (m - 1)^-1;
    quotient = If [m < 2,  0,  QuietQuotient [absRatio, maxExpIntegralE]];
    If [quotient < 1,
        $Redundant,
        remainder = QuietMod [absRatio, maxExpIntegralE];
        If [Precision [remainder] > $minAllowedPrecisionOfARemainder &&
              Sqrt [3.0 * $multipleOfRelErrBoundFor0Ordinates] < remainder
                      < maxExpIntegralE - $multipleOfAbsErrBoundForFiniteNon0Ordinates,
            TryFunctionOfAnAlgNumber [RealInverseExpIntegralE [m, remainder],  resultMultiplier,
              Sign[ratio] * maxExpIntegralE * quotient + ExpIntegralE [m, #] &,  argMultiplier,  degree],
            $IllConditionedRemainder]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvExpIntegralE :*)


TryPlusOrMinusInvExpIntegralE [floatToModel_, m_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio},
    Assert [m >= 1 && WholeNumberQ [m]];
    absRatio = Abs [ratio];
    If [absRatio > 2.0 * $numericPrecisionOfGivenFloat,
        $MagnitudeTooExtreme,
        TryFunctionOfAnAlgNumber [ExpIntegralE [m, absRatio],  Sign[ratio] * resultMultiplier,
                                  RealInverseExpIntegralE [m, #] &,  argMultiplier,  degree]]];


(* ::Subsubsubsection::Closed:: *)
(*TryLogIntegral :*)


TryLogIntegral [floatToModel_, resultMultiplier_, argMultiplier_, degree_, branchNumber_] :=
  Module [{ratio = floatToModel / resultMultiplier,
           inverse},
    If [ratio < -$numericPrecisionOfGivenFloat ||
         (inverse = RealInverseLogIntegral [ratio, branchNumber]) == 1.0,
        $MagnitudeTooExtreme,    (* Avoid Underflow *)
        TryFunctionOfAnAlgNumber [inverse, resultMultiplier, LogIntegral, argMultiplier, degree]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvLogIntegralBranch1PlusN :*)


TryPlusOrMinusInvLogIntegralBranch1PlusN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, n, remainder},
    absRatio = Abs [ratio];
    n = Quotient [absRatio, 1];
    If [n < 1,
        $Redundant,
        remainder = Mod [absRatio, 1];
        If [remainder < 0.2,
            $IllConditionedRemainder,
            TryFunctionOfAnAlgNumber [LogIntegral [remainder],  Sign[ratio] * resultMultiplier,
              n + RealInverseLogIntegral [#, 1] &,  argMultiplier,  degree]]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvLogIntegralBranch1TimesN :*)


TryPlusOrMinusInvLogIntegralBranch1TimesN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, n},
    absRatio = Abs [ratio];
    n = Ceiling [absRatio];
    TryFunctionOfAnAlgNumber [LogIntegral [absRatio / n],  Sign[ratio] * n * resultMultiplier,
                              RealInverseLogIntegral [#, 1] &,  argMultiplier,  degree]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvLogIntegralBranch2MaybeMinus1 :*)


TryPlusOrMinusInvLogIntegralBranch2MaybeMinus1 [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, n, remainder},
    absRatio = Abs [ratio];
    Which [
      absRatio >= 1,
        $Redundant,
      absRatio < 0.2,
        $IllConditionedRemainder,
      True,
        TryFunctionOfAnAlgNumber [LogIntegral [1 + absRatio],  Sign[ratio] * resultMultiplier,
                                  -1 + RealInverseLogIntegral [#, 2] &,  argMultiplier,  degree]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvLogIntegralBranch2OnN :*)


TryPlusOrMinusInvLogIntegralBranch2OnN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, n},
    absRatio = Abs [ratio];
    n = Ceiling [absRatio^-1];
    If [n < $precisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [LogIntegral [n * absRatio],  (Sign[ratio] / n) * resultMultiplier,
                                  RealInverseLogIntegral [#, 2] &,  argMultiplier,  degree],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TrySinIntegralTimesOrOnN :*)


TrySinIntegralTimesOrOnN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, branchNumber_] :=
  Module [{ratio = floatToModel / resultMultiplier,
           float1 = floatToModel / floatToModel,
           absRatio, localMax, localMin, multiplier},
    absRatio = Abs [ratio];
    If [absRatio > 3.0 * $numericPrecisionOfGivenFloat,
        Return [$OutOfRange]];
    If [OddQ [branchNumber],
        localMax = SinIntegralInfimumOrSupremumOrdinate [float1*branchNumber];
        localMin = If [branchNumber == 1,
                       0,
                       SinIntegralInfimumOrSupremumOrdinate [float1*(branchNumber - 1)]],
        localMax = SinIntegralInfimumOrSupremumOrdinate [float1*(branchNumber - 1)];
        localMin = SinIntegralInfimumOrSupremumOrdinate [float1*branchNumber]];
    multiplier = Which [absRatio > localMax,
                          Ceiling [absRatio / localMax],
                        absRatio < localMin,
                          Ceiling [localMin / absRatio] ^ -1,
                        True,
                          1];
    If [(4.0 * $numericPrecisionOfGivenFloat) ^ -1 < absRatio < 4.0 * $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [RealInverseSinIntegral [absRatio / multiplier, branchNumber],
          Sign [ratio] * multiplier * resultMultiplier,  SinIntegral, argMultiplier, degree],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvSinIntegral :*)


TryPlusOrMinusInvSinIntegral [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  With [{ratio = floatToModel / resultMultiplier},
    TryFunctionOfAnAlgNumber [SinIntegral [ratio],  resultMultiplier,
                              RealInverseSinIntegral [#, Ceiling [ratio/Pi]] &,  argMultiplier,  degree]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusSinhIntegral :*)


TryPlusOrMinusSinhIntegral [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  With [{ratio = floatToModel / resultMultiplier},
    If [18.0 * $multipleOfRelErrBoundFor0Ordinates < ratio * ratio,
        TryFunctionOfAnAlgNumber [RealInverseSinhIntegral [ratio],
                                  resultMultiplier, SinhIntegral, argMultiplier, degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvSinhIntegral :*)


TryPlusOrMinusInvSinhIntegral [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  With [{ratio = floatToModel / resultMultiplier},
    If [Abs [ratio] < 2.0 * $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [SinhIntegral [ratio],  resultMultiplier,
                                  RealInverseSinhIntegral,  argMultiplier,  degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsection::Closed:: *)
(*Zeta family and their inverses :*)


(* ::Subsubsubsection::Closed:: *)
(*TryDirichletBeta :*)


TryDirichletBeta [floatToModel_, resultMultiplier_, argMultiplier_, degree_, branchNumber_] :=
  Module [{ratio = floatToModel / resultMultiplier,
           precision, n},
    precision = Precision [ratio];
    If [precision > 16 && RealExponent [1 - ratio] < precision,
        n = Ceiling [ratio / DirichletBetaInfimumOrSupremumOrdinate [
                               branchNumber - Boole [OddQ[branchNumber] === (ratio < 0)]]];
        If [n === 1 || ratio > 0 || n < 0.5 * $numericPrecisionOfGivenFloat,
            TryFunctionOfAnAlgNumber [RealInverseDirichletBeta [ratio / n, branchNumber],
              1, QuietTimeConstrainedSimplify [n * resultMultiplier * dirichletBeta[#]] &, argMultiplier, degree],
            $MagnitudeTooExtreme],
        $GivenFloatHasInsufficientPrecision]];


(* ::Subsubsubsection::Closed:: *)
(*TryInvDirichletBeta :*)


TryInvDirichletBeta [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           branch, n},
    If [ratio > $numericPrecisionOfGivenFloat,
        $MagnitudeTooExtreme,  (* :Causes 0 * Infinity. *)
        branch = If [ratio < DirichletBetaInfimumOrSupremumAbscissa [0] < 0,  0,  1];
        n = If [ratio - DirichletBetaInfimumOrSupremumAbscissa [-1] < 0,
                Ceiling [ratio / DirichletBetaInfimumOrSupremumAbscissa [-1]],
                1];
        TryFunctionOfAnAlgNumber [DirichletBeta [ratio / n],  n * resultMultiplier,
                                  RealInverseDirichletBeta [#, branch] &,  argMultiplier,  degree]]];


(* ::Subsubsubsection::Closed:: *)
(*TryDirichletEta :*)


TryDirichletEta [floatToModel_, resultMultiplier_, argMultiplier_, degree_, branchNumber_] :=
  Module [{ratio = floatToModel / resultMultiplier,
           n},
    If [RealExponent [1 - ratio] < Precision [ratio],
        n = Max [1, Ceiling [Abs [ratio / DirichletEtaInfimumOrSupremumOrdinate [
                                    branchNumber - Boole [OddQ[branchNumber] === (ratio < 0)]]]]];
        TryFunctionOfAnAlgNumber [RealInverseDirichletEta [ratio / n, branchNumber],
          1, ExpandFreeOf [n * resultMultiplier * dirichletEta [#], Zeta] &, argMultiplier, degree],
        $GivenFloatHasInsufficientPrecision]];


(* ::Subsubsubsection::Closed:: *)
(*TryInvDirichletEta :*)


TryInvDirichletEta [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           branch, n},
    If [ratio > 1.5*$numericPrecisionOfGivenFloat,
        $MagnitudeTooExtreme,
        branch = If [ratio -DirichletEtaInfimumOrSupremumAbscissa [0] < 0,  0,  1];
        n = If [ratio - DirichletEtaInfimumOrSupremumAbscissa [-1]  < 0,
                Ceiling [ratio / DirichletEtaInfimumOrSupremumAbscissa [-1]],
                1];
        TryFunctionOfAnAlgNumber [DirichletEta [ratio / n],  n * resultMultiplier,
                                  RealInverseDirichletEta [#, branch] &,  argMultiplier,  degree]]];


(* ::Subsubsubsection::Closed:: *)
(*TryDirichletLambda :*)


ClearAll [TryDirichletLambda];

TryDirichletLambda [floatToModel_, resultMultiplier_, argMultiplier_, degree_, two_/; two == 2] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, n},
    Assert [ratio != 0];
    absRatio = Abs [ratio];
    n = Ceiling [absRatio^-1];
    If [n <= $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [RealInverseDirichletLambda [n * absRatio, 2],  1,
          ExpandFreeOf [(Sign[ratio] * resultMultiplier / n) * dirichletLambda [#], Zeta] &, argMultiplier, degree],
        $MagnitudeTooExtreme]];

TryDirichletLambda [floatToModel_, resultMultiplier_, argMultiplier_, degree_, branchNumber_] :=
  Module [{ratio = floatToModel / resultMultiplier,
           n},
    Assert [ratio != 0];
    n = If [branchNumber === 1 && ratio < 0,
            1,
            Ceiling [Abs [ratio / DirichletBetaInfimumOrSupremumOrdinate [branchNumber -
                                    Boole [OddQ[branchNumber] === (ratio >= 0)]]]]];
    TryFunctionOfAnAlgNumber [RealInverseDirichletLambda [ratio/n, branchNumber],
      1, ExpandFreeOf [n * resultMultiplier * dirichletLambda [#], Zeta] &, argMultiplier, degree]];


(* ::Subsubsubsection::Closed:: *)
(*TryInvDirichletLambda :*)


TryInvDirichletLambda [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           branch, n},
    If [Abs [ratio] > $numericPrecisionOfGivenFloat,
        $MagnitudeTooExtreme,
        branch = If [ratio < 1,  1,  2];
        n = If [ratio - DirichletLambdaInfimumOrSupremumAbscissa [0] < 0,
                Ceiling [ratio / DirichletLambdaInfimumOrSupremumAbscissa [0]],
                1];
        TryFunctionOfAnAlgNumber [DirichletLambda [ratio / n],  n * resultMultiplier,
                                  RealInverseDirichletLambda [#, branch] &,  argMultiplier,  degree]]];


(* ::Subsubsubsection::Closed:: *)
(*TryRamanujanTauTheta :*)


ClearAll [TryRamanujanTauTheta];

TryRamanujanTauTheta [floatToModel_, resultMultiplier_, argMultiplier_, degree_, one_/; one == 1] :=
  Module [{ratio = floatToModel / resultMultiplier,
           n},
    n = Ceiling [Abs [ratio / RamanujanTauThetaInfimumOrSupremumOrdinate [floatToModel/floatToModel]]];
    If [n < 2.0 * $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [RealInverseRamanujanTauTheta [ratio / n, one],
                                  n * resultMultiplier, RamanujanTauTheta, argMultiplier, degree],
        $OutOfRange]];

TryRamanujanTauTheta [floatToModel_, resultMultiplier_, argMultiplier_, degree_, two_/; two == 2] :=
  Module [{ratio = floatToModel / resultMultiplier,
           min = RamanujanTauThetaInfimumOrSupremumOrdinate [floatToModel/floatToModel],
           n},
    n = If [ratio < min,
            Ceiling [ratio / min],
            1];
    If [n < 2.0 * $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [RealInverseRamanujanTauTheta [ratio / n, two],
                                  n*resultMultiplier, RamanujanTauTheta, argMultiplier, degree],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvRamanujanTauTheta :*)


TryPlusOrMinusInvRamanujanTauTheta [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, branch},
    absRatio = Abs [ratio];
    branch = If [absRatio < RamanujanTauThetaInfimumOrSupremumAbscissa [1] < 0,  1,  2];
    (*If [branch === 1 && absRatio > $MachineEpsilon (* :because otherwise --> 0.0 *) ||
          branch === 2 && absRatio < 10000.0,*)  (* :because of otherwise overflow and slow *)
        TryFunctionOfAnAlgNumber [RamanujanTauTheta [absRatio],  Sign[ratio] * resultMultiplier,
                                  RealInverseRamanujanTauTheta [#, branch] &, argMultiplier,  degree](*,
        $MagnitudeTooExtreme]*)];


(* ::Subsubsubsection::Closed:: *)
(*TryRiemannSiegelTheta :*)


ClearAll [TryRiemannSiegelTheta];

TryRiemannSiegelTheta [floatToModel_, resultMultiplier_, argMultiplier_, degree_, one_/; one == 1] :=
  Module [{ratio = floatToModel / resultMultiplier,
           n},
    n = Ceiling [Abs [ratio / RiemannSiegelThetaInfimumOrSupremumOrdinate [floatToModel/floatToModel]]];
    If [n < 2.0 * $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [RealInverseRiemannSiegelTheta [ratio / n, one],
                                  n * resultMultiplier, RiemannSiegelTheta, argMultiplier, degree],
        $OutOfRange]];

TryRiemannSiegelTheta [floatToModel_, resultMultiplier_, argMultiplier_, degree_, two_/; two == 2] :=
  Module [{ratio = floatToModel / resultMultiplier,
           min = RiemannSiegelThetaInfimumOrSupremumOrdinate [floatToModel/floatToModel],
           n},
    n = If [ratio < min,
            Ceiling [ratio / min],
            1];
    If [n < 2.0 * $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [RealInverseRiemannSiegelTheta [ratio / n, two],
                                  n*resultMultiplier, RiemannSiegelTheta, argMultiplier, degree],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvRiemannSiegelTheta :*)


TryPlusOrMinusInvRiemannSiegelTheta [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, branch},
    absRatio = Abs [ratio];
    branch = If [absRatio - RiemannSiegelThetaInfimumOrSupremumAbscissa [1] < 0,  1,  2];
    (*If [branch === 1 && absRatio > $MachineEpsilon (* :because otherwise --> 0.0 *) ||
          branch === 2 && absRatio < 10000.0,*)  (* :because of otherwise overflow and slow *)
        TryFunctionOfAnAlgNumber [RiemannSiegelTheta [absRatio],  Sign[ratio] * resultMultiplier,
                                  RealInverseRiemannSiegelTheta [#, branch] &, argMultiplier,  degree](*,
        $MagnitudeTooExtreme]*)];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusZetaBranch2OnN :*)


TryPlusOrMinusZetaBranch2OnN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, n},
    Assert [ratio != 0];
    absRatio = Abs [ratio];
    If [absRatio > 1234567.0,  (* :Needed to prevent 0*Infinity. *)
        $MagnitudeTooExtreme,
        n =  Ceiling [absRatio^-1];
        If [n < $numericPrecisionOfGivenFloat,
            TryFunctionOfAnAlgNumber [RealInverseZeta [n * absRatio, 2], 1,
              ExpandFreeOf [(Sign[ratio] / n) * resultMultiplier * Zeta [#], Zeta] &, argMultiplier, degree],
            $OutOfRange]]];


(* ::Subsubsubsection::Closed:: *)
(*TryZetaBranch1PlusNTimesInfimumOrdinate :*)


TryZetaBranch1PlusNTimesInfimumOrdinate [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] := 
  Module [{ratio = floatToModel / resultMultiplier,
           quotient, remainder},
    quotient = QuietQuotient [ratio, ZetaInfimumOrSupremumOrdinate [0]];
    If [quotient < 1,
        $Redundant,
        remainder = QuietMod [ratio, ZetaInfimumOrSupremumOrdinate [0]];
        If [remainder > $multipleOfAbsErrBoundFor0Ordinates
              && Precision [remainder] > $minAllowedPrecisionOfARemainder (*&&
                 Sqrt [3.0 * $multipleOfRelErrBoundFor0Ordinates] < Abs [remainder] <
                   1 - Max [1.0, Abs [quotient]] * $multipleOfAbsErrBoundForFiniteNon0Ordinates*),
            TryFunctionOfAnAlgNumber [RealInverseZeta [remainder, 1],  resultMultiplier,
              quotient * ZetaInfimumOrSupremumOrdinate [0] + Zeta [#] &, argMultiplier, degree],
            $IllConditionedRemainder]]];


(* ::Subsubsubsection::Closed:: *)
(*TryZetaBranch1TimesN :*)


TryZetaBranch1TimesN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           n},
    If [Abs [ratio] > $numericPrecisionOfGivenFloat,
        $MagnitudeTooExtreme,
        n = If [ratio - ZetaInfimumOrSupremumOrdinate [0] > 0,
                Ceiling [ratio / ZetaInfimumOrSupremumOrdinate [0]],
                1];
        TryFunctionOfAnAlgNumber [RealInverseZeta [ratio / n, 1],  n * resultMultiplier,
                                  Zeta,  argMultiplier,  degree]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusZetaBranch2Minus1 :*)


TryPlusOrMinusZetaBranch2Minus1 [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, excessOver1},
    absRatio = Abs [ratio];
    Which [absRatio >  1.5 * $numericPrecisionOfGivenFloat,
             $MagnitudeTooExtreme,
           excessOver1 = absRatio - 1;  excessOver1 >= 0,
             $Redundant,
           Precision [excessOver1] < $minAllowedPrecisionOfARemainder ||
                absRatio < $multipleOfAbsErrBoundForFiniteNon0Ordinates,
             $IllConditionedRemainder,
           True,
             TryFunctionOfAnAlgNumber [RealInverseZeta [absRatio + 1, 2],  Sign[ratio] * resultMultiplier, 
                                       Zeta [#] - 1 &,  argMultiplier,  degree]]];


(* ::Subsubsubsection::Closed:: *)
(*TryInvZetaBranch1PlusN :*)


TryInvZetaBranch1PlusN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] := 
  Module [{ratio = floatToModel / resultMultiplier,
           quotient, remainder},
    quotient = Quotient [ratio, 1];
    If [quotient < 1,
        $Redundant,
        remainder = Mod [ratio, 1];
        If [Abs [remainder] > $multipleOfAbsErrBoundFor0Ordinates
              && Precision [remainder] > $minAllowedPrecisionOfARemainder (*&&
                 Sqrt [3.0 * $multipleOfRelErrBoundFor0Ordinates] < Abs [remainder] <
                   1 - Max [1.0, Abs [quotient]] * $multipleOfAbsErrBoundForFiniteNon0Ordinates*),
            TryFunctionOfAnAlgNumber [Zeta [remainder],  resultMultiplier,
                                      quotient + RealInverseZeta [#, 1] &, argMultiplier, degree],
            $IllConditionedRemainder]]];


(* ::Subsubsubsection::Closed:: *)
(*TryInvZetaBranch1TimesN :*)


TryInvZetaBranch1TimesN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           n},
    If [Abs [ratio] > $numericPrecisionOfGivenFloat,
        $MagnitudeTooExtreme,
        n = If [ratio > 1,
                Ceiling [ratio],
                1];
        TryFunctionOfAnAlgNumber [Zeta [ratio / n],  n * resultMultiplier,
                                  RealInverseZeta [#, 1] &,  argMultiplier,  degree]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvZetaBranch2MaybeMinus1 :*)


TryPlusOrMinusInvZetaBranch2MaybeMinus1 [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, excessOver1},
    absRatio = Abs [ratio];
    Which [absRatio >  1.5 * $numericPrecisionOfGivenFloat,
             $MagnitudeTooExtreme,
           excessOver1 = absRatio - 1;  excessOver1 >= 0,
             $Redundant,
           Precision [excessOver1] < $minAllowedPrecisionOfARemainder ||
                absRatio < $multipleOfAbsErrBoundForFiniteNon0Ordinates,
             $IllConditionedRemainder,
           True,
             TryFunctionOfAnAlgNumber [Zeta [absRatio + 1],  Sign[ratio] * resultMultiplier, 
                                       RealInverseZeta [#, 2] - 1 &,  argMultiplier,  degree]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvZetaBranch2OnN :*)


TryPlusOrMinusInvZetaBranch2OnN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, n},
    absRatio = Abs [ratio];
    If [absRatio > 1.5 * $numericPrecisionOfGivenFloat,
        $MagnitudeTooExtreme,
        n = Ceiling [absRatio^-1];
        TryFunctionOfAnAlgNumber [Zeta [absRatio * n],  (Sign [ratio] / n) * resultMultiplier,
                                  RealInverseZeta [#, 2] &,  argMultiplier,  degree]]];


(* ::Subsubsection::Closed:: *)
(*Erf family and their inverses :*)


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusDawsonFTimesN :*)


TryPlusOrMinusDawsonFTimesN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, branchNumber_] :=
  Module [{ratio = floatToModel / resultMultiplier,
           n},
    n = Ceiling [Abs [ratio / DawsonFInfimumOrSupremumOrdinate [floatToModel/floatToModel]]];
    If [n < $numericPrecisionOfGivenFloat && Abs[ratio] > Sqrt [0.5 * $multipleOfRelErrBoundFor0Ordinates],
        TryFunctionOfAnAlgNumber [RealInverseDawsonF [ratio / n, branchNumber],
                                  n * resultMultiplier, DawsonF, argMultiplier, degree],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvDawsonF :*)


TryPlusOrMinusInvDawsonF [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
         absRatio},
    absRatio = Abs [ratio];
    TryFunctionOfAnAlgNumber [DawsonF [absRatio],  Sign[ratio] * resultMultiplier,
      RealInverseDawsonF [#, If [absRatio - DawsonFInfimumOrSupremumAbscissa [1] < 0,  1,  2]] &,
      argMultiplier,  degree]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusErfcTimesN :*)


TryPlusOrMinusErfcTimesN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] := 
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, ceiling, inverse},
    absRatio = Abs [ratio];
    ceiling = Ceiling [1/2 * absRatio];
    If [ceiling < $numericPrecisionOfGivenFloat,
        inverse = TimeConstrained [InverseErfc [absRatio / ceiling], $timeUnitForTimeConstrainedFunctionalForm];
        If [inverse === $Aborted,
            $TimeOutInverseErfOrErfc,
            TryFunctionOfAnAlgNumber [inverse,  Sign [ratio] * ceiling * resultMultiplier,
                                      Erfc,  argMultiplier,  degree]],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusErfcPlus2n :*)


TryPlusOrMinusErfcPlus2n [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] := 
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, quotient, remainder, inverse},
    absRatio = Abs [ratio];
    quotient = Quotient [absRatio, 2];
    If [quotient === 0,
        $Redundant,
        remainder = Mod [absRatio, 2];
        If [remainder > $multipleOfRelErrBoundFor0Ordinates &&
              Precision [remainder] > $minAllowedPrecisionOfARemainder
              && 3.0 * $multipleOfRelErrBoundFor0Ordinates < remainder
                   < 2 - $multipleOfAbsErrBoundForFiniteNon0Ordinates,
            inverse = TimeConstrained [InverseErfc [remainder], $timeUnitForTimeConstrainedFunctionalForm];
            If [inverse === $Aborted,
                $TimeOutInverseErfOrErfc,
                TryFunctionOfAnAlgNumber [inverse,
                  resultMultiplier, Sign [ratio] * (2*quotient + Erfc [#]) &, argMultiplier, degree]],
            $IllConditionedRemainder]]];


(* ::Subsubsubsection::Closed:: *)
(*TryErfTimesN :*)


TryErfTimesN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] := 
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, ceiling, inverse},
    absRatio = Abs [ratio];
    ceiling = Ceiling [absRatio];
    If [ceiling < $numericPrecisionOfGivenFloat,
        inverse = TimeConstrained [InverseErf [absRatio / ceiling], $timeUnitForTimeConstrainedFunctionalForm];
        If [inverse === $Aborted,
            $TimeOutInverseErfOrErfc,
            TryFunctionOfAnAlgNumber [inverse,
               Sign [ratio] * ceiling * resultMultiplier, Erf, argMultiplier,  degree]],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusErfPlus2n :*)


TryPlusOrMinusErfPlus2n [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] := 
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, quotient, remainder, inverse},
    absRatio = Abs [ratio];
    quotient = Quotient [absRatio, 2, -1];
    If [quotient === 0,
        $Redundant,
        remainder = Mod [absRatio, 2, -1];
        If [Precision [remainder] > $minAllowedPrecisionOfARemainder
           && 3.0 * $multipleOfRelErrBoundFor0Ordinates < Abs [remainder]
                 < 1 - $multipleOfAbsErrBoundForFiniteNon0Ordinates,
            inverse = TimeConstrained [InverseErf [remainder], $timeUnitForTimeConstrainedFunctionalForm];
            If [inverse === $Aborted,
                $TimeOutInverseErfOrErfc,
                TryFunctionOfAnAlgNumber [inverse,
                  resultMultiplier, Sign [ratio] * (2*quotient + Erf [#]) &, argMultiplier, degree]],
            $IllConditionedRemainder]]];


(* ::Subsubsubsection::Closed:: *)
(*TryInverseErf :*)


TryInverseErf [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  With [{ratio = floatToModel / resultMultiplier},
    If [12.0 * $multipleOfRelErrBoundFor0Ordinates / Pi < ratio * ratio < $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [Quiet[Erf [ratio]],  resultMultiplier,
                                  InverseErf,  argMultiplier,  degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryInverseErfc :*)


TryInverseErfc [ratio_, resultMultiplier_, argMultiplier_, degree_, _] :=
    If [12.0 * $multipleOfRelErrBoundFor0Ordinates / Pi < ratio * ratio < $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [oldResult, Erfc [ratio], resultMultiplier,
                                       InverseErfc, argMultiplier, degree],
        $MagnitudeTooExtreme];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusErfi :*)


TryPlusOrMinusErfi [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  TryFunctionOfAnAlgNumber [RealInverseErfi [floatToModel / resultMultiplier],
                            resultMultiplier, Erfi, argMultiplier, degree];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvErfi :*)


TryPlusOrMinusInvErfi [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  With [{ratio = floatToModel / resultMultiplier},
    If [Abs [ratio] < 0.4 * $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [Erfi [ratio],  resultMultiplier,
                                  RealInverseErfi,  argMultiplier,  degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusFresnelCTimesOrOnN :*)


TryPlusOrMinusFresnelCTimesOrOnN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, branchNumber_] :=
  Module [{ratio = floatToModel / resultMultiplier,
           float1 = floatToModel / floatToModel,
           absRatio, localMax, localMin, multiplier},
    absRatio = Abs [ratio];
    If [absRatio > 3.0 * $numericPrecisionOfGivenFloat,
        Return [$OutOfRange]];
    If [OddQ [branchNumber],
        localMax = FresnelCInfimumOrSupremumOrdinate [float1*branchNumber];
        localMin = If [branchNumber == 1,
                       0,
                       FresnelCInfimumOrSupremumOrdinate [float1*(branchNumber - 1)]],
        localMax = FresnelCInfimumOrSupremumOrdinate [float1*(branchNumber - 1)];
        localMin = FresnelCInfimumOrSupremumOrdinate [float1*branchNumber]];
    multiplier = Which [absRatio > localMax,
                          Ceiling [absRatio / localMax],
                        absRatio < localMin,
                          Ceiling [localMin / absRatio] ^ -1,
                        True,
                          1];
    If [(*(4.0 * $numericPrecisionOfGivenFloat) ^ -1 < *)absRatio < 4.0 * $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [RealInverseFresnelC [absRatio / multiplier, branchNumber],
          Sign [ratio] * multiplier * resultMultiplier,  FresnelC, argMultiplier, degree],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvFresnelC :*)


TryPlusOrMinusInvFresnelC [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio},
    absRatio = Abs [ratio];
    TryFunctionOfAnAlgNumber [FresnelC [absRatio],  Sign[ratio] * resultMultiplier,
                              RealInverseFresnelC [#, Ceiling [(1/2)*(absRatio^2 + 1)]] &,  argMultiplier,  degree]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusFresnelSTimesOrOnN :*)


TryPlusOrMinusFresnelSTimesOrOnN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, branchNumber_] :=
  Module [{ratio = floatToModel / resultMultiplier,
           float1 = floatToModel / floatToModel,
           absRatio, localMax, localMin, multiplier},
    absRatio = Abs [ratio];
    If [absRatio > 3.0 * $numericPrecisionOfGivenFloat,
        Return [$OutOfRange]];
    If [OddQ [branchNumber],
        localMax = FresnelSInfimumOrSupremumOrdinate [float1*branchNumber];
        localMin = If [branchNumber == 1,
                       0,
                       FresnelSInfimumOrSupremumOrdinate [float1*(branchNumber - 1)]],
        localMax = FresnelSInfimumOrSupremumOrdinate [float1*(branchNumber - 1)];
        localMin = FresnelSInfimumOrSupremumOrdinate [float1*branchNumber]];
    multiplier = Which [absRatio > localMax,
                          Ceiling [absRatio / localMax],
                        absRatio < localMin,
                          Ceiling [localMin / absRatio] ^ -1,
                        True,
                          1];
    If [(*(4.0 * $numericPrecisionOfGivenFloat) ^ -1 <*) absRatio < 4.0 * $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [RealInverseFresnelS [absRatio / multiplier, branchNumber],
          Sign [ratio] * multiplier * resultMultiplier,  FresnelS, argMultiplier, degree],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvFresnelS :*)


TryPlusOrMinusInvFresnelS [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio},
    absRatio = Abs [ratio];
    TryFunctionOfAnAlgNumber [FresnelS [absRatio],  Sign[ratio] * resultMultiplier,
                              RealInverseFresnelS [#, Ceiling [(1/2)*absRatio^2]] &,  argMultiplier,  degree]];


(* ::Subsubsection::Closed:: *)
(*Elliptic family and their inverses :*)


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusArithmeticGeometricMean1 :*)


TryPlusOrMinusArithmeticGeometricMean1 [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio},
    absRatio = Abs [ratio];
    If [0.3 < absRatio * Precision [ratio],
        TryFunctionOfAnAlgNumber [RealInverseArithmeticGeometricMean1 [absRatio],
          Sign [ratio] * resultMultiplier,  ArithmeticGeometricMean [1, #] &,  argMultiplier,  degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvArithmeticGeometricMean1 :*)


TryPlusOrMinusInvArithmeticGeometricMean1 [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  With [{ratio = floatToModel / resultMultiplier},
    TryFunctionOfAnAlgNumber [ArithmeticGeometricMean [1, Abs[ratio]],  Sign[ratio] * resultMultiplier,
                              RealInverseArithmeticGeometricMean1,  argMultiplier,  degree]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusEllipticEMaybeMinus1 :*)


TryPlusOrMinusEllipticEMaybeMinus1 [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, decrement, excessOver1, transformedFloat, merit},
    absRatio = Abs [ratio];
    Which [
      absRatio >  0.5 / $multipleOfAbsErrBoundForInfMagOrdinates,
        $MagnitudeTooExtreme,
      excessOver1 = absRatio - 1;  excessOver1 >= 0,
        $Redundant,
      Precision [excessOver1] < $minAllowedPrecisionOfARemainder ||
          absRatio < $multipleOfAbsErrBoundForFiniteNon0Ordinates,
        $IllConditionedRemainder,
      True,
        TryFunctionOfAnAlgNumber [RealInverseEllipticE [absRatio + 1],  resultMultiplier, 
                                  Sign [ratio] * (EllipticE [#] - 1) &,  argMultiplier, degree]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusEllipticEOnN :*)


TryPlusOrMinusEllipticEOnN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, ceiling, transformedFloat},
    absRatio = Abs [ratio];
    If [absRatio >  0.5 / $multipleOfAbsErrBoundForInfMagOrdinates,
        $MagnitudeTooExtreme,
        ceiling = Ceiling [absRatio ^ -1];
        If [ceiling < 0.5 * $numericPrecisionOfGivenFloat,
            TryFunctionOfAnAlgNumber [RealInverseEllipticE [ceiling * absRatio],
              Sign [ratio] * ceiling ^ -1 * resultMultiplier,  EllipticE,  argMultiplier,  degree],
            $OutOfRange]]];


(* ::Subsubsubsection::Closed:: *)
(*TryInvEllipticEPlusN :*)


TryInvEllipticEPlusN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] := 
  Module [{ratio = floatToModel / resultMultiplier,
           quotient, remainder},
    quotient = Quotient [ratio, 1];
    If [quotient < 1,
        $Redundant,
        remainder = Mod [ratio, 1];
        If [Abs [remainder] > $multipleOfAbsErrBoundFor0Ordinates
              && Precision [remainder] > $minAllowedPrecisionOfARemainder (*&&
                 Sqrt [3.0 * $multipleOfRelErrBoundFor0Ordinates] < Abs [remainder] <
                   1 - Max [1.0, Abs [quotient]] * $multipleOfAbsErrBoundForFiniteNon0Ordinates*),
            TryFunctionOfAnAlgNumber [EllipticE [remainder],  resultMultiplier,
                                      quotient + RealInverseEllipticE [#] &, argMultiplier, degree],
            $IllConditionedRemainder]]];


(* ::Subsubsubsection::Closed:: *)
(*TryInvEllipticETimesN :*)


TryInvEllipticETimesN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           n},
    n = If [ratio > 1,  Ceiling [ratio],  1];
    TryFunctionOfAnAlgNumber [EllipticE [ratio / n],  n * resultMultiplier,
                              RealInverseEllipticE,  argMultiplier,  degree]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusEllipticK :*)


TryPlusOrMinusEllipticK [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           precision, absRatio, inverse},
    precision = Precision [ratio];
    absRatio = Abs [ratio];
    If [$numericPrecisionOfGivenFloat ^ -2 < absRatio < 0.5 * $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [RealInverseEllipticK [absRatio],
                                  Sign[ratio] * resultMultiplier, EllipticK, argMultiplier, degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryInvEllipticKPlusN :*)


TryInvEllipticKPlusN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] := 
  Module [{ratio = floatToModel / resultMultiplier,
           quotient, remainder},
    quotient = Quotient [ratio, 1];
    If [quotient < 1,
        $Redundant,
        remainder = Mod [ratio, 1];
        If [Abs [remainder] > $multipleOfAbsErrBoundFor0Ordinates
              && Precision [remainder] > $minAllowedPrecisionOfARemainder (*&&
                 Sqrt [3.0 * $multipleOfRelErrBoundFor0Ordinates] < Abs [remainder] <
                   1 - Max [1.0, Abs [quotient]] * $multipleOfAbsErrBoundForFiniteNon0Ordinates*),
            TryFunctionOfAnAlgNumber [EllipticK [remainder],  resultMultiplier,
                                      quotient + RealInverseEllipticK [#] &, argMultiplier, degree],
            $IllConditionedRemainder]]];


(* ::Subsubsubsection::Closed:: *)
(*TryInvEllipticKTimesN :*)


TryInvEllipticKTimesN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           n},
    n = If [ratio > 1,  Ceiling [ratio],  1];
    TryFunctionOfAnAlgNumber [EllipticK [ratio / n],  n * resultMultiplier,
                              RealInverseEllipticK,  argMultiplier,  degree]];


(* ::Subsubsubsection::Closed:: *)
(*TryEllipticNomeQPlus2N :*)


(* Approaches 1 so steeply and -1 so slowly that it is not worth trying the TimesN: *)
(* Also try 1 / EllipticNomeQ ?? *)
TryEllipticNomeQPlus2N [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] := 
  Module [{ratio = floatToModel / resultMultiplier,
           quotient, remainder},
    quotient = Quotient [ratio, 2, -1];
    remainder = Mod [ratio, 2, -1];
    If [-1 + Sqrt [Sqrt [$multipleOfAbsErrBoundForFiniteNon0Ordinates]] <
          remainder < 1 - remainder && Precision [remainder] >= $MachinePrecision
          && Abs [remainder] > $multipleOfRelErrBoundFor0Ordinates,
        TryFunctionOfAnAlgNumber [
          InverseEllipticNomeQ [If [remainder < 0,  remainder / (remainder - 1), remainder]],
          resultMultiplier,  2 * quotient + ellipticNomeQ[#] &,  argMultiplier,  degree],
        $ValueTooCloseTo1]];


(* ::Subsubsubsection::Closed:: *)
(*TryInvEllipticNomeQPlusN :*)


TryInvEllipticNomeQPlusN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  (* Limit -> -Infinity as x -> -1^+, but can't make it work for negative x: *)
  Module [{ratio = floatToModel / resultMultiplier,
           n},
    n = Max [0, Floor[ratio]];
    If [n === 0,
        $Redundant,
        If [n < 9*$numericPrecisionOfGivenFloat,  (* :unlimited ?? *)
            Quiet [TryFunctionOfAnAlgNumber [EllipticNomeQ[ratio - n], resultMultiplier,
                                             (n + InverseEllipticNomeQ[#]) &, argMultiplier, degree]],
        $MagnitudeTooExtreme]]];


(* ::Subsubsubsection::Closed:: *)
(*TryInvEllipticNomeQTimesN :*)


TryInvEllipticNomeQTimesN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  (* Limit -> -Infinity as x -> -1^+, but can't make it work for negative x: *)
  Module [{ratio = floatToModel / resultMultiplier,
           n},
    n = If [ratio > 1,
            Ceiling [ratio],
            1];
    If [n < $numericPrecisionOfGivenFloat && (ratio /= n) < 1, (* :because 1.0 is wrongly nonreal. *)
        (*If [1 - ratio > $multipleOfAbsErrBoundForFiniteNon0Ordinates,*)
            Quiet [TryFunctionOfAnAlgNumber [EllipticNomeQ[ratio / n], n * resultMultiplier,
                                             InverseEllipticNomeQ, argMultiplier, degree]],
           (* $ValueTooCloseTo1],*)
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusEllipticTheta2Zero :*)


(* EllipticTheta[1, 0, x] is 0 for -1 < x < 1 and non-real elsewhere for real x.
   EllipticTheta[4, 0, x] === EllipticTheta [3, 0, -x].
   Therefore only EllipticTheta [2, 0, x] and EllipticTheta [3, 0, x] are implemented: *)

TryPlusOrMinusEllipticTheta2Zero [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, precision, inverse},
    absRatio = Abs [ratio];
    precision = Precision [ratio];
    (* Upper bound is to distinguish from EllipticTheta3Zero: *)
    If [Sqrt [$multipleOfRelErrBoundFor0Ordinates] < absRatio  <
          EllipticTheta[2, 0, 4.842765913272195` + 1.0498529117671158`*precision - 0.10132118364233778`
            * Sqrt[2607.334515115984` + precision*(785.9625865702969` + 107.36343673718758`*precision)]],
        TryFunctionOfAnAlgNumber [RealInverseEllipticTheta2Zero [absRatio], Sign [ratio] * resultMultiplier,
                                  EllipticTheta [2, 0, #] &,  argMultiplier,  degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvEllipticTheta2ZeroPlusN :*)


TryPlusOrMinusInvEllipticTheta2ZeroPlusN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] := 
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, quotient, remainder},
    absRatio = Abs [ratio];
    quotient = Quotient [absRatio, 1];
    If [quotient === 0,
        $Redundant,
        remainder = Mod [ratio, 1];
        If [Abs [remainder] > $multipleOfAbsErrBoundFor0Ordinates
              && Precision [remainder] > $minAllowedPrecisionOfARemainder (*&&
                 Sqrt [3.0 * $multipleOfRelErrBoundFor0Ordinates] < Abs [remainder] <
                   1 - Max [1.0, Abs [quotient]] * $multipleOfAbsErrBoundForFiniteNon0Ordinates*),
            TryFunctionOfAnAlgNumber [EllipticTheta [2, 0, remainder],  resultMultiplier,
              Sign [ratio] * (quotient + RealInverseEllipticTheta2Zero [#]) &, argMultiplier, degree],
            $IllConditionedRemainder]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvEllipticTheta2ZeroTimesN :*)


TryPlusOrMinusInvEllipticTheta2ZeroTimesN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, n},
    Assert [ratio != 0];
    absRatio = Abs [ratio];
    n = Ceiling [absRatio];
    If [n < $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [Re [EllipticTheta [2, 0, absRatio / n]],  n * Sign[ratio] * resultMultiplier,
                                  RealInverseEllipticTheta2Zero,  argMultiplier,  degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusEllipticTheta3Zero :*)


TryPlusOrMinusEllipticTheta3Zero [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, precision},
    absRatio = Abs [ratio];
    precision = Precision [ratio];
    If [0 < absRatio (* Upper bound is to distinguish from EllipticTheta2Zero: *)
          < EllipticTheta[3, 0, 4.842765913272195` + 1.0498529117671158`*precision - 0.10132118364233778`
             * Sqrt[2607.334515115984` + precision*(785.9625865702969` + 107.36343673718758`*precision)]],
        TryFunctionOfAnAlgNumber [RealInverseEllipticTheta3Zero [absRatio], Sign [ratio] * resultMultiplier,
                                  EllipticTheta [3, 0, #] &,  argMultiplier,  degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryInvEllipticTheta3ZeroPlusN :*)


TryInvEllipticTheta3ZeroPlusN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] := 
  Module [{ratio = floatToModel / resultMultiplier,
           quotient, remainder},
    If [-1 < ratio < $precisionOfGivenFloat,
        quotient = Quotient [ratio, 1];
        If [quotient < 1,
            $Redundant,
            remainder = Mod [ratio, 1];
            If [remainder > $multipleOfAbsErrBoundFor0Ordinates
                  && Precision [remainder] > $minAllowedPrecisionOfARemainder (*&&
                     Sqrt [3.0 * $multipleOfRelErrBoundFor0Ordinates] < Abs [remainder] <
                       1 - Max [1.0, Abs [quotient]] * $multipleOfAbsErrBoundForFiniteNon0Ordinates*),
                TryFunctionOfAnAlgNumber [EllipticTheta [3, 0, remainder],  resultMultiplier,
                  quotient + RealInverseEllipticTheta3Zero [#] &, argMultiplier, degree],
                $IllConditionedRemainder]],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryInvEllipticTheta3ZeroTimesN :*)


TryInvEllipticTheta3ZeroTimesN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           n},
    Assert [ratio != 0];
    n = Ceiling [Abs [ratio]];
    If [n < $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [Re [EllipticTheta [3, 0, ratio / n]],  n * resultMultiplier,
                                  RealInverseEllipticTheta3Zero,  argMultiplier,  degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsection::Closed:: *)
(*Bessel family and their inverses :*)


(* ::Subsubsubsection::Closed:: *)
(*TryAiryAiTimesN :*)


TryAiryAiTimesN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, branchNumber_] :=
  Module [{ratio = floatToModel / resultMultiplier,
           n},
    Which [
      branchNumber == 1 && ratio < 0,
        $OutOfRange,
      n = Ceiling [ratio / AiryAiInfimumOrSupremumOrdinate [
                             branchNumber - Boole [OddQ[branchNumber] === (ratio > 0)]]];
      n < 3 * $numericPrecisionOfGivenFloat,            
        TryFunctionOfAnAlgNumber [RealInverseAiryAi [ratio/n, branchNumber],
                                  n * resultMultiplier, AiryAi , argMultiplier, degree],
      True,
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryAiryBiTimesN :*)


TryAiryBiTimesN [floatToModel_, resultMultiplier_, argMultiplier_, degree_, branchNumber_] :=
  Module [{ratio = floatToModel / resultMultiplier,
           n},
    Which [
      branchNumber == 1 && ratio > 0.5 * $numericPrecisionOfGivenFloat,
        $MagnitudeTooExtreme,
      n = If [branchNumber == 1 && ratio > 0,
              1,
              Ceiling [ratio / AiryBiInfimumOrSupremumOrdinate [
                                 branchNumber - Boole [OddQ[branchNumber] === (ratio < 0)]]]];
      n < 0.5 * $numericPrecisionOfGivenFloat,
        TryFunctionOfAnAlgNumber [RealInverseAiryBi [ratio/n, branchNumber],
                                  n * resultMultiplier, AiryBi , argMultiplier, degree],
      True,
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusBesselI :*)


TryPlusOrMinusBesselI [floatToModel_, m_, resultMultiplier_, argMultiplier_, degree_, branchNumber_] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, ceiling},
    absRatio = Abs [ratio];
    ceiling = If [m == 0 && absRatio < 1,
                  Ceiling [absRatio ^ -1],
                  1];
    If [m == 0 (*&& absRatio > 1.0 + $multipleOfRelErrBoundForFiniteNon0Ordinates*) &&
             ceiling < 4.0 * $numericPrecisionOfGivenFloat ||
           m >= 1 && absRatio > Sqrt [$multipleOfRelErrBoundFor0Ordinates / (4.0 * (m + 1))],
        TryFunctionOfAnAlgNumber [RealInverseBesselI [m, ceiling * absRatio, branchNumber],
          Sign [ratio] * resultMultiplier / ceiling, BesselI [m, #] &,  argMultiplier,  degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvBesselI :*)


TryPlusOrMinusInvBesselI [floatToModel_, m_, resultMultiplier_, argMultiplier_, degree_, _] :=
  With [{ratio = floatToModel / resultMultiplier},
    Assert [m >= 0 && WholeNumberQ [m]];
    TryFunctionOfAnAlgNumber [BesselI [m, Abs[ratio]],  Sign[ratio] * resultMultiplier,
                              RealInverseBesselI [m, #] &,  argMultiplier,  degree]];


(* ::Subsubsubsection::Closed:: *)
(*TryBesselJOnN :*)


TryBesselJOnN [floatToModel_, m_, resultMultiplier_, argMultiplier_, degree_, branchNumber_] :=
  Module [{ratio = floatToModel / resultMultiplier,
           n},
    If [Abs [ratio] > 3 * $numericPrecisionOfGivenFloat,
        $OutOfRange,
        n = Ceiling [Abs [ratio / BesselJInfimumOrSupremumOrdinate [(floatToModel/floatToModel)*m,
              If [m > 0 && EvenQ [m] && branchNumber === 1,
                  1,
                  branchNumber - Boole [(ratio > 0) === If [m == 0,
                                                            OddQ [branchNumber],
                                                            EvenQ [branchNumber]]]]]]];
        If [n > 3 * $numericPrecisionOfGivenFloat,
            $OutOfRange,
            TryFunctionOfAnAlgNumber [RealInverseBesselJ [m, ratio/n, branchNumber],  n * resultMultiplier,
                                      BesselJ[m, #] & ,  argMultiplier,  degree]]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvBesselJ :*)


TryPlusOrMinusInvBesselJ [floatToModel_, m_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, branch},
    Assert [m >= 0 && WholeNumberQ [m]];
    absRatio = Abs [ratio];
    branch = Max [1, Round [0.2 - 0.5*m + absRatio/Pi]];
    While [BesselJInfimumOrSupremumAbscissa[m, branch] - absRatio < 0,
           ++ branch];
    TryFunctionOfAnAlgNumber [BesselJ [m, absRatio],  Sign[ratio] * resultMultiplier,
                              RealInverseBesselJ [m, #, branch] &,  argMultiplier,  degree]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusBesselK :*)


TryPlusOrMinusBesselK [floatToModel_, m_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio},
    absRatio = Abs [ratio];
    If [m === 0 && absRatio < $numericPrecisionOfGivenFloat
          || m === 1 && ratio < (4.0 * $multipleOfAbsErrBoundForInfMagOrdinates) ^ -(1/2)
          || m > 1 && absRatio < 2.0 ^ (m - 1) * (m - 1)!
                     * ((4.0 * m - 4.0) * $multipleOfAbsErrBoundForInfMagOrdinates)
                           ^ -(1/2 * m),
        TryFunctionOfAnAlgNumber [RealInverseBesselK [m, absRatio],
          Sign [ratio] * resultMultiplier, BesselK [m, #] &, argMultiplier, degree],
        $MagnitudeTooExtreme]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvBesselK :*)


TryPlusOrMinusInvBesselK [floatToModel_, m_, resultMultiplier_, argMultiplier_, degree_, _] :=
  With [{ratio = floatToModel / resultMultiplier},
    Assert [m >= 0 && WholeNumberQ [m]];
    TryFunctionOfAnAlgNumber [BesselK [m, Abs[ratio]],  Sign[ratio] * resultMultiplier,
                              RealInverseBesselK [m, #] &,  argMultiplier,  degree]];


(* ::Subsubsubsection::Closed:: *)
(*TryBesselYTimesN :*)


TryBesselYTimesN [floatToModel_, m_, resultMultiplier_, argMultiplier_, degree_, branchNumber_] :=
  Module [{ratio = floatToModel / resultMultiplier,
           n, inverse, candidate, entropy10},
    If [m == 0 && ratio < -$numericPrecisionOfGivenFloat, 
        $MagnitudeTooExtreme,
        n = If [branchNumber === 1 && ratio < 0,
                1,
                Ceiling [ratio / BesselYInfimumOrSupremumOrdinate [m,
                                   branchNumber - Boole [OddQ[branchNumber] === (ratio < 0)]]]];
        If [n < 2 * $numericPrecisionOfGivenFloat,
            TryFunctionOfAnAlgNumber [RealInverseBesselY [m, ratio / n, branchNumber], n * resultMultiplier,
                                      BesselY[m, #] &, argMultiplier, degree],
            $OutOfRange]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvBesselY :*)


TryPlusOrMinusInvBesselY [floatToModel_, m_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, branch},
    Assert [m >= 0 && WholeNumberQ [m]];
    absRatio = Abs [ratio];
    branch = Max [1, Round [0.64 - 0.5*m + absRatio/Pi]];
    While [BesselYInfimumOrSupremumAbscissa[m, branch] - absRatio < 0,
           ++ branch];
    TryFunctionOfAnAlgNumber [BesselY [m, absRatio],  Sign[ratio] * resultMultiplier,
                              RealInverseBesselY [m, #, branch] &,  argMultiplier,  degree]];


(* ::Subsubsubsection::Closed:: *)
(*TrySphericalBesselJTimesN :*)


TrySphericalBesselJTimesN [floatToModel_, m_, resultMultiplier_, argMultiplier_, degree_, branchNumber_] :=
  Module [{ratio = floatToModel / resultMultiplier,
           n},
    If [Abs [ratio] > 3 * $numericPrecisionOfGivenFloat,
        $OutOfRange,
        n = Ceiling [Abs [ratio / BesselJInfimumOrSupremumOrdinate [(floatToModel/floatToModel)*m,
              If [m > 0 && EvenQ [m] && branchNumber === 1,
                  1,
                  branchNumber - Boole [(ratio > 0) === If [m == 0,
                                                            OddQ [branchNumber],
                                                            EvenQ [branchNumber]]]]]]];
        If [n > 3 * $numericPrecisionOfGivenFloat,
            $OutOfRange,
            TryFunctionOfAnAlgNumber [RealInverseSphericalBesselJ [m, ratio/n, branchNumber],  n * resultMultiplier,
                                      SphericalBesselJ[m, #] & ,  argMultiplier,  degree]]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvSphericalBesselJ :*)


TryPlusOrMinusInvSphericalBesselJ [floatToModel_, m_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, branch},
    Assert [m >= 0 && WholeNumberQ [m]];
    absRatio = Abs [ratio];
    branch = Max [1, Round [-0.5*m + absRatio/Pi]];
    While [SphericalBesselJInfimumOrSupremumAbscissa[m, branch] - absRatio < 0,
           ++ branch];
    TryFunctionOfAnAlgNumber [SphericalBesselJ [m, absRatio],  Sign[ratio] * resultMultiplier,
                              RealInverseSphericalBesselJ [m, #, branch] &,  argMultiplier,  degree]];


(* ::Subsubsubsection::Closed:: *)
(*TrySphericalBesselYTimesN :*)


TrySphericalBesselYTimesN [floatToModel_, m_, resultMultiplier_, argMultiplier_, degree_, branchNumber_] :=
  Module [{ratio = floatToModel / resultMultiplier,
           n, inverse, candidate, entropy10},
    If [ratio < -$numericPrecisionOfGivenFloat,  (* Refine this test to depend on m !! *)
        $MagnitudeTooExtreme,
        n = If [branchNumber === 1 && ratio < 0,
                1,
                Ceiling [ratio / SphericalBesselYInfimumOrSupremumOrdinate [m,
                                   branchNumber - Boole [OddQ[branchNumber] === (ratio < 0)]]]];
        If [n < 2 * $numericPrecisionOfGivenFloat,
            TryFunctionOfAnAlgNumber [RealInverseSphericalBesselY [m, ratio / n, branchNumber],
              n * resultMultiplier, SphericalBesselY[m, #] &, argMultiplier, degree],
            $OutOfRange]]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvSphericalBesselY :*)


TryPlusOrMinusInvSphericalBesselY [floatToModel_, m_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio, branch},
    Assert [m >= 0 && WholeNumberQ [m]];
    absRatio = Abs [ratio];
    branch = Max [1, Round [-0.5*m + absRatio/Pi]];
    branch = Max [1, Round [0.2 - 0.5*m + absRatio/Pi]];
    While [SphericalBesselYInfimumOrSupremumAbscissa[m, branch] - absRatio < 0,
           ++ branch];
    TryFunctionOfAnAlgNumber [SphericalBesselY [m, absRatio],  Sign[ratio] * resultMultiplier,
                              RealInverseSphericalBesselY [m, #, branch] &,  argMultiplier,  degree]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusStruveL :*)


TryPlusOrMinusStruveL [floatToModel_, m_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio},
    absRatio = Abs [ratio];
    If [m >= 1 || absRatio > $numericPrecisionOfGivenFloat ^ -1,
        TryFunctionOfAnAlgNumber [RealInverseStruveL [m, absRatio, 1],
              Sign [ratio] * resultMultiplier,  StruveL [m, #] &,  argMultiplier,  degree],
        $OutOfRange]];


(* ::Subsubsubsection::Closed:: *)
(*TryPlusOrMinusInvStruveL :*)


TryPlusOrMinusInvStruveL [floatToModel_, m_, resultMultiplier_, argMultiplier_, degree_, _] :=
  Module [{ratio = floatToModel / resultMultiplier,
           absRatio},
    absRatio = Abs [ratio];
    If [absRatio < 2.0 * $numericPrecisionOfGivenFloat,  (* Does not work well for m == 0 *)
        TryFunctionOfAnAlgNumber [StruveL [m, absRatio],  Sign[ratio] * resultMultiplier,
                                  RealInverseStruveL[m, #] &,  argMultiplier,  degree],
        $MagnitudeTooExtreme]];


(* ::Subsection::Closed:: *)
(*FailSymbolOrRawCandidateRecord*)


FailSymbolOrRawCandidateRecord [candidate_, entropy10_] :=
  Module [{NOfnonFloatConstant =
             Quiet [N [candidate, If [$givenFloatIsMachineNumberQ,
                                      $precisionOrAccuracyPlusDelta,
                                      {Infinity, $precisionOrAccuracyPlusDelta}]]],
           maxAbs, agreement, merit},
    Assert [candidate =!= {}];
    If [Head [NOfnonFloatConstant] === Complex,
        If [TrueQ [Abs [Im [NOfnonFloatConstant]] >
                     100.0 * $precisionOfGivenFloat * Abs [NOfnonFloatConstant = Re [NOfnonFloatConstant]] ||
                   Head [NOfnonFloatConstant] =!= Real],
            Return [$NonRealCandidate]]];
    maxAbs = Max [Abs [$givenFloatBoostedForDiscrepancySubtraction], Abs [NOfnonFloatConstant]];
    agreement = If [maxAbs == 0,
                    If [$givenFloatIsMachineNumberQ,
                        $MachinePrecision,
                        $precisionOrAccuracyPlusDelta],
                (* else maxAbs != 0: *)
                    absDifference = Abs [NOfnonFloatConstant - $givenFloatBoostedForDiscrepancySubtraction];
                    If [absDifference == 0,
                        If [$givenFloatIsMachineNumberQ,
                            $MachinePrecision,
                            $precisionOrAccuracyPlusDelta],
                        -RealExponent [absDifference / maxAbs]]];
    (* An example of a helpful place to put such a debug Print: *)
(*If [! FreeQ [candidate, Cosh] && ! FreeQ [candidate, Sinh],
Print [{FailSymbolOrRawCandidateRecord, candidate, entropy10, agreement, maxAbs}]];*)
    Which [
      agreement < $minSaveRejectAggreement,
        $InsufficientAgreement,
      merit = agreement - entropy10;
      merit < $minSaveRejectMerit,
        $InsufficientMeritForRetentionAsReject,
      entropy10 > $maxAllowedEntropy10,
        $ExcessiveComplexity,
      True,
        {candidate, agreement, entropy10, merit}]];


(* ::Subsection::Closed:: *)
(*Propose function*)


(* ::Subsubsubsection::Closed:: *)
(*TimedPropose :*)


TimedPropose [args__] := Timing [Propose [args]];


(* ::Subsubsubsection::Closed:: *)
(*ProposeBestVerbose :*)


Unprotect [ProposeBestVerbose];

Options [ProposeBestVerbose] = {
  TaskList -> $SortedDefaultTasks,
  MinAcceptableAgreement -> -Infinity,
  MinAcceptableMerit -> -Infinity,
  MaxAllowedEntropy10 -> Infinity,
  MaxSearchSec -> Infinity
};

ProposeBestVerbose [givenFloat_, OptionsPattern [ProposeBestVerbose]] :=
   (* Returns expression or given float *)
  With [{proposeResult =
    Propose [givenFloat,
             TaskList -> OptionValue [TaskList],
             VerboseQ -> True,
             PairWithRejectsQ -> False,
             CollectEquivalentCandidatesQ -> False,
             MinAcceptableAgreement -> OptionValue [MinAcceptableAgreement],
             MinSaveRejectAgreement -> OptionValue [MinAcceptableAgreement],
             MinAcceptableMerit -> OptionValue [MinAcceptableMerit],
             MinSaveRejectMerit -> OptionValue [MinAcceptableMerit],
             MaxAcceptableCount -> 1,
             MaxAllowedEntropy10 -> OptionValue [MaxAllowedEntropy10],
             MaxSearchSec -> OptionValue [MaxSearchSec]
            ]},
    If [proposeResult === {},
        proposeResult,
        First [proposeResult]]];

Protect [ProposeBestVerbose];


(* ::Subsubsubsection::Closed:: *)
(*ProposeBestBetterThanOrInput :  (Good for mapping over expressions, replacing floats with nonFloats only where they have acceptable Agreement and Merit) :*)


Unprotect [ProposeBestBetterThanOrInput];

Options [ProposeBestBetterThanOrInput] = {
  TaskList -> $SortedDefaultTasks,
  MinAcceptableAgreement -> $MinAcceptableAgreement,
  MinAcceptableMerit -> $LowestGoodMerit,
  MaxAllowedEntropy10 -> Infinity,
  MaxSearchSec -> Infinity
};

ProposeBestBetterThanOrInput [givenFloat_, OptionsPattern [ProposeBestBetterThanOrInput]] :=
   (* Returns expression or given float *)
  With [{proposeResult =
    Propose [givenFloat,
             TaskList -> OptionValue [TaskList],
             VerboseQ -> False,
             PairWithRejectsQ -> False,
             CollectEquivalentCandidatesQ -> False,
             MinAcceptableAgreement -> OptionValue [MinAcceptableAgreement],
             MinSaveRejectAgreement -> OptionValue [MinAcceptableAgreement],
             MinAcceptableMerit -> OptionValue [MinAcceptableMerit],
             MinSaveRejectMerit -> OptionValue [MinAcceptableMerit],
             MaxAcceptableCount -> 1,
             MaxAllowedEntropy10 -> OptionValue [MaxAllowedEntropy10],
             MaxSearchSec -> OptionValue [MaxSearchSec]
             ]},
    If [proposeResult === {},
        givenFloat,
        First [proposeResult]]];

Protect [ProposeBestBetterThanOrInput];


(* ::Subsubsubsection::Closed:: *)
(*Propose [...] :*)


Unprotect [Propose];

Options [Propose] = {
  TaskList -> $SortedDefaultTasks,
  VerboseQ -> True,
  PairWithRejectsQ -> False,
  CollectEquivalentCandidatesQ -> True,
  MinAcceptableAgreement -> $MinAcceptableAgreement,
  MinSaveRejectAgreement -> $MinAcceptableAgreement,
  MinAcceptableMerit -> $LowestBadMerit,
  MinSaveRejectMerit -> 0,
  MaxAcceptableCount -> Infinity,
  MaxAllowedEntropy10 -> Infinity,
  MaxSearchSec -> Infinity
};

Propose [givenFloat_Real, OptionsPattern []] :=
 (* Variables beginning with "$" are read but not changed by direct temporal invokees of Propose [...].
    Even though they are read-only, this might cause incorrect results if there are multiple Propose [...] threads.
    If so, change to recomputing these as needed or passing them all the way down --
      perhaps bundled as a list for a single parameter. *)
  Block [{taskList = OptionValue [TaskList],
          verboseQ = OptionValue [VerboseQ],
          pairWithRejectsQ = OptionValue [PairWithRejectsQ],
          collectEquivalentCandidatesQ = OptionValue [CollectEquivalentCandidatesQ],
          minAcceptableAgreement = OptionValue [MinAcceptableAgreement],
          $minSaveRejectAggreement = OptionValue [MinSaveRejectAgreement],
          $minAcceptableMerit = OptionValue [MinAcceptableMerit],
          $minSaveRejectMerit = OptionValue [MinSaveRejectMerit],
          maxAcceptableCount = OptionValue [MaxAcceptableCount],
          $maxAllowedEntropy10 = OptionValue [MaxAllowedEntropy10],
          maxSearchSec = OptionValue [MaxSearchSec],
(* :TO DO: Error messages. *)
          $givenFloatIsMachineNumberQ = MachineNumberQ [givenFloat],
          $realExponentOfGivenFloat = RealExponent [givenFloat],
          $precisionOfGivenFloat = Precision [givenFloat],
          $absGivenFloat = Abs [givenFloat],
          $doNotSeekHigherEffectiveDegree = False,
          evidentFamily = Null,
          triedUnboosted = False,
          $maxMeritSoFar = -Infinity,
          result = {},
          eliminatedAcceptableRecords = {},

          (* Initialize "reason for rejection" counters used only for development. *)
          $acceptableTableAgreementCount = 0, 
          excessiveComplexity = 0,
          excessNullVectorNorm = 0,
          noNullVector = 0,
          minisculeNullVectorComponent = 0,
          basisHasInsufficientPrecision = 0,
          excessComplexity = 0,
          foundGoodOrBetterLowerDegree = 0,
          givenFloatHasInsufficientPrecision = 0,
          illConditionedRemainder = 0,
          insufficientAgreement = 0,
          insufficientMeritForRetentionAsReject = 0,
          magnitudeTooExtreme = 0,
          nonFiniteRealFunctionalForm = 0,
          nonFloatInverseFunctionValue = 0,
          nonRealCandidate = 0,
          outOfRange = 0,
          redundant = 0,
          rootApproximantFailed = 0,
          rootApproximantReturnedLowerDegree = 0,
          timeOutExp = 0,
          timeOutInverseErfOrErfc = 0,
          timeOutFunctionalForm = 0,
          valueTooCloseTo1 = 0,
          zeroDenominator = 0,
          zeroNumerator = 0,

          $numericPrecisionOfGivenFloat,
          $accuracyOfGivenFloat, precisionGoal, accuracyGoal, $absErrorGoal, $relErrorGoal,
          $givenFloatBoostedForDiscrepancySubtraction,
          $maxNullVectorNorm, $absFloatToModel, $minAllowedPrecisionOfARemainder,
          precisionOfBoostedFloat, $precisionForDiscrepancySubtraction, $timeUnitForTimeConstrainedFunctionalForm,
          $multipleOfAbsErrBoundFor0Ordinates, $multipleOfAbsErrBoundForFiniteNon0Ordinates,
          $multipleOfAbsErrBoundForInfMagOrdinates, $multipleOfRelErrBoundFor0Ordinates,
          $multipleOfRelErrBoundForFiniteNon0Ordinates, $precisionOrAccuracyPlusDelta, $maxAllowedQuotientMagnitude,
          entropy10, merit, candidateRecords, acceptableRecords, acceptableSets, acceptableCount, rejectedCandidateRecords,
          floatToModel, task, oldTaskTime, newTaskTime, absErrBoundOfGivenFloat, failSymbolOrRawCandidateRecord, numberOfTasks,
          numberOfClasses, rejectRecords, equivalentRejects, minusClassRepresentativeCandidate, ReapForAllClassesTag},
    $accuracyOfGivenFloat = If [$givenFloatIsMachineNumberQ,
                                $MachinePrecision,
                                Accuracy [givenFloat]];
    If [givenFloat == 0.0,  (* 0 ?? *)
        entropy10 = Entropy10[0];
        acceptableRecords = {0, $accuracyOfGivenFloat, entropy10, $accuracyOfGivenFloat - entropy10};
        If [verboseQ,
            acceptableRecords = VerbosifyCandidate [acceptableRecords]];
        acceptableRecords = {acceptableRecords};
        If [collectEquivalentCandidatesQ,
            acceptableRecords = {acceptableRecords}];
        Return [If [TrueQ [pairWithRejectsQ],
                    {acceptableRecords, {}},
                    acceptableRecords]]];

    $numericPrecisionOfGivenFloat = N [$precisionOfGivenFloat];
    If [Abs [$realExponentOfGivenFloat] > $numericPrecisionOfGivenFloat - $LowestBadMerit, 
        acceptableRecords = {};
        Return [If [TrueQ [pairWithRejectsQ],
                    {acceptableRecords, {}},
                    acceptableRecords]]];

    $precisionOrAccuracyPlusDelta =
      If [$givenFloatIsMachineNumberQ,
          $MachinePrecision + $AccuracyIncForArbPrecisionSubtract,
          $AccuracyIncForArbPrecisionSubtract + $accuracyOfGivenFloat];

    precisionGoal = If [$givenFloatIsMachineNumberQ,
                         InferMachineFloatPrecisionGoal [givenFloat],
                         Max [$MinAllowedPrecisionGoal,
                         $numericPrecisionOfGivenFloat - $AllowanceForMaximallyWrongLastEnteredDigit]];
    accuracyGoal = precisionGoal - $realExponentOfGivenFloat;
    $absErrorGoal = 10.0 ^ -accuracyGoal;
    $relErrorGoal = $absErrorGoal / $absGivenFloat;
    $minAllowedPrecisionOfARemainder = Max [0.874*$numericPrecisionOfGivenFloat, $MinAllowedPrecision];
    $maxNullVectorNorm = 10.0 * 10.0 ^ (precisionGoal - ($MinAcceptableMerit (*+ $OperationEntropy10*)));
    $maxNullVectorNorm = 10.0 ^ ($numericPrecisionOfGivenFloat - $MinAcceptableMerit - $OperationEntropy10);
    absErrBoundOfGivenFloat = Min [$MinAllowedRelativeErrorBound * $absGivenFloat,
                                   Max [$absErrorGoal,
                                        0(*relativeErrorBoundGoal*) * $absGivenFloat,
                                        10.0 ^ - $accuracyOfGivenFloat]]; (* intentional 1 ulp rather than 0.5 ulp *)
    $multipleOfAbsErrBoundFor0Ordinates = $MultiplierOfAbsErrBoundFor0Ordinates * absErrBoundOfGivenFloat;
    $multipleOfAbsErrBoundForFiniteNon0Ordinates = $MultiplierOfAbsErrBoundForFiniteNon0Ordinates * absErrBoundOfGivenFloat;
    $multipleOfAbsErrBoundForInfMagOrdinates = $MultiplierOfAbsErrBoundForInfMagOrdinates * absErrBoundOfGivenFloat;

    $multipleOfRelErrBoundFor0Ordinates = $multipleOfAbsErrBoundFor0Ordinates / $absGivenFloat;
    $multipleOfRelErrBoundForFiniteNon0Ordinates = $multipleOfAbsErrBoundForFiniteNon0Ordinates / $absGivenFloat;

    precisionOfBoostedFloat = $numericPrecisionOfGivenFloat + $MinExpectedGuardDigits;
    $precisionForDiscrepancySubtraction = If [MachineNumberQ [givenFloat],
                                              precisionOfBoostedFloat,
                                              $numericPrecisionOfGivenFloat + $SlightlyMoreThanMaxExpectedGuardDigits];
    $givenFloatBoostedForDiscrepancySubtraction =
      If [MachineNumberQ [givenFloat],
                          SetPrecision [givenFloat, $AccuracyIncForArbPrecisionSubtract +
                                                    $MachinePrecision],
                          SetAccuracy [givenFloat, $AccuracyIncForArbPrecisionSubtract +
                                                   Accuracy [givenFloat]]];
    $maxAllowedEntropy10 = If [MachineNumberQ [givenFloat],
                                  Ceiling [$MachinePrecision],
                                  Ceiling [$numericPrecisionOfGivenFloat + 2.0]];
                                
    $timeUnitForTimeConstrainedFunctionalForm = $TimeUnitForTimeConstrainedFunctionalForm *
      Max [1.0, precisionOfBoostedFloat / $MachinePrecision] ^ 1.5849625007211563`;
    triedUnboosted = $numericPrecisionOfGivenFloat < $MinPrecisionForNoBoost;
    $absFloatToModel = If [triedUnboosted && ! MachineNumberQ [givenFloat],
                           SetPrecision [$absGivenFloat, precisionOfBoostedFloat],
                           $absGivenFloat];
    floatToModel = If [triedUnboosted && ! MachineNumberQ [givenFloat],
                       SetPrecision [givenFloat, precisionOfBoostedFloat],
                       givenFloat];
    numberOfTasks = Length [taskList];
    newTaskTime = oldTaskTime = AbsoluteTime[];

    candidateRecords = Last [Reap [$proposeTimeoutQ = $Aborted === TimeConstrained [
      LookupScaledCandidatesWithMultipliers [$absFloatToModel, Sign [givenFloat],
                                             $SortedFloats, $SortedNonFloats, $Multipliers];
      If[$maxMeritSoFar < 2 + $LowestSkipOtherFamiliesMerit,
         LookupDisplacedCandidatesWithDisplacements [$absFloatToModel, Sign [givenFloat],
                                             $SortedFloats, $SortedNonFloats, $ZeroToHalfFarey25];
         If[$maxMeritSoFar < 2 + $LowestSkipOtherFamiliesMerit,
            Do[task = taskList[[taskNumber]];  (* Example of a useful debugging Print statement: *)
(*If [First[task] === InverseTrigFamily, Print [{Propose, evidentFamily, task}]];*)
               If [$printTaskTimesQ,
                   Print [{newTaskTime - oldTaskTime, "for previous task. Beginning task ", taskList[[taskNumber]]}]];
               If [evidentFamily === Null || evidentFamily === First [task],
                   (* The purpose of Catch is to just proceed to the next task rather than hang for memory full, etc.: *)
                   failSymbolOrRawCandidateRecord = Catch [Apply [task[[3]], Prepend [Drop[task, 3], floatToModel]],
                                                           _SystemException];
                   If [Head [failSymbolOrRawCandidateRecord] === List,
                       Sow [failSymbolOrRawCandidateRecord, $ReapCandidateRecordsTag];
                       (* Example of a useful debugging Print statement: *)
(*Print [{Propose, Last [failSymbolOrRawCandidateRecord], evidentFamily, task[[1]]}];*)
                       If [evidentFamily === Null && Last [failSymbolOrRawCandidateRecord] > $LowestSkipOtherFamiliesMerit,
                           If [task[[1]] === None,
                               Break []];
                           evidentFamily = task[[1]]],
                       Switch [failSymbolOrRawCandidateRecord,
                         $InsufficientMeritForRetentionAsReject, ++insufficientMeritForRetentionAsReject,
                         $ExcessNullVectorNorm,               ++excessNullVectorNorm,
                         $NoNullVector,                       ++noNullVector,
                         $MinisculeNullVectorComponent,       ++minisculeNullVectorComponent,
                         $ExcessiveComplexity,                ++excessiveComplexity,
                         $RootApproximantFailed,              ++rootApproximantFailed,
                         $Redundant,                          ++redundant,
                         $RootApproximantReturnedLowerDegree,  ++rootApproximantReturnedLowerDegree,
                         $BasisHasInsufficientPrecision,      ++basisHasInsufficientPrecision,
                         $FoundGoodOrBetterLowerDegree,       ++foundGoodOrBetterLowerDegree,
                         $GivenFloatHasInsufficientPrecision, ++givenFloatHasInsufficientPrecision,
                         $IllConditionedRemainder,            ++illConditionedRemainder,
                         $InsufficientAgreement,              ++insufficientAgreement,
                         $MagnitudeTooExtreme,                ++magnitudeTooExtreme,
                         $NonFiniteRealFunctionalForm,        ++nonFiniteRealFunctionalForm,
                         $NonFloatInverseFunctionValue,       ++nonFloatInverseFunctionValue,
                         $NonRealCandidate,                   ++nonRealCandidate,
                         $OutOfRange,                         ++outOfRange,
                         $TimeOutFunctionalForm,              ++timeOutFunctionalForm,
                         $TimeOutInverseErfOrErfc,            ++timeOutInverseErfOrErfc,
                         $TimeOutExp,                          ++timeOutExp,
                         $ValueTooCloseTo1,                    ++valueTooCloseTo1,
                         $ZeroDenominator,                     ++zeroDenominator,
                         $ZeroNumerator,                       ++zeroNumerator,
                         _SystemException,  $systemThrow = Prepend [{task, failSymbolOrRawCandidateRecord},
                                                                    {AbsoluteTime[] - newTaskTime, floatToModel}];
                                            $allSystemThrows = Prepend [$allSystemThrows, $systemThrow]]]];
               oldTaskTime = newTaskTime;
               newTaskTime = AbsoluteTime[],
               {taskNumber, numberOfTasks}]]], maxSearchSec], $ReapCandidateRecordsTag]];
    If [$printTaskTimesQ,
        Print [newTaskTime - oldTaskTime, " for previous task."]];
    If [candidateRecords =!= {},
        candidateRecords = First[candidateRecords]];

    (* EPILOG: *)

    $totalAcceptableTableAgreementCount += $acceptableTableAgreementCount;
    $totalNumberOfTasks += numberOfTasks;
    $totalInsufficientMeritForRetentionAsReject += insufficientMeritForRetentionAsReject;
    $totalNoNullVector += noNullVector;
    $totalExcessNullVectorNorm += excessNullVectorNorm;
    $totalExcessiveComplexity += excessiveComplexity;
    $totalMinisculeNullVectorComponent += minisculeNullVectorComponent;
    $totalRootApproximantFailed += rootApproximantFailed;
    $totalRedundant += redundant;
    $totalRootApproximantReturnedLowerDegree += rootApproximantReturnedLowerDegree;
    $totalBasisHasInsufficientPrecision += basisHasInsufficientPrecision;
    $totalFoundGoodOrBetterLowerDegree += foundGoodOrBetterLowerDegree;
    $totalGivenFloatHasInsufficientPrecision += givenFloatHasInsufficientPrecision;
    $totalIllConditionedRemainder += illConditionedRemainder;
    $totalInsufficientAgreement += insufficientAgreement;
    $totalMagnitudeTooExtreme += magnitudeTooExtreme;
    $totalNonFiniteRealFunctionalForm += nonFiniteRealFunctionalForm;
    $totalNonFloatInverseFunctionValue += nonFloatInverseFunctionValue;
    $totalNonRealCandidate += nonRealCandidate;
    $totalOutOfRange += outOfRange;
    
    $totalTimeOutExp += timeOutExp;
    $totalTimeOutFunctionalForm += timeOutFunctionalForm;
    $totalTimeOutInverseErfOrErfc += timeOutInverseErfOrErfc;
    $totalValueTooCloseTo1 += valueTooCloseTo1;
    $totalZeroDenominator += zeroDenominator;
    $totalZeroNumerator += zeroNumerator;

   If [TrueQ [$printFailSymbolCountsQ], Print [TableForm [{
        {"Number of tasks", numberOfTasks, $totalNumberOfTasks},
        {"$totalAcceptableTableAgreementCount", $totalAcceptableTableAgreementCount, $acceptableTableAgreementCount},
        {$InsufficientMeritForRetentionAsReject, insufficientMeritForRetentionAsReject, $totalInsufficientMeritForRetentionAsReject},
        {$Redundant, redundant, $totalRedundant},
        {$InsufficientAgreement, insufficientAgreement, $totalInsufficientAgreement},
        {$NoNullVector, noNullVector, $totalNoNullVector},
        {$NonFloatInverseFunctionValue, nonFloatInverseFunctionValue, $totalNonFloatInverseFunctionValue},
        {$MagnitudeTooExtreme, magnitudeTooExtreme, $totalMagnitudeTooExtreme},
        {$RootApproximantFailed, rootApproximantFailed, $totalRootApproximantFailed},
        {$NonRealCandidate, nonRealCandidate, $totalNonRealCandidate},
        {$ValueTooCloseTo1, valueTooCloseTo1, $totalValueTooCloseTo1},
        {$BasisHasInsufficientPrecision, basisHasInsufficientPrecision, $totalBasisHasInsufficientPrecision},
        {$IllConditionedRemainder, illConditionedRemainder, $totalIllConditionedRemainder},
        {$OutOfRange, outOfRange, $totalOutOfRange},
        {$GivenFloatHasInsufficientPrecision, givenFloatHasInsufficientPrecision, $totalGivenFloatHasInsufficientPrecision},
        {$RootApproximantReturnedLowerDegree, rootApproximantReturnedLowerDegree, $totalRootApproximantReturnedLowerDegree},
        {$ZeroDenominator, zeroDenominator, $totalZeroDenominator},
        {$ExcessNullVectorNorm, excessNullVectorNorm, $totalExcessNullVectorNorm},
        {$ExcessiveComplexity, excessiveComplexity, $totalExcessiveComplexity},
        {$MinisculeNullVectorComponent, minisculeNullVectorComponent, $totalMinisculeNullVectorComponent},
        {$FoundGoodOrBetterLowerDegree, foundGoodOrBetterLowerDegree, $totalFoundGoodOrBetterLowerDegree},
        {$NonFiniteRealFunctionalForm, nonFiniteRealFunctionalForm, $totalNonFiniteRealFunctionalForm},
        {$TimeOutExp, timeOutExp, $totalTimeOutExp},
        {$TimeOutFunctionalForm, timeOutFunctionalForm, $totalTimeOutFunctionalForm},
        {$TimeOutInverseErfOrErfc, timeOutInverseErfOrErfc, $totalTimeOutInverseErfOrErfc},
        {$ZeroNumerator, zeroNumerator, $totalZeroNumerator}}]]];
    (* Example of a useful debug printout: *)  
(*Print [{Propose, "starting epilog", AbsoluteTime[], Length [candidateRecords]}];*)
    If [candidateRecords === {},
        Return [candidateRecords]];
    If [maxAcceptableCount === 1,
        candidateRecords = largestBy [candidateRecords, Last];
        Return [Which [Last [candidateRecords] < $minAcceptableMerit ||
                           candidateRecords[[2]] < minAcceptableAgreement || 
                           candidateRecords[[3]] > $maxAllowedEntropy10,
                         {},
                       verboseQ,
                         VerbosifyCandidate [candidateRecords],
                       True,
                         candidateRecords]]];

    candidateRecords = DeleteDuplicates [Sort [candidateRecords, Last[#1] > Last[#2] &]];
    acceptableCount = Min [LengthWhile [candidateRecords, Last[#] >= $minAcceptableMerit &],
                           Length[candidateRecords]];
    If [acceptableCount === 0,
        Return [If [pairWithRejectsQ,
                    {{}, If [verboseQ,
                             Map [VerbosifyCandidate, candidateRecords],
                             candidateRecords]},
                    {}]]];
                   
    acceptableRecords = Take [candidateRecords, acceptableCount];
    (* Example of a useful debug printout: *)  
(*Print [{Propose, AbsoluteTime[], acceptableRecords}];*)
    If [! collectEquivalentCandidatesQ,
        Return [If [pairWithRejectsQ,
                    If [verboseQ,
                        {Map [VerbosifyCandidate, acceptableRecords],
                         Map [VerbosifyCandidate, Drop [candidateRecords, acceptableCount]]},
                        {acceptableRecords, Drop [candidateRecords, acceptableCount]}],
                    If [verboseQ,
                        Map [VerbosifyCandidate, acceptableRecords],
                        acceptableRecords]]]];
                     
    acceptableSets = Gather [acceptableRecords, QuietPossibleZeroQ [First[#1] - First[#2]] &];
    rejectRecords = Drop [candidateRecords, acceptableCount];
    (* Example of a useful debug printout: *)  
(*Print [{Propose, AbsoluteTime[], Length[rejectRecords], acceptableSets, rejectRecords}];*)
    If [rejectRecords === {},
        If [verboseQ,
            acceptableSets = Map [VerbosifyCandidate, acceptableSets, {2}]];
        Return [If [pairWithRejectsQ,
                    {acceptableSets, {}},
                    acceptableSets]]];

    equivalentRejects = Reap [
      Do [(* Loop over equivalence classes: *)
          minusClassRepresentativeCandidate = -acceptableSets[[k, 1, 1]];
    (* Example of a useful debug printout: *)  
(*Print [{Propose, minusClassRepresentativeCandidate}];*)
          Sow [Select [rejectRecords,
                       Last[#] > 0.0 && 
                         QuietPossibleZeroQ [minusClassRepresentativeCandidate + First[#]] &],
               ReapForAllClassesTag],
          {k, Length [acceptableSets]}], ReapForAllClassesTag][[2,1]];
    (* Example of a useful debug printout: *)  
(*Print [{Propose, AbsoluteTime[], equivalentRejects}];*)

    If [FreeQ [equivalentRejects, atom_/; AtomQ[atom], Infinity],
        Assert [False];   (* Conjecture *)
        acceptableSets = MapThread [Join [#1, #2] &, {acceptableSets, equivalentRejects}];
        rejectRecords = Select [rejectRecords, ! MemberQ [equivalentRejects, #, {2}] &]];

    acceptableSets = Map [SupplementSetWithEquivalents [givenFloat, #] &, acceptableSets];
    (* Example of a useful debug printout: *)  
(*Print [{Propose, AbsoluteTime[], acceptableSets}];*)

    If [verboseQ,
        acceptableSets = Map [VerbosifyCandidate, acceptableSets, {2}];
        If [pairWithRejectsQ,
            {acceptableSets, Map [VerbosifyCandidate, rejectRecords]},
            acceptableSets],
        If [pairWithRejectsQ,
            {acceptableSets, rejectRecords},
            acceptableSets]]];

Protect [Propose];


(* ::Subsection::Closed:: *)
(*Test functions*)


(* ::Subsubsubsection::Closed:: *)
(*FofRandomQuadratic :*)


FofRandomQuadratic [f_,  maxInteger_:9] :=
  If [! MemberQ [$FunctionsOfQuadratics, f],
      {"unimplemented function", 0.0},
      Module [{quad, x, fOfQuad, n},
        While [True,  (* Guaranteed positive with no cancelation: *)
          quad = Root [RandomInteger [{-maxInteger, -1}] + RandomInteger [{-maxInteger, -1}]*x + x^2, 2];
          If [! NumberQ [quad] && Im [quad] == 0 && Re [quad] > 0.2,
              fOfQuad = Switch [f,
                ArcCos,
                  If [quad > 1,  quad = quad^-1];
                  GentleSimplifiedArcCos [quad] + Pi * RandomInteger [{1, 9}],
                ArcCosh,
                  If [quad < 1,
                      quad = quad^-1;
                      If [quad < 0.2,
                          quad = 1 - quad]];
                  ArcCosh [quad],
                ArcSin,
                  If [quad > 1,  quad = quad^-1];
                  GentleSimplifiedArcSin [quad] + Pi * RandomInteger [{1, 9}],
                ArcSinh,
                  ArcSinh [quad],
                ArcTan,
                  If [quad > 1.0,  (* :This happens about 50% of the time ?? *)
                      n = RandomInteger [{2, maxInteger}];  (* :Min [maxInteger, Ceiling [N[quad]]] ?? *)
                      n * GentleSimplifiedArcTan [n * quad],
                      GentleSimplifiedArcTan [quad] + RandomSign[]*RandomInteger [{1, 9}] * Pi],
                ArcTanh,
                  ArcTanh [If [quad > 1, quad^-1, quad]],
                InverseHaversine,
                  InverseHaversine [quad] + Pi * RandomInteger [{1, 9}],
                Log,
                  Log [quad]];
              If [fOfQuad =!= $Failed,
                  If [Head [NForMeritGoal [quad, $LowestExcellentMerit]] === Real,
                      Return [fOfQuad]]]]]]];


(* ::Subsubsubsection::Closed:: *)
(*FofRandomRational :*)


FofRandomRational [f_,  maxInteger_:99] :=
  If [! MemberQ [$allFunctions, f],
      {"unimplemented function", 0.0},  (* Logs, inverse hyperbolic and inverse trig instead do quadratic operands. *)
      Module [{rat, order, branch, fOfRat},
        While [True,
          rat = RandomInteger [{1, maxInteger}] / RandomInteger [{1, maxInteger}];
          If [IntegerQ [rat], Continue []];
          fOfRat = Switch [f,  (* Change to fOfRat = Switch [...]: *)
            AiryAi,  AiryAi [-Mod [rat, 10]],
            AiryBi,  AiryBi [-Mod [rat, 10]],
            ArithmeticGeometricMean,  ArithmeticGeometricMean [1, rat],
            BesselI,  BesselI [RandomInteger [$MaxAllowedBesselIIndex], rat],
            BesselJ,  BesselJ [RandomInteger [$MaxAllowedBesselJIndex], rat],
            BesselK,  BesselK [RandomInteger [$MaxAllowedBesselKIndex], rat],
            BesselY,  BesselY [RandomInteger [$MaxAllowedBesselYIndex], rat],
            Cos,   If [rat > 1.0, (* :50% chance *)
                      RandomInteger [{3, 9}] * Cos [Pi*RandomChoice [{13/95,10/73,11/80,13/94,11/79,13/93,10/71,11/78,12/85,13/92,14/99}]],
                      2 * RandomInteger [{5,15}] + Cos [Pi*RandomChoice [{37/99,37/98,37/97,38/99,37/96,37/95,38/97,37/94,37/93,39/98,39/97,37/92}]]],
            Cosh,  If [rat > 1.0,
                       Cosh [RandomChoice [{43/96,43/95,44/97,43/94,45/98,43/93,44/95,45/97,46/99}]]/RandomInteger [{3, 9}],
                       -1 + Cosh [RandomChoice [{94/99,95/99,94/97,95/98,95/97,97/99,94/95,95/96,96/97,97/98,98/99}]]],
            Cot,   Cot [Pi * If [rat > 1, rat^-1, rat]],
            Coth,  If [rat > 1.0,  (* Same lists as for Cosh: *)
                       Coth [RandomChoice [{73/75,91/93,89/87,71/69,53/51,45/43,39/37,33/31,59/55,51/47,91/83}]]/RandomInteger [{2,3}],
                       -1 + Coth [RandomChoice [{94/99,95/99,94/97,95/98,95/97,97/99,94/95,95/96,96/97,97/98,98/99}]]],
            Csc,   If [Numerator[rat] < 26 && Denominator[rat] < 26,
                       Continue [],
                       Csc [Pi/3 * If [rat > 1,  rat ^ -1,  rat]]],
            Csch,  If [Denominator[rat] < 26 && Numerator[rat] < 26,
                       Continue [],
                       Csch [rat]],
            EllipticE, If [rat > 1.0,
                           EllipticE [RandomChoice [{87/98,89/99,88/97,87/95,89/97,91/99,87/94,88/95,89/96,90/97,92/99,89/95,91/97}]]/RandomInteger [{3, 7}],
                           -1 + EllipticE [RandomChoice [{26/99,35/89,34/73,46/87,53/90,49/76,58/83,61/81,37/46,59/69}]]],
            EllipticK,  If [Numerator [rat] < 26 && Denominator [rat] < 26,
                            Continue [],
                            EllipticK [If [rat > 1,  rat^-1,  rat]]],
            EllipticTheta,
              rat = Mod [rat, 1];
              If [rat > 1/2,  rat = 1 - rat];
              EllipticTheta [2 + RandomInteger [], 0, rat],
            Erf,  If [rat > 1.0,
                      RandomInteger [{3, 14}] *
                        Erf [RandomChoice [{97/70, 98/71, 95/69, 93/68, 97/71, 94/69, 99/73, 96/71, 97/72, 98/73, 91/68, 95/71, 99/74}]],
                      2 * RandomInteger [{2, 5}] + Erf [RandomChoice [{26/99,29/71,29/59,49/87,29/46,55/79,47/62,73/89,81/92,63/67,96/97}]]],
            Erfc,  If [rat > 1.0, 
                       RandomInteger [{3, 15}] * 
                         Erfc [RandomChoice [{-(97/70), -(98/71), -(95/69), -(93/68), -(97/71), -(94/69), -(99/73), -(96/71), -(97/72), -(98/73) ,-(91/68), -(95/71), -(99/74)}]],
                       2 * RandomInteger [{2, 5}] + Erfc [RandomChoice [{-(9/98),-(15/83),-(19/70),-(21/58),-(24/53),-(25/46),-(59/93),-(29/40),-(53/65),-(48/53)}]]],
            Exp,  If [Denominator[rat] < 26 && Numerator[rat] < 26,
                      Continue [],
                      Exp [rat]],
            ExpIntegralE,  order = RandomInteger [{2, 4}];
                           If [order === 4,
                               RandomInteger[{2,4}] * ExpIntegralE [order, RandomChoice [{10/93,11/98,10/89,11/97,10/87,11/95,11/92,10/83,11/91,10/81,11/89,12/97}]],
                               RandomInteger[{1, 10}]/(order - 1) + ExpIntegralE [order, RandomChoice [{26/99,29/71,29/59,49/87,29/46,55/79,47/62,73/89,81/92,63/67,96/97}]]],
            ExpIntegralEi,  If [Denominator[rat] < 26 && Numerator[rat] < 26,
                                Continue [],
                                ExpIntegralEi [-rat]],
            Factorial2, Factorial2 [RandomChoice [{88/73,52/43,74/61,95/78,11/9,92/75,85/69,89/72,31/25,51/41,96/77}]] / RandomInteger [{2, 5}],
            FresnelC,  FresnelC [Mod [rat, 5]],
            FresnelS,  FresnelS [Mod [rat, 5]],
            Gamma,  If [rat > 1.0,
                        Gamma [RandomChoice [{99/97,97/95,95/93,93/91,91/89,81/41,85/43,89/45,93/47,97/49}]]/RandomInteger [{3, 7}],
                        Gamma [RandomChoice [{47/89,31/49,27/37,37/45,79/87,93/91,45/23,73/35,71/31,73/29,81/29}]] - GammaInfimumOrSupremumOrdinate[1]],
            Gudermannian,  If [rat > 1.0,
                               RandomInteger [{3, 9}] *
                                 Gudermannian [RandomChoice [{29/11,71/27,97/37,55/21,81/31,75/29,49/19,85/33,95/37,59/23,79/31,89/35}]],
                               RandomInteger [{3,11}]*Pi + Gudermannian [RandomChoice [{27/97,31/63,33/53,35/47,85/99,95/99,45/41,99/79,81/55,85/47,91/37}]]],
            Haversine, If [rat > 1.0,
                           RandomInteger [{3, 8}] *
                                 Haversine [Pi * RandomChoice [{29/37,51/65,73/93,59/75,37/47,67/85,15/19,53/67,61/77,23/29,77/97,31/39}]],
                           RandomInteger [{18,36}] + Haversine [Pi * RandomChoice [{27/91,31/81,35/79,39/79,47/87,45/77,37/59,61/91,39/55,71/95,67/85}]]],
            Hyperfactorial,  fOfRat = Hyperfactorial [Mod [rat, 5]],
            InverseEllipticNomeQ,  InverseEllipticNomeQ [Mod [rat, 1/2]],
            InverseErf,  If [Numerator [rat] < 26 && Denominator [rat] < 26,
                             Continue [],
                             InverseErf [If [rat < 1,  rat,  rat^-1]]],
            InverseErfc, If [Numerator [rat] < 26 && Denominator [rat] < 26,
                             Continue [],
                             InverseErfc [If [rat < 1,  rat,  rat^-1]]],
            InverseGudermannian,  InverseGudermannian [(If [rat > 1, rat^-1, rat]/2)*Pi],
            InverseHaversine,  InverseHaversine [(1/2)*If [rat > 1, rat^-1, rat]],
            log2,   If [Numerator [rat] < 26 && Denominator [rat] < 26,
                        Continue [],
                        log2 [rat]],
            log10,  If [Numerator [rat] < 26 && Denominator [rat] < 26,
                        Continue [],
                        log10 [rat]],
            LogGamma,  If [rat > 1.0,
                           RandomInteger[{3,8}] * LogGamma [RandomChoice [{13/10,95/73,82/63,69/53,56/43,57/35,44/27,75/46,31/19,80/49}]],
                           LogGamma [RandomChoice [{63/55,83/71,37/31,91/75,41/33,99/59,83/49,67/39,89/51,55/31,85/47}]] +
                             RandomInteger[{25,35}] * LogGammaInfimumOrSupremumOrdinate[1]],
            PolyGamma,  If [1/9 < rat < 9,  
                            PolyGamma [RandomInteger [2], rat],
                            Continue []],
            PolyLog,  order = RandomInteger [{2, 3}];
                      If [rat > 1.0,
                          RandomInteger [{2,5}] *
                                 PolyLog [order, RandomChoice [{51/55,83/89,91/97,67/71,75/79,83/87,91/95,53/55,65/67,77/79,89/91}]],
                          RandomInteger [{29, 59}]*Zeta[order] +
                            PolyLog [order, RandomChoice [{27/89,28/67,45/91,29/51,47/74,65/93,51/67,51/62,67/76,81/86,96/97}]]],
            ProductLog,  RandomChoice [{
                             If [rat > 1,
                                 RandomInteger [{2,4}] * ProductLog [0, RandomChoice [{-(25/69),-(29/80),-(33/91),-(4/11)}]],
                                 ProductLog [0, RandomChoice [{-(32/87),-(25/72),-(16/49),-(23/75),-(23/80),-(21/79),-(14/57),-(7/31),-(17/83),-(17/92),-(11/67)}]] -
                                   RandomInteger [{9,18}]],
                             If [rat > 1,
                                 ProductLog [-1, RandomChoice [{-(30/83),-(17/47),-(21/58),-(25/69),-(29/80),-(33/91)}]]/RandomInteger [{2,4}],
                                 1 + ProductLog [-1, RandomChoice [{-(13/36),-(11/31),-(15/43),-(23/67),-(23/68),-(26/79),-(25/77),-(15/47),-(26/83),-(19/62),-(25/83)}]]]}],
            RealInverseAiryAi,  RealInverseAiryAi [-rat, RandomInteger [{$MinAllowedAiryAiBranch}]],
            RealInverseAiryBi,  RealInverseAiryBi [-rat, RandomInteger [{$MinAllowedAiryBiBranch}]],
            RealInverseBarnesG,  RealInverseBarnesG [rat, RandomInteger [{1, 3}]],
            RealInverseBesselI,  RealInverseBesselI [RandomInteger [$MaxAllowedInverseBesselIIndex], rat, 1],
            RealInverseBesselJ,  RealInverseBesselJ [RandomInteger [$MaxAllowedInverseBesselJIndex],
                                                     rat, RandomInteger [{1, $MaxAllowedBesselJBranch}]],
            RealInverseBesselK,  RealInverseBesselK [RandomInteger [$MaxAllowedInverseBesselKIndex], rat, 1],
            RealInverseBesselY, (* Index 0 raises a commented out Assert and often misses. *)
                RealInverseBesselY [RandomInteger [$MaxAllowedInverseBesselYIndex],
                                           rat, RandomInteger [{1, $MaxAllowedBesselYBranch}]],
            RealInverseCosIntegral,
              RealInverseCosIntegral [rat, RandomInteger [{1, $MaxAllowedCosIntegralBranch}]],
            RealInverseDawsonF,  RealInverseDawsonF [rat, RandomInteger[{1, 2}]],
            RealInverseDirichletBeta,
              RealInverseDirichletBeta [rat, RandomInteger [{$MinAllowedDirichletBetaBranch, 1}]],
            RealInverseDirichletEta,
              RealInverseDirichletEta [rat, RandomInteger [{$MinAllowedDirichletEtaBranch, 1}]],
            RealInverseDirichletLambda,
              RealInverseDirichletLambda [rat, RandomInteger [{$MinAllowedDirichletLambdaBranch, 2}]],
            RealInverseEllipticE,
              If [rat > 1.0,
                  RandomInteger [{3, 9}] *
                    RealInverseEllipticE [RandomChoice [{45/41,67/61,89/81,87/79,76/69,65/59,54/49,43/39,85/77,74/67}]],
                  RandomInteger [{15, 30}] + RealInverseEllipticE [RandomChoice [{99/97,45/43,55/51,39/35,15/13,73/61,51/41,79/61,31/23,55/39,99/67}]]],
            RealInverseEllipticK,
              If [rat > 1.0,
                  RandomInteger [{3, 9}] *
                    RealInverseEllipticK [RandomChoice [{49/19,75/29,13/5,81/31,55/21,97/37}]],
                  RandomInteger [{13, 26}] + RealInverseEllipticK [RandomChoice [{83/50,97/56,85/47,91/48,91/46,99/47,85/38,91/38,73/28,90/31,95/27}]]],
            RealInverseEllipticTheta2Zero,
              If [rat > 1.0,
                  2 * RealInverseEllipticTheta2Zero [RandomChoice [{89/33,97/36,78/29,94/35,75/28,83/31,91/34,99/37,93/35,85/32,77/29,69/26}]],
                  RandomInteger [{1, 3}] + RealInverseEllipticTheta2Zero [Which [rat < 1, 1 + rat,
                                                                                 rat > 2, 2 + IntegerPart [rat],
                                                                                 True,    rat]]],
            RealInverseEllipticTheta3Zero,
              Which [
                rat > 2.0,
                  2 * RealInverseEllipticTheta3Zero [RandomChoice [{89/33,97/36,78/29,94/35,75/28,83/31,91/34,99/37,93/35,85/32,77/29,69/26}]],
                rat > 1.2,
                  RandomInteger [{1, 3}] + RealInverseEllipticTheta3Zero [If [rat > 0.5,  rat,  1 - rat]],
                True,
                  RealInverseEllipticTheta3Zero [rat]],
            RealInverseExpIntegralE,
              RealInverseExpIntegralE [RandomInteger [{2, $MaxAllowedExpIntegralEIndex}], rat],
            RealInverseExpIntegralEi,  RealInverseExpIntegralEi [rat, 1],
            RealInverseFactorial2,
              RealInverseFactorial2 [RandomChoice [{49/51,82/85,30/31,67/69,38/39,85/87,95/97,58/59,72/73,86/87}], RandomInteger [3]],
            RealInverseFresnelC,  RealInverseFresnelC [rat, RandomInteger [{1, $MaxAllowedFresnelCBranch}]],
            RealInverseFresnelS,  RealInverseFresnelS [rat, RandomInteger [{1, $MaxAllowedFresnelSBranch}]],
            RealInverseGamma,  branch = RandomInteger [{1, 2}];
              If [branch === 2,
                  If [rat > 1.0,
                      RealInverseGamma [RandomChoice [{98/67,79/53,47/31,95/61,43/27,70/43,72/43,91/53,58/33,67/37,54/29}], 2] /2,
                      -GammaInfimumOrSupremumAbscissa [1] +
                        RealInverseGamma [RandomChoice [{63/43,79/53,35/23,73/47,97/61,73/45,91/55,29/17,89/51,59/33,57/31}], 2]],
                  If [rat > 1.0,
                      RandomInteger [{2, 5}] *
                        RealInverseGamma [RandomChoice [{77/85,39/43,59/65,79/87,81/89,61/67,41/45,83/91,21/23}], 1],
                      RandomInteger [{3,10}] * GammaInfimumOrSupremumAbscissa [1] +
                        RealInverseGamma [RandomChoice [{31/35,73/79,95/99,67/65,89/83,75/67,41/35,85/69,61/47,89/65,83/57}], 1]]],
            RealInverseLogBarnesG,  branch = 1 + 2*RandomInteger [];
              RealInverseLogBarnesG [If [branch === 1, -rat, rat], branch],
            RealInverseLogGamma,  branch = RandomInteger [{1, 2}];
              If [branch === 1,
                  RandomInteger [{5, 12}] * GammaInfimumOrSupremumAbscissa [1] +
                    RealInverseLogGamma [RandomChoice [{-(11/91),1/99,5/41,13/53,29/79,27/55,41/67,49/67,35/41,53/55,59/53}], 1],
                  -GammaInfimumOrSupremumAbscissa[1] +
                    RealInverseLogGamma [RandomChoice [{-(7/85),-(1/71),3/59,11/89,11/57,13/49,27/79,11/27,41/85,29/53,59/95}], 2]],
            RealInverseLogIntegral,  branch = RandomInteger [{1, 2}];
              If [branch === 2,
                  If [rat > 1.0,
                      RealInverseLogIntegral [RandomChoice [{-(93/43),-(67/31),-(97/45),-(71/33),-(79/37),-(83/39),-(87/41),-(91/43),-(99/47),-(61/29)}], 2] /
                         RandomInteger [{8, 15}],
                      -1 + RealInverseLogIntegral [RandomChoice [{-(83/89),-(35/47),-(17/31),-(29/81),-(9/55),1/43,15/67,33/79,19/31,49/61,95/97}], 2]],
                  If [rat > 1.0,
                      RandomInteger [{7,13}] *
                        RealInverseLogIntegral [RandomChoice [{-(93/43),-(67/31),-(97/45),-(71/33),-(79/37),-(83/39),-(87/41),-(91/43),-(99/47),-(61/29)}], 1],
                      RandomInteger [{17,34}] +
                        RealInverseLogIntegral [RandomChoice [{-(97/27),-(73/39),-(61/43),-(85/73),-(77/79),-(31/37),-(49/71),-(45/83),-(21/53),-(15/61),-(9/95)}], 1]]],
            RealInversePolyGamma,
              If [1/10 < rat < 10,
                  order = RandomInteger [2];
                  RealInversePolyGamma [order, If [order === 1,  rat,  -rat]],
                  Continue []],
            RealInversePolyLog,  order = RandomInteger [{2, 3}];
              Which [
                rat > 1,
                  rat = rat^-1;
                  If [rat < 1/5,  rat = 1 - rat];
                  RealInversePolyLog[order, rat] + RandomInteger [{11, 18}],
                order == 2,
                  RandomInteger [{2,3}] * RealInversePolyLog [2, RandomChoice [{91/93,95/97,50/51,56/57,62/63,68/69,74/75,80/81,86/87,92/93,98/99}]],
                True,
                 RandomInteger [{3,5}] * RealInversePolyLog [3, RandomChoice [{87/91,47/49,53/55,59/61,67/69,77/79,44/45,50/51,66/67,82/83,98/99}]]],
            RealInverseRamanujanTauTheta,  RealInverseRamanujanTauTheta [rat, RandomInteger [{1, 2}]],
            RealInverseRiemannSiegelTheta,  RealInverseRiemannSiegelTheta [rat, RandomInteger [{1, 2}]],
            RealInverseSinIntegral,
              RealInverseSinIntegral [rat, RandomInteger [{1, $MaxAllowedSinIntegralBranch}]],
            RealInverseSphericalBesselJ,
              RealInverseSphericalBesselJ [RandomInteger [$MaxAllowedInverseSphericalBesselJIndex],
                                           rat, RandomInteger [{1, $MaxAllowedSphericalBesselJBranch}]],
            RealInverseSphericalBesselY,
              RealInverseSphericalBesselY [RandomInteger [$MaxAllowedInverseSphericalBesselYIndex],
                                           rat, RandomInteger [{1, $MaxAllowedSphericalBesselYBranch}]],
            RealInverseStruveL,
              RealInverseStruveL [(*RandomInteger [$MaxAllowedInverseStruveLIndex]*)1, rat, 1],
            RealInverseZeta,  branch = RandomInteger [{1, 2}];
              If [branch === 2,
                  If [rat > 1.0,
                      RealInverseZeta [RandomChoice [{77/8,97/10,88/9,79/8,89/9,99/10,91/9,81/8,92/9,83/8,94/9,95/9}], 2] / RandomInteger[{3,9}],
                      -1 + RealInverseZeta [RandomChoice [{81/31,89/34,76/29,97/37,92/35,71/27,79/30,95/36,82/31,98/37}], 2]],
                  If [rat > 1.0,
                      RandomInteger[{3,11}] * RealInverseZeta [RandomChoice [{-(99/8),-(86/7),-(85/7),-(97/8),-(95/8),-(83/7),-(82/7),-(93/8),-(81/7)}], 1],
                      RandomInteger [{17, 37}] + RealInverseZeta [RandomChoice [{-(72/11),-(85/13),-(98/15),-(97/15),-(84/13),-(71/11),-(77/12),-(83/13),-(70/11),-(89/14),-(82/13)}], 1]]],
            Sec,   If [rat > 1.0,
                       Sec [Pi*RandomChoice [{13/95,11/80,13/94,11/79,13/93,11/78,12/85,13/92,14/99}]]/RandomInteger [{3, 9}],
                       -1 + Sec [Pi*RandomChoice [{29/99,29/98,29/97,29/96,29/95,29/94,30/97,29/93,31/99,29/92,31/98,29/91,31/97,29/90,31/96,32/99}]]],
            Sech,  If [rat > 1.0,
                       RandomInteger[{3,9}] * Sech [RandomChoice [{37/83,31/69,33/73,37/81,39/85,41/89,43/93,31/67,45/97,33/71}]],
                       RandomInteger [{44,88}] + Sech [RandomChoice [{27/97,39/95,35/71,51/91,47/75,53/77,71/95,59/73,79/91,49/53,83/85}]]],
            Sin,   If [rat > 1,  rat = rat ^ -1];
                   If [rat < 1/5,  rat = 1 - rat];
                   Sin [Pi/4 * rat] + 2*RandomSign[] * RandomInteger [{1, 9}],
            Sinh,  If [Denominator[rat] < 26 || Numerator[rat] < 26,
                       Continue [],
                       Sinh [rat]],
            SphericalBesselJ, SphericalBesselJ [RandomInteger [$MaxAllowedSphericalBesselJIndex], rat],
            SphericalBesselY, SphericalBesselY [RandomInteger [$MaxAllowedSphericalBesselYIndex], rat],
            StruveL, StruveL [RandomInteger [$MaxAllowedStruveLIndex], rat],
            Tan,  Tan [(1/2)*If [rat > 1, rat^-1, rat] * Pi],
            Tanh,  If [rat > 1.0,
                       RandomInteger [{3, 15}] *
                         Tanh [RandomChoice [{97/53, 96/53, 97/54, 95/53, 98/55, 94/53, 99/56, 97/55, 95/54, 93/53, 96/55}]],
                       2 * RandomInteger [{1, 5}] + Tanh [If [rat > 0.5,  rat,  1 - rat]]],
            Zeta,  branch = 2(*RandomInteger [{1, 2}]*);
              If [branch === 2,
                  If [rat > 1.0,
                      Zeta [RandomChoice [{83/18, 87/19, 91/20, 86/19, 95/21, 94/21, 85/19, 89/20, 84/19, 97/22, 79/18}]] / RandomInteger [{3, 14}],
                      -1 + Zeta [RandomChoice [{57/26, 81/37, 94/43, 59/27, 83/38, 85/39, 61/28, 98/45, 87/40, 63/29, 76/35, 89/41}]]],
                  If [rat > 1.0,  (* This branch works badly. Ill-conditioned ?? *)
                      RandomInteger [{2, 9}] * Zeta [RandomChoice [{-(85/29), -(79/27), -(99/34), -(93/32), -(90/31), -(79/31), -(89/35), -(94/37), -(71/28), -(81/32), -(91/36)}]],
                      RandomInteger [{2, 9}] + Zeta [RandomChoice [{-(94/27), -(97/28), -(90/41), -(79/36), -(68/31), -(57/26), -(81/37), -(94/43), -(59/27)}]]]],
            _, fOfRat = f[rat]];
          If [Head [NForMeritGoal [fOfRat, $LowestExcellentMerit]] === Real,
              Return [fOfRat]]]]];


(* ::Subsubsubsection::Closed:: *)
(*NForMeritGoal :*)


Unprotect [NForMeritGoal];
  NForMeritGoal [nonFloatConstant_, meritMargin_:$LowestGoodMerit] :=
    N [nonFloatConstant, meritMargin + Round [Entropy10 [nonFloatConstant]]];
Protect [NForMeritGoal];


(* ::Subsubsubsection::Closed:: *)
(*RandomAlgebraicNumber :*)


RandomAlgebraicNumber [degree_:2, multiplicity_:1, maxInteger_:7] :=
  Module [{x, cofactor, root},
    Assert [degree * multiplicity > 2];
    cofactor = x ^ multiplicity;
    While [True,
      root = Root [RandomUnitNormalPoly [degree, maxInteger, x ^ multiplicity], 1];
      If [Head [root] === Root && Exponent [First [root] [x], x] === multiplicity * degree, 
          If [Head [NForMeritGoal [root, $LowestExcellentMerit]] === Real,
              Return [root]]]]];


(* ::Subsubsubsection::Closed:: *)
(*RandomDefault :*)


Unprotect [RandomDefault];

RandomDefault [] := Module [{candidate, predictedMeritString},
  While [True,
    $RandomDefault = {candidate, predictedMeritString} =  
      Switch [$ShuffledCategories [[$categoryIndex]],
        RecipShiftBinom, {RandomReciprocalShiftedBinomialRoot [5, 5], "$LowestBadMerit"},
        Palindromic, {RandomPalindromicRoot [3, 7], "$LowestPoorMerit"},
        RecipCompose, {RandomReciprocalComposeDeg2Of3 [3], "$LowestPoorMerit"},
        Cubic, {RandomAlgebraicNumber [3, 1, 7], "$LowestExcellentMerit"},
        deMoivre, {If [$ChooseDeMoivre5Q = ! $ChooseDeMoivre5Q,
                       RandomDeMoivreQuintic,
                       RandomDeMoivreSeptic] [4], "$LowestExcellentMerit"},
        LinCombTrig, {RandomLinearCombination [$ShuffledTrigLinCombBases[[
          $trigLinComIndex = Mod [1 + $trigLinComIndex, Length [$LinCombTrigFamilyBases], 1]]],
                                              3], "$LowestMediumMerit"},
        LinCombNonTrig, {RandomLinearCombination [$ShuffledNonTrigLinCombBases[[
          $nonTrigLinComIndex = Mod [1 + $nonTrigLinComIndex, Length [$DefaultNonTrigLinCombBases], 1]]],
                                                 4], "1 + $LowestGoodMerit"},
        LinComb1AndConst, {RandomLinComb1kAndConstant [$ShuffledLinComb1AndConstantBases[[
          $linComb1AndConstantIndex = Mod [1 + $linComb1AndConstantIndex, Length [$DefaultLinComb1AndConstantBases], 1]]],
                                                      99], "$LowestExcellentMerit"},
        LinFracTrig, {RandomLinFracCombination [$ShuffledTrigLinFracBasisPairs[[
          $linFracTrigIndex = Mod [1 + $linFracTrigIndex, Length [$DefaultTrigLinFracBasisPairs], 1]]],
                                               6], "$LowestMediumMerit"},
        LinFracNonTrig, {RandomLinFracCombination [$ShuffledNonTrigLinFracBasisPairs[[
          $linFracNonTrigIndex = Mod [1 + $linFracNonTrigIndex, Length [$DefaultNonTrigLinFracBasisPairs], 1]]],
                                                  6], "$LowestMediumMerit"}, 
        Products, {RandomProduct [$ShuffledProductBases[[
          $productIndex = Mod [1 + $productIndex, Length [$DefaultProductBases], 1]]],
                                 4], "$LowestExcellentMerit"},
        FOfRational, {FofRandomRational [$ShuffledDefaultFunctions[[
          $fOfRationalIndex = Mod [1 + $fOfRationalIndex, Length [$DefaultRationalArgFunctions], 1]]]], "$LowestExcellentMerit"},
        FofRandomQuadratic,  {FofRandomQuadratic [$ShuffledFunctionsOfQuadratics[[
          $fOfQuadraticIndex = Mod [1 + $fOfQuadraticIndex, Length [$FunctionsOfQuadratics], 1]]],
                                                 13], "$LowestGoodMerit"}];
      (*If [TrueQ [$showRandomDefaultTypeQ],
          Print [{$ShuffledCategories [[$categoryIndex]], $RandomDefault}]];*)  (* ALSO PRINT CPU TIME and FAILED when applicable!! *)
      If [1.0*^-4 < Abs [N [candidate]] < 286758.0`,
          $categoryIndex = Mod [1 + $categoryIndex, Length [$categories], 1];
          Return [StringJoin ["NForMeritGoal [", ToString1D [candidate], ",  ", predictedMeritString, "]"]]]]];

Protect [RandomDefault];


(* ::Subsubsubsection::Closed:: *)
(*RandomDeMoivreQuintic :*)


RandomDeMoivreQuintic [maxInteger_:3] :=
  Module [{a = RandomInteger [{1, maxInteger}],
           x, root},
    While [True,
      root = Root [x^5 + 5*a*x^3 + 5*a^2*x - RandomInteger [{maxInteger, 2*maxInteger}], 1];
      If [Head [root] === Root && Exponent [First [root] [x], x] === 5, 
          If [Head [NForMeritGoal [root, $LowestExcellentMerit]] === Real,
              Return [root]]]]];


(* ::Subsubsubsection::Closed:: *)
(*RandomDeMoivreSeptic :*)


RandomDeMoivreSeptic [maxInteger_:3] :=
  Module [{a = RandomInteger [{1, maxInteger}],
           x, root},
    While [True,
      root = Root [x^7 + 7*a*x^5 + 14*a^2*x^3 + 7*a^3*x - RandomInteger[{maxInteger, 2*maxInteger}], 1];
      If [Head [root] === Root && Exponent [First [root] [x], x] === 7, 
          If [Head [NForMeritGoal [root, $LowestExcellentMerit]] === Real,
              Return [root]]]]];


(* ::Subsubsubsection::Closed:: *)
(*RandomLinComb1kAndConstant :*)


RandomLinComb1kAndConstant [constant_, maxInteger_:99] :=
  RandomLinearCombination [{1, constant}, maxInteger];


(* ::Subsubsubsection::Closed:: *)
(*RandomLinFracCombination :*)


RandomLinFracCombination [basisPair_, maxInteger_:6] :=
  Module [{numeratorBasis = First [basisPair],
           denominatorBasis = Last [basisPair],
           numerator, denominator, ratio},
    While [True,
      ratio = Cancel [(Table [(*RandomSign[]**)RandomInteger [{1, maxInteger}], {Length [numeratorBasis]}] . numeratorBasis) /
                      (Table [(*RandomSign[]**)RandomInteger [{1, maxInteger}], {Length [denominatorBasis]}] . denominatorBasis)];
      If [Head [ratio] === Times && ! NumberQ [Denominator [ratio]] && ! NumberQ [Numerator [ratio]],
          Return [ratio]]]];


(* ::Subsubsubsection::Closed:: *)
(*RandomLinearCombination :*)


RandomLinearCombination [basis_, maxInteger_:3] :=
  Module [{linearCombination},
    While [True,
      linearCombination = Cancel [(Table [(*RandomSign[]**)RandomInteger [{1, maxInteger}], {Length [basis]}] .
        basis )/ RandomInteger [{1, maxInteger}]];
      If [! NumberQ [linearCombination],
          Return [linearCombination]]]];


(* ::Subsubsubsection::Closed:: *)
(*RandomPalindromicRoot :*)


RandomPalindromicRoot [halfDegree_:2, maxInteger_:5] :=
  Module [{x, root},
    While [True,
      root = Root [Expand [x^halfDegree * (RandomInteger [{1, maxInteger}] * (x + x^-1)^halfDegree - RandomInteger[{3*maxInteger, 4*maxInteger}])], 1];
      If [Head [root] === Root && Exponent [First [root] [x], x] === 2 * halfDegree, 
          If [Head [NForMeritGoal [root, $LowestExcellentMerit]] === Real,
              Return [root]]]]];


(* ::Subsubsubsection::Closed:: *)
(*RationalPrecisionAndComplexity :*)


RationalPrecisionAndComplexity [label_, boostedFloat_, maxBoostedFloat_, result_] :=
Module [{rational = If [Head[result] === List, First[result]/Last[result], result],
              relativeErr},
If [ExactNumberQ [rational],
     relativeErr= Abs [(maxBoostedFloat - rational)  / maxBoostedFloat];
    {label, rational, 0.9*If [relativeErr < 0.5 * Precision[boostedFloat ], Precision [boostedFloat], -2.0*Log10 [relativeErr]]- Entropy10 [rational]},
    {label, "kickback"}]];


(* ::Subsubsubsection::Closed:: *)
(*RandomProduct :*)


RandomProduct [basis_, maxInteger_:6] :=
  Module [{denominator = RandomInteger [{1, maxInteger}],
           product},
    While [True,
      product = Apply [Times, Map [# ^ (RandomSign[]*RandomInteger [{1, maxInteger}] / denominator) &,
                                             basis ]];
      If [! NumberQ [product],
          Return [product]]]];


(* ::Subsubsubsection::Closed:: *)
(*RandomReciprocalComposeDeg2Of3 :*)


RandomReciprocalComposeDeg2Of3 [maxInteger_:3] :=
  Module [{s, b, c, root, x},
    While [True,
      s = (*RandomSign [] **) RandomInteger [{1, maxInteger}];
      b = RandomInteger [{1, maxInteger}];
      c = RandomInteger [{1, maxInteger}];
      root = Sqrt [b^2 + 4c];
      If [! NumberQ [root],
          root = RootReduce [(s + (b + root)^(1/3))^-1];
          If [Head [root] === Root && Exponent [First [root] [x], x] === 6,
              If [Head [NForMeritGoal [root, $LowestExcellentMerit]] === Real,
                  Return [root]]]]]];    


(* ::Subsubsubsection::Closed:: *)
(*RandomReciprocalShiftedBinomialRoot :*)


RandomReciprocalShiftedBinomialRoot [degree_:3, maxInteger_:3] :=
  Module [{x, root},
    While [True,
      root = RootReduce [Root [(-RandomInteger [{1, maxInteger}] + RandomInteger [{1, maxInteger}] * x)^degree -
                    RandomInteger [{2*maxInteger, 3*maxInteger}], 1] ^ -1];
      If [Head [root] === Root && Exponent [First [root] [x], x] === degree, 
          If [Head [NForMeritGoal [root, $LowestExcellentMerit]] === Real,
              Return [root]]]]];


(* ::Subsubsubsection::Closed:: *)
(*RandomSign :*)


RandomSign [] := If [RandomTrueOrFalse [], -1, 1];


(* ::Subsubsubsection::Closed:: *)
(*RandomTrueOrFalse :*)


RandomTrueOrFalse [] := RandomInteger [] === 0;


(* ::Subsubsubsection::Closed:: *)
(*RandomUnitNormalPoly :*)


RandomUnitNormalPoly [degree_, maxInteger_, var_] :=
  Sum [RandomSign [] * RandomInteger [{1, maxInteger}] * var ^ j,  {j, 0, degree}];


(* ::Section::Closed:: *)
(*NSimplify Code*)


(* ::Subsection::Closed:: *)
(*Initialize package-level variables:*)


$BesselIKTasks = Join [$BesselITasks, $BesselKTasks];
$ErfAndErfcTasks = {$ErfTasks, $ErfcTasks};

$ExpFamilySymbols = {E, Sinh, Cosh, Tanh, Csch, Sech, Coth};
$FactorialFamilySymbols = {Gamma, LogGamma, Factorial2, BarnesG, LogBarnesG, Hyperfactorial, PolyGamma};
$FlattenedExpEiESinhCoshAndLogIntegralTasks = Flatten [{$ExpIntegralEiTasks, $SinhIntegralTasks,
  $CoshIntegralTasks, $LogIntegralTasks}, 1];
$FlattenedInverseBesselIKTasks = Join [$InverseBesselITasks, $InverseBesselKTasks];
$FlattenedInverseEllipticFamilyTasks = Flatten [$InvEllipticFamilyTasks, 1];
$FlattenedInverseErfAndErfCTasks = Join [$InverseErfTasks, $InverseErfcTasks];
$FlattenedInverseExpEiESinhCoshAndLogIntegralTasks = Join [$InverseExpIntegralEiTasks, $InverseExpIntegralETasks,
  $InverseSinhIntegralTasks, $InverseCoshIntegralTasks, $InverseLogIntegralTasks];
$FlattenedInverseFactorialFamilyTasks = Flatten [$InvFactorialFamilyTasks, 1];
$FlattenedInverseZetaFamilyTasks = Flatten [$InvZetaFamilyTasks, 1];


$InvFactorialFamilySymbols = {RealInverseGamma, RealInverseLogGamma, RealInverseFactorial2,
  RealInverseBarnesG, RealInverseLogBarnesG, RealInverseHyperfactorial, RealInversePolyGamma};
$InvTrigFamilySymbols = {ArcSin, ArcCos, ArcTan, ArcCsc, ArcSec, ArcCot, InverseHaversine, Gudermannian};

$LogFamilySymbols = {Log, ArcSinh, ArcCosh, ArcTanh, ArcSech, ArcCsch, ArcCoth, ProductLog, Log10, Log2,
  InverseGudermannian, LogGamma, LogBarnesG, PolyLog, InverseErf, InverseErfc, LogGammaInfimumOrSupremumOrdinate,
  LogBarnesGInfimumOrSupremumOrdinate};
$TrigFamilySymbols = {Sin, Cos, Tan, Csc, Sec, Cot, Haversine, Sinc};


(* ::Subsection::Closed:: *)
(*Define Association [...] and Lookup [...] for Mathematica pre version 10 :*)


If [$VersionNumber < 10.0,
    Association = List];

If [$VersionNumber < 10.0,
    Lookup [assoc_, key_, default_:Missing []] :=
      Module [{trialKey, value},
        Do [trialKey = assoc[[k,1]];  (* Linear search is fast enough for this application. *)
            If [trialKey === key,
                value = assoc[[k,2]];
                Break []],
            {k, Length [assoc]}];
        If [trialKey === key,
            value,
            default]]];


(* ::Subsection::Closed:: *)
(*TaskListForSymbol [...] :*)


TaskListForSymbol = Association [
  Pi -> $PiTasks,
  EulerGamma -> $EulerGammaTasks,
  Catalan -> $CatalanTasks,
  Glaisher -> $GlaisherTasks,
  Khinchin -> $KhinchinTasks,

  E -> $ExpFamilyTasks,
  Sinh -> $ExpFamilyTasks,
  Cosh -> $ExpFamilyTasks,
  Tanh -> $ExpFamilyTasks,
  Csch -> $ExpFamilyTasks,
  Sech -> $ExpFamilyTasks,
  Coth -> $ExpFamilyTasks,

  Log -> $LogFamilyTasks,
  ArcSinh -> $LogFamilyTasks,
  ArcCosh -> $LogFamilyTasks,
  ArcTanh -> $LogFamilyTasks,
  ArcCsch -> $LogFamilyTasks,
  ArcSech -> $LogFamilyTasks,
  ArcCoth -> $LogFamilyTasks,

  Sin -> $TrigAndAlgebraicNumberTasks,
  Cos -> $TrigAndAlgebraicNumberTasks,
  Tan -> $TrigAndAlgebraicNumberTasks,
  Csc -> $TrigAndAlgebraicNumberTasks,
  Sec -> $TrigAndAlgebraicNumberTasks,
  Cot -> $TrigAndAlgebraicNumberTasks,
  Haversine -> $TrigAndAlgebraicNumberTasks,
  Root -> $TrigAndAlgebraicNumberTasks,

  ArcSin -> $InverseTrigFamilyTasks,  
  ArcCos -> $InverseTrigFamilyTasks,
  ArcTan -> $InverseTrigFamilyTasks,
  ArcCsc -> $InverseTrigFamilyTasks,
  ArcSec -> $InverseTrigFamilyTasks,
  ArcCot -> $InverseTrigFamilyTasks,
  InverseHaversine -> $InverseTrigFamilyTasks,
 
  EllipticE -> $AGMEllipticEKFactorialAndZetaFamilyTasks,
  EllipticK -> $AGMEllipticEKFactorialAndZetaFamilyTasks,
  ArithmeticGeometricMean -> $AGMEllipticEKFactorialAndZetaFamilyTasks,
  Gamma -> $AGMEllipticEKFactorialAndZetaFamilyTasks,
  GammaInfimumOrSupremumOrdinate -> $AGMEllipticEKFactorialAndZetaFamilyTasks,
  LogGamma -> $AGMEllipticEKFactorialAndZetaFamilyTasks,
  LogGammaInfimumOrSupremumOrdinate -> $AGMEllipticEKFactorialAndZetaFamilyTasks,
  Factorial2 -> $AGMEllipticEKFactorialAndZetaFamilyTasks,
  Factorial2InfimumOrSupremumOrdinate -> $AGMEllipticEKFactorialAndZetaFamilyTasks,
  BarnesG -> $AGMEllipticEKFactorialAndZetaFamilyTasks,
  BarnesGInfimumOrSupremumOrdinate -> $AGMEllipticEKFactorialAndZetaFamilyTasks,
  LogBarnesG -> $AGMEllipticEKFactorialAndZetaFamilyTasks,
  LogBarnesGInfimumOrSupremumOrdinate -> $AGMEllipticEKFactorialAndZetaFamilyTasks,
  Hyperfactorial -> $AGMEllipticEKFactorialAndZetaFamilyTasks,
  HyperfactorialInfimumOrSupremumOrdinate -> $AGMEllipticEKFactorialAndZetaFamilyTasks,
  PolyGamma -> $AGMEllipticEKFactorialAndZetaFamilyTasks,
  Zeta -> $AGMEllipticEKFactorialAndZetaFamilyTasks,
  ZetaInfimumOrSupremumOrdinate -> $AGMEllipticEKFactorialAndZetaFamilyTasks,
  HurwitzZeta -> $AGMEllipticEKFactorialAndZetaFamilyTasks,
  DirichletBeta -> $AGMEllipticEKFactorialAndZetaFamilyTasks,
  DirichletBetaInfimumOrSupremumOrdinate -> $AGMEllipticEKFactorialAndZetaFamilyTasks,
  DirichletEta -> $AGMEllipticEKFactorialAndZetaFamilyTasks,
  DirichletEtaInfimumOrSupremumOrdinate -> $AGMEllipticEKFactorialAndZetaFamilyTasks,
  DirichletLambda -> $AGMEllipticEKFactorialAndZetaFamilyTasks,
  PolyLog -> $AGMEllipticEKFactorialAndZetaFamilyTasks,

  RiemannSiegelTheta -> $RiemannSiegelThetaTasks,
  RiemannSiegelThetaInfimumOrSupremumOrdinate -> $RiemannSiegelThetaTasks,

  RamanujanTauTheta -> $RamanujanTauThetaTasks,
  RamanujanTauThetaInfimumOrSupremumOrdinate -> $RamanujanTauThetaTasks,

  RealInverseEllipticK -> $FlattenedInverseEllipticFamilyTasks,
  RealInverseEllipticE -> $FlattenedInverseEllipticFamilyTasks,
  RealInverseArithmeticGeometricMean1 -> $FlattenedInverseEllipticFamilyTasks,
  RealInverseEllipticTheta2Zero -> $FlattenedInverseEllipticFamilyTasks,
  RealInverseEllipticTheta3Zero -> $FlattenedInverseEllipticFamilyTasks,
  InverseEllipticNomeQ -> $FlattenedInverseEllipticFamilyTasks,
  
  RealInverseGamma -> $FlattenedInverseFactorialFamilyTasks,
  RealInverseLogGamma -> $FlattenedInverseFactorialFamilyTasks,
  RealInverseFactorial2 -> $FlattenedInverseFactorialFamilyTasks,
  RealInverseBarnesG -> $FlattenedInverseFactorialFamilyTasks,
  BarnesGInfimumOrSupremumAbscissa -> $FlattenedInverseFactorialFamilyTasks,
  RealInverseLogBarnesG -> $FlattenedInverseFactorialFamilyTasks,
  LogBarnesGInfimumOrSupremumAbscissa -> $FlattenedInverseFactorialFamilyTasks,
  RealInverseHyperfactorial -> $FlattenedInverseFactorialFamilyTasks,
  HyperfactorialInfimumOrSupremumAbscissa -> $FlattenedInverseFactorialFamilyTasks,
  RealInversePolyGamma -> $FlattenedInverseFactorialFamilyTasks,
  PolyGammaZero -> $FlattenedInverseFactorialFamilyTasks,

  RealInverseZeta -> $FlattenedInverseZetaFamilyTasks,
  ZetaInfimumOrSupremumAbscissa -> $FlattenedInverseZetaFamilyTasks,

  RealInverseDirichletBeta -> $FlattenedInverseZetaFamilyTasks,
  DirichletBetaInfimumOrSupremumAbscissa -> $FlattenedInverseZetaFamilyTasks,

  RealInverseDirichletEta -> $FlattenedInverseZetaFamilyTasks,
  DirichletEtaInfimumOrSupremumAbscissa -> $FlattenedInverseZetaFamilyTasks,

  RealInverseDirichletLambda -> $FlattenedInverseZetaFamilyTasks,
  DirichletLambdaInfimumOrSupremumAbscissa -> $FlattenedInverseZetaFamilyTasks,

  RealInverseRiemannSiegelTheta -> $InverseRiemannSiegelThetaTasks,
  RiemannSiegelThetaInfimumOrSupremumAbscissa  -> $InverseRiemannSiegelThetaTasks,

  RealInverseRamanujanTauTheta -> $InverseRamanujanTauThetaTasks,
  RamanujanTauThetaInfimumOrSupremumAbscissa -> $InverseRamanujanTauThetaTasks,
  RamanujanTauThetaZero -> $InverseRamanujanTauThetaTasks,

  Erf -> $ErfAndErfcTasks,
  Erfc -> $ErfAndErfcTasks,

  InverseErf -> $FlattenedInverseErfAndErfCTasks,
  InverseErfc -> $FlattenedInverseErfAndErfCTasks,

  Erfi -> $ErfiTasks,
  RealInverseErfi -> $InverseErfiTasks,

  DawsonF -> $DawsonFTasks,
  DawsonFInfimumOrSupremumOrdinate -> $DawsonFTasks,

  RealInverseDawsonF -> $InverseDawsonFTasks,
  DawsonFInfimumOrSupremumAbscissa -> $InverseDawsonFTasks,

  FresnelC -> $FresnelCTasks,
  RealInverseFresnelC -> $InverseFresnelCTasks,
  FresnelS -> $FresnelSTasks,
  RealInverseFresnelS -> $InverseFresnelSTasks,

  ExpIntegralEi -> $FlattenedExpEiESinhCoshAndLogIntegralTasks,
  ExpIntegralE -> $FlattenedExpEiESinhCoshAndLogIntegralTasks,
  SinhIntegral -> $FlattenedExpEiESinhCoshAndLogIntegralTasks,
  CoshIntegral -> $FlattenedExpEiESinhCoshAndLogIntegralTasks,
  LogIntegral -> $FlattenedExpEiESinhCoshAndLogIntegralTasks,

  SinIntegral -> $SinIntegralTasks,
  CosIntegral -> $CosIntegralTasks,

  RealInverseExpIntegralEi -> $FlattenedInverseExpEiESinhCoshAndLogIntegralTasks,
  ExpIntegralEiZero -> $FlattenedInverseExpEiESinhCoshAndLogIntegralTasks,

  RealInverseExpIntegralE -> $FlattenedInverseExpEiESinhCoshAndLogIntegralTasks,
  RealInverseSinhIntegral -> $FlattenedInverseExpEiESinhCoshAndLogIntegralTasks,
  RealInverseCoshIntegral -> $FlattenedInverseExpEiESinhCoshAndLogIntegralTasks,
  RealInverseLogIntegral -> $FlattenedInverseExpEiESinhCoshAndLogIntegralTasks,
  LogIntegralZero -> $FlattenedInverseExpEiESinhCoshAndLogIntegralTasks,

  RealInverseSinIntegral -> $InverseSinIntegralTasks,
  RealInverseCosIntegral -> $InverseCosIntegralTasks,
  CosIntegralZero -> $InverseCosIntegralTasks,

  BesselI -> $BesselIKTasks,
  BesselK -> $BesselIKTasks,

  BesselJ -> $BesselJTasks,
  BesselJInfimumOrSupremumOrdinate -> $BesselJTasks,

  BesselY -> $BesselYTasks,
  BesselYInfimumOrSupremumOrdinate -> $BesselYTasks,

  SphericalBesselJ -> $SphericalBesselJTasks,
  SphericalBesselJInfimumOrSupremumOrdinate -> $SphericalBesselJTasks,

  SphericalBesselY -> $SphericalBesselYTasks,
  SphericalBesselYInfimumOrSupremumOrdinate -> $SphericalBesselYTasks,

  StruveL -> $StruveLTasks,

  AiryAi -> $AiryAiTasks,
  AiryAiInfimumOrSupremumOrdinate -> $AiryAiTasks,

  AiryBi -> $AiryBiTasks,
  AiryBiInfimumOrSupremumOrdinate -> $AiryBiTasks,

  RealInverseBesselI -> $FlattenedInverseBesselIKTasks,
  RealInverseBesselK -> $FlattenedInverseBesselIKTasks,

  RealInverseBesselJ -> $InverseBesselJTasks,
  BesselJInfimumOrSupremumAbscissa -> $InverseBesselJTasks,

  RealInverseBesselY -> $InverseBesselYTasks,
  BesselYInfimumOrSupremumAbscissa -> $InverseBesselYTasks,

  RealInverseSphericalBesselJ -> $InverseSphericalBesselJTasks,
  SphericalBesselJInfimumOrSupremumAbscissa -> $InverseSphericalBesselJTasks,

  RealInverseSphericalBesselY -> $InverseSphericalBesselYTasks,
  SphericalBesselYInfimumOrSupremumAbscissa -> $InverseSphericalBesselYTasks,

  RealInverseStruveL -> $InverseStruveLTasks,

  RealInverseAiryAi -> $InverseAiryAiTasks,
  AiryAiZero -> $InverseAiryAiTasks,
  AiryAiPrimeZero -> $InverseAiryAiTasks,

  RealInverseAiryBi -> $InverseAiryBiTasks,
  AiryBiZero -> $InverseAiryBiTasks,
  AiryBiPrimeZero -> $InverseAiryBiTasks,

  Gudermannian -> $GudermannianTasks,
  InverseGudermannian -> $InverseGudermannianTasks,

  ProductLog -> $ProductLogTasks];


(* ::Subsection::Closed:: *)
(*BasicConstantAndFunctionNames [...]*)


ClearAll [BasicConstantAndFunctionNames];

BasicConstantAndFunctionNames [_? NumberQ] = {};

BasicConstantAndFunctionNames [E] := {E};

BasicConstantAndFunctionNames [Pi] := {Pi};

BasicConstantAndFunctionNames [EulerGamma] := {EulerGamma};

BasicConstantAndFunctionNames [Catalan] := {Catalan};

BasicConstantAndFunctionNames [Glaisher] := {Glaisher};

BasicConstantAndFunctionNames [Khinchin] := {Khinchin};

BasicConstantAndFunctionNames [_Symbol] := {};

BasicConstantAndFunctionNames [(Plus | Times)[args__]] :=
  Apply [Union, Map [BasicConstantAndFunctionNames, {args}]];

BasicConstantAndFunctionNames [base_ ^ _Integer] :=
  BasicConstantAndFunctionNames [base];

BasicConstantAndFunctionNames [base_ ^ _Rational] :=
  Union [{Root}, BasicConstantAndFunctionNames [base]];

BasicConstantAndFunctionNames [base_ ^ exponent_] := 
  Union [{E}, BasicConstantAndFunctionNames [base], BasicConstantAndFunctionNames [exponent]];

BasicConstantAndFunctionNames [Root [args__]] := {Root};

BasicConstantAndFunctionNames [functionName_ [args__]] :=
  Union [{functionName}, Apply [Union, Map [BasicConstantAndFunctionNames, {args}]]];


(* ::Subsection::Closed:: *)
(*TaskListForNSimplify [...]*)


TaskListForNSimplify [expression_] :=
  Sort [Join [$CompulsoryTasks,
              Apply [Union,  Map [Lookup [TaskListForSymbol, #, $FlattenedDefaultFunctionsTasks] &,
                                  BasicConstantAndFunctionNames [expression]]]],  #1[[2]] > #2[[2]] &];  


(* ::Subsection::Closed:: *)
(*NSimplify [...]*)


Unprotect [NSimplify];

NSimplify [floatFreeConstant_/; NumericQ[floatFreeConstant] && ! InexactNumberQ[floatFreeConstant],
           precision_:Automatic,  maxSearchSec_:Infinity] :=
  Module [{floatApproximation = N [floatFreeConstant,
                                   If [precision === Automatic,
                                       Max [16.0, Entropy10 [floatFreeConstant] +
                                                    If [FreeQ [floatFreeConstant, Root],
                                                        $LowestMediumMerit,
                                   (* else we want to see FromRoot[...] result even if more complex *)
                                                        2 + $LowestExcellentMerit]],
               (* This includes rejects. Do timing tests !! : *)
                                       precision]],
           proposeResult, fullSimplifyResult, inputComplexity, fullSimplifyComplexity},
  proposeResult =
      Propose [floatApproximation,
               TaskList -> TaskListForNSimplify [floatFreeConstant],
               CollectEquivalentCandidatesQ -> False,
               MinAcceptableMerit -> 0.0,
               MaxSearchSec -> maxSearchSec,
               VerboseQ -> False];
(* TO DO:  Handle non-real inputs helpfully: *)
  If [Head [proposeResult] === List && proposeResult =!= {},
      proposeResult = 
      Map [{First[#], #[[3]]} &,
           SupplementSetWithEquivalents [floatApproximation,
                Select [proposeResult, QuietPossibleZeroQ [floatFreeConstant - First[#]] &]]],
      inputComplexity = Entropy10 [floatFreeConstant];
      fullSimplifyResult = FullSimplify [floatFreeConstant, ComplexityFunction -> Entropy10];
      fullSimplifyComplexity = Entropy10 [fullSimplifyResult];
      If [inputComplexity < fullSimplifyComplexity,
          {{floatFreeConstant, inputComplexity}},
          {{fullSimplifyResult, fullSimplifyComplexity}}]]];

Protect [NSimplify];


(* ::Subsection::Closed:: *)
(*TimedNSimplify [...]*)


Unprotect [TimedNSimplify];

TimedNSimplify [floatFreeConstant_/; NumericQ[floatFreeConstant] && ! InexactNumberQ[floatFreeConstant],
                precision_:Automatic, maxSearchSec_:Infinity] :=
  Timing [NSimplify [floatFreeConstant, precision, maxSearchSec]];

Protect [TimedNSimplify];


(* ::Section::Closed:: *)
(*End private, then EndPackage :*)


End [];
EndPackage [];


(* ::Title::Closed:: *)
(*AskConstants package*)


(* ::Section::Closed:: *)
(*Summary*)


(* ::Subsection::Closed:: *)
(*Ultra permissive "MIT copyright" notice :*)


(* ::Text:: *)
(*Copyright (c) 2016, David R. Stoutemyer *)
(**)
(*Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:*)
(**)
(*The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.*)
(**)
(*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.*)


(* ::Subsection::Closed:: *)
(*Purpose, download sites, and email address :*)


(* ::Item:: *)
(*AskConstants [fontSize]  is an interactive program that provides an easy way to use and comprehend the results of the  Propose [...]  and  NSimplify [...]  functions of the prerequisite  Propose  package.*)


(* ::Item:: *)
(*The two download sites for the most recent version of this package and its prerequisite packages are:*)


(* ::Subitem:: *)
(*  AskConstants.org*)


(* ::Subitem:: *)
(*  math.hawaii.edu/AskConstants*)


(* ::Item:: *)
(*As of 2015, this Mathematica package is under development by David R. Stoutemyer.*)


(* ::Item:: *)
(*Email concerning the package should be sent to    AskConst@hawaii.edu*)


(* ::Item:: *)
(*This version of this package is given by the value of the public package-level variable    $AskConstantsVersionNumber*)


(* ::Section::Closed:: *)
(*AskConstants Usage:*)


If [$VersionNumber < 8.0,
    Print ["Sorry, but the functions in this AskConstants package will not work properly for Mathematica versions before 8.0."]];


BeginPackage["AskConstants`", {"Zeros`", "InfimaAndSuprema`", "RealInverseFunctions`", "Propose`"}];


(* ::Subsection::Closed:: *)
(*Usage of public functions :*)


AskConstants::usage = "AskConstants[] or AskConstants[fontSize]  (Default is 16 points.)";


(* ::Subsection::Closed:: *)
(*Usage of public global variables :*)


$AskConstantsVersionNumber::usage = "Include the value of this variable in any emails to AskConstants.";

$NSimplifyIO::usage = "A list consisting of the last input and result for the AskConstants NSimplify tab.";

$AllNSimplifyIO::usage =
"This is a list of NSimplify tab inputs paired with any acceptable results accumulated during the most recent invocation of AskConstants [...].";

$ProposeIO::usage = "A list consisting of the last input and result for the AskConstants Propose tab.";

$AllProposeIO::usage =
"This is a list of Propose tab inputs paired with any acceptable results accumulated during the most recent invocation of AskConstants [...].";

\[SelectionPlaceholder]::usage = "";   (* :So that NSimplify tab expression buttons are not labeled "...Private...". *)
\[Placeholder]::usage = "";   (* Is there a better way to accomplish this ?? *)


(* ::Subsection::Closed:: *)
(*Usage of optionally-public functions :*)


(* To reduce the chance of name conflicts, and possible inadvertent corruption,
     comment out all of these usage commands for the distributed version.
   During development, uncomment these usage commands to simplify access and
     to recognize misspellings via syntax coloring: *)

(*AboutTab::usage = "";
ArbPrecisionWithGrayHiddenDigits::usage = "";
Bolde::usage = "";
CandidateTooltipPopupInfo::usage = "";
ContactUsTab::usage = "";
DisplayMessageOrAcceptedAndCPUTime::usage = "";
DisplayNothingOrPlot::usage = "";
FAQTab::usage = "";
Ital::usage = "";
MagnifiedTooltip::usage = "";
MapTooltipedExpressionColoredByMerit::usage = "";
ResourcesTab::usage = "";
NicePlotRange::usage = "";
NSimplifyTab::usage = "";
$NSimplifyTabInexactNumericQMessage::usage = "";
$NSimplifyTabNonrealInputMessage::usage = "";
ProcessNSimplifyResult::usage = "";
ProposeTab::usage = "";
$ProposeTabNonrealInputMessage::usage = "";
$ProposeTabSyntaxErrorInputMessage::usage = "";$Questionnaire::usage = "";
QuestionnaireTab::usage = "";
TooltippedExpressionColoredByMerit::usage = "";
TooltippedExpressionsAndEntropy10s::usage = "";
ZoomTab::usage = "";*)


(* ::Subsection::Closed:: *)
(*Usage of optionally-public global variables :*)


(* ::Text:: *)
(*Reasons:  I do not want to expose all of these symbols in the public version, but when developing and debugging:*)
(*1:  Blue indicates a misspelling.*)
(*2:  I can access the value from outside the package without prefixing the symbol with the package name. *)


(*$89DigitRuler::usage = "";
$99DigitRuler::usage = "";

$AccessibleVariablesString::usage = "";
$AllApproximationLabel::usage = "";
$AllBasicConstantsLabel::usage = "";
$AllBasicFunctionsLabel::usage = "";
$AllBesselFamilyLabel::usage = "";
$AllComplexAnalysisLabel::usage = "";
$AllEllipticFamilyLabel::usage = "";
$AllEnumerationLabel::usage = "";
$AllErfFamilyLabel::usage = "";
$AllExpIntegralFamilyLabel::usage = "";
$AllFactorialFamilyLabel::usage = "";
$AllGeometryLabel::usage = "";
$AllInequalitiesLabel::usage = "";
$AllIterationLabel::usage = "";
$AllNumberTheoryLabel::usage = "";
$AllWellKnownConstantsLabel::usage = "";
$AllZetaFamilyLabel::usage = "";
$ArchimedesImage::usage = "";
$AskConstantsEmailTemplate::usage = "";
$AskConstantsWindowWidth::usage = "";

$BasicButtonArgs::usage = "";
$BasicButtons::usage = "";
$BesselFamilyButtonArgs::usage = "";
$BesselFamilyButtons::usage = "";
$BesselILabel::usage = "";
$BesselJLabel::usage = "";
$BesselKLabel::usage = "";
$BesselYLabel::usage = "";
BeyondGalois::usage = "";
$Black0::usage = "";
$BlankInputField::usage = "";
$BlankNSimplifyDisplay::usage = "";

$CardinalityOfExpFamily::usage = "";
$CardinalityOfInverseTrigFamily::usage = "";
$CardinalityOfLogFamily::usage = "";
$CardinalityOfTrigFamily::usage = "";
$CheckedBox::usage = "";
ChooseConstantsHelpSubTab::usage = "";
ChooseConstantsSubTab::usage = "";
ChooseFunctionsHelpSubTab::usage = "";
ChooseFunctionsSubTab::usage = "";
$ConstanceImage::usage = "";
$ConstantsHelp::usage = "";

$DaleMyersImage::usage = "";
$DigitsButtonArgs::usage = "";
$DigitRuler::usage = "";
$DStoutemyerImage::usage = "";

$EllipticFamilyButtonArgs::usage = "";
$EllipticFamilyButtons::usage = "";
$EmptyFieldBelowRuler::usage = "";
$ErfFamilyButtonArgs::usage = "";
$ErfFamilyButtons::usage = "";
Example1::usage = "";
Example2::usage = "";
Example3::usage = "";
Example4::usage = "";
Example5::usage = "";
Example6::usage = "";
Example7::usage = "";
Example8::usage = "";
Example9::usage = "";
Example10::usage = "";
$ExpIntegralELabel::usage = "";
$ExpIntegralFamilyButtonArgs::usage = "";
$ExpIntegralFamilyButtons::usage = "";
$ExpressionDisplayWidth::usage = "";
$ExponentBuiltUpRootButtonArgs::usage = "";

$FactorialFamilyButtonArgs::usage = "";
$FactorialFamilyButtons::usage = "";
$FinchCitation::usage = "";
$FirstTimeUserMessage::usage = "";
FloatInputHelpSubTab::usage = "";
$FunctionsHelp::usage = "";

$InputTips::usage = "";

$HelpForEnteringNonFloats::usage = "";

$IntegerToTimeList::usage = "";
$InverseBesselILabel::usage = "";
$InverseBesselJLabel::usage = "";
$InverseBesselKLabel::usage = "";
$InverseBesselYLabel::usage = "";
$InverseExpIntegralELabel::usage = "";
InverseHyperbolic::usage = "";
$InversePolyGammaLabel::usage = "";
$InversePolyLogLabel::usage = "";
$InverseSphericalBesselJLabel::usage = "";
$InverseSphericalBesselYLabel::usage = "";
$InverseStruveLLabel::usage = "";
$InverseTrigButtonArgs::usage = "";
$ItalA::usage = "";
$ItalC::usage = "";
$ItalE::usage = "";
$Italf::usage = "";
$ItalF::usage = "";
$ItalG::usage = "";
$ItalH::usage = "";
$ItalI::usage = "";
$Italj::usage = "";
$ItalJ::usage = "";
$Italk::usage = "";
$ItalK::usage = "";
$ItalL::usage = "";
$Italm::usage = "";
$ItalMathematica::usage = "";
$Italn::usage = "";
$Italp::usage = "";
$Italq::usage = "";
$Itals::usage = "";
$ItalS::usage = "";
$Italt::usage = "";
$Italu::usage = "";
$Italv::usage = "";
$Italx::usage = "";
$Italy::usage = "";
$ItalY::usage = "";

$LastNumberedProposeExample::usage = "";
$Log10Log2LogEButtonArgs::usage = "";

$MathPasteButtonBackgroundColor::usage = "";
$MathPasteButtons::usage = "";
MathPasteButtonsSubTab::usage = "";
$MaxNumberDisplayedHiddenArbPrecisionDigits::usage = "";
$maxNumberOfRejects::usage = "";
$MinChooseFunctionsHelpSubtabHeight::usage = "";
$MinChooseFunctionsSubtabHeight::usage = "";
$MinChooseNamedConstantsHelpSubtabHeight::usage = "";
$MinChooseNamedConstantsSubtabHeight::usage = "";
$MinFloatInputHelpSubtabHeight::usage = "";
$MinPurposeSubtabHeight::usage = "";
$MinResultFormatSubtabHeight::usage = "";
$MinResultSubtabHeight::usage = "";
$MoreConstantsButtonArgs::usage = "";
$MoreConstantsPasteButtons::usage = "";
$MoreFunctionsPasteButtons::usage = "";

$NSimplifyBeyondGaloisAnnotation::usage = "";
$NSimplifyBeyondGaloisInput::usage = "";
$NSimplifyEllipticEAnnotation::usage = "";
$NSimplifyEllipticEInput::usage = "";
$NSimplifyFactorial2Annotation::usage = "";
$NSimplifyFactorial2Input::usage = "";
$NSimplifyInputFieldWidth::usage = "";
$NSimplifyInvHyperAnnotation::usage = "";
$NSimplifyInvHyperInput::usage = "";
$NSimplifyPolyGammaAnnotation::usage = "";
$NSimplifyPolyGammaInput::usage = "";
$NSimplifyPolyLogAnnotation::usage = "";
$NSimplifyPolyLogInput::usage = "";
$NSimplifySyntaxErrorMessage::usage = "";
$NSimplifyTabNonnumericQMessage::usage = "";
$NSimplifyTabSyntaxErrorInputMessage::usage = "";
$NSimplifyTrigAnnotation::usage = "";
$NSimplifyTrigInput::usage = "";
$NSimplifyZetaAnnotation::usage = "";
$NSimplifyZetaInput::usage = "";
$NumberOfBasicFunctions::usage = "";
$NumberOfBesselFamilyFunctions::usage = "";
$NumberOfEllipticFamilyFunctions::usage = "";
$NumberOfErfFamilyFunctions::usage = "";
$NumberOfExpIntegralFamilyFunctions::usage = "";
$NumberOfFactorialFamilyFunctions::usage = "";
$NumberOfZetaFamilyFunctions::usage = "";
$NumericApproximationArgs::usage = "";
$NumericApproximationButtons::usage = "";

$OperatorsButtonArgs::usage = "";

$PersonPlaceholderImage::usage = "";
$PiAndEButtonArgs::usage = "";
$PlotMarkers::usage = "";
$PolyGammaLabel::usage = "";
$PolyLogLabel::usage = "";
$ProposeExample1Annotation::usage = "";
$ProposeExample2Annotation::usage = "";
$ProposeExample3Annotation::usage = "";
$ProposeExample4Annotation::usage = "";
$ProposeExample5Annotation::usage = "";
$ProposeExample6Annotation::usage = "";
$ProposeExample7Annotation::usage = "";
$ProposeExample8Annotation::usage = "";
$ProposeExample9Annotation::usage = "";
$ProposeExample10Annotation::usage = "";
$ProposeExample1Input::usage = "";
$ProposeExample2Input::usage = "";
$ProposeExample3Input::usage = "";
$ProposeExample4Input::usage = "";
$ProposeExample5Input::usage = "";
$ProposeExample6Input::usage = "";
$ProposeExample7Input::usage = "";
$ProposeExample8Input::usage = "";
$ProposeExample9Input::usage = "";
$ProposeExample10Input::usage = "";
$ProposeExpressionWidth::usage = "";
$ProposeInputFieldWidth::usage = "";
ProposePurposeSubTab::usage = "";
$ProposeRandomDefaultAnnotation::usage = "";
$ProposeSubtabsViewHeight::usage = "";
$ProposeTabNonfloatNumericQMessage::usage = "";
$ProposeTabIrrationalNonfloatMessage::usage = "";
$ProposeTabNonnumericQMessage::usage = "";
$ProposeTabPurposeString::usage = "";
$ProposeTabTimeLimitTooltip::usage = "";
$PunctuationArgs::usage = "";

RandomDefaultExample::usage = "";
$RandomFloatAnnotation::usage = "";
RandomFloatExample::usage = "";
$ReasonsForAllTerribleTooltip::usage = "";
ResultFormatSubTab::usage = "";
ResultSubTab::usage = "";
$roundedFontSize::usage = "";
$roundedFontSizeOn14::usage = "";

$SameAsFactorial2String::usage = "";
$ScatterPlotImageWidth::usage = "";
$SphericalBesselJLabel::usage = "";
$SphericalBesselYLabel::usage = "";
$StieltjesGammaLabel::usage = "";
$StruveLLabel::usage = "";

TestMe::usage = "";
$TestMeAnnotation::usage = "";
$TestMeInput::usage = "";
$TooltipColor1::usage = "";
(*$TooltipColor2::usage = "";*)
$TooltipFontSize::usage = "";
$TotalNumberOfFunctions::usage = "";
$TotalNumberOfNamedConstants::usage = "";
$TrigButtonArgs::usage = "";
$TruncateDigitsTooltip::usage = "";

$UncheckedBox::usage = "";

YourExample::usage = "";

$ZenoImage::usage = "";
$ZetaFamilyButtonArgs::usage = "";
$ZetaFamilyButtons::usage = "";*)


(* ::Section::Closed:: *)
(*Code :*)


Begin ["`Private`"];


If [$VersionNumber < 10.1,
    Unprotect [StringRepeat];
    (*StringRepeat::usage = "Mathematica function introduced in Version 10.1";*)
    StringRepeat [string_, n_] := Apply [StringJoin, Reap [Do [Sow [string], {n}]][[2,1]]];
    Attributes [StringRepeat] = {Listable, NumericFunction};
    Protect [StringRepeat]];


If [$VersionNumber < 9.0,
    Unprotect [CheckboxBar];
    CheckboxBar [var_, rules_, Appearance -> "Vertical" -> {Automatic, numberOfColumns_}] :=
      With [{numberOfRows = Ceiling [Length [rules] / numberOfColumns]},
        Row [Riffle [Map [CheckboxBar [var, #, Appearance -> "Vertical"] &,
                          Partition [rules, numberOfRows, numberOfRows, 1, {}]], "    "]]];
    Protect [CheckboxBar]];


(* ::Subsection::Closed:: *)
(*Initializations :*)


(* ::Subsubsection::Closed:: *)
(*$AskConstantsEmailTemplate :*)


$AskConstantsEmailTemplate =
"To :   AskConst@hawaii.edu
Subject :   (Choose one or use something else containing \"AskConstants\":)
  A constant of interest that AskConstants cannot propose: ...
  A suggested new model for AskConstants ...
  A suggested AskConstants interface improvement ...
  An AskConstants Bug about ...

I have attached a  Minimal  notebook including pasted Messages-window lines and text or comments to describe the issue.
I have attached a window-capture image that shows the interface problem.
AskConstants FontSize :  ...            AskConstants version :  ...            Mathematica  $Version :  ...

   (Example narrative, using  ToString [..., InputForm, NumberMarks -> True]  to generate unabbreviated parsable pasted 1D ASCII Mathematica expressions:)
Models of the form  r1 + r2*Pi^2 + r3*Sqrt [7/11]  occur frequently in my field, where r1, r2 and r3 are unknown
rational numbers.  Example URLs include ...  I encourage you to add such a model to Propose [...] and AskConstants [...].

- Best regards, (Optionally, your name)";


(* ::Subsubsection::Closed:: *)
(*$DigitRulers :*)


$89DigitRuler = {"  123456789", $Black0, "123456789", $Black0, "123456789", $Black0,
  "123456789", $Black0, "123456789", $Black0, "123456789", $Black0,
  "123456789", $Black0, "123456789", $Black0, "123456789", $Black0};

$99DigitRuler = Join [$89DigitRuler, {"123456789", $Black0}];


(* ::Subsubsection::Closed:: *)
(*Citation strings :*)


(* ::Subsubsubsection::Closed:: *)
(*$FinchCitation :*)


$FinchCitation = "\"Mathematical Constants\" by Stephen Finch is a delightful
  reference for all of the constants on this tab and many others.";


(* ::Subsubsection::Closed:: *)
(*Data for the "Choose constants" subtab :*)


(* ::Subsubsubsection::Closed:: *)
(*Labels in the Choose constants subtab :*)


$AllBasicConstantsLabel = StringJoin ["All =   ", ToString [Length [$AllBasicConstantsTasks]]];

$AllWellKnownConstantsLabel = StringJoin ["All = ", ToString [Length [$AllWellKnownConstantsTasks]]];

$StieltjesGammaLabel = Row [{"StieltjesGamma [1 \[LessEqual] ", $Italn, " \[LessEqual] ", $MaxAllowedStieltjesGammaIndex, "]"}];

$AllNumberTheoryLabel = StringJoin ["All = ",
   ToString [-1 + Length [$AllNumberTheoryConstantsTasks] + $MaxAllowedStieltjesGammaIndex]];

$AllInequalitiesLabel = StringJoin ["All =   ",
               ToString [Length [$AllInequalitiesConstantsTasks]]];

$AllApproximationLabel = StringJoin ["All =   ", ToString [Length [$AllApproximationConstantsTasks]]];

$AllEnumerationLabel = StringJoin ["All = ", ToString [Length [$AllEnumerationConstantsTasks]]];

$AllIterationLabel = StringJoin ["All = ", ToString [Length [$AllIterationConstantsTasks]]];

$AllComplexAnalysisLabel = StringJoin ["All =   ", ToString [Length [$AllComplexAnalysisConstantsTasks]]];

$AllGeometryLabel = StringJoin ["All =   ", ToString [Length [$AllGeometryConstantsTasks]]];


(* ::Subsubsubsection::Closed:: *)
(*$TotalNumberOfNamedConstants :*)


$TotalNumberOfNamedConstants = $MaxAllowedStieltjesGammaIndex - 1 +
 Apply [Plus, Map [Length, {$AllBasicConstantsTasks, $AllWellKnownConstantsTasks,
  $AllNumberTheoryConstantsTasks, $AllInequalitiesConstantsTasks, $AllApproximationConstantsTasks,
  $AllEnumerationConstantsTasks, $AllIterationConstantsTasks,
  $AllComplexAnalysisConstantsTasks, $AllGeometryConstantsTasks}]];


(* ::Subsubsection::Closed:: *)
(*Data for the "Choose functions" subtab :*)


(* ::Subsubsubsection::Closed:: *)
(*Basic functions :*)


$CardinalityOfExpFamily = 7;
$CardinalityOfTrigFamily = 7;
$CardinalityOfLogFamily = 12;
$CardinalityOfInverseTrigFamily = 8;
$NumberOfBasicFunctions = 1 + $CardinalityOfExpFamily + $CardinalityOfTrigFamily +
  $CardinalityOfLogFamily + $CardinalityOfInverseTrigFamily;

$AllBasicFunctionsLabel = StringJoin ["All = ", ToString [$NumberOfBasicFunctions]];


(* ::Subsubsubsection::Closed:: *)
(*Factorial family :*)


$NumberOfFactorialFamilyFunctions = Length [$AllFactorialFamilyTasks] + 
  $MaxAllowedPolyGammaIndex + $MaxAllowedInversePolyGammaIndex - 2;

$PolyGammaLabel = Row [{"PolyGamma [0 \[LessEqual] ", $Italn, " \[LessEqual] ", $MaxAllowedPolyGammaIndex, ", ", $Italx, "]"}];

$InversePolyGammaLabel = Row [{"RealInversePolyGamma [0 \[LessEqual] ", $Italn, " \[LessEqual] ",
  $MaxAllowedInversePolyGammaIndex, ",  ", $Italy, ",  \!\(\*SubscriptBox[\(branch\), \(#\)]\) = 1]"}];

$AllFactorialFamilyLabel = StringJoin ["All = ", ToString [$NumberOfFactorialFamilyFunctions]];


(* ::Subsubsubsection::Closed:: *)
(*Zeta family :*)


$NumberOfZetaFamilyFunctions = Length [$AllZetaFamilyTasks] +
  $MaxAllowedPolyLogIndex + $MaxAllowedInversePolyLogIndex - 2;

$PolyLogLabel = Row [{"PolyLog [2 \[LessEqual] ", $Italn, " \[LessEqual] ", $MaxAllowedPolyLogIndex, ", ", $Italx, "]"}];

$InversePolyLogLabel = Row [{"RealInversePolyLog [2 \[LessEqual] ", $Italn, " \[LessEqual] ", $MaxAllowedInversePolyLogIndex, ", ", $Italy, "]"}];

$AllZetaFamilyLabel = StringJoin ["All = ", ToString [$NumberOfZetaFamilyFunctions]];


(* ::Subsubsubsection::Closed:: *)
(*Erf family :*)


$NumberOfErfFamilyFunctions = Length [$AllErfFamilyTasks];

$AllErfFamilyLabel = StringJoin ["All = ", ToString [$NumberOfErfFamilyFunctions]];


(* ::Subsubsubsection::Closed:: *)
(*Exponential integral family :*)


$NumberOfExpIntegralFamilyFunctions = Length [$AllExpIntegralFamilyTasks] +
  $MaxAllowedExpIntegralEIndex  + $MaxAllowedInverseExpIntegralEIndex - 4;

$ExpIntegralELabel = Row [{"ExpIntegralE [2 \[LessEqual] ", $Italn, " \[LessEqual] ", $MaxAllowedExpIntegralEIndex, ", ", $Italx, "]"}];

$InverseExpIntegralELabel = Row [{"RealInverseExpIntegralE [2 \[LessEqual] ", $Italn, " \[LessEqual] ",
                                        $MaxAllowedInverseExpIntegralEIndex, ", ", $Italy, "]"}];

$AllExpIntegralFamilyLabel =
  StringJoin ["All = ", ToString [$NumberOfExpIntegralFamilyFunctions]];


(* ::Subsubsubsection::Closed:: *)
(*Elliptic family :*)


$NumberOfEllipticFamilyFunctions = Length [$AllEllipticFamilyTasks];

$AllEllipticFamilyLabel = StringJoin ["All = ", ToString [$NumberOfEllipticFamilyFunctions]];


(* ::Subsubsubsection::Closed:: *)
(*Bessel family :*)


$NumberOfBesselFamilyFunctions = $MaxAllowedBesselJIndex + $MaxAllowedBesselYIndex +
  $MaxAllowedBesselIIndex + $MaxAllowedBesselKIndex + $MaxAllowedSphericalBesselJIndex +
  $MaxAllowedSphericalBesselYIndex + $MaxAllowedStruveLIndex + $MaxAllowedInverseBesselJIndex +
  $MaxAllowedInverseBesselYIndex + $MaxAllowedInverseBesselIIndex + $MaxAllowedInverseBesselKIndex +
  $MaxAllowedInverseSphericalBesselJIndex + $MaxAllowedInverseSphericalBesselYIndex +
  $MaxAllowedInverseStruveLIndex + 18; (* :for indices 0 and Airy functions *)

$BesselJLabel = Row [{"BesselJ [0 \[LessEqual] ", $Italn, " \[LessEqual] ", $MaxAllowedBesselJIndex, ", ", $Italx, "]"}];
 (*|x| \[LessTilde] ",
 ToString [Round [N[BesselJInfimumOrSupremumAbscissa[$MaxAllowedBesselJIndex, $MaxAllowedBesselJBranch]]]], "]"];*)
$BesselYLabel = Row [{"BesselY [0 \[LessEqual] ", $Italn, " \[LessEqual] ", $MaxAllowedBesselYIndex, ", ", $Italx, "]"}];
$BesselILabel = Row [{"BesselI [0 \[LessEqual] ", $Italn, " \[LessEqual] ", $MaxAllowedBesselIIndex, ", ", $Italx, "]"}];
$BesselKLabel = Row [{"BesselK [0 \[LessEqual] ", $Italn, " \[LessEqual] ", $MaxAllowedBesselKIndex, ", ", $Italx, "]"}];
$SphericalBesselJLabel = Row [{"SphericalBesselJ [0 \[LessEqual] ", $Italn, " \[LessEqual] ", $MaxAllowedSphericalBesselJIndex, ", ", $Italx, "]"}];
$SphericalBesselYLabel = Row [{"SphericalBesselY [0 \[LessEqual] ", $Italn, " \[LessEqual] ", $MaxAllowedSphericalBesselYIndex, ", ", $Italx, "]"}];
$StruveLLabel = Row [{"StruveL [0 \[LessEqual] ", $Italn, " \[LessEqual] ", $MaxAllowedStruveLIndex, ", ", $Italx, "]"}];

$InverseBesselJLabel = Row [{"RealInverseBesselJ [0 \[LessEqual] ", $Italn, " \[LessEqual] ", $MaxAllowedInverseBesselJIndex,
  ",  ", $Italy, ",  \!\(\*SubscriptBox[\(branch\), \(#\)]\)]"}];
$InverseBesselYLabel = Row [{"RealInverseBesselY [0 \[LessEqual] ", $Italn, " \[LessEqual] ", $MaxAllowedInverseBesselYIndex,
  ",  ", $Italy, ",  \!\(\*SubscriptBox[\(branch\), \(#\)]\) \[GreaterEqual] 1]"}];
$InverseBesselILabel = Row [{"RealInverseBesselI [0 \[LessEqual] ", $Italn, " \[LessEqual] ", $MaxAllowedInverseBesselIIndex,
  ",  ", $Italy, ",  \!\(\*SubscriptBox[\(branch\), \(#\)]\) = 1]"}];
$InverseBesselKLabel = Row [{"RealInverseBesselK [0 \[LessEqual] ", $Italn, " \[LessEqual] ", $MaxAllowedInverseBesselKIndex,
  ",  ", $Italy, ",  \!\(\*SubscriptBox[\(branch\), \(#\)]\) = 1]"}];
$InverseSphericalBesselJLabel = Row [{"RealInverseSphericalBesselJ [0 \[LessEqual] ", $Italn, " \[LessEqual] ",
  $MaxAllowedInverseSphericalBesselJIndex, ",  ", $Italy, ",  \!\(\*SubscriptBox[\(branch\), \(#\)]\)]"}];
$InverseSphericalBesselYLabel = Row [{"RealInverseSphericalBesselY [0 \[LessEqual] ", $Italn, " \[LessEqual] ",
  $MaxAllowedInverseSphericalBesselYIndex, ",  ", $Italy, ",  \!\(\*SubscriptBox[\(branch\), \(#\)]\) \[GreaterEqual] 1]"}];
$InverseStruveLLabel = Row [{"RealInverseStruveL [0 \[LessEqual] ", $Italn, " \[LessEqual] ", $MaxAllowedInverseStruveLIndex,
  ",  ", $Italy, ",  0 \[LessEqual] \!\(\*SubscriptBox[\(branch\), \(#\)]\) \[LessEqual] 1]"}];

$AllBesselFamilyLabel = StringJoin ["All =  ", ToString [$NumberOfBesselFamilyFunctions]];


(* ::Subsubsubsection::Closed:: *)
(*$TotalNumberOfFunctions :*)


$TotalNumberOfFunctions = $NumberOfBasicFunctions + $NumberOfFactorialFamilyFunctions +
 $NumberOfZetaFamilyFunctions + $NumberOfErfFamilyFunctions + $NumberOfExpIntegralFamilyFunctions +
 $NumberOfEllipticFamilyFunctions + $NumberOfBesselFamilyFunctions;



(* ::Subsubsection::Closed:: *)
(*Examples for Propose tab :*)


$LastNumberedProposeExample = 8;


(* ::Subsubsubsection::Closed:: *)
(*$ProposeExample1...,  Linear combination of constants :*)


$ProposeExample1Input = N[-1/6 + (4/9)Pi^2 - (7/2)Zeta[3], 20];

$ProposeExample1Annotation = OpenerView [{Bolde ["Explanation \[Ellipsis]"], Row [{
"1. It is most helpful to do these examples in order the first time.
2. The above float input is a complicated 4-dimensional integral
   doable with  NIntegrate [\[Ellipsis], WorkingPrecision -> \[Ellipsis]]  but not with
   Integrate [\[Ellipsis]].   (",
   Hyperlink ["D.H. Bailey", "http://www.davidhbailey.com/dhbtalks/dhb-carma-20100824.pdf"], ")  
3. The expression below is a Proposed limit as WorkingPrecision \[RightArrow] \[Infinity].
   The large plotted dot is its Agreement versus  Entropy10  complexity.
4. Mouse over ", Bolde["magenta"], " phrases, ", Bolde ["colored"], " expressions, and
    ", Bolde["scatter-plot points"], " for definitions and values:
6. Click a scatter-plot point for a copyable popup result.
"}]}];


(* ::Subsubsubsection::Closed:: *)
(*$ProposeExample2...,  Zeros :*)


$ProposeExample2Input = "FindRoot [LogIntegral [(29 x - 37) / 31] \[Equal] 0,  {x, 2.5},  WorkingPrecision -> 16] [[1, 2]]";

$ProposeExample2Annotation = OpenerView [{Bolde ["Explanation \[Ellipsis]"], Row [{
"\[Bullet] As in Example 1, people most often compute a float outside AskConstants
  then paste it.  However, most of these examples include the float
  computation to indicate some of the ways you could obtain such a float.
\[Bullet] The ", Bolde [Ital ["Math paste buttons"]], " subtab can help you correctly enter
  expressions that evaluate to a float.
\[Bullet] Regarding this example, ", $ItalMathematica, " has some builtin functions such
  as  BesselJZero [", $Italn, ", ", $Italk, "]  that designates the \!\(\*SuperscriptBox[\(k\), \(th\)]\) zero of  BesselJ [",
    $Italn, ", ", $Italx, "].
\[Bullet] AskConstants includes a  ", Bolde ["Zeros.m"], "  package with analogous functions
  that compute the real zeros of many additional special functions.
\[Bullet] The smallest positive zero is number 1, increasing by 1 for successive
  zeros to the right and decreasing by 1 for successive zeros to the left.
\[Bullet] Try  Plot [LogIntegral [", $Italx, "],  {", $Italx, ", 0, 3}]  then  N [LogIntegralZero [1], 7]].
\[Bullet] Proposal of such zeros is enabled by Choosing the corresponding
  inverse function in the \"Choose functions\" subtab."}]}];


(* ::Subsubsubsection::Closed:: *)
(*$ProposeExample3...,  infima and suprema ordinates :*)


$ProposeExample3Input = "First [FindMinimum [(29 Gamma [x] + 31) / 37,  {x, 1.5},  WorkingPrecision -> 16]]";

$ProposeExample3Annotation = OpenerView [{Bolde ["Explanation \[Ellipsis]"], Row [{
"\[Bullet] This result was found with the assistance of the
   ", Bolde["InfimalAndSuprema.m"], "  package included with AskConstants.    
\[Bullet] The ordinate of the first positive abscissa is number 1.
\[Bullet] Plot [Gamma [x], {x, -3, 3}]   then
  N [GammaInfimumOrSupremumOrdinate [1],  9]
  reveal that this local minimum ordinate is  ", $Italy, " \[TildeEqual] 0.8856\[CenterEllipsis].
\[Bullet] Proposal of such extremal ", Bolde ["ordinates"], " is enabled by Choosing the
  corresponding ", Bolde ["function"], " in the \"Choose functions\" subtab.
\[Bullet] The package implements infima and suprema ordinates
  for all of the special functions modeled by AskConstants.
"}]}];


(* ::Subsubsubsection::Closed:: *)
(*$ProposeExample4...,  infima and suprema abscissas :*)


$ProposeExample4Input = "FindRoot [D [(29 Gamma [x] + 31) / 37,  x] \[Equal] 0, {x, 1.5}, WorkingPrecision -> 16][[1, 2]]";

$ProposeExample4Annotation = OpenerView [{Bolde ["Explanation \[Ellipsis]"], Row [{
"\[Bullet] This result was found with the assistance of the
   ", Bolde["InfimalAndSuprema.m"], "  package included with AskConstants.    
\[Bullet] The first positive abscissa is number 1.
\[Bullet] Plot [Gamma [x], {x, -3, 3}]  and
  N [GammaInfimumOrSupremumAbscissa [1],  9]
  reveal that this local minimum abscissa is  ", $Italx, " \[TildeEqual] 1.46\[CenterEllipsis].
\[Bullet] As with most ", Bolde ["stationary"], " extrema,  FindMinimum [\[Ellipsis]]  does not find
  sufficiently precise ", Bolde["abscissas"], " to be proposed at WorkingPrecision -> 16.
\[Bullet] As illustrated, determinining a zero of the first derivative is sufficiently precise.
\[Bullet] Proposal of such ", Bolde["abscissas"], " is enabled by Choosing the corresponding
  ", Bolde ["inverse function"], " in the \"Choose functions\" subtab.
"}]}];


(* ::Subsubsubsection::Closed:: *)
(*$ProposeExample5...,  RealInverse results :*)


$ProposeExample5Input = "FindRoot [Gamma [x] \[Equal] 101 / 31,  {x, 0.3},  WorkingPrecision -> 16] [[1, 2]]";

$ProposeExample5Annotation = OpenerView [{Bolde ["Explanation \[Ellipsis]"], Row [{
"\[Bullet] To propose a candidate of the form  ", $Italy, " \[Rule] ", $Italf, "[", $Italx, "]  for a given float  ", $Italy,  " ,
  Propose [", $Italy, "]  computes the float  ", $Italx, "= inverse[", $Italf, "] [", $Italy, "],  then tries to determine
  a promising non-float candidate for  ", $Italx, ".
\[Bullet] Many ", $ItalMathematica, " special functions do not have builtin inverses,
  because they are multi-branched in non-trivial ways in the complex plane.
\[Bullet] However, AskConstants and many other applications only need real inverses.
\[Bullet] Consequently the package  ", Bolde ["RealInverse.m"], "  included with AskConstants
  implements many such functions, named RealInverse\[Ellipsis]
\[Bullet] If that inverse is multi-branched, then  RealInverse [..., ", $Italm, "]  is branch  ", $Italm, ".
\[Bullet] Branches are numbered increasing right from branch 1 containing
  abscissa 0, and decreasing toward  -\[Infinity]  to the left.
\[Bullet] Plot [Gamma [x],  {x, -3, 3}]  suggests an infinite number of branches.
\[Bullet] RealInverse.m  implements all, but AskConstants tries only branches 1 and 2.
"}]}]; 


(* ::Subsubsubsection::Closed:: *)
(*$ProposeExample6...,  Equivalent results :*)


$ProposeExample6Input = "NIntegrate [x^-1, {x, 1, 2 + Sqrt [5]},  WorkingPrecision -> 16]";

$ProposeExample6Annotation = OpenerView [{Bolde ["Explanation \[Ellipsis]"], Row [{
"\[Bullet] ", $ItalMathematica, " can determine an exact result for Examples 6 through ", $LastNumberedProposeExample, "
  so that you can determine if any proposed candidate is the limit as
  the Precision \[Rule] \[Infinity].
\[Bullet] Equivalent results are connected by line segments in the plot.
\[Bullet] The reason for so many equivalent results here is that logarithms and all
  of the inverse hyperbolic functions can be transformed into each other.
\[Bullet] AskConstants independently proposed these equivalents, then
  decided their equivalence beyond a reasonable doubt by applying
  ", $ItalMathematica, "  PossibleZeroQ [\[Ellipsis]]  function to their differences.
"}]}];


(* ::Subsubsubsection::Closed:: *)
(*$ProposeExample7...,  Products of powers :*)


$ProposeExample7Input =
"NIntegrate [BarnesG [x] ((1 + Log [2\[Pi]]) / 2 - x + (x - 1) PolyGamma [0, x]),  {x, 0, 1/2},  WorkingPrecision -> 24]";

$ProposeExample7Annotation = OpenerView [{Bolde ["Explanation \[Ellipsis]"], Row [{
"1. Named contants that you never heard of might occur in a result.   
2. Glaisher occurs in some definite integrals and infinite series.
3. To enable inclusion of additional constants or to click hyperlinks
    to their defintions, open the ", Bolde [Ital ["Choose named constants"]], " subtab.    
4. Choosing  BarnesG  in the ", Bolde [Ital ["Choose functions"]], " subtab
    reveals that this result is also equivalent to  ", Hyperlink ["BarnesG",
                                 "http://mathworld.wolfram.com/BarnesG-Function.html"], " [1/2].
"}]}];


(* ::Subsubsubsection::Closed:: *)
(*$ProposeExample8...,  How to detect bogus Excellent-Merit candidates :*)


$ProposeExample8Input = "N [Tan [1 / Sqrt [3538162]], 20]";

$ProposeExample8Annotation = OpenerView [{Bolde ["Explanation \[Ellipsis]"], Row [{
"1. This example is by ", Hyperlink ["A. Meichsner",
      "http://www.collectionscanada.gc.ca/obj/s4/f2/dsk3/ftp04/MQ61592.pdf"],"
2. Propose does not model such trigonometric arguments.
3. The lower-entropy non-equivalent  Sin [1/1881]  candidate has
    Excellent Merit because it agrees with the tangent to ", Bolde["21"], " digits.
4. As you increase the Precision from significantly less than 20 through
    significantly more, the bogus candidate's Agreement & Merit increases
    by jumps to about 21 digits, with negligible further increase thereafter.
5. This reveals that it is bogus.  Excellent and Good impostors are very rare.
"}]}];


(* ::Subsubsubsection::Closed:: *)
(*$ProposeRandomDefaultAnnotation :*)


$ProposeRandomDefaultAnnotation = OpenerView [{Bolde ["Explanation \[Ellipsis]"], 
"\[Bullet] You get a new input each time you select \"Random default\" then click Go.
\[Bullet] Each non-float example is a default implemented model containing some
  random integers, approximated to an estimated-sufficient Precision.
\[Bullet] \"NForMeritGoal [nonFloatConstant,  meritGoal]\"  :=
          N [nonFloatConstant,  meritGoal + Entropy10 [nonFloatConstant]]
  is a convenient way to test the  Propose [\[Ellipsis]]  function.
\[Bullet] The resulting Merit is sometimes rather different than estimated.
\[Bullet] If an equivalent expression is proposed, try inserting \"-2\", then \"-4\" etc.
  after  $Lowest\[Ellipsis]Merit  until the nonFloatConstant is not proposed.
\[Bullet] The meritGoal is sometimes insufficient for proposal.
\[Bullet] If this happens, try inserting \"*2\" after $Lowest\[Ellipsis]Merit.
\[Bullet] If the boosted meritGoal is still insufficient, then perhaps you have
  deselected a needed item in the \"Choose functions\" or
  \"Choose named constants\" subtab."}];


(* ::Subsubsubsection::Closed:: *)
(*$RandomFloatAnnotation :*)


$RandomFloatAnnotation = OpenerView [{Bolde ["Explanation \[Ellipsis]"],  Row [{
"1. You get a new input each time you select \"Random float\" then click Go.  
2. Expressions are countable, whereas the reals are not.
3. Therefore random ", Bolde["reals"], " rarely approximate concise formulas closely.
4. Although ", Bolde["floats"], " are countable, the number of 16-digit floats
    models the reals closely enough so that the Propose tab rarely
    generates candidates having  Merit > Bad  for such random floats.
"}]}];


(* ::Subsubsubsection::Closed:: *)
(*$TestMe :*)


$TestMeInput = "NForMeritGoal [\[SelectionPlaceholder],  $LowestExcellentMerit]";

$TestMeAnnotation = OpenerView [{Bolde ["Explanation \[Ellipsis]"], 
"\[Bullet] \"NForMeritGoal [nonFloatConstant,  meritGoal]\" :=
          N [nonFloatConstant,  meritGoal + Entropy10 [nonFloatConstant]] .
\[Bullet] It is a convenient way to test the  Propose [\[Ellipsis]]  function.
\[Bullet] Click the \"Choose functions\" or \"Choose named constants\" subtabs to
  make sure listed functions and named constants in your input are chosen.
\[Bullet] If successful, try reducing meritGoal until nonFloatConstant is not proposed.
\[Bullet] If  $LowestExcellentMerit  is insufficient to propose an equivalent
  expression, then probably your input is not modeled.
\[Bullet] But algebraic numbers are proposed via  Root [\[Ellipsis]],  and its Entropy10
  can be much larger than for an equivalent radical or trigonometric input.
\[Bullet] For such inputs, try larger meritGoal or try  RootReduce [\[Ellipsis]]  on your
  nonFloatConstant in a notebook and paste the resulting Root[...] expression.
"}];


(* ::Subsubsection::Closed:: *)
(*Examples for NSimplify tab :*)


(* ::Subsubsubsection::Closed:: *)
(*$SameAsFactorial2String :*)


$SameAsFactorial2String = OpenerView [{Bolde ["Explanation \[Ellipsis]"],
 "Here is a dramatic simplification accomplished as explained in the \"!!\" example annotation:
"}];


(* ::Subsubsubsection::Closed:: *)
(*$NSimplifyFactorial2... :*)


$NSimplifyFactorial2Input = 2^(91/116+1/4 Cos[(2 \[Pi])/29]) \[Pi]^(-(1/4)-1/4 Cos[(2 \[Pi])/29]) Gamma[89/58];

$NSimplifyFactorial2Annotation = OpenerView [{Bolde ["Explanation \[Ellipsis]"], Row [{
"1.  FullSimplify [\[Ellipsis]]  leaves all of the ", Bolde ["NSimplify"], " tab example inputs unchanged.
2.  It is impractical to implement symbolic transformations that could simplify this input to the result below.
3.  However, if an input expression  ", $Italu, "  is equivalent to an instance of one of the Propose function models,
     then the  NSimplify [\[Ellipsis]]  function used by this tab might discover that simple equivalent by:
       \[Bullet]  approximating  ", $Italu, "  as a float ", $Italy, " using  NForMeritGoal [inputNonFloat, $LowestExcellentMerit],
       \[Bullet]  then using  Propose [", $Italy, "]  to propose high-Merit candidates  ", $Italv, "
       \[Bullet]  then using the ", $ItalMathematica, "  PossibleZeroQ [", Ital ["u - v"], "]  function to decide beyond a
          reasonable doubt whether or not each candidate  ", $Italv, "  is equivalent to the input expression ", $Italu, ".
"}]}];


(* ::Subsubsubsection::Closed:: *)
(*$NSimplifyTrig... :*)


$NSimplifyTrigInput =
  Sqrt[1/2 - 1/(4*Sqrt[2/(4 + Sqrt[7 - Sqrt[5] + Sqrt[30 - 6*Sqrt[5]]])])];

$NSimplifyTrigAnnotation = OpenerView [{Bolde ["Explanation \[Ellipsis]"], Row [{
"\[Bullet] People often want to transform sinusoids to radicals,
   but sometimes the opposite direction is preferable!
"}]}];


(* ::Subsubsubsection::Closed:: *)
(*$NSimplifyInvHyper... :*)


$NSimplifyInvHyperInput= 1/64 \[Pi] (204 Sqrt[2]-36 Sqrt[5]-Log[17+12 Sqrt[2]]+Log[9+4 Sqrt[5]]);

$NSimplifyInvHyperAnnotation = OpenerView [{Bolde ["Explanation \[Ellipsis]"], Row [{
"\[Bullet] Logarithms of quadratic numbers can often be expressed more consisely as inverse hyperbolics.
\[Bullet] The built-in ", $ItalMathematica, Bolde ["  ExpToTrig [...]"], "  function does this, but produces the less concise result:

                       ", 1/64 \[Pi] (204 Sqrt[2]-36 Sqrt[5]+ArcCosh[9]-ArcCosh[17]), "
"}]}];


(* ::Subsubsubsection::Closed:: *)
(*$NSimplifyBeyondGalois... :*)


$NSimplifyBeyondGaloisInput = Root[237169+20454 #1-37572 #1^2-14 #1^3+651 #1^4-48 #1^5+#1^6&,3];

$NSimplifyBeyondGaloisAnnotation = OpenerView [{Bolde ["Explanation \[Ellipsis]"], Row [{
"\[Bullet] The three sinusoids in this algebraic number result are not representable with radicals
   because the denominators of their arguments contain the prime 3 more than once.  (",  Hyperlink ["Wikipedia",
      "https://en.wikipedia.org/wiki/Trigonometric_constants_expressed_in_real_radicals"], ")
\[Bullet] If Galois had lived longer, he might have also characterized polynomials that are solvable
   trigonometrically but not in terms of radicals.
"}]}];


(* ::Subsubsubsection::Closed:: *)
(*$NSimplifyPolyLog... :*)


$NSimplifyPolyLogInput = Pi^2/12 - Log[5/4]*Log[5/3] - Log[2]^2/2 - PolyLog[2, 1/5] + PolyLog[2, 1/3] - PolyLog[2, 2/5];

$NSimplifyPolyLogAnnotation = $SameAsFactorial2String;


(* ::Subsubsubsection::Closed:: *)
(*$NSimplifyEllipticE... :*)


$NSimplifyEllipticEInput = EllipticK[4/31] + (Pi - 2*EllipticE[27/31]*EllipticK[4/31])/(2*EllipticK[27/31]);

$NSimplifyEllipticEAnnotation = $SameAsFactorial2String;  


(* ::Subsubsubsection::Closed:: *)
(*$NSimplifyZeta... :*)


$NSimplifyZetaInput = 2(2\[Pi])^(-4/7) Cos[2/7 \[Pi]]Gamma[4/7]Zeta[4/7];

$NSimplifyZetaAnnotation = $SameAsFactorial2String;


(* ::Subsubsubsection::Closed:: *)
(*$NSimplifyPolyGamma... : *)


$NSimplifyPolyGammaInput = PolyGamma[2, 3/101] + Pi^3*Csc[(3*Pi)/101]^4*Sin[(6*Pi)/101];

$NSimplifyPolyGammaAnnotation = $SameAsFactorial2String;


(* ::Subsubsection::Closed:: *)
(*Help strings and error messages:*)


(* ::Subsubsubsection::Closed:: *)
(*$FirstTimeUserMessage :*)


$FirstTimeUserMessage = Style [Row [{"
First-time users :  Start by pressing
", Bolde ["\"Your input \[RightArrow]   \[DownPointer]\""], "   for a sequence of instructive examples.

"}], Larger];


(* ::Subsubsubsection::Closed:: *)
(*$NSimplifyTabSyntaxErrorInputMessage :*)


$NSimplifyTabSyntaxErrorInputMessage = Row [{
Bolde ["Syntax error :"], "
1.  The input must be:
    \[Bullet]  a real , ", Bolde ["non-float"], " mathematical constant, such as  \[Pi] + Log [2];
    \[Bullet]  or an expression that evaluates such a constant; 
    \[Bullet]  or a string for which  ToExpression [\[CenterEllipsis]]  evaluates to one.
2.  Repeatedly clicking subexpressions might help you find the syntax error.  
3.  The math paste buttons and  \"More constants and function\"  OpenerView help ensure correct ", $ItalMathematica, "
     syntax, which ", Bolde["C"], "apitalizes function names ", Bolde["["], "and uses square brackets to delimit their arguments", Bolde["]"], ".
4.  Use \"*\" or a space to indicate multiplication.
5.  Do not use the ", Style ["\[EscapeKey]", Larger], " key to enter special characters such as \[Pi].
     Doing so will close the AskConstants Window."}];


(* ::Subsubsubsection::Closed:: *)
(*$NSimplifyTabNonnumericQMessage :*)


$NSimplifyTabNonnumericQMessage = Row [{
Bolde ["Non-NumericQ error:"], "
\[Bullet]  The input must evaluate to a real a real non-float mathematical ", Bolde ["constant"], " such as  \[Pi] + Log [2],
   but  NumericQ [input]  returns False.
\[Bullet]  Perhaps the input is a list or some other non-NumericQ type or contains an unassigned variable
   or a function that has no matching  \":=\"  definition.
\[Bullet]  Another possibility is that you omitted the arguments of a ", $ItalMathematica, " function
   or misspelled it or forgot to Capitalize it."}];


(* ::Subsubsubsection::Closed:: *)
(*$NSimplifyTabInexactNumericQMessage :*)


$NSimplifyTabInexactNumericQMessage [inputValue_] := Row [{
Bolde ["InexactNumberQ error :"], "
\[Bullet]  The input must evaluate to a real ", Bolde ["non-float"], " NumericQ such as  \[Pi] + Log [2],
   but the input evaluates to the InexactQ constant  ", inputValue}];


(* ::Subsubsubsection::Closed:: *)
(*$NSimplifyTabNonrealInputMessage :*)


$NSimplifyTabNonrealInputMessage [approximateValue_] := Row [{
Bolde ["Nonreal input error :"], " 
\[Bullet]  The input must evaluate to a ", Bolde ["real"], " non-float constant,
   but the input is approximately  ", approximateValue, ",  which is nonreal.
\[Bullet]  Consider enclosing the current input in  \"Re [\[Ellipsis]]\""}];


(* ::Subsubsubsection::Closed:: *)
(*$ProposeTabSyntaxErrorInputMessage :*)


$ProposeTabSyntaxErrorInputMessage = Row [{
Bolde ["Syntax error :"], "
1.  The input must be:
     \[Bullet]  a ", $ItalMathematica, "-style real ", Bolde ["float"], ", which contains a decimal point,
        optionally using  \"*10^\[CenterEllipsis]\"  or  \"*^\[CenterEllipsis]\"  to include a power of 10;
     \[Bullet]  or an expression that evaluates such a float; 
     \[Bullet]  or a string for which  ToExpression [\[CenterEllipsis]]  evaluates to one.
2.  Repeatedly clicking subexpressions might help you find the syntax error.  
3.  The ", Bolde [Ital ["Math paste buttons"]], " subtab helps ensure correct ", $ItalMathematica, "
     syntax if your are entering an expression such as  N [Pi + Log [2],  9]
     or a string containing such an expression.
4.  Use \"*\" or a space to indicate multiplication.
5.  Do not use the ", Style ["\[EscapeKey]", Larger], " key to enter special characters such as  \[Pi].
     Doing so will close the AskConstants Window."}];


(* ::Subsubsubsection::Closed:: *)
(*$ProposeTabNonrealInputMessage :*)


$ProposeTabNonrealInputMessage [inputValue_] := 
  If [InexactNumberQ [inputValue] &&
        Abs [Im [inputValue]] < 100.0 * Precision [inputValue] * Abs [Re [inputValue]],
      Row [{
Bolde ["Nonreal input error :"], " 
\[Bullet]  The input must evaluate to a ", Bolde ["real"], " float,
   but the input evaluates to  ", inputValue, ",  which has a nonreal part.
\[Bullet]  Considering the Precision of the real part, the magnitude of the
   imaginary part is rather small compared to that of the real part.
\[Bullet]  Therefore the imaginary part could be rounding noise that
   would be 0 for exact computation.
\[Bullet]  If you think so, then enclose the current input in  \"Re [\[Ellipsis]]\""}],               
      Row [{
Bolde ["Nonreal input error :"], " 
\[Bullet]  The input must evaluate to a ", Bolde ["real"], " float,
   but the input evaluates to  ", inputValue, ",  which has a nonreal part."}]];


(* ::Subsubsubsection::Closed:: *)
(*$ProposeTabNonfloatNumericQMessage :*)


$ProposeTabNonfloatNumericQMessage [inputValue_] := Row [{
Bolde ["Non-float error :"], "
\[Bullet]  The input must evaluate to a real ", Bolde ["float"], "
   but the input evaluates to the ", Bolde ["non-float"], " NumericQ constant
     ", inputValue, "
\[Bullet]  Consider enclosing the current input in  \"N [\[Ellipsis],  n]\",
   where  n  is the desired result precision."}];


(* ::Subsubsubsection::Closed:: *)
(*$ProposeTabNonnumericQMessage :*)


$ProposeTabNonnumericQMessage = Row [{
Bolde ["Non-NumericQ error:"], "
\[Bullet]  The input must evaluate to a real float,
   but even  NumericQ [input]  returns False.
\[Bullet]  Perhaps the input is a list or some other non-float
   type or contains an unassigned variable or a function
   that has no matching  \":=\"  definition.
\[Bullet]  Another possibility is that you omitted the arguments of a
   ", $ItalMathematica, " function or misspelled it or forgot to Capitalize it."}];


(* ::Subsubsubsection::Closed:: *)
(*$ConstantsHelp :*)


$ConstantsHelp = Row [{
"1.  For the functional form of named constants that are functional constants  ", $Italf, "[", $Italk, "],
     such as Apery's constant := Zeta[3]  or one of the Reuleaux-triangle constants
     ", Defer [Root [4 "x"^6 - 12 "x"^5 + "x"^4 + 22 "x"^3 - 14 "x"^2 - 4 "x" + 4,  3]], ",  choose the function  ",
     $Italf, "  in the
     ", Ital ["Choose functions"], " subtab, together with functions and non-algebraic constants in  ",
     $Italk, ".
2.  To learn their names, try the \"On-line Encyclopedia of integer sequences\" link
     in the ", Bolde ["Resources"], " tab.
3.  AskConstants does not implement:
    \[Bullet]  physical constants such as the reciprocal Fine structure constant \[TildeTilde] 137.035999139,
    \[Bullet]  mathematical constants known to fewer than 16 significant digits,
    \[Bullet]  decompositions of rational numbers such as  ", Defer [1729 = 1^3 + 12^3 = 9^3 + 10^3], "
    \[Bullet]  named constants other than GoldenRatio that are expressible in terms of fractional
       powers and functions or inverse functions in the ", Ital ["Choose functions"], " subtab."}];


(* ::Subsubsubsection::Closed:: *)
(*$FunctionsHelp :*)


$FunctionsHelp = Row [{
"1.  Rational numbers, \"+\", \"-\", \"*\", \"/\" and \"^\" are always allowed, hence also  ^fraction  and  \!\(\*SqrtBox[\(...\)]\)
2.  Choosing  Root[...]  in Basic functions permits more fractional powers and elementary functions.
3.  A result containing a chosen function or named constant might contain some you did not choose.
4.  Inverse branches are numbered beginning 1 containing the origin, increasing to the right.
5.  If the float is an integral, then choose functions in its integrand, limits & antiderivatives of similar integrands.
6.  If the float is a sum or \[Infinity] series, then choose functions in its summand, limits & related anti-differences.
7.  An inverse of a function  ", $Italy, " = ", $Italf, "[", $Italx, "]  is particularly appropriate if your float  ", $Italx, ":
    \[Bullet]  is a solution to an equation in which  ", $Italf, " contains  ", $Italx, ";  or
    \[Bullet]  ", $Italf, "[", $Italx, "]  is proportional to the derivative of some  ", $ItalF, "[", $Italx, "]  and  ", $Italx,
     " makes  ", $ItalF, "[", $Italx, "]  stationary.
8. Non-monotonic special functions such as  CosIntegral [", $Italx, "]  and  BesselJ [",
   $Italn, ", ", $Italx, "]  are slower."}];


(* ::Subsubsubsection::Closed:: *)
(*$InputTips :*)


$InputTips = Row [{
"1.  The input must be:
    \[Bullet]  a ", $ItalMathematica,
"-style real float, which contains a decimal point,  optionally using  \"*10^\[CenterEllipsis]\"  or  \"*^\[CenterEllipsis]\"  to include a power of 10;
    \[Bullet]  or an expression that evaluates such a float;
    \[Bullet]  or a string for which  ToExpression [\[CenterEllipsis]]  evaluates to one.  (Use this for inputs such as  \"N [\!\(\*SqrtBox[\(3*Pi\)]\), 7]\"  to prevent conversion of their ",
         Bolde["display"], " input to a float.)
2.  Click the input field, then type or preferably paste such an input, then click the ", Bolde["Go"], " button.
3.  ", $ItalMathematica, " displays floats without some internal digits that help AskConstants propose better candidates.  To provide AskConstants ", Bolde ["all"], " of the digits in a notebook float,
     copy  ", Bolde["all"], " of the displayed float, or its  Out [\[CenterEllipsis]]  label, or the name of a variable to which it is assigned, then paste into the AskConstants InputField.
5.  At least 7 correctly-rounded significant digits are usually needed, but many examples need more than 17.
6.  To obtain more than 17 or to obtain more helpful ", Bolde ["Arbitrary-Precision"], " results when you cannot obtain more than 17:
    \[Bullet]  Use the optional ", Bolde ["second argument"], " for the  ", Bolde ["N[\[CenterEllipsis]]"], "  float approximation function, and
    \[Bullet]  Use an optional argument of the form  ", Bolde ["WorkingPrecision -> \[CenterEllipsis]"], "  in functions such as ",
        Bolde ["FindRoot [\[CenterEllipsis]],  FindMaximum [\[CenterEllipsis]],  NIntegrate [\[CenterEllipsis]]  and  NSum [\[CenterEllipsis]]"],".
7.  If you type digits directly into the input field, then you will obtain a less helpful ", Bolde ["machine float"],
      " unless you type more than 17 digits,
     including any trailing 0 digits.  Machine floats have no helpful Precision estimation - and only 6 digits are displayed after clicking Go, unless enclosed in quotes.
8.  If your float is from outside ", $ItalMathematica, ", then include all accessible computed digits even if they are uncertain.
9.  Use ", Bolde ["` NumberMarks"],
     " to include Accuracy estimates in a typed float.  Enclose the entire input in quotation marks to type NumberMarks in the InputField.
     Examples:  \"3.1425`3\" to estimate 3 correct ", Bolde ["significant"], " digits.  \"3.1425``2\" to estimate 2 correct ",
      Bolde ["fractional digits"], ".  \"1.25`9\" to estimate 9 correct significant digits.
     ( ", Bolde ["`"], " is near the top left of most keyboards.)"}];


(* ::Subsubsubsection::Closed:: *)
(*$HelpForEnteringNonFloats :*)


$HelpForEnteringNonFloats = Row [{
"\[Bullet] Click the input field, then enter your non-float constant such as  ", (2 \[Pi])/(Sqrt[3] Gamma[2/3]), ",
  or a string  ", $Itals, "  for which  ToExpression [", $Itals, "]  returns a non-float constant.
\[Bullet] Then click the \"Go\" button.
\[Bullet] The mathematical paste buttons help ensure correct ", $ItalMathematica, " syntax, which
  ", Bolde["C"], "apitalizes function names ", Bolde["["],
    "and uses square brackets to delimit their arguments", Bolde["]"], ".
\[Bullet] Use \"*\" or a space to indicate multiplication.
\[Bullet] Do not use the ", Style ["\[EscapeKey]", Larger], " key to enter special characters such as \[Pi].
  Doing so will close the Window.
\[Bullet] The required time often increases with the Entropy10 of the input."}];


(* ::Subsubsubsection::Closed:: *)
(*$ProposeTabPurposeString :*)


$ProposeTabPurposeString =
"The purpose of the Propose tab is to propose concise float-free
     constant expressions close to your entered approximate float.
\[Bullet]  One of them might be the exact limit as you compute more digits.
\[Bullet]  That is for you to prove or disprove -- or to believe or reject
   on the basis of computing and entering more digits.
\[Bullet]  The goal of this tab is to construct one or a few plausible
   assessed candidates as starting points for those efforts.";


(* ::Subsubsection::Closed:: *)
(*Images for the About tab :*)


(* ::Subsubsubsection::Closed:: *)
(*$ArchimedesImage:*)


$ArchimedesImage = Image[CompressedData["
1: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
2vSQNjVqSEtauNl2fq6dn21NyzByEjpOiTOtNihqjStaYtK2mKwnSzVaYJwq
MW8oMs+X2XbXB0/35V4fL785UXZ9rOT6SPHNseJnFupf2tb2wnITQueD5bqX
t9U92LruwZbq5zdXPDtf9txC+ctL697Y0fjO7vb39na8u7v93d2t7+1pe39v
+wf71n+40vHR/k7orR1NVG9ub1yjZuidXTi447197W/vbnm4Ha5Y88JS9b2N
pXdnSm9OFl8fK7o6Voxa48ZE1Y0pUllcmqw6N1SCovhQZ9b+Nphexu7m+M7G
+J7WzD0tSbA3XegYyTUPZxp6M/SdcVNTSFftkhea+Dna9KQ6JSLnBKWciIob
VvMjGnKrI70rnCyhMSsZqEi1RSOFTcaxSolQ3VMxJVgaSn46xMSurKZLJkLG
1YgTsamR5AAhQEUSbyZEkqQdp94gpjO2aBGYonZVxKZEh87kQsQ9bEq6f20A
XVu6smt32Zce7ST+xg75UuSwCa+j+RstCmicJXmdTUbltkicBuEqbHqYG1kw
g3LAoeJCTua2ZcIeyiglmasK6sUJqzxpV2RYxFFdesyQlmlKz7Hx8u28ArS2
tDxraoGFU+3htkRF3Znq7kxlX6ZqpEC3odw2X+nYVuvb2xQ83pV5ZbTosZmq
x2er7k5XQPc3rntxueXhrvUv7yBp2Ks7G1/f3fzqroY3djc83F7z0vI66LVt
9W/tan53z/r393VSwD4+0AX94WA3K+zES4AQKL6zq+Xtnc0Uv9e3NoI3vPTB
/o539rS8uqP+5a014PnZpaqnNlc9vrH85lTJ1bFCfKtrYxWoZy+PlV+eKLs8
XnFuqPhYb+7BjiTq2YMdmbuboyvtGXtbM7as828osU0XWaYKrOMFttnq8FiJ
rytpaQioql2yMrukyCrOt0hsqWTAxC4gFauHWQNMqNOLccHGbPKoVQbkQBRI
M4k4RiGHDitBDkWKXc6hQp+9OW51cY5pNdWJ2jVhqwoBEWZFBdsheThjF8Qo
ADbDFYWNiiRFFjk6dD/l7XcjJKzYkLq2qqWZISWNHfsFYGGnloZR8IY+dtK8
DrYGc6MWB8xsWh7lzWvENSKiK1HtynSKHBnLVXLd8nSPghvQkLuTkmZp0ixO
GvgZhvRsEzffyi+084tsvCJbeqmdV+nkNvj5PUnZeIGJeFqJZa7CvqXGs7XG
vacxcKgtcqoveXkk79ZUCaLnE3PV9+fXwdzA2ys728Hbw+0tb+5tffdAx/uH
O9870Pb2vuY3djdB7+xpfX9l/Yf7uyGg9cmh7k8P91Ch/4eDYK/z86N92ET/
g31ArvWdXc1v72yCXt/e8O7eto9x2OGe91fa8W4Pd9a/vLMevD2ztO7Jheq7
GytvTZddnyq/OVNzZ2P95bFS0p9dd2ND9aXx0jOD+ScH8k4OFAA8aG9rfFtd
YKnaAy1UeWZKnSi3J0q9PUlzc0hV65VXeaSVHnmZR57QpoaVHI+U4xJzXGQO
gvyAdCUD0hLwRu7d0PIAGLU4ljdmMDONWhzLG+tv5KkazLgBXA55DiUNLudl
zjWZIpelQDh98DE4WNypiTnU6CRcWgib6NMlUnQJwe9I+93tqP8cT1lbo84G
AbaIS0d5o/GU5nWrw7/qNKuOUOcwEnOzarhoXUZR2I5o/mhlIH0mAzPUxt6Q
ElTzEB1ien6mUZRjFlDYShwCYFZi45bb09d5hI1+UU9cPl1kWq7x7WgMQnua
Qytt0QNt4QMtoRM9iYtDOVfH825PF9+fr3p2S91zy/UIow+2tr68o+2Vna2v
72p/e6X9g8PdHx/vfXd/6zsrLe+stL13YD1o+RQ4HRkgOtz72ZFe0PXFsX4I
HWyCtK9ODGIT+H20v4Mit6p97Z8c6f3q1PAXp4Y/OtL91krrq3uaHu5tenVf
y6srra/sbX92e/O9zbW3Z6vvbKy9O1d/daL05kzl7U3rbm2svjZdfnGs6OwI
0anB/BP9+Ye6s/a1x1fWJ+B12xtDcxUupHOj+fbeLGNHXNsaUTVH1PUhdU1A
XRc1FHsUcW26U8Sx8Dg2AccuWZ1ORcRkbhdCwoY6lE/DKLwOjKFFn7mlaPUl
9398OAZEnwKxuk4YKbdBQnmzaQRGObkVAjJLOSAKgCU9eopZtt+UEzCjxSZ8
DycXrmKVp/4zaWtvvGKXXK5Z7vsfJk8h9AEbRHM2Gm1pH19Jr+BYtFzqcsAM
IdVjlgTsioRHF3Wq6WJU1pBRkJI7jk1y8lQijSCo5EZUaVkGUYFdUuyUVLhl
63zyWp+0xiup90naouq+TB1izfaGwOGuLAQj6PRA3tmhgnODeRdH829vrHhq
se7pLbXA7KWdTa/sbnlpJ3G2hzs7XtvT+eZK1zsr3e/sX//ewc4PjqDfAuQA
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
++7q7DcXpr49P/X9+YlvmJENZmBtmIzrnhhA4fnDhQl4F/aAQ8rbT+cnEHlB
IJD79coGomuzv13fiBa8/XB5inoXoKKYASoaXmmtyu6B2M0PDnejXIW5Iaq+
sbL+xW31zy3VvbS9+fmtDfc2VTw2W/Hk5lq43NWxgjO9Gaf6Mk4PZp4YyDza
m1hZH9ne4Fmscc5VOzetc01VOIYKzeuTyq5cw2iFtyvPUhuSrQsr+ivDU635
k62FLQXefI88ZhEEtOkIr1GLJGaV0uQKeTXOF53oscg5VLResCm4dM0/bVGf
0tkEJHgIpuQYVSpyOcCJchUdcEhzP9ohCxfN4ohdnnCrM3267ADhzaETmZVc
ozyNLiuiUwbsjX7kHoRHo7jkJbcaCrpUBDmLlMJGhtcsCKBSOktFZ94BGzOn
pmCQW8ObadXcABvk0qd4DKkhc3rCKcrxSGri+tqYtiGub8sw9GabRwodG8o8
myt9pwZKLoyU3Z6te257x2sHht44NPTyXjJw+vaxgU8vTYKlr67PgrqPz4+h
xR7w9s3NTb/cXfrj/a1/fHzLd7fnwSH2f3R2/LNLDJMXJr8AaYikF2eoxf14
fvIHBifARo0L7bePeANpPyPfOz8BZwOEv12d/dO1jYCN6o9XN8DcgBz09blR
gETRgpUBQoiFkC0l0BLwTiB/W//WvvXvH+p5+2DXSzsaX9za+Nqe9S/tbLk7
W3YHF9T2lpd2td+eKQNvJ7til8cLLozlnerPXGkPbq11bq6ybqlzb2sOLTb4
Z9d5erK1bQn5YJF1oNjRHFdX+CUVIRVC6kRz7khDTn22I2kVeNUcj5ITMvKj
DG+AgR0CBTYoOQESoqpBzD5IX0ifQQre6NP1gSVYQlkBfwOZDnUaAKPDI+gw
pauABQ/7Q1ZpzKnM8GiAHJ0IIBMTEo5emkJX6oadWrrKCPshgIeIuTqTxZib
3yang7cQSAta5SGbgogZ06N3eUeYPlnSxpQPxEgNQquOZ9GmWbSpiKQWDceM
ulvJcShhwmSlbp5HDNg6ckzrswwdSIDzbRPFjrlyz56WxMXx6nubW1/dP/ze
iakPTs28f3LyvVOTH5yZ/AoB9M7id7c2f3xh8q2j/a8f6f3g9Oinl2d+fnzr
l9c3fXl14w+IpI9v/fzq7Idnxt4/M/r2iUEc9s7xwU/PT/54feFPd5Z+u7n5
j1c2/eXG/F9vLvzL7cW/31n6l9ubwRJg++bMyJdHB745Mfz96bGfzk3+cmH6
5/NTP5wDcuNfnRj6+uQwjPG7c+M/MHXHj5dnIPgbeIPQoaR9d3EC1AEwwPbp
iX7kdazpQV+cIfr6/Djql8/Ojry5v/355dqnmZn9Jxeqn9vWAAMnA8IbK2Fx
5weyDq8PHeuJnRpIHu9PHuqK720L7WwJgre5GvdMlWu8zDFaZp+pCczUhfqL
7LC4QqegLKTqKgtsWF802pRdFTdFzdywkRs08DxachsIqgMg4TeLQzZZ1KkM
WSU+I6kajBIy1ObSCEMW1H26oFkVMCnheGou+d9JAKSAWQTkcKRNicCaArqC
FknYJkOLN8QBsDuI1LkmEfYjIQRy1MfYm5TJ/0GAWWtEOWTuWebRWVECm13h
sUohYAbksBl0KCMOFQTYQF2Qub/bz4zuhhnkkHBCoA4ZnUPDI6NtujTA5rMJ
3YZUh4bj0hDYAjpOlkNQHpQ3xlQgrQ1tXDVZ4lyqC+9rS54ZLrkxU3tvc8uD
3T1vHRn54NTUR+c2fHJx9pMrmz69uunjy9PvnRt7+/QwhM6HFyc/wrm7vhH6
5rHFn5/a8dOT27+4Offu2dHXj/e/dWoI1AHIb24gl1v65dbSz1c3/Xxp9pdL
sygc/nSNgPeXG3PgDSESyIG0H86M/3h2AryhRR9hF6TBD0EdYvGPF6cAG/QD
I6AFgTGQRh2Plg+wO1gcOpRGlknA9unJQbjcH473v3u465VdjeDtuS1I3qqf
XqxB9f3k4jrAhizu8kjehcHso52REz1xBNYTvRlHOuP72kK7moM7m8PbmsM7
2hLb2pPLbeSOsKW25My6UG+hvT6hR8iAWvKdQ7UZQK6l2F8QUsdtIp8+HQER
l7xTlx60SqMedUZAD978JqGLDsKr+D6DNGzVgDcqpHPMkC+Hjr8hhYMTUtio
s1HAWKOjfYRU8AaLA3JWDRdil23AglBC0ihJlw/hJTrpSd2MiZ5in1USsMvC
dnnEoaCCZ+JtV8f0GNFHSibsWrKOxShzaARWZZpVmYJ/ndckIM/QsPD9ekJa
WM9JmFKLPJLaqKozU9+XbehOqAezdMu14cPdeedGy1CKPrHY+uRSy7M7Ol7Z
3wdnA2mfX1/4/ObmV08MPre/48ndLS8e6v7g8szXjy9/+8S2r+5u+fTm/JeP
LX1xZ/Hjaxvfuzj19rnxN06PPDw+8M7Z8T9cnv329tJPd7eBtx+uzf9waeMP
56e/Pzv54/npXy7N/HoFgXIT9Os1RMnZXy9t+OPFGTgbeCOwnRwBbDA3HEl0
ZQPVz5dnKG8sab9cn4VoBQFPA2k0tuIAkEbBw57Pzwx9eLT7nQPtb+5reXln
w/PL657bUv3ittoXkMgtE9juzJZeHc+7OJx1YSgTLaLq6f7k6f5MyttKe3hv
W2RPW2xnW2ylJ/fwYMlKf+HOrryt7TkLjYnp2shYTWSgKtSYZSoNyTtL/dvG
6vbMtm/sr2oq9uUG1AiIOjF4Sw255BGP0m8nsLl1yM3SiNY8vwvmBqMDfjZF
GgSKKG96hFd1GuzRZxKhY0biB/zgbGAPvBkE2B+wSGCelBbKGwvb74SdVJRD
CKT5bVLAFnTI8Q54H1waeEO4KEkadeSeUGblHhd9v14Us6ojZiUqIBQ1iPu4
FmDCHn06StGwOT1sTElY0pKW9BxbeqlX0hhVDhdYZ8ud8xXe5ZrA0e58wHZ1
suqJzU0v7up+bnv7szvaH+zvfuf0+MdXNn5ybe7jq5vu7229ta3u9vb6B8f7
/3B74ftnd0PfPLXjo5tzH9+af/3c2L09LTe31j59oOO1s6PvXJoCfp9en/vy
5uZvbqGCWPj++vyPV+Z+vLzpxwsgDea2GSEVQmz9E3G5TX+7sfDX6/O/XZ4F
cvA32B38Dfrz9TkIx/x2nZAJ5ADb9xenKFQ/X9vw681Nv92aA3LYA2cDXSAN
doeWFrA0sH5ysv+9Qx1v7G1+uLMemAE2IAfwXt7V/GBHI/wNvF0ezTk/mARv
l0ayLw3nXhzKuTCYQ5DrTh7tSh7uyjrUlb3SkXWgp+DQQPGBvuLdXYXbOwhy
W9py5tpzt/ZXbGjLbcm11iZNE625RxZ7z++f3jLe2FmXkelXOrQpyKL9dpFd
n65GwqZarRfIbSOrj/z9xz3CzEOnycoxEoJNCJo8i4IDrigDTi0XmxDAA3KA
zctEarwKARWIXXD7O39ba3S0CKW84W0JXcw7rL4PI6SdpPNoGJlMAeuFzL23
srCBeeazgdzfx6yzSiF3KOtS4WwJU1qeQ1DoFBU5BBUeSUNQNplv2dUYPt6d
f3649OZ07Y3pdRCq0YcrAy/t6X6wt/uVQ31vnCLkQG9emHj2aM8LJ/rfvDz1
6b0tn9/f+s61Ddh88mDHnd1NaO8fWH9zR/2tnQ0PTg1+dGfhq/vbvr6/7Qsk
e5c2fHJpw7fXFn65s/Uvj23762Pb/v7Y9n+/v+v/fnbl/33+wP98eu+/3dtB
qfvvd7b+/daWv1xb+O3ypj9eBHUbfr64AcH3b7eWoL/cXPzzjc2/XZtHBvjj
5VnwBjcDUT9dnQFvf7o9j5ZaHAwNLdij1QTSOZrRfXSsh5obkHtlV8OL22pA
HeXtpZ1Nz22re3yuDP4G2Chv18fJ1Oql4YLzQ/nnBgvODhWcHio6NVR8aqSM
3mx4oLd0f3/Z/v7yfX1le/rKN3cW7JuoOzjTtHF9bkOOuSqhHarP2Lmh9fDy
4K75rsneypoiX9yv8loFdmMaMmqXnsxnATYYSNSuIYGJeVqahofKlMtMbzHL
sI1C5G8QJYoigQ4Yc2jSbUgL/wveqImxyLGYQYieSM9CThVatkCgJsm+FUky
HQoamtGuHUwmK/1MsoBGHNYrmP8fB5lA8cClUdGQJ+9x/GpO0phW7JaUe6UV
HlG1V9IUkE7mGQ+2JK6MVd7b1PjMUju9r/OZLc2v7Ot9eKD/4eH+V48Nvn5q
GGYF2N64NPnBnfkvntnx2xtH//TW8Q8fW7i2o27fUHxrl397d+DkxqL7hzpe
uzz50d3NOOab53d/+9zub5/a8dmthQ8uTn98YfqbG5v//MSu//7Mvn97et//
9eyB//Xg6P9+9QT0v1489D+e2vNv97b96+Nbwdt/u738txuLQO7PV+ehP12b
//P1hb/eBI0Etj9dX2B5I/H0wiT1MWpxf7yxER1atLLzDnSw94NDne8dWA9z
e3t/G/TuwfVvrLS+vLP+ha0Euee31r24vQG8PbFQcW0iH/4GwdyujxVdGy28
PEJWCF8ZL7s2WXV1svrSxLqLk7XH+svIs026iw8PVB4crFzprQBvO/rKwNvJ
zZ1H59tnWnMq45qigHxdjmXvXMelYwt3Luw+sG2ku6WgrMBTUeRrqIyVZrly
Q8akV5sTNCY9RlicTsBRpJLxN4CHPHx18SSZr0diJkKMA2yAAXGTBjuwAX/7
r+Lp2ohJRX0MAmMRtybm1aEFdagOIPI+Bh6uAshj5Aes4ogdpQdIk/1DsDug
aBTC4vxqUUhHn4AqC2pFHmWqU0bmi70KTlDNyTKml3lkNUFlbUDeFFZ1RtWb
Cq1HWhNXR8uf2Nj4wnLnM4st9+cantva+uKuzocHet84PvzaieGXTww8RHVw
debjxxe/fHbnd6/s//WNo1+9uOeZ4737xpKL7e7lnsChiewrO+vevDbz42uH
/vruqe8fHvjk/jLg/Ojm/EdXNn54aYZkcTcX/3Rv59+B1tP7/sfTK//P84f+
/weH/78XDgK2f318O/TvT+ykvMHigNxfr2+GABsE6qDfGP16dQ68/XRlI+rT
n678Y2AELgfY6DgwgiyQA2x0qASFKp1FBWmrS0cOdby5vw28IaRC9xfKnl6q
fGqp+rGNJZdGMs/0Rc/2k+WjV4bzLw8VXB4qujZWRlcI397YcGO2kfK20ll0
sK/8cH/1vp7yHe3Fy+35e4er94xWHZ5tOb3cs2+qsW9duDSsyvKINvSWndw3
8cytQ49f3Xt03/TyfNfcdNvGyZb+1pLm8kRVrr8i21sQcXr1EhSkUg6ZzHJr
JREbWbsL3pjhDhS2AoDkMYsceiT5fJrYu01I+7nYpHIZBdhPsn2XMuJWoRyg
sLFBk3U8L2zKpaa8weIob/A0ZPuAzaFNQ+YP5IIWghxdsxdGJQLSTCI/ChMk
AMo05hlH9CGo0gDcmOHNJSWwRTWcXDO3yiNtCCqaQ4qOuGY407Bc7jrWFr/Y
X3RnGj9727NLrfcX6p9dbnl2ewt4e/PU6OsnR146Rnj78PbCdy/u/fTJrR8/
ufzhE0svXRw7t6Vyx0Bk/0TW1V31z58devXqxBfP7/rbh6f/9v7Jz5/Z+url
sQdnyB++c37io8vTpHq9Mf/TrcXf7m752z3E063/em8HAPtvj21BFofc7O93
lrGJFvqX21sQPYmhMaQRxq5sAmMgjYrl7dcbc8TQaOFwkVCHnYS9KxsQTz87
QXj78vQIMrqPDvfQpSOv72kCcvC3t1ZaH2yvfWax8unNFY/PFj0xV35vU9mN
qcJzAxknuyOne2OoTy8MokrNuzRYCN5uz9bd3dT02FzLnU3NlyfrTg9VnRis
OjlSe2x43Z6u0uXm3MWWnJ39pdv6S3aPVCOkrkw3zHYWtBY5S2Oq7pro4njt
mQPTdy5sf+L63hsXdxzcPTo71jDeVdlRk9NQEm0qS9QWhnMCZoRUuBzKUqea
rGojK9wMAuThDnUqSgbYFywIMRQiXoSkziCgpAFCyiGABG+ALebV/K4coAkb
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
imFxdeIMCT0cKVyVIB68dVXRSgpD0sNN4n210kONorw0fWyV7XXWWaspOGmv
A1q+xtuAnL/RNgh9Sqbb/cx2ILuDqLtT92zS2LUeqEDqO9eR0xjkF0av19qz
Tn6b+QZESSRm+gc3/nVM605b3b22+getdQ+aqisbHMQ/Zyt4O7T9J0TSvYqU
JcYFO9UW5XU3sqtkqTJ2ZCk7ooYX0yKKqy0IFsbbFAbq8UP0quIte/NckUvP
cPxOFEdca0i73Uy71ZQJ3W3NRt5Oji2lZjmHWdQBzvJAiQyNjOtSkXSkEHo1
XECQe9qXtyb4HpD7NC0Ae/jCk97cu23pgOppZ+6Lnvw/L5REVJWP4j5uz35I
3YKaQV2w20qj7tLtyKHUlveoJQf5G+Lp3fo01KfXqhKulMeSmYWr8svu0V6p
jEb+dqEi8mJVHCLpTIH7NNMNwZTwNsbwQLHQm+PSlemCSIritDLKFKTB4spj
LMAY31+b46PB9dVEh+evy/XTEQQaQIW+2tkuB9Pt99HdNYpibJpzfBAa+oRR
y030G5Nlr1a7vlwZ/eX6JATYzg7Ilts5lycqnqz2XJ6oOtolvDxV8+bq6Meb
U/A3hNSHp4ZODlePN/IHqlj9VRzwVi+iVXFTBdmhQK6EHQtbay4GTtGcDH9+
VlAVP6WtjA41yjI7Kujwt67qvJle4UhLgSjXK95fJ8JDNdpbK8BxH6pUR134
2wZPQ0UfyuKUgsx2QAFy+Zvv8DPb7mO2zdt0K+GNutlKfg8XOuRAe3IACEoA
kCa/dpC6zFdTmTq90PDAZnP1HXZ6+5wM1e0N1Sy1gRzMbbPe/u0aypuUNykc
3KbgYasrZCT0tcnqyrPZ9GB2rr+EGcxJ9+SkOAtSDjPDjQuC9ARhBrVJNn0M
j3G23zTXb6Uo/EpD6s1mat3sz7UpNxqo7YGoE0m1+Kyf8XyAiTSMzEyBOngd
lZWNFMLi1lwOJkZgg5UhtgI5fIT36COqPmjLAF0vexlvB1nvhzkQdQ+gfBQX
pJFprLWpBHSo63drU25Wp9yoSr5VkwreoBs1SVcr4i6WRF4qjUKZcLkiilrK
Wx55vjziXFn46ZIIONtojiM0w/amLpfkBYwzPfuzXbpoTi3J9ihOS8MMy8KN
qmKpErUm0bY4wgSw5bsegAo8VAq9NFjemmwfbaQcLD8duodatrNKgbdOabw9
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
jE1dbv7yrPvg7NjB2aFTmx3Tw2qfo8mpJZllWCWriF+bgk1DULIRSmzckKQq
uDVBK3FNW3PSTL3QwQvuhNwhPN/GP+vmnHayTtuDZ85eaefe8PNudQUPOHvY
xw8+QhoSPu5jvBpqfDfc+G6M9X6M/3Y4WC0fd/Pu+bi32zk3vKxrnsbL7roD
F/mSt/agjXC5g3DNT7reSbzVRbnTQ7vsxu3pkacN5UHk2skHVvQFQ9V1B+FR
J/1xZ+M9D/gb+baHClH7elj4cpB/yBsMgVA9flw2f57VQkV90g9/jKAe9Qoe
9PLPeWi79tpNIwRo9XorZllbNSsvGxEW9bJyfPVpPnpGgJXXw8x3UVJtNfFW
QoKdmtKKi25jZI8p0fNmyqWRlqcb7bfnrWBu95bdj7c6354Z+PHmwr8/O/GP
V3vA2yFs0B2At+enhl/sj4BenRl7eXr8xf4/Mbu/2fdPbfddW/NvjRuX+tTz
AdVEu2y8TT7e0TLklvdYxV1mUcAh7XfL2kxctRDHpRUySbkKNqrN0ASwTfdo
J3wt0FVZ2FQKMgp4A9i8rXW9XkGPm6eRoBsoqUxaWj0+phEfDX0B8hR4E5MT
gbfmmrj/L29gbsAbNjcGkxMdDMqsyKpMIA0MDUwvtDT5aGVGOD4/DhiDmkAr
T6+ryKCjMmsLYoE3cnECpSSxviKFUZVeV56AL4jA5oc2YtNsLdRRn3yspwXa
6N5618H+0LXzw6c2vKM9EquGoJdU6cWVorosCjKkOhVBzEBIqqN6hGXzrcRF
bc1xLW7TSDrfyT/Txtn3sPZcTafdzOAe3a6GM076lfbgjhx3erh3e9lPhniv
JkRvpsSvxnmfpjjfTHO+zAi+mZF8nlZ8nFC9H9W8Hta8HFQ/7pXd6eRda2sA
f7vup93po98fbngw0nhvgH63v+5WgHLRVb2jL9o3ll1rI9zvhnysuebEP/DX
vRnmvh7kPfbV33GT7nhpz/o4Hyakn6bkr0ZET/o4hxX1mwX92wnlwwAPIhXy
9H6A92JU9nZGc3+4+Uo387SLdspBOe2pP+Wq2zDUzrVUDXDzfQ3pnfUZPZz8
Lma+k5pqqUm0EpOtpBRFZbiNlt4nRk1oCBeHVC9P+O8s2G7MW67Nmq7MmG4s
2J6d7Pru+vRvD5Z/u7/67uLEy9OjQNrrs+PvLky9PT/5/uLsl6vHX52B++NP
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
43yPalHb1MvGeKilQ83kZavoUr/+3qzt1brn8573467tzYbq9Zri213dlxO6
lwuSm32Na7ryUW7GlCBzW1V81V3zYpjzfloKQ9rzUf7dXua1zroHQ1zwrm+3
rX++0PnXS/6fzno/nQBudT+fdv2wZ//mhPnD1lfYTpg+n7R+3rH9sO/9vON4
v2V5u235suv69nTb92c7fjzb8WXL/XhCFTxJoUdwY1B6qa/5pKdpwUhsb8rR
EWIlFSHiytDmyjBu2ZGmIgQziNwxSWUkIAcC3lzMwl5Z9YiGMKGrXXYy1jxN
E7oav7DQy84Gudn5emoesziqqSjSzcOsd7UczHoAtg+X5n59sPX9zeW3F8Yf
nui5udJ27bgb1tvr/iswuc137E16difcwNvuuGdryLkWsBz36afdLcNmYb+B
M6Bn9emZAW09AGYXYBxCrFda2yYjwoWRVWFkl9lE1WZRpV6EsiiwbiO1zVZn
MdaqlZXS5hIlr0DNL2oVISX0dOCNXITgVIVDP4X5DSoqlAWwOGgKf/SF/2Vc
4X/wdogcYFaeFozaslQE3AHeKGWJtIrkipRjoMqMcGpFagsH02nl9bXLerzC
bo+g3drQ42SO+YVTPSLgbaKD3aHDO1tQZkmJhpPXyi/06ohgcV4dWcUsoiCP
MlARLknl/rju8U7Pp4Ox3+4d//3JxpfLM6/2h24sus+N6q7P29/u939/ZeqH
y5N35p17fvmCiTmnbRoUUYyYfE5aRH3CMUFBkoGI7BURZ40Ne938ewvqFxva
5+vyd9st35zSvlmV3hign3JgZqV5PdRYX234ICXypLrk1ajgl03Ld0u6p8P8
W91NdwKszyv670/Y/nzO9/cbg3+/NfzXq73fn/YCTr9d8v16sf2ns+7Pu5b3
m/o3G7r3W6YPO9ZvT7lfbRgfzCsfLanfn7D/eNH/y5XALwc9P+x2vFk0PRhT
3Z9QP57R355QXwg073SwJ1TYDm6BhZZmqktrpaRIMJEc5FF2yRFO8TFBWTgP
CRNdOLicuS7LXJdhrc9yNGQFxBUD8kp3U7aWEKWpiTRREyz1GfamUi2lwMIo
n3eJn+wM//rg5F+f7P1yf/unO2ufLs/d2/TvDWu3+5RnJ4zwW3xx1rHeq5vx
yiZd0uXu1u1B+3qvdaFDN+tWTTuVoEmHdNQiHGxldqvqu5VUn5IEyAFpdj66
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
q7kpZQd+zNffcNMrdjI6o1KHyRqwFSseYBvz0OBat+E7Q1rlzoM4M/ZPc/v/
+ZuBgwEBb53+DSwO/r84JXiLoNcqwjjEODf8wGh2IPvlVK+c6lcyIMk6ZDSv
diBi5eXD2smKb20utzqfm21HayVnPKzyu0VBryTsl0T8onRQNpY1LFbtrZgs
pOjzCZDZEPehlejX12aAt85h3z9dW/zu4gxgBvrbxXnQt+emvjoz/uXpsS9P
j6IN/8nap6fqn51ugL442/z64sQP12fBvkDfXZmCFz86XobrVxda8Mefbs7/
4+7qfzyy56crU18czX20E35n3f3SrPGhsvhUbBh4W7EztgL8fUHRtotzJqV4
eNR6s6h+pGZ8asL5+nriL0fr4K7vHKq8cbD09rHaW8fqrxwoPr0n8ci8/8FJ
142W4+a448GW/VbLdqNpvD1pe2zOc6dtv1BSns5KzhcVlyrqs3nZ4Qh7y83Y
8fYfi/NOpkUn0vwTae7R+PC+QP8eF23JSpk2EMdV+KocXQ1UVOCysr68hjTq
YM0lJXuqhp1x27Hl6J5JdyurLIZ55aiomVE2kop8gJ9ysoM6ml3UZ+Nh3ELg
jejm4GyDPSAXG+sXEMNSMsCW0TALpqGylR2QwGdHDWoGrRKGgIYMkxHhIFE0
Qqb0ISPMLoBNwaeY5YNeA9+rG7ZIyMCbCuopH23eIururKm35iJWgDc3Y9RJ
q1pJRRM2p+/JGzDQvEFJbbqp4G9VG6Fk7isaegt6TNHQUzJiNOy+jtBGbnc2
SGcPB+gE0HMWuBi0pHIwFh62g5yZj7FLsF4FGQor9HJRLTOsZgYhaSqZ4HJu
GR0aOaeSETCOFCKads17dLv5wMHJ/Zuj7WYolzKmYtp0XJOMyMerzvkx7552
cLagj2qJDjbSdA5cmvV+fX3+h6tTv9yc/+ed9f91bz/o3w/v/Pbg+s9Xl3+4
tPDj5cXfbqz8/tDq328s/Hxl5ofL7W8utL48Pw76K0SAM6OgDnXfXm5/cqL6
wdEivPK3azO/PrT0+8Nr/3lv6x83F3843/r8SPajneA7q64XpvW3SoKT0aEj
Uc5OgL0vIt7ychd0tMN+7o2i9nJCfLeke7LleG05+u7e/HsHim8fKABy7x1v
fHx24pPzU385N/Xu8dEXtjJPLsXuL0afWo4+txp5bMbxcNt6b8716LT9Wk19
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
lwOvLgfe20x8sJ36bH/+8wOlDzfT764m319Pf7Jd+GRfCSrjx4fznx+Hilb4
4GD2o8P5Dw5n3tmfeG0r8PSC9dkF23sHol+dLX91pvT5idwX6AG7hff2pl9Y
8t6fdzw2az2ZFc5ZiOM6QkNNamoYk/qhOfPIsnVgzcrYYyFtmgmLSmRejiyr
u/c7aRcz0ttN6yMTzodbjqcXQq9tZd8+UHhlM/7scgBCKPoPTpoebhrvjhru
jBrutszQvN2aMFyuq8+WZQdjw/uiI5uhgWU3fdKEb6gxZWlXUdyVF/WmuT2J
ETDYrjQfkxL2Jvg9UV6XfwRdDZTTM49MRJ44tXLr0NR0ymTldoXU+PEYf61u
mEyK4nr45XfF9cSKazBvYqTUpDEPdymhnPYLl6OKwzXnkbrrSNO+XdJvFU1b
FcdswhDVDICz8UmIiN4lZfWC+DSET0EXger5OIuIABXNxO12ibAeKdYvxUQV
2JyBULfTJrz9kD07sLW8UFXx0MLV7dh2gDoVZEyHmKBJP63pIgJsBT36dLdk
BCaJUH/HPUwQ3ACufz7vVQ6hq57BSP/YQXoQzSYd6iChmLnoqBYUVjMfA6TZ
RH2o4EaIutzuF4ESUtEiGgZkUq+Y4AT34/U6+TiPmOwRU21cvHEIMg4pZ+XP
pawbNW/LL83pGRk1acbP3UxK5z3923HBvT3Rdx+ovbIdgwbp1Y3wK2vB5+Yd
L8w5Xl/xfbAZ/WRv8uOd1DurkbdXoh9t5r44XP/2ROvzI9UvTzZAHx7Kvb2T
ANLeP5r94Fjm/rzl7qTq3rTurX2hv57Jf3m28NdTuS9PF/96vAQJ4tU9gWeW
XY9D81YUz1nJY1piU00dU/dPqAemdQMLBsaKmbLHRty0EZY1PbMyZE6ObFpp
59Ly203bnTH7g3XzEzP+F9cSL2+mIRRAFnhy0f3UshuQe7CivFVW36pqwOju
jBtujGkv1uSnCsJ9saGd6PCe0NCChzFhItY02JIcAwUUAItzMbGRrjgbnVSc
5ndDbImwEQ8LycgJSzHVmfnUje3RI9PJiktsGkHCehKk0am0rOofCav7AgpM
xkSte0cabnbNPtT2C+Yi0raXP+MT7klp95WtB+qWjZJuo2haL9smImqfgill
dHFJCIeAmhuXjEAXB5+4VULwKmk+JUU/iJjYiIMPfWNXUIrEVd1FQx/6uMNF
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
fRKALR/XlgaN8+POxaJrIe8Gf8sP6FNBedDKtyrZI1FTxCl36XqtSo62jy1g
09l0TBsJ4TUQONRaHhW9r0fdhjW34708QlxCyWoZBVNjwUwb1WCGVUhWV1Ow
YKFcTtvpk2bahJECvJX0uLy2dkyODEtQjSh/Sg1jBgwgN2o+zapVZzsVQDuq
x1RhG5QiKTkCsIHFgbMBaeBySVkNlFFhKwaidF8rRtFJUnOoyna8pLUWJEe3
neJ13cSq0LN0uCQ1G2BDdJ3oEin0BEVJvV/eGJQ3BWSNjl4yWJa+vcYloCS0
rJS+I6Fq8/VSXVz0IiF42rtIJhbWyKwztddBglA3Ik4uLufgHeSddzZTl+cC
C5HeeX/3pKVpO84/PyzdDbZfTvbeyymOAqwDV/Ohr+2VQf6zWeuvDpO/uZL/
+nL+0/OZb28Vfn+3/OOjhT8/XfvbG1v//PLsv3588j+/uPTfPzn5P7+88nQ9
XNIywm3IEJd0HDFfH3Jd71dcCvL27Kw9Z/u+j7NkZpZUDTPW7hmHMKvq7Bex
jY0EBblWzcCLCOitbWoGAlEOvGh/xPDuudxv7i7/4cnGn56uf3px/P1zw29u
R5+uB55vhl6cCT9ecl+bNE35WcMmWkxa2y+rG1WR8mpIE6SClDCjbZxQ0NAu
0cIq6pv7xfiYiJDRN035e8cdnUUPd3lAvZHSzYUlsyHxalK/N+7azNjzHomz
j6HuwLrlrfmYbrUUXC56CwPabEQ+FlPm4tpi0jQUkNnkbZmQ2m/m25SdDnW3
UcIUskm8FjAQqpRJEzBwXXiES0CkDdAwEwN91JiUkjWiw7kla/2YHpdVI0BR
2YqDclmxUqF5KxtpBR0xBxVQVZuVIxkgR4byNqZBcrravKGuYMQWTTh4/jvB
h3L6unEdZkiGZNDPx+X1xLyePKYhZORYaDaql2cJmmuAt9ObnYlyFrbKm7QN
o2Bh1B04bRfBwCWbeeRqHNB3Yaq8OfuowJtLCGmU6OCToFuzcHDmbqybT47I
mqLy5qCY4elBeQO5eRTgDb3XgFln7SAYmWhTF5U1TIfE58reu2eSN1bjO1nN
pJsNFjHtaDoa6tuNdO74286F27fsjDO2+ktxztOK6ZOd+K8vjP7u+uSfHi7/
/cX2D08Wfny+8rd3dv/xwbl//vDiPz648LeXR399Z/8/vL3zP764/PXN6Tsz
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
w9IJaQoOCb3JpYNi4Te7+1gmDlXKQCdPjSwkKCKPW5hT3q75QOekoxGdG4X+
zYwF3ooGQpW0rAIzokCqyiprxjW1oJwWU6UOeCuZcOXTAvqzrWHRKKEFW0OR
KxgJUE+hqoLRZRS1oBElJquqqyYFgA0qKTibuKWaSbHQtsmZtbIW9P4X4A2a
N1sv7fSAGiJ6eG8v2cojAHKmbizYmk9cH1G2ePpopvZa4A38zd9HB8CANMgF
0KcBXfBHSA2WdqytEw9e5xfQEsrmmbAMeNvKGjfSms2MenVIUnQ3TwVZU74W
dJeZDgvt63aEfSEjfDJvfX83ArD9+HD2729u/v2drd89mHv/wsh3T1f/8ObW
P71z9sd3jr9/4/xvnhx+eX/r87tr3z3d+83jje+ebH19c/Xdg8rhgMvdSJQj
iBSPKOlYQwvFxW12C5jgad1EdNqRjUNnHrn1CI+GKNuJmg6yV8y6sJD+6P7W
p69tffV875s393//8uwPHxx/9/Lwmxfbv31776tnZz66u/DutZn3biy8f3Px
jUtT9/ZGbu8lDyrm+QHBTJS/GBXM+DnjuoZBMSHKrx0Q4SGWAmyjptakuj4o
xrt6a6x8JKanjTjYSVPzgI4BLreR0R9N+ffK3pWsebJfNTGgms2apkfMSb/A
qqhX9+Ic6sZ+dy/wNhyUQEqdHXPAC4OIbpE1evXtUXtPyMJ1aZg2RYtT2Wbg
1Vv4jbaeRm07AXiT1KO8eXvxEFUmXO1z/o6Ks+mUN3T6AHibtFCghlbDwrim
DpTX4aB/K5sI0L9BFwf6xeJKp5hVefu5ecOfuiV+ykGftFFLZhKAV53uLxhI
RRMRDA1srZoOqmcMqtpR2Kpz9Jr2Ok11Oz/np/WTkA7cIgrIKYSAgLdysVV5
BWQ3oMjB2rrrPHw0BLl7COZ2RN+GGJiIrRMLFge2BhYHghcBIT0sqS+6e7dG
zLvjlp0x41ZWu5IST4bY02Fm3oHuOCtYycth1vlRyf056+cXM0Daf3rnzN/f
Wgdz++7R3Df3Kp9cy3372uL3b23++f2jf3p5/N3zc1+DFz3c/vLhma8frX96
c/bbR+u/vrvy8YXZi1lfkE2x1GNV1DoJrU7OwFs5zY5eZl9DLXpfeXMtmBuf
gRq7glULby6PpGnIwruwkPjw7sonj1a+fr4FnvbVs/XPnyz/+vnGD+8dfPvm
1q8er75zrfL8YumdV2c/urPywa2VN69MPTrOXlkJ7hWMZ0Y0Wxn1RlK+HO1b
DAhyhtZ+KTnAx4ZFxKicGpSQAmJiSEF2i7EBFTmioQWV5ICMCNRNxcRbOcvZ
af/yiGEsKBwL9a1PuI/Xk7PjFo+pVcHHqoUEt6FtOCKZzJpXpwIzo3bo4rQC
EpTXqI2T8vX1Qy+nY0KzZxEzTL00yHradhz4BjRv6CodJgK/l6iINGZsnvF0
TLtaoaWHpgudrrIQZhz1UzbahJkMxQW8Dp7wGt71UzZKxUqeMBN/oe4n9n5O
CmULYQK6OyuxbEE1aSNPWEnV7HDaH8JHKfCXVd7A1oC3n+awOvGgn84YPL05
BXhDj07lEMDTXH3kqjxiqldEdQlIFg46M2Vko5chAnX+PmpQRAPenFwc/GjA
Gwi6uNOSSquOjcBrn4Ds7SWOmNvXh7X7ectBwbyb068OiWZinUVf06AWk1Ag
BQd1Oco+HhXfX7J//3D6v3188L++vviXF6ufv5r79NXx3z6e+/O7G9+/WPrj
u5v/9N7BD2/tf/V48/N76/D87fOdX91fevty/puHi799tPrZK9MXc+7+HvqA
sM3KpmtbqQYWPSDpDik40EVDg+qSoCdDqlgIuLdDAB0CdcjIngyKL8wE7u0M
vrg6/vWz1e9fbn/1ZOHdV3Mf3ir/9o21797a+vq15fevT715qfjy1Wn03320
Aw3eo6ORG9v9l5eDF+e8JxXnuZL1XMF2UnKsJKRDGoajC5oNxM5FrDzEI8LH
dA0RHcOvJAF1zj6MS1QXUtGyzs7pfunCsHZp1DiV0uTi0plR485CeHHClQwJ
ADZlL86paxntVy5NeDdmw+VhvUvbbBBRPfrWpFeYjUgHPQKXukndg5d11Bj5
FPCN6pV2qhZEw0R0rYimGXF3I0Mq2rS7c87LqtgawIjAwUCzTvq0nV7lDVQ2
oY4HBEJY+AW2gh5bhQ3+CCD94mzV2lrNC4Dc6YcIp6SRKnbKtJM246L3NaNL
K6Fnk6HbYbCnA27obAI0bOgBRxwomriqoHRCwwaeZuPhQECaX0IPSOs9vSQg
zXR6LRFY1oC6FQQv3BychYX+dOitsr0kwA9cDgorOuPAJcJbzMGpG9K3rQ1p
jsqO3XHD2rAceJuOdlQirWN2csaIKzrq5wJtu2nhrXnb94/n/9c3V/+vH27/
+HzlxWHs3ZPB757O/6fP9v7+ydbv35r/3RvL3z5b+eTO/Ic3Zz+/v/TZ/fkP
rpefnx/+9cNZyI8fXSruD6mTQvKQtHVYzRPgESenYdypHHfKJQzEzCHFNGx4
17iF4DnkmIKW0jAgvi1EBDcWg092468dJD54NffbpwtfPZx662LyzQupT28X
v7g39eeXOz++vfPycuH5UfaLu0vQQH71cOPp+cLDo9EHByN3doYuzPo2s7rt
UdOFaT/0qAU3Jyih2HowZg561oezDx/WNLgkeIcE7xTjPDJiUE1LGFuH7R0Z
V3cu0Ds7rJnLGAr98tKQerniXig7soNym7ZJLSL6bR2TY5aFknu+6BpLKExS
sl3V0O/hDgf6RsKi0bDUqawXtCDSdkTHw+o4OHgrAW/SBnR9tQpSaj16aFJM
RCha2uZ9HQse1rSjARysqipa8ARDgydABW0btHBQWIFDwA84PB0hIcCnocZo
JlQ97ZfCik7r/4xf1fombaQpB2XGRRO3/gSbAj3EEq/nkKr7FKrd2ukGBHTn
y6mgpOIdfALABgUUwHMLySDAzAzvIzbKW0hM71e1gOCFC/g8tW7gzcXD27vr
gDd0uoFHgr8BDm1dtcMGJnRu5ybs22PauTi/Euos+ZtLgcaslQi8lT2Nq/2c
KxX9O8fJ//rx2X/95OiH1xffOhp44yD6m/uTf325+ad3Vn54a+5Xj/Kf3it+
dKv0xvnRJ2czT09GXjs39P71wv2t0DsXh7+8M/HeceZwSJESEYakjCFlp4qB
9Cu65mOmSb9K3YpAlM6Yu4CEkISUkFPGzC0FW9uIhjrv67q77H95kn55Mf3x
tdFf3S58emP83cvJN4/73zwZeOt86st7k79/feWLOzMvL+Xfu1T61a2Fbx5u
PrtQBN7uH47A88bmwH7ZvpLWgjbHTIspzWRMMu7rGTQz3RKKkVur7kLsYoJX
SYsYmmP65oi2EQiMG9r6rayko2s0KCwNKifT2vKwppDRlLK68qhhKCpJ+Huz
A8pixgAldcAviNg7dH34mLNrKCgYjUqyUdGgm2uVkqUdiKoL0XQhei5G312j
ZKKwKVtQcwPkjC1IqBeXN7XAj7nka591NYGJAWC/FE0gbdpOBcHrMXUNpAZg
7PRzqEAa9HXwR8Dv3/JWZaxK17/jreIgAmxzXhp6fDq7DpxN20WonhMCzgaw
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
8DbtJS+E6hfDjLkAbcJBHDeisOXN+LyJDLxBPf3F3H62OJQ6CKrVgbgpdE8E
GiWK5rq8sVbDxlalbUdhA+RAhk70SF5QNZ86uATgDWDzCqgAG9TT02FbAuQF
8DfgDQQWB9+/j4eNiigJKSMEn9xFAN4sLPS8HRA0qyF5Q84rWs5Yt0uepYxp
M+/Yn3QdTjp3S+adnB4iw9my4eF+HEh7+8ro/d3olUUH6Naa7/a6//5W+OnZ
wednkx9czT3eiZ0ZFi3HudNBXkzF0rYTeojoqQViOqJqQteop9StGwOqG9O+
x0vRexOuOznz/XHjm9Oer/Yzn+yOvFgduF10nk+q98OSLZ9g2dY1q2ud07GW
zV3brr6LCf29Me+TUvhO1n0pbtx1yzdtogU9Ny9pSXQQ7AzEBP4GHR0dMbXW
mNg48Dp5E9KNR0QMxCtvBcYeX5p67fL09d3sZtF9dia8Me46k/ecnYtf3cou
jrsyYdlwRDEcU6bjqqCDZ5Y2uFRtQBoEh8khS79TgJZaG28srgEa3Yb2uEeY
HdAm/CLgzaZtAd58ZnbE0x3zcaGYeuxMr6PN72ozKrAuEyVibwhZ631avE+H
HbDSRn2tcTU5KKnz9CIBES6upCdU9ZDgfHwcyMOrc3fXurrQqhoSYvqlxJQK
3SVatlFnfQ3TnnooqZNOEnhaxU2c8pAmnPiCBd0vA7AVrcSihVwwk0qoCD+P
h5B+mTatzt2fTt/DR0/nWE9HgJXMGhAUUCijwBuQZurEgcynu1qgc/ulmPoE
ZPScdiHldKqd5BOACOhuZTEpJqX4e7Hwlqny1i9rgLzg5xLcXei4rqYVMUAv
LWdkXT2FkLiSUC5kTItZ03bJeTjjPag4twvGvbL5lRX/47PJZydDoAd7sVdX
3NdWPUDd4734nY3ApRnLk/3Ei3ND717M3l71baSEmynh6qAkoW2Db7vntJNX
tiDW7tqYglZ0dBxkNLdnXI8WvA8mzQ9K+vtjykfjyjemLO8th1+uxd5eDD0o
WF5JKU6iwj0v94yVvaJvXTexNk1s0J6DdxIQXwxIznqEu47eNUN3qY8xyK4N
NSGhFiTCwoQ7cBEuJSVpiYubHR1EBR3pwaK+6hc3LwyZnr+y8MnDnedX5nYn
fOg7K20B3g5mouBv02lLyi8aiSvHktrhhNpt6rArW3xaNppGQ4pcXAsaj2nG
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
se1PWfenzftjxmszNnC5NwfZ7+9P/vJs4afnC39+euqbe5O/v93435/P/e31
+q9PV/54vv7bk+Xvj6a+3Jz45tbYH682//vL7r+/3/7t+crfnq397fnKP15t
/f3l2pcb48Db356u/uXezNuLfR8uD7y73P/0fM/RaujqvP/+6eSrK/mn+/kb
m8n1Ecfq8elpubimF3jzi2NuITRyTkMTOFsqrAKFnTyHjmmW0UwSqlFANoup
YG5uJU3TghXQEN7i1laopxNxDZTUsKEhaGD2d0rmBx19YVnMxdMJKlhVqMZq
CKR4vawapBZWCpuIOiHdpmoxSRsV7GpOLZ5VUViLQzHwyNHJJwfTNyJHaKG4
tAI+kFBfqairVDMqzC0UNw/6HBJytqmOBIaWs5JHHVTorEZddZM+5qS3cczF
ylmZfYbapJLSLSUCAEhFkxK7JWXQWUH5M8E/ExrKVFtiqsVoK5H0oavBKqpL
gDRuGar9+MgkDgnFO95Ik3OMnKYO5eUSUpraYVvjmJMNndhJMwb9/4ngOshF
g31FBBhwXQfUdzYqJi3NaMpTyvIeRcXJAcTwbie/pJNfdLI0JakhIRanICU0
lRlDXb+5Iedgj3g5AFuXvs6vqMwHhfNp3XRSMZtSpd0tg2Fur5/dH+FO96kX
R42zQ5rhHmF/NycbZudjvJEobyDIHgy1gr+t5bRnxkxHW11HW+HbG6Gbq4HD
Bc/VeQfo2oLz0rjp1qLr+fkE1NPfXi7/4/3mH++3fnuz/tfXG//29fYfb7b+
/Hjhx/vzvz5e+fn+4pebU58Px7/cnvr16dr/enf239+f+/3FOrz16+Ol/3i7
8/cXGz/cmvl8beSnews/P5j/cgjtXP6b62OPt5NX5ryXZty316NPLvZ9tZd7
eHHwzKR3cdAKvM0P28fTxriXF7Sww05Ol1cYdHITQVmmWx1ycCFC2pTIfQGb
rMYqpXpUtT4N3SKoULAKtWyMW14FEXUsqhkOyT0KmkNa0+eXTmUsI0lDNqgM
dLA5DUUMMkrOLQ/YOJ12rqejTSuok7dQxawKaVOluKGilVraQCwA2JpIxawy
VAMBEdgat6pAVIeW1pca22qsHJpbWIuciKGqgQIUV8FvCpfRE/tM5VBA83Y6
GBpgNmBu6DM2ZHUNUSnlpMWC7ICs0K5BZtg0VIQ0CwNtZ+Jt9URzHUFPLdVU
YrS1eG0dQUcnquqI0iqsgFzMJRW0k5AV1614BDlZFcrchAmJKjO6+kFz4794
+x+hQzxMiFfSLSo94c3ZhPK1/ZO3tJqUVlWklOSEDKpqaVBQDJ0kApuqDFlg
oKtIaslJbSWyotvKGra3DDpaesyssJYGvA36uFMxxVRcudinH+jkDnch/paL
ixZyxq055/q07dSIfqpfOdevXBzUnOpTTiRFoNVh3d4p1+Fq563NEMB2tB5E
Jv+X3IeLrltLHuT56BnL/fXA273M97fHoDH7y5O5Pz8+9eOTU7++QpD7y5PF
b25NfXdr+ueHS78+XP7xaPbTtbEP10bhxZ8eL//2HNkV85dHy/Duf37c/b/e
nQPeXl/o/3gwAhff35j64eb0l+uTb/cHHm7GDxcCV+f8N5a77p3pfXxx6GAp
enrCs5JzLI+4Zvus/RGkw4fCClUVsmosIEmG5AFrG/AGbb9NQTMJK8xiilNe
Df5mFZbrWrEmLsGjqA4bWENBGShibAzqG/sDsv6QImJp9SFTHCxJKx78TdJG
dOgbwTkh+QqZxFbkRLai5sqSkxMAa7GoGjSKUYoC3tiUkvaqEgENK2sg6FrJ
Fn6VXUTzSGlBJb1Lg+xHnTLVZDtq+s3VGX15RkdOaykpNTUup4ZF5AC3wttW
5mwqhVqJoFVfZGOWGGtRSjJyPwtGQ02BnUl0MEmWOpKxmmisJplqK0z1ZGMj
uaO5ythE1dSTpTSCgILlkUv4lGI+uQCMTlpdYGRhfAJyQkXPGpjQ9h8DhkH6
f0ToE3UJsWFBsb8d5W5BwRiTYtJqIiDXq6Fk1JVJORRWPDgbhJekmtBrQNZN
QRKBv0tKX9Vrqs05moG3tKk+ZWKmzM1JU2MuIJqMyhd6DTuTvrle7UhMko+K
JzKK9Un7xbXw7nrk7IJvc9p+bs51Yc51ZsKyPKhZGlDuTFpubkae7Gae72We
X0xDn/bodOTeeuedVf/9tc6HGyEwt6fb3Z8PB787GoHe/vVB9vVB/9urgz8/
Xf7To/lPNybeXMp9Ppz49eHKbw9X/3T71MerY6/2hl7uDn66PvmXh8u/PFn7
9fEq6P/99uC/P1+CDzzaSDzZ6vlwKf/d4dSfb899c20cLPHt/vDt1e4Lo47t
vPXKQuTBuf6j070X58Mbo25ADlxuNKkZ7lbl4joIDmE3P+IRdPtEfkuL28jy
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
E6xltRfnvXd2oidz3uWMbjWjO5px74xZJ8PCsRAP2unTSfeVWf+dlb4nd4Ze
OMg8v59+cjP+YDlyOuyEujzmg0RwccSzFdODdk15hBMuPuRQkLW7y0P3V5PH
o/6ZkCJtYg4oWiad/O1BEzRXM0Fp2sLIubhzEdXhmPfRXu7VK3PPH429sD/y
+PLcG5fmXtgdvjXTf5B0gGBuDRggcWzHjLdmwxAfIKseZx0rYfnlMc/b1+Y+
uL0MgQUS8UneBdn29nLswUby7urgyWRgKW6E5i2gaO3VdPbourzKVpuowSKo
c8laQpruQTMnaeMOmVi9qragrCGsaRkyU9MuBLOEjQ5j3EwNSBshe56f7KNs
LYSYENW3QiEfaTHKrBx8QF7fp2/3SOp1NJykuYRdg2aQChikQiYZWbMAgJ0X
cm+kqribhBSzFsOqq4BiAHW1GHpt2RmNJbTqInBSRjUaYOPVFwoai0T1BaI6
ZKmUogE5xd7cjuxd6eiGEeGqh4uKiFARITrEQf3vCqnCEBsdEZT2C8uG5Lic
ngwRMq3B57XESVPNmJo4pSXP6GthHFeRYFy2tWz7uvZDTBg3PV0w7vhp6662
aV1NTlKxHqbNupuTGlwPvyDIKYjJKiYdzSt9zBvT1ifXe145SYKCfXxv7qvn
t3587fiXNy/+/ObJj28cf/fK3pfPr3/29OonTy1/8HD+jVsTTx4OXln2bea1
C0Py1YzmYMp+ZSV4fbN/b8o5O6iYics3RswraW3WxxwJcDayhqMJ57X54MPN
2PNH2T9eGHnxKPfMTuKJ9QF4uyGQQnK8u9B/Zdy/GdODuEECnfSJ5nsVuynH
1dnI7eXBC+PB2R7lkIHWK6qbdAvATA/zrkm/OGboyrt5awnT0bjvHnRup1N/
OJlA7rxtpp9cSz5cHrw8GtwdtO4OmqGAt8OU/eFKHFo7IBxSyXZcd28x8uGd
lfduLgL8J8OOvYzt0lTo/nriia309aXoTs4xG9GM+iVxC6vfQPMpW828ag2D
qGOR7OLGgKozZmZn3OKcWxI10v3SxqCqachKz/v5KQdr0EaH6wETzSWoQygi
IXdZpc0oGxsf1bUPWbqCyjobD+cWVQNsCQcT9NPEIss7KoWNGE5NKQIbuQTc
8/x+LxRcdBMKO4mFHQR0V1URAh65hAaYUcqoIHTkki7yOWxI28ainC2cqUFO
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
ASVtRLZgQjYbr0FK3YJMEjZ0YiAjO9kkF6fKziRaaJUwOtlQJHgckFM2Fcgb
oFDA2y+f3fvnl08Ab9+8ffrXx0cwQnD45ZMb0L/99umN//rLXeANXBWQ+/GD
U+Dtm9e2vn9r/6f3jr94ceOFy6m7W+H7O5EHe/Eba737E66lhHZ2ULOYMiym
TfNntzXWEkYgCmQNBA2s85y0UZ8AwAP84BGADf4VCi7GguK8lw+xbjwkQbbR
MHb2qNv6dJ0eebNDXK9jElzSxtlBy9FcdGssuJC0j0d02YAcSBt0CoBDuAYz
hXy6PewPa6kQUY+nI/e2hqGW4tZeHc0ubbHJWnot7PGYaTblAMwAtphb5NfT
ADCDoE7Hq5HTCUZhfcTOS4eUIIAr+RDwlvWr0l7FcEib9kh7dXQIlaBU2i6c
hVXdI+8YMnFSJm7cwAhIG12CGiu7ysDAKbsrxG0lZ59m4k28WqekDYRRTa0S
1CALjaFt07ZXgbAIayrOt94VUkqgBZLXFyvrkDUpju6SqJCQU1ePasjQfY0o
MNCGTcixE7LKcWn5pBwzpcLMaJGaVJeNK0uGFSVZSQmEhZQIk+CXxzmYCBvT
L8B5maWGVpSsBskFPGRKUgG/poRGLOjEIVEXOSWBUMIklbOIGCauhI1FsyuQ
rAq9maQG2jNkUaqytdBIw6jakXWL6laUrqMQSt9ebOwstdErbUysi0sMiGvC
isZeeYNPWO3kEOwsnJtX5RWQHWy8oatU2YyciKpqKfj2w+s/f3bv9y+f+PHT
O3996+Tz1w++fuf0xz/d/P3zOz99cv33P98E3oC6f352Cwp4++b13a9e2fj2
jd1fPrjwt9f2Xrs9Cmb66Ch+fzd2bSW0PWKbiymnYyrgbTltXkwa19OWjYwV
xrWUeStnPxj37gw7VxLGqKFzwNiVcrAAsKmwfDQgynl4WTc3aWcmbAy4AOqQ
qYmiWhuP7JM1BtTtfUYaAJMPKC4sxi+vJucTtoxfNj5gSAeRtZ8DTj4Ya8It
AunbnewF6kKabkgNp3MDN9czV5cTs1Fjj5bqkLUGzcyYV5wMKdK9qkRQDuwh
O893YJgNaFFnhUnU4FZ2DDgEEwOm+ZRzLGwY7zOO9uohaECYHXII+7R0t6gZ
SNN1481Msl/aGtPTkxYOjL2KdjuvysCs1NLK1TSkbVN0V6hoeA2LbOLW24St
Fm6TrA0PsEHJGio0bURNG0kOXlZTCvEN2nVke0BqpbO73N5e4GcUDoowIxri
jKFqzoAHrqZVZdPS4hlJ0ZSkaE5ZsmyoXLcQVi2EZQtxRlcxrgbFw2QkmJSw
IsYr72OUBajIAcqGNpSsDumpwEDpBGReejcBjUycIxQji6arzj4FIJbTCRUs
fCkXX4TARkI2GwcHBFECaQK6LPRSXUeBth1loZU4WBgnu8LFREYnC+ti43z8
qh5JTZ+yISStcbCx+s4iKCsD4+DhrexKbVeRsg2l7kDrqSXfvH/1J/DTvzz8
4U+3v3zz+LPX9oG3nz699e8v7//y6U1g7Jw3AA+uf/jw9KvXd77449rfH+/8
/NHpt28fv/PEzPOXM89eTIG+AW9bw9bZAcXUgHIpbVzNWlcyluWkcWlQDwXU
nd+6B+qALoBtyEoHHZuLqucHNEAdsAePpJ1sKHgcHolbGG5xHSAH+jZgZeWD
spGQajXjvrs/dnU9PdKrhmQKpMVcgoRPgiBn46a8ElC/lawbujgETp8MjBVq
ZyQwGdZCjA0aGbmIdjRmBOSibiFQBwbKay3ltpSwGgs1nOqIlZsJKsejxvmE
fSZuGbAKYlZByi3L+VVxG98laTGzKFZOLZBm59b6JC1hdXdUSw0rO/ziJgev
2szC6hkYDaNcx6zUMLFKaqWcilczSVZBk13UZuY0ypqx7LOYIKguhJRn7iZr
WrCyumJopyF4BriQBcgga4Hugj5mQUJQNK7EzBuwS6aKJX35gqZ4WoSCmhGj
FhRFG4bKbRtxx1m94aQsmIhTOsKIEp+WIjY6wMP2IKvzSrTNYKDIPoQ8CvJJ
K5WITF5qLkN1Egtp5HJWLZZVi2eSK5EPm7Al4KdMDIpbidz4hd5e24Q0e4Y2
tLW72MkotVILbDS0m1seEuECgkoft9LLqfDwKj08XEBUFZbX9Clq/aIqE7VY
3ggZ5OxjXGaZiVGq7UKr2lF6KrIMDfQNlO2Xz+9/99GNz984/PS1vf/w9tXD
3764++ufb/z22c1/fnEbxh8/vPztu0dfv7n35eubX72+9fd39v/25uGHzy69
eC0P+nZ3d+DKSnBn1L44pJmJqxeSeggLu2e3MuZimo2cDTLmato83ivN+fjg
kuNncWA9awUgR0PiQRs9akL2Bcq6oMnnpB1cuEjYuVEjPWZmpl2CubhlftAK
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
zj7q4W452Js2xpaduW7JnGsgDSgIrVIcwOYvQiAgWDiINRuEF/0shMT45kpK
rIrSqWSNmvMHTXkJJbOxIEWfgw6P2IVpvpIMn4TiEaf7JOk2QbJTlOwvxzbL
iO31lM4GSqsqLSrHfP/NAvD250+X/vHrZfDTV4+2nn239vTOKtST2ytPvl1+
dnsV/PTvHy+CvoGl/tdvX/3+evfXl2egvr86vb3gObrguX62/+7lyec3lx59
OXfrwsit3aErh9vWBg3DkYr+cNlkQjndoRprkU21162NWDZGbAtdDVOtddOt
mvGoosspadLxAipuUJ0brs/vdtX0emR9blmLUeySss0Siq+G3W4STQRqu01F
XUbBhKdyyl/Zby3sNeaPuYr7TTnDjbmzftFme+35cdOVOdtnk4adAcViIH8z
Jtrtq740LN/tqzzWJtpq4h+J8k7E89bc5BU74USUdX20+P6i9MVB2auNmicL
xY8XCl+tFv+4Vf5xs+TJDOfb/vTrXWkQPJ+M5z6fyn8xzX88kQfeensg6y99
WegsQ2cWuuiot+BinHvMAyqRNtuQCrD1K1JbJEgAbCgf7Xz8BRhvATZYlO4v
JIO+WbJT9cwkAyulkUtwF5B8hbhAETZSgoNo0CMjjWoos0baYmPGvqyt2fFb
bjzEz50o+VSEcDyIPerH7kRJl9qZIG7XBwV/GRF/PSi+0lV4PMTZ8jCXTJRx
Jba3CukqQ7rLkZ7qpEEldqKBNGvKmGpIH6nDjWvS1mxZJ5sEANtBG33ZQD7Q
QFzSkQ5oCeO1SJcEiZch4dLkgAhxC9A0CqQ5+YiDj7gEKZ7ClIA4ramcBC1Z
tJoSKMO5RSlWfrKWjQ6yAW9AmktE9JaQo1JaWx2rVUlrU1E7tbReI1RGoh4f
lSPgp5/enP7X71/8rz+ugZm+eYImBYDt0bdLj28tP721AhIHfvqvnz4HMwXk
/vfvXwNve5vbnPjui6mTq6Hdjej3VyZf31p7c/vg/S+mb5zpv3m679Kh5oND
xpmEYjQunWiTgdsuDRgANqjlPuN8p3ayRTmX0Ey3qHvcZUFNjquG7lNkRbX8
bkcVVKetosVQ5FfkBOScdlPhVLh2Ka4eshfvMzbjLR3Zi0VzPvGUI3/ex4e8
uRYVQQqY9+ZM2Zij5nRoz461Cr8cl3+7oLk2XrPTUXg0mnskkrXTkg2t9Ymm
zKt9vAcL5S8O1rw5KH1zsPLFgcLnC4LXS8J3q4UvD+TfG6MDbxBC742wgbQP
S+J3S5KnUwUA29edtC8SNIDtahf3ckfuuWbutpu+aCJOabDDypQBJb6tMjko
RNx7TgS8ob+1XIyZjS7vMbLQsnAwjblYkDtnfoo9F31PU0lSZw1utJ48b6Gt
OhmbXvqqJW3FkrxqQdbtyGEP5pgv+Xgg+ZgfA83biRDhchf75rDwzkTZrbGy
qz2is83cJTNpTocflSdBSOmQoIXyVgHIIUMK7LiGAKSNqXFTDcSDDtbxMH/b
i/K2oCfNqvFzGsKMKm2sNqWnAhVYX3GSD5y0KMkjxABjUN4iXEBM8BfjoYIl
aOQMlhF8EqyrKBmcFHjTgQYW4vylZHDSQBmluYbers5qq6O31lFA3HoM1D5z
RpeemKjHvnt+7LeP5//jzy//829fgZm+f34MbBQk7uFfFkHf9v3097dn//O3
q//3H1//12/X/s9fr//1zTmA7f2DI6Bvnx1rB3F7dXvtx4fbb+8c/O6zsRtn
+m7u9J5bC64MNMx31e0XsHd81g0Fojffrp5LqGZalQfaNbMtqm6H2F1Ls5Tg
PdLMZl1+m0mUMBd3WEu6rMWt+oKWhrw+a+F0oOJApGbUVggaPukUzrlFo2Zu
v5Y50EAfNzMPePMORYTQmE0Y03vrEHDMIQ1yOMy+1F98Z0F5d0l9Y7zyUrdw
N8HbTeRc7s273J3z9SDv/mzJPmmvFsXPF4Qv5/nPZ3nPZrhPp3PQKYPBzO+H
aJBGn03zgbQf16veLZffH+V91UG/GCefj0M2zPu8k7cTywFVWTCmj6rSBmTY
nprUtgoswOMr2FM2tNPGoOsucpCGTESbgeggnLIBRaxXmOrhpzjykMZs9J2g
KgNK3KyBvD8Fv+2lrJmT1q3IITuy5US2PcgJH7ITSjkTxZ8IpV1sY10fLLg1
Lr4zUXFzSHKhNf+IhzWhSh6qQbrLkE4Jui4dJK6vGi3w1hFF8oQaN60lzOnT
l60ZECW2/TlQqzYavDiuwI3J00ZluMFqbFcl1iNApwy8IoynGAtq5i8hQgUk
5FAZFW4gFzgLk/efl3EXY0DfGvnoUJuVhwQkJAgO0WpqszQDfLarPqtdBSpH
7tCk9+jJA2Zqvzm914gH3n75sPvP366AxEELB8Fhb5p+HYXt3sb7R9sgbmCm
//uPr/6fP69DPgU//fPdBdA34A3C6a3Pxx99Pf/j46Mf72+9+Gbp1oXhb871
fXOmZ2fJu9CtnGmvBeq2p2w7i4Gzy6FjM671YdNKr365R7fSrVtIqMfCNS1G
vr083VCEdVWhm6i06Pgd5qIhT+VkqGbYU9pl4rVq2G0a5qRLNGbjzbqEG9GK
w/HKBXcBxLeWSqRflTZtoa77OYeC2UsO8pwVB3Z5PJZ1dbDo5qTk1nT5jTHR
tb6CL/sFN0eKb09J7s5CiR4uiF8sl75eLX+1JHoyzXswxn46yXk8nvVwmPFg
hPFwb1QN0gF0ax9Wyj6sVr5ZLH00VQgh9HIrDWA738LciTKPhSA20ufM1BEV
oVuKbSlLjkmSI8VJTeIUKGjbwCihc/MUYNz5yYAclCsXtddwUSp8NViI+ARI
pBjNj4N1qbOm9DVHxiE3ZctJ2HJgjziTT/iSz4Zwu0243UjquebUzxOkL7vp
N4f4fxkV3RwuvNbD/yzBO9uUc9jFWDKQxhSYgWqUt55ylLFxVSowNlaHBcZm
daR5XfqimbLuZG55OVCbHjZQN2+ijqnxkCkGanG91djO8uREeYoLfUgBhQ1d
JFCaDgWwQQVLKR4RoTE/yZSLzhoAZi5RkrckxStOBer8kjSIoh2qrPY69BzV
Tg2rq57Zoc5sV0MsJfca0J0i+s1E4A0dDAHk3p/9/eN5uH54cfzNwy0gDZB7
93j755en/vpuF8z0//z59T5v//Hz1b9/uPTbq7Mgca+/33h+a/Xt9xs/7234
8PT6ws3d3msn268ebT022zjfJTvQo1gf0n220XT9RNf51fDxGefOAd/55fDp
Oe/WiGWuTdFjLwqrWPYKokWCg5gZ1+Z2WQoHnOLJUPWBmGzKX9alz47WkEMV
2Ck7/4BXeLRN+tmo7usZ88VB1aFQ4YyJNqUnzFvJh/yMY1HO8SbmkVDGmRbG
lf68m6OCGyMFV3tzLiZoVzrZt8eLXixJ36zVvt7Y07S10hdLolcHikDWXoCm
jbPvDVDv9lPu9VLvD9KeT3LfLhS+WSx6vVD0Yq74yVTRvZH8W/3c6z3ZVzvY
F9uyduPs5UbCgoU0pScNqklghVEJxl2ALh6DHOcvxDRJ0iIleEDLnQddXFJQ
iG0qTmuWpMUluJgkpbkE01yCtJQnJaowA2rcuI6w0EhZ99KOBOjHAtSjHvxR
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
wFYTzhB7YfLQtSJIvhspx4WSaIWNhR/eBnU2DWyaGQ4R5pgwM+SDCXqF7e2B
cbgEO3yyPbpRK8eDyfNlopiBiQWiI5WKguiQDuCc50fK9cRmeyG5nkiWJ5IL
J76I8D0CLvfzcfL1bvTpcvjxYuD77eivh/Hn84Hz7VaIqE/omt4RCKf/z89v
//Pn/H//nv2Pl0l4CRUW+rqH427o38Dino+6z9fqgbfzperLZeXZXPnWkGCu
I3WpK2N3pOB4XHQ6WXQ4XrQ1yF/ozJpsTO4ui2gQBqhyvEsTHSWRViXRVopY
28o427pk59Zs7/ZcX1BHjldLhlNzmm17pk0/z2Gs0GVd+f6w+eN1Z+R564fd
Ks8VmcOazHG73GlbYbNbaXVQbXtaa3fR4HCjdrxvdXluc/nV6/Gj0/WlzfF7
uxPoucX+rhZygd5Jte5Fnf5lnf5JpdZBCXNfQocyelqiBWX0QWX22mDzUGt1
Ug6GprNWxF0u1D6tcThQOq7LbcbzDFqiGOXvCTIfotSHlmGBbqCLM0QidZFo
XSTJBMmxpRa4sHIdKNCn8V1pQg96sQ+zJIBTEcypCuWUB9JrwlnqaG5TNKsm
nFDzAQMm2ZFI60gi9WXQhnMZw9mk/jSkLxUZyUameNh5IWlVwtiS6+yVGx0r
rY+qbFaFRqPJnN4YHXUop8qbKHVEeO+QPFNE6oTUBxEHkgyG043Gskzh2Jug
3R7L7Ipl9cRz2iJpbydcgK0pnKEKoSjeU0oDaLkO6GKkZEv0vgaQlmRLS3fU
AqU4MlFbs8LG2LxNqrHGxNmg0yzjbbGx1miUeBs2iCrPnSkO1JaGasnD2aVh
HEkoQxbKLI3QKvnAEr0n57ojPB9sgR8ejvleSL4PUgj/68Lor3dfXm7HHi+G
7s8Gnq+GALmXC3QjKoSFX3cjgBaE0//+Y+7//LX4P3/M/esVJe3P+7HXi/7r
vba7/Y4fb8PMnw4773da7zYbb9ZqTmcVwNtyd+bOAO9iWnI3V3L5rXh/hD/X
ljJcHdVVElrD85anOsqTHGVxdvI4m8oEh5pkp/pUp64c75Gi4D6eb2eOW0uq
PSTQtjSL4QLH5Uq//abQo+bgk+b3R40+e9UuWwr7vUqH8wbPp473N82ul432
ICDtsd0N2rPXDrfndqffPR4/u1x/dDiDfrU7vqhtbmqMTyq1j6u0TlTc02ru
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
NWpute8JXbFc6Naghg5n6MHP2RpDVX+iNH4iQ1hoi2N3xGt3JujWf9IGTy4L
oIk9iTxnbJY9uhsi+e3SR7oDuh4yyZ6cZE9Nc9XK8tTN8tTPcNeNs6VCTIi0
xMQDb3YYDW/o8DFXbLYbPsedkO9FBtKEfkyhPwN4E/mTioNo4kCqwAcPbVu+
J6bAl1AYQIY3oZeD1g4EJ9Ddge4vBn89ff3nj7k/nqaAt9uTXmjewOIeTnt+
3g6jmD2NA3L/fJ6AsPDPJxQ2CK0vp33Ppz0/zvp+nvf+OO1+PmwH3m43Go5m
StdHhBvDQujinrebfh93v+y2362rD6crlvuE39pyvrVlT7dmfW1KGar8NN0Q
t9qeuteXdfw5c68zcVEVMil1npc7LMgtF+XvVhTmuyqr02b76w6H+26H75+d
fw46/xpwfum0uqo3ONF4VJ3BXb3Bk9rktcX8sdHkqlr3rELrSqkDLL00mQNp
P5qsHmtMIQucyXWgSbtTGr02vruo5J6Uci4r9a+qjI5kOtsi1paIsyvV3yo2
WC7U+5avNZrBhDLaHoNTR+K7EnUbI7mKAHKBMyQCtBKhj9hwJfFdIRcQcxyw
PFeC2JtaGsQqD2JWBNE6YrW7YjnQn0NdG0jVHsnUG8/Rn8iFo/ZYNms4gz6U
QRlOJw2nE4bS8INp2Ake5ZuIPidmzRQypoW0+WKt3SrziybnoxrHFcm7L2na
nRHkOj+swhkpsUV5K3NFKr0wdYHEljA65ALo1gbTdLoSWZ0JzLY4enM0rfET
FYTuTo3Vak/QrwzRkvqx4G8EfnL0Cps1kmqDwpZii890ped4sdPcmElO9MS/
xUywp0dZEj9ZYKOt0SiaaI9NdcFneRJzvEi53sR8L2KeJ4HvA/bFFAexRAF0
nhceMCsC8wyiAWMAW54HwvfGwTkQKAmmA2kaAWzSEMbD5RBEVIDt9WYMYLs+
6tbwBnnhz8cv//o+BZUUkIOSCmEBhJrbRT/A9nLW+/P886/z3l/ghOhD3Fqf
dpouoFWbkh1Ol92u1X/fb/9+2PW003mz1rr3tWq+u2CqJQtgg8I6rU4cqQyb
U8fu9KYefE477E3YbY9crg+cLXWcFpvMFxuuyk22Ks2Oaq2uWu1eel3/GHT/
x6Drr892z+3m1w0GUBBPKjkXSu6VSue5yehFbfzabPLYYHCl1D4rZ18o2FcV
3Od609d6syeV6VWZ7pGYCboq03+qNfvdan1VobNfRD+SsN52KLPWBcx1kdZu
icmGxHRBaACwtcdAfkSUQUhVENKZoN/4SU/hT+M7IBmW6KoPFDBfRoEH+rTl
Qk9ykTdJ6ktUBFHR+BnDGc81nsg1GM/S+5KpPZbBHcvkjGWyvmSxxrLoo5mU
kQzySAbxSyZxIps8lUeZ4dMXJZwFCQeOS1Kt1RK9rXLTvSrrI5XzqtQSvkhb
OKXaB5E7I8W2SKkDUu1BaA6ldUSygefeBC3o1obSdftSue1x4KXU1lhaWxxT
HcOs/0SvjaA3RsHPoy/zZwvc6GDFcaboduYkKwTKaKYTJdeTne/LzfXmpLhQ
4+1JsfbEGDtClDUh8u3SbrQFBFJcoj0ezA1qKHpF15ciek8FFfiTCwMAJGbR
e6iqeKALBIYGLIHA63heWOANCAQBcsAhUAeCc3gH+rffz1O/HiYhn57vtZ/t
tkHzBvp+PfhvL5MQFgA54E3jb6C3ITaDwNvrSQ8426+TToDtx2Eb6GWvGfLp
yZzibL7qfqv5Zb/jYbf9aa/3aq19d7Jyrgutp7NtmfPtafOtidMNEesdcTs9
CevNHxdqfBeUnvOVrgsKh2mh3rJE/6DK8rzeFlLAQ7vD9y6n359d/ux3/N5h
eddodF2jC5jdqHSvq3WvK7mvTUbPDXqPdTr3Ndw7lfaNUuuqQguQu63UuavS
vynXP5Gwdwsoh0WMu0rjP5pt/9nlfF2puyOkbBfS98ScTRFzTcgBZ9tXWG/L
redFJkNpWupwfFUgUhmIVAcTGiN1aj7olPrSePZImjmSZonwXQgSf4bAHSfx
I5cG0csCKTI/nCIQ1xjD+pyuN8Uz/JanM5XD/Zqt9TWLPZHFmsxkTGTRvqST
R9LwQ0lIfyIylIJM5ZPWpdr7VSbrZTrLMi7Atl5qsF9teaiy262wW5NZzfBN
+xM49YG4cndE5oBI7ZEKd0LDewbA9jmRO5iq15/CRZWu05PMhsBbF4ZrjKa2
xnNaErgNUayaT8zaT5yGKINiX06uMy3RHN00EWOCJNvgs13oAJs41FgYqJ/h
wYRQEGWDi3nbLK+ZPxNljo2zBmdDzS3BHslww/H9UcyKgqjiYFphIEVjXJAU
Mp2RbFckywU1NPRiSBgH6AL2QJoKq6FOI0AR3n+9+wK8vRXT4avDrsuDTs1U
Lujfft+PavIpWBwqCA7PE3/ej4F+XPY/HXa+HHX8cdb9+6T9Zafx12Hrz4OW
h60GgO10ofpuu/XHSd/Ps8H73e79b7XLA5Klz8KVfsFyT/Zie/JSe/xOb/Ju
d/Rma9hKre+kzGagwHBUZDJbYrFRar5bZnastL5ucnhpd33tdH5qtUUbs0ZT
qJj39UY3Kr3zcu0LBfemSu+hxuC5Tv+pjvtUq/NcpwvnjzW6t1Xalwr2RSn7
pkIbkLss4x4Xs06lnLfLuba/mm0gkO4UMfaKWUdyvcNSw1258bbcbEtuCbCN
Zur0JXE649nNkXRlEL7ECxE5IEJHbKEzvtCVIHTFQwuU54jkOiJF3kAdoSyQ
VBlCVIVTmqIZ3cncoQzut3zt6VzmRCZ1LI00mgSA4Ybikf54ZCAOGU5BhhOR
vjhkNA1ZLmLvlBlslmgvF3MgGuxUmp422F+q3Q6UjtM8/a5ocn0gUhuAqfRE
SpwQiR2icMU0BXF6Yw2HUgz6k7R6Elg9CczuJBYIzE0dTWqMJjfHM1sTtZvi
tFThLEUovSyYUf6BK/BgptoQIIdG6Gt4A3OjZ7ux+f46YG7AW5obPd6RGGGJ
7pRHxzIYoxNTk+0J6PhKR2ymO57nTeL7EoUBpOK3hh/SQYEfHkIBwAOY5bgh
Ah9icRBD43hwnu+JA4EHguAdOIr8KQAndHrgh7dn/W+TasYfL4agnt6d9j2d
9YOAt193I2BuIE0+/U+orW/+Brz9vhx4PUad7c+zzj9O2l73Gp+3G153mx63
G69Wa89X6m622h72ugC2q4227amqpf6i1cHC3dGivVHh3lD2fn/KyWDSbsfH
lTrv2QqHrxLTkQKd0QKdqUL9E5Xjhcrups7hUe382u76o93ltc3xucX2WmV0
qTS4qADYdKETu64wvK0yvlXq31Zw7irZ99VaL/UGP5qMXxsM76vhE9hHxdRz
OeumQve2Uu9aoXddoQ+8vTZYPKhMLirg6xg81Fs9qR0vqm3WJUYzPJ0J6K+y
dNHylKjTGs1WBZFlbojQASmwBWFAfDsELA7yHd8JEbggUl98SQD27U4BpTOR
05+pM5ytO5alBaRNZZGnMylfM0njqYTRZAwwBhpJQsYhh6aiJ5PZeDC3XYXh
Zonukpi9KtHZrjA7a3C+bvbZKXfoT2RWeiGoPP+W0gvfGEjvjtYfTjHrT9Lu
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
KedHFQtfyja/le3PlhzPSU+mhCcTOYeDEEgD5svtPucwRnm0OTF3u8LkuMb8
otHqsR1CqPdtPboT6rHB8r7O/KbG+KJKF9LBeYXWcSnzVME+U3CPSjjQ7W8K
qbsi5oGYc1zMOZNwT6XcIzF7X8TYK6QdS9FPe6gzeWw0e2oyvak3PK/WOa3i
XkCkfbsyfNNodV5nAdlwTW74TajTm0ppjMBWvUfKfZFST4zCg1DuRi13ockd
yFJbfLENUmz3dv/IBSnzQMp8kAp/pPI90hpD6oonokMVUtFoAKTN5NAXeay5
HMpsNnkmiwQCf5vNoczl0ufyGctCrVWx7qbMaKMEFfjqfoXVcbXdUaXDdA63
IwzTHIS0hhKbg4mNAcS6AILKF9sYRGqPpEG39jmF0ZtM6krAtccinXEkYA94
g2IKzNeEEyqCMCUBSEkgXhJALvSjoM7mSkm1I8RZ4qCMxpj+vecl2RrJdwdH
Mi2PsADkBN5aaW/3F2LMkAR06gK6qirDFZ/nixMFk6QfacWhpKJgguQDUR5O
Ack+UErDmSWhjEI/EsDG9yQWeJDz3YhwAkSBgKgMR/QZgukOCKCV70EAzDSC
c/iohsaX27Gn65Gb4z7g7XirGUoq+BtEVMgLaEm9HwXe/nd9iKZ/0/D267wb
mjfg7XWz5vuG8nm9+mmj5nm76X6r+WihdumLYmGsYnWqanem7GSh9GS2eHcs
a70narUlcEHlMiN/NynUWpDo7Fea3TbbPbY73bfZP7Y6QBq9b7SEkgfl77Sc
e1TK3C+h7krJ28XETRFuqxC/VUgA7RRR3kZgQSOntydkbuZTVrMJWzwq1FkI
EffVpjfVaMN2rTK4qdG/azR+bjV/ajO/bTK6qNXbLeXuKHQ35NpzhexJHmMk
m94eT6j5iKigWgWTVIF0pS+twp2hcKZVODEqnGhyRxwkRLkLovDEKP2w9SGE
5nByezQFfu+9iUSA7WsOY4GntaqZmCrUXuYzgbeJFAzoWxZlWcBZL9LbLDbY
EOsvibQXhTrrUmMgbV9ps11utVnybo6n9zmS2OCPtIXiP0dxeiI5baF0dQi9
K1KrN05nIFlnIIXdnUgA0ppBMcAboSue2pnAaI1Br4EoApESX3QoXEkgUexH
4nkQMh2hdBISrIE3QrwFNsUGl2GPTbfFpdogeW40WbBBSYihyFcLztPscImW
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
k47bo46j7ab9rbbjw76jo/7t3Z65ufqVpcbttZadlaat2QrgbXWsaO+L6GVB
/vhVcDWaedQXv9IYPFXuslTjcdwdfNjqvdfksldjvaey3K803ylD1+dA67UF
9UjCXi1mL4nZc4XsmULONyFnWsT9ks/Q8DaVR5/lQVJggLnN5hK+5eKBtC9p
yFQ2ZqWQsVemB6n2uNIUeANLOauGozXABvliIBaBVrw7mdSdTu/J4LT9f029
h1dbWf7le5VzDmScMM4ug8GAyTkjoYByQCBEFjmInHPOOZrgHKq6q3q65/fm
vVnv75p9RE/PrPVdWrgKGxCfu797n3vP92jgRuj+FKo5gWpJJGsd/ngKyPUk
U4Np1EgmbSqfs1QuCt6m5EDZiGdzyz+45bde+Y8mNUmjnYS3H+3hV43KI7L7
WHRQTaauffCixKRqpVf1ik8t4d/ao//oif3W8fBz64PvHY//1vfiR8/zD43R
ew7lTBENDRSwQdxA2opesKLnL1VyZ8lzRHTUkoG161ac1IfiTVgz8xAo9kyi
Q7v8rDrkwht57AlDzx3Ko8AbfpaWFPguel0Cw/2Gbn9BNz+lV8ZwNI/45Q+4
RZGMnDDCW14EOamq6gWv6jnL/IIOOaoDaYmsxkRGUwL5F/yp4I3Rn88bKZWQ
gTkaxXiFfLhEOlAoIs06g+lPpbUEvxbE0J/Cb0rk+eJY3jdMXzwXVRfHI90Z
svYb1/OaR0Z0vuDanrGtTzmmJzTHGzYMnjeF25jJb8vldxTwOgo4HYWMnmJW
oIIzrBMMVfIHytjdBfSOXKo9h/p21vHruvfHVd/NSdfVWf/nm4lPn2aurycu
TodOj/sOttt2lr0Hy56bnYY/Ljr/x3XXv/ZctyO5h21vjzvizrvjT7tefR6M
/9di5j+mEr/3P7luiUDH/OIPhy5de2WIlvgd3TSqbltCTuvk23Y+OumeW3bW
GA5923YId+zCPbuATCKycXdNDIjbqZsH5HbNtEM766pO8rk15GtbxOfWMEQP
SMrfep9+b3944lbMl9FGs6iBbGqwhDVUwR+uEPYVcFphG95S3uAo+LZEUn3v
aWO57Llisry2XinZNSlWNNwNLW/fLL50q25qVDe1ii8++c9m9fcWNdLo7x0R
n5tVSB97Ds6uk39YI0QYgZH72qoG+Z9aQvGdQNy+tz/4W/+zvwZe/3P47Z+B
3774Yw9c6pVKLmCbKqCmC+lTBTS8Auxtk3THLFvXC0HdepVoyyretIl3XXLA
tuOWgrddC8iXnrhU557Qi9qoA1fYTIWgM41qT6WI7KSym1LImgZUyxI86qWE
DJpjlEUz8UrO4YokSaHiEc3yim9+wbS9pIPM+neslhROSzKzEW8C/qkMCgm3
v4AzXCoc10hRYxVorKJAAVoquz0dyka1pAJLOrFwKbyGRGL86uJY9Ync+kR+
7Ruu6wXDG8fDBx5I3AuG8zkdr/ijN4HXmCZoyhK155IVvP4y2YBGOqAVDmoE
IG3UIEINVXB7Chn+LKo5jdTxWu35VsPZVtP+Wv3+esvZQe/1xej15djl6dDZ
Yc/+etPOSvXlbv3vl+0/z1puNyz7vUkb9TFL7sht371T/6Orzpgfgaf/fTL+
H8NPf3Xf/9SkRA69qZPe+mSoK6/s0qu+i13nvrCTWjXC/oaZv2xkH1bLTr0q
1J5LtG6kr+qDc/ZsrFOP6KSaDK29rJPcNik/t4V+8pMnf858iqumiM+dMbf+
x7tO1XgxvT+DgsmBMegu5HXkcduzWE3vSRDzvKZqXpKDqzqTqalC/qpeuWcJ
O3SE7lnkm5X8A6NoR8c5NPFva9Vf6tQfnMILFx+hALnme4sSVhOtE9ij9u0s
iNtnv/Jbh+pHV9j3zvAv/lCI2+eWqK/+h//vePL/P53x/02k/ep8eWAjsjaW
TR5mmythTBZR4G22mAmLuF4pWtUIlsq420bZvkV14g47dIdu2WSrVcINm/TA
o0BcuvaG3DREfvBFH7rDV42K0WISSPsLJH0Fiq48ZVum0pcsRietiiVjM3MU
VHEkpXvE0cdygush5PAX41MabJs7Dj6f5Utit6bx2jP5HaTYXVns3mzGQD5n
pJg3Wi5ADZdxBoqZvQWMrlyaP4Nqfk/Kn8HozuH1Foh7i5R1yWyEhZpEZn0y
H03c+iw4Uukx2QsJDqGczclsfxoHORffZHeBeKBCMaoLGalUjehkE1WKaYtq
1qKYNEom4HC0woESblcOw59OvkpTCnW2WX++3Xy62byz7NtebjjYaj8/DFwc
Dext+LeXfVuL1UerNZ+Omn+cN11v2vfH8+Z9j5ZrI7d8kSf+R7c9T770IBo8
/L0Hge7ez7awr01K/O4++qRA7tIjRN7cw+VsJzO9913kddsm2bQI1k28A7f0
yCM/9EghemsmxjoyqZt35pV8qFdd1auuG9S35JnMcNR1a8hFg+raH3njj772
x8Bpr1qVQwWMOxEAZv5sdmsWqyWNXp9E1SKA/0YGwkPckA4QQld0sl2L+tgV
euoOPXEoziySQx3nQM85twluPfKPtZLbOsl/HgM4r+Yc2ekHFvqJg31VJybK
1k54+9YR8qWN6FvQucX+I/Dmvw8n/ddI8l99CTe+R2ta4WgmNZhKDaZTU8U0
RNE1nWDTKN3USzZ04q1gHdtCzl0RlzX3IGJAbs+lOqgOOasLJzsa6vC9qfdt
ylWjbKZcPFjAR2bszBb7s6UtGfL6ZGl1nACpU/+ITADLV1NlUZQ+hm2IZWmD
hzsYyJBzWk08B7B5E5mNqRzA1pUrIJXNhYL15TADeczhIu5YhXCiUjhawRsu
YwUIcjQg155JtWWRh4Tx+Z15wvY8UU0ywxFPzoBuSOWTU1Nfk9HWrpfkUKTG
d0wkWbg+9GIyn7NCMq6TT1Spxo3yIa0Ibm1ELwRpqDGdeEQjCpTwu/LYbelk
r25TMqMxmfFhz3+x7z/ZbtlZqd9c9G2vNgO54+2O9XnvyrRje87xYav2y2H9
h3Xr5nDefOurSWfIhi/yovPJ54HXv4Zf/zH0/Hvn/dsm0m6+tKi/Nqu/NKk+
NSjQRo8dvB0zufu8bOCvmtBJhRtWEboJYilJpg4RKRt/y8zZMrP27LyLOsWn
1oiv7ffxiqZ81aBGvvjQROqyMfSqJfLUF4pkt26RT2uE/Tn0jvdUW/CSwbWJ
t6s1nd6YTNXDsQS3tAQyGROFvPly8YpWtGWQHjnUl9XhH6pDT23SE5NgX8c+
MDAvHaKv9eSxkxuv8NTFOnHSjx20Uxfjspb/sVH6tVX5vU39pU31uV31qQ38
q/CNfe98+Gfg1b9GEn50vPjW9uK6/vGOWTVVwAikkjsIyKTgbdUgOHKpIWX7
VsWWUbxjEB9UyS6cCOCRN957V3XRl3VRF/WRlw1RV01RULZjl5w8WF7MGC1k
DuZx8Ntsy+A1vuf5kvkIpOSw7+cMXQyZfF4aRYYDE8ZiWfrHDN3D4Ml9ZIQO
5U0kN6qaUshCbk++qL9IjAoUkaYZyGP35zKGCjngbVInGtcGJa6EheorYvcU
sIFEZw6nI5vnz+I2ZbBqk8gKLbhtTudBLRFX0dObklho7l2ZIE08XqGcMajm
DXiVL1hVc1b5hEE4UMbsL6EPVbBHKwWQtf4yXk8Rvy2H05jKakhi173jNrwT
1CcJz/Zbz/bbjrf9e2uN60u+jYU61NaC73C1HrbtfK3m43bN+YJxpSd9svHV
TP3jzcaHVz3Pf44l/D4W//fR13+OvvrR9YC46EY1PNvXljC83tarz2qk+zbB
toW3bCSPOgA2kLbtkKJ27OJtG5nqvFbFXjcyN03sHSvvwCk498o/toT/7I75
7I++qMPlL9l3i49r5Rf1BLb9avmKUTBRQn4pA3nM3kyyo6ojjRiP7lx2oEjQ
k8eBFelMpwVyOGSoYx57rky0qpVCfNYq+TsGETzbgUm4b+SfW8XnNtGhkXVm
5cK8QZBPHXRghjqvZt3WC7+3K391hQC2jy3y62bpRaP0Q4MMMvuj69Hv/c/+
1vfqZ8+r0+rIfUf4plE+VcQayqAC6WSdbaaUtaDhbJolJwDbE3ZgU+Dr7uiF
e0bxuVN15Qm7qYWaRV77om6bolHXgM2tAmzDOVQXXH0aMfbB1TZBTQLbGc+y
vmKiV1Y+IrCV3yMDZyqCDdQQS060B2z6GMr0lJxrD9ju5ktApgZKpCMVClLl
Uni2wQIumS5SwEYzndCKoW/opwFS7P5iTl8Rtzuf0x5sEFChxlSGL5lCNaWh
L5OZ2O2Z5DikQCHyhXiomCSOuaqQBbN63qiY0gvnLKJpM39UxwyUUQPl1Egl
4S1Qzu/IY7dksH3JTM9bVnUczxMvrn0r9yYoDrabD3daDnf8+1tE4tbmPCvT
rtVJ++ejjq+Hrd/3G66XzaudKYPO+xPVD3baXnwZSfhz6t1fk+9+Db780ffk
V/+Tbx330ARvGkOIt2mNuG2C71UeuSXBc1ik207ZDuyxR3VQo0YhmiEpQN9W
jazlStpqJR0aeGAXAs5Dh+i0WnbbjAs/DL4OBm/fJdmvlh571Wf1EYCNrEql
U92pFGDrzWT3QNgzyb2eoRIBPPBwEbmQhwt406WSBY1sqogH2BAQdo0S2LYN
DXOtglotpbbKaR8css/eEIjbiY0bfPqOu0fWXpgXHuZ1Pe9Hh+KvQMSf/eHf
2hSXPkQGHhmT5ZV97Lj359Bv/xhL+NH96kNjzJKWPG07ns8MZFJ9ELcsarKQ
uajlb5jw04l3rRJSZvFulXBbx9nSss4d8uua0E++yFtfxMf6yE/NUR+bIi+8
4Ztm6UwZty/z34G0NZUOjfImse1kwybD8JSmeRQ8Lu0BIQ3Khq5qfEzOnTfG
kmFNpidkicz9htyrakyBH0OXFACziUo5alwrGy0XB98Z5kA+a6iEO0zWkNm9
eXT4t75CZnCNgt2Zy0KPaEyhfO+o1nRGcyrZYNicSpbj0NkHi6XTurAZfdhM
pWpaK5/VkX2vcwbxlIY3WkabMjImDPQxHTVaSZswcmetkgmTdFAjbkyj1b6j
u94wba859tci1xul67dQ1MFuC+r4oO30oP14p2V3pW573r037/p11vnrqOnz
mn1/IGeqJmbYFrZS/+h6IOGfs2n/bTLh58CzTx0Pbv1RH9ui0fsgTZc+5VVD
6E1D2LlXBdKgYLsOyYFHdVgbclAXeuQlBerAHhlZbxVsmjjgbU3HOLCLTtwy
8LZbxd0x8048csB22RBx0RhxUhey51ZsWqXrZsmshjuUR+t6T3W/B2/svkxu
bwbZDg9zMlbGn9aIR4u5owWcmXLRsk6JjLBYJtypUp46Qo6sil0Db0vH3Kig
1sqoHQ3jxq380Rj5sUZx5uBfwDQ6WbsmCrB9qGV/bOL/6vo3b1/9UvC27WDv
ugVnDeqv3TF/jsT/MRB30/LkwB05VsAczqUBtt40CsllJI8+XcpZ0PJ3bHIE
onUDZ9PI3TcLj6zCgyrejo55Va383hT9R9uj7y33yP2UhggkqQOHfMUgnSwX
BXJYCJIt72kNSXR3PMImuUkE2CofB49Lu9tA+ogcHw/SIGjmZ5TlOWV9Tjle
EdhqEynABoGCTPUX8sngGuiYRjRaLkRMgHNDM8XrYDEHsPUXMMFbTz6K0Z3P
6sxltGcz4EbAWEMy1ZHFastgtKXR/en0zkxWoEA4qVUumCKWzeGLVUTTZvWS
6Uoy5nqslDZUTIG3SSNjXI9XzrxdtuQMnTQp+8oknkSyQQb6bH0NS6BwxIXa
XoeZX6i3txo2N3zbG/X72w37G76dRdfegvNsxXW77r6Y1e/0Zsx5n8x57m03
xV73vfkxmvDXePy33pir1ojrlgjwdtMUflojP3SJD5wi+P+zWiU0DXEAbRRu
DbQQTatRbbnl6w7JulWEIrDZhPt2CX4pGwbOiVvxoSbk2C7eMZIt6kceJXza
RWPUaX3Erlu1YhLNVHAmSlhjRay+DBI5e1IZA5mCgUxRfzq5Cw8jF9x6zEef
nSjkIh1smcO2jKo1nQR58NShPrJI9wycfSPn2Mo7tQvOHZLb2pDPvrDrGil5
mJPcZeNB3D42CG4beZ+aBd/aJN+75F87pDfNwnOfALCd1Ktv2h986oy99j8+
qo1atygX9dL+LArfD2owhz5ezJ6vFK9UyTbMcojbBn52A4dcO47gsy4u2ZlD
+KUu9K+u2P8KvPyj49GtL+yiWrFnFS1o2FOlgoFCQXc2uV1el8RwxZHdJZVk
JCCljaXKH1FlQXGDyuli6IYnBDMIGjAjRyfEUXUJFBAFKoCkPZPencsMFLKH
SniQskAhC1xB2YhzKxXgqsR/BG/4hIEiTh/+bwGzK4/ZkUMHb4gMkDj8I2jo
qO5MRlcWJJE3US6BoC0YVUtm9ZJZuVglndXxpzSsiQo6KQ1jwSqaNQkm9Jxx
HX/apJgxhQTKpM2ZJOHiqjG/ZNneiF1v1fb4MNMrVeUTycysfWKqanLCOD9t
Wpw0LoxoNsYqj2aMB6Ol6x0pk877I1XKTe+9r8MJf029/30k7mdfLJz8Wa0M
XgvmGbyhdW7bBDBj0LR9lwxv+KKePadhISYg+KOBgrRFE29Wz5qrZC4aOOsW
Pj7zuEa1bRZsm/hnHtVNXfipU75nEuyYRB8ao88b7x3XRWw55POV5IHD4Xz6
MAxbOlnCRersec/8N29pIvAWyKImiphTJVwIzkwJb8sccmiPRCBFMDy0KI6t
MiJuWsahmQPAvjaGfG2ICMImv3CRlZArr+C2XvypUYw2CtI+twghcddNgqtG
/oWPc+oVnPiUN22PvvW+RDTetCknS9n4fkYKGGjrPWkU+eolnGWjfMcZdlgT
fVwbsVbF38BbYeIeO0RXNUpyW7Y+5GOd6mtj2L/6nv/Pkbi/dT6+qg3dt4lX
NKzRPKoni9meQWwSnDmUzfySwEY2vD/+N2yl9/8PbxA3+0vK+Rs5cstLnilC
46ND1sBJVw4LsPWhvxeyiIgV0rtyqI50qiebGiwEHuT8mpEyPiQONI6UweNx
+4vYd/rWkcNES0VqgAfuyAxu/c5mAFRQOlMpmzPIZ3TieaNsoUq6WCUGb5MV
zEkNY0bHJpP8nWFzZhXkdLBMOFxB7si3ZHHscWSmDdmC+opljRe7kpT2RKXx
taQ8ljM5Yx6f1I+Pa6fGNQuT2rVJ7fZ4+d5w4Vp78pLv2aL73l5jzNdA3J8T
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
m8j8XwO7n8s=
"], "Byte", ColorSpace -> "RGB", Interleaving -> True];


(* ::Subsubsubsection::Closed:: *)
(*$ConstanceImage:*)


$ConstanceImage = Image[CompressedData["
1:eJzcvfmXZUWVvg8iVFGZd8ybmZWZBQ5ta0vbiohTO88MooKCDIJQDFUUM7SA
qGhr2+1a/dNn9T/8fb7xrHjXvufem1VZlGJ3rFW5Tp17hjgRO97Y8/7I+Vce
eO4D11133Run+fPAU2996/XXn/r1T6f858GX33j+wsvPPnP3y//27IVnX//S
+Rs4+cj11133//j3/x+PN7TRhsZP0+l0NptNJpOtra2bb76Zv5zf2dm55ZZb
Dg4O5vP5YrHgAs5z8bw1buEazmxvb3MjZyYnbD6B5tt5ss85c+bMojUezvl/
+qd/+vznP/+5z32Og8PDw1lvXM+ruZ3jeW9+BSf5ySfQ+Irbb7/9M5/5DAf2
ljdut3Z0dPTZz372C1/4Ar/eeuutXPyRj3zkq1/9Kmd446c+9Snewkmu5y6O
9/f3P/GJT3z605/mp7Nnz3KSh/Bexsqv2G9td3eXM/x32tvsPTQ/bac1Poq/
fCCj5NfRgb29vX/4h3/gE25v7Z9b4xPuvffeX/ziF3ffffcnP/lJruFeR97h
deR9pl3lr93m4byRh3z961//0pe+9I//+I98FJcxAvzqvHOSeeG9jNi5c+f4
lVt4C1cyOD/60Y8ee+yxhx56iAO68eCDDz7xxBMPPPAAD/zYxz7GPEpCDqzd
YNA+/OEPf/Ob37z//vu/+MUv8ihfZ09+8IMfPProo/zEw7nyqDVI4mtf+9oP
f/jD++67jwu++93v3nXXXVzzs5/9jL/f+MY3+HDetdua327nIfJTp07ddNNN
N7bGAWccUv6ePn2aMx8s7cbScjvHqxfkmTfccMMHPvCB66+/nl856dqR6pwv
Bo2vpkvOMif5ND6B+brttts4wwf+67/+K1/EOHMsufJFUCzjw0Bx5X2tffvb
3+YMBMBjIUsexVfzfL6a6YDsuZGFzHAx/lzPRNxzzz1cz6/0gVu4mGu462xv
PoFFwV9nnycw17yCK7mL/0oDjDNLhqd96EMf4o2HG9q5DY3unRSyaJKNy9O5
cyVCQh/96Ef9ECGLK6XqjL+3ixUnbT5B0rWTrhdRlBcxREAH08FKdJXlV3FJ
yMq6rpDF7a5oxgSQ+Zd/+RfGJxDtNQw7P7EqGXkug1b5Ukjizjvv/MpXvsKq
Z/Z5YzrM9dAMs8Mi4kqfI544hq7ZClmefy+oVSGLxrGD73DxRkaJr4C86TBk
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
51oRmRO1awJZ81ZRYhWywh3V1w0esgpZe61Wgsn5dckb91TA2UQm3Rdl1ILl
Jy2eQhDj3q985SvfaM0qJDU70CbImpcw3nkJw2HGdReEq9eF/rDlRhtAluT3
PkKWWDHrmLzTTd5Sl4jhehSNBwzevETLHrWEq6OWqyH7hYl33EZV5B61ZODH
QNYAmip3twpZuXdWilFGQT1ArcDIjSvxelWwCgfiRAhBkeluap4GzvhOc8VP
XgI3uDh83tTja24uTumrLSh6uiUPHPfsfDwfefDRRx+9cOHCr3/961/96lf3
3Xffxz/+8f2WntpF54ecWnGFjdi7CbKCq1JghJdNtDdgdyMnboKs6iwq4IhF
Km04CUkgd5gcvrpDBLKin/97gKwqQG1inLy+hi7Wtw8unrRw+FkrcAOD9M1v
fvO2224TlyYrzo1yvKPGw097UTxGzyKVNCCLY/iivZY+aNoyyG2CrOzsdTnP
W2b4T33qU5aaQjw079y8S1XT7hgw6h4a7xdkxTl21sWxASZUhdK8VwAPjDPs
XMYGwcjz14Gdd/08t1ivB6GGCw5a2l7/DgTDIE8WyO5y2wRZwatpdzOuuuiB
fT+8R3wPPtgTJgTWEgUmVssz5yEf7PUE3fhYPvDzVl10Ae619NRVipQr26R3
SkY++7DV67Bw5vrrr+ft5l1/+eWX//znP4Na3//+9xnnM70Ygf4Sp1tIURUP
g7ED9XtVoMn++Xa7MSuB6vMiG2YXize7fkSzlo1nLWQdFo/Tg16PNaIig8bq
uP322zWjG9tbwcpjd7pNkLVJl3VMe4+QNe0p49ZyTdvFblthbbSsmIr6wm0R
sgFwTKq/3+pDbfcYwIHmZNYr6Ll8IAz5q39t7XOf+xyPmnU3CdViayEripqc
cd6ZFKTUe++9l52RqTns9QIWpRLWrBSPeB8ha959NatOOwM1X1bM7vVUJIsW
P8gS4IyhUgZ4jrrPybTlW+A8K85S5qpMd1u0YADKblRmaS06HQNZs66ZlNhC
M2stffE3SKmaAWSpGp33EkJ+o8hjkxdSCwpGWbKHBjhbbni3eTmGvRGIBpa+
yvtFw3a6RwVKbGrs+UbW9f333w9e/fa3vzXv/W6rkJIkhHH3CjLX51fQrixl
IFoJl2fCArEQkA7M2V5dQyMkihtne9rYTZA1OI6blujEcFmFiqVhiTEh66jE
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
4YdV78NSy3NFgm7ZqLSrtuSst9GFTp3Exb4w7GLfXDtFra390qSuc5l8si7x
cM+5djUVRqgUo+qaWTLIvFrLa1imXm+O3fjXlLH0KDl6ZbXGyBs84FRk2SCY
U+Kecxz+9XzYuQHF6qf8QUbWjBXMLGLOF49veBXBS0OtBLVmjAorP/0xZNV7
WF9ujaPao3y+y6/3AxVcUQHVlq8ZVVTpun/kEAlkpRdYFSHEcKpWXJSiUVI5
xqysmoZcqXV536UxywfV7ho6hqlsb6+ZtGyI2kErS0j6Li7SwSsQAV7AkfaV
ynbIo24Bpw8Wfb4bPMt8Z7eE3Pnr9le7wbN4Xo8++qgmFsj6k27wCGyBDGo7
PSVtLc4z4XdjWQob7ulGDK339cMVQ47PX13CpOpwIbY+BFneOojH+XA57Myh
sBKfeeYZLgorq5Zo5h0NnUEtcxKzKsH95OPmPC11qKtoXTJrOBiGwlzBgLQd
tqFR7rM/WFzd9q7VLB8Q+5i8LFg4lAVjPWwq+6XucdKZNcD8VeLuWTQjYa7q
DDrGHEOV2P6Gbul6iB/T9W9lYwgrZ9nvB7KqzVPxMt9X910lshYW2n5ws5E1
NNv+V99owPTqVJVc6IKlr+ybd/ORmUeTvJVa8rRqlrIMl2GkvYqjoqNIA/eM
KhAd6q9icVUzr4az4h7WmgZN0ZVaZqeudTqSBakk3kCWy3P2u/FdzCK58cYb
VTA+/vjjmlj4fZ/rhiUa4BUTXHdPYcNXy5BXIksJBPtwqAcffBAryExqqMUj
GFo8CBOsiyjM7eZgNa0IS0z4NfxuMRkspSGyKq8qsjS0YKOFaziU1Sce6gbX
8r3vfY8z59wspWWPDLa16HxTTTvXHxk84vqapR31GQ1dZqmFZ3lTTgOW8kb8
BAhJNWZWNbSaRNoYQZKU5ktBv9hUYirSd0ua+AN6WtcHPFr3BlmpRzQ1/G4O
rD8WqtH4q0vbICsz9PcVWQu9qiHIEkSTkbFWZOVVjRdZ+7Nv6GuyZUl6oYvz
u3YjuGqF+SpLCLimqp7i1mVkyS/gmj3Gwu/NPnnrqCkaoNUqB7WuVNXqG0xO
6x9jR0b2PHPfl5czm5hWwOTpp5+2PoPRKg0qKKT3h+1kwRnMKgNWriHqGLqP
KlNei03FtOWYH/7wh0HWxz72MXxMHsewgSrMuJQq5fSMwHO2yfrELzMCr8nU
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
yitGNFfJm4ZRqiN0ISNDdenwu9/9Lqdt0TBr43CXbLBoUAsjU7U/XuFFF110
9tln8xeOwXyXPvmrlgOI8TFxb7kQbgvmKCaZi4bK16uZtFZe1YhWg6x8bZxQ
Nimu3RITT8vwBKwxbv6svV34a4sEBiaiKJNdi31QKFNyhmRiQ18AKl/yhZUr
jBUplYR1iq0VWYvF0KqW28LI2Oehso9nFWQZRwoQni9kzYDVVGrt875V0wtS
vayM+Iw+FZFqfok4CN8ZnBHcE2aQRaXAAoRxgthhEFIl8O5kMayU6jQmEsIo
67rzlz2t96JEyorxiWWpe09Qy0U0Zu673/1uwMhbpDJz1shiXKnpsiqXwf/o
861+IENEltuGwXkKx0qTzEINBtVd5vvFL35hJKryykCW2xVZBtV9l5TMMnil
jtRVRcWo/MtuEJurMDecW2RC9/ve9z4u+e677+b+Qy2IjV/Mx3FJ1xXXFrS7
d+/GE7QovT01uASTzY3jcRx2O++882zuJiKk1oEja3OvhbD2e6VEPLLG2Gjm
qeaBksKj+r4/DcpsUMWGTWOdqou9xWVSmwGuQCnI8qe5GlpTY+DVympMgv1A
VqVWtQbXiqxmt6W+LUUCgC8IZFVeLfc5ks2zS71MKwfJhW/oewMNh/jyWRsG
cdVnnHGGxV727t2LZ6eS3GoGLhTieugS2mAiBZA/1Q0Qx9wx8VkJhCJPFVMc
x/oG2APwJ8uFbIdg7ImVJeh4oapUCwMazH+qGy6ZfbkbilftR69yzFZcLt4Z
LU8kSuOHDeurmwb4vX7ANJ4VWbGvXCIUTUNkGU7PvxVT+VdIsqHLyQE5W+6S
6U57u8H1YmvF0MLKwsK88cYb4U9yE/iLs/yJT3zCVq0mH3HJ4DqruhwW4uFQ
n3XWWWJHzyv6q7UiS0zVDoYi64gymkq8U0f4ln+dZc5KrAiFOmalKS885ZRT
OHneC3Cxw1IXq6/5IEslSDLpe4/Wg1dkNTCpXuGY87ImZK3Sjhp7VfOmi4NV
jI39Gtzzi6wxx7AhVXYePmj0vtmtHnyxRBoTBOBvPly+A4cccghfPHbGAWGa
MHGYQcl0NijEBlAyisVfy/FZJ9OComwwX3B2on/AijA32aovRsUBhVly1rRJ
wQSmW+L2JgnyFI4bk1EM+l6+nd5o/EELW3Fkg+21vqheoYWORZYLdpLTIjCW
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
s5VjeoUaV+EV9jC3ziY7yTHEvrqzG7t27br11ltxDNODFSsLZGmm+svCjeL0
eOF1112HN1fVTVmzO75I4huVaYMsX8Jf6MfG4koJ1txAOFrD5kOTab4v/Tc2
5YdEqg5axlRELBSV6XwvYd1U0quj2RBchrys+hUHtkLSUHB1DBcH6oJmrCOy
FgdS+X0ia0it/UDW0Jtr7K46Vm9i+XbLJUK4qVvBYePIrmuhjQu5hPPOOw/n
QjfQRvNMDWYKbMmiock76QMYQ0tkGRJXlmlDeWNQFuhL6MmanOolRNZ9993H
vJM5Lml9pwxeYo0I42BNs7AUSuU8eS2Pp2d9bdqVJjhSCOZkoTB9vngcEwte
/c///I+xd22zWuY9OYZBlgabNNbQ0sAzO9tFTDgjiNjWIDS7PO11ZFGoJceS
clhbGQorMw3xCk13aorPqM7asWOHK4aXXXbZBRdcgCmF2ezShjYqp80ny52/
4YYbTj755KwPjiFrCK4gKzk1m7v2CrzQaVLDQVJiLNcvOYkN1iYjIyya+vhw
/2oFLRVtfCXYXJ/5yEyJaiKxOyGWQr4bO3GFC5qLfb2vetqzHcAxlK3VMRyC
aHnlaJC1sHIxNGOtyGr+nQG95jjNGB5WUy1UXOplxotd5WS7gPEbwe8LX2ym
gAnLTH+RxUxhZmlcOWxFIbJSnMGYuanKogBAqR1Nu2d/2fUizQ6220WsLCYm
78t7iaxaSFk66Ri6rbjUpg++UI/SolgxhywRowcXkynaBtBq2rImFhsg67+6
wUZFnDVndCElngaba4IcJ81kOQH9Yq7UFtgaSMkczHJhAlY1QqX3l90kWPoY
yquUJDUnOh12UpXUnJ2bb74ZE+vKK69861vfev7557MhsiJpA1lAHjvtlltu
wcaukoYgK4uDyZiuuYfKBiIrVWd1wgknwK5gYdIvusVLqhwLZBqrbDavVk+w
jBqDqgZeQJp6p46FvjKVgRS1GZv74oQqKFwDVezhsqMMyZFnOIBrRVYlUp3j
jQU1dYcGWVOptR/IqsdvbKQxNE0dQ1PNKGJF1qaul5AuIR8TN5Z7zteb3+5E
mUAWs4M5gm3Ab7ECeMUMhpiiOYcqPu6D1pmxZm/ED6lQqlQe1ABGnFDD7xgJ
TD3bUvNeepEVWdpXeoV6iB7cPrAMQOdk5HySJ1iR1fTtkiopEZPAuwuFmFjp
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
tmPTpWbtWS1Q238s6T17S7s6GCtXtmGri0JW1bvyk7UKUbGA1dGdvO9974Pb
V1111R/90R9hNYALhgYLKlrYbows+1ZY7bMhksiyjpZRWBDG8FHnCo2AMogU
EAVZFji1KRgKA8MNA4cR6owhW/5lLxVZmZ1P+dMgqwZl6WtKzRkn/ixgZci3
CljSpUVWfFlmEcolC2SxPbB67bXXzJUOEofIUqs0yB8LF8iALOMcRFYNu6rp
hw2yqpGYZjom6XBAVSzj3keRddNNN4kse1WArK1bt6J3gSzuhWfIX8vvWDP/
C1/4Avr/FIKm3PIz5Igjq8IkyKoe+NmomZIp7WgKZcdPuLkOG1nNAB96ePQp
xe8diC3rg7Kikyj2U4tFqaWvD0rDsNqGZ/QpWqf3hfdTZqe6mGopfpfn+tnD
aFmHh6zwqvFx+RuXdnGkQRZ/3/Oe9/DpZZddhk1htwhnrCxBg/D+tdGnnZdr
dVAjEvkLsuxhYSyWm0kVTUX90mCNUex0ISPanCAGLKOP8QKyDCXNoRS9WM7E
Jb06HcfkVUVW7LVUXUjdBk2h1I3J5GB87zUb0YgsfVkcEBUr5R1Sv3SIrBSi
5xIZJQLwRVZswxrAIMQeKT0Ko1aJLCWxDVqF8irtVv+gE64hyLr99ts//elP
B1k6skDWtm3bUL24m6pY3h2BD754iXz5y1/GFjhzQk6fL289sqYO0niWDkMW
i6wT5vNztlW4EMMwQ3t5nwg8HPJV/QgBVvRpiTlI4Lm8K4yzok8rzhcZMHDC
/HrLTQzY0vnVHoaIzi45eD3PxSKrYqoB48oumdo40mM6gV3vfe97+UaeVV7B
jBRYwfAx9BGemFZj1BAksShW6sBYNsFgJOcZrZas2RjlSn8v8DEP2vbTVj8G
gwxVDJzPf/7zjD4zgyCbJeIt9i6y/F51gzS1N7VZqzCtTiVJQkOt8R5fUyYK
YwCmyEOtUaMeFauQj1CxXn/9dZBlUMQUshQnKbB8IY9TrjZ3jqKVgCttQPUu
keXKWherThSapGN76LSoQMUSWdacEVnw6pOf/OTu3bv1ve/YseO2227j8nrL
bIYr8Lk73DUYiPE4hazG6/4WI+uIyNT5TKHpkChbIOIWyKsM4dFvWVbc2uIo
huHw05VdxYlaYz/b8G/DnwZ3lbRzvWOqAiofNTmMs5E7G1l1WRVRSVCWjaHt
gImixRpMVMwHexlAKsaL3e1NNjQsAZJYvD0h6CbY8sCrUVhQNCGgpkLXHGEr
vTOQPY55zXyLyGIAssynqf0utVxOTGkKnwZZhjdYdL0GpYsgqGKpGat4JT4h
nvka3tB4sbQKLVv6q1/9Ci0L81BLc4aWFT88TH64K0ZteSvgo6JVA0QDsVHf
e+0KLbJM0tEkhFe2LxwiS987yLr88stBFrxi4a677uLy6r8yOVRkscBF5uBs
+bFpGRLsrfFlje5ywnyfUpZnUO5IIeuQKDtsZMUgaizKIKXRc+b6NKIlxdG3
rK/h2QSrR5FroBGv0VSI7IouRMrQr7l+QnZpV4qnyfQ5PC2rbr98fgu5BlnG
ZVn7nU/Xr18PNOy2zBvf7vbgy/Y68Mp6pNqDiFDKzL4la9jMjELtOFNjfK0z
fg3z5mg66oEYe7FSZDEMARo2o5Vn/IrUnElF5ViFkkFeab5Fg1LFSmH2Wh0r
mTgm8sRtlYgsW+rYgNUiNkDJ6sqIyLKs3wxkcVnsAwuEoyaJrKpHqUrFWqzI
qgX91LUqsswrtKyfyLLkuy0qTNURWbt27QJE6RbN5VXn5JrEskZsG713797f
P5SMEmwobwayRkM062HrBgtH1pQsFllTckhkVWfOqq5IYBOf6TZL5kd2Le1z
HvMVS3o/3rI+GKySx3/ZWAWm2pXu6AVfMpYZpOa2ohRf5TSG03wr+tJ8i0LW
svkZi5lcqMgyHEstS2FjHjOefF1MgIUhxqjRjjNMy27R6fylzmNgjynAKFH8
NVbzxU4s9GfrVQ5iGSiwZiSqYVp8l8ji74EDB6zHla+YgSylQVbyoKNEBVmO
U826lKOJGch6UwjdxW4X8ecHWUbRWzp+FFmGPJkUwBXj1+nFUtfSNqym31Dv
SsJOk6eTVGhjG0TWl7/85Slkwavrr7/epquoWFdddRWbcUqccOo8e7bahtCV
7adIlTkjp41mKGMKyFosOmYga7ZUoNVd1AfqwY8UshplbFnpaXgEpfmuhoGV
KlHD/JlzpYtWJY9AqGQYAmdlH161rE9drHSNqjZDKorrYatKNqpcVafWiq4O
/8ouJ1ot65hjjjnqqKPe97736Yf/4Ac/ePrpp998882ABf7ovHL4GNhpmBYL
pvvpU9KXZUah3ZBBkDN6iZ6yvycrDfHiaFZpYHcW4CF7oTYw1kCWCYO2KUwY
QyJXjW0ItTT05EOolX46yXFO8y+Nx1iCGo/NFKEcs2pf1DZ77tRSpZJKNloH
3g6wVid2LsDgAX41/DEWN1Ze4kIT/BBqxYVVFa1a1i9aFoahyAqvnC6sjiwQ
tKsTDEM0KK4wV945BfOqzHXiX64tN/2aa64BTWf0vb0S2W6kaCUVy3XW23wT
SXVm1xSMvd5F1luPLM98rovD1JdVp/bUl5bO97qHHvVfv32ur7oziqy5CTlS
yLKMw1yXrSOyjHDgB+qNZy/exZhmIEKVyfwR1theB8HSMcihIssi59DM/MTY
dEGWG2A2Mh6NR9X0Y4EjM6hRHtSyrNSnaSm1jHFKKfiKrKE7Sw982n7pVBdZ
4c9sZLmjcacCUO3r1VdfBVlpa2jkvNtX977U0gLlyvAzn3zySfQlp1yrRyvI
UgdLamFc7tWd5ZYpQ6ovC0VLaqWGg33tg6zrO+Ge2ioaLesrX/kKjDLeQ4WQ
fzlbzp8zf+qpp1DP1q1bB4US5KOVJ6AqtVyuyEqP+zO7zvXvIusIUquSquFV
laW9X2tZ585avXq1pSFY/nBXL5pPV3a1UpfO91Y1kFnWx7ZJrTcbWc1mkSDr
hK5uP4YhyELRYg2/RUVr48aN1lOCG1ALS0Hz0JRA05CTYGhGrfl6YCTISuEF
o9Ot2cu/wEpkgT5VKZCFbga1GJWoCtg7jBrpZLEanWZC8m970WYMshJHqgCZ
tP2Kn9yiynG5jyIrHXZSwU9k8dG//uu//rITHVnAyjAJd2+CvoIs452AMMhK
SBV/gykhJs1q/JWMkmANr+yymgiHzBiaqnPXXXdV3zu8uu666/bs2eOM4bXX
XssRuDWWfVYh5GZx9VzDHbzzzjsT21wBVSMJ30XWW4msyq4pUgUUS0t9eNaA
LDVkdC3blvGjVnU94kd/1LKBtrZkLIe6MQCnZFHIGm6zsrS+XdIFrFp2BmQZ
ppU+hgwHw0RfeOEFg7cZMiw4XZjYA1UpHni9STYTBFmM0ATAq2jJFijHp4xB
i26JLAPsoRbqBOMO5UFkOdUotQSXIROR6oGvvAqyNO4SqBD7rk4RLhBZWIJY
hb/o5JVXXhFZaTldkeWkpIah3i3jHGC+IeuKlzRdvYKsSq2I24RX7G7Q+xBZ
VvYLsrAK4RWGnshCy7rhhhu4/lxVroYqlnMEuvi4ktxijmBuWvWxW5hOajW2
oTKKLP6+i6wjK1Owiq8+5HHh5JNP5qbwAlqzZs3xXSUEzhYgDH9Fo8gt7VOi
3mJk1ZjV/LuiL6Qc29BMQ+cN+YFoO5CEJxlqoVylXYXhnSYjSxVJwgi1VJS+
LJFlfIIOc53ksO473/kOaAJKqaNl8wv0t4qsNHU1mssACVtj/NdeXF+R9dNe
EiYqWGxzr7U4G1kW7ksLMGcMzdOBVCZE26gim2l7ahiqZdVoVb6a00aH5Ndh
zVneytSnkMp4rSG1qoWoiiWvdGQlKCuG4Re/+MVU9hNZ1nC4+uqrjcvatWsX
H3ELuG6cWDRkbmLmN6Er22zYsMGyAAlm4K+FUEYd7+8i601FVoOmUaNsRalY
pcgcxju3zIwGdZW5zsdVVbKKrHzjArWsGfreopBVZ0trdH2QNdfZhiDXNEPr
OahooUDecsst6EvO9DnctA2feOIJY64MfRdZYM3yxTz86EsYfTz2KW+VLjz2
oLdSARuYhmP5LGvUYDqBLBS87373uxYylUuWKLd0nlHlf1dEaul7VyNK9Ltq
kl53OZb5wSlkWcwhkfMGZaWljpWydHkpqQdogQhnTtVe9A6xO8uQnF/31SJB
lq+DffMlrq3aX1UtSyWtViK1sp8RWfAKFeu2224LslCxbAe2c+fOvXv3sg2X
12kL3YM2PNJtyBreULfeeiuaNs95vO7mdICjUUVrBrJYfhdZR4RXQUQNZKrE
WDGIgV/SFe+a69pmoTZz7zASQ4BoZc1PyO7L+niJpW+JL6vhVYOs2IYWcwBZ
hjpAMJZZf+WVV0IezbF0WzCPxngqKyroVjIaQV8u+pLR8vqynPXTRa8/X/1B
BztcstIyA4d/+RaLz/AtxpFWh5UOokSVV2S5Qe3tldgDkVVVLFEzhaz4qVTP
VLFSPJlPLaEcXhnBpTontNUDLUIlJzk3rGl0m2oYVmTJIo0+pImTT4Ess6FV
tOy1ij0orJwrvPvuu2/vxLIzIMsm0ZBKFQuCoZJxF7x01hkz2UrHo5nRGI9a
hR/tipxU93uDLNe/i6x3ArJUnJaWGHiRxV/uwsaNG+0DDrWsvVDnBBteLcr9
PiVvHFmVWiv7CP+4sI466ii0LLN4uE084QwWK19BD2w959mNS7dPtFWwgiyj
qRmbFtoSWc76WUrLdB7HqYYhG7M+AGSw2DkUhURdLok5sbYSqNkgq9brqy11
ktFs0YYoRVPIevXVV2NOata5o7wKspKKaE0tA7QsgO81sWmjp4S6xW/hFcAP
/3ovYKoiS3NPYTkbTLnf7WgPsuDV5zuBV6YWYtZVZKFi8QK69NJLL7/8ctYA
uoMHD5q17bSs4VgwlhvBZUeXZhd972pWxi2Io1FkndmXyRpFVmXIAomxpLTB
WiCvhshq3MtLSgTmoiRDdYipoT11GDIDiRUR2TiMagi2siQjN8SDVFYC9D6e
fvrpS7s4h0YdmispOXMDs3FKm6oBCZWl4VX1UGXjoXq2ckLSrmKuMwyd9LQp
GLCyrvKyLtmQ17HV+XiSLUxq+FCsthpvoB3EAGdjNgBZKldJ2GGZj2yjg21o
owqrLluZgTEO67R02Czx8+bB6W8x4lF8GUsQj5ZBUDUb2iJX6b5aA91VjaaC
HJxkNDTUsvBsr+M9jixhBcFyKH1ZtVu0sR9cE/RPrgO/jgv4HzvRMLTXsx4q
dad8yr8qWrWfTi32blCWLQux9YxtuPPOO7HpMAktk2U9Uvij733Hjh2sv+ee
ezDPOTFLmXET7YXkXAkffeUrXwFxCbiaCsqKfhVMJS7r97tyW2d0Jf5Y+buB
rFHN6h2FrCGvgoI1a9asX7+eQY3ybEH+uZmN6RtkeTIzkNXAKrvPjYVarSzZ
iPW3LARZS0r3bZFlkVLWX3DBBVgc9mtGeJJRtPQPY/ehHaXNTYMs1IkpZEEn
YMWI4y+q2ve///0U17ITDUe2IgFalrGsHiRhA2Iqupaqgloc2zhRGC1LNUns
JOVQ/SqckU5JhU7xGbML9YxpFQ6RlSD5WonL6qxeGX3aev6DLIAQZH2zE61F
9asGWfYRa7ILa1k/kZUIUtvZB1nWIwVZV1xxBVoWyOIjWMdl5zLatsxkK6NJ
uQXPPfccTEMfS8nxWIXB0dCLVWcME0oqsvi7WGQd3zfpC7KOW1i36MgRR9YM
Xr15yKokGbJliKy6TcWFiYGozVu2bEHX4qaceuqplRizkdWcz1AaUuWYS0sK
9hBZK0rkqnJIZGkYHt+V19YJHw88txv9n7c2DLFhPW9kK6gwajDfeOZrcy6T
lO3gKbKMfnfCUWQxfjmIbS9AFhswOuyHaOCWyMLS+dKXvqSzywHlmNKtrQkT
d1YqB7Jg9Lu+o7Sqrw3uE0BV3e//XKQiK9N/AMfGhUZkYTaaqpOSgOnCY/6L
SUl2QPOsRJYxtFw9UANwhFIcU4GVvNLTVX3yUcaskZWEaAMbQBaKVuLe7aqD
imWEw9VXX43WdMkll+zcuROzkYNwI4Is7e70buO+oOVu27at6ZKgihWTcEZc
Vo1+t03MFLKmfFxTvqzFypFC1pBXrn/LkFX1lhnIqjtW9UbPFTeFZ2Dz5s3c
oNWrVy8QWQuRIayaT2cgq/6EKWQZur+ydPbhebBphVUdYBf/8qTddNNNEMZ2
9sZv2zMa4NjORtQILs03kMIoCLKcTLTxFn8BFDaOR+CwSa+2PgPIYlDrnGGQ
chBr1xhBoX6lsyhaVtxZpguJLDGl6I1PdfdkHSZXukFWTMUUL4VadtVpkBX6
aVemV4W/VGRJA+PE+BUAGVyAGq6AyIqV95VOol9VXkUTC6+AnuEN1fcutWxf
aFN7g0iNcNi7dy+P6+7du8EarwMutYYhZ6Wmyl3gNcRt5RawDRaEVuFQy0oo
aSQrq1MrCTu/M8hqePXWIGtuENKwKGSt7D1IrETdFVnGlC4rZWqmkNV8dBjI
qhZfdaRXZM2A1RBZUuv4vjXY+3sBXHCYR52RAqn0OPEwM154s/PMm9FsgVDZ
ZZU/oBFkqX0FWSwzIuyHiN2nI8su8CLLHTk+o48Bq8fMrGo1Fo8TQGkt6trS
G5P6fmpWUqu64mtriUwdVkm0vCqTxxRZGoYVWQl613Vmyl6QZWqktiHHMewf
9YkfyBUQTYZX/WknIqu65ZW461M2WWTp9DOvMMgyIRpVqjbWCbL4iyH5yCOP
mFHo3IqF/ri/NoD79re/DfHOP//8aFBn9j1VTd6Z0rKijH2s77DDX4yRGb6s
46YlTKsV3Wds3zAtSDkiyKo2YOXtm42syqUGC4vSshzm3BcMwwsvvJBbCQSW
LsD93nzR3IRMGYbLi+O9TgKuLL6vUc/8FLJW9vUMT+iis4wpRaQWn+7atYvR
8dhjj9lNVWQxTBhT8CSNugSXyTUpxpsgB5Fl8RnUKliEmgGyLAOoHmUSIjs+
9dRTfMowZDMMQ1vq2PzCDbQT06wnQaSwIsjSARVFK6T6x/lSNa74r1gZx5S5
NkHWz3/+81c7SZ/oBlnpCGZ8ZhpbqyIGWbbD1vqzRt89nUiteN0Ti5WgiHjd
o2Ulr3CIrGTrVMOQBfbCrrfDCHdQHdVqz7bt5nvRrs8777y41lM8WcVpyv3u
5GByqN8gso7vq8oEWbN5NXr8I46syqu3BlkVSkNuNMhqDlt3ZKTry1q/fj33
8eSTT144svItyydk5YT7PTiyyk2aTa+YL2HaFLKs57yirwttqlEmDe1bwQLf
eOmll6ISWCWGRxqGoHSxhuHDSoOp1II07nTdiCxzDJMVKLLAFEdAPQBZYNCO
h0acWm4U0DEe//AP/5Chysbqb5YKtHePWUISMpaXjveaZhhw6TyvyKpdpGMq
Ciu3sfWqcaFBFmsMcgBcNcihQZa7OGOYAqqSXF8WP59fBzdElrN+XJD/0Am/
3frw1X81A1nVMJRXGoZ2XNWdlRnDrVu3XnPNNRb24TJyklx8tdYgizOEmeyC
QVcDRKuWlWD4iGuCLD9NJ74Z7vffUmRVw/MdhazGLqv8OeWUU9CcL7744o9/
/OPcSmyoZdOGYfNFy+dPSg6l8VDlVMOitASyP+worw4PWWm1A7K4Ytu2beM9
/tBDD0ESyx3zCkYfYOA8+OCDU8gywadBFmNWZDEigJ5hV2hu+t5FFgvPPvss
mgbGCwoGZqM6lW0K2VLEaU66Uh+a1IqRWEvQWK09OBJZiTWtXVPdgJWplBXD
kPWGjNZQ0swzhngGRXACmlpG/psXYFl1LgsUAjJBlrN+XBCTBFnPz0/wQ407
DbLiy5pyv6dJtHFZ8Ad7cPfu3TyuaFns+Oijj2oSchmdddX3zt1BD+T4kA1k
xeJrghwkUq2T7EdSriLrY12jvcPwZU0ha2r75lCB1QkDm86DH5JOQdySQYH3
UXmTkNVgJHgZmn5KXbmiVO1jgTti869169axHC1r+VhQxBSaZmhZoxIWpRhy
6qNW1q2aLzWIdGXfrWN539DQcn+cvDOGBsBb948NeMixMhg4PMzWbLdvFwOH
EaTqpQ9K/cdJwwQ5OGDNZdNbwnpGhEVH9Y/FrhR6QOn+++9n5KJdcARbo+od
YgORhTmpoxix2KD2o8x0JtGYfDuxxk+e8lbCKlnSFVwpk2Uou/QTWaGWalhC
32vPaI5mbQQ5EBefNiynCvP5dX/SifoVV8N/9WihRFVXvGRrkBVFy9nVWIVO
F6JlJS0aLcvsQnvrwCLeQVj6muTcKVVBri34wirkhQLrNm/ezFNtK6ih410u
fbRvaKi12IQ6CDH0rneR9ZYha0XfVGu4MR+ZsIOiZcjcbC3rSCGr8kpkJVdo
FFknzpcm7nR5Z96KLM7WOIdji/AppgTIYqRgEqov8VRbjoAhY9OKeM6tscDw
1DAEaEEWY98O0U888YT1UobI0gnPwEF/YzCiY3AQxrstQaO32LCGsWYm9Q87
sTWGA1AvvRaZtKztckSW0iAr8s99Q1WRZeOwtAwz1r3+axBpkoPMLK7zBSkx
wZmjXqpTqVzBHK1CfVl/1knlVaVWg6x7uvbQGoYqWnqx4JVphg2y0JnRuNjL
Khmqx7ZJssQQOAV6u3bt0naIfpUyWYlkqIpWDMNRZNkP8e1CVgOWbLZYZM3e
+G1HVkOVoXnIGOcFZFq0vQ75O4qsxtJ8g8g6ab6Mmn6NftVsn0oOYaDesLlu
0vC4LlXH6CweEtaDLJ58PfBacJDB6CyGm9VjtP70Mycxh0GBYuZKxqy1LlGK
Dhw4YEm6IMtXfJClIseo3LdvH3wzMLtWS+ZQpisak2/Vmuc7MV5CJ5JZ2+wI
lJrafQ2yqpGY7hXCh++yHgvrE7U1iiwNQ8s+ODdqeQRxHe8ZBONKBlaI+FLv
ioqV0KyawpNA0yAr7nfFsjOf+cxn7ujEgFI7roqs7du3QzCOgPqqMZ6JD9iF
Ic+RYRrmQ1Spag9WXo36sj5WKmtFMXsnIKvhz+8AskZ5tbx3g8/1LXKyGcOc
1wfUMrZhdSdL+xnJCrfZbqspZE1tP8qfFYPyMpEh4oKsbBAH/tKu+Dy8Ouqo
o4455hg0LtZjINx8880MKzBiDA+UsL8hK51JTIiCKhCDlAUUMJAlzWwkwWbs
yHEcsN/5zneCrCQYenw+sqsyViRj37zFiizD4JPDG2pZljkhXs7jDwuTGvyQ
JhSZWwy13MwuYE2pwCGydHxlwpG9TNbzh9t6LDqYBT9T/VirUMNQDxUfVV5F
sxqllkEOf9hLRVbSohtk3XTTTRzB9M9a7lXFmFO6/PLLjaSCPNXuq5k7DbXy
7yiyDi8u6wgiqxLgdxhZ0XZGkcVY1rvIGi6j6soJJXfyTULWDK1pVEYNyWzv
RyJLU5FbGWSpZW3atIn3sukz6jA2o8d2Y8h8+9vfxprQj2Sqmm5whoDJOEEW
5pWRqOxoLxi4BGGcLkzwlT52SGhs0uOPP84RLKVee1IkeUdnkZ4027ymJI5G
IvvWaUF5ZSy6f5XajUI6GUfqR0lOTOedIEvXVgLg+RaVQKM7gqz08eHMwQXQ
UEESWVqFFr+CWo2KVUPih8hCT/tyL1/60pcw60BWTYuuyMIwFFncHfPZ1Vc5
W149XPAbb7wR22Ht2rUYDtAm3vU4shLTXsMbziwSZcyP3nZkVZIEWbPlt8KX
1Tid8umKCcOQ8Y4leMoppyzrSuS5b4Os6hlbLLKmZMr9PlqoYbb7vZqNiezi
yhuahWHIEwLNLrroIh5jXt92YoUD/EWDQln6xje+kcqiOnJrLWUGxcGDB1W9
DJ0CUKYoYsIwviqyhGGc8ChXzu9/61vfchY+DSkQSGLNT4PhM+g0KmWXDnm+
mi0DoszoAb2XB9I05XHLtHCtzcX+nyJJi47H3plBFU7PWeKp7PHV/GqADG24
DjqyZLjsUt0SWQlp0FQMtRIq74yhjXXsrVPLOBjkUJF1ySWXsIZv5+44jct5
induKDtu3LhRLwe0+fjHP95Uaagx7eFVQ60KN5cPL2HnzUDWAqk1iqwppLyN
yKrqTf00uKiOr5UlVnN5X21maSlb+iYha0iboenXlJepp7pifnj8qr4hY/xg
x/dtDfnLQ8KnPMNoWZ///OdBDVqTTMAEQ/+57777GFaQxw71JgNaZ4+xYPsw
bUad51bcAnQAkPHFstmFutyT+IOguQFDWzkAH5WreLCtVCxn7KqTSsu6sKxL
z5BkZVrYOxXYIOvHvehjT0nAJESbrijHEi1fkWXMg8jS/WX4WQo4cAT1K7MU
OSwnBpChk8iyFIMlwlS6YhsmBGuILKkF3wxy0JcFsu6+++4777zztk5E1ic/
+UmQtWfPHpHFSi4st8x8ovTp5kx27NiB7QCyQNO6detAljOGsfLi3Ro1A/0o
yHK98aVvL7IaMhwesqZQ83Yhq/Kq0axCnuV9P1ZOb2VXA4GVhkWx2Qld853m
i444spaX9qkJJdWyG0WW35IJ0BUlb9rjVL0LsdZfQh3YbMOGDTzzDASsBm1A
XU9PPfUUVGF8PfTQQzzzeuYzm98gS56wGVoTr/gvfOELjK+KLIiX3GrE6p2W
E+SjIEVnuMqPInysQmDJLHU2GKiKpc8qwaLVQ2U1QsVIVLes04WpxiyyUgWi
IsvIUpHFudn3wfgKHfvuZbkt/vIRKisgglSqVdYU1btlNGmgZCRDE/MQamkb
ql/ZJJqXy1133SWvLObQIAtVilvGJdKLxS0wowFdGkatWbMG8rBg/CfgMjqr
6lShVjOHqF+rIithXTP6GM5AkCgQWfJqBuJGeTUDBVO8moEOZVSTGcoh6bRA
0B0GH4Z611xJNlxZWhPWH1WVmYUgq7IlEQhDqbSRUSfPlwouzb1qG4ZRjdKV
czi+07I++MEP2sOCvzxve/fuZRQwOkAWGoKKFkYf445HHbBYqU93rtkfhow6
Y2g2DZ/qyGK4MbIYpI8++ijjRe+TOdfmUOuYYmOGJPoA3AN36Twor8QLomde
4CB8tfFFiRBTd0oNhzTZMcQ0+T4eIQpVipG6WePLMljCfy2iBbX4N6k6lq3Q
D5apSTZAH+Mv26CaghquQ9pMJAA+OlUir5ppxEotizn8cS9cVTuCfaYTQ0kx
DG1UsWvXru3bt8M0vv0HP/iB+QiovrxEvvjFL0KztWvXyish42Sf1fyassln
z5da/a/mG2aDw0OW5FkUsqKbHRJZs11Sh0RWo/a8cWRNHee3BVlT21dkVdtw
VNeq0qyv+lUVHgyRJbsQzIRt27bxvmZAgSY928gPf/hD1CRTSxgCPPnJoLGM
CbzSl5V+rN/97nfvvfdeBiCjBsUgviw+SuKz8aJADCUNqxMD6plnnrE+c/pQ
pI6fHQM9voYeW0o8I7JUyQwcrcgKiyqy4s4yNl6sNY2nE9+l8SiyLJ/FBp6M
VRFUsWzlozOfvWx9yA/hUsAi8KLznKthtEO0rLTOcTJxilq1u72HsiNYYxhe
ddVVNqoAWZ/97GcfeeQRtCxnCVmGV1dccQUK1erVq2FLNCvnxFOAtHGqN8iK
GVirOryTkbVYaQZ4OHCkkLVYNL3TkDUl9asbZI3yatTf1cwe1oAuG5zxd0mX
v2NmNK9dnnmsOUOznNdDk3n88cfhFeMIEOnOjbPdVoYahikwbnodY5AxpWFo
cT/9V9bUMjcHYV/T6+AkK0WWzqvoTmlyqpfbmco0/clmYirGXUWWPvxKrcwe
yqu0cG1qbQVZJh6yLABTBod/NUW1H23oA7L4y2kDc+ADK3RAwZnM+kEtMaU3
3snEUKtBVkKzFHbnmEGWfVevv/76K6+8EhXL+n58euDAAaPgWOBfDEZDp3g9
mRKI6MWagaxKpIqsIa9+N5DVgGshaPp3haypoIXlh/LAN3rU1L8irple5F9D
Se0km6YVPMa6bR9++GH1IoOl7fhszPYTTzwhygyjQs1gVGJI6pOHY1aDj5bF
UOX9buXAFKhJPBXHf+655+677z7rRbCByApeNNYqsmwaaIyEjnfdUKDG8E7V
JIMcgixBF49W6BdnV5CVIzSVHxS+yIh3UyxNow6pXLDqsvXh+eHokLwF4oMy
EBR1C/KIqf/QS9W1qh+ev9afkXUGaHFMQ7M0DEUWpr197S+//HK+jlvD9eEc
2Gvr1q3w5LTTTvtY36CQvxDMBOcKpdECWRVZo7wSejNar75dyFqsL2uKWkcK
WVPyO4as2XZfnTfM8V0TQ7KhmUEOdqxgAWRxE08//fQLL7zwhhtuuP/++23u
HNsN7Pii532dZBlb48ErS8cYN2XhOBCEqoAmwOBiXxvoWHPYxGrrzEAetoeH
II69OIJ2nzODMEGGJNrBaqV8qc1iOA1W6ng3tKBBViKyarBEGl4Y+Oo3VmRJ
vxScSRlSW1QYJMZfrVG+y9itVzoxPD5lH/jhIst4j0z2sZBgrcRrmYqYdJ6v
FKlBDh6HY1rGocZlxTDcs2cPB7ceKToz9xSqnHLKKdxiwII6bTW/FOurvBql
VgO0UV79biBrNGRixvHfRZYyyqvhvyFVzrA57aGW5b5sY5U/bEORxTOwZs0a
HuZrr70WgFjhygAqlg1TZyixwEDQo8uAdcbQmqL6w9Ga+DfIssqcjTCc5rO8
vIanWhlKHYoWyGIbTUJ7rWYesCLLkHu+Tjd+/PN6zhOaVXuw6harYRLph5hg
LX3+CYxvlCvDTVX/jHHSJBRu8ip9WtOklfWcJDYyeFGtMgoU1Kho6dFSVK6i
ZSUJ0WV97wY5OG+IBnvnnXeqZQVZ11xzzRVXXIGihYXIMblxvBE4CCahvSTS
Q6cJBz1rQmIDNmpYNQbDK+tlvdOQtVj3e/PpEUfWb7v7fUqGyBo1AFeVFMJV
fYPF5QO/fXVnRYsLsjAMjz76aP7lUx45bApe608++aTRWUCGx96GO7bLgT/o
OVpVDF4AZUsLA6XY66mnnkJP+/rXv65qkfrMVmhx0tAsXbjEXhz8wQcf5DhA
TzQ5IxkcadkprDe8gYOwmdxIFeX0qnDybhRZ0bKCrEbFMjM6vS1UsZKyrXnL
ScZvZlMe62thG/rV+uE5Qy4F6AYyybUBNQDH6dTkTafmw58WiWc+9bKauKxP
92IoqcjiDrLAd6G+YlSy3rYFIOWsrr+q5a2mMDUbWVJrlFfvTGQtVqbir44U
shaLpt8WZAUvs5GVLWtku8cf5VUOK7I+8IEPWNXhqKOO0jZcvXr1JZdcwuh4
9NFHIY+Klk2f7V5hvT5Q42C3lp0VTmzNA7LQu1DGGKraMmpQ2I9wJshy2tFW
LxibHBZIwjG9VZb81ZHVIIuvZhe/DiDoMNdnVdvryI24qoKshHWlxulQxWL3
NBFLuCm768ISWVbWSkXB5E2zvWXkzdFmgUtn7QXdWSyAms997nNRvWrG9JBX
CYowLZoj6A0TWTf3cuONNxqXJbKuv/56js+R+WjTpk3qVBDm/PPPr0GkQmw2
sobzhkMV69xe+JbG85NxVAdy4jaHaIrhln8DJY9WkVK/4kgha4Y0Sppf/XYh
a7YMZw1yArkjU7A6pGG4so+bWjE/Uv3ISnWFWfLrhNLv/phjjjGmlC3Xr1/P
W9uCMNDJInsAR12IAQjKVG/UkViDHnXw4EE2ttwfC1ALChkAaZFAuAS4oJY2
Xcr92Tbx8ccfR1Vj2aJ5Zu2l7Rd/VZDMN2RHy0pIBnmlYhM/kqGkgZWSeUND
XpNoE2TF8a7FZ1CW3255GWPdDahInHzNRjQw3pNhd5jJ7zImwWm+z372s3d3
4hqtRdUtCyrqvEqw1j29GP0u9IwjveOOO1Sx9L1j0dsUDGTt2bPH7mBbtmyx
rSrYOe+886bIM8P9Php/NQNZRrBHUmI0YIlCpYaPfGhMqgJWx1rjkgpDDtvN
/juGrEqbCq4jjqysX3WoRMI3jqyTuhI0Iisx8PYI49Hi8eZ9jVln7T54YrAo
OGL0wRaQBS4YjDAEveiRRx7BAGElWLN1xfPPP89eur8ciQAQ4oEs1DBD1lNU
2W56fMSRWe+8no6sTAU6T6dqZMUbuAdAEgKRKNDM9AVZQ14l68eSX+paHqFW
00pwly53Y8niYcsXNTUf3CUJQSxYNsG5QlGDiqVhKKwU/VrVf6WdKK/MT1S/
sr6fjqxbbrklcaTwCntw9+7d27dvR7PavHnzRRdddMEFF+hp1+t+zoQ0yBq6
30eR1ViFIivMkUXJvsn4PaHvpBOmNZQbRdbSXqeqtuGwrvJQ/r0hq/Kksuvw
kFXXVM9SNeiG1DpSBKvH4VuWdBFZgZXls9C40MF27tyJTQFk1JrUoPgLwYAS
eIEz0kAtC9MP4Hy3E7ZhY6gF3yCVY41hCNawHzmIpWOcjrSWICoTxGN71ieS
QR+UVp7JhkmOTu8wdTCRlfY6wiRVsMKrRsX633qxVZDISrUrLT6DK8IrA0ct
A5hY0zRJTKh8iCfBuCCwCM6gHdnlGV4Z9qBhGGRxrf6kyD1FNLHZJV0q7GAo
siyWhZa1d+/eyy67DFihUMmQShWjsGYja0ithfOqtquIVyrkmco9rByo2lGl
UN0yZmP9IpvyvIus5aUEXwOfxSJrSoKs+i0r+6qkkWhHb0zV+v9liCx4dXQn
rF+3bt0NN9xgXiEmnvnRKFpoUI8++ihqFWyRA9AGo2/fvn3oVDAH8jBC2YyN
wReYQlswAOmb3/ymRqU9DVPwykJY7GLj16RFm7CTksW1N4Q1Ua2cXCvMJNpB
ky2F+6ZULJvj2JMxXVy1NLVG8412m7WElypW6jwIq2Qmpm2iaYms4VJwJe0u
EZMQfKl3qWhVd1YCtBaCLGBl6Hv6RO/YsQNkoVzZ3ByMmEiornXuhEzpWkNe
NazLEQxM1TBsjL4Pz5dGKWp4FQ2qblx3Gd34uK5b9Ki8i6w3A1nBSL6iUY2O
OLJWdIX+jIHXNkS/snwWy5zA+eeff/XVVzOsLAsDVeAJ+AJQ+/fvN0bRCAf+
/cY3vgHHYA7k4SNghXqG3gXxvva1rzkMMRLZEkUr1LKtocnXFhlgpdk3zt/Z
CFXRNrRpoCUjVI2QxFbFkFTPEVnJpx7VssxrlpMeLZHwTlxaB0yvlzOYCWzA
ErR8lvFgfq+pPc4evvrqq/CTn4bKhCmnF8tYNZUuEASIrEuTecNRZMUwTOF3
DUOQlYisPZ3s2rVr27ZtUMvgK94+69evBybw6owzzpiNrClqLZBXIqv6rIY+
paFhWJWlgO7YY4+d6rPTEOnN8Fn9tiOrgdXywzIMh/OJHmpIkuV9/a4VJSI0
4HojmKqThiu6NEZutCUdbBCGisXye9/7Xtg113VvvPTSSxlWcAZkvfDCC9YM
h0IQSdQcOHAAXoEjUMZmDE+sQtiFUQnEWGmmjyUL2PLhhx9ml3jpdcUnmgsq
yiIBoq4V5cfGPXrAknQTPUrdTGTpTaqFIKo7K4qW03/p2lO9Xs4C2AzIIDRP
JranLqzqvNJ/xRp4ZdtWqMVKkWVfCVUskPX5TsSX7r4U0Ro1DGcgCxXr+uuv
R7/avXu3f1G0LrroIs00/vL20QNv3PuojFJrIZZg5RV45BtPO+20U089dc2a
NatXr675+3nnrix1nCp5qnLFYzk6nzhlUSKzufHvB1krjpD7vdHWcsxKpCBr
2SB8YtX8Eg2HzavmlFZ0tf5QtOqkIch6z3vew0o+4sG77LLLGGVqUCIrAaVY
hXbhYY0OdsiDxadJeP/992MwCjTbJYMvNkP1wrrUjW+sI8oVOxpTkYgptaNE
TImstGRN6nTCGFxOWGkKQWgwpuhWYyGqayWytGb0OHFprQbnAlKuQVeVgVsa
rfFfmWAIsgCXaYb8uj/7sz8zUl1Hlk4tnfBQCBzF3z7lfq+GoQ6x+LJMiN67
d+8VnVx++eW8aOxZf/rpp6toxQM/A1mzqbUQXokskxDR6GDX2rVreYQ+8pGP
gC+X/dc1trrL85n3dcb7qKE36uA6glz6bUfWEFb1ZN4MZOVb6pFXTsfJHx6y
DOXiJTjXhcHb0FDPg/0NVc556/G4YnTAHDBlf2GUAbBjvxvMRtSne7qGyIZs
2XCKzaCTjdoRu/VBMM1DtoRvUAu7Uq++yEKRM2jKboBRn8QOtLFHDBj5WZFa
IbkWZ4hPTO99zbaWS3zRf+3l74qodAk0cwlFoi3DjN0yvEGTkPXii7+vvPKK
babhlZ/CZC4RyEIpQjWCNp/rRDsRCoGskGoqyMG8QsMb2NejqWLZ3f6aa66B
WldeeeXOnTu3bt2KlnV2l6R8dterS0f6jCCHKadWg6yhRVl5JbJsu2lvF6hl
SXkrzCfbupbksuz8aZ2wy9pOIBsHWd0Ly9HQ6khZ2sXqqJtV0DWerhrfVfkz
yqVmsDe8yr8ZpJUSDRwqeLOy4q4O7QYjHm1J15ewSo6Zb6xfhzR23JBdAYsy
hawpGDZx7HX7ep4B15Rbfjix2KCystEdnTes0Q46skRWgh+4GjxCDApGkHXg
//iP/9iUQOvGML6coAdftszD6LNXu9qCJqENRoGYCb/oYOhaKG8cB62MXdgX
QyzcEBQhRjxLesJ/Omhtnz4UoVYMwwCnKlrqWv+lFycEZZcos1CDIRAp4ZUv
0m6N9yxxDnqxjCmFbHwXyOKHG/QOaiCVf2MkpllY0naabJ3kRBtBWn3vN910
06c+9SkMQ5GFVYiKBbIuuOACjcHf7xuqNlpW47CaoX2dV+TcvqyW62GUs5Bn
90nWIKhRReoYd5Dy4IEgoCTTGjm1l1RDDTA959qnTNa5/UknzWv3mQFbtYXl
nQmzpFQfDY5GY73q+Ue1y2/xK6b0saGWNap9VcN2qPzwb0Vco0Q1Sl2z+wKR
tVhZNZgurJ9W83C2rtV8lAPOQJavLa9JPFr+lV1HH300RiILbMCTg8UR04b3
/jc6USUwNhtGgSDDIVDJsA3RqbRu0smdbfTMsAZqQTlMSzYGXHbwicKjSzwx
D5ppOsNrWa2fzRetwsSXVsux1mR+qZc45GsPmkowA7cMN60WqMt6t6DTv/YC
rzQJjZFgd5Mo4ZLeJz1a1RUf9/tsZFnWL02i1bJuvPFGI7KuvvpqVCzu0fbt
27ds2QKyzukaOr8tyFK3SWhWjc6qoVZDRaU+7VoBqFgobLbVUCSbylst9dxo
iYnTOL2XONk0S6t92uBudLw3hAmdho61hkhLe3twRfFpLy/pAHN9Pa5RC26U
Yw0qp3C3EGTNTcgUsoZq2JTaFvIM+VbPtvGxz0CWrlE1UmvRHNOL+hXIes97
3vO+971P1Ystzz///F27dqFxmXKCtsBwc2SZQGcNGX1TUAgoxfeOpsG/bGAt
dBQzqAXEWImZCbVQtCxQIy6sLa/n3FqCzhXKk9p+4u+LqALZ/6s21hk2rZBd
RpfpuTLf+T/1YmKOni6rC4q4OOqdQIRXMQYVkGXt9592LXhefPHFJ598kh/L
FQMyKEjWjanISqbhaJphkFV9Wfa1N0/n2muvFVlOF1588cXr168/pyvf53yf
C6OuqiOOLEdrkGXlW/6NMlOB5qd1cnDUVaW4Zq5Pozuxq60kfABRUJYGZzFI
/YE5Z6WxgkPv6G9wkiOnsEDNiZvrbVKVroZmrk90h78l1Kp0Uu1cVVozLJ/f
YAIJS/PpUCdcWrxkbzayZm+/YiIbsf7wIWZHd2mQZVEaC9qv7GO01KxAlgVL
AzHXAzG2ZCxcccUVvNkBF39hlyqT5YLRoKxc+td//df8PXDgwP79+/Vl3Xff
faAJ1QvEWUGFBdaDLJQQ1C1j4y3SZXEbe9bAFvtT/M3f/I0MSYZjknFqqmDj
4xoiqyIuuYeNopX+sKFW/PO1SCBcgk4/70VkscBKfVxOSnIp+OEAB2sO1MAc
Y+At/VeTo2slh5ppyAZN9Lu2oYZhtKwhsoSJg/HcrjrW7NnAN46svAcZTWk/
gTQzgGFUM+QzEjPQmg2irS3t/E6xPpbPn6vy8UZUzOx3lvPUrZffWH/mxz/+
cX+XqLfTEAQLyup8aC3uFLA4PCuiK4Sbnx/mrCoBA8qK0k5ieR+oEN9dQ63D
NgxXTMgUsprjVGTV61/NvSOFrLg3T+pbSIMpeVWDZIwyFWh8EbdSZPFyZ6Qw
ZBhHX//616UWQwz4PPvss0afonEZGw+4GLOgyRZjtmRlY2jGp5qHGJXGawEu
u1rAB1QmU6FtcmFAgvOJTf5gw6I6pVhtw+H6IbKMyQdZBlSYp+P31pxErUJd
7nY5jGHIykTsc2SjQVAvNeju6sTM6CBL0dkeasX9bvHkIbJuvvlm3h36siqy
0IdF1jl9HT858xYga+vWrZzAhRdeCDbP7dKu0/nCGoNoL453H+z6JGc8OiRr
2EOUsSYkNbrZ3MQkuyuzJu5fgRYlTduT0xtND49xPZrHdFZfrLW2qfXHOo8Q
9SyIqL+6sjq2ZIZz5g4aqh8pw/CNIysfeZGbagxHyjCsyFLRWtY1DzJUT7XW
GoCQStsQmnFxeEqvuuoq643DKywdBpEOdsMY4I+Zhk8//TSKE0oXpHrwwQed
JXzsscdY1gmvx8bqEHwEsrANn+3EkC2UnNrBMCHoqSZavVKZYaz4Cpoapauh
lr4y41TBlLDSNqy80hUfl3vmDWs7aXjFX+s55MQ4f34aVwmDjksHbVLMwQD4
FIQPsproLIv7Wdc0yPIWgCy1LF4l9ta56KKLjCNVswpVzu3rNiwEVoeNrExr
1sgxzjNuN6cJduzYAV3h28aNG+HbBRdcwDlXxMU6q/FdcWgIgege1YMUZaZR
Y6pvfEmZwmtGcb7FeU9pppFYyRZnWmY/m/zxs/qGRM00QXa0CpDdJPmNzQjN
SG90mGaAV3GYLxZZi5UhrOoJxIIbFkN+g+73vGJ0P544v3ANZ5VcHmBlcCnI
4u5znXmVM14cO2adMNYYj/v27QNHcgl5vBMWHu0EIj355JNwjAV0KpQri22i
nqGAsYaNRdYznRw8eNDCgAZzqv/o45JIOueNVZAnIVioVeMfGgeXTEvMg4Ua
9GWpXFVHlgfXrjQ6K7k5/9xJis/YUfqf/umftGct+8AuL7zwAqCWM4aVgi8z
DSuyajnlWiwrvEooKQYmNIBXqLt1ulANpyIrfhtTeCq1ZvPq8JA12vA6daHT
/szfpb6tzauLTx9dJkNTtJCftq0Tft0nPvEJVDjjzYwBc+wnOkLjdMX8KMdm
LI9O8y3p476aiK/R8Z6j1dEatc3BFdBpnKaZmvel5lLVK2yrbjmpJKTNATs0
SOOjXiyyBk6pVndqZJRXoU3UoWjRTTDDYQc5nDJfqo8R4UzSz0JrEXD5L9ts
2rQJVYHnzfAh3cI8ezZ9FlAoV8DqiV6AlQiyoNZTTz0F2RjCHgR8oWiBLPUr
NDQ2kG/2rdbl7l8zel7uexoaxx6wKDHfgiynEetMotAzKEuTMLnP/jucMXQu
gN2TY/gvvYRX1lLm6zgfLVkTfGAvv9fIBEtdNciSWlPICq9EllXfb7nlFs1z
s3Xsa4+KtWHDBofzWV3BmbcYWSn+3MTEJorDZhxf+9rXuCAo5/t64fnhXz5K
FVYvSHbnX1by2+uEqVV3VDLtlG2+khdBW/isrgorWGPIO6jVzXRZN0rL3Fwb
kVWd21Hqmrzspt6OcWKB3vKS5xKoIvDHYA8FoHlfVM+cCc3E6NAyjTUqtBPY
JjAd2nyLqlrjVlo+P1JiqMVlfaMOVZ2qflTRfdK0xAG4atW8chDupfpUnWBa
mm5/YimfFXZJsxO74vBO6EAqVCwDtDwrHk6GiTFFSY7jGeMJ1IsOagAO2GFB
xckKNs91YkcejEfI9tBDD93fiVnV5lOzC8t8amoPlNMhb8X1OJ1CmCYWtHE6
DSO4jDKtmTvqVzEDA8BEcNU4B9OiaxkH+4VpEvoXLYtdwBQHZBu0MpYxgdEf
9JmjbqFrxZfl8LTLYXxZUUVq6HvSojnUDZ1oaqXjKnaWjiwNk7O7UNJU8xvG
gjZx71PUkk4hQFBWv0hk1Y6x0aziB1DdCq++WUTfAh+5uxsYgRygsVISJiNA
/x4k55KioZkRwGWBY5Dc2FqM0O3bt6t/mr4kxGKdaX5GN6tDMtPrw2HemKJ1
/i7xD8PpQlGWfMkogRJMw1PsVN2sIqu+d84ZzITGII1jzR9Ysw+qqlZVsmUl
FjcnljP354dRjeJUNbFqrjbbV3wN6cSaJnI4EqZV29Bd/EV8b2aiDdYyiZ6V
bMAzwJvuDzphoNkRRl86nIFUNjccyvd7gVoaiahbqFg6sqCTyYbYidCPj+Ce
6pktC6WT+KoBVAFXrTgaCzFGYtKoo6GFfk00aW1ApiQI39I0NrMw09CkwlDL
WsoWXOVkWMP2nDPjDt1Ag46/IMuEnaaccoMsTScNQ3lVkWWEg1ahyHJUntPH
JrHgk6wBslhkZTYtyKpaVpDl8BFZXyvy9SKAKCsDK6OLq1SO8en+/fvv64QF
m8exIMEaylXVLtctpVxNkuKhlWm8NbhuWJ1RUI1nQz3D5IxXrXqiMuQz3h13
K/uwh2XzY7f8N9UngoK5fuJvSRfZHkVl5fxKwg5PoyzqTEGMRNeopDmhKdbi
DDR56vf7Bt91XiDpBjV8t6HZ6vmSnzyqYq1a1aZcDacDhrtURSsb1Ei5Sq0V
XRCyJyavtO5XdCF8ziEGWSpaKl1HH300V9uOhzfffDNjB2Tx2PAU+bzBH5gj
oJ7tJbx6vhMrnZoQbeFl/lpByxRFDvLAAw9YEN7igez14osvShir1uge1+kU
cEXRqgXeYzPW8FHtwSZqNLtU3Lnw077sTHil711k/fKXvzQiS8MQrHEQGwCp
dMFbRpm+d0MdjCllNNlqJw3Cqvs9Q8+E6M/3Au5EViKybKyzdevWKBJhTpAV
BC0KWaOGYT6aQlb4EwR9o8iocjXM7WqgJ5pGD2KgsnxDaTfFVbmvSMVdbQUS
q9MisXGsaX46d6DOZq2MzB1AuU2bNjl9EN+aTKhzB4mB1OCSXWItA3bJ/BoX
CehaMV8y8OuaGE18UeCTEFxh28TiJoatmTvIzW1K0Z7V1087tUg9VJMLH7de
0+A+XqyVAxn10kc3WzU/diUvi1Xz49lO6Es9vP/970+YH2eC9WGpXsYdCoD6
lW9MHhIULV1YGIkWbTD9GRy98MIL/rVVqwWK9XgLHLtjGB1hGS7rxoMsFa00
QDR0Kq7yCq5qOVaJMlaVq9FKDk3UxE/7rqx1ilDHu4ahvLIcjbnSxmZwELZk
d06ei6N+pTTIUrOqPVh14FRkpeIWyLKsH7xyKDkHxwj6xCc+IbKiIFXaTCFr
ShpeVbjl3wSjntcVn6naVKg1Qxp9Kenzo/tWZUxqVcuRvzyHvuweeuihhzt5
oBPXKA8WcY1hNt/uhF3c5oH5EuPUJLWwLgpw5g7MVddat3M32q8qHAMnRnqy
LA2HMCJCp03FUXVl13Hd+N7j4alHyJBfVZp2xbxSYasefrDDyait1U4l9Xaf
X2R9Jxd04lRC8wqzI7mvueTLi/Q1vTSGamM/njwh+QkAmR+l6e01gVogC/2K
lRyf82SA2CNG1wHDhxcT99EsQh1TOuEfe+wxgAOyAI49cRCphaYEKDS1dC7p
EjeQCSLBOmPjQZ8lAa0b/78WsSViAhIi/6mIlKtxC8JNSWZQNRurZlUd+NZw
MNwdM1AbUHwJKztc2JHHel8WeYCKQJux7OWybDt/g6z4pattWN/+QZYp1exu
zRl4JbUs7nfxxRdv2LDBgskBTkXN4SGrgVVVtIbImjIMG+svUq28QGmoREWG
yFL8t1JLacij3mVuvjHMyRrjVcsTG6xVVY3lAxMSxOXIig1zNU5r0X5njZ04
SGiKWHPWwLGfa6sRV5321SBdXvJlwigWlvX5101cRzzq0ViqQ74epDKhKlTN
DE4mcTZ0Ir5YQPNE/7yoF0NZWA/iYIi/Md5RVVOt72qx1qmEqqkKXu1iNuNf
LUQNRtQqVCzUVJb5Lq4zI8toK8cg7xRGH2PNx8/OFFXLUkfC7pMzVq0xWNQ6
6vYcTKMcC42yAa88u/OooRllGosybS8S9hlANfKjXmqolfZjTXk2jTpJiE2Y
hOWwjB1NRaxKLYs5WEjZgg9pD8TJP/7447yXgXwsO7M1q5ZVkZUyWSLLbmLG
O2mw8MxrFV5zzTW1hLLvu6G7KdGkh9SmqlQXVtWvKrJyZCs5NOpQbLqhgiRw
spBldx8eZ9QerI4vbcNARhFBD/cSHOVfP5ValkUyMoc1hhQ2x1Efc2MedUvD
RVTV/DQ6m9/loZwSNc89/SidlPEdBMRQz3ROXnrppaGZ5mc0nFT4yaDW6cQa
OFPDlpYPSvDVSTc1E91xDf2q/lbVmxoiFSUtiVHndRkEoAlAofNXlMkrkRUl
jYU6t1tfrK7JL82UaMxSbVutUXU2zlkXIqd0Xhf3znXmhkIPe+gwjkyXY6Cp
0nNfgNV3e4lhaJEHKyfLLpOgkxiYKu6GaIKUgwcP8hUgS4cY6HvuuefsdqHS
Jb4aalX5z/MlZmDirAIrIx8S65UJx/jtRZZ9c0BW0gkNbIiKlYp/xpqyI4Tk
ijGaQBNPppYd5OFvghyccvVJrtSKD9lIklSe4TX9yU9+kscbWF3fCewCWbzO
DFgy7l3aJHJ7xozhQpBVDYSzBhmLQVYlT5hT7cRKmLhAVZCqxhV2NZ756p7a
X8Q1FVZVRzKYWYVKsDQbhEWNbhbjcUikKFoJ7FHyL1tWFc4t+cu/Ho1PNV1N
D7FuQKZZzS3V6rTckBMHN3ZiMN6uXbucDNWlZtLBeV25odib0VUqYSI1MrO6
xWrxn2q4xaBb20sqafApB+Qb0+H37L7yRhNwmylmnpmwKwqYa8I616u81ZWm
VvlG9mnnsM788pexAPkZL1xb6AExABFXnivssOIK+2Ry5W2XY0BpDcqCME7S
JceZ4QwcxIWhU+Yao6uwgN1nKzF7ZNgNVlhxtGoqsqV6VKVTNQCrj92SyDXs
IfqVkQ9WvKnurBiGOrIMZkjpBtUtbENoZgHnVKHnuzhDHkX4w4OHNZfypGla
AbKMewdZqQCfSEt9wtqGqUf66U9/GkxhoV933XWwy5BLXspBlvl0osY5o0Qw
LgpZPhXnDrzucXEMkfW1CWnc5jHoZmhNCWz4eh/w4Bxiw6jGzd5oWQ244rmK
a6taiDKksRmDl+hXVYTYqIqV5QDNLZuVPOSOlxgmiM98hpKUq1pf5l71rVn6
gwUfldo2zgaXiV5zZhnEqZBndkatJjOMwxAvpak3a2CGql18/uo/MfRqwH/m
K5O6Xstx+NyOCieGzmbYIWRW8zy3K7rLSoPxzuumxQE4PxbDBOZz37mG8AcV
iwv4za4sA1csxqDX1s6GvphYw8b6spwTNOU5RfYyxycZ1Gose8W/KFHsayV5
6efd1ELUkQWpXNDoGzKqRshn6tCvS+GsOsnIGpmTTqwx9NQAQy0bgTlvmKZg
Voa3vh8nD68A1G2dWMkhQewiS1+WalVNLZRXpuoYRMpx2N0IUhjFEwiyPtWJ
WhbPociqEz1pn+qbaLFSrb/RANRzS1xQDMMpaYg0A1mNj6uafhVZYVRDsAfG
JG75PKJDZE2tr/tWvn1rvjTs0j/2RBEVLV/o6l2mimTLvKPtwae14nKVhD6y
4MZaN/5bM1DkZ0JB9LDpalB/4yXYpKwy5A3NNe8APsAByMAD1nifYqPFgos4
jVh1tuh1TQx/ghkwSBPFUXOjnNn0UTR4Q9j6YEMtEyKgGaOAX8HvAuA8BlwN
1BuGoYVluAIWzuJOeX1UhICJipBVaAxsMBYL3EGb9F2tYFGrkSfaa1F70JfY
hR0TGG9P2KhYknA4P1inCGuEfJok1nh4ViZYK/0vUnxeiqbRakKwNAbrMgLZ
+BbOiiHGK88+OHd0gh2d6EfDcVWx/mS+BFl6bpO1p9PDoHdVLANKIZjI0jMQ
tfys0ttrhvt93YQsBFmVWhqGozLKq9nIkloR1wyNQUk1xatMEYZadfZwBrKq
Byw4CouiXz1aJKaiubQam0JJFgkT37++4t1YtoQ5PuRRtIKvCP/WHWNyOgbd
nr8GCOlXeaYIoMtX5Ex033HaWtwxTuVbUkedEjXAxhJtPHhgbZgIL9MqxGq6
5VTdM3mVYLM8yU1E2UeLuJJ9gSqvb8YLw4dHxfaFoAZcWJCBX2SGoDODhmOx
QXJb7PjAyIVghrVnAhHagBrryThzJ6ykikcAGmmoqlPIxhYJ8dI81KOVCPkK
qwQ8VC+WKpZu/2TcWESU9WxTo7xMhTbCgTOJSWjgaLSsGIbyil04Kx4h9CLv
72c+8xm9WIaPKhbLapSrUCtN7Xla5JV50JbR0B688cYbdW6ArB07dmzcuNG5
GN9EFVmxE0fl8LSs+q/U4rnaNyFDXg2hNATUlEzpWpVX0mk0aKFSa7ZhWBWn
GHTVrKtaU6VKjNDoWhU4UiWoiRfFcRReZUu5VFFZMdgQL+Ykf7U0n+rEbJRA
LDGT358vRlRWVPrVWrWa6nZ8gGa+T3kRB2IoZkDMjAMzyHgs0X+McI56Voub
VYlyZbhFffkmNPrcLmyMlR4TnQ1djpV8NSoWmgDDhzvIr4AwFqxLFSzuPtec
S+FvByDAwTH+066vVpqlwigIY+tVZw//uhN95gmOaubvEg3FX8tPWf79z3ux
BH2cWrU0X+q6Sy2t0TiydExBnl/84he/7AQEYc3ZMDGxEO7lL7KgX02FrmKc
g/4rq804owpSoBb3NPagfaJNLbRDtL6IJBVGy7J4cvKgayN7kWXtd9ZjGPqm
84aafhvbMHEyUzLlQJiBrGZLV/K9Uwga5dVhI2tIrVFeIVJoSK0pZFXLrnqu
GtdWnOdDH1e0r5Aq5FGfcY0mW6CX7WNCip2qDlUksl7+WDUlyXG+07VHorOp
LYSHTxVxDbuLsiSqDPnmdz3ZixpjLdViDc+kXKmnxfzMrCjP6t69e3fu3AnZ
9EFh1hmZk6f07PnFyiCYy6pkzpOynl1Q7bAxAR0HtOovmgDPAz/N+nvO4skr
6zZw5pDZsCsVJ0u4R8lJnHktkmAHVbaP85w1OpF0HNX85b/vG+Xon7cjqrVi
wNeL86X6tZJ+qH6V4xirYG4gsHr99df/7d/+jb/gyzYTtchDrexXvWFOOOrg
srcONGNLnhkGgv72z3RiGFvymlnQoy6vTMpjoXYB4yOtwgS9gywNQF2pThSK
LGOzeanxLjuvi2pQo5YkC6HWDO1rBrJKvaj/z3XG9852pzc4Mhx9VIbgGt09
0ihRMQBrgMFCkFXhU3WqxvFeYxsCqEwLRrOqJU2q2ViLnLgmPHm6F2H1vxQx
GUSYVK9XVd7i7xWPMtAjN7DKlnGLVXFNOCayzKrTulFh0OejulL9PzVlT34G
cV46+MZd48Gw3HoyRu+44w7nRmsdD+CGBWo+msGrUM6MA21JltnLtzwH5MwN
puKEuadOUsAxvt2KMZyt3ertM6iNlgDOqvNk4MdmTFBoetZDAKhiQJRO+JQA
te98grgES9hi8HzCGxIpyteFVHGPJzEQZP3617/+t06g1muvvZaAK7a0HrJu
Lk7PH5gor7/t2rby7QZp8EXcL9RmOJNcwpTGqh2irffOnTJHWGQ1VQuM2wmy
uCNO/eh1F1k3dcLNRSHnhtqlQhdlnFe+sJQj5cuK/taUvON7D4msBjhTyBoG
t+uKn6LWKK9qxHuzwQxkVf2q+qkeKxI0xVWln1xtyrFZHVx1ftDtM6subWoN
geS72UU9UY4VWdGC+FsVqmzjshDz38qlKG9Z6THzUVSv8CfUGrrFkLBLp02a
/bmQIyR3L0USqkFq42bhxi3g7sCZfZ1XgVvDX+MTfMszIrZu3YrGxWPPEGDU
OFPDFQYpmF2cFQ+GY4p9rXClfiWXjLmKHqUKFMe4M4NJ3Eu59XifLCyj/aVy
xbKMqrN1/3cvTuQZjq7fm39rLGhsQA26VF3QeQ6vfvWrX2kVgqlf9cIya1xI
O0ID2q3qbJJRKj+ovwEulrngXDFrvN96663RryCPybnyyuhQi7ja4dFuRKzX
PPRlkUarJoNwTEv5oWLpdbectVM8e/bs2bJli/7Pc/oSytGxkyd71oRMoWwh
yKrxNixMGXoNsoKaKWTVwAZFL8rUcaaItFj3+zAoNGpVo2K5faVWeFVVrDpd
qF9IF1NMRamShQBHpDRkkC1BlgvqVDLNSUa3VwETpw2y6lc0WlYMRhu7ix0r
RxnU7bJEqu6vOMecdFPjcpvwSljpHXqhk+rh8YuyXIUdOU+bCbIXh2KgOWOI
MsbA8f5yL9jXfBNuLuYMA5CRxRPCledHQTM1DUYxmpI961WorKAuslIAudbK
a8rxqYA5Q/fT0ufUYnq6s1S0LOdiBEICO3WGm5WcjQWaMQmpzW5rVKCEThVG
vTpfwrFfd5LNrOuuoz4VHjhbfiMXiksEl+QV19N4dSNF1ZpSzS/I0sRWN2Zl
Mwctsqysgg1oaA3gitddPzzrd+/enfrJ5/QllPWfiyynbD42IVMom4Gsyqsa
KHjv/EnAe/vIhCk0WaLB92OjU1U0xSGWvYaxo6NSg94rr6bir6a0rGZN2DVE
UyzBuj5rmvVyJobbUKoDKpiqGlG18mL9VS0rEd3Zq+44PGyq1cUwDGcqQ57v
RX1JT9dQj4pUVUqsTYneaTjGcmUgC2CHNTCHC8gr267ot912m08CTwU/Vrc2
P5wnyjEosp7o+n8xVAURC07bZW7ub/u6xGpZqUOVXJik8umtSnhDIjxTqTh6
VOq9VNUrPW7UjlSNXunFuPTKJdmly/0X88VPEyBat/Hgv/nNb1jQze4cgSYh
uOYaQiFz/xMsanGeRFhZys+Fe+65R6uQvzqydG2ln060LHM6QJahgLxT0Kws
oayiBcSw9Ll9+t4NA06059l9dBZalkZiJp1TT+mMgaR6STS0j5WugknprR/5
adjyzkFW1bVGefVGkNW42YfRCDNQFg/VYpFV7bghuPKpSlTKocSsG/qs4skP
teJ7r6pRADWkUEWW693m+SJ1ryle5ev4W+1Qw9HNfwGYDJZt27ZhVmzfvp2x
tq/LR+Y+shkgAnfcGkaWs5mMJj7laKBMrQlAASu2hE5O/DlRaIZy9WUlciCu
7Kp08TfudxWqTMyxUEtUGU5gEp9JNJp7WnNNv5vk19RWOGFUXXZjZbiNBzew
wa/jfPilUJ1rhaYEXm7txKxnrhVKl252NSurJSep0CiRWlvYBX3v8WXpxk+J
JxhlQfVEOxhHeuGFF6pfNQn46l0qRef2eVvxdEUrq170uN9Ttaa6raohec78
UFK1rHvL/OC+Q/msppA15X5/48iawasZyBo65KvBmIjQzAY2RIolWDc7JK+G
yIrU4TzKH31c2bHO+g1dUpkZzKfDGnejytKz86WqWKk0FStviK+hePAAMD+E
BSMN2JdH68orrzRwlNHBe9+odfbV28wC95qRZRYAo4l7xL5AxtgDlChz/cwZ
RPcw7WVY8iV+rUSb186A1ig2uVg6pTqxmDLAQJcUCzEP3dj+XKpYNXpBszHx
VBVZ1VpskOURAjqVLtZ7eqxB6eJsuR2MGmF+++23wxa7UVixAeYYKaptaDJO
YrFSrlMPocVnaqpOQpQ5spHJ/GU5MfAGPGgYbt261cozVqg7t9RhiGW3rvTv
C2fO62s1nFsyd5o8jkTRJ6uimS48p6/NtW8Q/yle9k/LbGSFeIeHrMqr0Qj2
IaxmI6txp39rfiGIKYsv4KraV3A0Q0Z5Fa1pCK7wx+CHQKyBzPfmy7MDGTXr
ht7y2byqTrDGlnx+QlCi9IPFja/qxfGlHxf8xhtv5Em75JJLsES4mzqp2BjC
wBAgw7V9oMtpYoPPfe5zjCkuAqgRLKhGYE0VS2eUlc+Nc0iJY+McLIcuspKq
kyby7KiT3MAn61AJDZ1UaQwRiGWNIZ3/3IsBDFGT0rErVp4LlWNKjEoxVRko
6Ewk9Fv4dTzbXJbAxCTxSNWyrGTucqoKW3bJWCzW1DasNcjBsBb0N4vG80VW
cjA0y1AK54XVxC7vZNeuXUa/GNeXwk1mXijp/pAU+8BKP9hQaoRDVeqUKY3o
MJC1b34Yw76+KNaikPXgfGmQNcWrUWTVSIZQawpZQ/XJNYtSsUaRpQ04A1mB
0iiyZlMratWURtSsqQSLMjbb6+VeU8jSrHPZQHH+ehxOj+vG0OAZ5r3Jo87d
9JrzG1GZTGnhCNwUbj3KGIOI4cNAY3fQpJ4DnZwZhD8Gf5q7p6IVsb56GkDU
zD6W3RGlxRk9nVcsBC8QoylOlYk/7TWoEuPRfdWLRJaGnv4oxY/SfzAirzx4
eJXN/CLOweru3CY4A0w01qyNHDFqdBRZ8qpWihNZGIOGbFlkqSk44xSkvFK5
AmJ8xJYcpNYQTgmIVGpy5jGpZMDNqFQrBBqobAvCVDcy9KWRmnEfslUZ2n33
zZQpZGX30bnFw0NWePXIfKmYmkJWjVioBRymDMMZWtZQxWr850MJsuKzmjIM
D0/LajxRz3WzhI0pF8WpYVHjoco2KkVD9LnlDyakyfX7YREu8le/+lWeees5
MBa4m4a0sTGEgVcoP2piFh0VWahbcEzXN9tAIb3uWHaJ/6ydtpIyo6dL/5Vx
CLEKDbUSNaoxCGSoyJJUUbF0uWfiz7m8VAq1uLFed6klr17vRC+9GIzt2SAr
vSdEpd+YHjpW9GIUwAF4xWWMihVeAYpqGKYZdCLeK7I0Fa0zk66Fxr2buKqW
ZQixcQ4s23Ka+8IBTe03yssB/s2uIF7TPyLFmlI20AgKo+hFmQGr0GxnL+pp
KmmWOgFrMk18Kfw7ypamoPECkSWpslk98qKQlYVRZDWMmoGsBIImLrSGbDXu
9+rIatxZ1c31ZB/eOZtXQ2RNud91czW+rKheC/FoVcuuYdSUoRccZZcabjrq
y5pCVo6WuAjBxbnx6PK25SHkSdu7dy9PNTfoya5QzIsvvihYrA7Kjfa5YvQx
iHhg4A9IEVDm40AntTIn0WAdyNIDX4uFpvxL7SLBLiYSauWxoHWJvlSdTlW5
Cj3icZIkUcOMEY0jS2T9+te//s1vfmO8qAds+nnVecawqxqkaoCmEPLwgxer
7cV/BQEkVbIIMw+ov73pNeNHqURamyxUFUtkIfrhAQsrbUOTLlo1P7E2ENTJ
L9C8j+GYmyVXKD40makfwBOwkonFKHhsAKZksyTd7t27tUNR1UbZ8jYiq7Jr
BrJqzNWikDUV5DDlfh96umYjazQE9Mk+CGEY5HAY7vccXLKNImsYLjVlNmb7
P58vo9FWQ4mfHxB5eiyzOxeZUbB58+YzzjjjnHPO4Wl8outx80wXkA9bsPJ+
9KMf8Xt5KnjafVp4pHmMue8AjVFsMqDF21MVWe1LZNU4hwSl2z41beKdItQS
FA669C1BHMd4KqvHZAujVL2qLyuBWNksUe7wir+ahE1jrwZZrgmyorzxA7Ga
efIZ14Y02E01hUa5RAm+Aj6GuJtFKDqEjMhqFK1MF8aLZT1ADq7X3WJZoION
uWXcVh5+BqORXenOE53KUFUIcF9XXjjFfv034ZQO6lrFJebYfSXjeH/f5iZl
mhKSIeX4e1/phnNvV96KHRPM6fH3zY9mH43jGn67J1Zj6T14VKlmQtC5Qn9m
XSmmarJz9VOJo7Crpt5UqzCYmoq/GgY5PNFXV1iUTLGrxiRUlD05iOBym2Aq
fvLvdXk01ZB0WasthGmUoiZ6YcoqDNaCr2ru5aP6Ra60hIKbfa9v+sBfHhVe
iNaKR+fn8fP5t6ILdh+78zO5XzwYVnLQbEF/YEsLW0GbuKTM4EvdPJZZrzGY
MlaJdoiilQ6DThTqHDOC3VDSaqAlcD0E81/DtJw3rI3mm9nA5BKiaKFl6fvS
FA2jVOrSi5ADGj5q0IUM5CdwWaCKs3iIDiWtQlUsBq8uqTAkalXTTFlJibb/
uZckRGtj6ssyoh6CcUxe0Frc3GKGHmvYxVa2FYnp/qByUrNgoqJUb08DrhCm
ybvZ32WHWXzvm6W7DcevUPKL7u9b3gSG+wYJOPXgjX5VkSUM62aHgSyzco4U
sqbir5qVyRM8PGTl37cSWY025copZDVzhfl0sciCP3rd+feZvm0EC2gC69ev
t2sYViG3VYdeXPQsc825p/u7yjn7u1QdHSBsaTErS7UYINpUoDJYawpZqagQ
xUw+WAFGHppsWJWfqFhO5EXp0hnuLF60o8RiNYGgJhLyb2rFqDtlPjF+fgv3
aXIa1Moye8FzBhoksd6jjixdWPIqKYS1KWGDrIZaCXWIRRafuYoW4pwgf/mI
0coNtbQFN5RhaMVdv9owe4+jcZqqp/nepp1E4+4OKx7pK2GGGAoPTP6txh0/
RDqFLWFj40Wv5BkNimh49Y5F1mwDsPk0iTOLQtaQVzOQlS2HfqrZyJJaGoZD
628hyBoNOp1CVmNv1oQgC7P8oKuP5+wht+yqq6469dRTly5d+tGPfpQRp9dd
xzvCr+AO5lnl9cfTwjNvihyfAhkd7HrXLc8ifCwaYwqhUQ1Nu64GcSn+aXE8
86D9iJXVQKvIQhLkkMD4yqvEJCT1BlL9phOW3Z0dAR0LNViLfT2mKIv73a9m
e54K4JD+8p/61KdsQuH8YFqp1t5eDa/0L0mP5ERrEtbmXzrwbQGWIAcD5zgH
LqmFbgy8FxdJV7TWlt4wdT9zG3UZpR67345UVmjH1QS9qiBVkoQSD3TVyz0H
tx8ia+jCGs4DNk6q+KkqspqNF4IsS6O8SciamhkcutmrD2rhMuRVEDSFrOE2
h0RWnUysEQhDp/ohDcMQqXHFTyErni7XyL0f9DmM4IsLyIt43bp11m3euHEj
w+Sxrogi99eLzB15qGs975Pgg8EoMMqIY8IZQ61SzaBWPwZfNRAr1UeH1ddT
7VNqmXpscy5Vr5rLrM8qyNJRXxs3Rx+rGTfmCQqrzBXq4EooRY3Fqgajmhhr
dNfzXfwQhuGnOzHvD7H3RLQsC/c5RWjtviGyskYHuJDRHrSgX4o/aBJqfrIG
LPBActmtf8hfTkmt+GBXAER1mjHCPWVscuMytLmb2l96oqpBOiX/cb5UDS0u
fQ06j8kuQdaQKjU9OVLBVZ1XzWaNmlc9XW8vsqbir5pIhqGatChkNbxaCLJq
9MJsZImpaEpS5bn5ckhkVTpVl/sMZI1ubGyGE4WqTzxUu3fvXrVq1Zo1azZt
2nTdddeZBG0Vd26xaVO5Xz72bsB4ZBhyHGhjnJU1HEAWkJE8RjjUcqCVWqnz
KZTCq/+zl5q4p60XB3tFFgCxw2ksSuvJVGrVwAbtwWQgqmKxY3ilwlYj7a3f
DqbYAOixPefPUwpGrr32WlQsqAJMUH5qFFajZaWJQKNiZb3LKZtsl1VVo2QX
Aiu+EUULLPBswHxbERklYjqnjT/MKE+5e2dsLQekPN9n3/vE5lF38suB7DAX
EanZHsWszjNmmvJPe+HfGIZSiIM0JGnC0avSVScBhx62quZVy/HtNQxnaFlT
Gc2LkoqvhlejyMqW35ufgzOFrKe7ycSk9UVZqoHuC0GWxp1mXZUpZGX7ZkqR
T5/penKxzOnxQoRRp5122vHHH3/eeedh1DAAWckTyIjgkbu/a5wai5uFb3fN
BHkYbIzLM8nR0JF0UqllWZDKrl6ZKwy13Exq1brrgVWtwa5DPqVmUjQmwVFx
v/NpZhsznfc/elFlCrK0B6t+pW6WyUfX1Lh6zUajW9mF38IFgSo33XQTZrXI
shxZystEv9JxFChVRSWBB1IrwZ8p71Ad736F9ZO5/jxjXECvSVIMUoFQRVfV
q7Yz09C2nk+udsonJsEz0b9WX7R2Yh7Lg6VQm/qDroOhU72ab3q9Huqb2gwL
hFZX/yivsnGQNbX924isqfiriqzGTDsMZA15NYWsyqsFIiuaVYOs6p6ajayg
qfJKtX8KWZKqKUHDsrk5zivxyt6wYcMJnWzZsoVx4WwgIwVLR98pt8NZA3bk
CnCLLUDKlowmXqn8Ch7vH/3oRypRFu5Ta9LxbiEsU3U0HtP21FIt8soMQWGV
GNR8Ki6SPJhoBJEFRqylYP2ZeLGqPsa/KTKDmmSGoC73mJOSrfqvateJzAjw
K3j80DHsxgX2Lddg1AGXUUe3/qKEsldeRTnJSiMEkjGdIg8JItWLxVfcfvvt
rGT4cFWdL9Ao5kLJf+tgpGZ+CuMk5Tyxuz8p8lKRbCa7kphQN5aQ3nSxZu9v
H8Vnu4YI/G0MPZ6oICLIahBUKVRdZLU63+ztm8ird4L7vXqxKkbeILK+N18W
gqxnS7LzwpFV06LfDMNwCln85Xz0wPMIXX311WeeeeZxxx03Nzd32WWXYcIw
cFjPYEFtsJY790JkOWnIU4EmILLYjGXW24NeJYplnmdRo7WSig1Blq1RWag9
AWvB5Lz043gPNEaRxYJ+M1tORLNKUo+hWTU8XtBZG1AexseeWUL1K0MmLMzF
Gs6K68zFAUp24ELnMXfGIjN/0ImKllZhEx9V4zYT28lfNktnVa3CP+jFwIY7
e0F74Ubze5OU5LnJdmdDvBGp3pPmjKGQE7WRiq9aLHpYEcgXTVS1qpjFAoVg
1t7PhKkFDNHh5Uz88DWCQhbF+st6HWJV3QqymliIHLNS8eFSBcvjDINIm5zB
2MUpetwEkSbm6tHSZbWmFjZu9qFh+HSfPjMqM5AVBH2vBIhWZNVwiCe7wPiD
fSnRSip3iecqb5n426vnatSRZfmXxiff+NKHWlb1xmf3bPwXnaQ6FmfISojB
uTEQLrzwQvvXAy60BYaYsdAMEPHFM8Bde6YLh+Ai8KgY+shKxhemisjS6MNw
YJj4PPsM87RbtLO6U6w8nBoObCwuZE4UA8Pg48tKcb/UbTAiVKuQ9Sp1akrR
r9zFjZMZrfNch5VlThMGFvd73Pv/0jd95hexAazjV3BZAIiNbPhrbo6C7RZf
Vlo/p9yo5qF1seo8XfxXxkLwFz3Ku3DbbbcZTo/ARv5yEAYF15Pz8b2gG5CT
fGm+hCFTWlbDq5d7aVSvlLj/yYTUkvhiLXd/x44dO3fu3L179969e03c5lfY
c9Y5hVSTViNtLGWnL4eTko0HLGZjNKj9AxGATdB7gtsfmt/XvuY+N1AaVm+o
H9WohkRkVbOxRinMkKoRVf0qylU+erpUcsiW1f0eZNWjLRZZwzWSp9ngkMiK
k6qJnG+QJQw5Gc7f43PrMWfWrl37oU7OP/98xoJT0jwkPE48RYwsNuNu8sOf
7boC8a+uV+4vDxgjFOWBX63RB4V0oUiePMxqX0rKKRv37vb6zBOC5Ys7TQMT
Qp8E5wZZwIePVCSSSa1mlbTohCXohDeOSxWllgqMeia1Ei9hOpKI4+5DEgad
FddZsB2hkolCVawUwpJRWogiq07SVZPQuliWr9Glj6hicV/YntvBhfW3eNG4
+HYs4iNuLi+F1NBQfQ2RcnlrfemQZwpZodb/PiH/rciPi/BvOlNb36b2K9+4
ceOWLVu2bdsG1nbt2nXFFVeg9t9UBFWf1wFYA+Dheb2Gtdl9wmLVuEa59O2u
YX1T1i//pjlFtfhqIb6mtlUTbaUGlVmMWIWZMWymC2dL1Kqh6Te0BEeRFfle
CVrIYQ/2xdsXiKywZcixBlY1tmrofp/CV904ZqNn5aw373SeFvSrY489Fqvw
kksu4XmwcjXPw6233sqo4UnwJj7eNXB8vOvFlmhnniIGEc8PRzMWC3C93HXL
cqLKh5/nNsX9MldlBlBiG+LIMiQ1pkdFllizjEyIpBHHvyJFZEU1CnBCpFf6
ojESqdYJTCEIjx+XvtqLleQRfgKckVfoDFZsCLLMSk6GjlOECQNAHG4p8J4M
lxRbULmKz4ovQstymQUUEgYgF9BQN+4sA4Fbxmi1SsP9XT9cLq82cuZe435v
DLpRXs0A199NSAAVCcpSlMaypXbMROyEbqtNsXZ213QMzX9jJ5s2bdq8eTNA
u/zyy6+66iptcC44OqcxtBbeqV0/EiLLRd7fZyFFrRot7R7LMQrVgfkSt9Wo
YVgj2yVSw6sn+8TkxgZ86lC1GjLt+PT8vhUNr6J9ja70S4OsfOqapryMG0wh
K3rRc/NllFQNglScRpFVqeX2cXkFg6zkOjAu1q1b9+EPf3jJkiWnnXbanj17
eOx9/hk7jBSff19S3DIL+4gsMzJ4SBhZPBtcAYjkI5qkG8dFgrLSYUeTkDUm
+EQcWWz/ky5O/iclslSrpyIr6YQppCDuRFZMOTWouM2jaGkVZh4wLiw9XZqE
FnywpY4bQABOm8eVkSKsLF+coqNaOnb4UhnQSaUakIArNS6VVZYN8tR5hZh6
fHsnFu4zZJQvYoGNGSzcUC4md4Q7ZRVBRjEnw/jlZvEUAQo7d/gK+ElXLDHT
r9VVOOTV3/cyBFc1ABupapVPQqqfpS7NsDagNLMQfdoEuz5FAi0HAccu7iWK
GSjjucU25/WRd4dvDV64maJtYvt9erUQo1Y92nVGjvu9VmMIr6oH3m1Gk6ZT
UiYeLbFTgzPjgJpRHatmSQ/97Y0rfoishmbRqWJUfr/0jBA+h4esIXkaBP1F
kRkqVkXW831qTzbjCjMETj311N/7vd9DxeIJ4abv71pO8FZi1DBSGB3cQed3
nuhaFJlva4ggNx2m3X333SzzMwGRBd7jmE32jXFBmSW3Lg3PtrN70QQ063Tw
oq291HdwTkxp3E3Vry5e4shie7EWD1X67wRZCRAVWfGPiazXXnvNI5vXo2nJ
ZnzE+XAreYlb/NPaLCIlRUdTxC9VRhPQnnhRljVhDA4XWSYhmrNpJIMY5OBW
6mNI8pbhfeEAcYqElXv37rXvKufAFz3dVTbjLngFUkkjLsFEj1RkDXlVpbLr
pWmpilaoJbIi64tc2InlBC0eGIKlQuBov0VLpHo0a93wF60Mmm3fvh0DE45d
eeWVxvfe0kk6HEl4Z0l4zi2uGDtdoDEQeM4fKZ3oR7WpJnmwzgY+XaqsBzvN
hF0UrSnDcOiY8mjVhVV99UP7sZqWQWWDrIPzG3I14e4LMQyntKZM/0Gqv+zk
kNRye71YBmLZaeL5rlSy4aMf/OAHTz75ZG46t9J5Ycsjc1sZX2YUgqz4sng3
OdUlsnidscDBBRHPZ5znmQpkgUcXWP3VX/2VJyCyVKIcWRbaci7eR/2l0nTe
Gb040nU0BVnO74ss+GYIqHZc7W0RD3xsyYSPOt2WUg+1lrsBWp4DFxNigBFe
69dff73pObYm1CQ02lOvS8qKJoDBmCtHR6IxRZaFGgxmsOLoHb1Yuw/hWzgC
9gv3iIOkMTSjz0Y83CaeB9Rdrq12tFprSBWpyKpmYBjV2I8VXD+ekMZLX/EV
5xVg2bBhA4zS9IsBmCpblWksW2Q+HjBlWCu1Ns6wdLPbWH4wVQfZRQca9iZw
Q0+77LLLgBsmp3qa11OdudaPrdoad00N7YGuhnwcZdqJ0qlGZMUB/lRpLNjM
Bh7Sl9VI43Wfinao7Kpu/ChdwzTA2ciagtgoiIa8CrKy0Oz1wy7y6oUu1tSz
YiW4gBtcN0YHD8zSTniLcfu4O1x8BhEfWQ1J3zvI4o58rwty4I0D62LXmGbL
+4jvqrpTJtN1Rr3UdYcPsoyFMArC0u6abwwlXSV68o0pcuhV465BlpqSeT0c
wYweIZYK8LW6cpJ35FICrlS0VL1SC8JgeP6iXXAZ+clcFlvWOu2FrgXbWem0
lx6VWq4h6Tk1KCt2SpOYw+6MFKuMqlwxiGAjqhRfwV6+9LHWOQ4Xn7HD+50n
x7JjnKQBpeql8iosapB1SF7ViNMKrtnIGsZLgCzZEuAEShJsY5GLLroImKS2
swpYNCjWb+uEha1bt27evDllnxHrUqZKaqBnBzQ1N83MyjcVtlQjtOkwh+UE
Lr30UhU2Xu78RZv1vqtXgzULxnLv9AAwdhK2YUKQaSPx2McDpr8rms9UkEN0
NgmTuIJ40SuypnilVNVuFFniaDayhi4sVaNGfZqBLLf8q14alDXIMt0Mbny/
6z/IZT/jjDNQsZYvX85tuuKKK+ypmg4U6AwsqyRzqTV4MdXN2NU2NHuOW/NC
12vVDBGtPAeLz78hW3Yw5AQspaUOlm4UWnY8+QbJp3bNQpBldIQuL33vSJBV
I7hiFRqRVZHllk4RGpSlcvIvXY9CzooHEjrx3PJSzkw9CzpPvBQad0kkrFLV
rTqJnyJ+5hJauC/tcjQ/4Rg34mDX24gbwV3gVcJt5RKl65AlxYZRuEMtK582
nvZGv4rvq0HWVJBDhVU9ICd5ZpE6dQgrVHtSyJR/5Y+KEH/5KL4sHfKgDFhd
PCZwBpRd0gubqcKxL8tWT2X3VIRuij/Xzh1qa1Ht3MYT5ph8C0DTk+bzgL6N
PmzhMicFrJNmiWwGC3dQw9PaOzWaAqZpNqaEHQs/6AqbV8e4HieHs/Cp/i5n
KgOiOhUYyHj8OPOf6/L1dLI914UTCLQfzJfnS6uIJrhUUy68amAljiqg3AwI
2BG+rmQXlv3hrNdpZmgWFwfsoBJjFS5ZsmTt2rVcfwYjvHqwa5rDNQdZvPoZ
RCpU2IMvdDHzsE7dQE8y4xR1gmvOT+A0rMbgW14zjefWFvDwypPUbMmg0LOt
Q4nRVAtBqIZlti6+qVrTL42bddqk2kwMQ4//L333CnUtKyo7Y5hifekubVhX
1BVWosBwH9GjbA7IXzCi492CxhoR8Z87ET+EVY1qsIKfEmRxNJ95i9jYUJWH
n7fGc12DSC4Oz4lvbZa9gE7IvtzlRDe5OZU8jTE45XUPssK3umOjmDXEq776
rORWntrJ2k5YsEmiLRRj8Q1tN5UoluVYumnIK+lURR1s+/btwGRHJ9HE+Mty
Vc9qNfsNvfBFnknTWqiu9yTVD9k9aqFf7bdfeeWVvNquvvpqNGQ5htrMc2LA
nrMzPACJe3GSK04z/jJIDxZ5pjSs51F8vlQVjjv9e6UIQ7SpWJGNluX6H3aB
6we7mngqOSpyQWVjEtbgz6h8MwIVYgbabCvSQCzqGWue6wJKRZYwZA2/mkHE
FV65cuXc3BxPzs6dOxkXIEuPriORt7+hpFxSduHg/BBNEkcfBwmyOCwa1I+7
7GYHjvGNPLpWKE0SbgrCGzKUxjSQge3N5zXfxxnDICsB6jOQZapOdCczFhMt
L5f0WaUKVoKyUr/UXXJA/uW6AQ0uCw8hjyIwMRIS/crZPbQjcwkjGgtp7GUQ
UQqQ8q+karpIaBWa9WwRGxa4wtwarr8w5z6a72nLSDN0flwyOqsb6mdFhsia
rWU1KtlhI4tzW9sLvDrttNOCLPHlLKFhD7Z25a9GnO0UE/ygXRlcxJxsFLBK
MzUr/kKV7b3UjzZ3opIGbaxmb5OOfCriLG5/YS8sexqhaPQ30SrNOBTHhJ8o
CZiZvPKwaFDMeB9xfwGaD5JzAdXS5DmJx0x3GQMNmg29+nGn11iIzAPGL/T9
+d0AtQF1mrmxQHumDzodlo754fyix3WCb2gJ2hYna6TWi538xYSwjZqbtqHH
4dzgOajhai9btuykk05igUvHwAHyXCUGIBfT0AWuHn/vvfde9jJaHuXWtwOG
IVfVeWQGFD8NwzBhCT7nL/fZ0HzEeRrhwL8v93W0zF8WJv/YNYg3nccIh5f7
MqQzkPVK37ze7MIASuYEWf+9iHalbnbtx3S915eloRrvPaeBksmbkVdnAhss
4scbEzoZ4u6TVnMDh6WxnLaIMehmwspaDfFicUfAI9/C7cB24L6DemffuK26
NRBWBiZeUtEUmYGsoQur8brXIwz3mpJqKroGbXlFkZWdrOrk5E5OOeWU1b18
5CMfWbNmDWtYkHIf6YQFWCfo0p86ilCWK9NU1eSMVGlQFppl/e5eYIt90y7r
pCpv/JuGHWKQBcxDQMRflllzUZGqE+ZLG+E4RtL67frNbA4SF4STAk26fQaj
PjSTzZMxJN/0d1VXf3xZf9532lLJSVxBMzMYfDWu+FBrGHMlbUbnDc1CrWpY
xPLIiaj3mPwK3u9cBN5uxx13HH/BPoOO34tGykcosVwolC5YBPOt5MARAA4/
n+tj6xauktXnGIlcHL4Iiy+vdT0eBr2rYplrxkE0YRIaasQCf/lXlcx4eEeQ
URDVKqzISomY/6svA6gvS8VJBUlk1TiHhIwGWcnWiWdMDBqbwdWGM9ADZPFO
tJ2N6TNGMCZwNFZeIrSrVZikwqY0uhX80pdQFxaP6zXXXMNdYHvumtfE2Tew
r8OTpyiviWQRslzrYFRqNfbdFKlGfVlVgzokshqPFqKmBHDAjkTiXQmyYNQp
nZzcC+tPPPHEyjE3kGb+FV+qZ4oo06menteNaz3x9upF1eevRqSoF0XLUj0T
TaYdMV5CNv9V8bZOmu7HXZ2INZfdS0++zYlipVartip41TXHgsqe58OW8JPj
mCzgBE2yXJMDZe1ZE6Cc60wVa6cGNDZjhKp9VU97U2dGqYpTLL7qlQqLhiur
s72BFSI2n+/yrzkT1rP84IMP8ru4/rzvPvShD3FD+aUMIoNFGUcMRpFlxVFz
CTkaRJJpXAeRZVEUzEYw6BvfJ9yH1lxCKzbobbNGlshKzqDZN/xljeFYSan+
WV/Tr6pYKTQqstIvTAWjbv+PvRjGkGnBGprl7lHAatwpJ8A585O5AlwxnjQY
4lSRtfV83/l46GWNWtWQKnHvOgDTQZXdTXbmIDrEOKwduBgCqFtcW26cpvRL
XdkELhHXkFvJJeXJAVk/7ms1ZKL2kMgKtUZJVZGVjaM+vdRXeJjNq0otdmdQ
M7jstgMWQEcsPjkWhQpYndgLTEMf40Fd3snc3JxKGuv59KQiokwNLRZorM54
/vnGxEskQCKzmbri1c3SiFYnWPWSXVZEIvEu434Z9MUbnxF0ZRH1JR4eu3in
A9GeXlhmM9eo4NltjW8UjOCONYJLiBkokgnWqj0auSEkM8vp7IDPbeI3tAuc
KkqLEFQXaFajLHgCn+8bnkohLaZapTOJLT/q5W86ccYtQItt+JcTklBVPW+s
gaIMGa4Yz8zxxx9/wgkn8HvtQmjaAiPIKCB+FL+FkQiTMYuMV0fhVDHgN7KL
Thg34Edx/g6KYYUlxQ6GJk07mhJVriPrx12l5cS9u8EhkWXQlCM029ddkkXo
8v8oPQpH3e8ucCb8Ln4jd5mbzt2HJLqwEAjj5KDF2LlQJhIO1ap0EtSFZYOP
ND+1/hV0sukz70qn0VnDAQEml50rKa+8Mjwh3HcuLDeUK1znXoOm2YbhqKer
Tg5WaXg1A1nNvGHiHDiCNcQMiGX8Mpp0KDkSM6/HY4lqhJoEZ6ANzAFB4EiO
aUs2sDpxvpw0XzQw4/znL4S0mbWpQ2YPZSoToAEu/VS65Q2uiInXeP71jIEI
mKOqw9hhfFWgGdQqteQV/1ZYSRXNwL2d2FJNPU0ljaNd2omaXjPLoAuOlZ5e
tXwD2xieckyIGWGrvWk1NptsJmcTjqmSOa2pSgZGjHgfutYNFBdZPLrqKlGr
xF2YUNUzJX57tT4+wobl/c6v4AYde+yxvLm4OOgGoBVecXoMH8Yj1GI06ZYx
Iss6lpy5RrTOZGtsmtEWZPGQW8EvypU/hH/NqE0EqWHtqj2w5addxpyKhM95
knQqf1LGITXYTaj5h75s6TBJJ9WuxF0sSrWshJJG0TIxhwu7f/9+0KHLXZeC
6rftTU15Nn/ZCaCUGh7qVzX+quGVznZJ6HNrVg76MDo5vOLSqXxy9bhK/63v
xM0zwEd2Xst8xwwoNcia4luFVbUHEyZ6SBWrhmmpaCWS1mpFXDprf1kR2iaM
DnY1CrtUV5QZfnDGfJFsyOoipxQBYlLLvlH8ZWMefndEuzt1voA1O+IhBuGf
ffbZNQQiE5pal3GUMaY0EjNNGSNOVgiuICumZaiFRCWTXXx0XS/uaIANy5qZ
7quG5tHifANiVStT6UK0STMXIPcSe+ZP4Cs+0wvPv+3OjeFJ+JnZAc4LIDU2
zFiIJlVQr5dzgtLAZ1hEhFrGRThviPApR+ZpueCCC7iz73//+7mhkBZSGR/C
yTB8BC/qllYwXH2u6xPNtzzwwAOWUnFg6q7hzDksJ8nb33Qb+VZj3Tk31rzc
Z+A6Vxj3e9p++bTnPe4GU8hKeZkgK2VLh54r/V3uq+O9+rL8lhz5v3d9VIE8
P5BXp85VkGVhgWSxxR5MbZmmanot4uflskSDHVQzZjma1gSiX8K+kNx9rh7I
8q+BH84Pqr4aGAzKzCBwAuJnfTjcMMihIVLDqxnIivp02Mj6xoSkCPNXS+tq
JOUsbK6RDHGzb7hQXCWuFUPVYWgkA3BL7Kh6VNAEi9TWGsWMf/WbKYnBqDtG
T4uZqcfMfKIEmCUsH+FfRpl2pZoPABEj1XmlP0rQRTGLr4ynTr3IGUaeQD0G
Rr80cm0nASDbX10kXXGjwqnmWRHIy6iSxlnxpbw9U0mDZQNv1JNdFmXGbPAk
Z+7bF7fZfChCacZkMXasBmc5nT/6875Wg7OEf9k10NF8wCo0iBTmcPJcZ6zC
D3/4w7wvYBRH4yAgCxyZMefbn3/5rue7JmIgC3BBV89K9zIPFU8auxu1xete
bhiIpQ2byDEnCjMQ/qGramVdYs26l7sILoPef9bN16d0Q6M1Wea9OrL+j74I
cKK8Qjm1Ju2+ON7Vsl577TXrP6SkPEd+/fXX2Z43BeOFu8MFsW5A7pp5f96s
L3Zi/bp0qI9GkYWUR1bLsr2Xfnuuv1/Bg8Ejx0MFx7ielkPUXaChbd80ycCn
XF5TscDXP3SZ4L4vDIeroXEzzMBRlA2d89XumyGNbVgnDaeQVZvj1C5gtQhz
yMb1jOntrKvvCy6m8Jdp3CwHNdczriFGorH0OqwMn6jp2AkbUx9rpMaVuYEa
XRO54UQAYoSG6llNOEr0lyH9hkNwYlGHqtNMc6+6/WNLVi7FSxaRbBoFPr38
zTXJNv410MJZA9/LRvXH15pilWl3PpS0A06xONPSU/07oWiOkdQIamprY7JZ
VpEHQMQxsrgOvFa0CrkUDCKTB+EhB3cuVYcwZwIhYZ2RCWh9fJcRI4mB5KvZ
EZ0QhYqn1JFiZGMc73ykaaO5pwCZsEX14Cdd9QaR9dO+YrmBnQ2yft6L04Ui
y+HGLm4T3cmYhxiGqVaasvAGxrvSgQ8EuIagm4fB4gBNSHMmCr1ThtOkKFYt
GqBJmALvafLlS0Gr0KjURE1ws0C9U64WKB5FFpfU1wFn+7Mug0BvnvyvyIrG
NRtZU+BqXFWHh6xvTkgYlS4/QdmwLl+q8zmP77P9cOmoKN+M1PVlEVWN2wTQ
1NAYnpkOAAioQFh5BouCGpQo4KMPLbOW1VGWwIwam1GnMtXQnMrUblU3UzFL
EZ46uTnMvozVWYvwWL9C75mWHUwGX1qLGo8RsybtqhmMG1KYbHE1KFMtnHDk
WgGWdCGpvZ+aBiu+hZ1v+krf39wIwy/3klezzhMVHquvWxjcjlEVhm7Axmbj
cm68ZZYuXfqBD3yACw6ieU4MMANxKA9GtXmL2evAgQOaHgycxx57THU9xTM5
ppUf2J2Bw+MtJdSXrOknuKxLI7LCFsPUdZ6bh2h2ociK5dj4ptgrTVH5qx8s
AzPIUndKWnQTyRCXe7pOWxqLI6BSMgpAhzM1PN5a9GrCVkg23o/XkC8Rg95F
Vkpj6b0MsuLJ4RpyjzhUDqtTGuHKsy9qrVcAQKmspoqLRtlLXVVqLqyOTa+8
v9cYjybHUOw0LvrGxzVlGC6cVzOQxXHunZC06Ulp1vRwzBhJxRhfzc7RG4CU
OlepuuxCspXvKx1gExHnVLh91ixHxkDWaEKZ4Z0OGaCExSVACpxZOyGqXsBK
goVa8f8DN2gWt7+pjjV3KTZmUoQSjJF8yVoOUe96DY6toReiTG9VysDqbdDD
D7VElkVIDGTV0OYJ5AXKY2wti+Ylkiz+ppRilGQbhWeOKVPnXvBMpmtoOLXn
K9sSKEYk/r/tnd+PHmd5hk9AxD9IjB0bJySOglZChAQLKYAgREhxLGwT8AEi
gbgcQKueVO1Be8BB69hJUwUSkRDH3pBAiIha9aiKd9drJ0BF1ZPaCeJv6qX3
0tx99p2Zz7uOTYLoe7D6dr6Z+WbeeZ97np/3Y/dPmS1VCVAsAfx9+/aZkcX1
89Om8bMMdAKzs2QC/MqZM2dsJ4FcsBKQUGRTTzI/yoriqOeffx4L1AwHbTET
nsUf44b2CKuQ9ZvWQdVEUEk1pQcUsrQc3xr43jvflDjjCGStDZW//zkwiHaQ
VZWu6F0hTAYAORUYy+1Ieq+9z3PUcpdUgcnRhSVMyRWTwpwaMbQWw7nyqZkT
wtzygMwXdcLVzFVu0RyYN/M9AvihcDEwYQIJ34JmarDmwAvy5nuMIWut5eUu
hqwOtcZ41dU7v3fIGvdaDZRFLirLaA7smiGmP0V8wqphtWtP7fITe7OS7auP
JUfOuIAsQ6wEMMGcUuDCvHdrqMET0Ea/2dIwVNL0mxm4VA2L3rVUhv9WR1kQ
zBE0k67HIqaqjyVhNYFCAU1fmSuZ69fNHg8/6pl6FzdoxJMVKNtw14/79NCg
rbLrV+LE2ga3U4+rnsyxUpeoaDnPDOl2FQpBTOc/osEN3n777fva4A0C2HIe
dCSgiSeoq82cDR4cD5Q3Phiy3jKU2IGvDIAilQigPA8//elPMR6tdzN7c31o
DB3zENzTqImMIFmBC33vtVRHZKsRwEp4FcjSlyXiKRqLtaxqJ/KBnYFNSbE4
FfLFPIAwzBu6tFa/BC+SGIdepiq6vDWqz6qSNqSvn4lYsVD+og1zePSLAobs
wGRiR4uuzIYud2sB5PYUB1aGvjY2g4ifUJA3dNhBlmOrWtYkXl0DZDGemBlz
otHhWEb6IQbxamOL2lVHaerOHNALY3wFtCqG6Xat8uB7JxxBiZ6YnWJekHFA
IEI9B8QQW3Sd6TcLI6uOfZEtdmXG3cMwpjmuzbxvGMn/N7vs/jJq4tZcVabK
mHEBLGWWN2KeOGBGuiCl30c3Kh9+aCsYqTOycJKv2GIzQQPH1VGmT1Lfl6Fk
oJXZA6wwDNFXuUiE7oUXXnj99ddffPFFnojiKWRxNp4jL3G1I0AJGeSO+C3J
Z4Qsw4WcAajRkaKYnB+Yk3VnSd2Q3AZ1oaQZWKqjSiZkiT/Jswpkpah5nOGg
lE263ytkiWBamhdbbxo7R3MgBjJ3B27LhcU6VHNG4wJSVK7ikKy2eZfbkAY6
GvgJFPpEeKfIyGRKqrkx1mmCP1wSN8UcGqJ1QsSr80OfiJWhA4X7cBTY9Wbr
zS3sXC/3e4Wj4NX5+XYVc5DF53HbiPryHQPUnO+r05dykjHipS/P+CsOHLe3
cIzbgTnCVtoRkOZKRLb4AczlYJ1o+9hthEVlQkJSQ61JBNZCKGFQIMiWTAzN
z6RwRD2Lzz+WZmdsRlvjJ6TIMKDJX21PTWB2AGBBALMuY4DrOQw01T5otYVH
oOxHG0fOYA2RvY0s+qt2oqai6q7eJ/mvhCzz8bg7/mWSzdcCA5FH82PDA8wv
AjW6mBBnzo/E8ZeXlJDFAwJ7z549yxnsVqzvV9orSwtNurCHxVuls6qQZVEz
R7GwhTgrU3w1XxrqpitksX9o29WmFEzlriuLFq9qvWHNjfcyPBWXymyAHkZh
eHY1RKgL62+HUVupxjlZS3I0DH0i7O/bhJPYMjWeT+OzQBmPnilS+dQZqBdL
FqyqYlX0YCOYZuaeXYoCUEkjycx0aaVjsOqc7ZP6ldkLW4UsDpmDrE7F6rSs
0zOjHqXi1B2lpABB2b+qXtk+PqHaV+3joyQqmF2LMU+lPCLIvP1Tyse/CnJc
bVyYmZn/OPDQhi7bEnjT0jDcUNJAM/NX48syc8PQAAiWgiZVMkOWNWoZ+FK1
Y6NZsiCA7GH8a44ZP8FnDgS10BJZ8GYLGOBDxk+1FCzn4bmZUXt2pEtamhNJ
Jc3gM7MKZKXwFgnSKo9MWfLGFi4DG5YbB6+4PC4e24fZY3rRoHgWCJTZ3Tq+
OA8/JBEf4HPu3Dn7f/FDLBLnHBnnLpaXl9GjJG6KI2W1RbsQJauQEEDjiaFN
luClQpaum0DWauMqr5D1u6EBdCVhCLOfpo38fpVr1JCiFAexmITNcI0iquiZ
3J0pwUYJk3kS7r7KhSWdu86W2uSltp9ICN4IbCJWKSTkhwAxsO4Xv/gFl1R7
p0bnXG2B1AoUK6V8jx2sjwCyLg6c1RcG/urUp2szzkHWVSODFa+uAbKA1hDf
GdfTr2t5yJyiNamGTSpRFfHmsKizGefGeLenN47aqjV6hZCVGmRkKmQLtTuY
lpEM8+kAq+2p6wAQ09hEDEEwXp3GgLTdsOO0NBHerutHRkeUEdQC4vhK7cst
Iph2q3FMVC/sR37R2n/9IVwPa9jiaxZq1Wl944hjMk4LVmK7apWJCiI5s8FG
tSw9+aqjehHDX2E6KCKDaKCRAshAFrfGtSE4EiC/8sorp1pLPgwiAF85NXSV
9zsPQlXNtoYAF2fmp7ke9TTDhRENhU6zBTXALvZmLIQhIb4spJVfsWrJ5uyr
g6O+4/erXVZNVv/t0FVHlSnpoCFJ9kBlOR4b8UpSQe7OwmcwBL1dJJGdWMva
lAZza0OExWwz577f+ev818gvu2meG5kyDU+eXjvmGFlmB+aQeeZijCa83ZrU
W49pMU6Aokvd5CtT4HQVel8hwO/yHNbW/q9T6tyYw67NQ9bkUMvSU/Rka7ca
p/ocZI21rEnta6uQNYlCk6ODpu7f2EppE9bZSnN9DNOkNVSlbvEM5mwo1L77
akqtWnq41AAWlBDzNB588EEzIgwH6DpTuXLI5xO3f3IwVN7MTOOvvY04m51B
zKYwHGnqvqIhDa+cS8mjViLEIpklfNZMOPfrDPBBGnB2sHyG+zJP2Awimwtz
ZtuDgtKmlACnXAM7M/MADnCEwILtTIKlKFwJ5/z5z3+eZqkgJK8AzibSqs5x
PTwRyf0qZJlkhZIgywSohe7ElnAyVMgCWDhEZ7Jtd9SyFCJZ+8aQpUJSuc1D
MqOWVVn+3NO4gNKno4ztCDtLi0mWcocZMH2UeXAC0/HZovgOsjT5GUkHqu0I
TXQXslxsurBMgDEyi1gxS1xbbbrBFZoiYu8PM8k7TBDVA1lxFQayYoNfKqTW
W0Kq6whZpwfPtt2fA01zkNUBTvVHjeFoAWRlz67T/RxSde7l+GTq9s5d03me
q/O5634YjKoqWWWGyb82wpBv2U49nJxf0SxlGINg+Zm5kY698q2JaRaamXeK
yXno0CHTz3TLA24AFFAGUqGAdSwZDL4yWCn08a8Z/mHOrzWMRh5NmdBCSWs8
DUzlJele9mThUiVhMD+WD0Ix5h5Xi1rFr+/fv59L4lc4s1yjWHzMA0hu9jWi
xA9xQh40uoeQZVKWvkSOOt262yOSzBvTi1GDNmXegtqOSVbgj+nZiCQal5gW
P1IMQxAGzDE3sqZvKWjpVZFqQTOyQvauCnGxZcvHeDTtSkYatT5B70LrhSG+
sZ0fZaVxv9a4xSQcExOl13xcWIEsw7417SftcjhziNwdTK/AxWTaXYJJ5nrE
q4DwhcbkGRV3DFmBiEBWis1D4/D2MC4NNO9zkDWnVl1HyIpzSU/RWF8aQ1bV
jsa41KlPT86MSciqWlM3ahSsIlIHUF3/6KhMabIzB1mqXu6ZxhZ8TrdEv4p6
JoI5+BxK9nQWC1+fdcSejevhHpNhy0BsWb2+Ok0qMIUjBY+WWsu3D6CFKhbU
skDA7Iv4+VNRrrYWb78Mrmmna2FjCrFNy9cBZQOFFMiHg8KaR87A2bAK7WIP
piGP3BR3yj2qY1iXaq6+jXVef/11zTTAhH/N9Nb/YF4WC0CCCNDJaF3cKaxS
NlrnaDLkxZa1FcjSDmKALWvNkWXz6ORCCDU1aBgSBvtHdNndptP/buhQr37l
Scy0ZCh94hWXJDGF4Wn97Rpr5l/5joiVrX7V9flKtbvZJsYHfYNojAtTkugm
X46Z5ChWILfMtakW1uZoF1vORiKDtVhvrfiLVpubixcK82YPNeety7NaH5JC
F2tZCwpzNglZc2MOssZ23yYha+yhmoOs7FZVrAWQVZuxjoGrgpVqVXpARxHS
Rd91EMuofcSCSxWs0lfaUdUz3ftBp9quIn0PK49oZXrnK/uTJmmBCVGQ85Ll
NSqUIQVoaOBMGG9QeCxON7E22fvJH0tWv/Q+ofQPIYaWZjjBUpEkTlbqVwYb
ORw8/MQnPrF7925OiJByhUwCN8VdoD8kQQixQiq1+NCOhCwki6epY0cTVV3U
Fp9YhXJjvtVaemkVJpjFt5K9XxwSTZVNgMX0deBlZei/454XhlZiOodDq2Xq
aVp0afj4o8pjpb1KJHF96Dumj0hI5Id4NwFHKDxm1mGhm9Xmayil6118sPIh
Z9hTNfkM1uOkq5dGuuU5bmQ3lh9zG1JW7UFvKvWSolaNFQZSEsKzMMFSRPZ0
/rs4YA6Zg6yrJjncIMharGVNmn4dEMVD9dTMmEtm2KQLK8A1hqwEy4JgVR+b
g6wE1ISg2vU+PRBr09XqE6s7qHe52wvD4PPZoTe9TAjyJMsYk75gZ4eWr4wO
wXQxmbGDdIhgSSBEUqykNp/2gTLMrTUiGeYxI5LhjE0jEvZko0kX6RuSuku2
Y3iyP+YqVuGePXvYjiIhRQO3xqUiX5pFQBZixTVzC9wXGBIti6epcWqYwJvi
AVmWi7yIM6uN50qSGZMcrE9ku16pZHiaqyBrcSDLnmIJeCU6HybAClm6l4Us
D6k0fTEbPYnmkuKDQsJlc/EoPJjSpowCWTwgW3pZRVjtQfEqalVYCNIuJ3hl
b3pTcUyb57PqVuqpESVeB1yncU/NWOObGteBmpoHVc23AAgPyEirNMvahoGg
4JVjDrJqHmnFrq1C1srMmPNlLYCsOTVsEq8WQFbnuboqfE3i1VjXCkzF0qzN
v6qhV11b1RuvLyuwk29fKMNmx3VUhSrAJeWLbO2CUlXDapMLTci0MmSEejT7
Ryvj+p9u2SA+lwSYJPk0k9YaAXmMRTPJu8Q06yIBKMvDLTsy9yx9SZK/YYNd
3Wv8xdi8884797bBeRAfftpqaK4HUdJ7xuAyEEaJkQ2dA1lIBM8lkMVdGPHk
Gb322mtmJsRroaDJQiCRF9LERu07FQkh6/Lly+APG4UsO1noGw9krQ9deGo9
YOqXo42YkdVBVhIbLgwtp9mNn7Cgkuu3GDn1MlaCG52RWDvGoMpVpMmYlzEd
q0HNJDEvOvFBKUzjwgIS5b5gbhFwENuse4fmoQmuawNf8erGlIYOssyBF7K0
DVdbZshbGzurZizWssaK1o2GrAXu97kkhw6yxskJ3Ui8L5A11r7qmLQKJ53t
jsmIYWKCUcaym0pRjMR417su9hm1G0WaqAa7qiYWLSs7BN/kSU4jntqZIufM
V2poaQSWb9Pe4uzQKNbLMw7IjDGrT5RKQ/tzGRCUXkM2CcDtyJEjuu61N8Eu
7U2BS4b/AwcOfPzjH8cq3LdvH+inF127mJ9Amo4fPy5koWCcPHmSe1d9kj0A
MeeSTDF1CVlAxxP55S9/af6ni1bnuZAl1QADgULQYhUKWQjplStXAllakbZB
vDDQAs9BFsIOLsXhowrXkSEndzSNvfiKszHt4I/6leWiklegC4VMJniV9qkW
51YjhVlKClb645jSADQZFtSNr73J7LHb040Fiyk1654ZiOpoVr/31Xm/O2+2
umIHWb44dGd51wGuMSLNjfeY5LAYsioohb0hupa5IglndHtWrezJkhcavOr0
qECWQUBtn6dbHtSc5ZjDo27VdO7qb4+pKEZ1JSqdv31yVJ2qdiEcj2BX1wz6
7NZHRcIAVD5UcxKwWh5G93O1kWtt2BpVrXZX5O6CaZ0FytNEfOzh5Vs+xEEP
P/zwJz/5yd1t7Nix44477jh27Bgyy0Mx4Y3PoJ+k9xyCkP5LY35WOzIUxV/W
CRLN+c1E0ufM8wKRjMUrEckC5RDZU62AQxDMUkgeaXIVrKeztMc9U/Lj4LTa
UEl6T3uLlVYgHKtTBSNFhVpYF1tVjqynb7zxBnOFXez9AtHm+uoYt1FmmGT0
XFnvLGQ9VQrcatE6O+u6lC5YDnArPdW1pKrm2TEnzKcJGLVqMp1hvYtAVnWM
CwsBK2ulLeTREpen2npDZ8Zi6uyzNlD/Bep9NdTzVztxDtOc2JWB2zneNv91
5PG5caxE1ermPz5kjX1cMSFjG3b24JYg6ycz432ErABXhal8SM9ogWsOstI5
sepmtRt1dyq0NVW1QFy6kolmMgglvml3489+9rN79uzZtWvXtm3bgKxHHnnE
DhQcy1FgFJoGqhoizM6oDTInCyCaG/JH2QDLZePS4mFNQpaGnsyo9rLvIMtw
obkKIA8/IZGpuRCJOfpCR0Cyv1qW7A1mAuhz1ne9PuRxGU/UZuRbIYuz8byA
I+7UFgNSuIe6ypIc+RlMvkpPZ7uTnC5MJpXLHfUJ014DUBtQ2lLObLiQs7FQ
mQquRw1zErK8zmoYdv72CgLBIrfrh+/I9i35saeAgOYHq61VoauZWTPiqjkZ
p6KGdjS98WW8uXEENivyVLvv/YKsBf72Lq19nNXwpwhZ9cCaFDE3lss4V0a+
rRuDVLUXT9qwamOmL49MpKY/1c5i2RNhsTPFRz/60Ztuuumuu+4CoJA4Jo0d
mCvEE+sSEUaQkTLWDNPIVwahdK2jnLBsEEDUCS0jl5ZqQyBL1cjFbIbDr371
K4GIZZ8kUp1OWkO6bsTGmg9Z4cjwYgwoj2I3yW1WWp6Vp11v2fKi4sXCE2UV
DHfBZQNTMgtJsS5l31+1IVG/WaDxXxkcDFNTxauwygCDTF387XrajRKqxXEg
2K6+J50gfzvIMjej0hWKG1Wz6kbytbTEmXObXcYpkS6WaTKebgJSW0sW4Uz6
4fyQZq/WlJ/QwShqdXZftV47tTAwWwlkqp/q/YKscd1NN+ZyGzYJWc/PjPcL
srokriCMas8CvOqwq6pStcF97SIdI9F9frZxeP6oW1moHstaRfruu+++nW1s
3759aWkJO4XnjunHt8we6oEU08ePH5c5mZOwts2+Nr0TcUNOEW17KDBcSEw1
OGDTnECW4oM4KCABot8OI21uLE4x5SAF0b7T11phmlTnpjdUvne5mhOpjGPf
JC6+jX6l7rfS8lpZXeCShI32sjT9QAJYC5/tZZnkq5p5FfdLrSJMMYUsvkm+
0oXFOZk0TsVsc2veiOQ5FbL+axg10KlpViGrDrEiwKWWxT3a9y3Kf40N8UG3
at5ovvhqszk+qJg5rEfg0YBs8gL9xzA6MpyVIbIZZItdaRz5gwlZk3g1drb/
P2R1I16s9F1Ns1Rd9Hq0kvuaxogBrvj26x0ZNUAYgakdO3bc0sY999yDQGkV
8ls8L4TL7htoX+Abj8Bsdv26pncCbkIWsuyqcCHxE7q8KmSdb7QzYZ+zyYJJ
Wclj12+jq9mIpCfR9x455V9ji5F0C3zYQY1Ckq5U9OjY13JJuJ+TMDksMPRJ
s0YBK13iKlfy7adPZe3qBTpVst+TA7mlxmB4k6T3sYDaCmiREFhD0Hgc3Ivh
A+/FD0YKAllJf03WuuqWhvbKFEtVBRBdjjbbzbI822pRIxrnhlB4MgwDbvmc
t6evvG7Y9jfaWnrV2SfF1aKHLXCqtvZBMwyvqmWNsevP1jCs2zuUCxzV7VUr
E7UEt3SOVu23UXXNrwCvmE8Mk7vvvhur8NZbb92zZ8/BgweRMmZMTYxlgNKl
YwdBRhKZRrPZ9Y2YeDCnZS23rvcSDvhuFbJMb7A9tEAksKQrhBCEeK42GnOj
XUnzrs5nSxGFuKSe8hOcn6viqBQhctpA1oWBa4s9kS+QB3h59NFHjx07hjKJ
+SZShWEMTUmiHouhwiGTkhxDt6aM2isnlaqik0pagoacmX1Y1TxQ7sUop173
VFZWyKoZsCqKtdZmXAITyNKgU//hQTDntq108QhZDFdO2vtmwdQ06Wj7aW4e
PT/ui7r+67I0QmQw3cZPsUNV1T5o7vc5L1aFrLr9Tx2yMrbqfq/bq3HXdZF+
ZePI0uK32E3vhF6sdD8MZNVQI7N64sSJQNbevXs///nP8+pnafEr7IMugYkk
3QR7Iq3GCvW6J4rH2mMt6cvyibuQ+K3Q0GnL6HKRJosR/mRpYUw2iDOnUhbI
7BdjZ2WoXDaDVEm/cuUKqMV5EE/ljg/hh5cZL1qKrn7uhVckag/IbGMRU7D0
ugs7gIy07aY0MAlp6RLICljVFHdLCHXdSwAo1YwttpEFmQ+5Eq4cyBKXoisG
soJXIVOtilYqkmqpTnxEUr+KWkIWq8K1xN9AFmuP7brfQ3Ct6Rc1qTq79OEH
uzrUSl6QOUUGfZ5p9CPmJwfrONy25h+0JIerut/r4Ns/kySHoNAcZFXlyoer
m/S1YVSvu8O0ATtEu49Lgn2qqShqMauPP/74gQMHtm/f/rGPfQzU+vKXv8yq
4Cv2Z9UZLjx69Kjt1JFTbT3VHjmQ7U086X7nF3XhdpAl54xuLoNQISwNZIFC
FvrpLdHxmyDU6kCWlZYWSPq7774LZCHRXJLyxW8l7Yod1KxCE8EHrhCcYRKk
lNFDLveLIKNJKGTZMwhQEqN0ZEmTov9K8rFQjKbDTiBLHONbJItJXmkUYVzY
73//+8uXL2sSvvPOO+En7CBLd5ZIVVFrLsnBIIVeRwkS1bJ0WPmOM8nQJ66z
3Rk2gKiTynCtSGWfX/3zMQYTzekycF5slWuprUMYWT9aAe7pquYMT5SywVMD
hfiCsQCyJkcHVuMk+W7MGYY1w+GZwuZXK6NjJ87x3Y1B7Cejsp0kfzpS+yxS
jbd3wNVtz1fjJNLsc6aM6u2sOnMwqqbEj+Gr6lE+6FdnRs31qu6sKGDqTirn
LBueI0bf/v370bK2bdvGB9AJBYAd+JY9ETEb0aJlIWvIJudxYYskrmpWL0dJ
ZR+rkPXDUjSHwdCewgX4SEhurFAVq9LrAVmmN6w2ghq9u8KUfjBTIrX4DKjZ
TsJccU6ifPH3fGM6DcF76Pt0HHELXPD3v/99G4t0xH0M7LhwI9tElds82XJE
dbkrMknB0n400d3CZxvRWo2Ybm6gH6uFe5cp2uZlWoVauNyIFBZagqF3Tqpt
ipW8u/VWO2PiqH7vLmKoSrzSOu/kdenLjsWJBPGXh6LuamjDU3mgT0Gl69/K
qJ3H08fc1yULzHcx6z/sKC+1bGrXYSLaDPa/0ZBVNa73Allz5uE1QFYUqjFk
1Xz1a4CsblTMWQBZYy1rEqwCStcFsjo7MVsYFbL4wGrhM3L31a9+FeXq5ptv
BrXuvPNO0IlH73uQGfvBD34gcxdKCMoDT5CjfP/ahNo4EWsVgUUehSwXDx/4
FRsUrrSSW/3eAE58sx1kKZvAjkmkiI+veOmCtQptsmN2qOqTilbyuC61PoMa
pKY5ValnT44ynZ4FU4lGsQ3BK7MaJO6zijCUMna5DWFm529PVY4ox7F2auND
tCzUMCaHJcGNGN+sNPXJFzUnNgyECR+EzCGQpalrCFUVNCHC861Y0twqVSy+
ZVqQFxPzNHxEYJ4si82Xy/mh+ZFOe7O5AlZRtPRBOYQ1VTKXhC81HjSIxHrT
nSVaBq+ELP79I0BWhaPJ0ulNQtYzU5wzmoGbgaxK8tCh1gK82gxkdcjTxf4y
JhUq9+9QzgM7pIpteL0gy9HFqdW+uCrVLS7GWA//Ioxf+MIXbAzN36Wlpcce
e+yZxirDgcw8JtLhw4dRQviAwDKNUiLbVF3LjkXOwkNzCGSdaq1dPQ8LWwVJ
XFpt/Mku+0riJGSlC6FWEiinrOnDVx4NgXFUUC5ddazu4SeUKQTHc6Y2Rzzk
WGaAdQgIA1Zf+9rXZHFPV/oKOIAMFl8okWtrtopX4bm1sgA9jZOkCNrP7Mmc
MLHGB69cuaIlWCHLLWl1HY7632wcyXMQspJtHrVKj5Ymoe4sJ5CXC4/GVDEj
C4YGuAWuzTQ53xGa887/v5ehah2Xvn7Fmja/NrRJutDIx4wOs0Jc5K8OmWDB
K7eMIWsxam0Vsnq6mY2jgpXK2BxkjXPdfzzQAi+GrGfLqN92kDXGq6oOLYas
OjodKbBTbcNqAy6Pkj9fHmLHY7C6vpAlXnXOLi+1QpYWAYrE5z73uV27dunI
+tSnPnXixInnWjdV9uFRYi499NBD8idj+3AIS1oVBTiSTRQx4bRIgVSl+t75
y3MxthirUMjyra1QSKoZyNKRZekNHxBDW4gm4zT2jicMN7K2oQ52zqnVyZ7W
/ijUpjQAX3zFrQEvwJREo6ZLVbwKRQOyDF7FA1zzhaR8NJ9BftGQi3JC44wa
g3xAk2FikVNmT8+biJRcsqSWRe9yn1ARvj00HwybvXqmyaWTKfH2t03QkC2g
B5qV/LGm4suDyi1zOzoEjNcYZImKlRQsMdCnYN3N2kBfVkutDRBbpCD9bM6s
D9+QMZ9taf3+QtaTozLqOcjqqp6DWpuErApxVd3qIKvDq2uArM5O7NzyQa3s
k/hgxav3BbIcJmX5Q3xwT2YJETt48CCQtXv37r179wpZTCBrabkVRKNfHTp0
SN+7kMWaP9+afmoYGmDitGhZCDuH8PQBLv7yOFiQoYsRYdaGRjkdg9NbQ+/1
SpPFsrcaSBrA5DmIckpr0pbMD2c7h1TI0l+dxGw+MBsoRXYtsXGqnivtwahY
8ruiYslTXfFKmQKFbNdYne1dP+74wRCH4BU6pCHCBZCVPowyQtvXLKiVoGGF
rFpBk5IZFS1n26RcZMSG1GZf8Be4NohZU7NYSGKLgQydVOrGolZKBX2CNYK5
PnTwiSvASOW/llF9YoDhjTYM5+ArWwJZk4HC96hlZefJfSpkVWNwjFeLIatG
EhfA1zg42EFWRa0bbRgmC6KDLGPQZkecbUnO/Mv885L9zGc+c/PNN0fLYgsg
j3Bx16xh6e6/+93v2nKRe5FBNKU6Gh2cDchi2Z9s/QVQS1gDPAjzSN9spHmu
4fWhg2ptohrI4q+QhQijHbHFJHZWe8KLioOSm87OJopbp6MlIhng20Nz5NAA
ckJuXJJVve6gcVJG5WoIanFTWoU1tq6Klc5N4pVNhNMnOmYX5wHTOIo5507V
r4QsubAmDcMKWYkSBrLihHcSOsgypXxtYP8Tr4QIM0aQC5RDM11tYWaMAPhF
jhSxH7eOMCZr5R2nQZcE+No6ZL10GXOExp9rMxmYA12BywPtUuARRetGQ1Z9
41TUugbI6pLes2WTkNWd59lColUhaxJ8FkBWt70e2Pm4KmpN6mA1lfRGu9+z
c6doeZR5DkLWudaw/tvf/vbS0tK2bdtArT179nz605/mnbvcklGZZ2Tt6NGj
R44cwcxhSetON0VKX6vOJYSCe7ftWiCLnZm3+KBWBs4TKUmN+pm34GoPuy8S
KrOfAT4LqH3jhwlQOdXxLl6FRiZBRqOKqSi0FxifmQQsPm7crnBYhegYJqg7
0oECieamEGS1rCodurAAtNrQNhilE8y+9szGs0PL1JRsh9N+gfs9YcS0YqyW
YGXpCTNYB1nnB/YGpgLY5/Whyopc8IB4uCbzM6Sv52ZDoGoXufTkivCaayRn
yEuN/61CmWqYJqSFpeZamFzBOny+sY4boNE3eKqR8nHmPxXIujb3e1WxDDJG
YVsMWWOLb5OQNcarwNEcZE263/8ISQ46rDrzUCen6pZ+eP7yiFEzDhw48OEP
f3jnzp1AFhoXqoK+L6aUZYyKBWqhgWAiMfOG/wx8S12lkcgUsfIRcyHLFtjc
uGE7zYf1xv3+dmu14EnMe+8gC5lNiF82BiSOi7e8GknUf5UWhJIbxFVlwbV4
6M6hZQYHkCDuC6Xx2LFjgJWR0L8eRiArlh1yXSX3iaFZVbKwomKJcn83DHs4
PtsYDq1z5Ha0BCWdkL1wnOSQPozidvIcapvFSjctdFeyvlorHdefIQ9bfiAd
6M8gqiHRKIQGC2yiYb1SmCtCuSNLmMqn9UopsTzdEgmSlmnWqHrU8sDWyxJi
YTCBBixyKv522LIAmtzh5MbxRMkjrecJIp0qzevdWZiqkFWzTyspVhCm0686
XauDtc7l1Y0utyEurMBXWJE7pasbgtK5gU3UyGyOrelYnqqCz3JJ/e3UrbrD
pBu/yx3N/l3SQvJF5yCr2zM1O37QoyUGMic8NeDo9ttvv+WWW2666SYg6557
7gGaXm6cMzxBLKbDhw8j2rpiONZXtrFvAQQBASKELHZzkbCSeej66tlzdWiI
k5LkC631XhxZl4YeVRcb17G+LFvkGGHU1W91j4qW/b/Sv15x1tnrFYZLKumm
/OUrBMQG4jqybH6tZqXryXpAeeyRrFDKuM7FK/MZEGEZ/+K5spuq3PisJVBC
o1hH+n8PQ6QClPRoaf2lb2ySH5wHmUjD3qA5LGolH14dLFXSSX03sSElAxpo
NtLlgdpBQ97UKF38ZQZC7KyLL9kaNVHN8kl7OAbQkpbGJEjIo01tEFnQSKv3
2js7WlAFqBqcTQv7Sc98zXvv1KcKTbVoUYyqYFUz5DsVq3NhzY26j06qOYib
hCwT2Py3allzeFUhyxFoWgBZ50oxTiBrgVY2ZxtOQlZ1dl0VpuYgK7Qzyy2R
TKWOaeHZBbI+8pGPAFn33nsvq5dvuTse5fe+9z20LOSadciDY3tazFvNoSec
Fzf7u+Z9eallnWucWhpoBpU6yIojK5AVX1a0LH1fCWAZYeQkaU6h/Zi6FQ3V
EKToQ1O0EXauhxsEsrgvDEOb5sQYZNhFwp6qtuXijly9T7W+veKVyVryJdb6
Qan/kMfnGlGYzjQzK+qIPRhOwkritwCyjHgmWcv78tsUG1ZaqpQMqNbqRQT8
fXmp+SAdKj8KL6sCDLGjiuatmlWIVUWqsFtk/OXGkfZDHl5T2gQr0dIeAXyo
6VLVoHN70CZa1hjZFmtZ9QydltWpWGMLMYbhAi1rDrKuqmVN5r13zqgFqJWo
XyDrzMDlXgOCLw0lVB1kxUKc9H3FQuzwagFkzUUYN49ajp8NlYxnGjcyn5lM
Vs6RI0cCWbfeeuvBgwfR9l9twUSWFhoIos1fxPzZRuCgSWj5BkO/Kx+YZLUs
vRMc+0zraw+sWTZycWgjqCc5BH1GEoUszRzzSINFa61Fu64SdbbYhrqybT2j
ZWRYv5It+7s6qNnII0CIgCxu3HR3C3PEK1ugmvDARsRTddE1xtI91bpgq1yp
WRl3s0cqUMaNs8iNq641aujUS3Z+dfWuudFBFvPmPVZK1URL0/4silbyHCq5
nzULxk20nVOzKYlQEtetmz7TstafHxq+PNdaFT/d2hOoaqb5tTQ75tAag0jD
IMORIpgamiMxWbUyTlLB6lQZ8W51ABW9y84g0b4CaJ0hmY1R1RL83Yx3K66t
Z2bGnGE4l/0+VxbdWYUZY/OwIkwNBXaxwm57tf6qijXpjV+sX01C1hx2bUnj
enUo5tLi0zZkShGxhx56aP/+/bt27dq+ffttt912//338/pjNx4N71lMwocf
fhihluMXg+LNRvNu4QbApRDxgSXNyxSpz5uU83OegMwYspQmU+IdKdWx7kb6
TYNcOnj1xphEGiZAyUVDt5JMJIsQdXBxEhCPZ4FooDp+/etf/+Y3v/noo4/a
iVsdyV7zMsNIQIpMGUfQU8EHbo1JM/9KqUQr0+HDvLED8s7Vyi8RShzNPY3B
y22IyanQCUYlF6tCVnoyGpJLpWFaN4bKNbpWsh1EpKSDGpgw1LvaenN7bByJ
yVLobExdAZ5HcLMkRx/Fyy2nWm3tR43z9uTAc6if6u+HYTd29be/KQNACxzF
ABSLstHG6A4+dyAWU3EMelVbq6pahakuNz5mY/CqMjZsyZe1AJomR815SILW
gszSTil6aTS6rIaxv71C1kujVK7FeLUAsjrU2ipkWXyqxXe2UR6ZT/jAAw/s
3btXStIDBw586UtfsvCZZ4r86vNBinl83BSrVGeIeTWsf1OtWMbMsO53JNfq
+580+hpBJplUoQMNe3kgy2wEfdR2qdDeYR/kyyxEzibvlvpYGn6psGkJqlSY
4SAwImJcPOscbEGtOn78+De+8Q31K0mMbUqoQ0bbMN4tbudUqzx6shV68y9y
Vx3USB/bf9SYpblCU2H1rgeXjAyCP9zXu20YX7DwWcjqtK9AFsPdBJY0vA7r
heXSNSGq07IMGjpS/WSjIlMmLg3dtJP0lfqgsEYkIJvApRBXm9uGNUKdTaoH
3hQim7Gnl1tKMwKIOLMC9Q2KQnNaVueNr56oun8MyY6ooWazPz00SYwl2AUH
s88CX9ac1jRnGG4GpiqHQw6sPq7qn6/24AIf1CZHzjCXWTFpDHYEC9dLy6p5
qjI8sFHI+tnQnfCLX/zi7t270bJ27tx51113feUrX+H9xT4sIXSPo0ePoo0g
pMzYq60FmFmasiqx+F26bGEyrQEB8Ux9ZyqM8a0MHYp9pwtEElH6VXgJtHQQ
0nfeecfgWnxZUlhY5iwzvOpBbB9N1LCVSnNqaIBrw7AFoFCuUBo1CdWv0jeQ
m9X3EoYrNShT308OvXJ0U2vRaDmy+HkuzIxuq2hKFXNUloRi8Iq7C2R1WtYk
ZPHZqKjQYahUrFDRCrzUrHhHwhyhz7KMXXJpffjxkuVB/HoYbw1t1+Jv7GAt
DM9pWpSEsaSNeVXpXpGOP3I8SnbK6FxJT830rA/U5NvOxzVXRSgcBeg61KqO
d/eZ82Vt1f2+gF6m4lVFv6pldWMBZFXjrmYsdDjWYVp8XHNa3CReLYCsOYjb
JF7VQ6ysf7GVpoJgPAWEzgJDWd/vuOOOBx98EPHkOjGgEGeZSM0gtXWXpC56
llh4vqP5zAxrMZkrzuNmNtTKzG1I2qfi1kFWMiQrZNmowrCXrF8mQyq2ylot
avM8CqlJqsgm94thAl5JX3/o0KFHHnkEFeuxxx77zne+g4rFJGikGBRDUQwp
HyCGdfzDH/5QogYNHCP+ZmBypzwXFT9b/Ji6IFeMTjnVLfHHfxnJauj4n+Pg
moQsYUqAUrdJWmmKpqs6pMksgKvTmlBnqFfIStfsHFJHjMQOsoJFc6OqZ2mn
e2kgeFwZGi8KlZyWC6vu9H8qI+22k01xasjmjcFYx1y+VjUMxx77MQB2Accg
2FZ9WVd1v3eQNZfksHnI6vJCO3twDrLmVLUOf2q1zvV1v3en5VQmZXFtLzfm
GaYUkUTLArJ27NjxoQ996LbbbkPL4pFxX+gS6CHoJN/61rdONqY+C5xZWm+8
8YY2GoKg7LCFp4Msc0JJO08P1PFpnFdjgiLMJGSZPSVhlAXOpr6rKIKN8m5V
ZlFPrpUkDQtCoR7IjWDKcSNoVnJBY+ral9DO1ydOnAB//mEYBj1N0AK7dA6b
/S5kmYil790oKvOgm84ynD/84Q+CrZAVy67qXTVx9KrudyErNTtCVtLdk3WW
vKywZonkpsBZ4Gy1pvRlMmPoFYxxJ3p02DX5b2cepkQ038ZjGVxaHxrgXtzY
7zWZG10WaLBlLpOhRhKr22pSffrnhaOah+P9O+NxEo5qWulcjWEHR9VVVQOF
C8KFOs/PDo1NJ7WpsZ241VEdWXFndV6sl4eK6eWpYurOPAxwxUnVUdpODr61
UuzVwVnKYsD2AbKwCtGyULGWlpaQaJvxYR8h0YcPH0a6eZFxlGEmKZKS026Z
MxfAA7LaDojgzMjyuVbSaCKEaz4rP0vdRV6dJ2ZbKapIvXmk/LRJDlo02pie
J2nepj+5P3jFI+MygBf0K/AK7DXRXeWK4Qc0SSBLVhnZRM2rTM0OOOxX8pEa
8wK+kA7WHrPxm9bAywRRvVgOb+F/Ng7x6qrhwi4RoiaUdl4mcd6vYhUKPgGH
kF/JJ5M+bjw4TctkteVZ5Gypu6n9aqs2VUGs2ozpx91pgLlsXzq+towa/y9W
84Ao
"], "Byte", ColorSpace -> "RGB", Interleaving -> True];


(* ::Subsubsubsection::Closed:: *)
(*$DaleMyersImage:*)


$DaleMyersImage = Image[CompressedData["
1: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
czyxX66XkioeNqu+uED+iUKeLDeBz086wWcKnyx87hY1Z2Nb6sldLT6JIxuH
Y7uaaZV+YH1/fE/bs7zdvbSFtnF0rmlgur53orpzpKJtsKZrtLS5r7x1AJ2y
lv6qjuHa7jHc2zrsmNYyNNs5Nlfd1lTZ0lDb0dLY09Hc11XT3lxcV5VfVZZT
XgzhrvahvrbB3s6RgZ7x4d7J8baxsd7Z2Z6Zmfbx8f75+e7paXSaRkYaxkaa
JsZapiZapyc752d7lxeHNtbGNtfnV5cpbR/uA9HN/V1QihCMukljONEa9aTF
5o7mCHCSqhmR9FeBHi4KSmGkME/YNeXkpHTCvZiGuhsF+JZWu67e39QcbuvU
O8dHh6cnunPT6fWF9e4W5nn75AVEEEV1j3RUZ3KEMxLXIHxM8ByQPMzt7I6u
r+8fHVPaPjj6JO2GyrC6f7y0o1nYUq/s6eY3VXMfECUr2ERk3X7+QAc4VzRG
wudn1yoN1l8tHFH6RxDV2O8p/b2IgklCKWp5Z0Thop9k2DSer+stq8emFd3Z
ksZIOgtq/cS2yvGFBaL/nmZodad/aRNqHJqq7RqmVNU+UNLYlV/TmlvVnF3R
mFfdUljXXtzQic2M0joot6Iup7Qou6Qwr7ykuKayqbujY7Cvf2J0eGayta+7
pLYqt6w4v6K0vqO1pbera3igZ2y0dXgEVgnbhFUiyKLTMTbeOjraPD7WOjnR
Pj3VMTPdszDft7Q4uLoytrbqjOjC2gq8FHU9OrvqQ0RhgIpATFpsbhweUEs6
SO2QfFIifJJFA8BJkgq4qDOiSEqRMSJPWN7fXz3cJZRuaVW7Jxq1yXByYTm7
ugSTxEIR5QEq6iako3rrBapXpMFai+O7AxwBaa3DxvcPJre3Nw7UlDYPj4iQ
G6wcnizt6xb3tAu7GnRmt1Qzm4dzu0eOhfpPQum0pNaTtXTCGEiAPrdc+Tl0
/xFEnbH8exHdMhoJpfsWizOiGP+ks50zxxcB2HH95PTD7hbHps64tI+XRbNy
qJtY3R6aX+2dWugan61q723sGapo7swpr00rLC+obiysaSL9zJKq5LyS2Iy8
qJSsuMx8RXKmLCFNnpAqjVZIouSRMdHKxPjM/NyMvJz03Oy0nKySqoqmjraa
pobc4sKCspLy2uqGtpaWrq6W/sGGbjxKHzpQ2+Bw58gYgGmbmOiYmuqamemZ
mxtYWiIaXlx0RhQCmZbLCzC5sbcDR91RHWCEtNhc3tlG2omwDs8Eb84VPWp5
srpFFvOR+uJxSd7r7KKbR1ocYfXwcHl/m1C6cXQA7em1R2bjybkVySewBJ9U
Lmow2zSnjjIWLoocA3DCivFJcXxGtrbHNzfxeaHkVMVrQSAqI9gj6gX4JDJP
snbtLOcvIklxTVD83HLlr6ry3+p/AVFn1P9eRMniJ6HUGVHnL0wPzkwfk9UT
/dbxieN7KL1jDXlXc7y+r4KGp+cGJqa7hkZbewdKaxuyikqTsnKjElOkMfHR
SamJmTkJGdnoRMYlQvL4JEgcHRsqlnHCRSECEZvLYbJZXF5IWLiAxw8VRISL
pRJppCw7NycjKzM9MyMzOystIz2vIL+iqrKuvhGPUtHQXFJTX17fVFbXWN/e
1Tk40jc2iRQUjooUdGBufmRpeXhxCbno8Py8M58TczNwURjm2MwUWSZF0Ef0
Jy02F7c2ydeLxDadF5fAJ4nvHz8Rg8OglCxwUYgCTrCNqn/35GRpb4uidE21
h4iPcK81m8wX14ATIl8tOfjUn+3rHGUaIRPlOQgkHj62sjq8ukqy3IWDg6mt
rbm9vY/aPZhV6Sb31NMHmjn1MVoilAzgFsEd/gk44Z+AE+8+MAAVCLXABvCA
HErO2JC7kDSCsV8hhHsxuH1mo7CEKFZ3LHZ8EAj8aJ2p/iMfB+fv7kkEp+Ak
ZdGKVjt3cDB/eAgtqFQYXDo6wvi6TretOYJURgNpD/Qne8e6Xa1mZWVtYGCo
sbE5L68gKysnMTFZLo8SiiTBHC4rhBfE5tCCgtm8UEqcUD4/QhgSJiB3QT4B
NHcPryBGICuYyWGxQ7BjMJMSjxsi4IeJhSKZRKqIlMcqY5RR0anJaUmpWbUN
rZ09g+1d/U2tXdV1zUWlVbkFpaX1jfWd3V0jY4NgZm4BcvQnp4ElND47DSxn
lhZQOiHKo3pCB9UT4IQAJ7JT+OrM6gr4BG/Q1Oo62CML9Qjozt/Rtw+NED5J
rIcwE2QStGDCCPSLu5sEUfBJWiSlR2enRssFpeNTy9HJ6YHmZFutpbIL8lUR
+IR141OGWEC9NbP7++gTzR6qJg6ORnYOxvZUk4eaWc0J0fzRCSI7yTxJWQQ+
AR6oA3vH10+0l49BKVpK2KSEaRgh3GIvSoAT92Jw12x3XnRyRpQ8EGai848g
SuI48JvZ24PGNjZG1tbQglLyvRLyUmSnCP2YtnGs2z/WbBzuQTOrS0gRG7va
kTompqaEcUJCgll8Njc4gB7kT/soGt3b25tGozEYDLQ+TjdfX1+0np6ebh9u
wcHBmOPh5h7g5QPRvH0h0ify8/DCCMPXH4eN4PEhNiOIzwnlcsJ4IeHCCFmk
TFlWWl1X29zR3tvbNwxHLaiohoen5RU2dHTDV8fnlzb3DsHn5Pzs9OI8+Jxa
mCOUElNd2doApWghULq8uT69skzIdCxYLS4TPsk3qnBOSr9CFHPI6ihZSoWR
Lu7uzm+vE0pXDnbAJ1rkpfsnx6jfKal0hj21bmtfvbp7QJ0fQlLfjwuwi450
ZVFzNHt4MK9WLWk1C0dqovkjzfTR8cShZlKlndXqF/VnREtwoWMTKYuIoQEb
mKfu6sHZRU9unlJyxhUTgDEmO3NL0MVdjlUj69WO7Wc5I0qtgv4qN/hfQBQZ
eP/iYu/8PNrB5WVswjkhco4TJjhOOLFY0J/f3V1cW+rs6yqtKotLjueFh3LD
QtihHC6XHc5ySMYPQ8vw9Apwc/d1eeTp4vLIxcXTw83D3dXN1cXL050SRiA/
X+9ABg1zAvx9IS83V383Tz9XDx8XN28XV99H7pSwSYS7Aty9MA0H93Rx9/Wi
+XgGBPgGBtHZ6ND9g9nBvBCuQKFMiE2Ay2anZebBV2vqW+qb2rv7hwbGRoYn
x+GiABW4Ekpnlx05KpgkdooWmxicWl4iBTvAI9U6ST4Jls5yRhQkAyp4IAI9
Oelofnt7dnOVUIqID0QJq5tqlXN5DjjXdw6WN3bm1japU5VAOz4dRMhYgOiS
DnH8cE59tKo3LGi0lJYMpjmdYeHkdNloprRiNCPlo8yTJIRATn/7zHDz1PT4
5endc/31E+PtM0onV/eUji/vjLdP9NePdfZb52SAHMRRkttudi+uKTkjqrbf
QWB402h1pKyfBOP9XW2hrvmkdXyyPmlkY7NpbLxrZm56d3/XaNo8NmydGPeM
po2jo3W1eg1R/vBwam1tYGamtLExLiNdKBZwQphMdqCXj3swC67m5eLq4NDv
kYuvi0uglydayN/1Ed3DneHtyWQEsAJpDH8fPy93up+3szweOU5/9HZ/5O/t
gXuhAC8vuqefv5u3j4uHl4ubn6sXJYIlwZXu6RPo7YdOkA/NHTNdvT1cPN1c
3P29Avw8/X09/Lw9/QKQOjC5ITxBmEAUIZTGxSdnZOZWVtVUN4DWhtauto7e
zonZycm5qemFmdnFhYWV1eX1DbQzC4top+cXpubmJxeXkcoire2amOyZmobQ
6Rgbbx8dQ/JJyRlRMIw0Fe637lhL3yNJ7NzW1szG2uzm+vz25uLu9prqYGlv
B1o72KdKcmhlZ39xc2dmZX1qaRWv+cTKytjS0uji4sjCAlr0R5aWhvAB+nTW
ECkoKDmPOwqZD0tG8E+SeQJO2BrFmPbi7vTyydnVU8vtC+vdy591/9x4eU3J
fHt/enVzdn1run8Cg4WjEvP8mVX7nTOiMNLt88sNs805L3Uuo6DVU8vamZVk
BejD55cNprUz8+KZftlsRDtn0K1YTpdMhsG9re7VlZFt9cqxZUVr1pw/3ju2
7RxZ1nb0q6uHB1s7m8uro/2DZQVFMZEKxHEWPZCI7uPn4+bh4fLI65FboF8A
4jvudQ7KmAB2cRc3iMkJDGYizvv6Yxx7UcIcjPi6e3q7uuM4JJR7uLj5uPo6
ixnAonsz3F3cnfd1FvbCQfBkkAb8ahwPgYfGExBweUgMRHyBSBAWFS1NSY3P
yU3PL8iqq69saa1v72gaHR0eHZ6bnV6bm1mfnlwZGZod7J8a6JvsG55smhj7
rZrHx1r6B1sHhkgh74woLBRZAUI8+AScDgvd2kHIJq6IPqzVuSRHQEdLsk3M
ITEdcE6tLU2uAsu50cXZ8eV5dIbnp4fmpiZWFqgvE0kVQ8l5nKSOIJPiE4PO
Oefx5ePPIQogKf2XImo4ntaoFvS6Datp1WQc3N5oW5idVqt3LVdrJ+Y1nUll
ulrbO5lfPZye356ZWetsbs1KScPbivcaGSY4BHJ464ETkCAcIhvkMdloQaCz
PF1cMQ07uru4oIO9/D29f4UoNjEIYRo2cUy03q6efy+iH/ZyB4p4LOdBPAeM
4+DkqeLJI0kOptNCeExkImECrixSKFeIY2LlScmxpaXFfb2j42Nz83NrS4ub
iwsbkxMLvT0jTa09jaMjv1XTyMjfQJQkogQ2Qik55fg/BVF0HB4Ixq6f/Cpv
dB6HSCDGIFUc4V4q4USU/xyilrvHlP4rEV02nszpjmY0KrQ9q0vdK4ubVtPK
iX5mXz28ujm2vDkwvTg6s1JR3ZKYmB2lSIABAja89XiL4VFEeN8BFQZhm6AX
cyKFYig8JJTwRgTeSFGDfd0dGaMrsTVnhDCHcAv3Q58Q5e/5Cz4/wOnxAVTm
33BRgh95lN8VMXzHg3p6+Pp5uHu4uLq5uLm7wN8l0vDwCF6EkB8Xm5SRnlNV
Wdfe1j02OjU7szg5Mds/NF4/OPhbNQ4O/g1EQRryRrJ8Sigl+P2nIIoWnCCT
NN6/OH38Eh1KzuOQ4e45gYrik6SgRMg5P4eo9f6B0n8Zohun5g2jAUIlOLCy
DB+YUx2Ob2+hJuqbm3N8LzMzV9PSHpeYJggTc1l8QUgE8UOQBsYo0gADROyR
jMNCySaFMYRN7CsXSdD+DeujinTKb2ne/s6I+rr5MXwCaV5070fenzsOjhDK
4gBykn44j5PkgXp6OL63uxvIDAoO4ODThZQlyN+Rang94nCDyZICl8sVCoUZ
GRmNjY29vb2dvX2N/QO/VXPfwN9AFLyhJadYU5T+ZyEKgTRKv8KS0tnDK9vL
L63P36KPOZSIzWIXVEm/IPMziFJJqf7q1vlxP4eoM5afQ9RZ5KRTELtlsq5q
NEsq1cDCQsPAQP/8fO/sbPf09NTGZt/URF5FuSwuNpDFDkb9QwsM8PZ3uNnn
A+t/KOCHFmAQDik5z3EA8+FeeKnTuJczol4u3t6PfPzc/f09/Ek2i73wqUHi
AYtGhgk4kYGgQ/r4+GAaWCV5KTFqItyFpDSExQSiMFJCKZ3hi6CviJJkZacq
Y+SCcB4j0N/P34vNCZLKhIooaXpmRmN3b/vgcGv/YENXT31nN/rdo+Pdv1xo
chY54RkdwEmdxeo42/kDgUCRrHP+9rw+CmOC6PT6MtJOkDmyMPM3ECV8AkjT
k9fOsjz7AkKH2CklR4i/e45B88Mr881zSs6Iwjkp/e9GlDrpdB0VulbXPzuH
mnRibX1yfWNsZRWVae/kZGJORlAol8EMDgoK8vb0AjbeLq6ev8zr/l7BWhF5
STrqOOAn/SOIEvJhhoCNWC6xa5KCkqKJEAsUYZB4AoRq3AX/x72OoEALYH14
coxAPxrdBxl2hDBUKOIjNY2Ui1BGAVe4K6wVGGMOj89h8sNTcvKrm9saO3t6
Ryd6RsZbewfq27s+hyj8k3xxT75+ImeQTq2uOyPqfBGcM6LUZZso3sEksdC/
7aKET/PTNzBMZ9lff41x4q6/QosYKclFKTkjishO6X83otRJp6vHxpW9gyHH
lRHzcxtbg9OzXSNjybn54YqoUEk4V8Bjc1lenu5I1QLcPWjuHgFuf6s8+Q9F
fIzA45yj/oMuCv8EnzBM8Ibjkx1JtoA+WRnAJplJngN5XLKqgBF/by+Ay+YE
CsJDxBIBAj3a2DhFXHyUWMLPzkmprCqqqi5OTonhcBkQl8fih0vYIYIQvlAo
UWRkF1TVNnX1Dg2MTn4OUbJ8ihBPFkjJ5VRk+f0/dFHCp+Pb1fn5wdlJMAk+
AeffQJTi8/zFu/OXX1C6evv16cNz/d2TsycvDqw2So4zMK02lc2usV3rLx8o
me9fUgKNv9XJ1a32+p6S2n5DpLr8LKKbTloDjb/Uxy9MP5x0unJytqLV941N
DE5Oo2ztGBiqamqJjEsIgOeEh/sFeD9yc/H2cfd0RcLm4v1hVdP3kau3m88H
eTmwIYWJ6weKXH0cciPLlR7+jz7I1c3P7RElpr8vhx4Q6OMVGshg+/tR8nd9
RMnr0SNvV1c/DzCMWt7tkzwoPr3dfD0feXu4+njDQr38ad4I1ijM/SJ4PBGf
jypHIhCgD1MEfuAQpkqgJe7q+L98OH6AF54/0EV26k3z9UH+4e/nyWLSeSHM
AH8vZjBNEMaViAV8AdIcXx4/UCYPi1IK4xJkMXESepCfXBmXlJapjE8SiKSy
qJj45LS0rNy07LyOoeHO4ZEeRKLxCWcNzs72TU1Nrq72TEyAtPHl5en1dce6
qBOi5BtVooWdnfnt7ZmNDUzD5NFFx4kEQygQpnCo6ZEFeOnC+DKS0oXh+dmh
uRkg6lz+/Jx/Pjy3PH9uffHi4vVr+5s3aE1Pnx7f3BxdXuiurBq7WXV+emAx
oN036w+tRrXdprI/HF091d48192+QIcSxn+rg8v73Ru7s7avbBsXlg2rZdt0
RWndYFvTn2+dXe7ablYttvVz++bF1Zb92lmL5osVy+Wm9XrXcrNttKvMt0t7
+qbukYmJic7Ozubm5traWrlczmQy6XQ6hwVHCUZMhOE454qA85FHoKs7w8ON
5unm6/XIw9flEdD1cawm0X1d6TRXGsPNn+Xuy/P0DvPyEfh4R9C9KImDfEkr
Z9HkDPdIupuM5ioNeBQV5IlN9EU0jyC6N4/DYAb6wit9PF1QJtH83AP9fehu
AXQPWoAnzc8bAZfu4YtqKYjGZNJ8PBh+Xl6uLkEBPn6eruizAwN4rCBpuFAY
GobslMdkk69NSSbg6/EINV6AtzvmYzI6dF/PYBrId8HuOBo2MR7CZPBYgVJR
mCxSiHQ2hMdE6EfcR4vQr4xVhImFcSlJiemp0Qlx5Pyr5Mz0zPzc/NLiqoa6
6sb67sH+3uHBwfHR8dnpicW53snRvqkxeCBZIIIBovCZXl/91e8wfNT6OnJO
SpgM2/zgljNkfZUUXD8jvbKCwzovLn0OUXTOnjw5ub09ub4y3toNNxeQ/tqm
tp7unR5D+6azQ9ut2n6vuXrQouq/uKOEEUqYQAS33L+2U9q9tO3Yzx2y2fYs
V5R2zZdbp7Ydk33//AbmuW272rXf7F3eOmvFcrF+7mDY8QQsN4t7utb+ycGJ
hdHR0eHh4aqqqtDQUA6Hg9KVzWYzg4IRFgmfZGXyE6Jergj47g4+gSvckubq
GuTuFujpTvf0C/b25/j58QN8xQx/WZBfNMTyjeXRKaWKOPH8QHQSQhlpoQGZ
AkaOMDhPzEI/JcQvieMTy/UThTCk/GAhlx4a5MOle0IhDK8Qhh/bh8H0oQf5
0Gg+ATSUPr7+vjQ6PZDBCaJBLIY/N5gOusAYFODtyHvDOCEANUoiE/EFSAOw
CcPEHH8vN8wBoqTDpPuFsoMAOSEcuJJ7MZPLYoRH8BD9ASrivlwhxqZIDDuN
FEZKIVCaU1RQWl2JNio+li+KKCwvLamqQFtUUdbU0QZQx2amppYXPocogvjv
aHUVZTslwif2HZiZIpdCUxdff9TSEg5LVeW/KOR/iaj52TMgari/N97dWh/f
2J7c2Z89vnz+YLyyaSynqjP9kfnswGpX2a6O7Deay1vd9T2lk9sHSh+uevuo
g2s7pW2bZdd+vndpO7RfHt88pqS+uN4z2xwXxVscX9nvYa+rO9XNY2dtX9g3
zNZV/emqzrC0r+kYnGjrHV1a3+3p6UlNTWUwGGKxmMfjgVIajebl4UnV4M7l
DBD1QGbq7gj0fq5udHdXptcjnp87n+bB9XMNC/SQsX2ieb5JAr/0cL8soW+2
0L9QHkqpLCYCbZGCXxrFr1Rwq6JCqqN5NcrQMhmrRBJcJArMEwWlSHhJIm5C
BDs+nBUVQldwaZFsfxmLJmYECWj0ED+/YB9vmo+nt/sjT49H3l5u4AquCJxg
g/6fNn3cHzmXY4gI4FMukoSHhABmcAgBwkB/b3QwAkRhm0AduAJR+CeECRwm
HZUVIgpKJ/CJogmCi0ojRREyCScsVKyITMnKgJeW1VSBzLScLHCbV1LUNdDX
0deDkbqWJvT7xkc+h+jPmDnrU1lERPjsn0YZO05+QYIUXz/LkQNM/f5C0y8R
BZ+nDw/Gx4/PHt9fPrm/ef7k/tXzhzcv7Q93Z5c2/blZf25VmS1qi+NqX92F
3fLwhNLp7R0l3EVJffmzdsymfRzBfqG5vLQ9e07p5PIKxzw0mVXm80MbklV4
8mPt9YOT7g/stnWDfmZvD5X7GD6Ac4tj0/MV1Q0I7rBNgUAQGBgIC0X9jg4r
mEmtGZLFbUqeHo5VRD/w4OYS5OHC83GJoLmKg1xj+N7JIv/cqKCSmOCaRFZD
Mrs1hd2WElIXG+qs2hheU2J4Z5q4NT6kKYZdHxVcKw9sVLJIp0rOLI4KzZOy
cyWsfBknXUBPCfVP5PrEs3yVQYGR9ACBnxfP2z2M4cvydQ/ycQ3yc0PgBpzg
yvORI4gTY6T7flzOImURqdxRKyELjRQJIkI5ghAWWjCJHSHkBjDhMC5TLOBh
glwcLo3gg9JwPgcWivjO4QaRGioxKQY1lFAsEEhErNAQroAvksvgmYAzt7gQ
IR6xHiPpudlw0Z6hgbaeLlBa0Vj3OUR/dS3zRy0ukpqd6BOfoz0TY+SaQULp
z5qbw2Gpb4vIaUiGu+emJ6+tLz5ief7ypYPMJ0/0d3dwUcvDw7NXL5+/fvXi
zeuXX7xB5/7pE/vNtdV+Ybq+stzenN/f2R7fXz9/RunmxXNK1rtbzDHfXJsc
OcO17vJSc3FxZLOpP/wIw/HVlen+MXa5e/USk+1PHnA0TDZc2I7PLzS226Pz
G5Xl6tB8iVaHZ3v5WHtxs3V6snCwu63XrR8edA8O5hQUpqSmKxTRsE0gCv8M
Dw8PCAjw9fX19PR0d/0Flh+WsR0jKDH8PF2C/d1DA72ELB8pyzOK45kSEZAr
Dy5QBBZHBZYpA6uU9OakoK40VmcyoznarymK2RbL7U4K60uNGMwQo+1PEw5n
i4fTeEOpIYMpXKgvkUXUnRjSniJqTYpoThA0xvFro7kVsuCiiIC8UL/sUGZO
OCc1NEjJ9pMwPISB7uGB7vBtOCGYpDJMIEqgpb7iJEtMSFrQp/v4YA6YhG2G
89ipCTEF2ekJSjmxUBLicRefEwxc0SLQc0OCQSlcFGKy6CToRyokSD6RggZy
WAASUb6yvhagwksR9LML8zPycqTRCox09ve2dne29nU39nZ2jAx0jQ11jg7C
FT+V4TPOpMEPyalTIwsLpEgnApyfNE7O9+semyC/yUNOr+ocHQXDztekA1QU
TaAUlTuYRPJJqiT00QJR65MnL168eP369bt377766qu3b9++fPnyyZMn9w+P
r54+hrvevXwGg339zVeUnr59Tenx6xeYY7u/sdxcG29Q2l8f2y/hqFrbBYSR
84cHHIGajP71swfMt97e6C8fdLa7I8u1ynSpsTo2D8/sa0e6Tf3RrlG3pTns
GR0qq6rMzc0NC+V7e3qRr05YLBaqJBcXF1dXV3d3dyrQO1OK95oTRA9jeUtC
/ZURjCRJYIoY6aVvdqR/cVRwZTSnJobbEMdujmO1KBldsfSeOFp3bMBAMgc0
jmWGjWcJpvNEE9nhkzkRswWimSzebHboXA5/PjdsOjOEaCqTP5ElGcsQjaRF
DKeGj6YL+xNDO6KZLXJWpYRTKeOWyjhFMnYcyz2a7SZnu+IzgnAMtBCgEa+B
Hwn0QJR8c4qnTc4bQen34bRVNqaRaI4d4ZzJcdGZKQlxUTKAmhijAJZUrAe3
wQy/UD4bLor800EmCqWYSIk0nMtjKeJiUCix+Twmj4vgTq5JAZO1zY1wzpau
DkCLAgo5QHFleffIYOtgb9tQX1NfV21n68DMBLFTFOO/uJD50w+jwRUx5/c0
ReAkoBI+Hb94NjwMgJ3PXAKocFRQirxRe4XE0g4s1ReO+AsB1IunT18+f/H2
zRfffP3+h+++f//V11+9+/LdF2/fvHnz8u2r11+++eLrt2/fv/vup+8pvfvm
S0qv3r1+/ubFk5dP758/tdzem65vTy+vjfYrw8UlhJGrJ8+evnr25qsvMBmH
gnBYjDx+8eL87uWp/UFnvj46taM91J/vaM621Mf6a+uGZm9sfqqitrKuoTZG
GeXj4S6XiOGcSD79/FAVO24+8JmAAHoA7VffCsGI8BZL+CHycFq8NDgtmpUb
y8mQ+mfJfIqUAVXxrM5UeXda5GC6fDRDNpQiGE0OnckMX8oXL+RHUFotkS4V
ipaLxBtlstl05mI2dzWfv14ocFLEQo50Lks8kyGcTo/4WRmSzviIegW3OpJV
qWBXxHDzJKi53OUsd5ge9JGoD+AhvXQkqx/4JF/3o5Zn0hjcICaPyYTNwngR
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
3BKU4lAwUhwTrKLyev78OeDHQf70pz8BTiAKVn/48af3P/z09v13d09fHGiO
TbZL88XV9oG6o6df9uFGEk6AirIdaWcQI5juQfN39Q1w92F4eQf7+dC9XRk+
j4L9PVkMJpfO4NP8IgI8s4TMyuiQagWrNT6kJ4Hbnxw6nB4+mikk7Xi2eDJb
MpcdvpQjXM0Vb+YCKulejnQ/W7qfI1YVhR+VCLVl4uMKqaFaTklXLj2tjYYM
1QpzQ+x5c4K1Kd5UF3dSEW2sjjVUxejKFMflUZqSyMMC8W6uCAenNJ8pmEkL
nUjijCRyUE8NJId3xYc1KUMLBYyMEFoy2z+R4x8roKVIWYpQWhQ/UMELhmVK
OWwhhxUaxuCE+MvkoYpoAY9PT0yOVMYKpZGOZc/4hGhghmoIUkRJMjKT09MS
4ZxiAQ85qiCEFSkSoLDKSI7PyUwpKc0HnDGxcmSq2DEqWvqhlcUrY+pqats7
O5Ca1rQjrLeWtzUWNtaVtbTm19blVFVDaSWludU1BXVw14ai5q7Stt7KrsFf
/Nx031BNX9/v6henpzojihR13XHpNLmI3gHnsd7xqz5G46bmEEYKRCF4KUBF
a7BbTSYT7A5eBwP8I4j+059/Foz0E6XvsCOyBRjm69evEe4BJw4IPjECdEkW
gUP99OGGh/ji3duXr19ZbedLK8uqI/Xm9lZjc5NAIBAKhXBR8Imy3dfX18PD
A14aHiZgeAQEuHrT3D0CvTy5dF92gDuX4RHG9AsNZAgYASK6t5z2qELOAZyt
yuD+RO50ZvhUhmAyPWwijY/OTFbEXI5oIVe8nBe+li/cLhDv50sO8iXqXMlR
juQoV6QrDjspDTeUC40VIlO19JMijeWRlhqltTbGVBWFjq0+7rwuFv2zSgUG
zdXRpxVybBrKZJqCiIO88O0S2U5p5G6ZfK9cMZnEnEpmTaewp1M4w7FBALUv
jtuhZNVKA1FSlYmCsnh+OaLAlFB/RZB7QihDSPcQB/lJWAwxN0gsZIWF0pMS
pClJkZHSEJmEy+P6y6X8pORYBG5ghhZGiioelZFMGgEsUVIBUdgpWEUxBSNN
TlBiflFxbnNLHcwWXkqShJTUhISY2NTklNLyssb21pL66rKmuqLGmtzaqqya
mszq6ryGhuLW1rSKitz6+oKmpvzG5vSK+qzqpvyG9sKmTnjpR/UOVvf2/q7q
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
PJvsEX3YrUMf3wEvIXwf8sVulolRxCHif1whgz4sl6B/vVR8UU/NeEGMQAKz
pmDNZwbNZAXNykMWVdwFJXeKmjUd1pkY3CSh1YtotZKQ2pRwo4ipjQnMjArk
M9wZfg7Bfo70YA/wuWPnezsd3t/ltJ3skA8jDWYFceOECPQolJLkyvisHLio
JD0zVZsH54xNk5NwD4FYaqa93gQLBXuAEy1clBgppG3pIriSt9DK69rkjdas
JmtOS4fS0q1u75W3dtqUVteSZyq3yR5Re3T1FVWEUmMdVGXT5orpTUpbGsAe
obS+tRleahOOVNbXGivKi8tK8w1Fcq2aLxHRQ1kI64DTwcHBxcWF8Ll169b3
393uut3fy8nfebuzh7Mjzc+ZRXeODHcXRXslM73yhKH5/GA5271EQKsQB9XF
hzQlBPUkB41lsadyeDNZ3MXssBV55Lqaf1jDP6Xmn9UJLxXKrhQlfFCSfLU4
8bI+/nKh9Gq+4EaR5GNjwqempM/LU74wp35Vmf51NVWeEEqJaxFO7nZpCJ+3
utR3erR/j+jLiYpfZ2oA6i9TVa8mK5+MlVFAjpchBQWfT6Yqns1U4ciDEaM9
ogj3yEjx/wBECYFE9oj+3JoDJhHfYaQ4Ql0vLdlUVrA5ggp9bo7/oiLhs3LZ
J8hSSqUflEgvF4tA6UZ+NCjdowxdVYWuaTjLStaiMnQ2J3Qyhz2Sxe1MYrRS
541Rm8CuiGcXCkPkMYEp0bSYUA9m4C6aP7UFhIen8/Yd7zpt7s6GuE/dJ40J
g4uSZXSMyGgYKUonUBqdmIIqCUK4R9GELBSBHnaKcgnFUQY1jN8GKeotqsZ2
TXMn+My39qFPoLUdV7d2qaw9Nmk6+mwCpVqT2aY8c5Wd/rbVeX5FZUFllb66
pri2tqS22iZjXU1pPbXbibm50dxQW9FYV9VMUQrbbGp7o+r6OlOFWV9iyNMX
KrWaWKHAjxbo6u7m7urhvMvl/Xe3vrPl3R3bdm57fzv6772zzfE9dy8nX28n
9yAft1CaazjLLS7SKz7aRxdDz+WHGETM8vjQmkRWcwrHms7rzuSMZDCmFdwF
RdhiNnctJ3y/Mgp8buiEZ3KFF/IlFJ/GpI/K0m4YE68Xy67pJdcK424axJ+Y
4j83J30G86xM+bY249u6zK/qUz+tSkAL5/yxLedet/ZBb+69Xt0PneqfurW3
enNv9+XdGyy0CZXR3f6ih8PGx6OmO336B0Ml9waKb/UVPpurfbFQ/3q5+bfV
1peLDa+WGp/O1jwcNz8YNkEPN/V4yPRwAKAa7vfqH/UX2nS3S3erXX27Q3Ov
OxdM4kohgR64Ej6hn5qyvqlJAahov6xMJJR+XIagILtaIrpQxD9DDe/HHM0L
P5QXdqQgAkEf2elcNms6mz2vjR7K4nansDqSOS2p3Jb08IpEToGQrhOFpkUH
hQc4ejtsYYb4cEODqPX4Xk67HLfBS+kMGpsbyovjcwX8JIUiODw8NjlFmJ6h
NBqT1LrkvOJ0fSk/U5llKEdHps5PLShRmmvii8syKuqU9RbCoaqlW2ftz+sY
1LT15ncOoc2sbVM2d6lbe7SWPryltPQq2nrkrd05LV3q9n57UaNYZTXK0qoc
gxn9NzKWy41GpclE5kLbFpjkVlA78xNTJTvzE1HoNtWYmqntp2pam2oa6hsa
GqxtlpqKSlORodxgLNUX5yrVseGRAV4+m/sRObvt9HbZ7um01X3X+24733F+
o3cdHLZuwRs0Dwe6xw6e3y4hwyMtMlAZyygWsEvFnCopD9l+QzyrIyOsLzti
OJu3IKdWtO3O5qxmcQ4qIk7ni2CYV0uSzhUlnNNLzxeKLxbEXdRFXsuN/LAg
6qPCSNvgEjyTjDqSwaXP61NQGcEt7/XlwicfDhagOPq+Q/V1u+bbTt0PPfk/
9RVCZDQJL3/u1yOUI/P8vjsPfSSfcMsnM9WP5xqeLjQ9X2p5sbv1yXzjw5m6
R7P1Txab7s7W3p6ofDBd+2qx5cGw+f5A2YOe0vs9JbBiiMpLB0vgrrBW6i5/
q8K+uicuSkAl41H48qSSIvqkMh7f/4My0cXimAtF0ZcMsecKI0/lUtNRUEOt
ZNEX0xmz6azJ9NDRdM5gCrs3hdOREtqawERqWi1mlEQHGfh0BdtX4usYSXPF
aad7Oga47/Ry3rFrx1ZqumOALzM8iMvnCFJECcoMpojPz8rMMZszTeUxOaqE
gmKJriDdWJ5Rak7Sl6QUl2aVVWaXlmeXV6jqm3MtXUBR0dqvtA6rrGO5XRM2
aTvGcpr70RqGFjTtozbldU/q+2cLeqfxGfRVpmpdRb2mvBaUZheXv5HBlG0w
EEpVZWW21SXaciofIJSSx0zbI2pspLbyg50C0ZqaGnNZeXFBoV6XV5xXoMzM
5tCZHk4uZEs3l51OLtvdnba6Or7n7PCuE9o3et/Ry3kbzdOR5ePM9t4pDvUB
nyohs1DGMYrY5RJOXUJ4UxKvNYlD8amMmlBELil5ywreipy3J4e3nhMGRBHW
r5tSL5emni+SnckTnNZEXtBGXNGGX9PyPtBx7RFFJEVkx2+Nn/jr5gzU7EAU
ZD4bMzwe1qN4/7ot5+PGrC8tKmAJGhG7ySASaEQER54JMgmfOI6Dj6erwCSh
9Nlisz2iT1daH8033JusfjBe9Wi08uGQ+VFf2cO+UiSlb4J+V749ovbVPeHT
VjfZynx7RD+pSfyiIfWjqvjLJfwrxjiAeiY/fCOPd0DNXldy9ig4yznchZzw
2ZyIyazIkazwntRQaxKzWUZVTyZ+sDGWrg3zT2N44JxHBbkxvRz8Xbe77nyP
2hPSxcnBcZuL105aqD8/IS5FnSXKSmfLpEKFMqvMLNbmA8s4pVaWp08rKUs1
mNACV3lZhbyiStPYmt9O+aSmfVjbNZ7bPV3YN2MT4FS2DamtI/k9U0DRJsBZ
PDgPSnEcLcwTcCqMlVlF1PL8N9KXZBYVEUrtF5ioSkt1RhOhFDnqW4iWNCD6
VxqrKxDZy8rKcrW6PI0WiCZJZOSRRm6OTuSpQ6iGnLY5Acid7+7cvmU7Mk8i
1+0Ofi7b2H6u0XRvAcMTfMr5IfkSpkHGNovYNTIe+GxL5nWm8UYVUdPa2DlN
zIomgppQp4rYr4w4rIpCZYSc81JR/MWSZCB6Nl94Vhf9gT7uRkHMjbyI67k8
e0TJj45g+k1jOsk5gSVyzvv9eQAVR75ozgSf33XlEg6BKIHzxVwNWrwkB8Eq
0aOpyvtTNYRS8GmP6PM1y4uVNvTvjVY8Ga9+PFL5ZMD8eKCMVE/kxqg9okhK
bSJ84nuS1JQYKf4J9oheLxeDT+hmhfSaSQhQz+ujQOmpgsgTeeFHdBEHdZHU
FERt7JI6dl4d0785iw81fqOMWS2kl8YGFUXSciNp8Vw/RK7wAGeWtyN+C5q3
q7ebk5PDVgendz38XEIjWDHxQmVJkUyhiEhJFSs08E8gyldopLmF4DPTVAE+
k4uMqopqVXWtrtmi7+ov6BrO75ko6J8p7J8vGV60qWhgjrglsETfXngX1gqM
8S6S20y9Kb3AiEIM7RsVGjL0ehulNiH90Jb8jVJ7RI3NtYb6qqKq8uKKskJD
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
FT8gV0jLi/Mpi6fVZ7CsOdwGiW+j2LcnhT6l4E5kMyczQpZU7HV9zP686DVV
2EFd9Kki8dkiyVFV1Ckd/6ox8bo5/WZl5ifVGZ9Xp39SHv+lWfp1pfSbKtk/
RlRL9FO39scuzb0h/aOxEkpTlU9na2CPr5eb/7THAgifzdXi4IPJiucL9b+t
tf1lf8evq61/3tf++x7L65WWh3NU5gkmX65afl/vtun1eheJ9a9XLKD0xWzj
y5mGF9N1zyeroMej5Xf7Dbd7ix6NlP0yW/eXxcaX46bno8ZXE2W/z1ah83TY
8Hiw6FF/4eMB/e0OzZ1O7cO+gvs9eXe7dHh5q139TQt1r/azumRQCkRP54Uh
Bb1Wyr+qZ5/PY26og48og07kbiKq4ayruQcLY9Y0PCA6ns6YyOEOZ3O7UxkN
sqASUWCpjI7kP1cYkhzqmcNnSdm+TLftfs47XLa9A0R3bn1/505HP//g9Cy1
ssCYbChR1tTmN1sKWqypJnOhtcvYM1Bk6SqydOrbOvLbOnRtnUDUODQDSqGi
AVjlpK5zVNsxgpYIxb6ma1JuGclpG1ZYR9G3Sdk+hvrLJlwIyHiR7irKK+0L
eVugh9IKCmwCvSip4K5pxYUyoy6lrCAxT8lPkvn4+VKP9dvu6EI9uIraqh0i
DwBCh3o6QEiA4673HR3f8XB5P8BrOzfYNSE6KF1AT4kOkMcF5UT7aQQBxbIg
gzigNp1Zl06vlPm0pPkOatnjubxhBXNMzlrQUvsi7smNQhVwLC/qpJ5/zig+
WyI6XSw4Xyq5ak74uCqdWmhZmfhhpeyz+vivmhO/s6b82J5GimJqDLwlG4iS
UUf84vfIyE9vISqgWyOGW+PG25OmW9NmZJUI2cQSf93T8Xqt/dWKBfi92N9h
0/N97b8d6fv1cC/6rw502fTn44P/cnLkrxvDvx/txwfIh3Ec7S8Hu6nOHuvL
uaYnk7XPput/WWh5PFHzar7516W21/hz87UQ3Jvo2UwVlfdOmmG2qP3J1D6k
BGQ04Md29feWnB/bFfBSRHzU9aiYEO7PFUdv6COOF4QdzeMeyeXsyQnapwhZ
VzHWNaGH8/jIjpaU1CaTc2pqt97OJN8WiTdy/nI+DQW+UcDMj6arwkIyObRU
Ni0sxAcFvrvjVg+XXc5OjoG0YP8gOkJqfntzXkezztJiHBqUN7fq+0aMo7Om
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
kzPr99/6+t39L97e++r9gy/e2PX16S0vTiw8Ozr79MjMZ6vDn+4avLNz4M5K
/yfzXR9OtrzZV3G6Nf/d4dqrY40fTbXenmr9fLDibn/Znd6S2z3Fb1clXiqP
A+v79Rl3usvu9lbcG6h+MFQL9jfbi251ltzpLbs5kP+aD7oyb/TnvdeacqYy
cn9Z+Gpx8HKB/3yejz7NpSfBrj1W2RKjLvdXVQbaNoQ7t8d5gQ14WOApSXHe
uDUzUBSkKI+C4tPwJCwcZmaMR8E5FCKGiHWNDAuprghvaQ+sb9fVdQc3Dga0
DIEg3azyIEv/SY9bRe+fAYo6lXQ6lrS5lrcOzU6+ZvMjdSBORxdmgJZ/Zmph
bmZpASg6ODU9ODnRPdhbVlmUmBju5qRwsrUWMjGbsQkU3YxToCjYWzNw7kqB
hw1XTofLSGauQowL22pT0Vg1PctNCJ6YIEXBuNSik3SFyrqDrXsDWG1eZCAq
SFHQiy6l2s8mKPsCuRNRys1edONifqrL5ivLgE0/gbSgym+m6Mm66HPNCW92
pLzTk3FlIOeD4fw7M5W3pspvjJdc/+Py+GtFNz9wBI5sfPh9ofbzbU0gPx/v
73l8uP/R8cEHxwbuHRkCBffxsRng5NOT899c3P7qjR3fXlr55s09Ty/tf/72
oa/ePfrN+8fBZpOXb+37/q1dz88sgZMBX55efHJ8Fjz85o2doJR/8/bat+/s
/+7dA4AfrxwG68bBi6t/+/DkP66f+e3qsa8v7H55bud3b669PL395drkJi/2
TjzbPfpkZfjhtoF7Wwc+mux4X990vqPsWH3u8Ya8C53l7w03fjzR/tFAw9We
mnfay99qKQGcKE9fy4nZmxG1Nzl6LSVmX2osYGdc2Pbo4B0xITsTQ5YSPF6z
NclrNTtoX37o3rywtaKEvcUJu0sSVsoSJjJ1reGO5T7SIi9xsVZV4qOu1jk1
RnjUBDtXBTkWeSvT3SQgRV0l9E1FbYQsHpOMRVoRMUg2AUckE9i2qpS21riu
Xp/yBv+KtsiWkT8r6l3X80/6PKr6XwOyFKxAVNeKLjBYdY8Nv6ZDP9A1OtQz
ru+bGBkaH33N8MSYfnJ8dHpydG66b3yif3yss7+7uCw/ISFMKeMoJUwxBy9m
EQFAS3c7KRiUQJCC1hQUejcbvr2ALCKZqxlwDdvKkWEBxqUIFTXejgkULfaR
lPtYV/sJwETfGSLtDBKAXrTbjwGCFOQnmOhBUwoSdTxKBpwENR34CWIT7Mci
FGDGB/UdHAR+grq/t9AfdKGn6mPeaE/5Y2zPvzZc9PFY2c3Jyrvz9RtvwJis
vDFR8WdFX39VyK256tuLtWA+erC3E+Tno6MDz86OPTqtv3tk8PHx+ScgzU5v
+fLM1q8vrnz75u4f31n74f1DP9x448ebl3765M2fb7316sNzm3z7wZlfrxz8
/u09ry7t+u6tVXA++Gdfnt/+0/uHvr584Jt3Dn73/pHvrxz98dpxwKt3D331
xt4fzq/+7d0j//XWgVenVx6uTQOeH93ybG3m1faRl1sGn871PJnpAtwZqr/S
WvRGfe5qcfKOvLiZJN1whFedq6zUlpctpiQKCH5crBvF0hYFyS0ha2OIB21g
bQgpDCEZBEkgSAxBalMDGyNIaQw5mEFef8LNaGP1hUFBcEgHM4nAWsXScHEc
UrqCV+ZhW6HV5LvalPtpSn3sKgMc60LcKvwdynzt89zkyY6iYCeJh5wFCj2Y
6KVcmpjPpBJxDAKOgUKyWQwMh60rKoxqbPOvbAqp7optG/+zomCo/yeD3rVD
r/FrHAVFH2y8avu9G/saBzpf0zTY1TLc0zbS1zky2DOif03n0GC3frh3dKRv
bLR3bBys7b2dRaV5YWG+IEXBRE9CGYmYBDAlAUXBaA/8BIkKRnt3O4mdiC5l
oKVUmJuEYsuwsKebBdqQN179dObmeArBuFTozqkNsG4KFDb5cxu86AM6Pijr
YIQHWs4l2oL9YLBgOdt1LtVxS5bbbIrDaIzNWKxyKEI6k6zZWei7nOO5I893
d1HgWmnwidq4C82p7/bkXRvc+C6Fjze+YhHoV7vBbP0GYDNdfXumBkj72UID
2AB1N15VXKj/5H8U7X64v+/JkaGX52efnpn87OD/puizUwsvzm4BQfrj5dUf
3j/46salrz889/WV09+8e/LX6xd/uXHxx5sXfrp57qerh8FPf7568LePjn73
1q4vTs5/fXH77x8efvXGHhCPP7y9/6d3Dr44u/L8zI5HRxcf7Jv64cDkd3tG
nm/teTTber2//O3m/HO1ufvz4o7mhe9O083F+IyGezW5KQukzCiCmY8V5Is3
9UBCtkYb4mmMICdTyM0SckQa8aiWQgZczEZJuRgRC8kmmdFxRgycORVhToKZ
EMwMCSYQF2XJhpvy4GYKhJmnGfQaXysDD/B7jCF3Y8jXwtzL1MTVyFBjADma
G4N/ixSCFOZGMrSpIxUdLOMkOiryvDR5HrYZDuI4NTfMVeppw5Kz0RwSgkPG
WHPpYKJnUUkUJFzAZ2PYDBtdsK68NrS2PaZ5KKZ93K91yLdlEIjn1dDr0zzw
T4a8GgZf49825tsyom0aBntty0BJa3V5R11lV0N1T1NVd+M/aa7p6fkzTUND
9f39XeMTbQODwNi2ng6gaECAO+hF5dY0UOhB5wlS9I8RiQV0FdCwYb6u3o4K
Bxsun4FQ8DBKHlpGN9VwYZ4SrL8cm+XJz/MW5LgzKvx4NQGchgB2cwC71Z/Z
/8eHuAdCxPoI+VS83WiUzVi0ciLedjBB0R8n642R9ESLR1LU4+n2k5kOUzku
8yV+W8p0Oysj1ipij1aknK/O+aCz5t5o25WezPd6sj4cKrg5DpITKNr48WTd
1ZHKdweKr0/W3pyu/3ii5v5yJ+DOfPP1yepHK21f7u17sX/k+drIs7WJ5wfm
vzq69d4uPRjevz01+eO52VcnJx7t7fn+zPTPF+ZfnJ1/fO3wt1eO/PzG2s8n
tn25a/jZgRFg9WdH9N+f2/X9me3fn1r68eTcj0fHX+zqerat5fm21p92DL1a
6nk+0/Z0svmdmlTQJZ4piFyNdTqWqDydID8UQFtxRM7IER1My1K8ZYw55ImE
NCAS8QZAMzwGxmOTxAKKSkTyUZJ19uxwjSDcTpToahfvoI61U0dr7Gz5LBEF
z0JbMZCWKAMIDkEwCDKDIAs4CoXCIC0skBDEtTCXWlqo4VYucLMAS0gHh0JR
UBgaCkH+D0EoQ2djyANm5mRhYmtsrDQ2E0HGfMiICn6TmbmpJQwNt6LBLaUo
Kw8qNlbKT3eSBDmyXWUEBQdpzUSRUWY4JIzDoNJIeCTMEE9AUXlskbOrLr84
pLopqLYjomsksGvcv2PUt03v0zoMNmD1bh70bOwHm39HYWsNoKit9v9Ha31h
c/Nryjo6avr6Kru7W0dGWvr62/r7GtqasvPS/fxcnTVSqYDCoyFBLwpSVMGn
OSutQYpqnZS2YrZGtnHJFCgqZsKFFDMpzcSeY+kuQvvJMBnuIEV5Wa60Mh9O
pS+zMZDTESLoCRf26DYYDJeOxihnkh1Gom3Avj9c2hUp7ouVD4O6nwrkdAJM
ZTkDVioD12rDjjbGnW5KPV+f8V5r0Sd9dffGWm5N1twYq/xkovrOdN3j7Z2P
V3ofbOu+t9h+c6L2zkzjZ/MtgFtT9Zuvd3862wR6gI9Gy2/NNj3c0f9k78Rn
O0ZuLevfnWy9tUf/yerwteXut2aaLs+1XNnS+d5i+9uzrWeGms931p6rKThf
kr4WH7QnJWB7mu9ynNeF8JBzOv/T/h5nfJwPO0r2yJk7+IQFLqaHg2mhWFah
oFIYVGIJFVtAZVZQCRpKpxpmkqFilmGtGJHPsUrnU9Js5NFS61QnZrqPIt7f
ISMuJCMhNDs2sDwpoDLWsyPZeygzuC81qDXaJ89FGSvheKLhEmMIhCTWEMIb
Q2RzAx7WigE3JZlBGCPIAuhqCGEgiABBInMDDdJMS0KG0NCxFPM4qkU8zRKQ
xIRvEs9ChtEQoQyUjoH2p2FtzAzExgZsCMJDEAJmjDQ3RBhBwH8cBBEhiGUA
WcPMFBS8hsdQ85hiJpVLweNRVkQckk7C4eAmKJQ5S8AR2NsH5xdFN4BGtDem
ZzS0dzK4ezyoczSwY2STgHY94PXDv5LbUpPdVJXZUJFRXw7Wf1KV09TwmoK2
ltLuzqKOtvrBwaae3qbursr66uS0eH9/N7mYyWdipTwikBOkqJONMETrDOQM
9NC4qER2EraES+DSrICiPKKxkm3pLET6KIjBalKaKzvLnZPhTCnxZtUF8VqC
+Z2hQqBoWyCvQycYiJKPJtiOxKv7I2W94RvvrR1MUI2maqayXGZz3cfTHaez
XefzPbcWao/UBp9uiXmrO+3Kxlctld3W13zSX/VBV/mn8+2fL3Q83tb3fPfQ
V3v1z3cNPFhouzVe+2hr553phhtj1YAPh8svtWXtLwpbTvbakew9HmrX6S1u
dBOVaLhJIkIMH+dPt3JnopwoMDu8qQpjpMYa26AMZHDIBtRWQ8gFgrQQFAJB
mVjLPAo8BW+cRTLPtDIswJhWky2b6DC9hDCjpi3YMfTO9KIw65oEVUeOW1+R
FjBVH75Xn3NuvvZ9fcuHYy0Ptg+8ODT34uzqnbOHPrr0xpunTl7ct7S2oF8c
6e1vqmotTq+M8uhN8eqP0YxGOVQ7MmMpJn6WIPSgWCoqgYUPZRBlFCwHaU41
NyCbQigIIplA4KEIb+XEI7vwSP4SepQNJ1pCTZCQUySkNAk5kYNMYCPimFax
DFg8C75JHBseLYTHiNFJKlq6s3Wsmhuh5Hhx8Eq8BcVs43diDSA0tAHF3BRr
ZASyGgNZMc1J1kS2iMaVsDkbXzFHxnAYeBYJjkWZSZUSob06NL8gtaMnuXs4
aXAiZmg6amAyom88vHcspEsf1jMK9pH9E+DhvyOzqS69oSa5piKxqgys/6Qy
p7XpNdktjQWdbXntLdX9fY3dPfUd7WU1FfFJ0TqdF5uOYZLhICodFQJQ3IGl
YBPk6eDjrAJBSkWbsUgwNsVSxkGBFBVTjOzYFm7WKF8pOsWZmenGTnMkFXky
WsLFf3zDLb8jmNsUxG0NEfTFKkZS7HuiZZ0RYrAOxKkH4uwG4+31SY4jyU5D
CZqpTI/lkqDVqtBTDZFvdCRfHcz7eKT82mDp7cmmO1Ot10db7mwZvDnd9fFY
683xpmt95W+3ZB0tCtudptX7yxtsKSXWiCKBVTrVAJCAg6LhUAISyqSapIO/
L5pFNN0qmAZPlDFiVDx3Cc+Rz3Dg0Z0ETGchy0cpjvZ0ygz0boqP7EyKni7M
Wq0vPdxWcb6/8WRX5cXxxuOLze/uH3rw5tKrD3b9fH33+mcH1z8/uH577/qT
c+tPL6x/+cb680v/s390Zv3T4+uX96xf3PqPM1M/nRx/fGziyXsHv/vy1quv
Hz789OOTR/Yd2bu7rbyoKk7XHuncGyTKIENR5lCEKZRDNW5QM5sc+KUyehja
UAlBfKSxgozwlLBCHGSxnvZg1cq5ngKqI95EZg6JjCCFCeQM2+gfArCQjgCF
0cxCKCaBBAN/HOSL+R98sJAtDHJCQ/5c02glMdGZl+mnTNUqo534KR7WoWq6
Mw8jpyFoSFNLQ8gE5LORFR4iIyCUFQRHGSIZWKJUyKUQERSCJRNrZmUKSaQ8
tlQQmZ+b29OX2adPHxpP0s8kDE3FDUzE9I1Fduuje0fjBycTh6fBw39HekvT
a1KbGsCa2daS1d6a0dqY09la2NdVMtgL1iIwwg/0VPT11LZ3FNdUgxRNSI4B
KSoWUGkESycVH/SioL5bM/BgkPdyUICOFIxLYMoDigqYSJCiIpoFKPQqhqmL
AAEKfZIjPduDW6jlghSt8GE063hdYdbdEcKWcOvXNIbwWyNEnTGyvjjVULzT
WIr7RJonWJeLQ3ZWRK6UR5zsyHy7t+BiV86b/SXvj9U9Xp28Mt5+vLlkb3Vu
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
MQrc6Y3BkoE4TUuwLF5oxQYzuxWCamRkDTd2ploV6ezmahN7c3ySHKlJClKa
PSPbmZvjIshzFiQqqYlyarKanqShBQlg/lzzcBEy153fnehVHaTKtGcW2vNS
pdQYITFCQA3iUj1pBCci1omMcqEYBFojdXKCn4QQqKDZUa1UVJgLH+9EhykJ
RkqSsbecnhzoom+u/PGLe3U5SamunM0bOlfqJEWezK5Y+5Xq2GP9ucfnCz86
0P3Bcvu5oerOOP9trZUaNqE6P/7Zk7caCsLSvMSn9DU3d/V/fnTk4YWxB5em
vr6y9vPNYz9fP/z9tb3fX9n18/u7fnp35cXRibtj9W/2Zpf4MSKdiVM9pX//
5UV1eU6w1u7D01vW//7NP/7268+//e3+gycgRa+fP/bWrunjgxWzRZHdcc4g
QhsCROUulDInQrU7udKLAipRSyC3TkufSnWcS3dZyHTbmu26mKzcmeME2Jpm
tzvPdf6PL2OfiVP0B3FGwsULqU4rBT67y4P3VEXN5/kNxDt2JTmC/9MUR1qk
Au/PR2sIJgqkoRxjxkQYM1BmPCJSyCAC3zh0MoNOkqsV6gA/z+go/4QE17CQ
iLS0iJSkoNho39BArZ+tu4skQqthI404aAswYYHzU/OyKwcH68fGGiYnaifH
66YnqyfGykaHS0f05RNT/5KyiSkwqm9e8AQJuXllaePI1HT39PJf6ZrZ0ru0
0KDvrO+r1kU4CHgwOxE50sMxwF5FxqHQVuZ4lBXCwmTzjsksKpFOQAnBExBv
LqFYajhoexZMK8J58pE6JSHVh1Piz63ypvaGSgcjXdIUYpkJwtqKQjQ3YRpD
0Tb07ljXkRSPvnj3Qk9RijNf58yO8hBGuvLDNaxwFT3ajpVoz01yYqd5s7N8
eVnenEx3ZqYTLU6CiOJb+FMgMNQH8JGZ7qJsTwkYBJyJBuAI6BCCFEQ/CTZQ
TvDgWYXZ0pyZZu5cGPhP8hBiNRwzFROy4UCe9oSseO+bV9/Yt22pPCMZGFsY
bp/pScuyx1S5UCejHPcWhB9ujL02U31nV/f50fLdLRmjeaEVOjslEbr24amr
l49nRwXWJISem2i/tb3z4Z7mb8/qn3148MXHB56+t+PRxelnp/SvTg7+dLT3
5da62wMF82nyBFuj5tzQrx88++/vfu9oLctKcfvlyc31316t/+P39fX1X37+
8dm9W1dPr53bNnS8r3AmL1Cf7Nodod78wFdboHVPmHgqWT6ZIJ2KEe/Ldd2V
qF6NVx1MtD+aoTlVoTlb5XKm0v1Umcf5qoAj+R4HslyPFfkeKPDekeqwFK/a
nqJZy/U4Xh54sFC7PV2jD2O2+ZIK7BGgZwiRIMFM6ibEC4mWOAQKADo3HApO
IeNZbCqLTRbJxQ7asOiMwsiM3JC0tOCM5IC0OP+M2OCsBJ/wcAdXjc7XyVnG
olsZ8ohoAhzFpnHCdMFdPd1dw2Ccaasa7KwY7Skf762dnygcnf4rBWPTWaMT
dTPjDXOTTQvTzYszYLNJ4+x0++yWv9I5uzSwZallpLu6o8zTTyYRoTRyerCL
rbOID8ITbm78x12SrTBwCwYZD55oLDKWR4AJCBZKFspdTPZRUMLt2dGO3AQX
Too3vzJUBiK0NVCSraTZmxlIja2s4QQmCpYZ5D6YF9UYatsSqq4PVqU4sCPU
jAAHRoAdTSsneIswAWJ8qIISp2YlODDDbTEhNohoW2yaCy3eBhPBN09RYNOU
xACuVYQUHyUnBgtRviwLH6Z5uASX7MgOluGcqYablw11UizAT4gIkuGDFBSt
GPQhFh5yczcFwl1N7awtXB4fmexuK0sOrUpwLw4SdETZ6GPsltN81gojjrcm
vqUv+mCx8cpSy5H+YqBoXYSzDAttWx78269fvH/qQIRG3pUc8tFyz7NDfVcn
Cz+eabi/0ntvW+fNidp32rMuVMaczg/ZE+81FeuVqjDT8qHLhxbWf//7r8+/
aSiJqchyXf/1+frPLzcV/fv/+/3L+7ffObbr+FzXie7sxYKA6XT30QR70FIu
Z7vuKfTaU+C2mmO7kqbYm6E6Veh6INlmf7zsSLzieIpyX6roUKbiVIHThVLt
mULtoTTn49lex3K8DuW6AA7mOK8k2ixGWu9MUoKHx0u8duU7DUbwa72pxZ6M
ZEdyuJIUICfbszBUJJKMRBCRGzfFphAxTAaZziLyJULHwKiU0trs2sbc+vrU
qtLYouz4spzMutKYjAxtgHeEzgMEKVCUAjdDm8MIaCIejVHI5OHRURUtDc3j
g/WTg9ndDRVT+nz95F/JG5nM0I9VzIxWzY3XLEzWLk6BdZPa+el/2QC0zS/0
zsy0jfbUdpS7eousrREqCdnVRsjBI4GfMFNDAhqORVgSMQiQosBSChbOxpqD
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
f/2zv/7805+/uPjWyvBbCx1vzTVe7ykBE/2CJ26pNuX6ZPXVqbo7u3uOD1Xt
8DqK4iVhYtRffv/FL7/4oLOq6tDs7PbB7kA8xEFBYiqkx0P5VFw7h+ElICto
cBfLV4+CwjB4JRuREh/8659/8ebvb97855un14/EKuGLkz0A0T/9/tfg10cf
vr63dv6jR1f//M3Hn7337idvP/rozsU7ixNPFwevDOSd8poO5csXE3l7E7n7
04X7c0N2WYJGE6gDccQWjf8OV9iBcv2qN+VYXepAfGBfrLBJzXSwoLxAvwo5
wcaFSkMx7TEBXfFCsLYYWW4pVC6DOuIo07nBu4rkO/KkW3IEo2n8jmRZpTEo
KYgoIcPYRDidQSIwKbLYWHNDk72rxz0wAPyta9PIwMjw8NBAY6M32WoNDg1i
kPzZWMiRZAATPcbXnwjH032QFF8kAYbEIJB+CDiWQcmv8dQND5SOz/xPuTfP
AESLy8p/UFllVWVtXX1Tc3Nr08RY39LijpPHFk+s7Dt36uDV88tAV04fXV6Y
P398qSQ/OSyMIhTjeEI8nuZPZuIZZAIFjyGgEVgEDIf0R/pBHDoFjEtpRpVe
wjGEMJOVvPgQUrKUnG8MzFUwQayL0XABHs8jUTTioFhpgIIApYUSrTp2ZarE
bQrIUhF1AX4SFkwmZsrEbDEJUnPgWh5Cy4bpmT4JAkSunFYUxfPEceqShW1Z
ob058u4M6VC2oidV0hLHbzZQu+M5mzLE+8tjTrVknmrKON2QDnS+OfNUvflY
dezRCuPJuqRzTZl3B0tXKpJnc2SLxdrVpoQz3ZmXNhVfnm756NyhN999+eYf
//Hm77//23cvPlnbc2O2/vpI6c3eIqDVxrQDlQkHqs3nB0oujFYdbCuYq8xy
R4vlQuyff/XJFy+epBl0BanJU53NgQQ/EgRFECATBspH+3VR8SNsUivFp4YO
2cmQBg1p6FC0jPLyrdvrLvrnv71+dEET7DfRWgaG+j9+9+WLR7cfXj175fCe
V2vH/vj5O3/81S9+/sUn799Ze33p2Fv7xs915h8tidmdJlpIFO5LDl6yyA7n
RxzxGLZaJaNZga0m+manas5tnMrTdSWL+zPkbSZJg1FYGEq2BPo7xOhkBlQR
ySlT0p3BGEcQGhSkwlA4UE04vi2aNpbGm0hjjibi+mMxleGU8khmRihIMRSg
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
KaMUR7CLVDSPjlyrJ1aq4F49sSaGY9Vw5WyMThJYX1jUVO9t6Oqs72/31Be1
1+XWpEu82TKnI7G2xtnTVVdaYgU531hXTSHg+WwOncQgQ7CC9Iy6vjbHzGDa
zLR1ZHdh757ckTnr8FbH0IxraMLeM2Tv6M1tbrM0evM7qn+MaJCIKRDSgJeK
xMyEaHGLN3NlqfXe9U0/RvS961uvH+vvrDGrxLggAZiICJA/Ek+mrX8wwMcP
CBRRwCfGHwEQJaAw/yuiWF8/CgTJmKwkjYaGRuJhvnAfCI+BCzkUMQsloGMB
oqC3iMh4DQWdE0gqV7JLVIQWE2tTrmDGKdjuEg3GUVtkmCYZyRNKyaJCxRJ6
BhuTE0jVYnzjmCSnWlKTYxyudZVnRYcLyGlGVWSYUMyjC1gkIhGemmxIT9IL
WKhkY2i5LbbNk7mpvfjNm1/9/bcfvfnzZ7fn21bbMg6XqBdzeDMGzNY4zkwS
iOzY26MVB8pi5u0h+3PZSzmM/TbJjqzgbdlh2xyRR5sdx7rLbsz1G9kIvZwR
zvY10aCp9FDgt8v2oPNuyaXysI27Oj5uy3irI+tpZ/bbXTkbtxq/1Rh/vVZ/
sVx+vCRsqyUITIJxgYhQELUkOAcOuXP0f/vV89tHh+ebMhY8caeasm70ut+a
8D7cVHOtu/hSWx4Q2NzvKzth1Z1wRJ0qNR0qNFzqss0VarYWR+5tTN3fXrDL
a+23G7pyIoG8SdKq2ODmBGmrmtMSTmpSI71K324jvsdI98pIBTykU0rIFiLS
+X4ZAbBMgX+ejFQSzigJpxWpMGUqZEkoVKFCujXkVClZykDKePSW4qKOhvry
+qrS5qqaltKhjqIWa8RQqcnlTGhsKOztri0qyK6uKPbWViBhfmw6jYLGKWis
zrLS+g5v3ua+zIlx2+Bcfs8Oy+CMdXDKMTDhHBhz9gxYmlqTK6oSiwss5c4f
IxoYRAeIgqCXhHLiDcGNtWlH9zffvjr8A6If3Nr74srU1aXurorEyFBCABuB
xa6PZusf/0OiAZn+kA/wUrD/QRhf//8pnM86olEisV4i2UAUjId0Cp5Lwwko
fjwKikvB88j4ECpOz0Q5Q8n1elZ3Cncoiz3h5MwWsqdsjDadf4eO2K5jOwKx
qTTfXAEhmYmMRENGkn9xZFh/Qfa2nurpjopKe1JipMSgEmvlYlVoUJhYKAhg
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
KTpeWa6hvz7fW5jBw0BKPj5BQvr8wOx32yc+2zu9PNNV3+4paqh2VNem13rT
a+rSqirSPe7EPJvaHM1XimhBdLoACSxUGMwAWIaG8X+MaFxUUH1V8uF9jfeu
jjy/Nfnq9rZXN3aB3v5gqf/eUt+xyYrp5qzu8pjmEsNIW3ZjqTmMx0Wu30XF
xx/yA4JBvmgfGGL9+mCwH/T9ZwXXRfOFM/z9E5RhCg6VhYBCOUQmCUEmo1FI
Pz4JFUDDgjrKwUPGEKwjEl8ZjfTq/EZj6N06XJsW1arDeeQopxCdyyPGkJAi
MkxMgCLosIQAVJ6K7g6nVGtoHjliKI4wnsLs0KK7DPhhM68njjWcGjTrVC8U
RF1ssxz1xB0u1t/oyDxTFQ1gu9ae+/Xpww9nhz86OPObS3uXa1PW7/DoDF1w
hSzlBM/nyicyFUfbij46vesX946vDnlWu5xr7SnXurIud9vuTFb9652jLw5N
taZF5krIKSzIyoJawwhjEfTlnPBLpfFrXvNVrxkUzlsNSY87s571We80JT8f
sD/pyl6rTbzeYLvbmHu3znyr0nDKFXbEJjuSr+2JDihUButIsPWfYcdBtfHS
uxON93uL7jRm3WxIvtuaeq3edLZMd6xIuTuDvyOVtdciOFQQuiOTsyWJus8q
PFmqvlJjWKuLftyVdqMm4WZt4q26JKBrVfFrlXHninWrTtVqQcSyK/SQXXDA
ytqTQd2RTJs1MSZjGaMpnIEEer+JNpjI6IomdhoJ7VG4FiOh3kir1RO8UejG
WGKZgWLXslMjhKmKgPxg/90NtjGv3ZUR0dHgHGnJa7DpvbkR1XZNszsxVk4p
txg2NbsrbWY+1lfJxZcmSP945ei3O8a+Wdxyaa6no7m4tNrt8pQll7rNxcXm
wrykfHtMdqo8OpIjCSByiYwAJBiOAKUg7tlcAmikwEulsgBpGC/RJF130YXG
t9bG3rsx+cHa1o+v7AB6dnn88ZmhM9sq+gqUfU5ZU2oA6Io1MRwTj8CBIFCG
0X4YPwgHh1BoyB8H+RBhSLwvHAvBMJAfzsd/Q8BdiRiEQcpJleITAyEjHxLQ
IRwN/CaIQUNyqLD1d+2J65cQdIZiyxSEaiW+SUVoUOBqpahqCaI0EPIE+5UE
QBl0SMeDRTKgRL4fmDorlTivAtUo9R/QkwZiSH16XKca0SmHDapQg0rkglmw
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
rjr4eSPjdXv0QR/7cDj53UTO2/Hsjxfzv10u+jpdcDCSvtUcvVgeXOyF1z+D
qEqLCSKnDVRV+WHUnliXKwlO9+Jd1zP9HxcxoKU/bYx/1pH0ui/9YCjzS28q
8Pmhm3fYxfs6wv88nP99vOTXi9VfL9b8fKnhz1ea/n695cd0FfD5rjvtsC/7
bX/eXjN3qyhkLdv7NtvpUpT9tQTKLMf/MjOkg0K6mhpc4YKnY5FQjMA4K2ir
NvdVBxf0rifl41DmYX/6ux7ex6Gst51JB62sd03Rr2sYryrpr8tCnuX77WR6
P0pzn091XMp0WUwn30uxX8lxf5DhfDeZBIjeSXWaYZlfiAJKoZwTYTOXRLqX
TF7jei4nut5i20zHEvoYhh1hhGIP3QQiJswWSzXDGGJF1FCipro4qrOVoaqU
hhSiJHCEqJbMKQpBg0XCjybT8iykmhwUZyOtl1NpK9lBtzMDmkLNK2NsBuuj
Z4Yz1u9WP1vteLbatf9kdP/x+P7j8/vbF949Pn/wbAyC/r+YVIIWepzyx7I0
1wr2tWwsZdwczdi5WnJ4vfZWFfPgQt3hbOfh1YFPty/8PH/l3fmuZ238zaLo
OyzXKR/LSwGWk/6mg/4mXIK0u/oZIyURrMQJS6yklvQZacHT8pLSMsIiyhLC
+rJClvKCVMUzIGcJJAKvCKr2J6eTDKNMcP7mWG99mRALNJOkHE2UZ9sqxhPl
EszFim0l2mhqY1GEi/HWk7FWsDkXbXaeZTkcbvy7RiJMugN1ugK0B4L1en20
+v10hgL1RoINzocTZmKI1xMcbqU43U8j3UmxeZDl9KjIay3ffZXvtpzjvJLl
8iKT+rog4HUlHab43eaIFwOc15Opry5m71+v+nSz7utczbcr5e8ncqGR7jRE
jCS6GmmoYEVPKZ1AHBSF8j3MBpiuoxH2d3g+DzJ81gtCN8sjNioiwELf9md8
PJf/ZSL/U28ahPiXsdKfplu+znZ/uj787d7Ur0vX/7Zx928rN/7+YPpf82O/
XW7501TNbxMlv54rODzHf9Of8bg5fq08fC7NC+av6xyXG4kel3iUSzzauQTP
vli3Sh8zX5yAJ/pUjqveVif3cXfS67Gcv95r+Thd8hqGsqniNyPZr3tTDntT
j0pvDetjafTXwqjPWfTXqf5LWe7L2R6ghzmeq3ne/y3qDa4jCM4KdCXe7mYS
eS7R6Vqs9UKUxWKs7e14u9k40ijTGly0wEM1haxCt1XzMlJw0JYhaSs4Garr
yIkrCp9WlTyjKYEYKgpYasjRHUwSnI0GE7yqnXEtTpiLwTZLGUE3U30vZ/l2
cxyH+LRLbay7wxkbl+v2bp99ca/r08a5z4/Gf96ZAn3bOX/4dPD3QR7808AY
+7vMCRqBNPP6YvqN4bQnV4rfXK64UR55eLH+89Wuz3NDPy9c+vvqzf3Jzr3W
vEf54beiHGaDbC4HWpynGXR566RZyAboS1urS6lLnbRSljJES6ElxDByCuKn
BWBcMkaJ2imJeaDOeKFFyNInacoSkYa4VAeTAm87qopkItWCbq3KsFZmWKFi
bMBFMRwbhURLiRoX1ADd4Eqy4+0sjym2DSA6xDACjUaa/q6JGItxpjn8Wref
FsA5HmYyzbSCcwbBsd/hwZTttpDtvFbkvVFCXS+mbJb5PCqlwWYj3/tpnt+L
ouAX1eHPm6Lf9HIPJjLeX8rbv5z/5XbD9zsN3+dqAdHPFwpfdCUtlwTnOavo
KIjpSJ8OsNRu5wb3c3zH47wmmc730/3X+cFPyqOe1sXu1MfutXHfDWS+H837
MMb/Nl7281Tdj+tdv90b+/Py7N+27v/96eo/nj/696uNf+4t/n3zxj/Wp/50
p/fP4KWXKn+eKjkYy9sfyn7embzbGH8ni3YrxfNWkgcMUHf4wXfyQ6/nBk9n
BI0m+dYE2QRpSZgLIDxn1fvNiZt9WU8Hs9+M578Zyfx+ufTPd+rfXyv4er14
fzJzr4f9uCVqrzl6p5axVR68XR68WRr4qCRgo9gfNr9rPsPz6KUvae53U92A
T9ARtBy7ea79fPIRrjNcx6FYuwpffLanag5FN9xSJcYez3YxZbsTLVDiMBwZ
yErgBBBTpdMOeihANMLZPM3bciSJetZXv4+iNUwxuZ/iO8fzGY536mI7TJQG
XW6PvdLJfnAhf/tG9d7dxg8bfZ82B37aGQV9eTL8bqsHgh5GeOAT7BRa6O8i
mKj5eZvWFARfG+QBos8uFF0pDvtwsf79TNPHaz2/Lkz/c+3GT5f797sKd4si
78TYzwRaXgokTPrqDdB0MsykgnTEPQ0wjrpKpigRI4w0jEsoaVlJQSFA1FBe
2BrgRAm5YkScFATtpE8E6qLpRrjSYLdQI1w0WS+JYhZGxEZYo+NImEQHbCIJ
nUyUqnfHAHvTHNurKU6AInjmYJghIApM/i6gFB6HB4fphmCbxyZwRGa6x0Km
11IOdTmPssh3Xy70Wi/z2az0360PfVIbvF0duF0Z9Kwy/FU9810753VPIjTP
r1eKv8yVfb5e/tOtup9v1n2+UvH+YtGH88XPOnndYRZURcRA5oQtTqyB498S
49Ud5TLKdL6RQlsrDPsjoi86kgHRg+GcN8O5H6YbfrnV9+eli7+tXPvHs5X/
/PDiP7++//fHN//x6elf32782L39p63ZP6+P/1js+Xmu6aerVV8uloD9vu5N
22vmLPAD7mfQ7qdRFzJ8Fovpy6WRCyURdwojx5NoQwnUXFc9shyiJ4IEEhTO
5TOejBS+OlfwZbr455miv96p/nK/7KfFyheXMh70RG6OcR5PJG6eS9ge5Lxu
i3/RzHpaH7VTG7FZEXqsrfLQp9URG0WBxy9ThHMDJsFOgdI5ntO1VOeLiY4j
HFJnjE1poGEWTSeHYlDmY893I9J1lewkTlhLCNjKixHEBexxsq7GimY4UR05
ARtVaXDR3ji30UjrC2FmI1TTa7Fut9L8RjnO7SzbzjTXrnxKdxH1QnvYzRHO
woXUJ7dLXi3VHqw3g96uNj9fblXVkAI4j2/gA6u/y9RY1dfLpDo/6Ep/8uPZ
op1x/qWCkI9TDe/Gq97PtP1859w/l2c/Xzz7siVzM8v/eqjZhK/hdKDRTKDe
RIButZNyiJqAt5aMh76yntQpPQVxlJjI0WfliYrhJEX0ZASPPswWJeKIEbdX
FDUVRVxVZGh4paJQ72RPaze8VE6IPQR9jD0u3v7oO9SS7DE8G5k6N3Snvxbg
B2kOHAKusELWA66/CwoA/Cs0gdvpbrdTXEDAJ7jBwzyfFb7var7faqH/Vg19
pdR/uzbsbRcHLGW3MfJJffjjuggYul91Je8PZhyM5XydLfv5Zs33u3U/3ar5
x0Lr3xZaftys/zZb+3a4aDLVJ0zlhIsEEmAkl00z7+B4t0XYj7JcZhO9lvn0
VX7oSk7A0aBUFb1dw3zVxdsfzAIzfDmc93q6+fv9cz/Wrv60cfNvr7b/358/
/e8fP/3jp4//568f//3zy78drv319d2/7Fz+sTb67V7bl7mGH1drvk4Wv+pJ
3WmIWyoMXsjyPb6RtVQYuFIatlwWPl8cPpcXNpUeCJTyKQRdGURTGNE8jcSS
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
ItbGWhlWK0uMlQWWaKXuZYtjOWGrA3WnEh0W849uRW6WMbeLoreKmav5R39Z
vshxg0wsdVWLN5aCoCfhhHVkEZQYookVMlaXIaqj8NLChipyJENVGzwG7JSo
IkrEClKNUaEWKJiVmqJM26IItYH4gVjr6RRXcNHrWZS5PLDQANCdQr/V2ojt
ltgnbfGPmlmPu7nPBlOfD6XtDfB2epNeDKe/m8h9f7Hg3fniN+OFX2ZrPs5U
vp8q/3Gr5Ze5psNLlZ/vtH2+2fTxUtXhRP7bPt5uXeRClsdKrhcgCnBe4pJG
I02n2DalJKkSO8mxGJuz4U4pRKwTPONyCMMI7aUmSdNR8FCXt5GWdFCQsZET
1TmFeGrJ+5oo2WBO0QgYf5KqnbqQp554mIViloduV5wL30U9g6h4jR/eEW7f
HeV0lkEaTfCeSg98UMOFHnI9y3862Wsg0hZmpVGW49UM31Z/4zI39VSiLNNA
JNNZI9ZGDYAkKolqS57QlzxB1ZV1VZfw0lXIDHG3UpZCn0KImmhbXRUV6dMq
kid15IUIWEkdsRN4kZOW8hJOGmhHY2V9hVME1GmCDOKvKx+qJ0vXkUo0U0wz
FU81EWv11bue6rlSErJWEvy4MmyvIQYsFOA8znfQowbWSnUkjEtQQY/z/dhF
wUIhZWaSHcZS7HrZxNowk1w/PbabVpCNsrORLB4tKCAkiJESctaRaY91mysI
WS6Pul8Ydindd4RHq4ywBucsSLD/I6L/42/00EVhA0EPXprOdS7N868poVcV
hZTnB5bxA4pzfAty/JJ5Hqw4+9Cw/4+y945u8srX/V83Wb333nsvVrVsWbJk
SZYsW5bl3nuv2MaNZsB0MBA6hA6hJSFA6BBISCAhPYEkpJA6k5nJmZkzc2ed
uXd+2+GeWbNm/c4fl/Vde+13+8UY+aPn+zyvpP2aiuPqsnJDSakmGlOEopqc
PI0/m1+SRej30I51595eWvHmquaPNvUBPt+crrs1Vn5xsPhws2d/U87OOsey
sLpMw7BQUyQEiIyApFwEaPQmDlGChclZRIuMbZUx83R8Exupo6aC9FRl5wBE
19XogBddHhVurdIfbs0+1p5zbqDg/KLiVyfKLk8mLy1O3FnZ8Oba1oebu9/b
1v/u7qEP94++v3fk4a5BMH5ycPEXx5d8dWrFZ2fXfHxy9slL6x+fmfvixXXf
Xpr/+pVNYPGrc2u+fGHFZ/sXP9rW+8WWzjcXRa+3ZN8bXnjYD9ebnotLV+ZR
1gfZy3OIY+bM6Rxqv1vip0IuLFQiIxcrGQ5KRljG8PBpKhJOgUfpKdiEVZO0
KFxURJGc1hnM0vIzVEyowiPpjxqbnZxlC1usY9aUGI71xhZ7RGuKTQDUI93R
Q52F12fb3pkfujJZASISCEpjdmqHMnNTsXZVgWQwi7gol92gW9hH3UmCstkI
GxurZ2L0VESlVZQvJkR1nEq3PqATeTRCr0GmYuJlLJSAnK7h4LMVXDEqXZSZ
JoNnKDAICQNlV7OtYooCt/B9WlzyXBLko0IlfES1FN2uwQzokVuDvDPVyreG
sj9YFgGyCbo8KCCh99c3vzFX/9psNYhLr82UPItIz4L82S736Q7XiQ7nwV7X
jnbbyir9aLGyO6pOuLh5WpKCjchEwKnoNIDoqnLHS2PxGzNVl8YSJ3sLN9a4
AKJT9baJ9ux/Q/Sfr9FvnSgBoR5MwCFYn19Td3Bn76FdfXvmO9cuq5hbUrEK
sDpdPjpZ2j8Saev2NbbldPUXtHZ5G1rdtY05yQpvSVhX4mS0e5g7m12vjide
X9r4wbreu9O1tyeqLg2VnO4JgW4FnjhXllYfH4yNh/Q5TEhDh4RUSCFA5xiF
EgJcRcaKmXi9mG6WMnwmkUfNMDLScqW4qI44Wsibq9HOVSiWFHLmosK9tRYQ
gs71Fp4fLn51vAzUxdHSu7ON91a3vLe595MdI+/sGHx31zAY39ra+8He0U8P
Tn55YvmXp1d/8fL6T06vAuOnZ1Z/dWHT5y+tA/XV+Y2/Ob/hpzMrv31+9Ktt
XR8tK3u10Xo2rrzekburUrsmxJ0LckZtmOU+Rr8RkaBBMSpUraVGhYgiCc5G
hDxclFdEjpkkShxMw6KpGUQlObPKY6x0qKqsivHigA4LKZhQwifvLrX5JIiB
Ql2ZAj3ik04UqNoMlOkC9Y4m364W/5Kwaner/+RIYneL90RncG9Dzo5qx5qo
ethOa5RldJsJTSo4kNBmE6nNyQVmMqJlxu3KHAVbScrIl+ALFBQTNd2v5hTZ
1XIq2sCn1xT5pUw0EwuJKEiLkKWhkzRkvBKPk+FQYjoaPMhqBkqMgXTE9BID
X4sAkZ9apKCGOLASXmqDBBozZOwvYl9qUl5t099fXvXZ9p4vdw082t79YG3D
vVU1r62ouLWk7I3p+PWR0MVe74U+77mO7FPtzoXLTa22Qz1uoKKrKhcQbQvK
QiayTQyeLCkYdCYVCeWKceMR/Ymh4lfGEy8OFh1sC0wW62aqrOM1WePN9rEm
2ziwo9XGxZWGf32Nfn5xMQj1/7wuevmlpa+cnj59ZPS5DS0zI8UjnaGxnqLe
tlBLZ2FFbW5xma2oNCtZ7W7tinT0xlraw41V7rpyZ02JsTmiWVaRfXlxw3uT
7Y9mey4vqzk9Ent5ouzUcNGF6YrXN3Tcn+99c337wRpThxnpE0NSOiTmpHgs
EiUNr6QR5HySWkIxyReuGGRJcTpWmp6ZGtDiu8P8iaRkqpQ7kAtfUkDbWqo/
Vhc401T46nDkzkz5jcVxML6+tPLe8mpQH2zpvLup+f72zgfPdYHxnZ09Hx0Y
/vzYxNenlnx5cvqzowufJf/+xdmfzq9+embZby+s+eHF2e+OTn23v/frLZWP
VwTv9JoOx1n7EsKdZYpBF77bilmUz2kwoCq1qJg8o1iJqLGxIkpsoRKrw0FB
DcWvoTlEBIeEbJcwVQQ8+KXrWZCBA1UFpHlqmoFOsDBJLiChVjZIf8Bag2r3
q6rs3DavosennynL7cyTt+UK+oKS8bh2utwwGhZvimfN+KTP1Xv2dAZ3dBaM
BKXjUdV0XN9gwftZUK2VnjDRraw0IyPDp+PG3SrwYzgFSDEKkuAhPQ9jklJJ
mVCOUeGz6OmIdAERw0TBwEiDp3GwCGoGJMfDQka5gbEQpsToVLuAZuGQbFyC
R4QKyTFBYVqVBtFqRI64cGsi3OfLVbfqXO/1Rx5PV7w3mXhnpuzhyqpbi6O3
xiIPwSM/ELzamXexM/dci/N4w//9POPRFufB5uwN5cbxQlWzVxw00LJVJB4J
As8XPh6yi7AVTsGGttDRseTutrzV1dbeWtdoi2eiPXeq1TXTbJ1pMs/U6adq
dc8u3QMmn73TCYzPQj1A9LWrGy6eW3F0/8ja5bX97b6mSmdD0pWImcJF5myP
1JjF0hpprlwJOExUuJOVOeXFlkTUUBJUJn3ioajhcCeIS43vTLedHS051hc6
P5m8NdcM+HywtQ/U/Y2dV8ejS4L8mCbDJk5R82Fug0DHpeq4NC4VIRcQslSM
bD3HJidoGClKMpQrQzR5WCNx6XSZaFGAsCTM2FpmOFybf6Ih+FKP/9JQ4Sv9
wevjJYBSULenyh6sbXptQ+MbW1pf39wCJm9ubX9/7wBA9JvTS8EICoAKcAWg
fnF8ErD67Zlln+8dfLKj7enW6ldbFEeKKduDpI1h5hIPZcLPng4Ju13UWj06
qUa2e/i1DqaPl9pVoK5x8sptvBqPIl9N1TMyARtaFkaGRarIMJ+OXGijBc0U
EQbipEN+lTCswBZIUVE1IaYl9UdNjbmSWpegWEOqt4oSaqqPnVqqwbbmsjt9
vHoHqTuXMeEWDNtZG8vtxxclJqPqiSJ1f75we29oz0DRYFBRlcVo8crzxGgp
CspTMWJWUQioupEdMrDYGZAACwWscg2PKKZibDI+B51BSYcEeAQLubC/K3iQ
bRKeEAk5RYyATgL4BKCCuRSbriVnmumphWpSQk+q0CA77YR2I6xZBm0Jc243
577VG3xzIPz24pKHv27be3M8AvTzZk/+3aHw9T7/y+3uFxqtwLE/D6rBsq/G
srM2a3WpbiQkr80R+rVUl5rCJ6VS0RAHl+qUUsI6Rn+hcXVN9kyxbrhQ/j8h
+syLPrsuCvgERvRZrgf11hv7Lry8Ztf2gcWL4tVJezhf5XNLrUa2SkcVSNBM
bgaDk84RwCUKvM7EzLLxXVlsu4lh1hFsSkxtrnhtRe7FodprIzVHe4NnFhUD
RO+ub39rSw8ooKIP53sfzNWuS6hjUihHmKqkQmomWkbFyml41q972psVNJeO
7dbSshUEHSPFDLpkFq0/Kl9SqVpcxF4W5c4njQdq8o7U+c91+QClL3bnAyEF
cN6cKL2yqOj1ZVWvralbeOfYts63t3Y83N714e7+x88v+uLw+GcHR786Nvn1
8aknRxaDESyCfPR4/8j7W1ofrEy8PppzJM7YXUhe6yUs89IHrITVSV2blVCj
Q1XqMAMF8t6gOo+XFpajG3NEcQOl2acSwiALGwZsM0DULCABUcqWUm1CFA8J
BU0sIzsTwBA2iIF+OhmQh5de7xZNVeWCw4Wb5ErRhSJcFgZKaEgRaeZIkWqy
zFCizmiwYFvkqH4LbcwjBCZtecJUrccUcKAaC7HJxRmLZw3FjN0hXVtAa+dk
GiiQV0aw0VPypYSqHKVHRpWTUgW4lIBVyUJCBi4t4jCx4Cn0DEiIg4MSYDO1
TIKWilYS4XlKvgABAQmN2bQyXIYIBakJkJsPL9YSo5KMJhOmRQ9r1UBzfsbL
tVYgmA/Giz9eVfv+bBVA9Mai8MLODx2eK93eS12eF9uzD9UZ91Zqdlapd1fr
t5RqNpUZlsTUvQF50s7JVZMdKjqHnEZGpLGwGQ45G/SdqhxZX8TQ6Ze2B6T/
E6L/+ho9KDAZq8sCcR4snjmzZuvWwaHBeKzI5MmRa9U0iZBAI6cx2JlkWioo
KiOdyYGzuAihBK9QUY0amkZFVMjRShEsT0PszFPsbYkeaomeG4sD8by9pgXA
+f6uEVCfHpj48sjMo509exrs5fL0iBQBHmRg3hRUnJxB5FDgAFG9ZOHVgTwj
q8gpsgoQKgIU1dO7CjUz1caphHhpsWhThXFvbc6BOu/LvQGAKKjXppO3JhNA
Sxc+EjJVdntVzcOtnZ/uHVr4PNqu/n8WoPGbY1NfH538/PnRb0/MgBM+2TP4
7nzbO2trb4zmHykXPl/C3OTDL8shzkbky2K6IS+nw0mbq3WNx/T1Tm5Qhq5y
CjtDhu6gBjR6OwOSoyGgolGrxMhBg/QhJ6QoiKlWPtbCRcfsMgURYqZBSbey
UIkDfAIJ3bO4ri9izONnBCTI5lxppYFTwEMEBZlVZspU0rSmOScggKJCqEON
m/ZKBp3sqbByPKyoNxOa7VQPawHy8iwm8Amg0Y8kXCUmmgoFRbWUAgnOSU93
81AeMVmOXXjPvJqOWdigLx3yaUUlLoMIkyojwLR0jIaGzlMLVCQEOx1yS9ku
MdPGp2ZLWHQI0lAQcsICpT4xyseHwPOiRp3eoktrlECrHPgrv+4/8PpE8fur
akABCQWHV/vyzzY7Tjfbz3Rm76/WPVeh3Fau2FalWRNVzsV1ExF1h19ebOW6
VDSrmsmhIIlwBAOLtimEWjbewsfEnYL6gKI7YfmfEP3XdzptGCkERhRkpWdC
2thSEItnmbO4QjGWy8MwWRgKBUEkwvCkVBI1g0hJxxIgMNKYAFGyWsPRa5gq
DU2uJMrlaK0os9TGX13lm68LvDAUvbm66c3N3R/vG3/0/OS7O4aAin5+cPKd
jU276qxNKmSFDOtjIvnpkJSC4VMxbHKmkIVSC3AGMQE0+lAW1yXFSrGQhYGq
zpUvrjQPFwmXlErWJnW763OPtS80+vN9BaDRXxgIXRwMAz6BO311JHpjSfKN
1XUfAYd/YPTx7kEwAfXpzn4wf3p44ofjM6A+2zP0ZP8isPjeptbXZmInG/Xb
Q9S9Meb2GG/Sw+hxsSs0xKUJ43y7fzisKtURizTEmJFZkS0LqkgBMTyiwgFE
9WTIIyfmKmhZArxNQnZKsFk8jFvGAOJpF1CEKEhGgIqsvIgKD1QUYNlZoMlm
QcXACShxnX51sZzc5pZXGukxBbLeQa0wYcuNqKEAf9BCH7Qyui3URT5RrR4L
bHBcnmHGQzZmaomZHTcxzWQIyHhfob7JLQhJkD4uws/HmPCQGg0p0JAIvuA2
FYRMu5DMzYSCRnF7sdfCxWfxCAUGUcym9qoEQDb1dKyOhilx6B1COjgf/Myg
F4Dnl19JTpholQZCUrFwF+9uE3yxFXm0KQtw+MaSUmBBbwwv8PlsT5IzLY4F
89lqm09I5ysUK6OcjRWqFYWqiaB8UUgDLE3QxM4x8qQ8HJ9BoKBImFSYlMkE
v2shFa7kwnMMtJhH3Fxq7K7MGm6wTzQ7phot042mJfWGmXoDUFHQ6IF+Aj6f
m06AxAQoBX1/4S3NEixPiKExM/HEdDwxE4OFIVEwBDIdi08lkDLAIhoLgQmR
DGOwMAIhWSlf2CNXrCCJlXgBJ9UoyKzJls7EHQfavVdX1L2xsRPoJ4DzvZ3D
oOPf29D+5rq65xucQ0ZyJQfuxkAyGCQkIAR0HECUz0DIOSg1D20QIIMWjkdF
0lIgPQ0f1HE7I5r+iGg8KlheothSbdvf5AGInv11j+6TLW7AKqD08kj06mjs
4lDhjYnSt+caP93a82hb7/sb2t5d1wJGUJ/vGHi6f+zbA+Mfb+l6vL0PnHN1
vOhks2lHMedopXRvqWDGhZsKiMrUpE3dpbsGi9a35rflSUr0lNpcecTAypXg
wejhppaZ6XlChEeCiTvETjFRRc3IEuNzlBgJDlKTkaxUSElAC5AQ6AJuGRwY
UZ8wE3wTMAIlBI0eAF9uZsaV1NZsWVJHAR280UUv1SL6Q6KRoHDExgJetEKY
NpwnaDQTa424UgXMy4MM9PQGv6Hep7XSIPAzDEe027oL23MECSWtx2cs03F1
KMhCgStQKSY6TopKdXDxCgxU7tKGdQITDbFwBdUgsnMIoMUD2QQulJcJFeil
wJ8ASk0cohCfauBiCnSM+lxZUk8o5EP1emSzLmOJn7o2ytsQ5Z/qcF0dCQIJ
fbU771yT/WST9YU2x/F2x5E22+akbEOFbEkhcy4hnQzI+tz89lxp0i7I07PN
cjqDgqCSsMRMCjYdxyDRqAQsHp1CJkBCPsKsIRV7eNUhaUeZdrDKMF5rmKjT
A0SXNBj/FdGdS5Lbp0rXDYXAIYj5FCaMRIMhsVAaDMpEpsHgGTB4JhhRmFQc
AYbBpSPRKWCCxqZh8RkkEoLFQDM4aLoAzRAhOfwMBQ/mU5O7A5o9zTkg1F9f
2QDiEpBT0PSvLK+9sqLm9urK093+DUF1u4Tox6TaSCgeFsZn4ECj59HhYkam
lAGT01MCJlbAwMjiozQUkomNLc/m90bEAwXsxWHemjLdc9WO402uY43Oow2O
I/V24EuBnAIvCnwpMABg8uaKmg82tH28ufPt1Q3Pwv5Hmzo+f67/yc5BMH64
sR2cAKh+oTV7f4X8RL3mRI1iayFzaR6t3UodjWe/fnTztt7IeMKyOOn0ipAF
aqpbhM1X04vMPIBHsY7kZKUWmVggpJg5KAU5zSYluhVIEJGUBCQDghT4BUQ1
dMgpTgfKmctNA40ewAmEpdrBK89ileqp7TmqUhWlySkYjRna87hN2fQ2D3NP
f3BxNr9TR+izMcrEaRUqRFyWDoK8T5CipKS7JKRSh6jUzCozkEej2g43q9FC
9dHSa3S8MjVbDYPyBRQ9DpYrZPLToDwJRY2DvFKqgZxuZ6M1eChfTjdS4YBJ
ACdwoeDZ1BDMAXHJpxYu2AAOXkrJsPCQpVncAklmuR7TaiMDDRnKwQy50WNu
LGjlJ1ps59pcRyt024O8/VXak22Ok93ZR9rtc8X8NWXiJVHW2nLVZFDZZmPX
OfglWfxsNVPKxqOREBqVic2gY2EULAKPQiCxuEwMLgWQJhYjHUp4yEauDgra
i2XDFeqxag1o9P+G6LbJ+OaxIpCbQKMHoR5PyyTSkVgyHImDpyPSMpAwGBKB
QCGRqAwMFo7GZMARKeCfQKAWbjoLcMVgUrDENBw9A89IJ9NTBGyYloeMZXFA
3Dg/XX53ruXt9R3vbOq6v7nj+tr6u1tabswmL4wWHqxxjZqZMSrcz6cJMDAB
Fc+mIkGo59NgImqGmAT5jMyghQ1+KQoySY5Pj5pZHWFZZz5jMMhZElduqjLt
qbI8X2M7XG8/2ug8UGU+2mA71557vtt3obfg2kjR/eU1H29o/2h9G5jcnUre
mSx7srP/y10DX2zrebS5485k6YVe/8Ue/41Fkeer5DtLuCtzMVtLhBvLdTFJ
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
sem16SRQUcDq6Zbscy1OIKSnut17W8yTIdpgkLSyQdmYi49pKa0+xea++Nah
kk19hWu7fLMtrq6otNwjbA5r2gp1bQXqNq+iP2xodgg7s7lzCdFMmLE0SB9z
opd6yQfrjNtLJIeqjWtyGZv8vFujsQ/XNL2/uuHdlXWX+4NvTiffGE+8tXjh
tvK3ukKXatwXkvYbNbmXKt2XO4tuDybfGK1+tSN6tbv47kglqBuDZdfHam9N
NNydabk2WgPqykjVK32Jy30lN9o8Vxpcl6qtlyuyrlfbb1c5Xg4pL0a1rxSq
Xwwpzse0JwokRwKivV7urjz2Hh/7cFj0fFCwN8Q/V2c+02A53WzdWSJekksc
z+dsrM0Cfbkrh11jxFeZKUVKTIEcZ5fSbCKikgwBRFsCukonL64n53BSCjXY
uIXUHZJVWgnVFmyLAz9XbZwtUw7mkMcC3ImwZHFUVW8hNWcDLTJ1+RVRJdIv
hufLcJEssRCfysTD0BkQlYgDTILEBPQTWFAajYb99Q+BSoRTEWgagsnFSCQY
m4FclMdvKFK1JXSVYWGRh+3NIjv0FLkAywbgkVGAaBYNBRL9M0pBowd2FBQK
DSOSUAgUhMGlEMhpJGoKRwCXqbFGK82VzQ3nKv1OycJn5aR4vQQHKktFydZz
3EqeQ8bIVrMtIlyukhS38obijk2t0VP9ZedHyi6MFL00FDo6EBwv1rj56SIi
RCUhkXCIToSxKRkiOkzFRlilRI+e6lQhcjXobAW8QEfwiBClZlZrnhok6wYH
oTfAniqRjQSZ01HObDFvVQl3Z53m2av2YLw4GH5rthZ0+b3lhrVe1sk6y8Eq
3fF2x64W09I4b7pCuHXEVe5C95fmzA/XHVzROT+cXN7imevIGyqVl9kJVT7J
YIUzbmPliTLHE87hIstQ0DAckB/ptYG8cLQzC+SF5+LCC/05mwroz5fKd4XV
W/OlZ+s9t4dKgV28A/6PbQVXukJnqx0v1jgv1GRfqc25XJV9sdR6o9L9apn9
co3rVrP3QV/0Tpv/fm/k4WDxva7QlWb/ncmmt2e7X5tofLiq9/qimitDlTdG
a1/tLbrR673dl3+rA3Rz56mo/GJCf7nMCOpiXPdikfLluOZoSLQ/wNuVz95Z
wNkX5B8NyPbnCQ74xUeK1EeKNScrLbtjitW59BVR4XONtqlCcZuVUK5GRMTp
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
mHkCqDekbM8R9HrEjSbaUJ5w2MvschDmG+2gdrS5h/IYaysNh/rzD/fnjuVT
VyUVjRbUeJFs90js+Ir6RjezyoKf7ynY0h04uaKuLyju9PHaPOxFRfJdnXmT
heKRfM6QlzWb0GxryV5XbZ4JCOcL5GebfYfKbatd7OVW2rSROCiFDYkztnm5
6/NY25Pqo92+lycTh9ry52OWPQnLq33u9zY0fX1s2dMXN31zdssbWwbPDBcd
bMt5bVPT+/uHPzoy9dmZVU/Ob/jy1W1Pb+z96eaBh88tujBdc3a07O767q9P
rP7+zPonR2d/OP/cx68cfHL9yNev7f/6zq63Ts++//LW//zo5i9vX/zDm4ef
XN5+59CSl+aH3zq75en9F3/64MpHV/c9ODoy3+M+sbxsW29+t48f4EIRMcxL
gyKs1FIO1CCCOhUpi7LwNZL0cinGQ4IKGFCVltBiZ0ekmVEVys2HgAiMV7ta
vHIgpFH1wqtRFVZ2d0gXVmBbfYrmPGncQPEJYcU6UomeXGamx7TEQjVJRVz4
OICJj3MoWWxsGkBUxqWh0iHAIWjxgDSgk4BGNAwO8COisf+K6LOvAuV8pp+A
STA++1v/iqjTYyqMeYKF9hy3UiXFS3kZIPUX++UDLTnrl1bt3tixc33b4t6C
urimyMsJ5XKysxhZBrJGgZeIcUwOnMFB07hYUCwhnivCmW2CSMTSXJ/f3RIE
KhoLarLMErmUxhcsbHICTv71fDBigYriUBAYEQvXKDIBqywaGkQnAw+RoyI5
paikm99RqK12s0G0bPOLwAPYHVXni9Mqs6j1VkaHi9fp5LVbGV1u2oCPs7HR
+Vynd0VS3+thLktoTy4uAXAui8uG/OxyLQxo5vou/6a+woYcNjCiwH+CXg/0
s85ObnTRGpzUuTr7llrr2qR+Gej4XvZcQjsTFq8u1SwPircElNvD2ikTdUSL
7xBntEthDTxo3EQ4Vq67MBJ5ZbbujUMz753Z9O6xtVdW9Z0ZKHm4Jv7N8cVP
L23/8d7Zv39x7+d7Zx6fXQ9U7s0rB7587+I3n9z66auHf/2Pp//nv/74j3/8
r3/8409/+Pr65++8cP7o8m8+fBHM//HHh7/94vIvX9/5+dFbPz++/f3Hr3z1
3sl3b+759I0X/vLtu//55MFPD05+8drBN85sfO3M5sdvnv3rD+/8/MW9928d
eeuFmXOb2i7vGjo/3793smZ+oGxlc7hES3cSoDAFqmdBXTyoWwiNWkidJkpf
trBaharVYIYD0oQS7uVApUZMwoLbMhBLWpjVDl4WGXIxF9712hXUAmiLdeS+
YitIr/kyTECBq8oW1eRI3HyYk5OhpaR41UwjD6tmY0QUJJeMZBFRdMKC5wSw
AcyATlKA38zIfKar/4oogBYcgi8BgP9tHSz+agAwANH8Qkd5TbCswheNZmXb
uTo5yqhAugyEqIfXUGrsrHF2VDtqi3XFPmEom1WQzQHnGPU0mZTAFSzwRuVh
yTwcKAYfS2PD+WKMVku1mRm+bEG+i5djYumlbAWPImDhgJFgAgvKWeCZwcEB
L4pFLugnCE1APwGiwJHS8WlKeqqRCwNxqTGoag9rGn1C0Ohrs5m1Hl5bUFaf
w/XyIIBoZza/yUyvUKLrTPh2F2OsUDET10+X6Ab9ojW1zgPDRX1ean8+s9VF
LtOjNvYUrGrNP7OxvzMoB2293kEBoG7u8icNaMAniE5rG5yripTLw9KpfP6y
kARUv420pEA0G5StcIv7NcQOObpFjmpUoJrUmDYjcZGL9mJz1kd7Bj54cd3n
b77why9f//reSw9PbL082/LB5sR3Ly3/9o0TPz56/W+/++LP3zz4zf0z753f
8t7b57/58sHTbz/8ze++/fmXP/zH3/7+p7//40//9b//409ffPfDe2+8+fJv
fv74d3949Ne/Pf3t7z755XeP//TNp3/69r3ffXnnh8eXHj049fTDa//128//
+OW7Pz089fj2gQevbPvg5sFvP3j1z98/+OGz1z68c/Kdc+tuPD/1xvG5y7un
T60bemXbkpNzizqDNg8bkYuGYgioCQd1U6EeYWqzAjGUK2jUYNqzKBMhRYUG
mVQjqrMIIVnKeNLYlq+stHEAn1YKBEwp6PtASP1STH+pO6CimGgpIS09bhU0
5OtyxVgTPU1PS/NpWHoOWsFASmhoAQ3DIWNYZCygDgQfgBxQToDoM8/5zHD+
vyIaKHJUN4RrG8NlZa48tyBLjzcpEVkqVLYe77PSCpysgIPptzO8WdQcIxGk
eJCPZDIcD/DJRQLYAJwkHgEUlYMiMzKozDQ2G6T1DK0MZVZhrXKChcMy8lgK
JoVHxnKZBBaLwGATmGwCwBIgClwo0FKAKxBSoKIMQrqGlWEToyM2TkOBsiZX
2B6SA+lryOU0ByRgPhDThaSwch2h3ckFjT4uhjfZqG0u5khIvqnFO1qorNCi
e/L4IyFZZw65wYppclEGIoqZWuf8cOLUxoGDsy0AUdDZjy2tfvPQNMjygE+g
pdMlmhUhyWg2vVmZMeygjDipYNJjwnZo0U1SZAUnpfjX941saMjdM1y8ezS+
qtLwUpf1w+cXvXNh6/sPzv+v//zm+0f3fnjr0tsHZh7vqvz20hzg9rNHD/76
t9//9Zcnv/no8sNXtnx5//gvX1z7w5M7f/7u/b/89NXffv/z//rDH//yu1/+
9NMPv//2m8/ee/jHH7//5ftv//ybHxcm3z3983df/fn7R7//5q0fv7jx8f2z
X31w8z+ePv764a0f7h9+98Lm+y9v/PL+yZ8eXfrt5zc+f++V924evrl/yfU9
S+4cXHVm7cjx2cGXN84cX7GoxWsNKxlJMW5Qil2lxq3RoOectDEXfVlE1aCA
99qoE0FppRJWoYEntJlxDWz7YBTIZkdADRK9nQaBXg8cKTiMm5gNfkNQy3Dw
kNlCTIGGXmoX2zhwAzXFxIQBRHVslIQCE5DgbCKcgUfQAJu/tmwgmxwaA7vg
6VIBeM+i0P8roiaHPBh1FMbsgXy12852GIgOPSZbj3XrSTkGco6BmmOgubRk
l4aaJSNqRRgOM5PNymSyEMyFro2jcglkLgmMwJFSWRk0VjqTmSoVo9RStF6F
NStIZj7DKuZo+TQRA8dnYjksLLAsoMhEGBogyiHgMelyCZtMQMIzIBmfKqak
WkSYoIUTMdFbCpS9MW2Nk16ix/SXaLsiChDt65ysqAzeYuc2WJglUlSVmQSi
ZVeecPdgSY9P7GdBzXbGYEACElCXjzNWojkwXbWxN3Ju8+BEbe6x1R1n55qn
y01rmrPPrKofjoiXlGnjipTZct2WctOEh13Fg3oMuC49vkqcUSFO95GgWiOt
0yOpNFGfG0xcmB+5unvy/Ve2vX1k6eVF+e/tG7p3Zv27d88C0Xvy0Z3fPr73
3pktn+1venpx9Se3D334zvWnTz/5/Y+ffv/Jzfev7P7Dw+P/56ur//ur2//4
7u3/+urh3799/PenT/7y9Vd/+fr7//zqux8/+PRv3/709x9+BvWP3/7yXz/8
9Menn//p6ce///LBj49uf/nO5Z8+vfeXp58/vX/j6Wt73jq18t6Zue8envzp
k5e/fv/F9+8duX95z5Udkzd3L339wNzpFf1HJzqPTfTu629qssiLBaghE3M+
T3KkQHa0QHqq0rw1pthQohlz09fEVPN1tv5cZrON1Oig5rGhFi/fK4a7eWlV
Ln7cTA/I0Ukbu94jaQlovEqqS4TLkRJ5MChqEYAg7xBgciRkIwvh03G1LLSY
nMnEpFPRaQtxHgF7ls1Bo3+W68EhwO/XC0owGJSOTIdj4ejMlAxwiMpAoGHI
f1sHi+DwGaJsGU2sWrgZvVpJAlBlabB5FlJhNjvg4nosLIeWnqVgqLkUJYsq
o9HEVOAYsf8sBgXNpGI4DDyHhWNwYHR2BoWRSqancARIgQQrVZIUGioolY4u
U5FFMjxPBKiGAYwZ7EwaE4HFp/KFFCgFIpFxWCwWgUDRKFQ2Ha1XMHRCQqVf
m3DyWwukNU5qUy69OZ8xXWtZ1uhs8QkiagxoQEkLO5eblsOFivWYmBo5UWLs
84mbLbR6HWFxWDNd41pcYQO1e3EFsFhgnGsPADu6sSewqSd/VaNtRZVuJi4e
8BC6HZlrymWryjSDDkqjBFbFSa+TEh14yCPEmIXIprq8+XX9k/1ls0NVF/au
urZvzY19a6/NT7zQ4/t43/iTcxt+vHvitx9d++Lda98+efej11/86MDwJ0en
f7y26/vXjn3/4JVfvnjww6N3Pn7r6udvX/ru49d++9mDnz9/+MevH/3xq8//
+NWTX77+/Hc/fPLz9x8//eLtn55+8MtvHgOkweFvv/vo+ydv/vD5vd988dZX
D6998/bV33/yxu/fv/Pjmxcfv7z17ZNr7h6bfXr/2M+Pz3/4+v4Hr+26cW7u
6pbxdw+vvblp/MRgze7a8K6KwLqAddYq2GXFHs1nnSmWnksoXq7WXelwXOl0
Hk4qDtYZ99dbDnV4+52MRgu9UIwqN3PzJdgccWaeDFmcxQBl56bEbay2Ql22
CKmhwops8hw5PZIlBeWSUHwajk1EzNPxvQaRgoUF+glaPIOMZVJJWGTms/wO
JPFZWgeNHkglAYUDyP3/FjwF8evHPlDYTByYg8qAYEQUCSzSeTg6G8XmIvh8
uIiTppMici2UcC4/38l3Gug6MV7ORgupSAEZLSDhuSQcaMf/LNCgmVQU8JNA
GwF1dBaMQk8j01JBzAdOFaR4oQQvkhIkcpJAjOPwUWARJCxQXAE4H4UnpjNY
WIAoEgVDo9GZmQginiDgEPgMhElKSXpVQEhBik9a8ADRJh99NKndPBACiJaa
yCBmxrSUsALvEUFVDlpMi+oNSIeDil6PMCGGTcVMo2WWjgIZMJ+Az72TVfum
qtd1hVa3+XvC0oGofFFM0ZfPGivkddgRQx78tjr9+hLlci9vwkwd0ZDrWLAI
BVrfFF5a5+8udTw/17djumVNb9nzy7uu7F5xfd+qF9f0PN/qurOx7dHp1d+/
duiHhy9/+cGV33z7zqP75+7v7rm+ue3js6s/eGnzkzsnfvz45ref3Pn84dUn
H1z87tGNHz8H3vKNn798+POTD35+8tFvn3z0wzfv/Pj04TdfvPnTt+/+5rv3
wPz7r9/+/qu3fvjiznePbgEFfnzvpcd3zv7wzuWn91754trRT8+sfGVDy57R
yMcvrnp6c/tnlzd+dH7u5s7Bs+PJC9M1B1ryV/nly92CxXrKEjNzs5t/zM8+
F5O+XP7/sfYeXlJcWbpvVKWPjMzIzEjvvffelffee++9N1B47wQIKwFCICRh
hIRAeO+NhARCQsj1qHv6ds/tHrPmzbvr/QFvJ9nNZWZ1z8ydO6y9zjoRWWRm
Vfzi2/s7ceKE/WyT4/rL54lcG0s7UKl5q8a4u9YCiK4oMrW6eJlipCWkydKg
+TZ2oYNT6uHnWrACOx7XkCfrwrlWrlvCyLbJsqxSaIt9unyXChCNm4Q5bk15
3OnWCiQ4RcpFxQRLJuJzMMbriEISh9z90i6x/guIavRQGdJkCppeywSf7raw
Qm4CbHsEnI6Vb1RhGildLqAoBKhKyFInxJP5KiQChlSIKiQshQyTyBliGV0g
pvBFIJIMCKkChZCrMAASOvBS8mGjsKk18K0OuUYnUGn4KDMxyf/lfBiczyMA
UTE3Je5SFvrlFQFpV46m3o/X+5j9BbKZGuvannh3lrIpLCk0MstsvGIrN12T
0pWrLzTRy21Qear6o6o6E2u2MKGiENtGS64dWFjXk72mK3NxQxCIbQjwxouN
4PG7w4nx0tEYZ1mRdFutZXeZZV+p9UCuZU+6YXeGac7GG/cIRv2SFcXe9ycb
PlrSub274MPlnZf3Lrqyb+HYmvajoxmX1zd///Hq390+8LsvTvz2mzN//OXO
sxsH3xoMbe8OPDg08/Wpjd9ff+d3X53643fXfv/i8otHH/4t/MxPV//+p1v/
8PO9f/jp0T/89MXf//zo9z/f+h8/3vjhydm/+fbSH365+3e/uv27n27+7sfr
f/wV/K+Lv//m3A+3Pvj++pHfP/zkt3dO/HTxrTu7u3f3+Po8qZdXVifW/Tux
/MstnfvqbNsLFOvjxIYYsT1T8maaaFe65M2YcFsAP1akBP282Oa50OW7MZp2
fTz94nDkUL1xS4F0IYpvrrCMhYXgPbMkSJaCFhQiZV5BY5o6KEPKfUKgNM/K
6im0lXolMT0/ouUBnNABLS3x60FII3rCJWdlOFR2JVclYOJUBEfJAi6bSSO/
jmgy0QOokND/C4gGfHKwPxYTx+MSK+UkrZrmtHJDPqndIjQbeDo1S61AZWKa
QsrQKFk6NQ79VyERUqQiKryUQFTGEksxgYjBF9KhI5IkZkHDJvST0565BAUy
OwtP4fGp8KpMyYIOiiFJFRWJRAQhEAtFKhkuJUi5IWPUyIZEP1ntbgxyi4zI
cIlqutoyWmrozJADoqCigGieAfNJkXwbK8dIHytxVVjxOgfR4hH3pemmq9yH
V7QdWGiEmK3xztX6YE9nhrLGzVveFNnWn9cVJGbyVXO5slVl2hU5krdLTMeq
3Z9UuE8WWE9X+t/NNx+p9qyPy1b5RDvyLe+2xFblane0hj5ZVn991/DVbb0f
DMZPzRY9fWfyx1Nr/3D/4N998f4fvvnk0cfrlhZKJjN55ze13Ns/8fP5bf/z
/uF/fvbp//vizJPL2355dOgfX3z6Lz9d+ucfLv/z99f/+fub0P79i7O/fXLy
2fX939w48I8/nIfNPzw/88dvTv8/P57++2cn/vj4w58v7/5obcfxla17hws3
1Lvn06grs7HtpeI9xZKTTdb3iuTHSlT70rhbvKk7wvRtAcpGF7Ingu4M0t7J
5B4vVZysMlzp9N+byHo4m3d/Pv/KRPq1mazz42k7yzXTPvqybHmnjQGI5spJ
LiaSo8MC0gSltRF5fUwZVaW2ZOoSST+k9MkxI46Aipq5KQElG1j1K1g+JStq
EkfNUoMIVRAMHiOVjzPkYgGPzXwd0eSAJ4AKFeZ/AdHCHGPIIwL9tFk4kOtl
yXnLUCuKUZkck0jpegNhsvA9PkUoogmHtA6bUCGjyqUUnQaTScgSUapIgAj4
qYQAheALmQIRluy/2vMq2BzKn4MklNDlSg7GTqHREYyVmFUolyvZGIvASXaD
AFQ01y2uj2sGikztcVFzCIdadE13ZL7e1Z+nrQ8I63zixqDCJ0ACalJMR4Of
rA3KIe+XWbgtXnlzQDZf51/ZnnZsfS8IKegnCOlMtacrU9MSUqxszhjJNXX4
+YNR8XyuakWx7kB7ZE+R9nCR8UyF83KV+0K542y1/USV8Uip7nC2ZmdYuD0q
XO1jrQzhb5ZqD3X4jw/Gz41mH2xyXlpc9usPFn76cMk/3dj9wyer3x6Mr8oR
Tngp+9o8N9c3f/fu7N9+vPbXJ9f8eHzFh6sqn3y08L+eHPlfTz74+3uH/uWL
E//04Nj/vPHu10dXXt81enFr/xeHF/7xzjv/3+MP/+Xhe3+4sfeXsxu/O778
1o7+wyM5b3WEd9V7dte59zW4dheLtmdz9uQShwol7+dJjudKj6YLDodZH2Sw
DqWh+yPUt4KktyOU3WHS4TzOqRrVJ3XmG0OxO5NZoJ/XpjKvz+ecn0r7eCj0
dq1pVZZwMsiBWnQgquhL02cr6VEpCWSz2MUDSpvSNZDo66KKwTJ3gYNf6AF7
gYB+AqUgpFCOQuqPGQVBHT+gE5ilLBmXxmeSQUWBTyEPT14qShr21/r/HqKv
sARQmWQM+iwqG17qbooWZeqCLsJh4ykVidnLfDFNKGVyCbpQzFSouG6fOjvf
VVLhb2hN7+zJz860gLHSqhlQGChkZJkkVSJCRMJUgo/xCCaXh3K4DJxDfxWw
81WwcdqfggP1QOLGfA6PAvs5XIzFYgmFYgaNDvWD36GIORXFQWVThr4xKq50
MhoDrIFC+bJW30yNfazUAiraElHW+2VROdmvYwQ09NKgstApSlMywoKUOrei
xiWZqnQBpRf2zACcUIJCLQp2qSUq60ozDOc6ygzMiRxzm5PTZkN7XayNZeZZ
F2VPnvzhcM61RtetZvetDteVDuu5VtOpMt3hDME76cSOAGNvlL0jxNwZxnbF
OJBDN3jQt3LlJ9t8D5dXf7et6+aSsq2Fso1Rzvow+2CF4ViT62xfDF7dkSM5
2up6fyRwfCJ+ZXX11dW1V1c13t3Uc2dD7/VV7d/tHvl259CVxZWfjuWdGs09
O1V0ZqLg4+HM/fWW99s9H3UHD1aZTneGzndFTtTY38lRHMqWnSg1fFppPVNp
PVVmutESvNLg/aRI/Vmh+JN8wYc5nPey2Ufyue8VESfrlJ+1W892em6OpT9Y
VHBvofD2koIri3I+m077ZCx6ajjtaH9se62zy472R+T96YZ0KTkiSU1MRzSh
0AKcAGpvkb27wBqUk2rTHMBkUj/TTaK6dKdXxgxpE48bNgvpah5FzCZz6Ski
HgaJHmfS/xsRXTxSVFdsDbp4FgNkZBpPSMHFNK4E4wnA0YAlV+WXhDr6Sibm
G+aWNc8uaWxtzkqLac1GlkGHqhRkhSxVJkEkYjJfwAHSQA8Tt+a9FjiH+SrY
OPrnoBFCCqR7vpChVIGP59LpdDabQ04lQWUbcCq9Bn5RQFEZlFV6OcVmUq2H
0RLn9OcrurKkYJdARZtCckj0URnVr2cG9VhlXF/qU2QbuV4iscRiU1ANiEIc
39AHoAKlYJp2T1dNlLv6Mh2dUUOdXbimPm02zzISlnQ7WPPpkoU4frIn8MPa
um+mc7+eSHsyGbo75rjeb7nSYj5ZKjmexz8UZRzyUfbZkUOu1GNB9jt+4sNM
+Yl81bF85dFCxQeFsqPFiqPFyncypPvThIezJfvCnFOl2o8KFUfS+WfrTUdb
Te/Wao40mA9U6o42e0/3ZJzpzT7dET/XHrjYFT5WZf6wwni00pQM2DxVZzrd
YLnY5DhVrr1YYzlTpL5cbnzQFLhQ5LhS6bvRGL3dkZGYgzqQd6Un82yj73yZ
+kyJ4qMiyQcFwg/KpCcatKc6rZ/1us91+66MxO4tyn+4ovTBmvIbK4quryy6
tbr84kz+3bWN19e0jgT541n6+fLAUJ4LHD1IKFikzjwzyGm6jpq0TtlmHPxR
SM2BXJ/nVIY13CKv1imiZVglZgFVg6co8NRXiZ7AsWSi/+9CdPl0dW2502PH
1cpEiucKyGwBhSNmCGRchU7kDVvr2goXVg/temfFm/sWVq0fGB6syM+12a1c
o54J/yVJqVRCFvA5HJzJRKl0GolBJ7+K17B8PWhQiEKlKpJgRpNKLCGoVDIK
XxNBwH95bTKzgpntlWU7eKVebqGVWuFiNMT47ZnStjTRYL6u0sWu9gmzdAyf
JNUoRuxyUlFIVeiVVfhVURnNgSG9WQ6gcUlT9OTm4R0TlYsbwovqQ7unazb1
Fw8Weup9ilqXYCBN3+EW9nkFLUbagAvbUCS9vrjo69VV360o+3F16bfLcu5N
+64MWm702k9Vy06WCN5PY5zJJY4GKMf9lNNxzqlM1e06341q9+lc9bUa+8OO
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
7/fMPtrc+5vDS3/cNXl/cePjucZHQxU/zrf9alnn04Xqz2eKH07nPp7NuTsW
uj3kO9uquwO1x0js4w7no+WlUH9emE4/PRb5ZCwMBef5weCl8djN2RzI9fAr
fNzje6/Zsr9Ge7BJ//Fo5NPZ/GPTxSuqXWCXBvIsYDP9ClbcIPBIUaij7EK6
FkeMBMWv4YlSkbCBn+lSqTkkKYus5DO1Ej4fpYOEqqVyaJM3cgKl0EmOO72O
KJAAAWQm61Ug9uWsEvqfAyWnQLbGSAgNYwBQGAvlMuk4n89niBCBgk5I6Twx
xhXiZDqNTMPINA6Vhr0c2wT4ERaNmRhcTcEYKRwmwuEhHH4qh09iabkiOcaS
Y5ichcpY/+qs+d/fjUwhpdLIJDqNyqTTMCaKszAuziY4UIGIcJ1RYLZzjTam
1sSwOkWQ9xl0ElSwEMnxK6hpoWYAQdbKCKsWt+k4aQFtxKNUiylKIcltFqiE
FL9RZhYzjQJKcUBf4JGX+5Q9BZ6qgCKsRatiuuZce+LaqFcKZSpsZprZpVa8
0sZudDDBK22pNR9oc340HDo7mf7ZVN65yZwTvb7zo9FrE7HrE5FP24wfN+tO
Nlrer9QcKlVAQP9Cj//GSPzmaNoXiwqfLit7NJf/1ZIS6NwaS78+HLszkfFg
JuvhbO6TpaXfrW74dkXTT+u7frVh4IeNvY/X1Xy5vvbppoZv3mh+8Wb7T7u7
f97T8/OB8b87tevXxzf/fHjl7XWdjzZ2vdg5/NOekW+2dH67pff77YN/fG/J
s03d323tv7NQ82hl08MV9XfnSm5P5d+dyn04nXO503mt03a11Xi+2QCn1ae9
PiihAUWoOaGQBgt/YSh0rt95ps95vN12uMl8vDf0fndwf7Nrd43hoy7TkVbD
/hbr1nrr6hrXZJF1IM86XRttyDDkOoU5HolFStEKUuVEKvhWj1WK05CAXebQ
C/goImRSNEKegMHg0RNKCFgmfdDrhx5LYfzFYCDUvxhMhP4q4MfYJCaH8jID
E1SxgiGQoDwhnUNgJEoqiUwlkelkMhWjpUCmpqUmhltfjv+jjBQ2E4F6lsNL
xTkIKmfxJEymhIlKmHQRRv+riJIo8G40GihzYvVnJpTWrMQEZqh7QTztboHV
hestTJ2JI5ay2Cy6ViGxm3Tw0ThKhWoWAvpiLkMnZRjkTI9ZlFizgk+CMClZ
SgE1ZFHKmIgaR/LcqsqoIdPAqQlpWjJMGRZulo1oyLLUphvjRjb82Suj2rge
LbGwi/S0zgCxucm3t8MHiB5ssx5qte6o1L9da3q3yXys3X59Mn6mx7G/kLs3
l3WgSHqwRP5Bte5kk/XTNueF3sDFviC0Xy0tfbay8uFc/uOF4mvDscQ45HjG
g7ncu9MZz1ZVvFhX9+3q+h/Wd/x668Bvt4//evvIi53dt5aWQny1qenLjY1f
rK9/srn5/tqmB5snvt41/2T7xIWZqttL6l+80f/txs6na1uebu7+fG3rL/um
nr3R++22fujfX9n4QXvgk57wxZGsOzN5cHZ8WKXal4W9m8M+ViWDQvq9egMU
olBwXp/O+np9LbB6HarlJTl3FuecGQy+22TdW2c52OZ9u8n9ZqV+exFvW4no
7TbHG/X20XTpVLFtWVMapJsV/aVtBa6uilDYwjdKqAIMsWh5BZluCRdxGvga
MUNBMAQoWYBS2amp/MRaCCmvRpZeP/TMVNpfDDSF+heDgVBeBWxiJDobKlM6
jS2kgZRBwgU8wMX/aX1myPF0Ms5MhaoCtJTLTFwySFLKTMFwEpeVwqIjFIKO
EQw6waARKAXiryOaQian0mgUeFtooXqA9wMfBogaLWK3X+IOCFR6Kl+cArUo
C6PJhDyNXAx8YjSSSiqEABXls2hWDQ9OYa9FClhKOCkyHlBKUfLpVjlXQEEM
fHK6RVzsVwGi2UZOoZ0PdWm2nd9bHqxJM4CNSjPh1XF9sVcMFSkg2uxira6y
bao27mkwH+qwH+3xHGr3HusJXpzOujyZfqBceqBMdKCId6xBdbhK81619lij
+ZN258PFhTcmMk51uI7U6O7M5Nydzb04GL48HIWAzrm+wNle39WxyJ2Z7Htz
eXdnCh/MVzxZ3vj1yvYvV7bcX1d/ZjL7wlwBdG4sr4DO9WXlHw1mHm7J/ain
+OxIxZm+/NM9WU+WN9+fLrs3V/50W9/N5XV3VjUe60u7u7rp9sqGB+ta99c5
d1caj3YGzwzEPxsIn+pwvlchPVotP9NhBTd0oFIFoO4rV0C1CZVn4qLn0mIo
m2/O516dzbk4k39iKP1gV2Rng2d7jWV7pWp3k2VdufatvrSNLeGRXAPYpSqv
sKPAsWKwsqMsUBwzRh1SCQeREiSnSQSZy2sRi3FExqVZlGKDVMijUnEK+fVL
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
Tv9Ho2krM1lbi8W7a0yfjqSfhxJuLufLlSU3p2J3p6KfL815vrPt5329T7c2
frWl/ps3W55tb76yKOfT0fCt5UXf7Wr/dkfrhZmMzzdUX1+S/2G3c1eVbG+t
fFupcEe5dG+N7ki773hvdHeFdX2eZk979GB/9vujhW/UeVYWGTZVO/d2xMZi
4lIDuSPEb/VigzHe2/2xU4tL15apdjTbjk3lfTRbuKfDd2Q0862uwKCPNuCl
Tqbxmhz0VidaZ0BmMgXzWYLlecLlmdwtxVIoQQFOSO5gmpKDuoscyIIvdUUG
f0upbm2Rrt+NTafJxtMUs3mm0UxdrpaWrSI1BiTTZYkHStY62PUuTktIBIi2
5Dmy3eLCiD5gFvisksyIBcKiYfMYCIeGJBbuEHJAJVgpKWwyKTnanbyEBH3A
lWDhEjGfULL+wxBqOK8CNgVqXKTlSvQEP7F+yMtQo0INySgTmaQ8QNQoY/jN
bK+J5jWkugypRg3TpMW0ChQQFQkYbDaViVLAkKfSWAiJngLlBp2G81kKtUim
4vIEkJo5ECw6lryUwCLTeAwUNDCxCPnLW+rUOo7Lq3J6lCarCFK8SiMUSugi
WSoIqVRJEidWfOIKhWweC2VSSRiNDB2odRnkFGoKImQnRuGkXEzIokOwKQif
SVXwcfCVbq1ExEBsMqw0Yi0N6SM6rCami+ux5nxnzIT71TSIooDUo0gdb86o
javb4xrwBcNZmrV1nm1Nns2VOihHd9boP+yJHGxyHmy0nRuJXRmLX5+IfbE4
5+t1Zc/f6vzNeyMAJ0jobw4OArHXlxc+2FT9+/cnf7V/4MkbTeemMm6vKP2w
2/1mmWxzAbG/Wf9mpWxLiXhXreFQh39fs2ddvmpzhWVDrWdvT+ae7oyZLOV4
XLKyzLqzI97hwWu9eJ2HVWmldEY4y2vNO/qDg3Hm0jL5vr7wwaH4+mrD4eH0
fT0hkNAGDTKbKe6LikayZFUGpD/IfqPZtapEtbxIurfF8V6rA2rOTwYjx3v8
R9qcq9PYWwslG3NFMxEC9HkyKqzRID0Bos3NTYeyXE0qdxHp8pQyG2cwzwJV
aIObm1BUGyvTyuuvjlakmYqihpBVZFdzbFoupHiHkVCKKPQUhGAiPAYcX4RL
AzuAJ5UzOfIJrodCRtgsBugPR8H4D4NQY6+Cr2EJdbjYwJUYef9750tExUKU
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
fbaz9dtNDV+vrro9m3N6KHhpad7dzbWnp3MSD2RvtHzQHwLPtaVMCf3PZvM2
lqkO90fOLCkfi3C3NPu3tMfObeo/MFU1XmAGPzKSawAVHcs3zVe4IePX2PEG
pzhXTirS0MBWr2wKjOSpB3MkJQZkME8xVaJfVGmZLzaAzndY6SMBYiFXD1l+
JEM+U6AH/Z/IUXf6uW0edk+I3+xk5IoTD1WsNZOg3+bBGu20GgOpXJ7S5uRN
51tAseu8vAonq8BCyzFSM3RMBxcJSFKsbMQvRgrt/CXt+dMN2RWZDojWsuj6
+Z7yDLtLzcoP6ftbCrRqpoifQnBAKOhWo0IAR4hGBukg6Bw+kwOIgkkGRBM2
XMNhy2j/jYgadHylgqmS0rQyulXFtCtQkzBVw0HkXJacy4RQchkKnKrGKToe
3UAw1Ey6CqPLWShQmrDbDDKDjbL5KEoghAQx2liRqCw7Q5mXIcuJCeNBfpJM
h0cMlIKEylRUvhjhEAgvIcJ0JkaD9lWwMDS5YmpyNDhZh4OKauVKFp0C6T7x
DNRUBKogIZcNZkrAYnIoiJLP9FvVVg0vK2IsyLCG3ZL8mKm3pmS0paqpKF6e
7uyoTBtuyV0Yqeyvj9dnGdvyLHOtaYuaw+v7MraP5m/tz1jb6jvQn3V1Q8fF
lY33N3c83dn7fHffkzdafn149MtdLZ9vrv1hW+uPW5pvzWR/0u/7eCJyYir2
TpfnUK//09ncoyOxt1rt60tk0B4eCH84nsjv6yrNK8rN781WXdo6/PWxDeva
0oFAsCQThRbI9d0xOUgoIJqvJDe5leUGbroAKTMwYf9CjWtxtWMoX13upPdk
yQdyVC0+zniWejQmG41Ix6Ky/qioQoc02hkQoKKw2WCjQ9Q7mVUWKrTtQaLJ
w271c2vtjK4guCRqu4voCUl74oqJUntXpirHQMo00Aqc4qqwNk3PDqsYNh7i
EiIlXvlMW2Fdvi8vqHOqMOhk+9SgpYBExClNj5s8TplJT3idWq/ToFOKX659
h7JSUSGLhzNREhnBBQyZji818MHp/NXCUscWqZliDSbT40AvtAojV6Jl/dUs
b+CYjHyVElNKqCoxVSukGoUMHZeiwMgSnC3BWXI2U8WmaVhkPTvFzCXZOBQz
k2bAaFoWXYFjAAmdTqcxMZSDMQmEK0R0JrbfL42HZVkxWVZYFAsIAE6zndCb
ceATJFSiIAOiXH6KQCBgMpkUsIAvH33yp/moZMq/QTQ5lKEQSZgUGuwkWHhy
3WngNjG+gTL5DBLYpbBTb1Swo15VzKcMOkXVBb7B+urqrGiuz9ZcnNZVlbVs
rHnzkp6OqlB7mWewLjRU5+8pMa3uS988lL15MGNjd/j2juGzq5tOzpff2tz2
0UTWtRUVj7c0P9/b/e3+7gcbqr5eX/tsTfW5geDBet2+VuPuVuOmGs2+Hs/H
87nbm0w7W63rKhT7e737un0fTuWvqTIvKdbvHcq/tmP87Buja9oyq+x4rYMN
+X00z9jiF0AHNA1EFcSz0ijsDpszhKl1dmFfmg4wbvbxutPlLWmy5ri0L1vb
HBR2haUT2YYev7hSQwIV7Q0n7jZqBhq9OKgo1KL1NgaUmsU6MrTwDp0RKXwK
GLEaKzYSUa6qCgyna0C9R4ssvTnahoioKijOsoojWo5bQoOw8BAIj5Re4FWN
tBYlHVN1jrs0zVqWbovaxEXp1pwsu9XEN2i5Rq2wsjQnPysGtSifzYZEDyoq
5HF5BIuQsCTgZLXc/ySi0FGaeDq7yOCU/DsqCqWjWsWUCxPPP1Lz6SYh20hg
GpwpwHAhxpIwUQVK1rFSzRhixxE3O9WFUe0suglnang4n4klZpOiUJKyoBbl
8ClgzJ0Oid8lifmlUItGvH/iU6llgH6K5SShNIUQITxBKofDo4NhJ1MhXpuP
Snsd0eSK/dARQ4WOstl0TIATL++CYvIwDkqmc2ioFGfw0ZQ0n0UjZjiNRFZE
X5rrGO+p6q2u7Cwv7q8rr0j31+aGFg00dNdkFka03TXB6a6chf68TdNlmycL
1w9lre4Kr2z1fjBfcWpVw2erGk4vq7i/vePZW/2/HJl4uqv9+trSW6tK7i4u
ONvrf7/esCWXu7aAuzSfM5PB2t3h+HhR3nw2ZzxKX1MuPzwSWVEs3dERnMmR
zRfqN7fHdw8XD2QbwC/3ZOrBvAM84NEAzsEsLSDU6OG1BWQVBkl/3FmkwitN
RJWFU6Sl1Dnh59VdBcb+Ikt9SDxSCN5KMxBT94eVA2E51KKQ2cHRQ05vcqDg
mKBt83IafcIaJxfaxCCni1dhZVXa2PBuzWbWSBzqARGcFzVuTltcNgHOscqf
51ZpWYiZSPWr2F4FZhNSPHJmYUAfMBIgoV4dZ6a3amG4AToA6lR/dWtznt0i
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
1doLVfFblcprXtMVb/JiZSwQvdxle7rpf2PDf92Xs1ljvNZZcKktb77e1F2o
Gq9Lur/i3eosGK01Bkq1XeWGzkpTc7Gxozq9Ll+LmX5XbntFakWaYq6zsi4n
zl+V5io0AlFwmG/RYkGBT3R3jZINVpO10tQEOcjEM2kGBQD2eypG+706vbIU
CmuMAplAVCxlwBxG0EmEw4xPlFJ5pP8MomebPuAE3qA0UsvjqCin9Z9ElDhV
A4gS5xUTR3P4zOCFG3CncMtKGVspZ8A/iwXnhfh4jFApPzQmhqYz8qJ1PL4c
IZxLZnEpZ37If/wJ3pj8tELDSKcVQQkeGwCZxGBQeAhE2RwKTximjOYE79NE
PxeElkIODgMUFoItBUJK7BrFR6qvKcq2GKCiVUVp8ZHMhqq89bn+if6WnZXR
VldJd3PFgLccfHqrs2HDoKKwXogJ9bbEIgOnv94y6s7trkkdDl4IqYEWXRiq
nXFn1ZuFvvzo1Y5CZ5qoozAOSjXdYDnur7gzVgtyRvJlM0WRD4eK9p2agVTK
WqnipN3yXFf2hcqY2TxB8LLNItluedz7Y3Wv99k/vjLy3Qudd/x5k1bpXIlq
ujByrVJ9pSW9z8zaqk1YKY+bsQWfWa+Mv9yoA/YvjpdebrNc7sy93l/2YNr1
zv7we7tj13tr9nz5G43pk/aY9abEZafuuC//ykjVbm/Jki9/qjl3scu+EKh2
5mu9FanD7oKazOhJX2m3IxO4+uzJHZVmd2ky8CvOMdaUWGyZCdkpsXX2LEui
CioqZpHQfVrqiwBqpikaGzg6ERB1NtjzbWnaBIVQTJNFsj8fHpZFQuMGhDF6
ETHz/4uoLJZ1WngX2I4zSpQJAn4M/bT+k4jiuXhVNHH3HGKQqGcX0NGenQjH
4LMokK8oBQuIivjn+BwSj3pOzD0fFUVRJ7CBKE/GJLNZoTROWCj1tCLIjM8r
gnr2GuovXGp9eq09KMUMRFUsZgoF5+JiuTqNhEEjCbg0BjUs7FxwmCBoJowo
Qpw126SSc9DuMeOqKcSy1cfwfQ2loz1utPihroaV6Z6BtlpEe8R8xHmQmZ+s
RMyf7nEVm6Mq0uWrA46F7srBptxhjxXTgCP94rh7saMIK33Ymd5fmwKZHW/K
ai2Mv73UttlWeKGtYMyucxtpx515d/tsUwXiG+0Zu/WGF0fLUduOhI0qNWoi
V3ShQvPuZP0r/WWfXJ/42pr3uDVjyiZfq0vYrE9crkrYbkidLo7ZbUq74EpZ
dyReacu93p67VxcH8/DKVPlJv+3eWMW98drLgaKHC75Hy30fPbr41cuT+x35
QwWSpZroLWfsVqPueKzm1mzD1anGvdH6g+nmy/P+aX+Fw6oZbLRCPJtsCWUp
MnuqHDNLPbXeijQ0dAgm+ISQQk6BKxYXhBSUFmbp8RCUAmDit7sbU2MT3TWO
oszsxOxcExSVABUqimaNLh8Zz9EmR/5nEIX/PC1IqMYkB6VRBpEglnFaX0A0
KpL/7Azhc+Rz5yghZMp5ajiJwqUKiCFQiJHJif08EFI2lYoAJWDT8ZaoSC6B
KI9NCtpRHhWIymQhxmSRIp7FkdDDmIwQGjMC3jGMSoxkjgoLpQTHd8LfDvsj
ipgSDZ0QVeJJPANTCkeKGTY7XMQlJeqE2emxEl6YjE+V8mjM8BAONdRsikdc
QkqCHcXUWVuclqwus6VjOUMHpod8y1PdU4OtILa7tWak03l9e9KepYEFRdjP
0Ilaa3KQZ4e89uqcuKGWomFvcVd99vZUa7M9uaHIMOgumPYVTnoLvMW6Qj27
tSQBPRQaO9qQvd9fe2W4PlAQ12+LuRIo3PWYnxsuvddfdL+/9HZXwdO5hlen
6i44jAslMX4j9aDR/J0t/19sdXy44ftwu+NaV+5MWdR6g3G72Xyls3Dfl7fu
Mo8Wxuy2ZG81WR5M1N/uLbnVlgJZfmmi7Olyw/2JqpuD5RdasqarTXv+qje3
Rz44mHhhtgnPH3dlbjVoV11aeNGrE469werNvsqjed+LV+aeP5zpbbS2lpk2
hhrQ6KszomBKUXhmoqMSjR5MYhHBtAe81Sk6GVDEQ6WQDErR6OFFQSlsgD0/
ub7KCiPaN+CDlqLdg1L0+mDHj+Yh+wA2UIo6e4oIimjrxIlMp4XmDp4BNoIS
EFUnyQhE5Ql8iYYj1XIj9YJTVoWYKhA3WBxAEkoCorQwCi2UHkGi8eki4vpo
Yvfj6bmaQjYbcUnCZ0N446KE6liBKpIOCQWi0ZLg6N8SyTk0epWGAxWN4LDD
IM+08AhKaDj5fFj4OXJECDYGGh1NPDj0PZtDg+dEEQPkEoPlEoORnv4KiQnt
ns08L+aQDHHMvPToFJ0kVsqMkbCDIwvRw+A/JQLqs2u+zqOq7HmpSXFZZi02
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
mu/r627wNpZWF6fnpanLC1Jg2/Y3JmeG2/DM2lSg31PmLEzubSpZGfZOddXj
4eNrGwfLPdfW2ke9OS1lmrZK/a2trgeXBi+M1w03Z12Zdk+4s0cbMjZ6K57b
7P7G81t31jpfPBjtrc9GzXVWXhh1H8y2P7m+/GBv4t7OKOYx3ZtqHWrKb7Il
tJWnwOtOd1UtT3eAUhjL/c2R6wdz8Cfo4CuT7f0t9vY66+aUf6rbCVbvHS4e
rAxe3prY353FN3rlxesTo21A9GBvvr+n0d1Q7Kor8LVUeD12PF+Yn1Remo4n
G52FwwPNXR0OkzGypjI7G+0j15CWEj092fPyGy+//d3vvveLv3n5p59O3Hm4
8+TJrfdec/S6lelKRgyTG8fhx7CBKHgAn6I/RZQ4mQRYEumewBUonkUUD4n4
T2CMh3hZVAKPrzzHk3IlSoFcyZdHsuQySpScEqegqaNo8aqIGEWE4tk1HRxx
BFtMY4oZDAkD+knAKY3mBceYUrKfjaUfHCBXpORCmU1ZKk2yRBbL4Uo4bAGH
OJceEkqczkQ43nDyeXhO6Gfwiug//OAZBosZTgPKzHPkEAobEkqBRFN55wVR
jLyqjLqG7CKLcKhO31OsaM8UtWcp/FZNmUGUKgmNZ5GSlexcY1ScjFNekAVE
0eXBJyhFFoB+Yjra4w54KxGLEBkcdnNCDBNaClxjZOFmo+zKwRJUdPfC1De+
9sqli3NT4x0XNsbHB735Fm2FLRVqXF+eHfBWQ42B6/p094Cv0llq7vaUYmZj
unOi23m0NX5zd3JzoqG1Kslj12P6/NHk2w83L690DDXnbg3V9ddb+urSl7sr
juZ9795bf3J19s5m/85484jHBi09nOu4ttLzwaN91Gs3Vi7OtV3b7L+8Etib
bw+4sr2VKb1Nec0VKZ663A5P8fSwZ3dt8Lkb6x++c3+8v6GpKrPTZVsZbYUD
GfPXwmaD1aON0cPNcfSFFx5eeemFq+AT8ogpCjRWlFlqq3LAZJu3UhPHh1qW
FZurK7I6fNXdnfWYiVYyczK19pK0oJaWZz/38NZbH773le9/96P/9g9f+/SX
T3/w7fd/9u2Ji/OVnU6BIZKvFbOiOFwVi68kbqPwxYuUiSuYQCZx4J44V/8s
ooCTOAQACSUOqgbPP4lnSmMpQjlbESWMjhFER7FiFDRdNCNZzUlLEChEoWIe
ic8Ljr/Ek0An2Vw5j6vgA1EwCT4j44TEjR6e9f3g4GiSKL5Kx03JidamSOFJ
AD9XxEP4EgjZ0E9yxPk/8Pns1uHQzGd3I+VyuZxnP7CjTDYrjMoIp9NJ4efh
UcMYwVF/1UnKqqbS5f2Frt66Squqyx4zWZfQa5O3ZUp6izS+nCi7hqFjkuKY
pLzEaGuaoc3tUEk4SWox5A4NGqwiGiC9ItF7HPmBVntWigL6qRKHZJjkrqqM
NKMkWhaBFTc/0z03HXj+/iFAxRoEsQ21+TJuCARZF8Uljk8NBxrbGsv2N8an
htwN1Zn+5hK3I2d1tnNioBHK9tXXb073VtYXa1uqk9vr0482e54+2HzuyuSF
meb5QEV7ZTJquqN0zGu7vND+4tEMOvujg2lI5aSvdGOoAS3+my9f+fF7zz23
Nx7cqznehNRzY3e432trr88Y6ShtrU0vy9eXWhMWJ9teff7g5Hj52qVZzA93
1rrLLTO9DUvDLd1Nxa01OQPe8mDTn+5CR0B3uHpltTfgWlse6ulyokGgm6On
o7M7qnOtOfrkRMX4iM+JheOvw+YJdKGc4LOh3oblgPI02e/ev/GTT378s88+
/ujXP/3otz//4d9/8q1ffnTv3ZcWbxx4p4eo0YJIUxxBKU/F5P/pyHjEwE2Y
IUbDA4oAEnx+AVG8DHASZ0fjNVxZOB7yIsOCZ/0pOfCfcSoGXFmqhp2p56Yn
8GLkdJmALOCFI+BQWRE0Lo3GZ9GQd+QMkAkVhYQGx5iS0p75UioQ5UoZUFF9
mgyNHioqkPMFUqFIzAWlcKF/uIdyxLMrQcKgmQSfz67c//wHKgovChWFFw2l
heDP4n+ZMrVPP3hl88r22uaY35XVV62brNNO1agnqjXjVdqZSl1HprTGwDFw
SToxVSVk1FeWWDNS4EVtmQlRYkq6UZmRFAUNhKKO9jQiqkM8m+vzsKJTEoRA
FNYUjQPeDJ0dFnRnaxK4QlvQ6Vbn+wF5ik4GSptq8mEYVmd6F8Y7X3lweXq0
GTU/6cP04ubwzvrg1IjnzVeP+1qLCi0KZ1niSGf5VF/to5vL96/Ob0y1zHbX
DHuL6/K1Ax7b4VJgfdS9PdU6311zsjW0Ody4O9Gy1FMLVl8+Xnjvwe67D3fX
Z1pGA+U3L40tTzStTnlQ7Q1ZbQ3Z2Kyqik1Q0eO9aVD6ysNL966v3bmyNBmo
DzQWQUjn+pvqCk0tVVmQ08GOWnT2lx9f296cwJfa25lBf58ca6+ryQOonsYS
sIpnoJljw62YQlTRPsCqzZqYmR6Ph3hBVXmmp7lqZH763W9+8Nef/fxv/unT
3/7733348fe/9dnPv/0Pv1m9d+/SK4+retrlKVpmDJ+upIvig4M3EpfPEyeL
Yp44q4SYB4qEWp6e6YT5LzsFOjKeJ49kgE9NDFsfyzJrOdlGXraBnZHAiZLQ
g2PlsclcHo0VvOk4ny0Rs2WCs4ieNnq+nMUV8zGFeTBaIpHUpDFsjpiNRg9E
xRIe0evPIkrsUwruMGUw6H/4oTHoQBRelMKiodFDlrEJrO7O/uhX379069rh
lY3FYVd3hXrKqZl3aRebDCvuxK26hDFbpNPIyooMU9JJMk6EXMTzuGrQnU+v
x4GiEqfxNNXk9furIYCYxkVGYJNE068rT4uRU2DJ2lurji+vXD9e72yvhUnD
mlpbGID26mP4qDKrqaW+CCq6Mt1z+3htbqZ9frZjfNSzttJ7sD91fGW+qcH6
9us329223DRlfYV5vN/Z7StbmPCuzLTPDjUNNJcOee3uMnN7bc71rbGDpb65
XtfmuBd8zndVXZ73r/TV7U8HT0V+uD/5/ouX9jZ7ejuKbx1NzY65utsKd9cD
k0MOT70FiMJIY8sCos+fXHjntZsv3d976e7u9mwA4jnkqwyOaPFsGNuR9upA
sx0bHb4UTAviEhQS3xE0YgPE90W7x8P6Wiu+KTZPcIvn0eXzshPAJ7ZZCC/E
FgagzlU+f3Bt7+7dH/365z/7zc8++efPXvjWV+cf3Hvtl5++88vfvvLRjyau
HJb5W6TJsRGwhbFMUXzQiwJRQhiBJUcaRhB7OhQe0hDIjDNKACqc55cgyorS
SRSRtNgopiGel6rlZRmCfFrUFFNUhFJEF7HDOczgECUM6ByfzxSKmZI/QfQP
RpQO/eRLhUIFJ9YohBcFouIoJiI5lUUjTlcmTgD4AqJgEr2eOF2E+CESPY3D
YfBYTEEwhdnKs7/9o699/ftfvXL37r371+5fmR90GKZdmtVmw3an+bA781a7
+UK9vj1dUGMSmOQ0rZzHokXEqGT2/GR0Z7RpOS80kh+GVA4xbHUVwXwuTbXv
rA60u4sQ6pE1urxl6UmRywv9sGF3b++uLA5glWEeK6iq1ALUIcVZyTGFWXpI
KAwDQL17fXN01D0z09baWrK0FLh0aeroaL631/HiCwcTQ00tDfn9XTUQ2Pbm
4r7O6uHe+tFeZ0OpGeQgy6AjT3TVoSMjdG+M+xa7a5Z7HaAUjX61v/54KQBH
+sLV+YPdgcmRuutXJjZXOmrKDRPDjpPrs63unMqiJDiT7FTl5Z2JraVexPkH
tzZ3lvp253sQ4dHrr6yPDLZWVFsNvZ7SHm8FZBD6iW8HeTzcX0AaQoTHFN8O
iR6tH6Civ+M1eCVkE9E+ySA36CRIVdhUYQaAaIPX1bt7c+7qyVvf/faPfvvx
L//1H7/+u9/6Lh3333lx9eHr9//iB5eevH7va+82jXUp0qM5GqYogU2QSYwn
hilLHDy8DVCBKBSVwBXNncjysKZfhiigUsopmihmioZr0XMhnmYtyxBFjpWE
RaKnsyhsBrouHUGbygRtPDqXLZCxYF8lSp5UxYdH5YhoLAGFyacKZSKxghtv
FKVkR6kTRWIlg86hkmnBo/MMBu0ZjBEoYp5CIcOb0qk0TMNCQjElKni3ZRYL
/yU47K+YrUmKe+mN53/26Uef/t3Hx7duPH58552Xj8c92VMNxk2f6XJvxslQ
7vN9OVe8qT1ZopZMhU0nlNBIcQoxLfy8LTs5PSlexouQ88kxMqY1Q6uL4VQW
p9qytaN9jTOjrc3OguI8vb/FPtBVV1GUDDKx7mDbsF7Q4rG+4MS62x2woBBh
a7oGwF/eniWOUj154XhxobujvbK6KuPOyYWF+cDSYg/q0t704kzn2KB7cqQF
U39r+UB3/XBfw3CPq6kq21OTO9Xvhj8c8jvaXIVb870Pj5dvbg5sjDRujblb
ypICdZmj3iI8XB9runtzYXezZ2u1c2m2pT9gX57zHl0aXZhqsRcYsJUlaXjY
shDqjy5Oba/03z5aunWwuLM0MNBeg+n6TKDTXYp/0e+vRTyHQoJP9Pf1leHg
bgqPHdOG+qKA3+moti7M9qFGh3ztrTX9PW6Py9ZYm1eQoelsLu/zO9zOgpxs
TamzPLV30rd7OHft+mt/8c3vfvbrtz75VdPukePC0c0Pf/reZ//9O7//t9d/
9IPrb7zQPtOTZDPQIsPE8SyOMoITSeYqgp2dKTpPF5Aw5SlpLBkZxVVQ5Rq+
MkGk0Aml8dzTQZNQIPO0kHRilTRTPDtLz8rRM4GoJo4rVgk4UtGzkXPoRIr5
/Bbd6NVsJrHviLCX6N3E3s7gCckshlDMkCko+iSR1iAUy4JtPTj2cgjztChk
LlFUMjuCFLxlOZVEJpNCGeeprFA6Jxx/mBHOCONKOGKliC1iTcyP/+CvP/rN
f/vshz/57muPr7/56t1vffD61uLAaHPhstt81G56NGB5NGC922udq9R608XV
JoleEBLDCQ4tLpEqTKYUmUzCYITFRPET9ZL4KEaRVY90gPS6MNuDFkakVwgF
7BZhRLfWx6AwmEEHhLYsTnfPjXZUFpqTtdK8NPWA31lTYoEp/fo7L8DXoUXi
vU+fnMDOXb60iKi1vzuLropsQjRWX0sFCv+rq61qoLOmxWkd6alHACdOqUJw
W55offH6/I0L/ZsTTf669IFm6/JQ3fpYw5W1HuQgyOPF9SFofm97JbIYUJwf
b8UbnZUWqyWmsSYLiN65uoKXXbowgYiH7QtTbGsnN7fxSfA18V2ITIS2jq9D
GE5sgPYSS31taXWFrc3r3FybXZofa22u6/A19AU8rY785vKsogRFV0Xe8dLI
YFdd/3CTc6LFeGnRODVYv7B0+8m7P/z1P776nR8uPX4pcPPO/EvffOOz//HB
3/37+5/89sOff/z4rdcXthZTcpOosbQIVQQ5MpwsCaFLwiL4JCqHROOHUETh
p0WXUoSxPCQsqVr4hXsvolkLFchWwXiVEMtBOMo1sKwGlllNj49iCmQchpBz
FlHKH24kD0UlLnyDtwzyxIwgLo6LoIRCHoFopIqWmCI1mRWRquA1RyEhYWGh
9P+1wkOolGcDUNPOkyNIocwwKptM51KYbDqDFE5SG+MBalZB5hvvPf3V7375
T//++x//7Ptfef3+qy+e/NV3vvqVV+9Mttu3O/PvDeQ+Hs55ZdL+dMF52W/1
5ygaLPIsFS1JRo3mU0Q8frQiMi3FGBXJj1ay9VqxSS+uKjNnpMUVFZgQbMEV
pBLuC60N6RVrEK0NrRBrE9Ee6xcMb6+NXVgaho+FhALR5rpCyGlnc+Xx/uKV
gyXgN9jnvn93Hy9GJwUPN65uIJu8/86jO7d2pif8EC4oM2Du9FUCSK8r31OX
29ZUCESHAg5AO9nnvLU78urJ2tPnti6vdi8Pu/YWOh4ezb738uGF5b7V2c5b
VxYPLoyN9bnQ04PJvbsOiKJqSlPwBwE8HAs6/pWLMyODLdhGHty7hCk0897J
RWx0KGyDQBTfF3ziI+HzYHt01RV2djTk5ZhmpvraWusCnU2u+tLWltqDnUVn
qbmtKsedm4Sa8dfZ8xKaPDZrs0070z/25PHwpcsvvfX1n37y9z/7+//+w3/5
97vf+8Hm078MHD535e1vvvXjX3z8z//HR5/89RsfvLW2v5xSkUZWUhgxzHNc
EkUYGsYmkZkkCvfcWUQZMipbwQjlniPzEY0jTou4GSicpDQmeNw/LUGQmyQo
TGQXGhjJUWGxcjJXGEHlUM8iStjFZ3vaqcSADFweGnY4cZ3RMyGlQ6/i1PLE
5MiCYkNBcaLOIMdr8L6w0D8WOZxGVEQ4DY/pEWQ8IIecZ1AiWDQqB9aAzUR/
l0VLJSrxnedPPvnNLz7921/9/t/+8b0P3nz/Ky+/+tJzP/yrb/7kr76+PNi4
1pZ7q9/6/HDuGwu17220vLrctNpg7i/RVSUJs1XUODZJIWBL2DQBPSwzVRMp
pQl5521WQ0pSZIJGZC9JQxZIS4mGwkBI0dnhvrAqsZZXlwazMzQwaRZzLNRv
uNc92OmCHU1NkOea49say9IMCq+zeHEqANkE1ZBKCCZa5+JcL0gYH/Hdur71
wXuPAerm2ihyNF5zcXva21QMPvs6qprr84AZ1O/h7a2Zkeaj7bHlcffVneEP
Xr/64Zs3Djf6lsaarl8cfXJ/B70bJEMk33rlGuDEWxYmfHjvxEAjcdoncj16
/cqMHwJ778Ym9BNA4vNgS4HDhJZiA4FXQaPHFN8X344QUnxrbFkzY4EyW/rE
UEdGirqlodxVU+j3OlZme6ty1a12s9MS31aQtDPS0lBq8njyOmd85WuzB++8
9do3v/3gwas//uEvf/jTTz/9l//x83//v59+8g+L917xr+54xqdf/OpXv//x
T7//1x89ef/14e3xmMx4RjSLIo1gyqgUfiidG8oQhJ9FlCaJiBDCEgiyStPP
SihbTCGEVKAIXvqUlSiyJfPLTKxiI92kIMWIz3O452lM8llEw8PD/0Aphbjy
HfGH2MkZvMhdwotUSHQ6jTldb7UZ6xvzaupzzBa1VCZgMplnL/Q4ey4oOeI8
ocDh5HNnr/pEf0ejX9tZ/cVnH0M//+6f//bf/ue/vvL0pXffff3VJ4+/+71v
/fijbwTPfvcXnQwXvzpjf2vJ+c6a58NLPcFxQdvy+4q1tUZuqpCkEzNTosVq
CV0lCo6BHxfNsaTHFOQbIKcQ0pLCFEBYXppusyZinQJUrEHIJvQzN0tHNEQI
48JUAG3d11CK/o78hTgPVjEPRNFJscbxesLjHR0u428iZ0GKn79/+O7bD195
8frO1iSEGtDOTXaAq7kxL3o9GHt0Zxvg7W0MQx5Hehw9bfbjvcnXXjh47+nN
py9eRp0cL776/AF6PUjGK/EyxKJLW6N4C5IX/lRRjoYwpXACQHdxyv/wuQME
dnwFfB3iSC4+P7jFZ8MWRwRA/BYCuzTfd2VvYai70VWdNxhosJiivA0ljbX5
Pe0OX31hQ7G+pzajLkUx31xya6kn0JDjaczYOZq79f7bf/Wbzz76yc9Prt/9
4Xd+9OtPf/er3/zdb//t//zl//x/fvD7f7v2+lsbN289fOvNn/7u1z/45Kcv
v/vao68/Wb+1W+13Zlfk8VV8tpTFFSNZs7+AKFVMDuGQGFIKlRtytuj8MKaQ
zBIH9wmUZ0U1FMQ4s4SVJnpOfGi8mCQThwWv4OByAZJAICCR4BeDQ3+A2NDQ
82eHaABmoAu+VKmSqdVxmdkme6Wl1pldWZsJRBVKCZ/P53AZp8ViA0IGj8/i
C6C8oRRWCNIWkhfyF50bzpcyozWKKmfl4MTA6++89rf/9Dvw+a//179g+uTN
V7724fuvv/30G9/+5s9//oOvvnZ3q7/6znjFi9OVX1l1f32n/as77W+te++O
VV1ozhgvUxcrz6dKKekqppofopZSVKJwIJqYpCgtS49RsdSxvII8Y6pJZTJG
ehpLsOLAJHCCt0SXhLrCiEKIQFdteRayPJhEry/JTRzvay7KNiDg19oz0d/R
6EEy3nWwNw8hrSizIB1DryDIL71w9a2n92BKCWVbnutGW+/2lfsabRDSwa5a
ONIru5MQwImhpi6fHfXgZOuVRwfvv3Xnhed2X3/p6I2Xjl+4u3P32urJ8TJe
Bke6PN1BUI2/0FSbnZ8RC0cKM4C/szTdic8AG4ycjlSOzQ16DqkEpfAtaAf4
VPim+HiYgt4nj683Vmb5m0oGO2rry9Jd5RmOEvNEb2Nfc9lIc35/jaW3OGmj
rXynv36irdjjND//eO/jf/jb3/7T73/16d985a133nvr3Y//+hef/PpvPvv9
P33yL//6y3/515//4z/+5He//cnvPvvZ3/7NTz77xfd/+dOn3//g5usPL9w+
vPHi3QdPHg1MDaVmpEB8wKQghgv/CUTJglDY0TDeeXYk/SyfQThFEcHj7PLg
PvzWCmNnZUJHkdKbK7InMUyqUKU4jEIhQQBDQ0N5PN65c+e+DFFicBsenymV
CaGiWTnJZRXpVY6MwlKT0aSCinI4rNNLoogihhQTiFnYTKJ1MnmsAB9JrOKY
c4xza+NvfvXJ2x/8v429B1RT6dv1zYwz9kLvTZCOFEFEEBEUbCBSBARBUFGp
imJBURQBe1ekCihKkd57771DEpIQkpBCxzblP898m8n7zuv7rPV838e61r3u
nJy0dX5n72ufcxIK80pzyYwx6iSFu8CZ/jwFOU3PTatrrs8syq9sahwc7qMT
O16FnHgX4hTvvzvnpmPZPY/y+55F4ceW/nFSsO2z49tO6AvuUxUwU9qwWZhP
eg2fpCCfnPQqdQ0p8916EMmNsuvQjwnx84FS+CD6NFghjBtkoluDGGKDQiGx
3OHQzu06G2HxZoZqGgpCsHjgCkS1VcXh49Ao20Mm0GEwgOYBSsU7DA62kVwq
SlOhbFgHN++HB8K1XexMHA9tRy+KNhK9qN8pm2sXPW7d8PH3cTrpYX03PPDl
sxtF+YkpyU9SEh9lvHtcnp9QnB0DUCGn6EXRnYJGUHrS1XK3sbL9QQO7A1sd
rLZBZm8Fn8aOAErRVyMP4p0AReg5QIWEYr/DcuxBvDeJvS/I3xU9C+9L2W6H
jHfpyloYKIJPv2MW10/siTh9IPy4RXyQa1TQ0ds+B8+4GeXlvqIxGZNczsQk
s6GluaistKWjfZA4SmFMUKdYzIWZycXZiYXp8Tkubg5PUDpJwxX97WlVxfE5
6e/yMksbalp6u3ILCx69eGLnYQNnB5wISkIb+YUVBNZLr1krsRI8/Fs/Iioq
t/q07Rafw5vP2agGHlbxtJC1Nlo6MiwtuU5cXBxYQkuXLVv2/4Io7wdtREQF
lJU38Yx+zz5to50qymriiFTIUAKCq/8tIeG1IqLrxcT5xaX4BWXWLhfgU9SS
2e+w+9GbyLLGgqbemtKGgoy89MaOBlg8c5oxtcjlzLMR6rOLsps72z8VFZY3
Ng0Rhzn0karUp6/OW8UE7Mm95VL16FTt0zNLWnrPrfKuW/rFvc/dtjrriZvK
/KwnwackxCctwCchukxabr2uvqK6iqi8zFpjQxUYPeZ7zHRAI3QPrIIlqBCW
YPtCZqE56EV36C1dkQItRUcKLQWoiE6bZNaB59g3kQADChz9Ohw2Cj4RltFF
ID3hXtguEIXLo9cNu+Fz5/rpEy4WoAusentaIZ7D94Ho3cig69fOBl30vBN2
/v69yx9SXhQVvnt0//Lrx1dh7gASgQh19bwrBBNLkJ7QKiAuAVG0DRix8PmD
K0AR/TD0EyiiK8ZOBzKxEDsdFN7+sCkKex80H5/x8P5tLvu3ejnscj1gcGC7
kommuKOF7hlHc5d9OuHeB2OvHnvtb//u6vHYK64RftZ+x3cU5b2aYNDoHCZ9
lt0x2pdbU1rcUNlDHCTQSSTmGG2KTp9hjk8xJ+bYtBnOKIsBOW0bJxa0Nnws
K4pJ+1BSV9vc090zMNg10FPaXPQk/iFAVTdUEZBb/zM/H3QVzeqPcelHRIVl
Vvq7GAUdMwo9uTPSZ/f1k6YBbqbuDsZ7TDTUleT41/wqKrR++TK+lSuWLV/+
C7ISEF2xetmKVb/wauVqdKjL16xbalkV5DdqaysZGqsamyrrbZfbqCS8Xnj1
SjSZwsv5hVbyC61GCYutF5VYLyr9z/UwKqKnAj1S8pKq2su6CW09xPb2oabW
3ga4CJ3N4CzOMeenmbMc1vRkd3dzeXl+e2/3p8KCisa6YdLQ5Hj/FKnx8fnD
aWFu+RGudS/Otr32b33p+095Vz1wK3vgHua07eCmFTtkftKV+ElRmE9SaJmo
8IpNm8T51/8sKb522U98lrv1d+/She/vt9TDRrzof9zdGYZ72N153wW/Y3tM
NTWUhbZtkdu8SURTUVhG+Fc9dSmHgzugqHKiK6CiYABI+PscBeHJbx8nxj+E
6oIBIApp3W+5FT6LgA9mPN2tI275PwwPvODrfPncsbu3/DGBNd8J8Y687R98
5ezVy2cw3g49Hxl+6W3849cvw4F3xE3fqKchqMeRF988uxF84fj1IE8sRNv5
CK14iLefl52jzQ4HayMsCbt+FuCh8UBKgtHjDQBIvD28pTOnHaytjCwt9Iy2
KWPfwdt2PLzL2lLfeZ/uzQCnfQbyzns0HXepuZirex3U97be+sT/UEroiZjz
DglBzjFBTuE++wOOGZZkP6eOE6kMysQMs4s8kFtXlllV1EEcGqaPMbn0qWkW
Z2pynMMgsOmkKTZ5kkmYoHXTiTXD3VWDnRk15Z8qyus7u3r6R7r7BwYYg+2k
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
T1Z6g+SGVYoS/IIr+Uz0VMwM1XYaKO411bTas9SCwvohrRe8XXhnmvbu1Ib1
L6Xj7WoqGwWO2Jjqa8mqKgi6O+87e8LOzmrHDgNllMk2FSW5DcZbldQ3CZsZ
a2Bl24PGLg573Jz2ohGy2b/9pJt1+M0AMMb7biZQtNy9hXedFdwfrPKu8+Qd
WQKEYA/uH+jrGhrs7eFywOHQTl7duuZz/OhSm8oj38nB7NhRSw/3/c6OZlaW
Or7H994873jcZqutiYKlluDhreLX3Xc98bVO8LHOCXH7dO1oRohzTphr8UPP
okfuuRGueWGni+/65oR5vb92LPHqUQhpzGXHRxec2loquNzxL1/n5r8uMGdn
+imU4sampKLS5yVwuO7ybkJ0TfOdmtp3kJHq9qC3mXdpE4djE+K6BqvGaH10
1hCN1k8b65sg1g/1QEiBZWZN2du8TxBJsFra1tAy0Dc8MQ44gShzYQ4FXLtI
pA4aRUJSWEpaVFZOQn6jlLqGkp6+1k7T7ZaWO9yd9gT6OF0NdL8U4Hre2/Hk
sf2H9xuYG6uabtsEfzfQksKIOQTniLWRp8u+c4Gn/G6eD8tI9Hr7ZseNUOvH
MftvR3u/fN9J7eyfHe3+Qm2aH3tRldnIpnSyJsbmZiChYxPjw2NESCiJRp2c
5s5+WZz+vjA0RW0l9EH26QsLSaWlwUmJF1KSL2Tn3K7tO/02y+nu84fZhVVD
Q/0UIp07MbU4xfr2eW5+fLQptfyNf+tbv853FzrSQzo/hbWnhHZ8uNX67kbj
2+DKqMDq6Ivlr869v+V4++Rmr/1iNtvWWG5ZZ6CyWkXqVznRXxXE10oJrEBJ
bPhVWVpQT01OY6OYrorMITNDPSXJ3VvV3Q9bWBpuPm5riXGHlqKhuhy6U+s9
Ww+a6x0w2wKl1VIShfwmvIqw22+E4G+7b+mn545YmUB+TfSVoL1uDha8JS62
5gAey51tdl0574H0BAHkXRgPbYSEYgI4obdYDv1EbjIxUoNQo5EAnzcvnb56
zgNPZWO5zWq3PvYmbw/b6xdOnj/reuTQzh1bFTSUNhxz3HHMycjUSHrfTiUL
TVUjOfGdCsJWm8Wdt4kH2Wk+8TONv3QgNuBgXsSJ3HBPjBVP/aqeB5Q99im6
d6bwrk9+xNmMGx7vLx99d8kZzcDbQIeoC8715VnzXMrCHH12jsWeYWGTtfX3
fSovSixJzW+pfv7h/emwiIcFFfcaux3eZe54FvtklHmztvNl50Dd7ELrFKuf
Q+sdHyJMjkFFG0f6kJVqB7o+VZeC0vfFufkNVaWNtXVdbb1jo2QOkzbDoc9N
wfSB6+gki/fvY3gXKguLbBAVExCXEJKU5FdR2KCvLW1soIgyMVQy2qqgqymh
qiSopiGqrCqkqi6iqSWxc5eG/ZFd5wKP+Z1zD753+/zD8OT2etvIW/YPHwS+
z7iRXpze2DM1TpmgkWHNbdSx1/nZOS1tvXROD+icZBDHKW09XfB6GovJnZ+d
//Zl5rdF+vfpya+zrM9z2E+TioqfFxX5xMe4xcS4JWcefZ1od+fB3Yzs+pHR
QTJxkkmbnmED5s9fWYv05qqkqy3JQW3vgzo+XutIuwVEm5Oug8+mxGt1cZdr
Yy+h8h6diLu0J8xN59whpTP7VQ7oCplpCOvJrlMWXr5RaLmcwC9S6/iUxddI
r/8Jo7r0BmMNWT1F0QNGm0/YWVhsVUUdszLFuEl0FY86UIoABSY1FYWBypsn
oWAPMgvtBY1n3G14/3cDS9yPWP7zWxNans77ef/E5MTRA94n7MDh0jmgU/aY
oDVFM4CuEqyieIqK4p15Rxtw4pjVjSAvIHrRx/XWFcQzUwg7nvmyv/vlAE9P
lwOmhkq6GiJ7dm4yNZLRVFmlp7Zedd1yI1khu61KXhZaZy1UHpwxS7h6KPHS
wY/XnMBk+RPf2leBaNfRt2NS+TSg9GFAyQN/qGjadfcfES3P/wBEP0NB51ic
WTaVSe8ZHSmsrX5XnlnV31bR3ZnV1NYy/SV5lHr8Q9aO+8+PvHkfVFB5/sOn
66lpZSNDA2waohAQ7aQSStobeYhikl5ZDLvPrCpp7O0EovnV5QNUEuyVwp2k
TrGoHDaHPfvDZcnLeP8ZYen6T/6VQoJ84mK/ysmuVVTg36wpqa0lrakhoawi
IqchsnGzmKq+rLaxksl+vZPnjvpe8fQN8XuQlhFTUVnDmvSNfh0YG1XHGO9i
TZLok78R2L+xPzNYs10U5sucgsy2vr6p3wZY8+Czs78XBT7RhYLPz79/n//9
y9R/FtlfZzmLc5zPX/IampqZrIvJifvDw2yjY+2evrCPiIwqLWseHSWOkTg0
6jSLMTHDml9kLrL6Bqvimj7cbEm51pZytQ3j+5tgEnC2JIegGhKuQlFrYy7k
RTjGBex55LE90t34/H5NDyPFQ2qi5gpCqiLLlQSXya7hw0Rbep2OzHo10RUY
lUV+3bpJWE185XZVcT0FQXvzLT5H9xupS0E5eefrjXQVAJ6eutQpV6vTbocw
379Ll7ccEzAMFVWTF0DaQuwCtyATohf7POxe6PmbV87EvonkZSVYObLSs8ch
L5+FonATsonlWMg7RgrTh6HjVY7Z73E4uAOoQ5AB/9HDZqhAr6NnXK13bVU0
0pZSl1+hIvOzqtzP2huXG0qvt9Xf5GWh47Nvc/CRra/89qVcs/sQbFd4z6vy
mX/pI++al+cRKoFo3esLQLT4vl/RPd+sWyc/Bh/7EdG89Hgg+u0Le24evRWX
zmENUymVrc1xeSkFjZX1/X0dlImGCdbFd2mWkfdMw+4duvskOLswtqU9c6C/
gUwcZNGGaQQik4z8nlNfiWgMOQWohS112XUVObXlDT0dY2xGy0BPTUdLN3GY
RymNywGiMPoff6VZUGjdP79vs1ZIZAXvH8VuVBSRlReUVxCWkRMQkV7Lrywg
rC4it1VexUTVL8w/PDbiScrTbjYpJCXzeWlNHWOyfHS0rL+zlzbSSeziTE1+
Z35mMecza5ouxsSfiY5/1ND6kcwom2APkQg1TQ0jZBL60pnPC+Dz65+/L/zx
deG/vv72939YM1OkcToyY1J1bVBSYnRP57nczNNv48B/BWEE2ZBEIrGp4zNM
+tzvC9//mJvjjnxmttemRYLS1vdXWpMvA0iev4NPOD60tPPj7dbka61v/Arv
uKReOpxy0e7xsZ0Xdqmc1JV005PZqbjeSG61ruhPGPUlftEW5tssyLdDcQM0
VlXoZ4xaEis3i68wUhI2URXbq68EnwWEEE/oGDjZKL4KLStcnkcsFvKOAyD+
b1GTNN+ujn7AeIsitBfS5+G0L/Ds0SDfY+5OexF5IsIC95jpINeDRmhm8tvH
r1/cBqW8r67wWlPeBfy+Xkd4iOLZ0GOgVQCcMH1TPSV0IPuNtVQkV6lJr1KT
+VVNZpnhZgFzPVFrLQk/q603XHfdcDZ+fnZfUpBtbph76YPTcHb4O1y+5OFZ
UAo+saT04ZLL5945DQkFnD8i+ul9FBD97RsXiM4sTjOnOIQJWl1Xx9v81Lza
so6hQdr0bA+L87Ks/MqndJ93yc+r6/LIlK4vn6vHiISZqZFJWt/YMJFJ7WdS
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
rzFvSw/jHRrFQl53yivegdOW1FtN72+0xF3FVit95A3wiu6fhrzw5JQHISgF
sUAUmxJdHyrjpisWYkSbB7CxHCsknLeBiqLBS7vuXvLAv+7VlZ53Ec0xIU2x
SxcSlL7wz7l/CkTx5BRV/uJccbh3xvXjsQG2H24ef+Zvfd5GC4je8doNMsEk
UhWy1Y+Igs9ID+OHXrveXrWHhKaFueF58MzgE4UJOIR+gk8ek6AUI09UMfLe
Q2a4Bz4jzwV4WooPgg/74rzDQG8HhTza1duGEMH9Ns1DlPn7TM8stW+OXkMe
gEcnVVeGxMaXE8YKB0aTu7r3fngdPdLNoc8NkCgeKU9TiW0zHO6PiLYSBpau
x+tuqR3o6ySycsnjZ9PfX8/5VNLTNzIx2TvJ6J5hjU1NurxI3Hc3evfD96YP
P2wJeb3vUfKtirakfnIZdaJ7YniQ2V/PpXll5jtl5PvnZ9XM0WMrai98+hBH
7KH8/V+sqSVEZ2enWV/+O6JoRMmMsQHKcCOZeD/tfcU4IbGlJrmucpDLJrM4
3Nm5HxGFxeOD41F07lLia+vp6h7sh5z+iCh1boLLQX6fzupo885Ns0lPOpGb
e6O63u7Ni6NvXr1saaD8/Tfzz9++/ufrn99nEenZHAKL3FibFlmfeKk5KXAw
J6w3JxyGvnQItPgp5BQjKMWSpV70Hy3lnWyCtIJPoAshRUeKKIGtBkTBGy96
QGQAHkDFEmzNGP8DYBKUorA1eStgy+ImknJTzGU8Fir67KTl0xMWGJGRoaVF
95auKSp55AdEGxKuQku7UsNAC+ZNidea314HotVPL2bc9Ey95QlEg+y3wOhv
nzRD8IeQAks/C+UfEb13wgSIPjpt9v6GMyQUUgwawTxGsAotBYS862pAJhQb
yyGhGLEQdg8JRTz8cOMoDIJ3KgofAROACr94FmBHGh0Aom2dTdhMM7/Pcb5N
M75w2P+ZZ//X4vAMvXWCUEsazu3qeJj+6dGn7N65L+XMKbPkl+dKMgnj7JrB
oYOx4UnkDjJl/EdEO8kjtQNd9SO9QLS6fbhwYjy0vuxkfFTx4HDXGC2lti4y
42NpW8P/A5ZF+/g=
"], "Byte", ColorSpace -> "RGB", Interleaving -> True];


(* ::Subsubsubsection::Closed:: *)
(*$DStoutemyerImage:*)


$DStoutemyerImage = Image[CompressedData["
1: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
zCU4UoPBMDpxdCSNdOuaoBlv+PaWug0C8M+XyL9lGO176G3RE8HbALNDT18F
mIWEfckbr/oq4SzAdFfsgEPnyHDXdPS/A8Asw5TeRuvFyYoE3SdoyXf9pPsH
fO9l4lF/alX/fNf4y33zT+06HCnsKFruKvnq9Vnx/KhwdojI6OCuen5XO35o
nH9unn1pXf54e/Hj7RXiH+9u/nh3hfZ6Ybdys1PLQ3tImsVjvORz4waxUTip
5Q4YpM+/NHMP9Uuw3SqdoL2eP6zljqr5o/zNwc3NEVUud5zPn0CFwmm5fFGp
XNZq141GrtkEzGA7B7CZeZuPbwoMow7T8vs4LNxqsgAT/9SqU4AfOia0v3Zt
7mn04zcDmEXxWxhm4fnGl3xLiW4/TRujBbbdce/P7UvTd78L4FffyOsugmLM
AlxnfrHXAGa5pRhTC0Em7pYKD5XCT43Kn1o16EcYiVKulb9CrF2d5Y72Lve2
rva3rw92oKuD7Oc6QRfE/un++i+fc//+Y+E/fir+zz+WEP/tSx7tjSK43QLG
SJh4cFs+bVfOEEFp9WYfEVQz9J6DXtpYud4rX+2iYt9c7V5eEl1c7EA0v7ra
y+UO8/mjYvGkXD6rVi9qtcs6/DZgrpZu6z8fnnRUjQIMkmEeqH+A4KJqxFA8
Xhyns0NZhl8Z/bj93mG0rqLURVcXjV+tw/Ql9UaZjtNSp/qi2N3iGH5NbeYD
wlkKQoJFco56ugzROT2y8w7iboCZMkEqBV6Lo5XJ2cYXfujXrsd1nZtuWy+P
sdObfYhngCWsN1o41VZrrUrlvlz8UslBn8s398Wr29x54+qkfnmMpHZxVDrZ
g6rnh8grZwf5k+2H2tnnxslPt+d/vr/69y+5//lT4X/9sfh//6mEBELjfe3o
trx/Vz0kSeWwXtivMaqiIOeA6E7pehuCx0AjFotXW4XLTQhJ6XoXAF9f7lxd
bF+cbZ6fbkBIoLOTLM2xKne9VyocVUontfJlBfamXIFzIOwwogDf3d0RG8yg
i/ILjNEVrNSqtWq5VavS+fb4TNh7oGj+XI/W65v1BsD0C+qk8W2AX3zJbwjw
o8nqcL+U2867Kv7OADP3lL0MMHvX8G29BnTr5VKtVKyX8p+rRaB7V7hsXp+C
W7AKUCG0tG7O0Ijkx2r+p1rhoXTdujlulwmZlOE/3V3+5eH63z7fUP3Hj3ks
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
m+P9nWWcevrtEt0Krd/MLXeLm8v1nbXW1lJ9rVdcaCZYiuhml1qJhQrqiFAn
66vF7bWIrRIyV7xsOrho1xQd6rKDAUzgte3CCK2DjXT1XGzQgMZXFzxmHK+b
VYxSvaxikJd0c0XtLAn9qlFRFxYq4GuhrtPQd5so8ZLHboRdO3HfbsJP7UE6
BPGHe8kAtJ8KQtTfi/vBMI02iAHmEtPLhMTrs6+6LdC614aHiBA8TtzURsgt
FnheCzhX/Y4VfBO/gzrQkse66Lb03ea2ywg1HPo6fkVe81Lcs54JrqYDy5nA
Sj7UjjkzTnXaqa5F7Y2kqxi0J6z6kE7rlsvcSnnSbm2k4gulAtSvzKOOW2xV
6vPpYjbeqhaW+o2VxVazUY5G/PVa8eL8xaePb/Cn/9//669//cuXD+9fff70
FgAAAxJRIY4KPGD8VwD+44xxLRgz/fzpW8K7/fLje3rPxDMe/vLlHfSXnz/8
9ZePH9+dHu6vIfx3m/MAeLFbWumV1herABiCCa925xeaKZjwSjvbr8V6pWi3
GGpn/LW4oxK0Ff3GosuQt6vnbYzhisNQdxnYchoReyAWLfpsHNVrQQdw1kxK
0AtcOb3o4AjobVjUgB9fzhYquE1ieik5AFQQ+ywTBqLoHOWih9kIEUsw4ykS
PdxPBLgJiwGmJEyxgYbUSCAW3BLAIBkPEYChr9KLr72GLqdXrGWvDQAvuMw9
l6njMLScBtBbtaI6MC7G3GvpAABey4eXsoF6yAqA8159K+luptzFgCXvsqes
lqBG7VUqYiZjJRxsZ1PtXHqxVtpcaEPNUjaXDJdyCdjvYq/e7dQz6Rh8+GB/
6+2bc/zd//N/sqtvADB4BgAcBsJDXND9VwDG+f1K3wT4Z9Hn5TeGweovH27q
55/ff/ny9scf36CF6+IhWjz86fObH9+/hH7+9ObTu9MXzzYAcKuW69Vzy53S
xlINggkvtPKL7QI6y2129fFKK9+rxoX9S8PtdLAWd817LXm3IW/T52yaglVX
cuhrLgsrqyFw6zaxOVwfG5JChx72YT42bd2krBrkFb2sDICv6IUVg2oyXsKe
hhqAPdFLsWFboBfQPs/HwC30ohBHn3AlbnFQDDA5sDhFkAhXPIUXAHK09Eoa
VaN0wQYiIh4Snvqqbhovh5br0n6dJgK46dCD3rJZVXPq+xHnasq/nPT14u5O
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
DH5VBb/Gjc8pb4Tc7K9vta1arGg37I5tl3vH7YF2PV60QHrTAcId6za7IOum
E7JsuayAk4Q+PaQOhBdAGw7zutPcNxuWbGYOLXiGABsecoDRChaKIzhupUXs
XLT6ly+NIONdshn6Zm3PpF20mpas1mWbbdFi6ZlNHaOhazKi07WamWwCvRZT
02SoG3RVnaaiU8KKmfH+HmDQWzFpxACnNLMxxXRSNpuYk8ZmJSHpNBh2TY46
xofN44P6sadOxXTIqIQDh6walHKJgDUZsMN+Q24rGI4HXMmILx0LAODqfJoA
bjaLnU6l16stLsKEeyji9vYZwAAGoiBB/HBi+dgXH2T7qm6OQvyjAF/S++YV
vRkOsDCjcQnw2fnhxemzw/0NODDohWgiY024Zd7Wcne11+hUC6C3mIykQ96I
0wp0IyYdKWrSxE3atEmbM+nyJk3BpALAdWF/M7a0wC2syL1xmTzPDHR1BoVk
Ans96Fp1ONZszlWrA0Jn3e5Cu2Kx05Fls23JZF00WkhLZvOiSbdk0S1b9at2
I2nFZoDWHCZ+hB9cYZgxgMkngS54W7AYIbEVQ3gBXrZkMy7b2UKdawKutAIN
0EJdo7pjULX1ypZO2dbpOnpj12CCWnpDU6dH2zGa2iZzywhuTQ2jsW4w1PT6
ilZb0ao5wIgQaFmWsBmALlQ1a/H7JIDRAmDE4PishAAOz85wgOHAhvEBu2wS
KcJrkAfMKsTguN8S91lRdEe8dgAMBwa92USomI3XS9lmrdBuFNvtMhy436/D
gTc2Fra3lwlgoIsi7vzimGblCOCrayJe/zZr9m0T/irA/ONAlv73APz69csr
gGktxOWytPcfXtH1cefnhwAY9osYDLFdXITllHTbR1Rw7Uoe4QHpN+F3hezm
K3SZYkZN0vg7gMtmTV3Y72vx6rKIm+hSZhBfXsR3Ymc787vBsACt3Yl2yWoH
qIBhwWDuGc19vQl49HTGqyPGlk7d1qu6Rg3cr28GUTp0oGWLgWvJrOcCq+TA
EDrguWvUQWTFEA6CahzvmfQ4vmDR960Cq6i2LFqutlEFNYzKukFBS38r2rmK
RlZRKmpqVUOrgaoaLVTX6ZsG42/c6nVAt6TVlNSaokZd1qmBLqAltZ3mpt1Y
sWgZwFadGOC0di6lnI3MTMWkMwgSYge2Tg4bJwZtcxNOtcSlnfWYFCGXPuYz
x7wW1G7ID2A4FfaC3nwqgvzQqhY69SJf/bK80MSffmdzCUUcAD4+OSR6EYb5
Fcqc2H8UYL4c4sNHPqf28o8KOiEAX6IriEh+9UoIEm9eXQ1KXNCn7MXxweGz
nb3dja3Nla31pY3VhbXF7nKvtd7vLLXq/Wq5U5qvppMpvzdkt4atJnYRN+0J
o2ebEqSArs1YspsvM7BVW3XoOh5z32/r+S2o4xa9VtIC3S9DpK7T2LTivKmG
WjZdz2Va8tiX7LZFm33RYuuZGbdtg7Gl1cPHGmptTa2pKdUVpaqqUKFFv6pS
l1SKkkpWUyvqGmVDq+KqqxUNjbKphTFqOgYgrV80gWTjgtncNughRNO+xdzS
65o6LZ3lhchqwUkfz6LFU/i2Tb2yISzrRVvVysvquaJ6tqSZK6ilUF47C+U0
0qwaddZMRjWTVUhySmleNYtORibNKeZKWlXNqAO3VQNCr7FiNKIt6fVlrWFe
qy0aNaAUxNZsehLj1sq8F4aQ1cvBLdIvKjjYb1IhBb0xiSQqlQQl076pCecE
AB6xToyYJ0f0k0Mm6bhbJ/OaVW6TMmDXJYL2bMyXDHmQHwDwfCpSn0/Dkbq1
eZxY6ZrHpS5bvoXQuLe5jHL+YH8bAF+8xNn5BURLK4HKPwrwTZjFAP/xKMQ1
gIlhavEUfwGQFgB+dni0ywFeX+mvLnQA8FqvvdisiQEOWy1hizFi0BO9UFyv
BsA5q6FgNwHgglVTMKuLNjW7OZHPwu4nC3mBsbnvNneY2bJbStF9edDCq2tI
HWx/YEWV3Y1I33WaOxZ2tsU5F66Fky/sq6HVMStTqcsqRm9RoSzJFfNyBbV5
+Rw0r5AVlXJSWSEvyWVomRkqlU2NBqf1rsGwYDT2TSawCjIhEAuBXlgliMVx
Qhp9PIsWT1VVynnFbEk1C27nVdKcfDotm4SS8smEbCIum4jKJ2IKtkgsopgI
y8ehpGIqrZzOKKVphSQpQ2SdzqpkBa2yoFXP6zRFnQ7olvTGog706vNaTd7A
QGXlg1VbtumgklAL40jeqMwZFMx4NbMAmEk5KwbYPz3pmhwjgE0Tw7qJQaNk
zKGb85iUToPca9PEA7ZCMswuUg55AHA+EarkEmC4Ucy0yjlgjAp9uVNDUMTZ
FmX77sbS/t5vEYKWpdF5/xrA4uU9fyzxlMffAzDPD2KAITrOxyhw5OXLc5wg
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
hgOT9WJKNAa5FGVsaiKzOD/U25lYhBn3TU2OAGAQ+0aA6SjKnwlwjt5fBeBf
sRuNdkS8fpHujaJtt1tKppm+X6YfmJR0VA++emIz9ELGWjoWi0wi8TqMxXaD
pgLta6eJ/hVAr9tUjAr124YKPxhGSa5G+ez15b72uoqe5jB14DKvFU4LwX4H
OhsHu5oA9khvK56tq/CBXoANWx7pbhlta0xPjOCbvS9cCSbBM1yxzm2fbGuK
MWlhurMVnjnUEIaFzvV0RAf65nq6oEhvN9pZLUE/ImuFxdRRXjre2txTXTnc
WD/V0dbk99Z7XH3h6sX+PqtYZOBxfRo12mujjQ0rkxPZudmJlub+mur2ULCj
NDRUVzvd3jbZis9QDfttraiAmkpL26uqhlpahtvb+5qaWioru+rqGivKw8FA
Z33dUEd7X1tLd3NDVakXzTc7EGX60PB789oMaNmh7YZGXMBu8lr0dKkjslKM
RmFXq4wKmc9sTMxMpeZnB7rbo5Gp0ZF+ADw1/SOAZ2fGYchzs5MQogXKyNzU
fGR6YX4mujALoZITHi5G52KLkZv05gB+B8M/CfDaeopeHc7BmbtknNt+C903
AnyL4Td2oL3eC/EjepleiNcBjjMAJ2OzAHg9g9w0jWRrUEv1KknIbQXANDzQ
70RU6PT+sFxAiyxBMwYqAJhMNdxQ6TRpQm4zUgTqgBb0gmGQPDnUhRLJAQCj
gu3DXc1DrfWJ8aHoQM9Ye9NCf/dwS32D11nvd421NGBLP7JrWyNInuxqxZZI
b+d8X8/iYP9Cf+9ke+tQQx2IbfR5yKLMTjtFd7a7E0+1lQabA76BunBsoD+o
LbFLJRUmY53TAVaTw0PpsdGBcA0EetuCAVAd6e4CwIP1tR2VVZ01NW2VlQ3B
INQVDg+0tAy1tfU3N/c2NoLeUqejtaaaAtzZWFdXVea2GawGDRh+eQ3OZkAF
7TvQS7opDMX2EhXQtajlZpXMopCbZNJylyM5Ox2fnRro7cDJND4xNDE5PDn1
I4YBMPTLAKZh+OeY8E8CvL6xBN3iMwfwLbbfDXCuN/j1C3A/vxvtbQCn4nMQ
HHgpNtfeUK1ViDRSPhmLYtOXOg3lblOFx4ySViq9Fqg25IRQwcZw0NFc5Se3
I1XjT6cNuK21lcHutoaJ4d6+zubejiaUqKOC7c11lXRLf0dTf0vD4uhQfGx4
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
C8B8R3MwjjaYAJMT1r3zMAJstND8WRz2Px9zji0=
"], "Byte", ColorSpace -> "RGB", Interleaving -> True];


$DStoutemyerImage = Image[Image[CompressedData["
1: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
9sC0fWhDf6NRRbHpWW6bcNItn59Qr84aNxaGtlc9eztAz3QhEHhYrPyKkQ6t
tL5A+suwn3cDA8F9wP0Bn8+/u7+/vr8zu785vL9h2tu0Ag409teNe2uDu2uD
e+uGvY2B/U3d/qbWt6nxb2kD27rgzkBw3xj0m4MBSzBgDQZsQb894HP6doZ3
101ri+rZ6S4AaZerZcjKNOlIRg3RqqcMGxkuC8tpbR6yUC1mkslEMBkbzCaM
1YIZHsZ7PMSJiabpafLMNH16ijYx3jQ6ih8Zwblc2OFhrNmM1Ghq+voqFYqq
rq7KdlmZRFraLi3rklX2d8K0PWidAm/op9gGWG6rcNIl9473L88MbCzadjdG
fHszAf/CYTZm8ysE7ESl9QXSX4Y9ihuB4I4vsL3n29rd39zZXTvI/W6Mbi8b
thb6N+dVG97+jbm+jVnF+mzP+lz3hrd7c6F7a7lne6VnZ6Vnd1XhW+/zb6r8
21r/7oB/z+DfGwSWvl3D/pZpd924taRf9fZ7pzonxyWjIwK3g+uwsobNzU4b
x2Xjuq0ch4lh1hMHNFitGqFW1WlUVTpNlWEAajLDhobhTjfK42kY8eBHDpY4
jwfrdmMcDqzVitTpAKTLurqK29sLROI8oSivTZQvExcr2iuVHXXKTqSqB6fv
I5k1zS6zYMIhmx1RLE4BIsS6veHx7U8HDrq0a4dy+iuO0jtHA2B+yVT/8pD+
ovrIp8cw+w/Lypt+/9re3vL29sLG5vza+szqyujqgnV1undlXLo40jbvFs67
BPPOVq+TO+/iLrh5i2OtKzOiVa94zSvZmG/fXpLvrnTvrip311Q76+qdddXO
Wt/2imJjUbHm7V2d7Vue7l2Y6pyfbPdOSuYmJbMT0umJ9qlx6fhI24idZx+k
6vvQffKarvbSDmm+rB0ik4E6OsCdPdm96jy1vnhgoMJkhNqssGE7wuFAAj48
jLJY6rXa6p4egGeISJQhEGYKBFlCIUQszO0QFXWKyzrbq7pkdT3tKFUnwahi
2A08j0U0OSyfG1WtzJm3Nz0+30wA6PYeBOovT9yeGIvif3ww7S9LUT86ql9l
pEPzzKEDlXcCgfX9/YXt7ZmNtfHV5ZHlFc/Ssmt5aWhl3rA607MyIVkcFSy4
W+ZdnHkXa8HdvOBpXhxhLY1zVmZaV2b5S9MtS1O85cmW5Sn+8rR4eVq6NN2+
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
M+r+n0WGfePBvW9E3P1m9N2/SAr/q4zIv4fEfTc38Qf5yT8qSnupNPNVaN47
2MqzhNpLxLqrjdCr2IrL6LJLAM+osktAoG6su0XF3WeTYlqpiVI2WCGp0igw
Ri1p2MadmJAtLmm3dj37gVl/YA7wPf/Mrn9mxz+341/aD2z6A3uBJxfpnqhv
T1QD/Y+n8vaelA95Yvfw2bXF00Wc07t6wsOQ7uGj0szRPBf/42/3RP9siaBP
QfLx5zqQHPvL21vjK4vm6dFet01oMdAMapyuF6btqtTIS9XyYk1nkbanSN9X
bOwvG1JXOzV1Li1suL/G1Fmql+SrhJDe1sxObqqck9LdkqZsA+l7Csyqcru2
xqWHjxqQU2as105YdDYtOIjjRqRBXtjOiKfWXsUUfIjIfheV835jyTlC2YWG
4nOovA9hWW/XpL9elfFqVear1aDX6rLfRuV9hMk9g4R8AAOQTn+jIvX1yqQ3
qhLfqEp+rTL9pQrwv5aB/6k4/W8Lkr6dG/ttSMxfZsX+r/TY/z8t5lspUX+Z
FPmthIi/iAv/89iwP4+59xfxYX+ZGv5tUOTf58V9vyjpRyUpPy5L+2lF5it1
OW/hy89Sai/T4Neo8OukuuvE2uuAIiLW3myC3aaiwpqJkVxKTAslXshIk/Ly
u9oq++RwvarRPsSZmOpcWTNv73p298Z2dsfWdzyr256V7ZHVncmN3fmd/dX9
wHbg57A9bUD7M5B+Imknkh4nknin9/bsuuTuU3b72NaQJN6jZx5JkeOhsHu/
6OGXN8/96NIT2Ar4V/d2ZjaWh71TaqddZDTQNGpsf2+dqrNCIy8BNMZgd6mx
t8zcX2HRVNsHakeMiNFBpFNTb+muVgvyeliZnYyUDnqSrDlJxk7u4KR0tab3
SyADXYXW/iqnHjY6iJgEArUZPW1CASrF2lum4KcImsJodZcIZWfwxR82Fn/U
VH4W8IaiD1E5b9emv1yV8lJ16k9rMl6uA71Wn/0OJu8MNu9jDPh9RPrbNUmv
V8a/XhP/NjThHWjSmzUpP6tM+35F+j+Wp/9jWdo/lSb/c0nSPxen/GN+MhCH
/y4z+m/To/4mLfJvUh/8dWrEX6c9+JusyL/Li/nHkoTvVqb+R3U68Bav1GS8
WpP5Sj3kTULhR/TKi+z6G1zMXU7DPU5jGJcQwSNG88kJAloSn5nYykjgkmNZ
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
iPSQiPRaFxe8DRt/iJKmlksyoZKs8CmmyUmnEhMMkfHAqzkGDSGku1PIfllZ
gQUFodXV0Q0NcYCVlobhcE4BAfq6ujJQqGFLS/Hw8JOpqT8i/f439ztvv/tq
/pEzBRH2DNITv+mTX5Cep5GvDXgnTnCZ73iemcYPBgGeAZJpXxYgPZta4SP9
S5T6ywctDFd/Gf8iRX7XIQsTj/P9q0Bg+JnFHP/0/tE/d1tLc+OsjFWM9WSx
KOfTLUl/38ofeFrz5knts/uVty/lnWvDNhaFFxM9spLBFLRFHs66lASqyQLX
ZttUUszzcTrYuKMxITv9vdY5OS23thU1tBJSNxY8oS+goCuoqCWiprlMW3P1
Se2NxgZ/WVnshoL2O0FknCGHHUCHQBYHThns0NPerKO2SVtto47mBm2t9Vpa
azU0V6trrADAVlUR0VARPqkuYqghYqAuaKIhCNYRcjUUDzBfHWe/IzNIoQll
eqvA+3V99FgL6nN72vc27FQb9kdH2pcuzEh3/P3qgOYUc4Lf8SDzrTaKyzT3
Ch3/CwhCBY8Dcl1SCLDje4SUDghry4voqYpq64hpGS3XsVirB9p4ErJFz3a7
LmSXls1ONfOtWqZbjM3+AlvtcrXd720n5Q056G62x05zs7ncat29orp7BS2O
CtlrCHuZiwRCxWBO4qGuy8LcVkb5bkTB9+ETlbIJplQSiJBikYw0SYw1io8x
ios1S0JC8GkeWaSAHGpwYRG8sjKmthZRWxtbXAJLxzsGBevr68s4ORl3dVVP
TLyh0SYXCI8PfJ7fcbjjHN7zsn/3z7/76jlmAKRZgAwGxPAEL77jjC/A+OOf
hMcC3TtzLn2cOz3OmRrjTANUf+LSv3AZX2eFB+PjYqQnFsuG/4gNF275/a78
X/5K+GMgymCPf/vy+PWz7voKtIO1upWRLCHZqac18dHt3MFnVQDVzx5W3L2S
f749vbEospjgmYmCkJMsc9OsS0ig6ixITTaonGJGTdNGRx8KD9zu4ylh77jc
DCyqZSoopycgpSEgrS4orymqrbfSyHCdifFmU5Ptpqa7TE0kTY32Gp+UNNDZ
paW2TeGYxNEjq47KrJQ9tEJebqWCwiol5dXKqquU1VYqqy1TUhVTUxfV1RLT
0xDVUhLSOSFgpLjESlXIUWcZzGIrzutYfaLF/ZKQsfaUL73kqTPZjJ5M1mky
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
Fk4j6kA223oNbvWawLhWDyzTdIEiu777o/AYqh4iD+ptfIKUCJA3AGn4k6FW
ATIerudFSG4HBi66rG5fZ81+2+o1Q0j3DSUA/1Nt8S9ID/fnfcPqkh0wNlQg
ZjIpjMa2t29vtLVVNJ3jl+YQ5ILAnJSgShn+cmX8zWOc80XkBjnmuCy4XOKd
k3Iknbc3LX5rKn1DWszadOra7Kh1BVEby6mbj8VsP0nffSbe8TzP6XLy0Rt8
9wcpfp0C1DMJ4W1mlDqPbihmm8qTzJVCc5XEVJ1qqpYYq4WGqhR9pUBblqwq
Yr/Noz/Poj5Nj+yTkbpTCUoR5hbL+xjGId9nbZ73mhzPtXL3DXI3+2z3zQWe
DpV++xpQ7leisI859H6x8H1WtqagTF9SbSitMpaWmMrkpnKpsTJVU5z0Op3a
zQ2+G+F0PnBLndfqSrclZa4LS1zmlzrPq3RbWOe9ojFowwXcjmtkp7s0r2ZW
sJKL7Uki9Qtjn6XGDcjYTzM4TzLZvZnxXRnMjnR6u4zWLotWSiNbxPh7SaE3
OL4X491O05zqKLuridsqIuyLCWtyCcsywhdIsLMk4XPTKavltG258Y6FvKMl
fM/K1KDanIj6IsrJYvLJwoiTOdgKobckagcHvTY+dFUycXt+kt+F6qSnHZd1
SMSnG9DrBwa1vW+1ne90ykFD2wdjG6KlES9tMihNoNqigEh3anUdWn07MIA0
dNdqpU7VjkgR2GsH6oMQ6R5LyRsJ6xAD0ZlFhwy/a9EtQ9XD/yvSUD8gVFty
IOBuBzAtfIkJSgvE7SOqBoh2mOvWPAFjvPo+62Kc/1xb/Ivw+Ii3CVi37VWW
2BDhuc1sbkUMoXpw8G5X18lrlzPK8ikZgqCM5MDiVOy5krgrFezTeeQTiN6T
hVSl+RVL3HNTDqazHdIYG9Ni18pi1sij1+YjijFqYxV1y4nYnQ3MPac4e88k
7G9KPHwr2VPJR/WLiK+k5MHsWG0Ry1DKM5YkmYqTjUXJ+qIkbVGCuoAzmMt8
mxX9QhrZJ8QpEkIexPvdonteijrSgN9d4r9OcmCWwHG63H1pccDGilCHavTe
Wsz+evzhsxHulylBtxmk1oR4BOm3mVmq3AJNQYm2oFhXkGfIlxkKhLoiviqf
/Sad+oSPaaZ53SAePIfZUR9if8x/dZnn4tzDM+WOU7L3Tis8MLfKbUVD0NZL
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
fckO/aow8htuwomS9DN8yrkK2vly+nlu7ll65rG4mE+v+vzl8Kmn3vjgB8+/
+Pf/8Zu/++mT/8+Pf/J3T/zr3/2fJ/4enCd+9Hc/++nf/+6Zf3jlpR98+skv
T5583sPjlQC/DxKjj9Gy3HmF1yr4vtVVfpX8G8Wcq5yCi+z886wCN3ahG4tz
lsE+lc84TqMfoVGOFGQdz4j5zO/qS2ePPfXlJz95/80fvP7SP732x39668V/
+eC1H332wZOfffLLjz782bvv/tsbb/7o1de//+Ir//svr//Du+//45GjP/T1
+U1c1CuUtA+YlM8Lc78uonzDyfqGl3m8IsetMut8afI5btxJVvQXeeEfUELe
TPN7JfbKH6Mu/zHe69WM4E9Yqeer2IGd9Ynj/XlL02WrinbdwyVYc4byoRtI
qmITMGqb9Y6duGO33LG7jI/3Wy2IeKztE499bVLUeVkBNJtsrOwPSJM2VQda
LetO8yykcWcl1p2mcqQ26f9f4gG+kPxaBOk7ENX2B5BCH4A0UjRVQ5FVyG8l
DofY4Vh22EUO2+Mwxr8L0hZU90O7YJDYQKF1pHqKI24PngtQhQ+N7QEYw5V2
dGzkfPXBEH3QIXd/EUCHUK232+5ZTDLdg4ktTadKVCOeKp3ppffXxNQzrrJj
Ps32eynt+rOpV5/K8P511o2nKTefpfr9Oc/v3YKATxkhh9iRX/KSjpVlna6g
u1Uw3MoKzrJzj2cnfxYW/Fc39998/NW/vvrO//rjy3/3wh/+8bln/+m3v/nn
Z5763q9/9c+//uX3nvnVvzz79L/88dl/eu3F73/07k8Pf/n02VN/8LryRlTI
F7lpbmVFXrWCwIba4DpBYGWJV2mhRzHLnce+UFzkzi26wGaeKaCfoOV8Q888
zEw7nhv9VbjXG9fP/sHt8DNHP/3FF+/99Mt3f3bi41+f//o5zzMvXjn/8sWz
fzx78vfHj/zmy89/+cH7P3777X95+51/+Ozz73l4/Cos9M+ZqR8yaIc5+ce5
+aeKaCeLqaf5tAuVuZfKsz2K089zUo4yEz6nR3+YFfJmvM/L0ddfirvx17TQ
T/KT3cqZfu21iWP9+aKZijVVj14rs1pJ0xwoWOF0+raCLP6Ow+JsTCPArMPR
Diggg7qBMD1EHUAk9e+C9OP9QZItH3CeJWAnHcT5NSQFuUpgpJr0msNpCrAG
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
FngNKLQYYRURYwhjgOFZDJvBsGlwzGZwMQtbh4BgwJgMqLUI1UCgYiROwHKH
wTKvs8zpLPN6YsF0ID20gt9NuM65+khYz7YJh2qcC1xoacuBODaZQhLbe9AH
Sg8hvdDUKkzIiPo6yu/1zNgPCrK/LGKeKin2KObfLBferm+Kb25JbmxIaWpI
b22ldHTkdXcx+ns4o70ls8MC2WyrcrFDNtconqkVTQuWpqtF09XiGYFsrlYt
atpUdm2qOjXiOtVilXqBv7pYsbVc/UBeZ1hrx7d6rHd6reuduLxRO1+xOcRS
dVGlbbmiVtpiG1PUVSQfKFENlyqHSpZ7WOPNWSMNqdOtGUvduYohxsZ0CYD0
rrRmY6FkZZqzOlGkGGLNd9Mm2ykTHbkzvfmiMe7SGHeyv2C8L296mDU3XjQ/
VTwzyRsZYrY2Z3C5ITQ6gLRPTs619FT39ISTlNgvKeEfpAe8HuX5R68Tz/h7
vELN8GxvZayvLiCDoXtIPnoViVqoHHB1dAnGZ2xpD0NkA5fATQ2QOeIKQBWM
erVBqzbuqsyIckDWsSs37yrMOwpsV4Fr5SB5xE3wnRhM9wCqV3ATrGyYjEqD
XmbQyky7SvMuQLUM08swoxyaHoI3G2F6CHvQzhFWlOIRIBpDjmGDSd8KOGiq
BEAOjljATQQLuZKgJCf2bXASwynFQKaH5KYVQCwOEIvLIKRxOZR2N8OGIOoJ
QmDjZhkOq5QyJNmqAAcn2ygWEUj0LBCxB8E8hWGT4JjNJKrJM4sC+CIq8Ulx
QopZxWaryEAsADzrcBLSS2bYeZFgdgVhWzlgv0vuv28iVK+5Vl22kODVNiyG
7EOa0O5uyxenqurKw1Jvfxzp+2JG1Bv56R9z8r7hFp4vLPYurggW1kU3NCbW
N6Q0NGW0tud2dOV3dTN7eziDvSWTw9XiuRaFqEO+1CJdbJTMg4BcK52vky82
aCStm6ruh5tDDzf7N5VNqxLhiqhqTVS1JRE+UDYY1jssd3psd3usmx24ulG3
XLk1WagZzJP30JY78hbbWaIuGKUBpOUDvKUu5nhz9lhT5mxHrrg/XzXG2Zwt
35HU7shqt0Tl6wvFG3OlmgkuIB5TnZTxjpzJburcMHt+lDMzxJoaYADiMTnM
mp7gTk4UDQ8z29oyS0vDCgpuAFQD1pGcdDYp5nBm+IeZQX9N8f1zpMfvfU49
fevqq/k5V7o6mBvrC8gf/A6Or6O6mcJqUSI6vQgSwz2zaM8MF0ttmNiKwaIr
gIHRoNRpVSBDMeyoTDtKAGZ8V45BiAKEq8AFgDSulyNSAQgzCM4aWLhzQlql
18v1WrkR4B/EdiekIfjN4M2w6KHGDXA4mVxFJHC1lVAhmV+QqaktzsFXtSuE
olUptD+4D2k7XEghh2BheQQ2VtAbMIucIBTgdwFyaTj2KYMj/WZnCwlHs/3g
AWQ1K9FIvxyNcIgtIBm0LFgsgC3PWa2zBDFjsQAwT5jN4AA8T5FIBqhG2Ebw
BlQEX8KsMgBazCEFFNpsE5msS+CYnYxabLbLMJsSJ4fS4TjNBhKUIEPxFqpO
r7sCNeCEOxDVUOb9vsMG3c3ubi2O9DHLWNeSQ9+KufFCdsRfGClvcyiHOAUn
GIWehSX+FYLwmvr42saU+uaMptas1racNgBsEKs7WcMDZQvTDdKlDoW0Uylt
VywDeDcpl5s00pYNTef2Zp/h/rBhu397tWldXq1Z5mtE/DVx1V1FnW69Hbvb
bbnXZbnTbt5o0qqEd5aKV6ZYipECST9D1M0R9xQrhspUI2UgSkv7ixa7mEs9
TPkod2W6bHOh8q5IsC2p3ZYI74j5m8vlW6LKtbly2VjR0iBjFoTlPvpUfwHA
M0T1cOFoT95wT97YcOHYGGd4hNnZnV0liOQUBeTn+2ZlecTHn4iLOJQa+lZ6
4Mspvn+I9nzOz+23t33eKKR7DfSwtzbnccs93LKF4WtIxU6OwYUjgOEFu3ne
AUscy1Zs2QLCjnnZbBIb9BKtVra7q9zdUWl31YZdNUAyoB/YjhqeXTWmBbCE
JNlsUMHjBKoGEQ+N2aA2GlUGgwKg2qCVmwwKM0C+AWaLsCQC3mB0jYKQnnFw
xQBKUh/URHUtKqqspKqMU4UDEQ/nfisSW0COipA5QzkFJQblnR9BGvb+UA0Z
QRoEZymByfYhDcI1Zl5GFAKEXEAqIJitVnCmCcIJaZPp/wZps1VutisxBwC2
xGwTm6zL4JhtyxDSdrHZJoMD1fDXFjyGVh3O1YMt504ZoM1O+rHpVJx2PIBn
7yFI5HF8e0U52iRIoKUcifX/c7TPM1mhz+fHvcRMfbMg+1Au7Qydda24LLBS
EFldmyCsT65rSAHhur4efExraMzu6GBMjFaJ5pvl0g6VokslbVdJ29SythVl
x8Zq9/07A8aHo6YHgw/WWzYVwhVxBYD06nLVHXmtdrXVtNWB3WnH7rSaNpu0
K7V3ZeVri1zVdKF8lCMZKJb0l8mHy5Wj5Sp4ypQjpeqJsvX5qjsi4V1JDThb
y8JNUfWmCDCZirsS4ZZYuLpQoZgpFU8UzY+wAOWY6C+YHSmcGmINdOb2duQO
DDAGR9gDw4yO7hxhTTSvGEDaOyPTPTbuSNTtDxOD/pJ88/kEr99GXn464PzT
4b6vM3Ivd7XT19amzNimCV8zYmqdSaYzivWmZZNpETfOEqZZq3nBii3h5iWz
acloXNLrRdrd5Z0d6cMdxcMd1c6uWrerNkFIAzxr4AEI16pNBhWI5EadAh4D
iOrgQmnUKk1alUkHb0FI62XggLuPQxrgX2lGsyJQ9ANScQX0M4KWRoDoKhAf
UCKEI0i7VGUeQRqCXLWvp2pG6SHSD1Eifit1Eg8Q4SGqUXyG3W0JvGuWOIkH
SGzNYpNJZDAsGAxzJhMkGwDV6ICLGUShJw2GcYMBAPsR8TCbAbYh8TBhYgOu
MBBKk1Vqsor1hFhnEetwsd4iNsHmuNhgQY1X8A+EKoJwSOyR6ikI1LY7KEkk
h6jvHbS9sFkfmIxrovlWdu61iBuvBnk+FXblp8l+v8wOeSYn/IXMmNeTkj5L
zT5TwLpeXBLIrwirrIqsqo6qrIrmV0SVlkfyyqKqhKmAgcxMCcUgPss7AarV
yi41IM/qrhVN99bGgO7+uOH+yIO1ji1F/bpYAIjHxnL1XWntjqrZsNZm3mw1
bzUb1ht2NTXb8sotcdn6YqkaJJKjZeLhcslImWyMr5ysWpkVbi7V3hXX3ZPU
3pXU3pHUbCwLVhYqNXP8lfnyjaWqe7L6+8qme6qmTUXDilgonS0HIXqsN2+8
L3+4h97VntPRntPbk9/Xz+jty2trz6wWRHK5fnS6Z1r6meiEryLC34n2eyH6
+n9EXv55qPvP/M//IsT7T+lJR4XVCQrFoM6o2TUpHxol27rF+7tzO9pZnXZG
r5s06icx0wxmmjMa5vT6OZ1uXqtd2N0VPdyRbO8qtndVD3fUuh0QpdU4ODvw
IwZAq1XqdXKtTqbVSrVaiU4n0umWdFqxbleq25XptDJwS2eQG4wKo1EOebVe
Bgi22YRaLbARIwfHbFKaTEqjAWBeYjJKUAPaOfyG0Ij2aKBoKpRORVya1FCF
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
fds+PLDjo4O7P3fe38/DcZi354RA2cxQr4WRXkujZCuiZatipGtixd/GeaxL
9NyYIt2U6vlzktO6JIe1yc5rUl1Wp7muTndZme4I5PSiDOf5Gc6z0x1mJNpP
Dj04Rrp3qO3mfhtXfTln8hcrFk+SinefP59aW1fMcKjJxL9/bXuQBu8CZwZq
Wa/R020kXoeich1SrUPkCAquG1C0EUXrMdjHoAa4+TzRbKI7LHDfnMZq0IF1
FihqA68z8KjZxFjgYkpazTi8b0QMeh1Dd6NYU7eupklbXaepqOsure8qaeou
BVR36Kq7dAqVWqlT11JIA4M1kHgtgSsFpVrLwGYg9STcsSsgjQJ9oviTaog0
K9dwCjAQYKg5uF8SygwWyOxagqiFkWrBYeR7dpaRSo5R0HQ1zBUKVpoFCgfq
nAoCFsQWoFgxCkN5BYLkAK4i+LQEweBWShzmFqtZppYjmwTB3Gniuk16lVGv
4jk1zyMm+IcDYwtJNps4k5ExGmijgTQaMZOJNAO8/4TWYoEAm01Wo8Gq11v1
vNVkgjf//YfJwDJYR8Xrm8mHDjisn/bz9L7rx3y0ZeKnrjb9E7ZPOuEy67j7
jOPiqcdkE456jc71Gp7lNSTNa1CiV/8o2Vdh4j5B7l8GeQwI9R4T6j8lKGBG
YMDsAP85/n5z/f3m+/nM95bN8ZbM8JNM9pVMlIknSDwniMXjJZJxUil4nOgh
muIhmi6RzPHyWujtvdTbe7lMttTTc76z82Q7u5H79w/cvfvr7dv7bPvtsx2b
P969+cN9v31ou/2jg7s+ddz7pZvtQLHTCF+PCYelM8JkC6JkS+O8ViV4rQXO
YKJkXYLHD0min1M9N6eKNiU5rU9y+CbVeW26y5oMlzWZzqsyHJdlOC1Od52X
7jor3Wl6gv2kYNvR4l1D9m/qC5BeOKPPt6um+vvZ/XElt66hnGFx4ET3rGiC
oRYSLjDuQZl5Hc90AH0IZK2AkBL2WcKaUKwRxepQDGgD6LLp8SYjJWwy0gPp
qDEZtAZew7HdHAPENmEyAGVOwvP7hAFcSAOPUHSnjmhqx2sa0aoGTXmDqrRR
VQI8xHZdZae2uksl16iUlK4XaSDpoV6F28+BTK0H8+j98wGGWnAke5FW6FiF
moMDXKBgcDBkB5xHkquF/Z3gThYhUk036Il6jqhlaaWw1bGSgFGLahKpJnRV
uLYc0xahukJY5g13TUL5gSAFOl2hVlekQ4oRtERAWs4x9WDKG5guM6u2cFqw
TgHPwsgjRiNhgUrDZLEYTSZOz+EsAyayhqHV0IDzgGpgNN7zbDZDho1GqwFY
aR4+gjv/EWmzUa+nNLWlT07HSX13LNuxYOiP4z/ZPOFjhwVfH/l1bLb9tFzX
6Uc9ph6VTMiVjcnxGp4JkR6YKOsXJe4T7vFFiFufYFH/MK9RYb6TQvymBfnO
OOQzw98LmmVfyXQf8TQfz8m+nuN8PEZL3EZ4uA51dxni6jzYyWmwvf0QW9uh
trYj7O3HODpNdHKZ5ugy3cFpmp39hL0Hhu3e22/X7s+37/jkt60fb93y4a5f
P9i35QO7HR877P7Uae8Xrgf6etoP8XIZ5e8xMUgyI1K8MFayPEm2JsXru1TZ
uhTJD8min5LdNqW4/5LitinJ+Ydkp+/TnL/NcP4m03ltpvPqDKdl6U6L01zm
pbnMTHeaFndwgv+e4c6/9d+54csfVn6xfP6Xv/wwKzJSdOvu2YamapoBCsFg
6bXSfyINTasFwMl20ABpYBUROYYocbQBx5oA2O+RrqHRej3WZKTb4DZnPbRU
PNfN0J0k0ULibQyp5VnMZMSF83RI4WgGsByTer2OYDs1TFMHVdOKVTcjFU26
8mZtWau2vE1T0dZd2d0txzV1NFJPoDUYLD2Fv4sCUgQVhAemwKHqgPtienmm
4AZ2LaNQsXCACx2jAEYbxjc44D9CxQuo7s0eEnUs3gAGRdTCdDYuBzxj2iqd
pkKrLteqSnWqYlQDfMASHCJdjKKFWm2+Wv1WpX6r1rzTARuOldOEUk83G7lu
6CBziJVDrXrMyuMWIzDCQGAYzWYTWP44jsDxDq22UaOpB48Y1kHTgHk9tNI9
PPeQDIwzb7AajP+riYZIw+A00V5TdP9EbLLHFpdvJv02vc+WSR8fmPtF4A/D
E/ZMTHeakiWaku0xPttzdJZ0OBAeabKBiZKvozw+D3f7LMy1T5h7/3DpqAjv
ieE+U8O8pwfLpgWKJ/u6jfN2HevrNt7XfZyP+0iZ22Cxc193xz4uBz+3P/DZ
3t2f7djx2datn2/d+sW27V9u39l3x56BO/YO3r538La9A7bu6bN19yfbdn24
bfs/t/z2j61b/rFn6z9sd3zgsPdTlwN93O2+9nQY4OU83M917CHRpBCPmVGi
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
wm1ahDscke7TjnjMiJHMjhPPjRfNS3JbnOq2MsPtm0y3bzPd1ma4rchyW5Lr
anPUdX6e24w80ZSj4ilHpVNyZZNzZJOyvcaneo2LkY31cRi264fPV83958Rh
/zVm0CezJw7Z9vPKrCT//Ge/dzVVsHi3nkENPG0y/S0/+9eLxgvJEaTn3D2L
qdOkbzeQLQasxQhMtK5Nr2rSdzUZO9vNKrUFwy00YwX6xSBoDyg/eCswyBwB
qOZJlMNRFsf0FGHU02YjZ4HC43+F4y+pabHqwTBbeN7A0JSOwLtwrBVBGoD0
VXUrANVqVbVOW4VqqzGVnNDW0rBWsIMg4CmHONFEko3CMV41QDgJwkNBoAoU
dgyuVKlh7YpKp9QhdUC64GgjhragSDtBaHmeBeoXSGfwz9wD9P/pwwI1lZG1
6gkrpbNCR4OChFv+Jah/Fx7/FxX918si9F1Rc1wLcBnaWt9WVFy9eyc8KfF7
b8kYp/19Rbb9jviMTw6aHO87IlYyMMajX4Kof7rnkEyPoWkuA5Id+ibZfply
8MtM1745Hv1yJH0zxV8liT6Lc/sk2vXTSJcvQ50HBjoO8z04yst2rMx2gvfB
KX6OMwNc5h92tQlxXxHuuTrcc02Ix0oAMNQe4mUBshWHZKsOi1eHeK4KFy+P
9LSJdJ0f6Tw7wm1WhPvMyP/H3HmANXXv///539/93dF7b+2wrVpXHaio7L2H
ooB7j7pAdkjIHmxQEVE2JGSw9xC3tVbbWtva4apbZI+QELKTM3Jy+J9zEIqr
tbe9v+fm+T4+EQgJJ698vu/P5/sZsUsPxVplkK0zKTZHqHZHqQ7ZZOe8WI8i
sr+AHFBCXiEgL+fH+vBJ7oIoF2GkvShqiThmoYi8QBi3oIRqUUKzENLnF9Ln
ZcTNpe2dttH/H66L/2Qx9f/Nn/p35yXT9m31qxSm3vru1FDfPUgvgwElAuue
STl4etGQsWpx1eh0VHzQJ9Rr0mI8dyLD3fBQFzD4xNj/BOrrNg1IzQo1qjGM
6MERgDgyeHoiBqKAwWzUmvQqGFM4WhWkU8NGLQJNNNS/ivR4BMBEnF+AIKAx
6If0ugGtuls11KHAvLnBR0Sk4u6Q7M7Q4N1h+QO1qgPjWa3uGkVao+0wqNr0
ykc6wmHU4B2D7ynkd/r7bvX03uobuCOV3R9SPMJMtFrdqdX2GwwKENQhCIzr
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
wkNbuMWGIT0hjFVEBzyZTt8H6OQg5p8aNcRUcaMZT8J//ZyKX2drfO/AtwzY
gBg1COY+/JzO8eLPmydE7f4N1THxl6F4Fp8ZQk3Yk/bJO7797mxJWUZE7Cab
HZ7vhfl9EBc8PWHLvMyQpcVxzhKWayndrpS+WMKYJ2HOFLOmiVlTMAUiYk4R
Mj4U0KcX0WYUMebw2YtLePbCeHdRgq8oYbkwPlDAWyXgrC5hBgsZQUJ2oIgT
JGavErNWSViBYvYyEddTyHUXsj1K2B4Cjjuf4ybgugq4LgKOs4DtxGc5FTGc
C6guhXHufKqXkOYjovuLqX6iWG9hjDsei45yEEdbV5Ct6lnWTVzrBvaSGuai
MpqFgDwnN2pW2q6p5OB3trr8w2Pun22n/9Vh7jubAuzzDkV/dib//s1mWd8V
g+YeAvWgpiGibBn65VyCCacAo2CrR11s1KRAwSGzQWbSS2HtAKQaAFWDkHoI
1qnNIICO8vk0bRIixORoWQGAJ2HChAjBeMaongj2LxV0vJhQ8bLkChwqzH9E
MP8OQSCzGcABRnQY22ZIh8L4wSX2FfTnnLeJaL1+tOGlLw8ZzWBEESP2XIhR
TSANvcLNHH9e+A8QPChBNf63Y8ZBqx/q6Lx+8Xx5ZlJYwF7/j3a7Twlxfz9m
2QzuhgVHwx35VDcxw0nCsBbS5gtps8T06aX0D8vwNaOUPltEn8OnzeUzLITs
pSKegzjeQ5zgJ05YIU4IFsWvFfHWidmrxaxgETtoDOlgCXOlhOUrZruI2Q4S
liO+OI6lPKeyBOfyRJeyBBdJvIuY5yLkuJYw3UoYnkI6xrNfKcO/jOZbGush
iXYWR9mLoqyF0YtLyZZ1zMUN7MU1jIUVtPli6tyi2NlHw6fHb3svxPcfK5f8
r/WUPy2Z9k8f2zmRuwJrxCk3rtX3d32uU9+CgDazqQ81K4gmbPDrRUHHC14w
/xrTn0ozjrTcbBw06fshba9R06fXDBi0MsCgNJkAnBmUOI3EkYaJkmfw6dEY
dtnxGBf4FGmD8Wdf8tdrlF5+zvjsd4l7+A1nmwCYqGN9+rHCIX92Y0InHsT/
WzyN1WxifyOevqgzG9WwTgXrtZioRkePZF/5wN+t3n/+fYStRiBIM6TouHPt
bE0Oe1/0avvtztM3Wr29ze7dcG/MVi8+Fu4giHMS0W2L4+bzKbPE1Nnl9I+q
GHOqGHMr6PNKafNLaAsF9MVCppWI4yCK9xQlLBMlBIoSVgvj1wl560TctUL2
aj4riM8KFLJXidjBYvYKMctbxLQTM5eWsazLOTblXNvKBLuaZMfaZKfqJOfK
BJcKnmsZ162U4ylhe4sZvhjPVayAGuxfiltFjENZpLUkcokwapGEtLCavqCa
Ma+M+pGQMquYPDMnevqh0KmMTe/s8Pyb78L/Wfj+n60/+mBzkEcaL/zcyaJH
988Oya4ZDfdNcCdqHiDmn74m0uNvgYnI/8Q29GEYkpuhITMwCGt7AU23Ttuj
0fdrDYMGUAmbDWZcABBWGiboxSMb8Fg3J8JoY1IEE9gAwTMOM3GM/lp+4m97
m3GAn4YFRhWUkfjKczYZ/R1oTYh5YtsQokdBDaJXQRolfvr/S0j/zud98Zc9
LWNEDDqDrPfe1U9LMzj0bcu3OM9ZaTEpcP4/t9q+Gxc49+Au66JYDGn7YrIF
n/yRhDq3kj6/hmFRy1hQQ19QQVskpi0R0q1FDBsRy0nE9RbFB4gwE52wRhi/
XsjbIOKtL+GsKWIGFzGDMB0i4q4Sc1eIOZ4ipo2EaVnBWVrFs66Ot6lNtGtM
dWxKc6pPdq5JcKmOd63ieVTyvMs5vhKmXzlzeR1nZQNrWX2cWy3JvirKqixy
sRhDOnZBJW1eBW22kPxhIWlqXsy0rMipafs+iFv/9ma3v3ha/Mnivf91WDgr
Yvc6QV7i119U93R9rlLdAMFHJlMPig7iByi/GWkERQHErIXgIQiS4Sc1oAzW
9hjVnRpdt8rQpwakOngYMuvNI8Q5BSY/IGisin+8qQI4Wq6LO4wgYZ/xgrvR
hKnXfyWv+5MEwOYxsTqONPgC0r9HcjwNDeFtZ0xaM6Ay6ZSgWgVqdQgE/58i
jaAjJkxtAaBa0X7zWmNxVuL+LVvcFvnOneQ982+rFv4r0mdmypbFBdGOYppj
CcVSSJ5fFmdRRVtYS19Ux7Cso1tW0zGnzFpMsxXT7cQMZzHbV8xdKeatFsev
k8RvkMRvFMdvFHLX85lripmrBZw1Qt5qUfxKCderlGVbwVpczbWqjbepS7Bt
SLJvTnNqTnduSHGpS3StTXCrjfes4flUcvzKmP4VrIB6bmAze3kT1b0h1qE2
xroyZkkZybKMvKCaNreCNpMf+0Fu9PvHoqdmRExN2jsldv3bG1z/4o4h/cFf
XW0WsCgh9VU5N388IZV+o9XehqDHCNKLojJi2Lr+15K+nrv+mJUG8Xku0BAE
yhCTAoHkkK7XoOlS67qVhl4VMKCDFbBZh45WeTxFerSK3zxBvYzpanjUN0RG
ful9f+kred2fJgBGx3QFbkuJr/xOZ/C5FzOaiwui2PYEaxHDMKxVQBoVrNOb
YdMrTh5f5Q78nhcyqvTMKARjhnqg7d7FxopjbNIOP0evOZOdp/7Vb/bf9zhP
4a5dkBvuIKE6lcZZl8UtrqRaVtMW19KX1jOsm5g2DQy7SrpDGc2xlOZUSncv
ZS4rZQeXcdaW8zZUJG6qSNxcnrCllLdZxN5QwlpXwl0vxAR2QlBZvF8116mO
a9vIs2tKsG9OdGhJcTqe7no83a0p1b0h2aM+0bMu3quW61PN9qtkLa9mr2jk
BR7nBrQyvFqoLo1xDrUUm0rK4goqpjrmlNE+LIiZfDTy3cyoqQfCP0zYOy1m
/bvrXP7ituDPljP+sczD9nA669NPqh8/uqRUXjcY70KmJ4i5H0WHiQgG8BtP
YHGkzWbM21LA8JAJUZpgBWjo12u7VbquYT1GdZ8WlEMmHSFcYfxwcDTf46mi
MP8chsWbZQFEVOR1a0gnvAzk9V/2GNLjniAyZrf/KIUzpqUxpBEDAqoh3RCm
ZmGtGs8Mxz6trxTSE4M2f5zcGg3rmWDVYN+trz6rzMkIXR3gOW+67Xt/d53y
l01L340LmJO1z15Cca2mOtXR7GvpNnUM63qmTSPLvpXjcpztVsdwraK5VlI9
Kmm+VfSgKsa6aubGGu7muqQtdSnbqhO3V/C2l3G3SThbhNzNmBQRx6+tTFjZ
lOR9Isn1ZILTqUTnkyluJ9I8W9O9jh/wbjng1Zzu3ZTi05DoW8vxq2Utq2Ov
aOAGNfOCT/ACT3OXneZ4n2C7NzMd6+hLq+kW1ayPJPRpOdFvZ0S8fShqWmrE
LO7emRHr3w92+aub5f/aL3xr8xrPcsmx27c+G5T+YDDcBaEHJqTdjA6ieE/j
Fw8Nf+VijcoGFNWbzSrEPGxGlSZEAUJSvaFHre1QqjuUmm6tXor5J2a8SnqM
avM4sc95UoQg+c2Sw/ybYm4EwCMTPEF0DPI/6vYs0pAG0isgnQIx6lBMcZlf
msQyMSL9OyMtr3hJ2IahHu6+d/N8TSkrZOdqJyv3jz5w+/DNYIu3Q1ynp2xZ
WhzpXEVxbWC41jOd6lmODWynJo7LCa5HK9uzkeFRR/WsjfOpjQuoo62tY2yq
Z22p526tT9xSm7S5Mn5LOXdrOW8bRrWYs1XE2Szmrq+MD2pK8j2Z5H4qweV0
guupZI9Tqd4n0/1aD/gfP+Dfku7fnLKsMWF5PTuggb2ymbe6NWHtyYQ1pxOC
z8QHnOH6nuR4trCcaulLKmhzS6nTi8nvZUW8eSBsUmr4lPjQ6dSdH+4Onuxr
91enJf/wdp0VFb7hzOnq7u5baiU+GRM0PobBTjMiR1831vHcGzGKkxFFNXhL
hBGVyawwglIdjnS7Eh+V2KHV9YHgMGIaLc0bLTJ9zgszjTmJ0P8h0r/0ld93
G0caj6vgwsOoRIxqM/yqBNoXI9J/4JYxFtAzI5BOreh6/MOFk4VJzNhNQZvd
bVZYzvT76N21lu9RVsw//LGtMMqlhuZRz/Zs4no28zxauB7H2e7HmR7NDM9G
mncdxa8+bmUTY2Mze3sTd0cDb1s1d2MZe52QuRaTHGLuRglvi5i9VcTcImas
L2OurGV7NHGdjvOcT8S7tCa4nUj2OpW27FTaitaUlceTVrYkBGJmuYm7poW3
/lTy5nOpmz9J3fBJ8qqzvGUnWV7H6a4NVNtK8gJh9Iy8sMlZIZMOhb6ZFjop
MeRdxseTw9e/s9b7TWuLv1oveW/dWpf0tLhr3342PNSjVXbrVV06ZbtR02UC
ZUT7o9+K9MiYeRmd56LGqDaZFHp9v0rbqdQ9UerbVIZ2rbHbCAzCsBLvhoe+
6IWNCw8CaXi8ecVrSspx9fK6Mbf/a6RNOgRUYvKDOMr55Yj0fwjp0RbUIKhT
6Qa72q9/da6KX5zCiN+/fW+Ax7IFM/znvLPL+UP2Kov8EMcKimctw6ue5dnA
9GhguDXQXRppbs1072aafwM1oIEW3MTc0MzZ0oSZaO7mKta6MuYaIWN1CWsN
ZpklvE0S9hYJa3Mpc105Y0UN062B5diMUR3vcjzBrTXJ61TK8pMpgccTg5ox
G84LbuSubuStO5646Wza9gvp2y6kbTyftOo0178V+xDRnGsp1mUkC37EjOyQ
yRl7JqXtnZSwexJjx5tRG/61I+CN5U5/t5z7Nyf7jyIjN5SWHn1w/7peo9Ar
B/WKPp282zDcCxvlmGP+byE9MiY/jKMjXTAtbdD3a7Sdat0Ttb5NY3iiM3YZ
gX4YGjIjGqINO/LsY1+KtGnkdVMs/guRHiEwMmHugxkTHrAGAkebAQK/iLTp
dwgP9Fkr8czCgTZBgFGj18gMiq7h7jvtN764dr7huCgngxqxwcXWa9bkwPlv
hbhMzdxuVRrtWkFyqSQ5VUQ7lEfbl5PsqihOjTSvFsbyZlZwI2tNPXNNHWNN
HfYvdp+9tpaztoK7roy3vjx+Q3n8xgre5krupiruuhruynoOZu2dm3lOLYku
LSkeLSk+x5P9WxIDGuNX1vMCa7lBtbzguvhVzYnrzqVtvZC29UzyupPxgSfY
fscZ7k1Up1GkBVGzCyKmZ4VOSdn9LnPrm5Hr/r5jxV9We/zZ2+6vtgvfDPK3
yUynfPZJXX/3Q0ivAtVDgHLQONwPqqQmvQLFs+DgfysIjI4F4ojeNYjCBElB
Q49B2473VVa3G7XdkGEQgYaJzgbPRVRe1NLQhIMY6IWjtBfwxvNAkN+UDvF/
YaXxRjEgfggOamFAiXcsgRT/h0ibJ0ZOsCfFW+IYlBr1gEbRqZG1aQYfD7Td
uHnlfE1RVuSGlQGWs7xnvbl+8VuJ6yyK99uJI+zLIh1Kw+0l4XaSKNuKWMd6
mlcTc3kjK6iOGVRFDaigLMMWdqeWFVjHXV2TsK4qcV1lwtrK+HVVCRurEzbW
JK6rSwhs5Hk181xbElxaklyaU92bUz2bknwaEvxqucuqOAGV7BWVnJU18YFN
SavOpG48n7LxVPyqVnbAcYZ3M9W1geJQE2tVRlogjJnHj5l7dP8M3tZ3o1f9
Y6f/X9a6/0+A45/87N/wc5oass2/Snjo9vefKqTtkE4JqoaA4UFQIYVUMkSv
RCE9YRv/baQBYmKOmujaITUBvaC2w6h6YlS2g+puk2HQ/BuQhkZbUj87dsc8
4c0ae/jTTAZ4jP/XIuE/jTRhFmEToIP1SjzWoRuEDVIEVKD4OPtfzb57sc7l
V55t7AKOj6x9LisVX4gZMoAqlaZfNvhYLn2sU/Wr5T3dj25fOlF3gLp/h6+9
15zJy+f9k7Ji+pFdC/nhtqXRTmVRzuXRTuUxjpVklzq6dx3Dr5rmV072EUW5
CyJcBZGuwhj3MppPJWd5dWJwVfLq8oSg8gTsztqa1HW1qWvqklfWJ3g3Jri1
JLu2pLg0JTs3Jrs2pHjUJnpWcLzKmN6lDJ9yll81b3ljYuDJJMwxXHOCHdhC
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
aDerB1EjMYEaI9lkxjv+YTCPdtIGQRQxjfZQxcc4EkN8IbNeCwz1Dz/58cGX
NWcEB4qZUfHbd1FXh3DXkQ/sSC2IOipm5FQk5FWl5lemFVYe5FcdLm3IazxT
0fpJ/fGzda2n606drD99svH0meaTF1pavmhuvtLY8nld6xe1Z67WnPu25ty1
mtNfVx6/LK4+lcuvSM4Xcook8ZUNWee/qP3h7qX2/htyzWONsdsID5gwE22W
jaDYnR699kn7g0vnmg8Kjuw8QPNm71kct2FW4scW5Uk+TRnLy9gOwrjFIpql
iL5ITF8kpCwojphXGDq3MGQ+RrUIs9UkB0mscznFvYbmXUf3xYR3Wax7frgd
ZqKzox1rDmz+6Wyu8uFn0PAjFJaNmJV4LQkgM2GWWdMFYuIZGEIwpWEGMJhx
Q4nAIOYNDg/euv/DJ5dPVlQJs7MPJifTuOxIHicqLYWal5MqlmRX1fNrW4U1
Z4orzxZITueJzuRjJFdcFNZfKa/5XCI8nY/b6pr0Q+XJ6ZKENCEvrYSbWsRJ
ymXR0qN3kTdvi1wTStmcdphx+kzDg/u3hodlMASaERPmKUIaLaRSIzoDCkCv
7neHPltVijwtPMeRVhG+IRHxQDVjjc7Gu55OrEwEnsnxQ4myRGhsWMYfgPQI
oWRAPE8bJPoGGwlbTfSBRyGtSScH5Z3GnofG9rvAkztg5324fxRpDTHaYxxp
aASf025EIYBoWfP0w4iiuFbTQUqZputx383L35/k12TwjkRFcbeGstZHpm5j
HA05VELJreAWVKcU1RworjlYUptZ2pBd2yo49Wn9+cvHz1xsOvNJ4/mzTZ+c
a/nkQuu5SydOfnXi+NWWls/rj39ec/pq7fnv6j+93nThx8Yz39Q0fioQ1R3I
E3GO8ZlFZckNZwSffdty4+Hltv7vexU/DWkf64Fe2CQ1owNmpA80dPd3Xbt6
UdAgoRUe2JwW607fapHw8QJJglfDQb9Slr2AsohPmc+nzBVQ5vBJc4rDPioK
mVMYiiNdEmklirYTRjuVxmJK27+etbyG7ieOdT8WYp0ZYpNP8WzJCW27Um7o
vYZon+BzUkxybOF12cZ+SNsNanshoxyC1CCsA2E9AOn1Bs2wWvGk+9EX1z6t
by0vFGQdzODFJ8Sy2RE8XlR6Or2w8EBZRV5tk7D+lLjuLL/6XFHZ2cLSs0Xl
nwiqL0marlbVf1kuOVdUdPxYbsPhozUHjlSmZpYnZ5alHJakZAiT44/Rw1kf
74pZvzd6HTcpur5Bcv3Hbwal/ZiiNiPYRwqTPDpIq8HjHphle2VrhXGkgRes
9DjSKsJKgy/ESSYgjY46bkT9i5kYBwPixhA31H+YlcYboePBNpCYqQSP6moA
hTQmrcw42KHvfmBov4tT3fUAGuhA1DIcachIdLAcFx4QCoJmCEBgI1HwgvNs
MkM6QD0w3HW/68bXty80nhcfLGRSU/bEJuwgJ39MPxKaVETKLufy69KE9Rni
xixJ07GKlry6k8Wt58s//bzl8pVTFz9v/fTS8UsXWy9fPHHp8qlPr5w5/e3Z
1m9ONX/ehBnqE1drz3xff+Fmy6c3j5//obH1y/LKUzmCmvQcMS9XkihpPIY9
4/mrDVdunv7h/mf3O7/tld1TaTsgqMeM9MPQgHLo3oPbp65cKGit5AgP70iP
ckvbb8Nnu5cluAvpNkXkBfkxs/OiZuRHTS+KnCmI+EgQPp8fvlAQsUQUbSuK
cSiJdhZTPGs4AXW8wCp2gIDseWiPVUaogzh+7cUybt/NU/DQXbO+YwTsJVYf
CvabgT5Y32vU9eq0/SrNgELdL1P2Soe6u/ue3G+78/UPXzSfqRJW5BzLTzuQ
wU5OiUtKjk1Ni8s8yhWIDlfWFta3ihpPi+vO8GvOFlee41eeL6n+VFx/ubzl
q5rGK5XlFwQlp/KKjh/Nb8rMq8/IrTuUW5eRW5uRW52RUZLIOBAdyfg4NHoj
gx0mEud+fvmTrs4neh0e+sA2VhNghA06s1GHgsZfRHpi1AIeKyvQEcJjFOnx
mYwTkR4THuhYqRcyuohmCDjSepy9Pwxp09Ne6KODZp6WiRF9d0E1hLl0A080
Xfd1nfcM3Q+AvjZY3m3WEkE8POIxJuxx9xBzJyEExofImPAxprDZbAIho0w5
cLvth4vXTtedFeeUptJSQ6K421gH9ydlk9KLqEdLuSUNByuOH6tuzas7UVR/
UtB8Vnz6YtWnXzR+efXkV1+f+fLqqS+/OnX1yumrV858dfXs5W/On//uwslv
z7d8caL588aWq7Wt12rP/Nh07kbL2evNp79vOP5VZc0FvrDpSGHVgYLKjKLq
LGFDbvmJ4vrzZee+avn+zhcdvbc02icmUx+CSAGgW6m43dN++c4P9ZdaM0oz
d2bTvY+R7HNilhaRlxSSLI6FfXhk3/tZez/IC50uip5fFrtYTLISk+zKyP+/
ve/wjqS+8/wn7u7t3m22fbu2WRuwAbMYTFpsr1nb2F4cwDbJA2bJYJPBJAMz
zIwmSBppNDOSRlmtVuec1DlV55xzruquru6q6ny/X7U0Iw149/bt3t67d9T7
vn6lKqkldX1+39/nm792/umbZp666exzty69/p3l3313/tVvn3r6G7/7+Zc/
eOzmzeO/RkTTtbi5j6eGzeSIiI+akRERHZHJIZXpkblWM1MuR1MZXziBeMJG
u29Ha5UI5VvLrHOn5z44cuq1wxOvfnj8lQ+PvXxk4pVjp14/PfPOuaWjy6zJ
De7sBn8WLPkV3vSqaG4NWMeKxU3V0pZmeVN9cVk+Ny+eAmxkhjdxhnt8mnN8
mgtOJmY4J06vHf5w+rXX3n3yiWfuf+75R44ee4fNXvP73RhWhUYiLPTowElS
NAEnDX3CZMP9RVsHnR5j5PSIPfOwPRpcmss8POjZHuyLvI2Hdo0LBCg4sQv8
anDO0Ol/B6SHe97vsd3aZoQc51DBJqVUna4X8Fy0kfQTKX87G6SK0S6aHrQq
TAlAZxfPw8HewK8O0M+9LoT0YNChO60aVgzGXBLd9gX25Efn3nr1o6cef/W+
J1772ZtHnzh85qVj514HTGORc2JTNMORnOPL5gXyi2LVily3qTZsa/U8nZ6v
0/EMer7ZKLKYJSaLVGuVSq1SgVnM1fO2dSy2fnXbuMyzrAlsG0I7S4hsiews
nnFlXTZ7YfvE1PLhE/PvTyy8f/Li4enV4wvbszzFugmRpzIOHI93u6XBoNrr
ltpEolZyhl0cBeudxSP3HXnqxnce/JvDh/76o0c/d+SRvzjyyJ8d/dWfn3rs
s+eevGr+6avnnrhm7onrLjzz9fPP3nrmmW9MPXvb9At3TT5/18RTt3/w6M1v
/OL6iee+p1z6fcIuJMqRIVkZEdlRMz7CIxDV7eSAzHRaOawWj8cdDrdmx8yX
aDa48qV1/rnza6cnzx/+aPL1wydfOT4NLIK3T5199/Tc76fOvT+7eGRhfWJ5
e3KVd2aNP8O8nt2QzLPkF7eUy2z1yrZmFaB6Qz2/ophblM5cEE/NiU4Ds/Gs
6PQ58dS8ZOY8b3Jm5aOPTr/+8muP//bFx9599+ULFyaNRlUqHak3yjRN9Lrk
EG7TTWZYJ32wYcgVkYu9aoJLNbP9vUFycCrift5yENLDsRusNx4SenmAUYcZ
Rg8ETlTs/zsgfbBqeDdvcNf3Aod29drdFkrWcngm3Ej4iJS3nfXRpVAXA8/l
inzp3SKg4ZBiSq46gE73e+0GXgwnHArD9uzqR++ceuG3Hzz29NsPPfPWgy+9
f+iD08+dnHttav7d82vHN4VzQtWyQrepMW3vmDkaM0dt2lbp2aodtlq9rVFz
dFq+1SSx22RWu0xvl8itQpGFL7LwhOZtnmmNZ1zmm5YF5hWhZV1sY8kcXDnC
lZlZPPXSMn9mjnXqzObE1PqxydVjU8vHZ5ZObHDOmyziVMpBEPnBABho7X6P
AJZZvexPuHlq1nsnX/7HV39x1Uv3feaNX37myONXnX7uKzO/uX7uBaCWbzj3
z9edefTaM7++bu6ZW84+f8fUs3d+9Pitb/7ihhfvveaFH3zppXuve+ehO+ff
fdylXMUy7g7BxFipyqidH7UyUKhcv51r1zOFTMCBqKXyzRXW7NnFiakLR06d
//Dk/OGT8x+cOv/e9Pzvz68enV+fOLcycXZpYvbi8bnliYWNExe3Ti2yJy9y
z6yJzm1KF1iypS3FClu5uq1e42nXebq1bd0Sa2dhXXFhSTp3QTwNUH1OdHpe
Mr0iP78qPb/Em5ldPvbhxOu/e/eFN996buLE23zBsh1RxxNuGHJtVXs0PqQa
e6mhncuq9YoeSvt1NSTDzIREQBuoNhRIXK9ot97dq0zsw1v03gwjcg/V8Gdx
Zk4oOf7Zfwek9wYWHMi/2jXr+j2y00LbaLaRCzdSvlbWSxX8nWqohycHVzaG
HewG+pn3gSZhjyTa1VTOp7XwlrdPfTj90ksfPvbcuw+/8PtHXj/6xAeTL5w6
//rs0nvnVz9a2Z7mK5eUJrYBEVpcEotbYnKKtFae2rit3NlSatiaHa5eJ7Ca
pXab3GaXGRGxys6X23kKhK+w8+S2LZl1U2bZkFk35DaWws5RO4Q7DrEWEarM
HL56dVO6uCa5sCScm+fMzG2cnl44dmFlUiTdcLp01WoGbCiwnzAT+u9RKFEJ
BC2s1dPPvPf03z/3sy88++PPvn3omuPP3jT121tnX7j17JM3zTx6w+mHrj31
q+umn7pl6tk7jj9x55u/vOnQt7/ws1v+6r5bPvfE97529Jn7+XNHUm493SgM
xtjoALupNqKrsCK7U+m0Clg5Hg3aNWruJmtu7sLxU2feP3Hm9yfnPpi6eHR2
9fi5tWPzG8eXtk4uA/Syphc3zyxsAJm+yJq8yJ5c5EwvCc6uSxeAct5WrXLU
axzNGndnXaDfFBg3+aYNjmGNpV5ek89flJxdEJ9ZlJxZlp3dUC6ylEubsoUl
zuw0IOqn3gFE/aNjr6+sTskVmzabIhpFqpUE2Sr3qNqwOx4VSh/wSxxo0ngQ
0uNmNeNg2q7i7R4cirEf0p1d8JPMFMXdebhtiGfocGiNZ8TsA/DuNrHXMv1f
lkukaP/o2N7lSu0+2aPqwLZrlqLNvJ8qBbrVUB+LDok0HAo5bA6h53ncOLvP
nFOM0INhp0XVc+WIzaNY504Cbfz7U8+/NfH02yef/WD6t6cuvDG78t6FzSMX
IXme2pZeUJhZBrfQ5pM5AkrEr7B5pEZECNYCQLXGwDGYhIByWE1S8Gq2iI12
oc7J17r4OqdA7xQaXSKTW2TyQDG6xQaXRO+U6RCZ1irWWERqs1BlEijNArmR
B8gPYB0b/MW17QUWb0Wtk6Uy8XYL7/fGm2xvOCB7NFrJuq2Ki0sTz7/4wK2H
vvv5Z3969asPX//e4zcd/eevnzx048mHrj/6i6989OB1xx+/Bejndx68+cnv
X/Od6/7sli/+97u+8rlDP7zr3OE3rTJuNRuD5cZgB+8SMPTQJ2D0oU8Me412
s5BL+xG7mitYXlyZmr94cuHiyaWVydXNmQ3e/IZgfo07s8I+dXHz2MXNiRX2
zBrn/Bp3fpV7YYV3dkVwdlV8HuCZpVgCeObtbPC1m3zdpkDPEhq2RCa2xLot
NG+xdtZWFUsr8oVV2fyafGFDAfC8DJbAlmJpQ7KwzDk/tzx5Yvr9k1PvXViY
2Nqak0nWrRZZMuHE0DhFFvp9bDBsDw/UHl4K8+2nE+PsDuhJgINWu529wMT+
hupXEA84DW00pjdQJzMkp8vMCQW7A9mAOGf8HgchDZcGc2X/rrH//BJo+wd5
/pUVwYBL9yiMxgtEJdYqhTqVcB+NDhqJYTsLIA3zeKHbub87PWXUYb6k+iOy
OySwZi4Yt8h167NL7x6efP7D6d8cOfvyxPwbZ1beW9j6aIV3clU0vSGd25bN
izSraoRj8knsAaUjoEb8KptHbkJEeisfoFpnEZjtUsA3LBapySw2WgQGO1/v
5hm8fJNHYPWIEL/UEZA7ggpHQMEsB4XZqTQiSoNdAV5NTrXZpQGvBkQBSLjS
KBCptziS9U3uqkgm8PrcpVK+3W4O+swkKUafkM1yNmRRbc2+/+z9j//gxkP3
XPPYD7/0zE+ufvW+az+4/6tHf379kV/ccPjBG48cuuW9h29+6Sc3PHTXVXd8
+U/+7gt/+s0bv/zUgz/dXpyLehCiXmN0V4t5ZK1xLR5szd0nmo1CPOowGsWb
3PmF1anVjZmtrXM83qJIvCpRsETy9W3RhQ3u9Ap7YmX7xKZgbkt8cUuywpIu
g+1mU7bIUixDpqECyhkwjQ2+fpNvAPqZJTRtSSwcuV0gtvLYus0NsD2pVljK
1S3V2jajyQHZZqshsNmy1TXe4rmVydnF4wvLJ9c3z/D4CztaTiBoKJQCRDvb
HeyHNLUvSenjkIZBZ8hRB104/nIM6UsRk38J0o0RVYevHRyuevApjSHdJiAh
OQDp3WDl3pC47kG4dvbSuVv76ss6B79zd2ECVjzotQCXprF8u5wgi5FuJTJA
o8NGHHBCsIEOBnh3SDLJooP+7sQaujuiOsMm2asWaiGrW7otOTe1+PZHZ186
sfjm1Op7Z1mHFzjHV4WnN6WzbNUCd2dVpN+UmbdVToHWIzF5FRaPyupSWhCZ
ySo0ATBbxQDPJkQBxGiVGq0ig42vd3ANXo7Jz7X6BHa/yBEQO4MSR0jmCMqR
gNzuldscCptDjXj1Dr8R8RtsHp0RUWktMrVZrDAJpEaucGebK2KJRDydVu33
uiuVEk2Tg8E4CWHQpVt4JeszKi4efev1X/3owe9e96PbP3vvbX/+8N//1Svf
++IHP7nu2IO3HH/ktsMP3fLmfTc++b1r77/ji9/52v+8++tf+vn37nz35Wd3
pIJSJkm1W0x7Q4qZuM0ULkF13Rp2W02sEAvajDrhNn9pjX2eK7goka6plFs7
Gg6gWHIViyO6wOLPsEVntqWzHMUCR7UM2cXOOle7ztVtcLQsrnaLvwOExdNu
cPXrPMOawLghtmxJbTwZIpbYhFwDi61dZ+9sbO+wONotnn5LYGDxdRsA0mzV
Ml+9yZGvr/LPL3Fm1rmz28JzIvnFHeO2y69J5d2Ndq47bAyurG25hOrBQVTD
4rhBv9vtdro0PaCo4Zh4dLsfm8bV2Uc8xjSjfhnVY4S366NmY9QCeqDDDO7c
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
NllGiVwBS6ZLkXguGM0Gwhl/IOtzp9zWiNUYshjCdigBi9FvMgXMtrDdk/L6
8yFfKeorRny5QDDvj1UDaTxSJNNVqoi2atFUTCAXb0u41qAtVU01yEaj3UiW
kt6k1x6xm4NmU8Bk9JkMXqPWpVXaFBqHyhY2edNIMO8MFxyhnCWUtUQy9ljG
Ec86E3lvuhTKVKPZWixbi2er8XwlXqrESqVYPh8r5JK1YqFRrhCVartSo6pV
GkUBr6BxsIWhHaLWJ+uAuQ07MMePYaTNIQWIXKND7N2l8CHVBE8Q5gIRLYYh
0LvJn+PWyDCSMNwNjoybV3Q7e82Fhn/gaXYg2d7NJh4bgxSThjF+mkzG3RU/
O6627jIJHj1GdrvKMSeXrzApXlBX13ZjhURt924PZuINu7D/AHStdJmQVofZ
Gsajcve+De4Ug4/11dkdKTbY6wnWY9IVens9lP5NA5SH+/JGruiH+Ym9MfcE
1ucOYG+rQQ/YqcxIVtgOfdAHAqefwQFoTEMXSJBgW5duj8mc6Xbobpfu9Whm
uiXV6ZEUQDxFtMgm0caBNEkcgBAl0FoTrREYFHCC11AcxZoYuIVTTZwmcIrA
SWBI4ATdbHcJqt+mB1Sn3yHarUKpmC/mwTe3O+0u+MX9LvTRtHCMwFDmrYBU
G7VKvVrGypV6BWuieBsDNkmTAq8oEKKNAWmR9RbVaIP3pwmwLKHQLYpu0TQB
hALrlmx1KKpL0T2606dhBsWg0xkwXexgNXePqSWBT7B3ScZXDtztM/lvY508
bk+x/4kP933ql577J0+/+lhR7W7X8P5el4DBgbufAIe9N7/cbnxw8AoDtj7M
U2aSlJji8b3jP3SG+KfHp8d/9vF/dJTnp8enx3/+8YmQ/vT49Ph/+vi/spQ+
PT49Pj0+PT49Pj0+Pf5/Pv4XWAa8fg==
"], "Byte", ColorSpace -> "RGB", Interleaving -> True]];


(* ::Subsubsubsection::Closed:: *)
(*$PersonPlaceholderImage:*)


$PersonPlaceholderImage = Image[CompressedData["
1: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
oLsFHnTzhLPpG7pByDCYDDwcKfHE1OxJmYxb11Rm8acbe9zOqDf9jCed6cYu
gD88jSf96WZeHpA5bh7GQTcIHzfbAegG4eNmPOlMN3YBXCLzcevKyibOdKO7
ecXHdoAz3ehuXkG3AFOu8By3T9AttLDp5hgfi5OedNvafmJeFZAfDhqcJ93q
De6784yDBudJt9W1mnlJQH7MFUrWJTZpPOlWrtw0LwnIFesSmzSedCuWLprX
A+SKdYlNGk+6sSzpnthXSzzpZl4MkDexH550oxu7AIlgXWgTxY1uvOtNIlgX
2kTxoZu4Vq6yLJkEUT9q6kO3NhO3ZIj6siB0g+iIt8H50I3H3JIi3ru5fOjG
8a2kKFduWVfcmHGgm7Q23tAtKeKdvjnQjR23BIn06QAHurHjliCRHi9xoFu5
csP81QdlIr2bK3bduDAhWaxLb5zErhsTt2SxLr1xgm4QKdalN06i1k1GkjzB
nSwxni2JWjfeOTFlYlycjFq3cpVLXNMlxs1udIN4kZm7dQ2Olqh1432BE6fe
iOyscry6seMGq2s16zIcLfHqxp3JEN1qSaS68RQAHI7wKFekutHaoIt1JY6W
GHWjtUGPuBYnI9XN/FWGQChXb1rX4wiJUbc2FwHBd5QrN2rxbAfEqBu729BP
RDcFRacbjwAkzpHpd3Z9JqLpW3S6cVVC4rz09gdHpgv9n0G3/MITN4lz9Pjp
Y+/9pf8zDCZzCmuScOzdv5y7/H+Td5ZKcsrgLUDH3v3o6PEPzWsA1JDudvWL
jZfefr/3mZV4Tk5GpNvgIsnU7EkZSPBcQGpc/WJdelzvw4i23iLSbWXgZvLu
3Z6cMEkNGUwWFj7pfShjHuvaHDYR6bbrjQCkqXUf5qW7pYa4dur8Z70Pi6WL
1rU5bCLSrdZ3LFk6Wu/BebYGUkNGkjKe7H0oxWBbmcMnIt1Eq6XKDellg8/w
liucM0mIo8dPr9+531stmZlfNCnIMRKRbvuE53GS4ujxD+VF703fZubPxHJH
kA/dBldRwDFHpt9Zv7PZP32L5WCJD914V47UuPpF7dT5K70P0U0zvHtpalz5
fKNft1jOcfnQrda4z61cSXHl8/X+o1yx3IDnQ7c207fEQDfbcHo5KcS1nm4y
sInllLIb3drcqJAS/bqx72aSYumieRmADjKYEUS0w5yZNArrk+nQfcVlwj5X
KEV0dbkn3bjGJB2sa23MeNKN614TIbq7ynvxpFub7YA0iOgRgF1xphvbASkQ
0VLkrjjTrc36ZAJEdFvCrnjUjYe7PRPRRUCD8aeb/OgzL4nUOHr89LnL/zp1
/kr/jT15MDV7MpZH2/aMP922tp+wPqlMYWF5/c59+ebLr7lKF8vJ/xfFn27t
jnE8IKDMucuf977/nZsNPsjwD5f5uIwh5WWNurW1nerWZstbnSPT70hf633/
xb6s/mSZHcRuWS9edeN6Ln3EuF6P644qJ/8ze9cb+ogn3aSjyU9CGXUscZeC
EZ0bxWvffvutvBzyN/Lh2H9U985eT661o9VNzKo379ca91fXauJXuXpDfmW+
FgKiWGFh+dmzZ/IyjdfgypVbW9vfWJdYLolLN7FMFFtZ2yiWLpjXFbyI7r5A
uzukPDeCcXOFUr3x0LrKckywuvX6lyATMWlexdJF+lcsvPT2+6fO/eP2fzbF
uP77/F+E13a2K6HpJmN18QuzfCBt7vadu+t3NqXZFRY+HvwN3TuxnU3Q9omh
bn2TLxkcXpSBxMz8GfMKgWx53ubOS5sT6e51XvQH8lqXqzcdbKKNEWXd5Ju8
2hkWiln0r3Q4Ml049t5HCfq1K3nr9ujx9qPHX3fWN5h8pU5nJSTuU1gTJj/d
RLSNr+4uVa6bv8oQGt3N6w7Psq26wJO5blvb0ss2y9XrU7MnzF9WCBzpd+Xq
LZnQJTLOzEq3p62WtLOVtfUTiwev+gLsonOhVl2829r+xrF6k+v2fOm+ucmg
EbJCJvjd1cvVtZrM+j2tYY6tmzQyUUx6GYNGyJuZ+TMioKgXu3fj6baydhvL
QJ/vGt+N7lmjzuDzSZf8HMkwo+omE7Ra4x6uQVCIhuJg+NINr9tG4+7VL2/P
zC+Yf28B9qF/3ldvPkdHpWEypG615r2lyjXz7yTAqJQrNx49/lp42mqZT/0O
1E2maeXqdZoaOEDGnEuV6ytrG2KfsmjdHKgbK/zgD/GuK51yv9tft1pjk1UR
cMzM/BkZvNWam+a6yWSNJ2IgBaSniHSPHm9b6cbOGqTGicVPpM3lOrx8kW7y
3zX/8gH0mZlfkE4nqOkmrU0w/8IBrFiqXN/azn71clC3ja+aJxb3uFYCICny
mMoN6nb1y3+bf6UAIVAsXVhZWxdy0o3TIwC7qDU3sxpY7tKNKRvAICcWlzMZ
W/brJgrzLDbAnjxttSbvcf26yRjV/IsCCJbubngmui1fusy+NsD+iCOT9Liu
a5cuf3b23LL51wIQPjPzC7XmZq15b2zd/vZp9YMzfzX/QgBioVha3mjcHU+3
P52/gG4AI7FUvf601RpDtz/++e/oBjAqS5Vrjx4/HlU3cQ3dAMZgavbEUvUa
ugHoIMatrN1GNwAdhuxx6AaQCTPzpw/scegGkBUnFj/Zv8ehG0CG7D+PQzeA
bBHjNr7aewcc3QAyZ2Z+Yc8HdtANIA9kHjd45gTdAHJiqXLtv62n6AagQ+eU
1za6Aeggo8qecegGkDedlZPH6AagQ7G0LMahG4AO0uOWL11GNwAdzp67cOny
Z+gGoIBYdnrpY3QDUKArGroBKIBuAGqgG4Aa6AagBroBqIFuAGqgG4Aa6Aag
BroBqIFuAGqgG4Aa6AagBroBqIFuAGqgG4Aa6AagBroBqIFuAGqgG4Aa6Aag
BroBqIFuAGqgG4Aa6AagBroBqIFuAGqgG4Aa6AagBroBqIFuAGqgG4Aa6Aag
BroBqIFuAGqgG4Aa6AagBroBqIFuAGqgG4Aa6AagBroBqIFuAGqgG4Aa6Aag
BroBqIFuAGqgG4Aa6AagBroBqIFuAGqgG4Aa6AagBroBqIFuAGqgG4Aa6Aag
BroBqNGvGwAAAADAGPwP3noTGQ==
"], "Byte", ColorSpace -> "RGB", Interleaving -> True];


(* ::Subsubsubsection::Closed:: *)
(*$ZenoImage*)


$ZenoImage = Image[CompressedData["
1:eJzs3Xm8t0Vd/3HRFtFQkF1EXDCzpN2sLNuz1UxLMi3REJdyRcMlcC9DpXBJ
zBRbxAVwRUMRAZHQAkNRUkCBQGTfbhaF+5zze/6u1+PM4+LccIuANzd0zx/f
c53rmmtmrpn35z2fmfnMZ+79xGc+crfb3+52t9v9jn4e+YQ9fuk5z3nCCx61
qX/+8Bm7P/XJz3jSrr/5jOc+6clPes5PP/EObr54o9vdbrW////6G9/4xtLS
0jXXXOP3iiuuWFxcdHH11VcvTWFxFpY2hA1hvQ/f/OY3u7jkkksuv/xyF6tW
rVoz2umnn97FwsLC6tWrA/zCFFbPwsKGsCGs92FpxtiFK6+88qqrrprf8e9G
G210pzvd6XZT2GSTTbr4ru/6rjtM4fZT6Hrc3BA2hPUz3G6NsN122/mdY14X
sPXWW1988cXjTn0BYqfwXD0L/u3mhrAhrLchDM+p/itf+cqd73znFboNKaAF
DY0d/lOEljbo8xvCrS2cf/7543po8htvvPE8DjDH/JScxrPjfgrSXJnfgPwN
4VYRLrvssjlWV+g2oD6/A950fjwft89HBxvYfkNY/0Og7Zr2Asl+V+g2NJ87
3vGOGL6x7ZjqmacwZ/jFDWFDWI/D0sTbATXE+ncFzy9Ous18kmfM+ZTIBpK/
EWHeBGt/NGr7BoYVbTHaaEWccWct2Fh7+W+9/fu8bpcmzG+00UYrImzA/I0I
Nw5La0nn24q/9jtLs3a/0Zi/0V90i4cNmP8OhevD0o2rpTVT+LbS/040za23
xTdgfh2HGw3Lm8ir1/nuTWmyW29zb8D8Og5rVlR3mu+96XV4fQJVS8llHuFG
ZHfT+6xbPGzA/DoOKypK1V2zvJztYj7YrG6vmVa3hzh8S7CtZQwrnW9+85sy
WvxWyvza0092vt3B9foTNmD+OxQWrifMK8q/qvSqq6664oor/AJksJ/T8uWX
X37llVd6FMyGycfqtYZ5jt1Zmpove6qxBL947RWWebi+75qv46/oNW4tYQPm
v0Ph+uw9RkWlzwAzwK9atQoav/GNb6jhKnPA+6KLLrr00ks9rSMQWiu5+nrC
QOMA/LAz8fTyKQxLkspwneH6vmtFXjeLPraOwwbM38QQurpeoVS0zAexIB27
ihmwY8gBe5BemFlxjIr1ymWXXRbVf2MKA2mBf/B2Nt5FS4EptTqFVhLrVhIr
oXzFH9Cdl6EEk6/SHKrXaPTxpSt6sfUcCRswfxPDwkzTnoN2YGaAMOyNa1iC
5wsuuOCcc845++yzv/a1r7m4+OKL50ZNK4h0TUTNM7pqCoPn56F0hnyRQZJ4
2RRSq65Zton95nIYsK/AK8Ya80bvxblCtZ4jfwPmb67g8wdmhooy6sQjYIO0
8cgF7MH8ucvBtTvpFX7hnyCcNwVP/YrgZsw/1PLB2Ck8A+QD+WXXiKBCwnmY
Hz1I8cUZsjOn/TX19rnm34tzQZuDf903xLcM/2cxv3gzhZHgwF5hRXYhfCjn
1RicQNfQTwZbAt7Xv/71E0444ROf+MTRRx995JFHHnHEEUcdddRnPvOZL3zh
C1/96lfPPPNMnYLUoDcpK504HJgvncIc1WG+woxBwVCWhqYkvjQr4Qp1a9Tb
wmw2aXQH84HtHPnrpjW/rbAB8zc75q+YwoqtNCkzEIWrQbEJwxTs2DXUQeyF
F154+umnH3fccR/60If+5V/+5T3vec873vGO/fff/5//+Z8PPPDAj370o8ce
e+x///d/f+5zn/uf//mf//3f/8X8qSKSku8lU7h4Ci7SXpJBWTS+cLO5oIox
pM/TMZq+vvmZuYY2V+83YH79Dws3U5gnOPi26cdVU3ABQnNWHLTZK2OcC+0w
jMk/9alPffCDHwT4/fbbD9rf9KY37bPPPq997Wvf+MY3/uu//ut73/veD3/4
w4cccshhhx32n//5n6eddtrY+7A4m/C5ZraLLS1ILmecccaXv/zlr3zlK7oJ
b82tZEP+0NvHMOSa2QKBMD4wQZu/u0G3Wc/DzYX5OYAbSwaVAft076FpL01w
wsAIn4pOh6GoUFfg8KSTTsLhH/nIR975zneC+lvf+tb9pwD5++677+te97q3
vOUtBxxwAMx/cAqHHnoozYcK5F2j4PPPP1+a8Ty1x7+AfdZZZ8E5udAp6B2O
OeYYmhKZct1bbf9fMUcqzDWfOeaHwj8GCOOteYWsz3jYgPmbGObtHrUOZWA+
nRg9QhecQzigUs6x9H/913+5+I//+A+kjb3f/e53/+M//iN4o3TKzMEHH/yu
d73r3/7t33C+C9wOsSJ/+tOfpvx8dgpeT+en8LuQZgl+8pOf/PjHP06C3v/+
90tHanQk6R900EHuJC9yJwskQqnSgghpIjOf81yYMfYY587HrfUO6z/aC7d5
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
qZUro5SYua9XQSCnJmKPk3faaafEfmw/D8wKKBQSmJUbzMA+sTkflYKyUwad
2X4unmZOXYUDw6d/Mxa5odsCtmuJMVaNWGimSOen/5ZXGd21BukbzFfpw69o
qjh0l+sSKmsDqOonYX7koY3N5jKa3uopGSTLMe65rUcjFuyZU6sqROnHx85s
AM6dID2lIxmvWllyOsrJp+ROEZrLi15s/9qZMG85vvDCC6utHA9cP5/79L6V
bY484uhHPuKxp5929tcWXLD0pmW33Lxi2i+tWsQKTH7C9qqE+VuXLfEF7BGC
n9qNBXVSzbdiZmeKSfVecfJZBTbBZsN8svoNU9Zl+izVfsGCBbkcYOwwXwVh
i75VEq8Ge2gv+TkeXiB/9ZtKqFX5hjaqPvWpT5UzLb99J1Q6HE/OXRCnrV5D
+XASnoEN5ktTk1GibE6kCKwPvDO2FzRU2igYK/I63aHaPW71mMc8BqLw7RJj
Jl2UoBXp5XBY1OFb3vIWL5hNFajSW3Ujs38IzImlzB4JFTF5kCvffntSuhRK
80NAkmm4eall5AHXcl6Vz7PdulaNvGi8XSnE01kagfqQWt2eb6TkEa5tFQjz
bc4aW1PwzW9+Mz4/svPdH3TY97x7nx9+8MM/c9QXvnziV2684eabltwK80uX
Lr322ms3WmNW3jIxc9x+ZQosIYdUT4e97fbl8x4INJRvZT9YN5OXvneZLaHb
E9fN19hK2vdvpRUps5bCvCtprwB/xhlnGLfSU5QWwxLgJ5/YI8b4/ve/H7zh
GUWUrJ6cXzK0MiRUOKaSyhUsaPcklS03+9xR8g9vH3OrrbYyrW2+OLMUYUn4
7doMdbVEHGAGEm6Oh4N9IRiPe9zj3MFTPLHsZ5ncy8Jt0clxsWgj5+TG0DZu
vkCFdecAH+tOZxyVs3KqCYQZ7Uks5b0J5HcVdfTZyfTiArU8VM9L4xBd55yW
U02xZo77ngLiCz4/i/lWFj/pZJ4VljP6LJZCRoV5+pqJHoVl7w+2yle98rU/
9KCH7fqu93z+c8dddOGl5PmVKzcmXrv00kuvumrhkpsWLV9xM6nmpqWLFt9w
zfWLrvJ545LrbrkVw18xmXTW5l1flpsRzzhSvM5Nm1CzKTejCzgfBaYdNDIA
X86EavtWL55gbwwB8nWve13lMOizRVzi/zTc4lMqwWOQq93j00+j/hfSQBT4
au437ZvH56swmFEaYOiw+SRsueWWOK05zRcLE251sFLQNwEVNjL4mGg9RBHu
VhVmZzoI88SJSqLkwVVCsyqG4PbF6OXBPmqUQGz+BnCVbJw5PTNLcksOjb6X
ri11o9SynpghSHOmcYtAopqU0LJdRRotFh7hBLw6ykptH/RVfkL07p7tTHlo
Ik2xWkUNuCQ9fWSRtRwvWbKkAt/t1ORsM+shf4+Dof4rmP+zP92GDvt3b3jT
hw/6+OmnnbXkxluuuea6im1dfPFFVyy85KaliwnzJPklN10f4H2B+VW3LSPM
w3wwn8+E8y3RZWC+aiPLli2LzIfMU/m56sph8ldcccU555xz5plnfvWrXy1C
sJz8MA+QGA6EQzUAE9HL+lhC7CLKiY4Af9xxxyURucNIg+aSKrQSnmGsbVY8
tiIawJ+dEK4gvA19eCPktJsJ83/zN38T7POEr7JkoYLAY+pzvgV4x5NSAAY5
WAK6pG2dUty44ShriIjc2TmJ67DXLmrOn8WAJGAPZ8W2UzOYFySVeSelQ2eK
8tYfnLncO7kWt5xlb2x5gv+cMeLqz55vhRLk5/aM+aa33iKf6gT4KKj4lIxI
JULPBGRgMags8xUTTLyZlQFC/ubXYZ/9rOfC/LZ//cqdd9rlXw795HHHnnja
aWcAG8yfe+7ZZ59zBtgT4wk2YO/zlltv9C/mT7Yh9my0ZE65zub/1s3Gdq2d
auaGeYw9W2UGK59zk4Un/wTLSpmcyfOVHSl3JZy/dmpF27373e8uX0QKaaYY
0svxxx8P6iU6K8ZkNnK89Mi77747JlzOxgoIQr5/rSDuCSRmNk4FPAFJy9Xc
tJY6powBLfH5rudUA7QoiKxSPu2iovBht+0pbY2FRnco/ggwkJ6fgMQ9Pdpz
CyF0eRw+m2qGxITqbP6WAOegLEsSWaVNqJw8c4FOJKvzhZAEyyyKWX4Kue1B
FYwegWNgPMvzy4rpDrn3V7fCa3pEkYNuki6cRmAczj777AzykEC+HVreJjk9
Nr9f5e//3h899CGPhHlCzj/tsvtee+571FFHl1TzjDNOO+HEY88596tXXX0Z
9o7bz82tocP6o8BOuW5uz8ds5H1KSm/jdaiuU9a/bxE7qQnCK61YB6oNis9j
7AWYlLUskyOcU1T32msv8gkZHq8GeEdA3ahioTRZei4iNcJHHnmkSxJ4IJ+k
hNW4VUlfP/KRj7iqVLruBvYlrHjL1Ebul3Yz85Ua+mzWuZKjAlvJE7BZvK4s
xGYfpCveal2AMWc636/YfpGhozZKghAaweHTqfPt8QhPpI3iw0U1ZkvPw6dL
fMmDAsB0gBhPWX7Uox4F/Eg1/4ossaA+krDld1dtiHwVAufIrt/+7wiiL9Zm
yPP61g5FZljyjOPVknCVQcipzONi+PCPyVx99dUDfkny4Dcqgw9YznrRbx7M
7/DGtzzm0Vu8+M//6g//4IV/94Yd3vqWt3/iE4cXxLFgwTnHn/DFE7983Jln
nfrNi88n0m90PV6zatqWWr1+w52ldQrza9asnsSbb/P5YYb9VtKQO+4g1JWc
9qqrrkqFx/+JfFZA0tSxxx5L/cSWgZ+E4ztkxqIpqu95z3uqHV+dHf/CP6z6
6aSTTrrmmmssEwT4SglDeEn//JSklOsasb9ssUn4WD2SITVVzjgvx7xq4/m4
bpk3yBtZaXLWAjbgMe9ZcnKparsK4H2mg0QUFIfWpjat4vY+UZmTw3ziQVaR
kVQWXPPqrLACgLmkNMXukJjh/Lrni2c50+MSQnKHaA3KmVlvU3uLiyxPbNEo
1WvOOzrtI5v8SEXeOCT7GZxCRQwaeslVFRHl26BXnm7wK6w2OFtMHgas+JHA
kHA2M5//xL8e+ZAffsSzfvt3f+kXn/bSv3rZm3Z4y4EHHoRtLl26lDx/8ikn
HvPFzx73pc+f8dVTLr/im/OOB8tHnNRG2E/CfDtTwxrZlwzvfffW2Dt+fvHF
F6Mpsg2o0+vPPffccnsW34rJn3rqqWBfTtcyJMA/Jo/nV+3xmGOOgXmghf+K
2S1evJguQLBHIK769Kc/DfMlWDh9ameddRZR3wnVsUI7JBw4JCDttNNOZV+E
yfxj23OEDfw8twSgGpHj6Zt50bfZWkQGxBb97aBJz4roJ0DC/0uIl8sinABh
Mk/eO4kfHu18gMzPp/LK7lOGyfTuUtCH5Jzf0moTmZKgsq6nNUdfgF3+wITw
9p78W6YarRzg491HWtpkG33IlhUV58iUvdd9nFkYIzpKwkdBCxYsCAAJM0m2
8b0wPyzVm99u8/XzLiLP/z+/9f/+t5966vOft/WrX/Xa3Xbboyq3MH/a6SfD
/BeP/expp590/jfOveibX7/m2ivosLffsQLaw3yZQOa3pb5DJW/fLYW96L8z
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
WtIOMZ4aWzkS75vKCatpkcBfcDcJHA83UBCbUdHnhz70oRLV4uEp+yO3m+8u
xJ8XLFiQzxhgg7EjFfNN50UCVWdwZ58bk8lOKvDnPvc504HPu3Pq8+mnn54q
AeRhnnh/8NQKJNxvv/18KZCQVuj1wTJBIssGeJQZuxSpVUwoVQjYw7zj5eto
Ez819n9OreQ52QOBvPy96KLseU6G5GKaqoqSx3vyTInOSvpUfJ/OwDCdwsE2
RkdgYPntRxbunC3bYyoRR1lYcxIYkVAWjjYIsufj8BVBLupE3yxJ5Ha6z777
7mvErM7YO94+NwV1lst6+FDNJtYe+/IDgfcGzv9TmL/9tjXpsPpC1Fq+fGVW
QZCYilH+yd/+7ate97rt9t57r6+c+u/fuOBrVyy8+OJLvnH1NVeQavwRb8ps
U/0dzeUbRfzFiyG/W6W5DM9hx/1aAamqR/megdEYdi1pB2KtOMdNTWdCrJNL
0I1FWykq8VDiesx88n++2KqRtTPBPg8f5OO7ByETDyVftTn1vve9j4T/wQ9+
0FQeeOCB73//+9/+9rdXQdLst0GZGySRIxvFyPRSLdcClIbTeyBvYygHhrwQ
yxg8YkvzHC4XZTRVSrER1jpya+TqGaN2/1+Zb4lMUUeJlEtx2VVooQyuWZY8
nbBa+jVfRjC442W+SnmhEePw5bNqT8oNkQDWVLZJ85KL4JQWY9Vg6d9Zg2zd
wPld2w/cMnkPML/o+iUwX9z33FQus90fCMH0ttnmJS984R9D/s47v+2YL372
6+efe9bZpx31mU/921GfOuvs0yEf5stXWSqzufmtt24Swkk7jUlajCPXXXcd
ng+KJJ/EGA0sMXwidzXuMeFScwNqdbhyyCndwf777+/MvBHavXUtUadk4NGF
L1YBDzJT6MiKk8k0VZfkD+Ek+XdOjeZuZisFRcLZY489dt55Z8L2q6aWRZGY
XXxE/mPFmAB8In2B5EigimxJGmVACu1JIEVLlTwEqFIGkzfSQwviS/8tU02W
lpI1/feZlv9w9JXuoD+535evL0tROe2Hv8GLp5aVpqye2267bZb83IcKeqpW
iNEwvCUULYF2mle8/a7BrUMzvT9j/qorr6uG2tzGtWndVHxho64BJDC2667/
9NKX/uUf//EfbbvtS3fd7Z0fP+TgQw49+AP773vwRw487ktfuODC88jzq1at
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
xzpVrGKiWtFh2aPavXJttiArC/o6b2og4SlVZ/MJNgQeX5DAhz70IZ+5KBd+
1QYZ7I1a4dY1n8XVjqjwoFuls+H0XmKEZP4skGWMzMkZ1WQLKmnkiO+mU79i
akbeMIZ5OPeJjbTFZnkqxL5ghN4CLbc5EksvWJ5Uk5DfFoZ3z+s7VtNyOVTX
zbPN+h+2HwjmZ3XYMB9IOqHENcWYtBBUBJCgaJRwe0NtIspSbu5wPJpUFXOM
p2HES4Efz4QNrBJyyJ+mkgYHIdg+7gQAlaizFtAizQ5MkjCBkNTh6fBZVam8
dEa2nBxs/Gp2MjS1m5YwlgHWuwRyi0I5RduAKKIwX4XW9ISB9m4KPMcAS7lc
poWSwWL7kI+0Id+ahWwhP1E/57RR02R4SI4sr8CcBhQzz0+sDNh+ysem2p3l
YahiVAb5sv8N9dm4eTQuYa3MKRQXIjrqG9hjSskw8J+En3hj1nwpVCEX1n+b
WppsQqNBLuQnl8tNwHbftv865jsyPIvyPYhPVi0lRzuXlGqv4Jp4ZmomyGHj
QG61Lckn2BN7MmWDRK4svuBCJghUzAtsgIEZLLV7pV1LNeO7ZQKNoA5nEjOs
tnA+wq88PVnFvyYOy9IZXU3XTg3PXbMkLdktE4dSUtzBDd2kghHZfMhUbVCa
/eSoc6aWG38qXikanIN5xvCj7hRJ71i6+Cp1Vqw2nPem5JOyZ5eXu7w3VdIp
p1/nVGEkPx9HIh8no5Q2Pkq+51fri0GOyRixLLEAj+0bvTLl0lW9V44fSW5e
B68A7LyY2i5HyBY4g5Akb4haJXOznFVg71vw/2Ax38ZQ3sUjQGakaMtcWfXb
HBUy4SZgQIJ1v4jjsmaZXCu12cfJsXd8CZ+Hij2mRp7BrMg2ob18RCY9NxIy
M223LBzueeCBB5odrOmGqUG4STFlWLRFBA6Dup9AvU7ePN+izUyafs2Y0x3c
MGmtu4H0sN6Yemh3hMxz1tTSrD0umzYs5YdsVcobuTQm6BrDz/2+QpkVEPS9
HQ3fveYfzrd4OKKolG3eZajGHeDZp7WjcrfD7Sc/HF+mTHSvtjIS5oF8lNP1
SVeCeaymXEAwn7aOjVu5vAJ69zqI98gjj6TMuiTZfiRFLPvW2KLaRAHcbAi/
a/tPYf672m2Gg1ktW8cm+XxqgbwdunH/bCbl9DCGhBkIN3ElkYsv4f/Z6k2Z
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
4bBI86Tl4a+eMJ/Pp39B17+FcWWZCaidlpd+tpdCINMxy8VU5lUn5xVcCpok
eec46LYVp04bddz3fOMLkx/bFu04p71WbLRtuLIaJho1BbMzMpSyzQCVu2sP
UMwP2A/Mz+bDXzuTliHMx+eH5XzdvBtzewGpYIUHatXZwU7xZBpi+Y5GiQRQ
x9tf/epXk22Qxu5TA12cFtVgv1nFcwCjDnxxamgK0oglZKoPfehD75haSqil
wSJCELLulDWicMI+y8YG54CX5JB+WpWrfH4S4MdmUEEuepL8k7JQNAqhK0tR
pegSddqrcvNMndmgRtUMlzvfU5LMG+e1k490ZszWixxHtcHeN3Gtmd2XfCDa
KjeDff57dPi7trs4+Hx7IVg7H9kxKvPOzecn+a6pGPoV/KrUU9Ecoki1VjF5
jL2KUWShCmUSUSAc0nI1KTf+R6eWV1ibpFBH/KDAlkaJTEWeRyxUBpdAYKDK
oTQjSXVPAC/mCZNVsy2vQgsKyKW2F0rcNi54e5zbXjA1REfFLoFzQn4+CS5H
MgunQr0j2xVRB2599yAklv98O7mlgEv4r2hR+YLyl3arsmMNMAxnqnXz3qf/
y1Z5Dzr8Xdudd9NiSmM5GPbhwe1H0dv1M6lL8nkos1MRr+a92grg9OEPf5iQ
UylAkjnw5wDphCKqqoHiNPyfzOM75GCk+DMoohHKpjWCkONuDpaisL3OEmZ6
ev2BrkziCdKZTSxGgc3J7QU44j7QTlI6+uijyVdQCsMtAbm9lUU/02j+0kU2
pXvmRO2zTdixU1YbC0rM3LU5z7cNPTIFoZ3Sp6ybjyMYHrOzg/+/MP+f7fB/
is+v/c70U3Pzi+yA/ax5f+18Bt2AlOGid4e3XILL7AQeJBYA+6d/+idi/7bb
blvRW4I6caV6nQcffPA73/nOV7ziFa997WsPOeSQrByaJcBVFo4Xv/jFu+yy
i5vAajisBDk4lSR8dklaO19Z/papFT7mLRAIgsq3oeKMSC93ylLugGLGkzKH
Z/8H19IyD193R7Is6V5JDPL/PPnkkwsZKKCm89OI8/asTnph4DA/QqIa/LE9
vXY+Era2GaByd+0Bh/n/bGuE70ods8x/1uY5N71yu5Nt0FQRzzvmLu7f7ty+
/KGHHkq93W677Z7//OdX3YDwQ+clvdCCyzf1W7/1W2iBgES6rrgDfNJhSUrE
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
LoI8
"], "Byte", ColorSpace -> "RGB", Interleaving -> True];


(* ::Subsubsection::Closed:: *)
(*$IntegerToTimeList :*)


$IntegerToTimeList = {1 -> "1 sec", 2 -> "2 sec", 4 -> "4 sec", 8 -> "8 sec", 15 -> "15 sec", 30 -> "30 sec",
                      60 -> "1 min", 120 -> "2 min", 300 -> "5 min", 900-> "15 min", 3600 -> "1 hour",
                      1440 -> "4 hours", Infinity -> "\[Infinity] days"};


(* ::Subsubsection::Closed:: *)
(*Italic and colored characters and phrases :*)


$Black0 = Style ["0", Black];

$ItalMathematica = Ital ["Mathematica"];
$ItalA = Ital ["A"];
$ItalC = Ital ["C"];
$ItalE = Ital ["E"];
$Italf = Ital ["f"];
$ItalF = Ital ["F"];
$ItalG = Ital ["G"];
$ItalH = Ital ["H"];
$ItalI = Ital ["I"];
$Italj = Ital ["j"];
$ItalJ = Ital ["J"];
$Italk = Ital ["k"];
$ItalK = Ital ["K"];
$ItalL = Ital ["L"];
$Italm = Ital ["m"];
$Italn = Ital ["n"];
$Italp = Ital ["p"];
$Italq = Ital ["q"];
$Itals = Ital ["s"];
$ItalS = Ital ["S"];
$Italt = Ital ["t"];
$Italu = Ital ["u"];
$Italv = Ital ["v"];
$Italx = Ital ["x"];
$Italy = Ital ["y"];
$ItalY = Ital ["Y"];


(* ::Subsubsection::Closed:: *)
(*Math Paste buttons :*)


(* ::Subsubsubsection::Closed:: *)
(*$ExponentBuiltUpRootButtonArgs et al.:*)


$ExponentBuiltUpRootButtonArgs = {"\!\(\*SuperscriptBox[\(\[SelectionPlaceholder]\), \(\[Placeholder]\)]\)", "\!\(\*SuperscriptBox[\(\[ExponentialE]\), \(\[SelectionPlaceholder]\)]\)",
  "\!\(\*SuperscriptBox[\(2\), \(\[SelectionPlaceholder]\)]\)", "\!\(\*SuperscriptBox[\(10\), \(\[SelectionPlaceholder]\)]\)",
  "\!\(\*FractionBox[\(\[SelectionPlaceholder]\), \(\[Placeholder]\)]\)", "\!\(\*SqrtBox[\(\[SelectionPlaceholder]\)]\)", "\!\(\*RadicalBox[\(\[SelectionPlaceholder]\), \(\[Placeholder]\)]\)"};
$OperatorsButtonArgs = {"+", "-", "/", "^", "!"};
$PunctuationArgs = {"\"", "(\[SelectionPlaceholder])", "[\[SelectionPlaceholder]]", ", "};
$DigitsButtonArgs = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
$PiAndEButtonArgs = {"\[Pi]", "\[ExponentialE]"};
$Log10Log2LogEButtonArgs = {{"\!\(\*SubscriptBox[\(Log\), \(2\)]\)", "Log2 [\[SelectionPlaceholder]]"},
  {"\!\(\*SubscriptBox[\(Log\), \(10\)]\)", "Log10 [\[SelectionPlaceholder]]"}, {"Log","Log [\[SelectionPlaceholder]]"}};
$TrigButtonArgs = {{"Sin", "Sin [\[SelectionPlaceholder]]"}, {"Cos", "Cos [\[SelectionPlaceholder]]"}, {"Tan", "Tan [\[SelectionPlaceholder]]"},
  {"Csc", "Csc [\[SelectionPlaceholder]]"}, {"Sec", "Sec [\[SelectionPlaceholder]]"}, {"Cot", "Cot [\[SelectionPlaceholder]]"}};
$InverseTrigButtonArgs = {{"ArcSin", "ArcSin [\[SelectionPlaceholder]]"},{"ArcCos", "ArcCos [\[SelectionPlaceholder]]"}, {"ArcTan", "ArcTan [\[SelectionPlaceholder]]"},
 {"ArcCsc", "ArcCsc [\[SelectionPlaceholder]]"}, {"ArcSec", "ArcSec [\[SelectionPlaceholder]]"}, {"ArcCot", "ArcCot [\[SelectionPlaceholder]]"}};
$MoreConstantsButtonArgs = {EulerGamma, Catalan, Khinchin, Glaisher, GoldenRatio,
  "StieltjesGamma [1]", "StieltjesGamma [2]", "StieltjesGamma [3]", "StieltjesGamma [4]", "StieltjesGamma [5]"};


(* ::Subsubsubsection::Closed:: *)
(*$NForMeritGoalArgs :*)


$NForMeritGoalArgs = {
  {"NForMeritGoal [nonFloatConstant, $LowestExcellentMerit]", "\"NForMeritGoal [\[SelectionPlaceholder], $LowestExcellentMerit]\""},
  {"$LowestGoodMerit", "$LowestGoodMerit"},
  {"$LowestMediumMerit", "$LowestMediumMerit"},
  {"$LowestPoorMerit", "$LowestPoorMerit"},
  {"$LowestBadMerit", "$LowestBadMerit"}};


(* ::Subsubsubsection::Closed:: *)
(*$NumericApproximationArgs :*)


$NumericApproximationArgs = {
  {"N [nonFloatConstant, precision]", "\"N [\[SelectionPlaceholder], \[SelectionPlaceholder]]\""},
  {"NIntegrate [expression, {var, a, b}, WorkingPrecision \[RightArrow] ...]", "NIntegrate [\[SelectionPlaceholder], {\[SelectionPlaceholder], \[SelectionPlaceholder], \[SelectionPlaceholder]}, WorkingPrecision \[RightArrow] \[SelectionPlaceholder]]"},
  {"NSum [expression, {var, a, b}, WorkingPrecision \[RightArrow] ...]", "NSum [\[SelectionPlaceholder], {\[SelectionPlaceholder], \[SelectionPlaceholder], \[SelectionPlaceholder]}, WorkingPrecision \[RightArrow] \[SelectionPlaceholder]]"},
  {"NProduct [expression, {var, a, b}, WorkingPrecision \[RightArrow] ...]", "NProduct [\[SelectionPlaceholder], {\[SelectionPlaceholder], \[SelectionPlaceholder], \[SelectionPlaceholder]}, WorkingPrecision \[RightArrow] \[SelectionPlaceholder]]"},
  {"FindRoot [eqn, {var, guess}, WorkingPrecision \[RightArrow] ...][[1, 2]]", "\"FindRoot [\[SelectionPlaceholder] == \[SelectionPlaceholder], {\[SelectionPlaceholder], \[SelectionPlaceholder]}, WorkingPrecision -> \[SelectionPlaceholder]][[1, 2]]\""},
  {"FindMinimum [..., {var, guess}, WorkingPrecision \[RightArrow] ...][[1]]",
    "FindMinimum [\[SelectionPlaceholder], {\[SelectionPlaceholder], \[SelectionPlaceholder]}, WorkingPrecision \[RightArrow] \[SelectionPlaceholder]][[1]]"},
  {"FindMaximum [..., {var, guess}, WorkingPrecision \[RightArrow] ...][[1]]",
    "FindMaximum [\[SelectionPlaceholder], {\[SelectionPlaceholder], \[SelectionPlaceholder]}, WorkingPrecision \[RightArrow] \[SelectionPlaceholder]][[1]]"}
};


(* ::Subsubsubsection::Closed:: *)
(*$BasicButtonArgs :*)


$BasicButtonArgs = {{"Sinh", "Sinh [\[SelectionPlaceholder]]"}, {"ArcSinh", "ArcSinh [\[SelectionPlaceholder]]"},
                    {"Cosh", "Cosh [\[SelectionPlaceholder]]"}, {"ArcCosh", "ArcCosh [\[SelectionPlaceholder]]"},
                    {"Tanh", "Tanh [\[SelectionPlaceholder]]"}, {"ArcTanh", "ArcTanh [\[SelectionPlaceholder]]"},
                    {"Csch", "Csch [\[SelectionPlaceholder]]"}, {"ArcCsch", "ArcCsch [\[SelectionPlaceholder]]"},
                    {"Sech", "Sech [\[SelectionPlaceholder]]"}, {"ArcSech", "ArcSech [\[SelectionPlaceholder]]"},
                    {"Coth", "Coth [\[SelectionPlaceholder]]"}, {"ArcCoth", "ArcCoth [\[SelectionPlaceholder]]"},
                    {"Root [minimalPolynomial, n \[LessEqual] degree]", "Root [\[SelectionPlaceholder], \[SelectionPlaceholder]]"}, {"ProductLog [-1 or 0, ...]", "ProductLog [\[SelectionPlaceholder], \[SelectionPlaceholder]]"},
                    {"Gudermannian", "Gudermannian [\[SelectionPlaceholder]]"}, {"InverseGudermannian", "InverseGudermannian [\[SelectionPlaceholder]]"},
                    {"Haversine", "Haversine [\[SelectionPlaceholder]]"}, {"InverseHaversine", "InverseHaversine [\[SelectionPlaceholder]]"}};


(* ::Subsubsubsection::Closed:: *)
(*$BesselFamilyButtonArgs :*)


$BesselFamilyButtonArgs = {
 {"BesselJ [0 \[LessEqual] n \[LessEqual] 4, x]", "BesselJ [\[SelectionPlaceholder], \[SelectionPlaceholder]]"}, {"RealInverseBesselJ [0 \[LessEqual] n \[LessEqual] 4, y, branch]", "RealInverseBesselJ [\[SelectionPlaceholder], \[SelectionPlaceholder], \[SelectionPlaceholder]]"},
 {"BesselY [0 \[LessEqual] n \[LessEqual] 4, x]", "BesselY [\[SelectionPlaceholder], \[SelectionPlaceholder]]"}, {"RealInverseBesselY [0 \[LessEqual] n \[LessEqual] 4, y, branch]", "RealInverseBesselY [\[SelectionPlaceholder], \[SelectionPlaceholder], \[SelectionPlaceholder]]"},
 {"BesselI [0 \[LessEqual] n \[LessEqual] 4, x]", "BesselI [\[SelectionPlaceholder], \[SelectionPlaceholder]]"}, {"RealInverseBesselI [0 \[LessEqual] n \[LessEqual] 4, y]", "RealInverseBesselI [\[SelectionPlaceholder], \[SelectionPlaceholder]]"},
 {"BesselK [0 \[LessEqual] n \[LessEqual] 4, x]", "BesselK [\[SelectionPlaceholder], \[SelectionPlaceholder]]"}, {"RealInverseBesselK [0 \[LessEqual] n \[LessEqual] 4, y]", "RealInverseBesselK [\[SelectionPlaceholder], \[SelectionPlaceholder]]"},
 {"SphericalBesselJ [0 \[LessEqual] n \[LessEqual] 4, x]", "SphericalBesselJ [\[SelectionPlaceholder], \[SelectionPlaceholder]]"},
   {"RealInverseSphericalBesselJ [0 \[LessEqual] n \[LessEqual] 4, y, branch]", "RealInverseSphericalBesselJ [\[SelectionPlaceholder], \[SelectionPlaceholder], \[SelectionPlaceholder]]"},
 {"SphericalBesselY [0 \[LessEqual] n \[LessEqual] 4, x]", "SphericalBesselY [\[SelectionPlaceholder], \[SelectionPlaceholder]]"},
   {"RealInverseSphericalBesselY [0 \[LessEqual] n \[LessEqual] 4, y, branch]", "RealInverseSphericalBesselY [\[SelectionPlaceholder], \[SelectionPlaceholder], \[SelectionPlaceholder]]"},
 {"StruveL [0 \[LessEqual] n \[LessEqual] 1, x]", "StruveL [\[SelectionPlaceholder], \[SelectionPlaceholder]]"}, {"RealInverseStruveL [0 \[LessEqual] n \[LessEqual] 4, y]", "RealInverseStruveL [\[SelectionPlaceholder], \[SelectionPlaceholder]]"},
 {"AiryAi", "AiryAi [x]"}, {"RealInverseAiryAi [y, branch \[LessEqual] 1]", "RealInverseAiryAi [\[SelectionPlaceholder], \[SelectionPlaceholder]]"},
 {"AiryBi", "AiryBi [x]"}, {"RealInverseAiryBi [y, branch \[LessEqual] 1]", "RealInverseAiryBi [\[SelectionPlaceholder], \[SelectionPlaceholder]]"}
};


(* ::Subsubsubsection::Closed:: *)
(*$ZetaFamilyButtonArgs :*)


$ZetaFamilyButtonArgs = {
{"Zeta", "Zeta [\[SelectionPlaceholder]]"}, {"RealInverseZeta [y, 1 or 2]", "RealInverseZeta [\[SelectionPlaceholder], \[SelectionPlaceholder]]"},
{"DirichletBeta", "DirichletBeta [\[SelectionPlaceholder]]"},
  {"RealInverseDirichletBeta [y, 0 or 1]", "RealInverseDirichletBeta [\[SelectionPlaceholder], \[SelectionPlaceholder]]"},
{"DirichletEta", "DirichletEta [\[SelectionPlaceholder]]"},
  {"RealInverseDirichletEta [y, 0 or 1]", "RealInverseDirichletEta [\[SelectionPlaceholder], \[SelectionPlaceholder]]"},
{"DirichletLambda", "DirichletLambda[\[SelectionPlaceholder]]"},
  {"RealInverseDirichletLambda [y, 1 or 2]", "RealInverseDirichletLambda [\[SelectionPlaceholder], \[SelectionPlaceholder]]"},
{"RiemannSiegelTheta", "RiemannSiegelTheta [\[SelectionPlaceholder]]"},
  {"RealInverseRiemannSiegelTheta [y, 1 or 2]", "RealInverseRiemannSiegelTheta [\[SelectionPlaceholder], \[SelectionPlaceholder]]"},
{"RamanujanTauTheta", "RamanujanTauTheta [\[SelectionPlaceholder]]"},
  {"RealInverseRamanujanTauTheta [y, 1 or 2]", "RealInverseRamanujanTauTheta [\[SelectionPlaceholder], \[SelectionPlaceholder]]"},
{"PolyLog [2 or 3, x]", "PolyLog [\[SelectionPlaceholder], \[SelectionPlaceholder]]"}, {"RealInversePolyLog [2 or 3, y]", "RealInversePolyLog [\[SelectionPlaceholder], \[SelectionPlaceholder]]"}
};            


(* ::Subsubsubsection::Closed:: *)
(*$FactorialFamilyButtonArgs :*)


$FactorialFamilyButtonArgs = {
 {"Gamma", "Gamma [\[SelectionPlaceholder]]"}, {"RealInverseGamma [y, 1 \[LessEqual] branch \[LessEqual] 2]", "RealInverseGamma [\[SelectionPlaceholder], \[SelectionPlaceholder]]"},
 {"LogGamma", "LogGamma [\[SelectionPlaceholder]]"}, {"RealInverseLogGamma [y, 1 \[LessEqual] branch \[LessEqual] 2]", "RealInverseLogGamma [\[SelectionPlaceholder], \[SelectionPlaceholder]]"},
 {"(\[Ellipsis])!!", "(\[SelectionPlaceholder])!!"}, {"RealInverseFactorial2 [y, 0 \[LessEqual] branch \[LessEqual] 3]", "RealInverseFactorial2 [\[SelectionPlaceholder], \[SelectionPlaceholder]]"},
 {"BarnesG", "BarnesG [\[SelectionPlaceholder]]"}, {"RealInverseBarnesG [y, 1 \[LessEqual] branch \[LessEqual] 3]", "RealInverseBarnesG [\[SelectionPlaceholder], \[SelectionPlaceholder]]"},
 {"LogBarnesG", "LogBarnesG [\[SelectionPlaceholder]]"}, {"RealInverseLogBarnesG [y, 1 \[LessEqual] branch \[LessEqual] 3]", "RealInverseLogBarnesG [\[SelectionPlaceholder], \[SelectionPlaceholder]]"},
 {"Hyperfactorial", "Hyperfactorial [\[SelectionPlaceholder]]"}, {"RealInverseHyperfactorial [y, 1 \[LessEqual] branch \[LessEqual] 3]", "RealInverseHyperfactorial [\[SelectionPlaceholder], \[SelectionPlaceholder]]"},
 {"PolyGamma [1 \[LessEqual] n \[LessEqual] 2, x]", "PolyGamma [\[SelectionPlaceholder], \[SelectionPlaceholder]]"}, {"RealInversePolyGamma [1 \[LessEqual] n \[LessEqual] 2, y]", "RealInversePolyGamma [\[SelectionPlaceholder], \[SelectionPlaceholder]]"}
};


(* ::Subsubsubsection::Closed:: *)
(*$ExpIntegralFamilyButtonArgs :*)


$ExpIntegralFamilyButtonArgs = {
 {"ExpIntegralEi", "ExpIntegralEi [\[SelectionPlaceholder]]"}, {"RealInverseExpIntegralEi [y, 0 or 1]", "RealInverseExpIntegralEi [\[SelectionPlaceholder], \[SelectionPlaceholder]]"},
 {"LogIntegral", "LogIntegral [\[SelectionPlaceholder]]"}, {"RealInverseLogIntegral [y, 1 or 2]", "RealInverseLogIntegral [\[SelectionPlaceholder], \[SelectionPlaceholder]]"},
 {"SinhIntegral", "SinhIntegral [\[SelectionPlaceholder]]"}, {"RealInverseSinhIntegral", "RealInverseSinhIntegral [\[SelectionPlaceholder]]"},
 {"CoshIntegral", "CoshIntegral [\[SelectionPlaceholder]]"}, {"RealInverseCoshIntegral", "RealInverseCoshIntegral [\[SelectionPlaceholder]]"},
 {"SinIntegral", "SinIntegral [\[SelectionPlaceholder]]"}, {"RealInverseSinIntegral [y, branch]", "RealInverseSinIntegral [\[SelectionPlaceholder], \[SelectionPlaceholder]]"},
 {"CosIntegral", "CosIntegral [\[SelectionPlaceholder]]"}, {"RealInverseCosIntegral [y, branch]", "RealInverseCosIntegral [\[SelectionPlaceholder], \[SelectionPlaceholder]]"},
 {"ExpIntegralE [2 \[LessEqual] n \[LessEqual] 4, x]", "ExpIntegralE [\[SelectionPlaceholder], \[SelectionPlaceholder]]"},
   {"RealInverseExpIntegralE [2 \[LessEqual] n \[LessEqual] 4, y]", "RealInverseExpIntegralE [\[SelectionPlaceholder], \[SelectionPlaceholder]]"}
};


(* ::Subsubsubsection::Closed:: *)
(*$EllipticFamilyButtonArgs :*)


$EllipticFamilyButtonArgs = {
 {"EllipticK", "EllipticK [\[SelectionPlaceholder]]"}, {"RealInverseEllipticK", "RealInverseEllipticK [\[SelectionPlaceholder]]"},
 {"EllipticE", "EllipticE [\[SelectionPlaceholder]]"}, {"RealInverseEllipticE", "RealInverseEllipticE [\[SelectionPlaceholder]]"},
 {"ArithmeticGeometricMean", "ArithmeticGeometricMean [1, \[SelectionPlaceholder]]"},
   {"RealInverseArithmeticGeometricMean", "RealInverseArithmeticGeometricMean [1, \[SelectionPlaceholder]]"},
 {"EllipticTheta [2, 0, x]", "EllipticTheta [2, 0, \[SelectionPlaceholder]]"},
   {"RealInverseEllipticTheta [2, 0, y]", "RealInverseEllipticTheta [2, 0, \[SelectionPlaceholder]]"},
 {"EllipticTheta [3, 0, x]", "EllipticTheta [3, 0, \[SelectionPlaceholder]]"},
   {"RealInverseEllipticTheta [3, 0, y]", "RealInverseEllipticTheta [3, 0, \[SelectionPlaceholder]]"},
 {"EllipticNomeQ", "EllipticNomeQ [\[SelectionPlaceholder]]"}, {"InverseEllipticNomeQ", "InverseEllipticNomeQ [\[SelectionPlaceholder]]"}
};


(* ::Subsubsubsection::Closed:: *)
(*$ErfFamilyButtonArgs :*)


$ErfFamilyButtonArgs = {
 {"Erf", "Erf [\[SelectionPlaceholder]]"}, {"InverseErf", "InverseErf [\[SelectionPlaceholder]]"},
 {"Erfc", "Erfc [\[SelectionPlaceholder]]"}, {"InverseErfc", "InverseErfc [\[SelectionPlaceholder]]"},
 {"Erfi", "Erfi [\[SelectionPlaceholder]]"}, {"RealInverseErfi", "RealInverseErfi [\[SelectionPlaceholder]]"},
 {"DawsonF", "DawsonF [\[SelectionPlaceholder]]"}, {"RealInverseDawsonF [y, 0 \[LessEqual] branch \[LessEqual] 2]", "RealInverseDawsonF [\[SelectionPlaceholder], \[SelectionPlaceholder]]"},
 {"FresnelS", "FresnelS [\[SelectionPlaceholder]]"}, {"RealInverseFresnelS [y, branch]", "RealInverseFresnelS [\[SelectionPlaceholder], \[SelectionPlaceholder]]"},
 {"FresnelC", "FresnelC [\[SelectionPlaceholder]]"}, {"RealInverseFresnelC [y, branch]", "RealInverseFresnelC [\[SelectionPlaceholder], \[SelectionPlaceholder]]"}
};


(* ::Subsubsubsection::Closed:: *)
(*$MathPasteButtons :*)


$MathPasteButtons = Row [{
  Grid[Partition[
    PasteButton [RawBoxes[#], Appearance -> "FramedPalette", Background -> $MathPasteButtonBackgroundColor(* ,Enabled -> False*)] & /@ 
    $ExponentBuiltUpRootButtonArgs, Length[$ExponentBuiltUpRootButtonArgs]],
       Spacings -> 0.0], "   ",
  Grid[Partition[
    PasteButton [RawBoxes[#], Appearance -> "FramedPalette", Background -> $MathPasteButtonBackgroundColor]& /@ 
    $OperatorsButtonArgs, Length[$OperatorsButtonArgs]],
       Spacings -> 0.0], "   ",
  Grid[Partition[
    PasteButton [RawBoxes[#], Appearance -> "FramedPalette", Background -> $MathPasteButtonBackgroundColor]& /@ 
    $PunctuationArgs, Length[$PunctuationArgs]],
       Spacings -> 0.0], "   ",
  Grid[Partition[
    PasteButton [RawBoxes[#], Appearance -> "FramedPalette", Background -> $MathPasteButtonBackgroundColor]& /@ 
    $DigitsButtonArgs, Length[$DigitsButtonArgs]],
       Spacings -> 0.0], "   ",
  Grid[Partition[
    PasteButton [RawBoxes[#], Appearance -> "FramedPalette", Background -> $MathPasteButtonBackgroundColor]& /@ 
    $PiAndEButtonArgs, Length[$PiAndEButtonArgs]],
       Spacings -> 0.0], "   ",
  Grid[Partition[
    PasteButton [RawBoxes[First[#]], RawBoxes[Last[#]], Appearance -> "FramedPalette", Background -> $MathPasteButtonBackgroundColor] & /@
    $Log10Log2LogEButtonArgs, Length[$Log10Log2LogEButtonArgs]],
       Spacings -> 0.0], "   ",
  Grid[Partition[
    PasteButton [RawBoxes[First[#]], RawBoxes[Last[#]], Appearance -> "FramedPalette", Background -> $MathPasteButtonBackgroundColor] & /@ 
    $TrigButtonArgs, Length[$TrigButtonArgs]],
       Spacings -> 0.0], "   ",
 Grid[Partition[
    PasteButton [RawBoxes[First[#]], RawBoxes[Last[#]], Appearance -> "FramedPalette", Background -> $MathPasteButtonBackgroundColor] & /@ 
    $InverseTrigButtonArgs, Length[$InverseTrigButtonArgs]],
      Spacings -> 0.0]
 }];


$MoreConstantsPasteButtons =   Grid[Partition[
    PasteButton [RawBoxes[#], Appearance -> "FramedPalette", Background -> $MathPasteButtonBackgroundColor]& /@ 
    $MoreConstantsButtonArgs, 1],
       Spacings -> 0.0];


$BasicButtons = Grid [Partition [
   PasteButton [RawBoxes[First[#]], RawBoxes[Last[#]], Appearance -> "FramedPalette", Background -> $MathPasteButtonBackgroundColor] & /@ 
   $BasicButtonArgs, 2],
       Spacings -> {0.3, 0.3}];


$BesselFamilyButtons = Grid [Partition [
   PasteButton [RawBoxes[First[#]], RawBoxes[Last[#]], Appearance -> "FramedPalette", Background -> $MathPasteButtonBackgroundColor] & /@ 
   $BesselFamilyButtonArgs, 2],
       Spacings -> {0.3, 0.3}];


$ZetaFamilyButtons = Grid [Partition [
   PasteButton [RawBoxes[First[#]], RawBoxes[Last[#]], Appearance -> "FramedPalette", Background -> $MathPasteButtonBackgroundColor] & /@ 
   $ZetaFamilyButtonArgs, 2],
       Spacings -> {0.3, 0.3}];


$FactorialFamilyButtons = Grid [Partition [
   PasteButton [RawBoxes[First[#]], RawBoxes[Last[#]], Appearance -> "FramedPalette", Background -> $MathPasteButtonBackgroundColor] & /@ 
   $FactorialFamilyButtonArgs, 2],
       Spacings -> {0.3, 0.3}];


$ExpIntegralFamilyButtons =
Grid [Partition [
   PasteButton [RawBoxes[First[#]], RawBoxes[Last[#]], Appearance -> "FramedPalette", Background -> $MathPasteButtonBackgroundColor] & /@ 
   $ExpIntegralFamilyButtonArgs, 2],
       Spacings -> {0.3, 0.3}];


$EllipticFamilyButtons = Grid [Partition [
   PasteButton [RawBoxes[First[#]], RawBoxes[Last[#]], Appearance -> "FramedPalette", Background -> $MathPasteButtonBackgroundColor] & /@ 
   $EllipticFamilyButtonArgs, 2],
       Spacings -> {0.3, 0.3}];


$ErfFamilyButtons = Grid [Partition [
   PasteButton [RawBoxes[First[#]], RawBoxes[Last[#]], Appearance -> "FramedPalette", Background -> $MathPasteButtonBackgroundColor] & /@ 
   $ErfFamilyButtonArgs, 2],
       Spacings -> {0.3, 0.3}];


(* ::Subsubsubsection::Closed:: *)
(*$MoreFunctionsPasteButtons :*)


$MoreFunctionsPasteButtons = TabView [{
  "Other basic" -> $BasicButtons,
  "Bessel" -> $BesselFamilyButtons,
  Zeta -> $ZetaFamilyButtons,
  Factorial -> $FactorialFamilyButtons,
  "ExpIntegrals" -> $ExpIntegralFamilyButtons,
  "Elliptic" -> $EllipticFamilyButtons,
  Erf -> $ErfFamilyButtons}, ImageSize -> Automatic];


(* ::Subsubsubsection::Closed:: *)
(*$NForMeritGoalButtons :*)


$NForMeritGoalButtons = Grid[Partition[
    PasteButton [RawBoxes[First[#]], RawBoxes[Last[#]], Appearance -> "FramedPalette", Background -> $MathPasteButtonBackgroundColor] & /@ 
    $NForMeritGoalArgs, 1],
       Spacings -> 0.0];


(* ::Subsubsubsection::Closed:: *)
(*$NumericApproximationButtons :*)


$NumericApproximationButtons = Grid[Partition[
    PasteButton [RawBoxes[First[#]], RawBoxes[Last[#]], Appearance -> "FramedPalette", Background -> $MathPasteButtonBackgroundColor] & /@ 
    $NumericApproximationArgs, 1],
       Spacings -> 0.0];


(* ::Subsubsection::Closed:: *)
(*$PlotMarkers :*)


$PlotMarkers = Map [Style[#, Black] &,
                    {"\[FilledSmallCircle]", "\[FilledSmallSquare]", "\[FilledDiamond]", "\[FilledUpTriangle]", "\[FilledDownTriangle]", "\[EmptyCircle]", "\[EmptySmallSquare]", "\[EmptyDiamond]",(* hollow up triangle ?? *) "\[EmptyDownTriangle]"}];


(* ::Subsubsection::Closed:: *)
(*Questionnaire :*)


$Questionnaire =
"   Here are some questions that we have, if you want to influence future versions by email using the \"Contact us\" tab :

1.  What additional Mathematica functions and named constants would you like modeled ?
2.  What additional Mathematica functions and named constants would you like to be choosen by default
     if it does not dramatically increase average search time ?
3.  With the exception of rational multiples of Pi for trigonometric functions and of algebraic numbers for logarithms,
     inverse hyperbolic and inverse trigonometric functions, most current function models model only rational arguments.
     What additional arguments should we model for specific modeled functions and ones that you want us to model ?
4.  Most current non-functional models are one of the forms
          float = algebraicNumber * c0,
          float = r1*c1 + r2*c2 + ... + rm*cm,
          float = c1^r1 * c2^r2 * ... * cm^rm,   (: for example,  c1 = 2,  c2 = 3,  and  c3 = Pi^Pi  models  (4/27) * Pi^(7*Pi/11).)
          float = (n1*c1 + n2*c2 + ... + nm*cm) / (N1*C1 + N2*C2 + ... + Nk*Ck),
        where  c0  through  cm  and  C1  through  Ck  are either 1 or symbolic constants such as  Pi,  Sqrt[2], or  Log [2];
        r1  through  rm  are unknown rational numbers;  n1  through  nm  and  N1  through  Nk  are unknown integers:
     What such models do you suggest that do not appear to be implemented ?
     The necessary Precision of the float and the computing time increase dramatically with the total number of
         unknown coefficients even when many of the resulting candidate coefficients are 0. (The maximum current
         number for any model is 9.)
     Therefore it is impractical to have one comprehensive model for each of the above types.
5.  What additional models would you like that are not one of these forms or a Mathematica function of one of them ?

       -- Thanks in advance for your help!"; 


(* ::Subsubsection::Closed:: *)
(*Tooltip strings :*)


(* ::Subsubsubsection::Closed:: *)
(*$ProposeTabTimeLimitTooltip :*)


$ProposeTabTimeLimitTooltip =
"\[Bullet] This is the time limit for the search phase.
\[Bullet] Candidates found before then are displayed.
\[Bullet] The required search time often increases beyond 16 digits.";


(* ::Subsubsubsection::Closed:: *)
(*$ReasonsForAllTerribleTooltip*)


$ReasonsForAllTerribleTooltip =
"1: The real number you seek cannot be expressed in closed form
   even with all of the functions and special constants ever published.
   (This is true of most real numbers, as suggested by repeatedly
   choosing \"Random float\" on the popup example menu.)
2: AskConstants did not try fitting an applicable model.
   (Use the \"Choose functions\" and \"Choose named constants\" subtabs to
   include some more functions and constants that you suspect are relevant
   to Your example.)
3: You have not entered enough correctly-rounded digits.";


(* ::Subsubsubsection::Closed:: *)
(*$TruncateDigitsTooltip :*)


$TruncateDigitsTooltip = Row [{Bolde ["Truncate"], " successive
trailing digits rather than rounding."}];


$AccessibleVariablesString = "The variables in this menu are accessible in your notebook";


(* ::Subsubsection::Closed:: *)
(*Various other things :*)


$CheckedBox = Style ["\[CheckmarkedBox]", Magnification -> 1.8];
$EmptyFieldBelowRuler = StringRepeat [" ", 80];
$UncheckedBox = Style["\[EmptySquare]", Magnification -> 1.8];

$ProposeExpressionWidth = 438;
$ScatterPlotImageWidth = 472;
$AskConstantsWindowWidth = (* :! Changing total requires redoing DigitRulers & Input FieldSizes: *)
  $ProposeExpressionWidth + $ScatterPlotImageWidth;


$MinPurposeSubtabHeight = 200;
$MinFloatInputHelpSubtabHeight = 390;
$MinChooseFunctionsSubtabHeight = 400;
$MinChooseFunctionsHelpSubtabHeight = 240;
$MinChooseNamedConstantsSubtabHeight = 395;
$MinChooseNamedConstantsHelpSubtabHeight = 260;
$MinResultFormatSubtabHeight = 190;
$MinResultSubtabHeight = 400;
  (* ImageSize -> Automatic is insufficient because of OpenerViews that need more space when opened: *)
$ProposeSubtabsViewHeight = Max [$MinPurposeSubtabHeight, $MinFloatInputHelpSubtabHeight,
  $MinChooseFunctionsSubtabHeight, $MinChooseFunctionsHelpSubtabHeight, $MinChooseNamedConstantsSubtabHeight,
  $MinChooseNamedConstantsHelpSubtabHeight, $MinResultFormatSubtabHeight, $MinResultSubtabHeight];


Unprotect [$AskConstantsVersionNumber];
  $AskConstantsVersionNumber = 1.2;
Protect [$AskConstantsVersionNumber];

$BlankInputField = Null;
$ExpressionDisplayWidth = 30;
$MathPasteButtonBackgroundColor = Lighter[LightGray];
$MaxNumberDisplayedHiddenArbPrecisionDigits = 10;
$maxNumberOfRejects = 36;
$AllNSimplifyIO = {};
$AllProposeIO = {};
$TooltipColor1 =  Darker [Magenta];
(*$TooltipColor2 = Red;*)


(* ::Subsection::Closed:: *)
(*Utility functions :*)


(* ::Subsubsubsubsection::Closed:: *)
(*ArbPrecisionWithGrayHiddenDigits :*)


ArbPrecisionWithGrayHiddenDigits [arbPrecisionFloat_] :=
  Module [{roundedPrecision = Round [Precision [arbPrecisionFloat]],
           numberString = ToString [First [Hold [InputForm [arbPrecisionFloat, NumberMarks -> True]]]],
           numberOfSignificantDigitsToDisplay, numberOfNonDigits,
           digitsToDisplay, numberOfPadding0s, lengthOfBlackPart, positionOfTimesUpArrow},
    numberOfSignificantDigitsToDisplay = Max [16, roundedPrecision + $MaxNumberDisplayedHiddenArbPrecisionDigits];
    numberOfNonDigits = StringPosition [numberString,  "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9",  1][[1,1]] - 1;
    If [StringPosition [numberString, ".", 1][[1,1]] >= numberOfNonDigits,
        ++numberOfNonDigits];
    digitsToDisplay = StringTake [numberString,
      Min [StringPosition [numberString, "`", 1][[1,1]] - 1,  numberOfNonDigits + numberOfSignificantDigitsToDisplay]];
    numberOfPadding0s = numberOfNonDigits + numberOfSignificantDigitsToDisplay - StringLength [digitsToDisplay];
    If [numberOfPadding0s > 0,
        digitsToDisplay = StringJoin [digitsToDisplay, StringRepeat ["0", numberOfPadding0s]]];
    lengthOfBlackPart = numberOfNonDigits + roundedPrecision;
    positionOfTimesUpArrow = StringPosition [numberString, "*^", 1];
    Row [If [positionOfTimesUpArrow === {},
             {StringTake [digitsToDisplay, lengthOfBlackPart], 
              Style [StringDrop [digitsToDisplay, lengthOfBlackPart], Darker[Gray]]},
             {StringTake [digitsToDisplay, lengthOfBlackPart], 
              Style [StringDrop [digitsToDisplay, lengthOfBlackPart], Darker[Gray]],
              " \[Times] ",
              DisplayForm [SuperscriptBox ["10", StringDrop [numberString, positionOfTimesUpArrow[[1,2]]]]]}]]];


(* ::Subsubsubsubsection::Closed:: *)
(*Bolde :*)


Bolde[string_] := Style[string, Bold];


(* ::Subsubsubsubsection::Closed:: *)
(*CandidateTooltipPopupInfo :*)


CandidateTooltipPopupInfo [candidate_, givenFloat_, resultFormat_] :=
  Module [{merit = Last [candidate],
           (*boosted = NumberForm [SetPrecision [givenFloat, 1 + candidate[[2]]], Round [candidate[[2]]]],*)
           info},
    info = Style [Column [{
      Style [resultFormat [First[candidate]], ScriptSizeMultipliers -> 0.85],
      (*StringJoin ["Agreeing digits = ",  ToString1D [boosted]],*)
      StringJoin ["Agreement = ", ToString [NumberForm [candidate[[2]], {3, 1}]]],
      StringJoin ["Entropy10 = ", ToString [NumberForm [candidate[[3]], {3, 1}]]],
      StringJoin ["Merit = ", ToString [NumberForm [merit, {3, 1}]]],
      Which [merit > $LowestExcellentMerit, "Excellent merit",
             merit > $LowestGoodMerit,      "Good merit",
             merit > $LowestMediumMerit,    "Medium merit",
             merit > $LowestPoorMerit,      "Poor merit",
             merit > $LowestBadMerit,       "Poor merit",
             True,                          "Terrible merit"]}],
                  $TooltipFontSize];
    PopupWindow [MagnifiedTooltip [{candidate[[3]], candidate[[2]]}, info], info, Editable -> False]];


(* ::Subsubsubsubsection::Closed:: *)
(*Ital :*)


Ital[string_] := Style [string, Italic];


(* ::Subsubsubsubsection::Closed:: *)
(*MagnifiedTooltip function needed for initialization :*)


MagnifiedTooltip [expression_, label_] :=
  Tooltip [expression, Style [label, $TooltipFontSize]];


(* ::Subsubsubsubsection::Closed:: *)
(*MapTooltipedExpressionColoredByMerit :*)


MapTooltipedExpressionColoredByMerit [proposedCandidateRecords_, boldQ_:False] :=
  Map [TooltippedExpressionColoredByMerit [#, boldQ] &, proposedCandidateRecords];


(* ::Subsubsubsubsection::Closed:: *)
(*NicePlotRange :*)


NicePlotRange [proposeAccepted_, proposeRejected_] :=
  With [{allCandidates = If [proposeAccepted === {},
                             proposeRejected,
                             Join [proposeRejected, Apply [Join, proposeAccepted]]]},
    {{0.0, Ceiling [Max [Map [#[[3]] &, allCandidates]]]},
     {0.0, Ceiling [1.025*Max [Map [#[[2]] &, allCandidates]]]}}];


(* ::Subsubsubsubsection::Closed:: *)
(*TooltippedExpressionColoredByMerit :*)


TooltippedExpressionColoredByMerit [proposeCandidateRecord_, boldQ_:True] :=
  With [{merit = Last [proposeCandidateRecord]},
    MagnifiedTooltip [Style [First [proposeCandidateRecord],
                             If [boldQ, Bold, Plain],
                             Which [merit > $LowestExcellentMerit,  Darker [Red],
                                    merit > $LowestGoodMerit,       Darker [Orange],
                                    merit > $LowestMediumMerit,     Darker [Yellow],
                                    merit > $LowestPoorMerit,       Darker [Green],
                                    merit > $LowestBadMerit,        Darker [Purple],
                                    True,                           Black],
                             ScriptSizeMultipliers -> 0.95],
                      Column [{Row [{"Agreement = ", NumberForm [proposeCandidateRecord[[2]], {3, 1}]}],
                               Row [{"\!\(\*SubscriptBox[\(Entropy\), \(10\)]\) = ", NumberForm [proposeCandidateRecord[[3]], {3, 1}]}],
                               Row [{"Merit = ", NumberForm [merit, {3, 1}]}],
                               Which [merit > $LowestExcellentMerit,  "Excellent Merit",
                                      merit > $LowestGoodMerit,       "Good Merit",
                                      merit > $LowestMediumMerit,     "Medium Merit",
                                      merit > $LowestPoorMerit,       "Poor Merit",
                                      True, "Bad Merit"]}]]];


(* ::Subsection::Closed:: *)
(*AskConstants [fontPointSize_] :*)


Unprotect [AskConstants];
ClearAll [AskConstants];

AskConstants [fontSize_:16] := (
  $roundedFontSize = Round [fontSize];
  $TooltipFontSize = Round [0.875*$roundedFontSize];
  $roundedFontSizeOn14 = $roundedFontSize/14.0; 
    (* The following FieldSizes are appropriate for Windows 10: *)
  {$ProposeInputFieldWidth,  $NSimplifyInputFieldWidth,  $DigitRuler} =
     Which [
       $VersionNumber < 9.0,
         Switch [$roundedFontSize,
           12,  {69, 66, Append [$99DigitRuler, "123\[CenterEllipsis]"]},
           13,  {63, 61, Append [$89DigitRuler, "123456\[CenterEllipsis]"]},
           14,  {59, 57, Append [$99DigitRuler, "1234567\[CenterEllipsis]"]},
           15,  {55, 52, Append [$89DigitRuler, "101234567\[CenterEllipsis]"]},
           16,  {52, 49, Append [$89DigitRuler, "12345\[CenterEllipsis]"]},
           17,  {53, 50, Append [$99DigitRuler, "123\[CenterEllipsis]"]},
           18,  {54, 51, Append [$99DigitRuler, "123456789\[CenterEllipsis]"]},
           19,  {51, 48, Append [$99DigitRuler, "12345\[CenterEllipsis]"]},
           20,  {47, 43, Append [$99DigitRuler, "123456789\[CenterEllipsis]"]},
           21,  {44, 41, Append [$99DigitRuler, "123\[CenterEllipsis]"]},
           22,  {42, 39, Append [$99DigitRuler, "123456789\[CenterEllipsis]"]},
           23,  {40, 37, Append [$99DigitRuler, "12345\[CenterEllipsis]"]},
           _,   {39, 35, Append [$99DigitRuler, "12345\[CenterEllipsis]"]}],   
       $VersionNumber < 10.0,
         Switch [$roundedFontSize,
           12,  {58, 56, Append [$99DigitRuler, "123\[CenterEllipsis]"]},
           13,  {58, 56, Append [$89DigitRuler, "12345\[CenterEllipsis]"]},
           14,  {59, 57, Append [$99DigitRuler, "1234567\[CenterEllipsis]"]},
           15,  {58, 55, Append [$89DigitRuler, "1012345\[CenterEllipsis]"]},
           16,  {59, 56, Append [$89DigitRuler, "1234\[CenterEllipsis]"]},
           17,  {64, 60, Append [$99DigitRuler, "12\[CenterEllipsis]"]},
           18,  {69, 65, Append [$99DigitRuler, "123456789\[CenterEllipsis]"]},
           19,  {68, 65, Append [$99DigitRuler, "1234\[CenterEllipsis]"]},
           20,  {67, 62, Append [$99DigitRuler, "123456789\[CenterEllipsis]"]},
           21,  {66, 61, Append [$99DigitRuler, "1234\[CenterEllipsis]"]},
           22,  {65, 61, Append [$99DigitRuler, "12345678\[CenterEllipsis]"]},
           23,  {65, 61, Append [$99DigitRuler, "1234\[CenterEllipsis]"]},
           _,   {63, 57, Append [$99DigitRuler, "123456\[CenterEllipsis]"]}],   
       True,
         Switch [$roundedFontSize,
           12,  {61, 59, Append [$99DigitRuler, "12345678\[CenterEllipsis]"]},
           13,  {59, 57, Append [$89DigitRuler, "1234567\[CenterEllipsis]"]},
           14,  {59, 57, Append [$99DigitRuler, "1234567\[CenterEllipsis]"]},
           15,  {57, 55, Append [$89DigitRuler, "101234\[CenterEllipsis]"]},
           16,  {57, 55, Append [$89DigitRuler, "1\[CenterEllipsis]"]},
           17,  {61, 59, Append [$89DigitRuler, "12345678\[CenterEllipsis]"]},
           18,  {66, 64, Append [$99DigitRuler, "123456\[CenterEllipsis]"]},
           19,  {65, 63, Append [$89DigitRuler, "123456789\[CenterEllipsis]"]},
           20,  {63, 60, Append [$99DigitRuler, "1234\[CenterEllipsis]"]},
           21,  {63, 60, Append [$89DigitRuler, "123456789\[CenterEllipsis]"]},
           22,  {62, 60, Append [$99DigitRuler, "1234\[CenterEllipsis]"]},
           23,  {62, 59, Append [$89DigitRuler, "123456789\[CenterEllipsis]"]},
           _,   {59, 56, Append [$89DigitRuler, "12345678\[CenterEllipsis]"]}]];
  CreateDialog [
    Magnify [TabView[{Bolde ["Propose"] -> ProposeTab [],
                      Bolde ["NSimplify"] -> NSimplifyTab [],
                      Bolde ["Resources"] -> ResourcesTab [],
                      Bolde ["Contact us"] -> ContactUsTab [],
                      Bolde ["Questionnaire"] -> QuestionnaireTab [],
                      Bolde ["zoOM"] -> ZoomTab [],
                      Bolde ["FAQ"] -> FAQTab [],
                      Bolde ["About"] -> AboutTab []},
                      1,  ImageSize -> {All, Automatic}],  $roundedFontSizeOn14], (* 14 is Mathematica 10 default *)
      (* Can anyone determine how to magnify the WindowTitle for presentations?: *)
    WindowTitle -> StringJoin [{"AskConstants\[Trademark] [", ToString [$roundedFontSize],
     "] :  Find concise math constants that closely approximate your float input.  $AskConstantsVersion ",
     ToString [$AskConstantsVersionNumber], "  on  Mathematica  ", $Version}],
    WindowMargins -> {{Automatic, 0},{Automatic, 0}}]);

Protect [AskConstants];


(* ::Subsection::Closed:: *)
(*ProposeTab :*)


(* ::Subsubsection::Closed:: *)
(*ProposeTab [ ] :*)


ProposeTab [] :=
  DynamicModule [{var = "",
                  dynamicMessageOrAcceptedExpressions = $FirstTimeUserMessage,
                  dynamicScatterPlot = "",
                  dynamicDeStringed = $BlankInputField,
                  dynamicMaxSec = 8,
                  dynamicWithInternalDigits = "",
                  dynamicAnnotation = Style ["",1],
                  dynamicExampleChoice = YourExample,
                  dynamicExampleInput = Null,
                  dynamicFieldBelowRuler = $EmptyFieldBelowRuler,
                  dynamicLegendForFieldBelowRuler = "",
                  dynamicInput = $BlankInputField,
                  dynamicRandomExample = {Inactive [N[0]], 0.0},
                  dynamicResultFormat = StandardForm,
                  dynamicTimeAndProposeResult = {0, Style ["", 1]},
                  dynamicProposeSubTabChoice = ResultSubTab,
                (* Functions tasks: *)
                  dynamicBasicFunctionsTasks = $DefaultBasicFunctionsTasks,
                  dynamicFactorialFamilyTasks = $DefaultFactorialFamilyTasks,
                  dynamicZetaFamilyTasks = $DefaultZetaFamilyTasks,
                  dynamicErfFamilyTasks = $DefaultErfFamilyTasks,
                  dynamicExpIntegralFamilyTasks = $DefaultExpIntegralFamilyTasks,
                  dynamicEllipticFunctionsTasks = $DefaultEllipticFamilyTasks,
                  dynamicBesselFamilyTasks = $DefaultBesselFamilyTasks,
                (* Constants tasks: *)
                  dynamicBasicConstantsTasks = $DefaultBasicConstantsTasks,
                  dynamicWellKnownConstantsTasks = $DefaultWellKnownConstantsTasks,
                    dynamicStieltjesGammaTasks = $DefaultStiltjesGammaTasks,
                  dynamicNumberTheoryConstantsTasks = $DefaultNumberTheoryConstantsTasks,
                  dynamicInequalitiesConstantsTasks = $DefaultInequalitiesConstantsTasks,
                  dynamicApproximationConstantsTasks = $DefaultApproximationConstantsTasks,
                  dynamicEnumerationConstantsTasks = $DefaultEnumerationConstantsTasks,
                  dynamicIterationConstantsTasks = $DefaultIterationConstantsTasks,
                  dynamicComplexAnalysisConstantsTasks = $DefaultComplexAnalysisConstantsTasks,
                  dynamicGeometryConstantsTasks = $DefaultGeometryConstantsTasks},
    Grid[{
      {Row [{
      Column [{
        Row [{
          PopupMenu [
            Dynamic[dynamicExampleChoice,  {Automatic, None,
              (dynamicInput = 
               Switch [dynamicExampleChoice,
                 YourExample,
                   dynamicLegendForFieldBelowRuler = "";
                   dynamicFieldBelowRuler = $EmptyFieldBelowRuler;
                   dynamicAnnotation = Style ["", 1];
                   $BlankInputField,
                 Example1,
                   dynamicMessageOrAcceptedExpressions = dynamicScatterPlot = dynamicLegendForFieldBelowRuler = "";
                   dynamicFieldBelowRuler = $EmptyFieldBelowRuler;
                   dynamicAnnotation = $ProposeExample1Annotation;
                   dynamicExampleInput = $ProposeExample1Input,
                 Example2,
                   dynamicMessageOrAcceptedExpressions = dynamicScatterPlot = dynamicLegendForFieldBelowRuler = "";
                   dynamicFieldBelowRuler = $EmptyFieldBelowRuler;
                   dynamicAnnotation = $ProposeExample2Annotation;
                   dynamicExampleInput = $ProposeExample2Input,
                 Example3,
                   dynamicMessageOrAcceptedExpressions = dynamicScatterPlot = dynamicLegendForFieldBelowRuler = "";
                   dynamicFieldBelowRuler = $EmptyFieldBelowRuler;
                   dynamicAnnotation = $ProposeExample3Annotation;
                   dynamicExampleInput = $ProposeExample3Input,
                 Example4,
                   dynamicMessageOrAcceptedExpressions = dynamicScatterPlot = dynamicLegendForFieldBelowRuler = "";
                   dynamicFieldBelowRuler = $EmptyFieldBelowRuler;
                   dynamicAnnotation = $ProposeExample4Annotation;
                   dynamicExampleInput = $ProposeExample4Input,
                 Example5,
                   dynamicMessageOrAcceptedExpressions = dynamicScatterPlot = dynamicLegendForFieldBelowRuler = "";
                   dynamicFieldBelowRuler = $EmptyFieldBelowRuler;
                   dynamicAnnotation = $ProposeExample5Annotation;
                   dynamicExampleInput = $ProposeExample5Input,
                 Example6,
                   dynamicMessageOrAcceptedExpressions = dynamicScatterPlot = dynamicLegendForFieldBelowRuler = "";
                   dynamicFieldBelowRuler = $EmptyFieldBelowRuler;
                   dynamicAnnotation = $ProposeExample6Annotation;
                   dynamicExampleInput = $ProposeExample6Input,
                 Example7,
                   dynamicMessageOrAcceptedExpressions = dynamicScatterPlot = dynamicLegendForFieldBelowRuler = "";
                   dynamicFieldBelowRuler = $EmptyFieldBelowRuler;
                   dynamicAnnotation = $ProposeExample7Annotation;
                   dynamicExampleInput = $ProposeExample7Input,
                 Example8,
                   dynamicMessageOrAcceptedExpressions = dynamicScatterPlot = dynamicLegendForFieldBelowRuler = "";
                   dynamicFieldBelowRuler = $EmptyFieldBelowRuler;
                   dynamicAnnotation = $ProposeExample8Annotation;
                   dynamicExampleInput = $ProposeExample8Input,
                 RandomDefaultExample,
                   dynamicMessageOrAcceptedExpressions = dynamicScatterPlot = dynamicLegendForFieldBelowRuler = "";
                   dynamicFieldBelowRuler = $EmptyFieldBelowRuler;
                   dynamicRandomExample = RandomDefault [];
                   dynamicAnnotation = $ProposeRandomDefaultAnnotation;
                   dynamicExampleInput = dynamicRandomExample,
                 RandomFloatExample,
                   dynamicMessageOrAcceptedExpressions = dynamicScatterPlot = dynamicLegendForFieldBelowRuler = "";
                   dynamicFieldBelowRuler = $EmptyFieldBelowRuler;
                   dynamicAnnotation = $RandomFloatAnnotation;
                   dynamicExampleInput = RandomReal[WorkingPrecision -> 16],
                 TestMe,
                   dynamicMessageOrAcceptedExpressions = dynamicScatterPlot = dynamicLegendForFieldBelowRuler = "";
                   dynamicProposeSubTabChoice = MathPasteButtonsSubTab;
                   dynamicFieldBelowRuler = $EmptyFieldBelowRuler;
                   dynamicAnnotation = $TestMeAnnotation;
                   dynamicExampleInput = $TestMeInput];
                                   (dynamicExampleChoice = #)) &}],
            {YourExample -> "Your input \[RightArrow]",
             Example1 -> "Example 1",
             Example2 -> "Example 2",
             Example3 -> "Example 3",
             Example4 -> "Example 4",
             Example5 -> "Example 5",
             Example6 -> "Example 6",
             Example7 -> "Example 7",
             Example8 -> "Example 8",
             RandomDefaultExample -> "Random default",
             RandomFloatExample -> "Random float",
             TestMe -> "Test me"}],
          Style[" : ", Bold]}],
        Row [{Button ["Paste", Paste[], ImageSize -> Automatic,
                      Enabled -> Dynamic [dynamicExampleChoice === YourExample]]}],
        Dynamic [dynamicLegendForFieldBelowRuler]},
        Alignment -> Left],
      Column [{
        InputField [Dynamic [dynamicInput],
                    FieldSize -> {$ProposeInputFieldWidth, {1, Infinity}},
                    FieldHint -> "\[LeftArrow] Choose example, or Click here then Paste or Type a Float.    Then click the Go button."],
        Style [Row [$DigitRuler], Gray],
        Framed [Dynamic [Row [{" ", dynamicFieldBelowRuler}]],
                Background -> LightPink, FrameMargins -> None, FrameStyle -> Directive [Gray, Thin]]},
              Alignment -> Left],
      " ",
      Column [{
        Row [{Button["Go",
          If [dynamicExampleChoice =!= TestMe && Order [dynamicExampleInput, dynamicInput] =!= 0, (* :User pasted or typed something *)
              dynamicExampleChoice = YourExample;
              dynamicAnnotation = Style ["",1]];
          If [dynamicInput === $BlankInputField,
              Beep [],
          (* else: *)
              dynamicProposeSubTabChoice = ResultSubTab;
              dynamicLegendForFieldBelowRuler = "";
              dynamicFieldBelowRuler = $EmptyFieldBelowRuler;
              dynamicScatterPlot = dynamicMessageOrAcceptedExpressions = "";
              dynamicDeStringed = If [StringQ [dynamicInput],
                                      Quiet [ToExpression [dynamicInput]],
                                      dynamicInput];
              Which [
                dynamicDeStringed === $Failed || Head [dynamicDeStringed] === RawBoxes,
                  Beep [];
                  dynamicMessageOrAcceptedExpressions = $ProposeTabSyntaxErrorInputMessage,
                Head [dynamicDeStringed] === Real,
                  If [MachineNumberQ [dynamicDeStringed],
                      dynamicLegendForFieldBelowRuler = " + all hidden digits : ";
                      dynamicFieldBelowRuler = (*Style [SetPrecision [dynamicDeStringed, 16], Darker[Gray]]*)
                                  ArbPrecisionWithGrayHiddenDigits [SetPrecision [dynamicDeStringed, 6]],
                  (* else: *)
                      dynamicLegendForFieldBelowRuler = "+ some hidden digits : ";
                      dynamicFieldBelowRuler = ArbPrecisionWithGrayHiddenDigits [dynamicDeStringed]];
                  CheckAbort [
                    dynamicMessageOrAcceptedExpressions = Row [{
"                                                                                      ",
                                                                ProgressIndicator [Appearance->"Necklace"]}];
                    dynamicScatterPlot = ProgressIndicator [Appearance->"Necklace"];
                    dynamicMessageOrAcceptedExpressions =
                      With [{givenFloat = dynamicDeStringed,
                             maxSec = dynamicMaxSec,
                             citation = dynamicAnnotation,
                             resultFormat = dynamicResultFormat},            
                        dynamicTimeAndProposeResult = Timing [
                          With [{agenda = Sort [Join [$CompulsoryTasks, Flatten [{dynamicBasicFunctionsTasks,
 dynamicEllipticFunctionsTasks, dynamicFactorialFamilyTasks, dynamicZetaFamilyTasks,
 dynamicErfFamilyTasks, dynamicExpIntegralFamilyTasks, dynamicBesselFamilyTasks,
 dynamicBasicConstantsTasks, dynamicWellKnownConstantsTasks,
 dynamicNumberTheoryConstantsTasks, dynamicInequalitiesConstantsTasks, dynamicApproximationConstantsTasks,
 dynamicEnumerationConstantsTasks, dynamicIterationConstantsTasks, dynamicComplexAnalysisConstantsTasks,
 dynamicGeometryConstantsTasks}, 2]],  #1[[2]] > #2[[2]] &]},
                            Propose [givenFloat,
                                     TaskList -> agenda,
                                     MinSaveRejectAgreement -> 0.0,
                                     MinSaveRejectMerit -> -Infinity,
                                     VerboseQ -> False,
                                     PairWithRejectsQ -> True,                            
                                     MaxSearchSec -> maxSec,
                                     MaxAllowedEntropy10 ->
                                       If [MachineNumberQ [givenFloat] || givenFloat == 0,
                                           18.0,
                                           Max [18.0, Ceiling [Precision [givenFloat]] + 2.0]]]]];
                        $ProposeIO = Prepend [Map [VerbosifyCandidate,
                                                            dynamicTimeAndProposeResult[[2, 1]],  {2}],
                                                       dynamicInput];
                        $AllProposeIO = Prepend [$AllProposeIO, $ProposeIO];
                        DisplayMessageOrAcceptedAndCPUTime [citation,
                                                            dynamicTimeAndProposeResult,
                                                            maxSec,
                                                            resultFormat,
                                                            givenFloat]];
                    dynamicScatterPlot = DisplayNothingOrPlot [dynamicDeStringed, Last [dynamicTimeAndProposeResult], dynamicResultFormat],
                    dynamicMessageOrAcceptedExpressions = dynamicScatterPlot = $Aborted],
                ! FreeQ [dynamicDeStringed, Complex],
                  Beep [];
                  dynamicMessageOrAcceptedExpressions = $ProposeTabNonrealInputMessage [dynamicDeStringed],
                NumericQ [dynamicDeStringed],
                  Beep [];
                  dynamicMessageOrAcceptedExpressions = $ProposeTabNonfloatNumericQMessage [dynamicDeStringed],
                True,
                  Beep [];
                  dynamicMessageOrAcceptedExpressions = $ProposeTabNonnumericQMessage]],
          Method -> "Queued", ImageSize->Automatic],
          "  ",
          MagnifiedTooltip [Style ["Max", $TooltipColor1], $ProposeTabTimeLimitTooltip], " : ",
          PopupMenu [Dynamic [dynamicMaxSec, Temporary
                                      (* To do: Enabled -> not computing result or display. *)],
                     $IntegerToTimeList]}],
        Row [{PasteButton [RawBoxes["\[Times]\!\(\*SuperscriptBox[10, \(\[Placeholder]\)]\)"],
                           Appearance -> Automatic,  ImageSize -> Automatic],
              "     ",
           ActionMenu [MagnifiedTooltip ["Copy", $AccessibleVariablesString],
                      {"$ProposeIO" :> CopyToClipboard [$ProposeIO],
                       "$AllProposeIO" :> CopyToClipboard [$AllProposeIO]}]}],
        Row [{"Type : ",
              Framed [Dynamic [If [Head [dynamicDeStringed] === Real,
                                   If [MachineNumberQ [dynamicDeStringed],
                                       Style [" Machine float ", Red],
                                       " Arb-Precision "],
                                   Invisible [" Arb-Precision "]]],
                      Background -> LightPink, FrameMargins -> None, FrameStyle -> Directive [Gray, Thin]]}]},
         Alignment -> Left]},  Background -> LightBlue],
       SpanFromLeft},
     {Dynamic [Pane [TabView [{
      {ProposePurposeSubTab, Bolde [Ital ["Purpose"]] -> $ProposeTabPurposeString},
      {FloatInputHelpSubTab, Bolde [Ital ["Input tips"]] -> $InputTips},
      {MathPasteButtonsSubTab, Bolde [Ital ["Math paste buttons"]] ->
         Column [{$MathPasteButtons,
                  Row [{
"    Before clicking \"Go\", consider checking the ", Bolde [Ital ["Choose functions"]], " or ",
       Bolde [Ital ["Choose Constants"]],
       " subtabs to ensure that models containing your components are enabled."}],
                  Grid [{{Column [{$NForMeritGoalButtons,
                                   "   Clear InputField before clicking any of \[DownArrow]",
                                   $NumericApproximationButtons}],
                          "   ",
                          $MoreConstantsPasteButtons,
                          $MoreFunctionsPasteButtons}},
                       Alignment -> Top]}]},
      {ChooseFunctionsSubTab, Bolde [Ital ["Choose functions"]] ->
         Pane [
           Row [{
             Column [{
               Row [{
                 Button ["Master reset",
                   dynamicBasicFunctionsTasks = $DefaultBasicFunctionsTasks;
                   dynamicFactorialFamilyTasks = $DefaultFactorialFamilyTasks;
                   dynamicZetaFamilyTasks = $DefaultZetaFamilyTasks;
                   dynamicErfFamilyTasks = $DefaultErfFamilyTasks;
                   dynamicExpIntegralFamilyTasks = $DefaultExpIntegralFamilyTasks;
                   dynamicEllipticFunctionsTasks = $DefaultEllipticFamilyTasks;
                   dynamicBesselFamilyTasks = $DefaultBesselFamilyTasks,
                  (*Enabled -> False,*) ImageSize -> Automatic],
                 "  ",
                 Dynamic [
                   Boole [MemberQ [dynamicBasicFunctionsTasks, $ExpFamilyTasks]] * $CardinalityOfExpFamily +
                     Boole [MemberQ [dynamicBasicFunctionsTasks, $TrigFamilyTasks]] * $CardinalityOfTrigFamily +
                     Boole [MemberQ [dynamicBasicFunctionsTasks, $LogFamilyTasks]] * $CardinalityOfLogFamily +
                     Boole [MemberQ [dynamicBasicFunctionsTasks, $InverseTrigFamilyTasks]] *
                       $CardinalityOfInverseTrigFamily +
                     Boole [MemberQ [dynamicBasicFunctionsTasks, $RootTasks]] +
                     Length [dynamicFactorialFamilyTasks] +
                       Boole [MemberQ [dynamicFactorialFamilyTasks, $PolyGammaTasks]] * $MaxAllowedPolyGammaIndex +
                       Boole [MemberQ [dynamicFactorialFamilyTasks, $InversePolyGammaTasks]] *
                         $MaxAllowedInversePolyGammaIndex +
                     Length [dynamicZetaFamilyTasks] +
                       Boole [MemberQ [dynamicZetaFamilyTasks, $PolyLogTasks]] * ($MaxAllowedPolyLogIndex - 2) +
                       Boole [MemberQ [dynamicZetaFamilyTasks, $InversePolyLogTasks]] *
                             ($MaxAllowedInversePolyLogIndex - 2) +
                     Length [dynamicErfFamilyTasks] +
                     Length [dynamicExpIntegralFamilyTasks] +
                       Boole [MemberQ [dynamicExpIntegralFamilyTasks, $ExpIntegralETasks]] *
                         ($MaxAllowedExpIntegralEIndex - 2) +
                     Length [dynamicEllipticFunctionsTasks] +
                     Length [dynamicBesselFamilyTasks]],
                 " functions chosen of ",  $TotalNumberOfFunctions}],

      OpenerView [{
        Row [{
          Button ["Reset",  dynamicBasicFunctionsTasks = $DefaultBasicFunctionsTasks,
                  ImageSize -> Automatic],
          " ",
          SetterBar [Dynamic [dynamicBasicFunctionsTasks],
                              {{} -> "None", $AllBasicFunctionsTasks -> $AllBasicFunctionsLabel}],
          " : ",
          Dynamic [
            Boole [MemberQ [dynamicBasicFunctionsTasks, $ExpFamilyTasks]] * $CardinalityOfExpFamily +
              Boole [MemberQ [dynamicBasicFunctionsTasks, $TrigFamilyTasks]] * $CardinalityOfTrigFamily +
              Boole [MemberQ [dynamicBasicFunctionsTasks, $LogFamilyTasks]] * $CardinalityOfLogFamily +
              Boole [MemberQ [dynamicBasicFunctionsTasks, $InverseTrigFamilyTasks]] * $CardinalityOfInverseTrigFamily +
              Boole [MemberQ [dynamicBasicFunctionsTasks, $RootTasks]]],
          " : ",
          Bolde ["Basic"]}],
        Row [{
          Column [{
            CheckboxBar [Dynamic [dynamicBasicFunctionsTasks],
              {$ExpFamilyTasks -> Row [{"Exp [", $Italx, "] = \!\(\*SuperscriptBox[\(\[ExponentialE]\), \(x\)]\), and ",
                                        MagnifiedTooltip [Style ["hyperbolic", $TooltipColor1],
"Sinh, Cosh, Tanh,
Csch, Sech, Coth"]}],
               $TrigFamilyTasks -> MagnifiedTooltip [Style ["Trigonometric", $TooltipColor1],
Row [{"Sin, Cos, Tan,
Csc, Sec, Cot,
Haversine [", $Italx, "] = (Sin [", $Italx, "/2]\!\(\*SuperscriptBox[\()\), \(2\)]\) = (1 - Cos [", $Italx, "])/2"}]]},
               Appearance -> "Vertical"],
            ""}],
           "        ",
          CheckboxBar [Dynamic [dynamicBasicFunctionsTasks],
            {$LogFamilyTasks -> Row [{MagnifiedTooltip [Style ["Logs", $TooltipColor1], Row [{
"Log = ln,
\!\(\*SubscriptBox[\(log\), \(2\)]\) = Log2 = Log[2, ...] = lg,
\!\(\*SubscriptBox[\(Log\), \(10\)]\) = Log10 = Log [10, ...],
InverseGudermannian [", $Italy, "]  =  Log [Tan [", $Italy, "/2 + \[Pi]/4]]"}]], ", ",
                                      Hyperlink [MagnifiedTooltip [ProductLog, Row [{
" ProductLog [-1 \[LessEqual] \!\(\*SubscriptBox[\(branch\), \(#\)]\) \[LessEqual] 0,  ", $Italy,
 "]  =  LambertW [\!\(\*SubscriptBox[\(branch\), \(#\)]\), ", $Italy, "]"}]],
                                                 "https://en.wikipedia.org/wiki/Lambert_W_function"], ", and ",
                                      MagnifiedTooltip [Style ["inverse hyperbolic", $TooltipColor1],
"ArcSinh, ArcCosh, ArcTanh,
ArcCsch, ArcSech, ArcCoth"]}],
             $InverseTrigFamilyTasks -> MagnifiedTooltip [Style ["Inverse trigonometric", $TooltipColor1],
Row [{"ArcSin, ArcCos, ArcTan,
ArcCsc, ArcSec, ArcCot,
InverseHaversine [", $Italy, "] = ", 2 ArcSin [Sqrt[$Italy]], ",
Gudermannian [", $Italy, "]  =  gd [", $Italy, ("]  =  2 ArcTan [\[ExponentialE]")^$Italy, "] - \[Pi]/2"}]],
             $RootTasks -> Row [{Hyperlink ["Root", "http://reference.wolfram.com/language/ref/Root.html?q=Root"],
                                 " [a minimal polynomial of degree > 2, ", $Italn, "]"}]},
            Appearance -> "Vertical"]}]}],

      OpenerView [{
        Row [{
          Button ["Reset",
                    dynamicBesselFamilyTasks = $DefaultBesselFamilyTasks,
                          ImageSize -> Automatic],  " ",
          SetterBar [Dynamic [dynamicBesselFamilyTasks],
                             {{} -> "None", $AllBesselFamilyTasks -> $AllBesselFamilyLabel}], " :  ",
          Dynamic [Boole [MemberQ [dynamicBesselFamilyTasks, $BesselJTasks]] * (1 + $MaxAllowedBesselJIndex) +
                   Boole [MemberQ [dynamicBesselFamilyTasks, $BesselYTasks]] * (1 + $MaxAllowedBesselYIndex) +
                   Boole [MemberQ [dynamicBesselFamilyTasks, $BesselITasks]] * (1 + $MaxAllowedBesselIIndex) +
                   Boole [MemberQ [dynamicBesselFamilyTasks, $BesselKTasks]] * (1 + $MaxAllowedBesselKIndex) +
                   Boole [MemberQ [dynamicBesselFamilyTasks, $SphericalBesselJTasks]] * (1 + $MaxAllowedSphericalBesselJIndex) +
                   Boole [MemberQ [dynamicBesselFamilyTasks, $SphericalBesselYTasks]] * (1 + $MaxAllowedSphericalBesselYIndex) +
                   Boole [MemberQ [dynamicBesselFamilyTasks, $StruveLTasks]] * (1 + $MaxAllowedStruveLIndex) +
                   Boole [MemberQ [dynamicBesselFamilyTasks, $InverseBesselJTasks]] * (1 + $MaxAllowedInverseBesselJIndex) +
                   Boole [MemberQ [dynamicBesselFamilyTasks, $InverseBesselYTasks]] * (1 + $MaxAllowedInverseBesselYIndex) +
                   Boole [MemberQ [dynamicBesselFamilyTasks, $InverseBesselITasks]] * (1 + $MaxAllowedInverseBesselIIndex) +
                   Boole [MemberQ [dynamicBesselFamilyTasks, $InverseBesselKTasks]] * (1 + $MaxAllowedInverseBesselKIndex) +
                   Boole [MemberQ [dynamicBesselFamilyTasks, $InverseSphericalBesselJTasks]] *
                    (1 + $MaxAllowedInverseSphericalBesselJIndex) +
                   Boole [MemberQ [dynamicBesselFamilyTasks, $InverseSphericalBesselYTasks]] *
                    (1 + $MaxAllowedInverseSphericalBesselYIndex) +
                   Boole [MemberQ [dynamicBesselFamilyTasks, $InverseStruveLTasks]] * (1 + $MaxAllowedInverseStruveLIndex) +
                   Boole [MemberQ [dynamicBesselFamilyTasks, $AiryAiTasks]] +
                   Boole [MemberQ [dynamicBesselFamilyTasks, $AiryBiTasks]] +
                   Boole [MemberQ [dynamicBesselFamilyTasks, $InverseAiryAiTasks]] +
                   Boole [MemberQ [dynamicBesselFamilyTasks, $InverseAiryBiTasks]]], " : ",
                  Bolde ["Bessel family"]}],
        CheckboxBar [Dynamic [dynamicBesselFamilyTasks],
          {$BesselJTasks -> Row [{Hyperlink [$BesselJLabel, "https://en.wikipedia.org/wiki/Bessel_function"],
                                  " = ", Subscript[$ItalJ, $Italn][$Italx]}],              
           $BesselYTasks -> Row [{Hyperlink [$BesselYLabel, "https://en.wikipedia.org/wiki/Bessel_function"],
                                  " = ", Subscript[$ItalY, $Italn][$Italx]}],                 
           $BesselITasks -> Row [{Hyperlink [$BesselILabel, "https://en.wikipedia.org/wiki/Bessel_function"],
                                  " = ", Subscript[$ItalI, $Italn][$Italx]}],                 
           $BesselKTasks -> Row [{Hyperlink [$BesselKLabel, "https://en.wikipedia.org/wiki/Bessel_function"],
                                  " = ", Subscript[$ItalK, $Italn][$Italx]}],                 
           $SphericalBesselJTasks -> Row [{Hyperlink [$SphericalBesselJLabel, "https://en.wikipedia.org/wiki/Bessel_function"],
                                           " = ", Subscript[$Italj, $Italn][$Italx]}],                  
           $SphericalBesselYTasks -> Row [{Hyperlink [$SphericalBesselYLabel, "https://en.wikipedia.org/wiki/Bessel_function"],
                                           " = ", Subscript[$Italy, $Italn][$Italx]}],                  
           $StruveLTasks -> Row [{Hyperlink [$StruveLLabel,
                                             "http://mathworld.wolfram.com/ModifiedStruveFunction.html"],
                                  " = ", Subscript[$ItalL, $Italn][$Italx]}],                  
           $AiryAiTasks -> Row [{Hyperlink [Row [{"AiryAi [", $Italx, "]"}],
                                            "https://en.wikipedia.org/wiki/Airy_function"], " = Ai [", $Italx, "]"}],                  
           $AiryBiTasks -> Row [{Hyperlink [Row [{"AiryBi [", $Italx, "]"}],
                   "https://en.wikipedia.org/wiki/Airy_function"], " = Bi [", $Italx, "]"}],                 
           $InverseBesselJTasks -> $InverseBesselJLabel,                  
           $InverseBesselYTasks -> $InverseBesselYLabel,
           $InverseBesselITasks -> $InverseBesselILabel,                 
           $InverseBesselKTasks -> $InverseBesselKLabel,   
           $InverseSphericalBesselJTasks -> $InverseSphericalBesselJLabel,           
           $InverseSphericalBesselYTasks -> $InverseSphericalBesselYLabel,
           $InverseStruveLTasks -> $InverseStruveLLabel,
           $InverseAiryAiTasks -> Row [{"RealInverseAiryAi [", $Italy,
              ", \!\(\*SubscriptBox[\(branch\), \(#\)]\) \[LessEqual] 1]", Invisible [Hyperlink[" "]]}],
           $InverseAiryBiTasks -> Row [{"RealInverseAiryBi [", $Italy,
             ", \!\(\*SubscriptBox[\(branch\), \(#\)]\) \[LessEqual] 1]", Invisible [Hyperlink[" "]]}]},                 
           Appearance -> "Vertical" -> {Automatic, 2}]}],

      OpenerView [{
        Row [{Button ["Reset",
                      dynamicZetaFamilyTasks = $DefaultZetaFamilyTasks,
                      ImageSize -> Automatic],  " ",
              SetterBar [Dynamic [dynamicZetaFamilyTasks],
                         {{} -> "None", $AllZetaFamilyTasks -> $AllZetaFamilyLabel}], " :   ",
              Dynamic [Length [dynamicZetaFamilyTasks] +
                       Boole [MemberQ [dynamicZetaFamilyTasks, $PolyLogTasks]] *
                         ($MaxAllowedPolyLogIndex - 2) +
                       Boole [MemberQ [dynamicZetaFamilyTasks, $InversePolyLogTasks]] *
                         ($MaxAllowedInversePolyLogIndex - 2)], " : ",
              Bolde ["Zeta family"]}],
        CheckboxBar [Dynamic [dynamicZetaFamilyTasks],
         {$ZetaTasks -> Row [{"Riemann ", Hyperlink [Row [{"Zeta [", $Italx, "]"}],
                        "https://en.wikipedia.org/wiki/Dirichlet_beta_function"], " = \[Zeta][", $Italx, "]"}],
          $DirichletBetaTasks -> Row [{Hyperlink [Row [{"DirichletBeta [", $Italx, "]"}],  (* Mathematica Version >= 10.0 *)
                 "https://en.wikipedia.org/wiki/Double_factorial"], " = \[Beta][", $Italx, "]"}],
          $DirichletEtaTasks -> Row [{Hyperlink [Row [{"DirichletEta [", $Italx, "]"}],  (* Mathematica Version >= 10.0 *)
                 "https://en.wikipedia.org/wiki/Dirichlet_eta_function"], " = \[Eta][", $Italx, "]"}],
          $DirichletLambdaTasks -> Row [{Hyperlink [Row [{"DirichletLambda [", $Italx, "]"}],  (* Mathematica Version >= 10.0 *)
                 "http://mathworld.wolfram.com/DirichletLambdaFunction.html"], " = \[Lambda][", $Italx, "]"}],
          $RiemannSiegelThetaTasks -> Row [{Hyperlink [Row [{"RiemannSiegelTheta [", $Italt, "]"}],
                 "https://en.wikipedia.org/wiki/Riemann%E2%80%93Siegel_theta_function"], " = \[Theta][", $Italt, "]"}],
          $RamanujanTauThetaTasks -> Row [{Hyperlink [Row [{"RamanujanTauTheta [", $Italt, "]"}],
                 "http://reference.wolfram.com/language/ref/RamanujanTauTheta.html?q=RamanujanTauTheta"],
                                          " = \[Theta][", $Italt, "]"}],
          $PolyLogTasks -> Row [{Hyperlink [$PolyLogLabel, "https://en.wikipedia.org/wiki/Polylogarithm"],
                                Subscript[" = Li", $Italn], "[", $Italx, "]"}],
          $InverseZetaTasks -> Row [{"RealInverseZeta [", $Italy, ",  ", $MinAllowedRealInverseZetaBranch,
                                             " \[LessEqual] \!\(\*SubscriptBox[\(branch\), \(#\)]\) \[LessEqual] ",
                                             $MaxAllowedRealInverseZetaBranch, "]"}],
          $InverseDirichletBetaTasks -> Row [{"RealInverseDirichletBeta [", $Italy, ",  ", $MinAllowedRealInverseDirichletBetaBranch,
                                             " \[LessEqual] \!\(\*SubscriptBox[\(branch\), \(#\)]\) \[LessEqual] ",
                                             $MaxAllowedRealInverseDirichletBetaBranch, "]"}],
          $InverseDirichletEtaTasks -> Row [{"RealInverseDirichletEta [", $Italy, ",  ", $MinAllowedRealInverseDirichletEtaBranch,
                                             " \[LessEqual] \!\(\*SubscriptBox[\(branch\), \(#\)]\) \[LessEqual] ",
                                             $MaxAllowedRealInverseDirichletEtaBranch, "]"}],
          $InverseDirichletLambdaTasks -> Row [{"RealInverseDirichletLambda [", $Italy, ",  ", $MinAllowedRealInverseDirichletLambdaBranch,
                                             " \[LessEqual] \!\(\*SubscriptBox[\(branch\), \(#\)]\) \[LessEqual] ",
                                             $MaxAllowedRealInverseDirichletLambdaBranch, "]"}],
          $InverseRiemannSiegelThetaTasks -> Row [{"RealInverseRiemannSiegelTheta [", $Italy, ",  ", $MinAllowedRealInverseRiemannSiegelThetaBranch,
                                             " \[LessEqual] \!\(\*SubscriptBox[\(branch\), \(#\)]\) \[LessEqual] ",
                                             $MaxAllowedRealInverseRiemannSiegelThetaBranch, "]"}],
          $InverseRamanujanTauThetaTasks -> Row [{"RealInverseRamanujanTauTheta [", $Italy, ",  ", $MinAllowedRealInverseRamanujanTauThetaBranch,
                                             " \[LessEqual] \!\(\*SubscriptBox[\(branch\), \(#\)]\) \[LessEqual] ",
                                             $MaxAllowedRealInverseRamanujanTauThetaBranch, "]"}],
          $InversePolyLogTasks -> $InversePolyLogLabel},
          Appearance -> "Vertical" -> {Automatic, 2}]}],
      OpenerView [{
        Row [{Button ["Reset",  dynamicFactorialFamilyTasks = $DefaultFactorialFamilyTasks,
                      ImageSize -> Automatic],
              " ",
              SetterBar [Dynamic [dynamicFactorialFamilyTasks],
                         {{} -> "None", $AllFactorialFamilyTasks -> $AllFactorialFamilyLabel}],
              " :  ",
              Dynamic [Length [dynamicFactorialFamilyTasks] + 
                Boole [MemberQ [dynamicFactorialFamilyTasks, $PolyGammaTasks]] * $MaxAllowedPolyGammaIndex +
                Boole [MemberQ [dynamicFactorialFamilyTasks, $InversePolyGammaTasks]] * $MaxAllowedInversePolyGammaIndex],
              " : ",  Bolde ["Factorial family"]}],
              CheckboxBar [Dynamic [dynamicFactorialFamilyTasks],
               {$GammaTasks -> Row [{"Factorial [", $Italx, "] = ", $Italx, "! = \[CapitalGamma][", $Italx, " + 1] = ",
                                     Hyperlink [Row [{"Gamma [", $Italx, " + 1]"}],
                                                "https://en.wikipedia.org/wiki/Gamma_function"]}],
                $LogGammaTasks -> Hyperlink [Row [{"LogGamma [", $Italx, "]"}],
                                                   "http://mathworld.wolfram.com/LogGammaFunction.html"],
                $Factorial2Tasks -> Row [{Hyperlink ["Double factorial",
                                                     "https://en.wikipedia.org/wiki/Double_factorial"],
                                         ":  Factorial2[", $Italx, "] = ", $Italx, "!! \[NotEqual] (", $Italx, "!)!"}],
                $BarnesGTasks -> Row [{Hyperlink [Row [{"BarnesG [", $Italx, "]"}],
                                                  "http://mathworld.wolfram.com/BarnesG-Function.html"],
                                      " = ", $ItalG, "[", $Italx, "]"}],
                $LogBarnesGTasks -> Hyperlink [Row [{"LogBarnesG [", $Italx, "]"}],
                                     "http://reference.wolfram.com/language/ref/LogBarnesG.html?q=LogBarnesG"],
                $HyperfactorialTasks -> Row [{Hyperlink [Row [{"Hyperfactorial [", $Italx, "]"}],
                                                          "http://mathworld.wolfram.com/Hyperfactorial.html"],
                                              " = ", $ItalH, "[", $Italx, "]"}],
                $PolyGammaTasks -> Row [{Hyperlink [$PolyGammaLabel, "http://mathworld.wolfram.com/PolygammaFunction.html"],
                                         Subscript[" = \[Psi]", $Italn], "[", $Italx, "]"}],
                $InverseGammaTasks -> Row [{"RealInverseGamma [", $Italy, ",  ", $MinAllowedRealInverseGammaBranch,
                                            " \[LessEqual] \!\(\*SubscriptBox[\(branch\), \(#\)]\) \[LessEqual] ",
                                            $MaxAllowedRealInverseGammaBranch, "]"}],
                $InverseLogGammaTasks -> Row [{"RealInverseLogGamma [", $Italy, ",  ", $MinAllowedRealInverseLogGammaBranch,
                                            " \[LessEqual] \!\(\*SubscriptBox[\(branch\), \(#\)]\) \[LessEqual] ",
                                            $MaxAllowedRealInverseGammaBranch, "]"}],
                $InverseFactorial2Tasks -> Row [{"RealInverseFactorial2 [", $Italy, ",  ", $MinAllowedRealInverseFactorial2Branch,
                                            " \[LessEqual] \!\(\*SubscriptBox[\(branch\), \(#\)]\) \[LessEqual] ",
                                            $MaxAllowedRealInverseFactorial2Branch, "]"}],
                $InverseBarnesGTasks -> Row [{"RealInverseBarnesG [", $Italy, ",  ", $MinAllowedRealInverseBarnesGBranch,
                                             " \[LessEqual] \!\(\*SubscriptBox[\(branch\), \(#\)]\) \[LessEqual] ",
                                             $MaxAllowedRealInverseBarnesGBranch, "]"}],
                $InverseLogBarnesGTasks -> Row [{"RealInverseLogBarnesG [", $Italy, ",  ", $MinAllowedRealInverseLogBarnesGBranch,
                                                 " \[LessEqual] \!\(\*SubscriptBox[\(branch\), \(#\)]\) \[LessEqual] ",
                                                 $MaxAllowedRealInverseLogBarnesGBranch, "]"}],
                $InverseHyperfactorialTasks -> Row [{"RealInverseHyperfactorial [", $Italy, ",  ", $MinAllowedRealInverseHyperfactorialBranch,
                                                     " \[LessEqual] \!\(\*SubscriptBox[\(branch\), \(#\)]\) \[LessEqual] ",
                                                     $MaxAllowedRealInverseHyperfactorialBranch, "]"}],
                $InversePolyGammaTasks -> $InversePolyGammaLabel},
                Appearance -> "Vertical" -> {Automatic, 2}]}],

      OpenerView [{
        Row [{Button ["Reset",
                      dynamicExpIntegralFamilyTasks = $DefaultExpIntegralFamilyTasks,
                      ImageSize -> Automatic],  " ",
              SetterBar [Dynamic [dynamicExpIntegralFamilyTasks],
                         {{} -> "None", $AllExpIntegralFamilyTasks -> $AllExpIntegralFamilyLabel}], " :   ",
              Dynamic [Length [dynamicExpIntegralFamilyTasks] +
                         Boole [MemberQ [dynamicExpIntegralFamilyTasks, $ExpIntegralETasks]] *
                           ($MaxAllowedExpIntegralEIndex - 2) +
                         Boole [MemberQ [dynamicExpIntegralFamilyTasks, $InverseExpIntegralETasks]] *
                           ($MaxAllowedExpIntegralEIndex - 2)], " : ",
              Bolde ["Exponential integrals family"]}],
        CheckboxBar [Dynamic [dynamicExpIntegralFamilyTasks],
          {$ExpIntegralEiTasks -> Row [{Hyperlink [Row [{"ExpIntegralEi [", $Italx, "]"}],
             "https://en.wikipedia.org/wiki/Exponential_integral"], " = Ei [", $Italx, "] & ExpIntegralE [1, ", $Italx, "]"}],                  
           $LogIntegralTasks -> Row [{Hyperlink [Row [{"LogIntegral [", $Italx, "]"}],
             "https://en.wikipedia.org/wiki/Exponential_integral"], " = li [", $Italx, "]"}],                  
           $SinhIntegralTasks -> Row [{Hyperlink [Row [{"SinhIntegral [", $Italx, "]"}],
             "https://en.wikipedia.org/wiki/Trigonometric_integral#Sine_integral"], " = Shi [", $Italx, "]"}],                  
           $CoshIntegralTasks -> Row [{Hyperlink [Row [{"CoshIntegral [", $Italx, "]"}],
             "https://en.wikipedia.org/wiki/Trigonometric_integral#Sine_integral"], " = Chi [", $Italx, "]"}],                  
           $SinIntegralTasks -> Row [{Hyperlink [Row [{"SinIntegral [", $Italx, "]"}],
                                       "https://en.wikipedia.org/wiki/Trigonometric_integral#Sine_integral"],
                                      " = Si [", $Italx, "]"}],                  
           $CosIntegralTasks -> Row [{Hyperlink [Row [{"CosIntegral [", $Italx, "]"}],
             "https://en.wikipedia.org/wiki/Trigonometric_integral#Sine_integral"], " = Ci [", $Italx, "]"}],
           $ExpIntegralETasks -> Row [{Hyperlink [$ExpIntegralELabel,
             "https://en.wikipedia.org/wiki/Exponential_integral"], " = ", Subscript[$ItalE, $Italn][$Italx]}],                  
           $InverseExpIntegralEiTasks -> Row [{"RealInverseExpIntegralEi [", $Italy,
                                               ",  ", $MinAllowedRealInverseExpIntegralEiBranch,
                                               " \[LessEqual] \!\(\*SubscriptBox[\(branch\), \(#\)]\) \[LessEqual] ",
                                               $MaxAllowedRealInverseExpIntegralEiBranch, "]"}],
           $InverseLogIntegralTasks -> Row [{"RealInverseLogIntegral [", $Italy,
                                             ",  ", $MinAllowedRealInverseLogIntegralBranch,
                                               " \[LessEqual] \!\(\*SubscriptBox[\(branch\), \(#\)]\) \[LessEqual] ",
                                               $MaxAllowedRealInverseLogIntegralBranch, "]"}],
           $InverseSinhIntegralTasks -> Row [{"RealInverseSinhIntegral [", $Italy, "]"}],
           $InverseCoshIntegralTasks -> Row [{"RealInverseCoshIntegral [", $Italy, "]"}],
           $InverseSinIntegralTasks -> Row [{"RealInverseSinIntegral [", $Italy,
             ", \!\(\*SubscriptBox[\(branch\), \(#\)]\)]"}],
           $InverseCosIntegralTasks -> Row [{"RealInverseCosIntegral [", $Italy,
             ", \!\(\*SubscriptBox[\(branch\), \(#\)]\)]"}],
           $InverseExpIntegralETasks -> $InverseExpIntegralELabel},
           Appearance -> "Vertical" -> {Automatic, 2}]}],

      OpenerView [{
        Row [{Button ["Reset",  dynamicEllipticFunctionsTasks = $DefaultEllipticFamilyTasks,
                      ImageSize -> Automatic],
              " ",
              SetterBar [Dynamic [dynamicEllipticFunctionsTasks],
                         {{} -> "None", $AllEllipticFamilyTasks -> $AllEllipticFamilyLabel}],
              " :   ",
              Dynamic [Length [dynamicEllipticFunctionsTasks]],
              " : ",
              Bolde ["Elliptic family"]}],
        CheckboxBar [Dynamic [dynamicEllipticFunctionsTasks],
         {$EllipticKTasks -> Row [{Hyperlink [Row [{"EllipticK [", $Italm, "]"}],
                        "https://en.wikipedia.org/wiki/Elliptic_integral#Complete_elliptic_integral_of_the_first_kind"],
                                   " = ", $ItalK, "[", $Italm, "]"}],
          $EllipticETasks -> Row [{Hyperlink [Row [{"EllipticE [", $Italm, "]"}],
                        "https://en.wikipedia.org/wiki/Elliptic_integral#Complete_elliptic_integral_of_the_second_kind"],
                                   " = ", $ItalE, "[", $Italm, "]"}],
          $ArithmeticGeometricMean1Tasks -> Row [{Hyperlink [Row [{"ArithmeticGeometricMean [1, ", $Italt, "]"}],
                        "http://mathworld.wolfram.com/Arithmetic-GeometricMean.html"], " = agm[1, ", $Italt, "]"}],
          $EllipticTheta2ZeroTasks -> Row [{Hyperlink [Row [{"EllipticTheta [2, 0, ", $Italx, "]"}],
                        "http://reference.wolfram.com/language/ref/EllipticTheta.html?q=EllipticTheta"],
                                                       " = \!\(\*SubscriptBox[\(\[CurlyTheta]\), \(2\)]\)[0, ", $Italx, "]"}],
          $EllipticTheta3ZeroTasks -> Row [{Hyperlink [Row [{"EllipticTheta [3, 0, ", $Italx, "]"}],
                        "http://reference.wolfram.com/language/ref/EllipticTheta.html?q=EllipticTheta"],
                                                 " = \!\(\*SubscriptBox[\(\[CurlyTheta]\), \(3\)]\)[0, ", $Italx, "]"}],
          $EllipticNomeQTasks -> Row [{Hyperlink [Row [{"EllipticNomeQ [", $Italm, "]"}],
                                                              "http://mathworld.wolfram.com/Nome.html"],
                                       " = ", $Italq, "[", $Italm, "]"}],
          $InverseEllipticKTasks -> Row [{"RealInverseEllipticK [", $Italy, "]"}],
          $InverseEllipticETasks -> Row [{"RealInverseEllipticE [", $Italy, "]"}],
          $InverseArithmeticGeometricMean1Tasks -> Row [{"RealInverseArithmeticGeometricMean [1, ", $Italy, "]"}],
          $InverseEllipticTheta2ZeroTasks ->
                         Row [{"RealInverseEllipticTheta2Zero [", $Italy, "]"}],
          $InverseEllipticTheta3ZeroTasks ->
                         Row [{"RealInverseEllipticTheta3Zero [", $Italy, "]"}],
          $InverseEllipticNomeQTasks -> Hyperlink [Row [{"InverseEllipticNomeQ [", $Italq, "]"}],
                         "http://reference.wolfram.com/language/ref/InverseEllipticNomeQ.html?q=InverseEllipticNomeQ"]},
          Appearance -> "Vertical" -> {Automatic, 2}]}],

      OpenerView [{
        Row [{Button ["Reset",
                      dynamicErfFamilyTasks = $DefaultErfFamilyTasks,
                      ImageSize -> Automatic],  " ",
              SetterBar [Dynamic [dynamicErfFamilyTasks],
                         {{} -> "None", $AllErfFamilyTasks -> $AllErfFamilyLabel}], " :   ",
              Dynamic [Length [dynamicErfFamilyTasks]], " : ",
              Bolde ["Erf family"]}],
        CheckboxBar [Dynamic [dynamicErfFamilyTasks],
         {$ErfTasks -> Hyperlink [Row [{"Erf [", $Italx, "]"}], "https://en.wikipedia.org/wiki/Error_function"],
          $ErfcTasks -> Hyperlink [Row [{"Erfc [", $Italx, "]"}], "https://en.wikipedia.org/wiki/Error_function"],
          $ErfiTasks -> Hyperlink [Row [{"Erfi [", $Italx, "]"}], "https://en.wikipedia.org/wiki/Error_function"],
          $InverseErfTasks -> Hyperlink [Row [{"InverseErf [", $Italy, "]"}], "https://en.wikipedia.org/wiki/Error_function"],
          $InverseErfcTasks -> Hyperlink [Row [{"InverseErfc [", $Italy, "]"}], "https://en.wikipedia.org/wiki/Error_function"],
          $InverseErfiTasks -> Row [{"RealInverseErfi [", $Italy, "]        "}],
          $DawsonFTasks -> Row [{Hyperlink [Row [{"DawsonF [", $Italx, "]"}], "https://en.wikipedia.org/wiki/Dawson_function"],
                                 " = ", $ItalF, "[", $Italx, "]"}],
          $FresnelSTasks -> Row [{Hyperlink [Row [{"FresnelS [", $Italx, "]"}], "https://en.wikipedia.org/wiki/Fresnel_integral"],
                                  " = ", $ItalS, "[", $Italx, "]"}],
          $FresnelCTasks -> Row [{Hyperlink [Row [{"FresnelC [", $Italx, "]"}], "https://en.wikipedia.org/wiki/Fresnel_integral"],
                                  " = ", $ItalC, "[", $Italx, "]"}],
          $InverseDawsonFTasks -> Row [{"RealInverseDawsonF [", $Italy, ",  ", $MinAllowedRealInverseDawsonFBranch,
                                        " \[LessEqual] \!\(\*SubscriptBox[\(branch\), \(#\)]\) \[LessEqual] ",
                                        $MaxAllowedRealInverseDawsonFBranch, "]"}],
          $InverseFresnelSTasks -> Row [{"RealInverseFresnelS [", $Italy, ", \!\(\*SubscriptBox[\(branch\), \(#\)]\)]"}],
          $InverseFresnelCTasks -> Row [{"RealInverseFresnelC [", $Italy, ", \!\(\*SubscriptBox[\(branch\), \(#\)]\)]"}]},
          Appearance -> "Vertical" -> {Automatic, 4}]}]}],
      "  "}]]},

  {ChooseFunctionsHelpSubTab, Bolde [": ? "] -> $FunctionsHelp},

  {ChooseConstantsSubTab, Bolde [Ital ["Choose named constants"]] ->
    Pane [
     Row [{
       Column [{
         Row [{Button ["Master reset",
                       dynamicBasicConstantsTasks = $DefaultBasicConstantsTasks;
                       dynamicWellKnownConstantsTasks = $DefaultWellKnownConstantsTasks;
                       dynamicNumberTheoryConstantsTasks = $DefaultNumberTheoryConstantsTasks;
                       dynamicStieltjesGammaTasks = $DefaultStiltjesGammaTasks;
                       dynamicInequalitiesConstantsTasks = $DefaultInequalitiesConstantsTasks;
                       dynamicApproximationConstantsTasks = $DefaultApproximationConstantsTasks;
                       dynamicEnumerationConstantsTasks = $DefaultEnumerationConstantsTasks;
                       dynamicIterationConstantsTasks = $DefaultIterationConstantsTasks;
                       dynamicComplexAnalysisConstantsTasks = $DefaultComplexAnalysisConstantsTasks;
                       dynamicGeometryConstantsTasks = $DefaultGeometryConstantsTasks,
                      (*Enabled -> False,*) ImageSize -> Automatic], "   ",
               Dynamic [Apply [Plus, Map [Length, {dynamicBasicConstantsTasks,
                         dynamicWellKnownConstantsTasks, dynamicNumberTheoryConstantsTasks,
                         dynamicInequalitiesConstantsTasks, dynamicApproximationConstantsTasks,
                         dynamicEnumerationConstantsTasks, dynamicIterationConstantsTasks,
                         dynamicComplexAnalysisConstantsTasks, dynamicGeometryConstantsTasks}]]],
               " named constants chosen out of ", $TotalNumberOfNamedConstants}],


         OpenerView [{
           Row [{Button ["Reset", dynamicBasicConstantsTasks = $DefaultBasicConstantsTasks,
                         Enabled -> Dynamic [dynamicBasicConstantsTasks =!= $DefaultBasicConstantsTasks],
                         ImageSize -> Automatic], " ",
                 SetterBar [Dynamic [dynamicBasicConstantsTasks],
                            {{} -> "None",
                             $AllBasicConstantsTasks -> $AllBasicConstantsLabel}], " :  ",
                 Dynamic [Length [dynamicBasicConstantsTasks]], " : ",
                 MagnifiedTooltip [Style ["Basic", $TooltipColor1, Bold],
"For \[ExponentialE], Choose  \"Exp[x] = \!\(\*SuperscriptBox[\(\[ExponentialE]\), \(x\)]\), and hyperbolic\"
 in  \"Basic\"  on the \"Choose functions\" tab"]
                 }],
           CheckboxBar [Dynamic [dynamicBasicConstantsTasks],
             {$PiTasks -> "\[Pi] = Pi = 3.14...",
              $CatalanTasks -> Row [{Hyperlink ["Catalan",
                                          "https://en.wikipedia.org/wiki/Catalan%27 s_constant "],
                               " = ", $ItalG, " = 0.91596559..."}],
              $EulerGammaTasks -> Row [{Hyperlink ["EulerGamma",
                                            "https://en.wikipedia.org/wiki/Euler% E2 %80 %93 Mascheroni_constant "],
                                  " = \[DoubledGamma] = 0.577... "}],
              $GlaisherTasks -> Row [{Hyperlink ["Glaisher",
                                           "https://en.wikipedia.org/wiki/Glaisher%27 s_constant "],
                                " = ", $ItalA, " = 1.28..."}],
              $KhinchinTasks -> Row [{Hyperlink ["Khinchin",
                                           "http://mathworld.wolfram.com/KhinchinsConstant.html"],
                                " = ", Subscript[$ItalK, 0], " = 2.685..."}]},
              Appearance -> "Vertical" -> {Automatic, 3}]}],

         OpenerView [{
           Row [{Button ["Reset", dynamicWellKnownConstantsTasks = $DefaultWellKnownConstantsTasks,
                         Enabled -> Dynamic [dynamicWellKnownConstantsTasks =!= $DefaultWellKnownConstantsTasks],
                         ImageSize -> Automatic], " ",
                 SetterBar [Dynamic [dynamicWellKnownConstantsTasks],
                   {{} -> "None",
                    $AllWellKnownConstantsTasks -> $AllWellKnownConstantsLabel}], " : ",
                 Dynamic [Length [dynamicWellKnownConstantsTasks]], " : ",
                 Hyperlink [MagnifiedTooltip [Bolde ["Well known"], $FinchCitation],
                                 "http://www.people.fas.harvard.edu/~sfinch/"]}],
           CheckboxBar [Dynamic [dynamicWellKnownConstantsTasks],
             {$FeigenbaumAlphaTasks -> Row [{Hyperlink ["FeigenbaumAlpha",
                "https://oeis.org/search?q=2.502907875095&sort=&language=english&go=Search"], " = 2.5029..."}],
              $FeigenbaumDeltaTasks -> Row [{Hyperlink ["FeigenbaumDelta",
                "https://oeis.org/search?q=4.669201609&sort=&language=english&go=Search"], " = 4.669..."}],
              $FibonacciFactorialTasks -> Row [{Hyperlink ["FibonacciFactorial",
                "https://oeis.org/search?q=1.22674201072&sort=&language=english&go=Search"], " = 1.2267..."}],
              $GoldenRatioTasks -> Row [{Hyperlink ["GoldenRatio",
                "https://en.wikipedia.org/wiki/Golden_ratio"], " = \[Phi] = (1 + \!\(\*SqrtBox[\(5\)]\))/2 = 1.618..."}],
              $LurothLevyTasks -> Row [{Hyperlink ["LurothLevy",
                "https://oeis.org/search?q=2.0462774528&sort=&language=&go=Search"], " = 2.046..."}],
              $LurothKhintchine1stTasks -> Row [{Hyperlink ["LurothKhintchine1st",
                "https://oeis.org/search?q=0.78853056591&sort=&language=&go=Search"], " = 0.7885..."}],
              $LurothKhintchine2ndTasks -> Row [{Hyperlink ["LurothKhintchine2nd",
                "https://oeis.org/search?q=2.2001610580&sort=&language=&go=Search"], " = 2.200..."}],
              $Madelung3DNaClTasks -> Row [{Hyperlink ["Madelung3DNaCl",
                "https://oeis.org/search?q=1.747564594633&sort=&language=&go=Search"], " = -1.74756..."}],
              $MadelungHexagonalTasks -> Row [{Hyperlink ["MadelungHexagonal",
                "https://oeis.org/search?q=1.5422197217&sort=&language=&go=Search"], " = 1.542..."}],
              $MyrbergTasks -> Row [{Hyperlink ["Myrberg",
                "https://oeis.org/search?q=1.401155189&sort=&language=&go=Search"], " = 1.401..."}],
              $ParisTasks -> Row [{Hyperlink ["Paris",
                "https://oeis.org/search?q=1.0986419643941&sort=&language=&go=Search"], " = 1.0986..."}],
              $RobinsonATasks -> Row [{Hyperlink ["RobinsonA",
                "https://oeis.org/search?q=2.3038421962&sort=&language=&go=Search"], " = 2.3038..."}],
              $RobinsonBTasks -> Row [{Hyperlink ["RobinsonB",
                "https://oeis.org/search?q=3.3038421963&sort=&language=&go=Search"], " = 3.3038..."}],
              $RobinsonCTasks -> Row [{Hyperlink ["RobinsonC",
                "https://oeis.org/search?q=2.22475148098&sort=&language=&go=Search"], " = 2.22475..."}],
              $RobinsonDTasks -> Row [{Hyperlink ["RobinsonD",
                "https://oeis.org/search?q=3.4493588902&sort=&language=&go=Search"], " = 3.449..."}]},
              Appearance -> "Vertical" -> {Automatic, 3}]}],

         OpenerView [{
           Row [{Button ["Reset",
                         dynamicNumberTheoryConstantsTasks = $DefaultNumberTheoryConstantsTasks,
                         Enabled -> Dynamic [dynamicNumberTheoryConstantsTasks =!= $DefaultNumberTheoryConstantsTasks],
                         ImageSize -> Automatic], " ",
                 SetterBar [Dynamic [dynamicNumberTheoryConstantsTasks],
                            {{} -> "None", $AllNumberTheoryConstantsTasks -> $AllNumberTheoryLabel}], " : ",
                 Dynamic [Length [dynamicNumberTheoryConstantsTasks] +
                            Boole [MemberQ [dynamicNumberTheoryConstantsTasks, $StieltjesGammaTasks]] *
                              ($MaxAllowedStieltjesGammaIndex - 1)],
                  " : ", Bolde ["Number theory"]}],
           CheckboxBar [Dynamic [dynamicNumberTheoryConstantsTasks],
             {$AlladiGrinsteadTasks -> Row [{Hyperlink ["AlladiGrinstead",
                "https://oeis.org/search?q=0.428249505677&sort=&language=english&go=Search"], " = 0.809..."}],
              $AtkinsonNegroSantoroTasks -> Row [{Hyperlink ["AtkinsonNegroSantoro",
                "https://oeis.org/search?q=0.3166841736&sort=&language=english&go=Search"], " = 0.31668..."}],
              $AverageClassNumberTasks -> Row [{Hyperlink ["AverageClassNumber",
                "https://oeis.org/search?q=0.881513839&sort=&language=english&go=Search"], " = 0.8815..."}],
              $Bendersky2ndTasks -> Row [{Hyperlink ["Bendersky2nd",
                "https://oeis.org/search?q=1.030916752&sort=&language=english&go=Search"], " = 1.0309..."}],
              (*$BinarySelfNumbersDensityTasks -> Row [{Hyperlink ["BinarySelfNumbersDensity",
                "https://oeis.org/search?q=0.2526602590&sort=&language=english&go=Search"], " = 0.25266..."}],*)
              $CarefreeTasks -> Row [{Hyperlink ["Carefree",
                "https://oeis.org/search?q=0.428249505677&sort=&language=english&go=Search"], " = 0.428..."}],
              $ConwayGuyTasks -> Row [{Hyperlink ["ConwayGuy",
                "https://oeis.org/search?q=0.2351252848&sort=&language=english&go=Search"], " = 0.2351..."}],
              $FellerTornierTasks -> Row [{Hyperlink ["FellerTornier",
                "https://oeis.org/search?q=0.661317049469&sort=&language=english&go=Search"], " = 0.661..."}],
              $GaussKuzminWirsingTasks -> Row [{Hyperlink ["GaussKuzminWirsing",
                "https://oeis.org/search?q=0.30366300289&sort=&language=english&go=Search"], " = 0.30366..."}],
              $GeneralizedStirlingTasks -> Row [{Hyperlink ["GeneralizedStirling",
                "https://oeis.org/search?q=1.0031782279&sort=&language=english&go=Search"], " = 1.003..."}],
              $HafnerSarnakMcCurleyTasks -> Row [{Hyperlink ["HafnerSarnakMcCurley",
                "https://oeis.org/search?q=0.3532363718&sort=&language=english&go=Search"], " = 0.353..."}],
              $HallMontgomeryTasks -> Row [{Hyperlink ["HallMontgomery",
                "https://oeis.org/search?q=0.171500493141&sort=&language=english&go=Search"], " = 0.1715..."}],
              (*$HeathBrownMorozTasks -> Row [{Hyperlink ["HeathBrownMoroz",
                "https://oeis.org/search?q=0.001317641154&sort=&language=english&go=Search"], " = 0.0013176..."}],*)
              $LandauRamanujanTasks -> Row [{Hyperlink ["LandauRamanujan",
                "https://oeis.org/search?q=0.7642236535892206&sort=&language=english&go=Search"], " = 0.764..."}],
              $MillTasks -> Row [{Hyperlink ["Mill",
                "https://oeis.org/search?q=1.3063778838&sort=&language=english&go=Search"], " = 1.306..."}],
              $MurataTasks -> Row [{Hyperlink ["Murata",
                "https://oeis.org/search?q=2.8264199970675915&sort=&language=english&go=Search"], " = 2.826..."}],
              $NivenTasks -> Row [{Hyperlink ["Niven",
                "https://oeis.org/search?q=1.705211140105367&sort=&language=english&go=Search"], " = 1.705..."}],
              $NortonTasks -> Row [{Hyperlink ["Norton",
                "https://oeis.org/search?q=0.06535142&sort=&language=english&go=Search"], " = 0.06535..."}],
              $OdlyzkoWilfTasks -> Row [{Hyperlink ["OdlyzkoWilf",
                "https://oeis.org/search?q=1.622270502&sort=&language=english&go=Search"], " = 1.622..."}],
              $PellTasks -> Row [{Hyperlink ["Pell",
                "https://oeis.org/search?q=0.580577558204&sort=&language=english&go=Search"], " = 0.580577558..."}],
              $PorterTasks -> Row [{Hyperlink ["Porter",
                "https://oeis.org/search?q=1.467078079&sort=&language=english&go=Search"], " = 1.467..."}],
              $PrimeReciprocalTasks -> Row [{Hyperlink ["PrimeReciprocal",
                "https://oeis.org/search?q=0.261497212847&sort=&language=&go=Search"], " = 0.261497..."}],
              $QuadraticResidues1stTasks -> Row [{Hyperlink ["QuadraticResidues1st",
                "https://oeis.org/search?q=3.1477551&sort=&language=&go=Search"], " = 3.147755..."}],
              $QuadraticResidues2ndTasks -> Row [{Hyperlink ["QuadraticResidues2nd",
                "https://oeis.org/search?q=3.67464396601&sort=&language=english&go=Search"], " = 3.67..."}],
              $RosserTasks -> Row [{Hyperlink ["Rosser",
                "https://oeis.org/search?q=1.20130355996&sort=&language=&go=Search"], " = 1.2013..."}],
              $SalemTasks -> Row [{Hyperlink ["Salem",
                "https://oeis.org/search?q=1.1762808182&sort=&language=english&go=Search"], " = 1.176..."}],
              $SierpinskiTasks -> Row [{Hyperlink ["Sierpinski",
                "https://oeis.org/search?q=2.5849817595&sort=&language=&go=Search"], " = 2.58498..."}],
              $StieltjesGammaTasks -> Row [{Hyperlink [$StieltjesGammaLabel,
                 "http://reference.wolfram.com/language/ref/StieltjesGamma.html?q=StieltjesGamma"],
                " = \!\(\*SubscriptBox[\(\[Gamma]\), \(n\)]\)"}],
              $StolarskyHarborthTasks -> Row [{Hyperlink ["StolarskyHarborth",
                "https://oeis.org/search?q=0.812556559&sort=&language=english&go=Search"], " = 0.812556559..."}],
              $StronglyCarefreeTasks -> Row [{Hyperlink ["StronglyCarefree",
                "https://oeis.org/search?q=0.28674742843&sort=&language=&go=Search"], " = 0.286747..."}],
              $TwinPrimeTasks -> Row [{Hyperlink ["TwinPrime",
                "https://oeis.org/search?q=0.660161815846&sort=&language=english&go=Search"], " = 0.65167..."}],
              $ZagierTasks -> Row [{Hyperlink ["Zagier",
                "https://oeis.org/search?q=0.180717104711&sort=&language=&go=Search"], " = 0.1807..."}]},
              Appearance -> "Vertical" -> {Automatic, 3}]}],

         OpenerView [{
           Row [{Button ["Reset", dynamicIterationConstantsTasks = $DefaultIterationConstantsTasks,
                         Enabled -> Dynamic [dynamicIterationConstantsTasks =!= $DefaultIterationConstantsTasks],
                         ImageSize -> Automatic], " ",
                 SetterBar [Dynamic [dynamicIterationConstantsTasks],
                            {{} -> "None", $AllIterationConstantsTasks -> $AllIterationLabel}], " : ",
                 Dynamic [Length [dynamicIterationConstantsTasks]],
                 " : ", Bolde ["Function iteration"]}],
           CheckboxBar [Dynamic [dynamicIterationConstantsTasks],
             {$CahenTasks -> Row [{Hyperlink ["Cahen",
                "https://oeis.org/search?q=0.64341054628&sort=&language=english&go=Search"], " = 0.6434..."}],
              $DottieTasks -> Row [{Hyperlink ["Dottie",
                "https://oeis.org/search?q=0.7390851332&sort=&language=english&go=Search"], " = 0.739085..."}],
              $EulerGompertzTasks -> Row [{Hyperlink ["EulerGompertz",
                "https://oeis.org/search?q=1.1874523&sort=&language=english&go=Search"], " = 1.187..."}],
              $FlajoletMartinTasks -> Row [{Hyperlink ["FlajoletMartin",
                "https://oeis.org/search?q=0.7735162909&sort=&language=english&go=Search"], " = 0.7735..."}],
              $FoiasTasks -> Row [{Hyperlink ["Foias",
                "https://oeis.org/search?q=1.1874523&sort=&language=english&go=Search"], " = 1.187..."}],
              $GrossmanTasks -> Row [{Hyperlink ["Grossman",
                "https://oeis.org/search?q=0.7373383033&sort=&language=english&go=Search"], " = 0.737338..."}],
              $KeplerBouwkampTasks -> Row [{Hyperlink ["KeplerBouwkamp",
                "https://oeis.org/search?q=0.1149420&sort=&language=english&go=Search"], " = 0.1149..."}],
              $KomornikLoretiTasks -> Row [{Hyperlink ["KomornikLoreti",
                "https://oeis.org/search?q=1.787231650&sort=&language=english&go=Search"], " = 1.787..."}],
              $LehmerTasks -> Row [{Hyperlink ["Lehmer",
                "https://oeis.org/search?q=0.5926327182&sort=&language=english&go=Search"], " = 0.5926327182..."}],
              $LemniscateArclengthTasks -> Row [{Hyperlink ["LemniscateArclength",
                "https://oeis.org/search?q=5.244115108584&sort=&language=&go=Search"], " = 5.244..."}],
              $MinkowskiBowerTasks -> Row [{Hyperlink ["MinkowskiBower",
                "https://oeis.org/search?q=0.4203723394&sort=&language=&go=Search"], " = 0.42037..."}],
              $PaperFoldingTasks -> Row [{Hyperlink ["PaperFolding",
                "https://oeis.org/search?q=0.850736188&sort=&language=english&go=Search"], " = 0.8507..."}],
              $PlouffeKTasks -> Row [{Hyperlink ["PlouffeK",
                "https://oeis.org/search?q=0.4756260&sort=&language=english&go=Search"], " = 0.4756..."}],
              $ProuhetThueMorseTasks -> Row [{Hyperlink ["ProuhetThueMorse",
                "https://oeis.org/search?q=0.41245403364&sort=&language=english&go=Search"], " = 0.41245..."}],
              $RabbitTasks -> Row [{Hyperlink ["Rabbit",
                "https://oeis.org/search?q=0.70980344&sort=&language=english&go=Search"], " = 0.7098..."}],
              $RamanujanSoldnerTasks -> Row [{Hyperlink ["RamanujanSoldner",
                "https://oeis.org/search?q=1.451369&sort=&language=english&go=Search"], " = 1.451..."}],
              $Trott1Tasks -> Row [{Hyperlink ["Trott1",
                "https://oeis.org/search?q=0.10841015122311&sort=&language=&go=Search"], " = 0.10841..."}],
              $UbiquitousTasks -> Row [{Hyperlink ["Ubiquitous",
                "https://oeis.org/search?q=0.847213084793979&sort=&language=&go=Search"], " = 0.10841..."}],
              $WeierstrassTasks -> Row [{Hyperlink ["Weierstrass",
                "https://oeis.org/search?q=0.4749493&sort=&language=english&go=Search"], " = 0.4749..."}]},
              Appearance -> "Vertical" -> {Automatic, 3}]}],

         OpenerView [{
           Row [{Button ["Reset", dynamicEnumerationConstantsTasks = $DefaultEnumerationConstantsTasks,
                         Enabled -> Dynamic [dynamicEnumerationConstantsTasks =!= $DefaultEnumerationConstantsTasks],
                         ImageSize -> Automatic], " ",
                 SetterBar [Dynamic [dynamicEnumerationConstantsTasks],
                            {{} -> "None", $AllEnumerationConstantsTasks -> $AllEnumerationLabel}], " : ",
                 Dynamic [Length [dynamicEnumerationConstantsTasks]],
                 " : ", Bolde ["Enumeration"]}],
           CheckboxBar [Dynamic [dynamicEnumerationConstantsTasks],
             {$BackhouseTasks -> Row [{Hyperlink ["Backhouse",
                "https://oeis.org/search?q=1.4560749&sort=&language=english&go=Search"], " = 1.456..."}],
              $ErdosBorweinTasks -> Row [{Hyperlink ["ErdosBorwein",
                "https://oeis.org/search?q=1.606695&sort=&language=english&go=Search"], " = 1.606695..."}],
              $FibonacciReciprocalTasks -> Row [{Hyperlink ["FibonacciReciprocal",
                "https://oeis.org/search?q=3.3598856&sort=&language=english&go=Search"], " = 3.359885666..."}],
              $FlajoletOdlyzkoTasks -> Row [{Hyperlink ["FlajoletOdlyzko",
                "https://oeis.org/search?q=0.7578230112&sort=&language=english&go=Search"], " = 0.7578..."}],
              $GohSchmutzTasks -> Row [{Hyperlink ["GohSchmutz",
                "https://oeis.org/search?q=1.117864&sort=&language=english&go=Search"], " = 1.11786..."}],
              $GohSchmutzBTasks -> Row [{Hyperlink ["GohSchmutzB",
                "https://oeis.org/search?q=2.99047039937&sort=&language=english&go=Search"], " = 2.990..."}],
              $GolombDickmanTasks -> Row [{Hyperlink ["GolombDickman",
                "https://oeis.org/search?q=0.624329988&sort=&language=english&go=Search"], " = 0.6243..."}],
              $HardHexagonEntropyTasks -> Row [{Hyperlink ["HardHexagonEntropy",
                "https://oeis.org/search?q=1.395485&sort=&language=english&go=Search"], " = 1.395..."}],
              $HardSquareEntropyTasks -> Row [{Hyperlink ["HardSquareEntropy",
                "https://oeis.org/search?q=1.503048&sort=&language=english&go=Search"], " = 1.503..."}],
              $LengyelTasks -> Row [{Hyperlink ["Lengyel",
                "https://oeis.org/search?q=1.09868580552&sort=&language=english&go=Search"], " = 1.0986858..."}],
              $MagataTasks -> Row [{Hyperlink ["Magata",
                "https://oeis.org/search?q=3.40706&sort=&language=english&go=Search"], " = 3.407..."}],
              $TakeuchiPrelbergTasks -> Row [{Hyperlink ["TakeuchiPrelberg",
                "https://oeis.org/search?q=2.239433104&sort=&language=&go=Search"], " = 2.239..."}],
              $TriangularEntropyOfFoldingTasks -> Row [{Hyperlink ["TriangularEntropyOfFolding",
                "https://oeis.org/search?q=0.1895600483163&sort=&language=&go=Search"], " = 0.18956..."}]},
              Appearance -> "Vertical" -> {Automatic, 3}]}],

         OpenerView [{
           Row [{Button ["Reset", dynamicInequalitiesConstantsTasks = $DefaultInequalitiesConstantsTasks,
                         Enabled -> Dynamic [dynamicInequalitiesConstantsTasks =!= $DefaultInequalitiesConstantsTasks],
                         ImageSize -> Automatic], " ",
                 SetterBar [Dynamic [dynamicInequalitiesConstantsTasks],
                            {{} -> "None", $AllInequalitiesConstantsTasks -> $AllInequalitiesLabel}], " :  ",
                 Dynamic [Length [dynamicInequalitiesConstantsTasks]],
                 " : ", Bolde ["Inequalities"]}],
           CheckboxBar [Dynamic [dynamicInequalitiesConstantsTasks],
             {$BrownWangTasks -> Row [{Hyperlink ["BrownWang",
                "https://oeis.org/search?q=2.11023396612&sort=&language=english&go=Search"], " = 2.110..."}],
              $ElbertTasks -> Row [{Hyperlink ["Elbert",
                "https://oeis.org/search?q=0.978012478&sort=&language=english&go=Search"], " = 0.9780..."}],
              $GiesekingTasks -> Row [{Hyperlink ["Gieseking",
                "https://oeis.org/search?q=1.014941606&sort=&language=english&go=Search"], " = 1.0149..."}],
              $KneserMahlerBetaTasks -> Row [{Hyperlink ["KneserMahlerBeta",
                "https://oeis.org/search?q=1.3813564445&sort=&language=english&go=Search"], " = 1.381..."}],
              $ShapiroDrinfeldTasks -> Row [{Hyperlink ["ShapiroDrinfeld",
                "https://oeis.org/search?q=0.49456681722&sort=&language=&go=Search"], " = 0.4945668..."}],
              $VanDerCorputTasks -> Row [{Hyperlink ["VanDerCorput",
                "https://oeis.org/search?q=3.364317578&sort=&language=english&go=Search"], " = 3.36..."}],
              $ZolotarevSchurTasks -> Row [{Hyperlink ["ZolotarevSchur",
                "https://oeis.org/search?q=0.3110788667048&sort=&language=english&go=Search"], " = 0.311..."}]},
              Appearance -> "Vertical" -> {Automatic, 3}]}],

         OpenerView [{
           Row [{Button ["Reset", dynamicApproximationConstantsTasks = $DefaultApproximationConstantsTasks,
                         Enabled -> Dynamic [dynamicApproximationConstantsTasks =!= 
                                              $DefaultApproximationConstantsTasks],
                         ImageSize -> Automatic], " ",
                 SetterBar [Dynamic [dynamicApproximationConstantsTasks],
                            {{} -> "None",
                             $AllApproximationConstantsTasks -> $AllApproximationLabel}], " :  ",
                 Dynamic [Length [dynamicApproximationConstantsTasks]],
                 " : ", Bolde ["Function approximation"]}],
           CheckboxBar [Dynamic [dynamicApproximationConstantsTasks],
             {$BernsteinTasks -> Row [{Hyperlink ["Bernstein",
                "https://oeis.org/search?q=0.28016949&sort=&language=english&go=Search"], " = 0.280169..."}],
              $ConwayTasks -> Row [{Hyperlink ["Conway",
                "https://oeis.org/search?q=1.30357726&sort=&language=english&go=Search"], " = 1.303577..."}],
              $FransenRobinsonTasks -> Row [{Hyperlink ["FransenRobinson",
                "https://oeis.org/search?q=2.807770242&sort=&language=english&go=Search"], " = 2.80777..."}],
              $LaplaceLimitTasks -> Row [{Hyperlink ["LaplaceLimit",
                "https://oeis.org/search?q=0.66274341&sort=&language=english&go=Search"], " = 0.6627..."}],
              $Lebesgue1stTasks -> Row [{Hyperlink ["Lebesgue1st",
                "https://oeis.org/search?q=1.435991124&sort=&language=english&go=Search"], " = 1.43599..."}],
              $Lebesgue2ndTasks -> Row [{Hyperlink ["Lebesgue2nd",
                "https://oeis.org/search?q=1.64218843522&sort=&language=english&go=Search"], " = 1.64..."}],
              $Lebesgue3rdTasks -> Row [{Hyperlink ["Lebesgue3rd",
                "https://oeis.org/search?q=1.77832286&sort=&language=english&go=Search"], " = 1.778..."}],
              $OneNinthTasks -> Row [{Hyperlink ["OneNinth",
                "https://oeis.org/search?q=0.107653919&sort=&language=english&go=Search"], " = 0.10765..."}],
              $RodTasks -> Row [{Hyperlink ["Rod",
                "https://oeis.org/search?q=4.730040744862&sort=&language=&go=Search"], " = 4.7300..."}]},
              Appearance -> "Vertical" -> {Automatic, 3}]}],

         OpenerView [{
           Row [{Button ["Reset", dynamicComplexAnalysisConstantsTasks = $DefaultComplexAnalysisConstantsTasks,
                         Enabled -> Dynamic [dynamicComplexAnalysisConstantsTasks =!= $DefaultComplexAnalysisConstantsTasks],
                         ImageSize -> Automatic],  " ",
                 SetterBar [Dynamic [dynamicComplexAnalysisConstantsTasks],
                            {{} -> "None", $AllComplexAnalysisConstantsTasks -> $AllComplexAnalysisLabel}], " : ",
                 Dynamic [Length [dynamicComplexAnalysisConstantsTasks]],
                 " : ", Bolde ["Complex analysis"]}],
           CheckboxBar [Dynamic [dynamicComplexAnalysisConstantsTasks],
             {$JohnTasks -> Row [{Hyperlink ["John",
                "https://oeis.org/search?q=7.187903351641&sort=&language=english&go=Search"], " = 7.1879..."}],
              $MasserGramainCTasks -> Row [{Hyperlink ["MasserGramainC",
                "http://mathworld.wolfram.com/Masser-GramainConstant.html"], " = 0.6462..."}]},
              Appearance -> "Vertical" -> {Automatic, 3}]}],

         OpenerView [{
           Row [{Button ["Reset", dynamicGeometryConstantsTasks = $DefaultGeometryConstantsTasks,
                         Enabled -> Dynamic [dynamicGeometryConstantsTasks =!= $DefaultGeometryConstantsTasks],
                         ImageSize -> Automatic],  " ",
                 SetterBar [Dynamic [dynamicGeometryConstantsTasks],
                            {{} -> "None", $AllGeometryConstantsTasks -> $AllGeometryLabel}], " : ",
                 Dynamic [Length [dynamicGeometryConstantsTasks]],
                 " : ", Bolde ["Geometry"]}],
           CheckboxBar [Dynamic [dynamicGeometryConstantsTasks],
             {$GrazingGoatTasks -> Row [{Hyperlink ["GrazingGoat",
                "https://oeis.org/search?q=1.15872847&sort=&language=english&go=Search"], " = 1.1587..."}],
              $KuijlaarsSaffTasks -> Row [{Hyperlink ["KuijlaarsSaff",
                "https://oeis.org/search?q=0.55305129335&sort=&language=english&go=Search"], " = 0.55305..."}],
              $MrsMiniverTasks -> Row [{Hyperlink ["MrsMiniver",
                "https://oeis.org/search?q=0.2649320846&sort=&language=english&go=Search"], " = 0.2649..."}]},
              Appearance -> "Vertical" -> {Automatic, 3}]}]}],
      "  "}],
      Background -> LightYellow]},

  {ChooseConstantsHelpSubTab, Style [": ? ", Bold] -> $ConstantsHelp},

  {ResultFormatSubTab, Bolde [Ital ["Result format"]] ->
     RadioButtonBar [Dynamic [dynamicResultFormat],
       {StandardForm -> Row[{$ItalMathematica, " 2D "}],
        TraditionalForm -> "Traditional 2D ",
        TeXForm -> "LaTeX ",
        InputForm -> Row[{$ItalMathematica, " 1D "}],
        ToString1D -> Row[{$ItalMathematica, " string "}],
        FullForm -> Row[{$ItalMathematica, " Full "}]},
       Appearance -> "Vertical"]},

  {ResultSubTab, Bolde [Ital ["Result"]] -> Grid [{
    {Dynamic [Pane [dynamicMessageOrAcceptedExpressions, ImageSize -> {$ProposeExpressionWidth, $ProposeSubtabsViewHeight}, Alignment -> Top]],
     Dynamic [Pane [dynamicScatterPlot, ImageSize -> {$ScatterPlotImageWidth, $ProposeSubtabsViewHeight}, Alignment -> Top]]}}]}},
    Dynamic [dynamicProposeSubTabChoice] (* :Initialially the Result tab *),
        ImageSize -> {Automatic, $ProposeSubtabsViewHeight}]]], SpanFromLeft}},
      Frame->All, Alignment -> {Left, Top}]];


(* ::Subsubsection::Closed:: *)
(*DisplayMessageOrAcceptedAndCPUTime [ ] :*)


DisplayMessageOrAcceptedAndCPUTime [citation_, cpuTimeAndProposeResult_,
                           maxSec_, resultExpressionFormat_, givenFloat_] :=
  If [StringQ [Last [cpuTimeAndProposeResult]],
      Last [cpuTimeAndProposeResult],
  Module [{time = First [cpuTimeAndProposeResult],
           acceptedSets = cpuTimeAndProposeResult[[2,1]],
           rejectedCandidates = cpuTimeAndProposeResult[[2,2]],
           absRealExponent, citationAndExpressions, verboseTime},
(*Print [{DisplayMessageOrAcceptedAndCPUTime, time, citation, maxSec, acceptedSets, $proposeTimeoutQ}];*)
    If [acceptedSets === Null,
        Return [Style ["", 1]]];

    absRealExponent = 1 + Ceiling [Abs [RealExponent [givenFloat]]];
    citationAndExpressions =
      Which [
        givenFloat =!= 0.0 && absRealExponent >= Precision [givenFloat],
          Row [{"\[Bullet] Such a ", If [Abs [givenFloat] > 1.0, "large", "small"],
                " magnitude needs at least ",  absRealExponent, ", significant digits.
\[Bullet] To the extent justified, either add trailing 0 digits after the decimal
  point, or append a suffix such as `", 1 + absRealExponent, " to the end of the significand.
\[Bullet] ` is the accent grave usually near the upper left keyboard corner.
\[Bullet] It is not an apostrophe."}],
        acceptedSets === {},
          Column [{Row [{"No candidates having ",
                         MagnifiedTooltip [Style ["Merit", $TooltipColor1],
"Merit = Agreement margin
         = Agreement - \!\(\*SubscriptBox[\(Entropy\), \(10\)]\)"],
                         " \[GreaterEqual] ", $LowestBadMerit, " were found."}],
                   MagnifiedTooltip [Style ["Possible reasons...", $TooltipColor1],
                                     $ReasonsForAllTerribleTooltip]}(*,
                   ItemSize -> $ExpressionDisplayWidth*)],
        True,
          Pane [
          Column [MapIndexed [
                     If [Length[#1] === 1,
                         Row [{$PlotMarkers[[Mod[First[#2], 9, 1]]],  ": ",
                               resultExpressionFormat [
                                 If [resultExpressionFormat === StandardForm ||
                                       resultExpressionFormat === TraditionalForm,
                                     TooltippedExpressionColoredByMerit [First[#1],
                                                  resultExpressionFormat === StandardForm ||
                                                  resultExpressionFormat === TraditionalForm],
                                     resultExpressionFormat [#1[[1,1]]]]]}],
                         Row [{$PlotMarkers[[Mod[First[#2], 9, 1]]], ": ",
                               Style [
                               resultExpressionFormat [
                                 Apply [Congruent,
                                        If [resultExpressionFormat === StandardForm ||
                                              resultExpressionFormat === TraditionalForm,
                                             MapTooltipedExpressionColoredByMerit [#1,
                                                    resultExpressionFormat === StandardForm ||
                                                    resultExpressionFormat === TraditionalForm],
                                             Map [#1[[1,1]]]]]], Bold]}]] &, 
                     acceptedSets]], ImageSize -> {$ProposeExpressionWidth, Automatic},
                                     ImageSizeAction->"ShrinkToFit"]];
      If [citation =!= Null,
          citationAndExpressions = Column [{citation, citationAndExpressions}]];

      Column [{citationAndExpressions,
               If [$proposeTimeoutQ,
                   Row [{"Search timeout at Max Sec = ", maxSec}],
                   Style [Row [{"Search CPU seconds = ", NumberForm [time, {9,1}]}], (*Smaller, *)Gray]]}]]];


(* ::Subsubsection::Closed:: *)
(*DisplayNothingOrPlot [ ] :*)


DisplayNothingOrPlot [completeInput_, proposeResult_, resultFormat_] :=
  If [Head [proposeResult] =!= List || StringQ [proposeResult] || Head [completeInput] =!= Real ||
        proposeResult === {{},{}} ||
        completeInput =!= 0.0 && Abs [RealExponent [completeInput]] >= Precision [completeInput] - $LowestBadMerit,
      "",
      Module [{acceptedSets = First [proposeResult],
               rejectedCandidates = Take [Sort [Last [proposeResult], #1[[3]] <= #2[[3]] &],
                                          Min [$maxNumberOfRejects, Length [Last[proposeResult]]]],
               plotRange},
        plotRange = NicePlotRange [acceptedSets, rejectedCandidates];
(*Print [{DisplayNothingOrPlot, proposeResult, acceptedSets, plotRange}];*)
        If [acceptedSets === {},
            Column [{
        Show [Plot[{plotRange[[2,2]],
                    Max [0.04 + $MinAllowedPrecisionGoal, entropy10 + $LowestExcellentMerit], (* :LightPink *)
                    Max [0.03 + $MinAllowedPrecisionGoal, entropy10 + $LowestGoodMerit],    (* :LightOrange *)
                    Max [0.02 + $MinAllowedPrecisionGoal, entropy10 + $LowestMediumMerit],  (* :LightYellow *)
                    Max [0.01 + $MinAllowedPrecisionGoal, entropy10 + $LowestPoorMerit],     (* :LightGreen *)
                    Max [$MinAllowedPrecisionGoal, entropy10 + $LowestBadMerit]},    (* :LightPurple *)
                    {entropy10, plotRange[[1,1]], plotRange[[1,2]]},
                    PlotRange -> plotRange,
                    AxesOrigin -> {plotRange[[1,1]], plotRange[[2,1]]},
                    PlotLabel -> If [rejectedCandidates === {},
                                     None,
                                     Style ["Many worse rejects not shown \[LowerRightArrow]",  Bold]],
                    AxesLabel -> MagnifiedTooltip [Style["Agreement", Larger, Bold, $TooltipColor1],
                                          Style ["= Number of agreeing significant digits
= Min [significandDigits, -\!\(\*SubscriptBox[\(Log\), \(10\)]\)[Abs [\!\(\*FractionBox[\(float\\\  - \\\ expression\), \(float\)]\)]]]",
                                                 ScriptSizeMultipliers -> 0.85]],
                    PlotStyle -> None,
                    Filling -> {1 -> {{2}, LightPink},
                                2 -> {{3}, LightOrange},
                                3 -> {{4}, LightYellow},
                                4 -> {{5}, LightGreen},
                                5 -> {{6}, LightPurple}},
                    FillingStyle -> Directive[Opacity[1.0]]],
              ListPlot [Map [CandidateTooltipPopupInfo [#, completeInput, resultFormat] &, rejectedCandidates],
                        PlotRange -> plotRange,
                        PlotMarkers -> Style ["\[FilledVerySmallSquare]", Black]],
              Graphics [MagnifiedTooltip [Rotate [Style[Text["Excellent", {2.5, 14.3}], Larger, Bold, $TooltipColor1],
                                                  Pi/4],
                                          "Merit \[GreaterEqual] 11  is Excellent"]],
              Graphics [MagnifiedTooltip [Rotate [Style[Text["Good", {1.6, 11.7}], Larger, Bold, $TooltipColor1], Pi/4],
                                          "9 \[LessEqual] Merit < 11  is Good"]],
              Graphics [MagnifiedTooltip [Rotate [Style[Text["Medium", {2.2, 10.1}], Larger, Bold, $TooltipColor1], Pi/4],  
                                          "7 \[LessEqual] Merit < 9  is Medium"]],
              Graphics [MagnifiedTooltip [Rotate [Style[Text["Poor", {1.6, 7.6}], Larger, Bold, $TooltipColor1], Pi/4],
                                          "5 \[LessEqual] Merit < 7  is Poor"]],
              Graphics [MagnifiedTooltip [Rotate [Style[Text["Bad", {1.5, 5.6}], Larger, Bold, $TooltipColor1], Pi/4],
                                          "3 \[LessEqual] Merit < 5  is Bad"]],
              Graphics [MagnifiedTooltip [Rotate [Style[Text["Terrible", {2.3, 4.0}], Larger, Bold, $TooltipColor1], Pi/4],
                                          "Merit < 3  is Terrible"]],
              Graphics [MagnifiedTooltip [Rotate [Style[Text["Merit \!\(\*SubsuperscriptBox[\(\[UpDownArrow]\), \(-\), \(+\)]\)", {3.5, 2.8}],
                                      Larger, Bold, $TooltipColor1], Pi/4],
                                "Merit = Agreement margin
         = Agreement - \!\(\*SubscriptBox[\(Entropy\), \(10\)]\)"]], ImageSize -> $ScatterPlotImageWidth],
        Style [Row [{"                                                                ",
                     MagnifiedTooltip [Style ["Entropy", Larger, Bold, $TooltipColor1],
                              Style [
" \[TildeTilde] (\!\(\*SubscriptBox[\(\[Sum]\), \(\(\\\ \)\(k\)\)]\) \!\(\*SubscriptBox[\(Log\), \(10\)]\)[Abs [\!\(\*SubscriptBox[\(integer\), \(k\)]\)]])
                      + \[TildeTilde] 1.0 per operator, function or symbolic constant.
 < (\[Sum] # digits) + \[TildeTilde] 1.0 per operator, function or symbolic constant.",
                              ScriptSizeMultipliers -> 0.85]],
                     Style ["10", Tiny, Bold]}](*, Smaller*)]}],
         (* else: *)  Column [
     {(*MagnifiedTooltip [*)
        Show [Plot[{plotRange[[2,2]],
                    Max [0.04 + $MinAllowedPrecisionGoal, entropy10 + $LowestExcellentMerit], (* :LightPink *)
                    Max [0.03 + $MinAllowedPrecisionGoal, entropy10 + $LowestGoodMerit],    (* :LightOrange *)
                    Max [0.02 + $MinAllowedPrecisionGoal, entropy10 + $LowestMediumMerit],  (* :LightYellow *)
                    Max [0.01 + $MinAllowedPrecisionGoal, entropy10 + $LowestPoorMerit],     (* :LightGreen *)
                    Max [$MinAllowedPrecisionGoal, entropy10 + $LowestBadMerit]},    (* :LightPurple *)
                    {entropy10, plotRange[[1,1]], plotRange[[1,2]]},
                    PlotRange -> plotRange,
                    AxesOrigin -> {plotRange[[1,1]], plotRange[[2,1]]},
                    PlotLabel -> If [rejectedCandidates === {},
                                     None,
                                     Style ["Many worse rejects not shown \[LowerRightArrow]", Bold(*, Smaller*)]],
                    AxesLabel -> MagnifiedTooltip [Style["Agreement", Larger, Bold, $TooltipColor1],
                                          Style ["= Number of agreeing significant digits
= Min [significandDigits, -\!\(\*SubscriptBox[\(Log\), \(10\)]\)[Abs [\!\(\*FractionBox[\(float\\\  - \\\ expression\), \(float\)]\)]]]",
                                                 ScriptSizeMultipliers -> 0.85]],
                    PlotStyle -> None,
                    Filling -> {1 -> {{2}, LightPink},
                                2 -> {{3}, LightOrange},
                                3 -> {{4}, LightYellow},
                                4 -> {{5}, LightGreen},
                                5 -> {{6}, LightPurple}},
                    FillingStyle -> Directive[Opacity[1.0]]],
                  ListLinePlot[Map [CandidateTooltipPopupInfo [#, completeInput, resultFormat] &, acceptedSets, {2}],
                                    PlotRange -> plotRange,
                                    PlotStyle -> Directive [Gray, Thin],
                                    PlotMarkers -> $PlotMarkers],
              ListPlot [Map [CandidateTooltipPopupInfo [#, completeInput, resultFormat] &, rejectedCandidates],
                        PlotRange -> plotRange,  PlotMarkers -> Style ["\[FilledVerySmallSquare]", Black]],
              Graphics [MagnifiedTooltip [Rotate [Style[Text["Excellent", {2.5, 14.3}], Larger, Bold, $TooltipColor1],
                                                  Pi/4],
                                          "Merit \[GreaterEqual] 11  is Excellent"]],
              Graphics [MagnifiedTooltip [Rotate [Style[Text["Good", {1.6, 11.7}], Larger, Bold, $TooltipColor1], Pi/4],
                                          "9 \[LessEqual] Merit < 11  is Good"]],
              Graphics [MagnifiedTooltip [Rotate [Style[Text["Medium", {2.2, 10.1}], Larger, Bold, $TooltipColor1], Pi/4],  
                                          "7 \[LessEqual] Merit < 9  is Medium"]],
              Graphics [MagnifiedTooltip [Rotate [Style[Text["Poor", {1.6, 7.6}], Larger, Bold, $TooltipColor1], Pi/4],
                                          "5 \[LessEqual] Merit < 7  is Poor"]],
              Graphics [MagnifiedTooltip [Rotate [Style[Text["Bad", {1.5, 5.6}], Larger, Bold, $TooltipColor1], Pi/4],
                                          "3 \[LessEqual] Merit < 5  is Bad"]],
              Graphics [MagnifiedTooltip [Rotate [Style[Text["Terrible", {2.3, 4.0}], Larger, Bold, $TooltipColor1], Pi/4],
                                          "Merit < 3  is Terrible"]],
              Graphics [MagnifiedTooltip [Rotate [Style[Text["Merit \!\(\*SubsuperscriptBox[\(\[UpDownArrow]\), \(-\), \(+\)]\)", {3.5, 2.8}],
                                      Larger, Bold, $TooltipColor1], Pi/4],
                                "Merit = Agreement margin
         = Agreement - \!\(\*SubscriptBox[\(Entropy\), \(10\)]\)"]], ImageSize -> $ScatterPlotImageWidth](*,
             Dynamic [NumberForm [MousePosition ["Graphics"], {3, 1}]]]*),
        Style [Row [{"                                                                ",
                     MagnifiedTooltip [Style ["Entropy", Larger, Bold, $TooltipColor1],
                              Style [
" \[TildeTilde] (\!\(\*SubscriptBox[\(\[Sum]\), \(\(\\\ \)\(k\)\)]\) \!\(\*SubscriptBox[\(Log\), \(10\)]\)[Abs [\!\(\*SubscriptBox[\(integer\), \(k\)]\)]])
                      + \[TildeTilde] 1.0 per operator, function or symbolic constant.
 < (\[Sum] # digits) + \[TildeTilde] 1.0 per operator, function or symbolic constant.",
                              ScriptSizeMultipliers -> 0.85]],
                     Style ["10", Tiny, Bold]}](*, Smaller*)]}]]]];


(* ::Subsection::Closed:: *)
(*NSimplifyTab :*)


(* ::Subsubsection:: *)
(*NSimplifyTab [ ] :*)


NSimplifyTab [] := 
  DynamicModule [{dynamicResultDisplay = $FirstTimeUserMessage,
                  dynamicDeStringed = $BlankInputField,
                  dynamicExampleChoice = YourExample,
                  dynamicExampleInput = $BlankInputField,
                  dynamicRealOrComplexFloat = 1.0,
                  dynamicInput = $BlankInputField,
                  dynamicMaxSec = 8,
                  dynamicMoreFunctionsOpenQ = False,
                  dynamicAnnotation = "",
                  dynamicResultFormat = StandardForm,
                  dynamicTimeAndProposeResult = {0, NSimplify[Null]}},
    Grid [{
(* Framed input controls: *)
      {Column [{
         Row [{
           Column [{
             PopupMenu[
                 Dynamic[dynamicExampleChoice,
                         {Automatic, None,
                           (dynamicInput =
                           Switch [dynamicExampleChoice,
                             YourExample,
                               dynamicAnnotation = "";
                               Null,
                             Factorial2,
                               dynamicResultDisplay = "";
                               dynamicAnnotation = $NSimplifyFactorial2Annotation;
                               dynamicExampleInput = $NSimplifyFactorial2Input,
                             Trig,
                               dynamicResultDisplay = "";
                               dynamicAnnotation = $NSimplifyTrigAnnotation;
                               dynamicExampleInput = $NSimplifyTrigInput,
                             InverseHyperbolic,
                               dynamicResultDisplay = "";
                               dynamicAnnotation = $NSimplifyInvHyperAnnotation;
                               dynamicExampleInput = $NSimplifyInvHyperInput,
                             BeyondGalois,
                               dynamicResultDisplay = "";
                               dynamicAnnotation = $NSimplifyBeyondGaloisAnnotation;
                               dynamicExampleInput = $NSimplifyBeyondGaloisInput,
                             PolyLog,
                               dynamicResultDisplay = "";
                               dynamicAnnotation = $NSimplifyPolyLogAnnotation;
                               dynamicExampleInput = $NSimplifyPolyLogInput,
                             EllipticE,
                               dynamicResultDisplay = "";
                               dynamicAnnotation = $NSimplifyEllipticEAnnotation;
                               dynamicExampleInput = $NSimplifyEllipticEInput,
                             Zeta,
                               dynamicResultDisplay = "";
                               dynamicAnnotation = $NSimplifyZetaAnnotation;
                               dynamicExampleInput = $NSimplifyZetaInput,
                             PolyGamma,
                               dynamicResultDisplay = "";
                               dynamicAnnotation = $NSimplifyPolyGammaAnnotation;
                               dynamicExampleInput = $NSimplifyPolyGammaInput];
                         (dynamicExampleChoice = #)) &}],
                 {YourExample -> "Your input \[RightArrow]",
                  Factorial2 -> "\"!!\" example",
                  Trig -> "Radicals to a trig",
                  InverseHyperbolic -> "Inverse hyperbolic",
                  BeyondGalois -> "Beyond Galois",
                  PolyLog -> "PolyLog example",
                  EllipticE -> "EllipticE example",
                  Zeta -> "Zeta example",
                  PolyGamma -> "PolyGamma"}],
             Row [{MagnifiedTooltip [Style ["Purpose...", $TooltipColor1], Row [{
"Try simplifying a non-float constant via fitting a float approximation.
Sometimes it succeeds when no builtin ", $ItalMathematica, " transformation function does."}]],
                   "             ",
                   MagnifiedTooltip [Style ["Help...", $TooltipColor1],
                                      $HelpForEnteringNonFloats]}]}],           
  Style[" :  ", Bold],

               InputField [Dynamic[dynamicInput, Temporary],
                           FieldHint ->
"\[LeftArrow] Choose example, or Click here then Paste or Type a NonFloat constant expression such as  \[Pi]+Log[2].  Then click Go",
                           BaselinePosition -> Center,
                           FieldSize -> {$NSimplifyInputFieldWidth, {2, Infinity}}], "  ",

               Button ["Go",
                 dynamicMoreFunctionsOpenQ = False;
                 If [dynamicInput =!= dynamicExampleInput,
                     dynamicExampleChoice = YourExample;
                     dynamicAnnotation = ""];
                 dynamicDeStringed = If [StringQ [dynamicInput],
                                         Quiet [ToExpression [dynamicInput]],
                                         dynamicInput];
                 dynamicResultDisplay = Which [
                   dynamicDeStringed === $Failed || Head [dynamicDeStringed] === RawBoxes,
                     Beep [];
                     $NSimplifyTabSyntaxErrorInputMessage,
                   ! NumericQ [dynamicDeStringed],
                     Beep[ ];
                     $NSimplifyTabNonnumericQMessage,
                   InexactNumberQ [dynamicDeStringed],
                     Beep[ ];
                     $NSimplifyTabInexactNumericQMessage [dynamicDeStringed],
                   dynamicRealOrComplexFloat = N [dynamicDeStringed];
                   Head [dynamicRealOrComplexFloat] === Complex,
                     Beep [];
                     $NSimplifyTabNonrealInputMessage [dynamicRealOrComplexFloat],
                   Head [dynamicRealOrComplexFloat] =!= Real,
                     Beep [];
                     $NSimplifyTabNonnumericQMessage,
                   True,
                     dynamicResultDisplay = Row [{
"                                                                                      ",
                                                  ProgressIndicator [Appearance->"Necklace"]}];
                     CheckAbort [Module [{deStringed = dynamicDeStringed,
                                          citation = dynamicAnnotation,
                                          maxSec = dynamicMaxSec,
                                          resultFormat = dynamicResultFormat,
                                          approx},
                       dynamicTimeAndProposeResult = TimedNSimplify [deStringed, Automatic, maxSec];
                       $NSimplifyIO = Prepend [Map [{First[#], Entropy10 \[TildeTilde] Last[#]} &,
                                                              Select [Last [dynamicTimeAndProposeResult],
                                                                      First [#] =!= deStringed &]],
                                                         {deStringed, Entropy10 \[TildeTilde] Entropy10 [deStringed]}];
                       $AllNSimplifyIO = Prepend [$AllNSimplifyIO, $NSimplifyIO];
                       ProcessNSimplifyResult [citation, deStringed, Entropy10 [deStringed],
                                               dynamicTimeAndProposeResult, maxSec, resultFormat]],
                       dynamicResultDisplay = $Aborted]],
                 Method -> "Queued", ImageSize -> Automatic], "   ",

                MagnifiedTooltip [Style ["Max", $TooltipColor1],
"\[Bullet] This is the time limit for the search phase.
\[Bullet] Equivalent candidates found before then are always displayed.
\[Bullet] The required time often increases with the entropy10 of your input."],  " : ",
                PopupMenu [Dynamic [dynamicMaxSec, Temporary],
                           $IntegerToTimeList]},
              Alignment -> {Left, Bottom}],
         $MathPasteButtons,
         Row [{
           "Output : ", PopupMenu [Dynamic [dynamicResultFormat, Temporary],
                                         {StandardForm -> Row[{$ItalMathematica, " 2D"}],
                                          TraditionalForm -> "Traditional 2D",
                                          TeXForm -> "LaTeX",
                                          InputForm -> Row[{$ItalMathematica, " 1D"}],
                                          ToString1D -> Row[{$ItalMathematica, " 1D string"}],
                                          FullForm -> Row[{$ItalMathematica, " FullForm"}]
                                          }], "    ",
           ActionMenu [MagnifiedTooltip ["Copy", $AccessibleVariablesString],
                      {"$NSimplifyIO" :> CopyToClipboard [$NSimplifyIO],
                       "$AllNSimplifyIO" :> CopyToClipboard [$AllNSimplifyIO]}],
           (*Button[MagnifiedTooltip [Style ["Copy Result", $TooltipColor1], Row [{
"\[Bullet] This Button copies the input, the result expressions and their
  Entropy10  values to the Clipboard using your selected Output format.
\[Bullet] However, the same information is automatically copied to the global
  variable  $NSimplifyIO.
\[Bullet] All $NSimplifyIO values since last invoking AskConstants [...] are
  automatically accumulated in the global variable  $AllNSimplifyIO."}]],
                  CopyToClipboard [Dynamic [dynamicResultFormat [dynamicTimeAndProposeResult]]]],*)
           "     ",
           OpenerView [{"More constants and functions",
                        Grid [{{$MoreConstantsPasteButtons, "    ", $MoreFunctionsPasteButtons}},
                              Alignment -> Top]},
                       Dynamic [dynamicMoreFunctionsOpenQ]]}]},
      Background -> Lighter[LightOrange]]},

    (* RESULTS: *)
  {Dynamic [Pane [dynamicResultDisplay, ImageSize -> {$AskConstantsWindowWidth, Automatic}]]}},
     Frame -> All, Alignment -> {Left, Center}
     (* Not available in Version 8.0: *)(*, ImageSizeAction -> "ShrinkToFit"*)]];


(* ::Subsubsection::Closed:: *)
(*ProcessNSimplifyResult [...] :*)


TooltippedExpressionsAndEntropy10s [listOfPairs_, resultExpressionFormat_] :=
  With [{toolTippedExpressions =
           Map [MagnifiedTooltip [Style [resultExpressionFormat [First [#]],
                                         Bold, Darker[Magenta], ScriptSizeMultipliers -> 0.95],
                                  Row [{"Entropy10 = ", NumberForm [Last[#], {4, 1}]}]] &,
                listOfPairs]},
    Switch [Length[listOfPairs],
      0,  {},
      1,  First [toolTippedExpressions],
      _,  Apply [Congruent, toolTippedExpressions]]];


ProcessNSimplifyResult [annotation_, deStringed_, inputEntropy10_, CPUtimeAndNSimplifyResult_,
                        maxSec_, resultExpressionFormat_] :=
  Module [{time = First [CPUtimeAndNSimplifyResult],
           NSimplifyResult = Last [CPUtimeAndNSimplifyResult],
           simpler, noSimpler, allButAnnotation},
    If [Head [NSimplifyResult] === NSimplify,
        "",
        NSimplifyResult = DeleteCases [NSimplifyResult, u_/; First [u] === deStringed];
        simpler = TooltippedExpressionsAndEntropy10s [Select [NSimplifyResult, Last [#] < inputEntropy10 &],
                                                      resultExpressionFormat];
        noSimpler = TooltippedExpressionsAndEntropy10s [Select [NSimplifyResult, Last [#] >= inputEntropy10 &],
                                                        resultExpressionFormat];
        allButAnnotation = Column [{
          Row [{"\[Bullet]  The input has  Entropy10 == ", NumberForm [inputEntropy10, {4, 1}], " ."}],
          Style ["", 0.5*$roundedFontSize],
          If [simpler === {},
              If [noSimpler === {},
                  "\[Bullet]  NSimplify [\[Ellipsis]]  was unable to determine an equivalent expression having lower Entropy10.",
                  Column [{"\[Bullet]  Equivalent expressions having identical or larger Entropy10 :",
                           Style ["", 0.5*$roundedFontSize],
                           noSimpler}]],
           (* else simpler =!= {}: *)
              If [noSimpler === {},
                  Column [{"\[Bullet]  Equivalent expressions having smaller Entropy10 :",    
                           Style ["", Round [0.5*$roundedFontSize]],
                           simpler}],
                  Column [{
                    "\[Bullet]  Equivalent expressions having smaller Entropy10 :",    
                    Style ["", Round [0.5*$roundedFontSize]],
                    simpler,
                    Style ["", Round [0.5*$roundedFontSize]],
                    "\[Bullet]  Equivalent expressions having identical or larger Entropy10 :",
                    Style ["", Round [0.5*$roundedFontSize]],
                    noSimpler}]]],
          If [$proposeTimeoutQ,
              Row [{"
Search timeout at Max Sec = ", maxSec}],
              Style [Row [{"
Search CPU seconds = ", NumberForm [time, {9,1}]}], (*Smaller, *)Gray]]}];
        If [annotation === "",
            allButAnnotation,
            Column [{annotation,
                     allButAnnotation}]]]];


(* ::Subsection::Closed:: *)
(*ResourcesTab [ ] :*)


ResourcesTab [] := Column [{
  Grid [{
    {Bolde [" Web "],  Bolde [" Download "], Bolde [" In-CAS "],
       Bolde [" Website, program or function similar to AskConstants Propose tab"]},
    {$UncheckedBox,  $CheckedBox,               $UncheckedBox,
       Hyperlink [MagnifiedTooltip["AskConstants", "Free download requires Mathematica \[GreaterEqual] 8.0"],
                  "http://www.math.hawaii.edu/~dale/AskConstants/AskConstants.html"]},
    {$CheckedBox,  $UncheckedBox,               $UncheckedBox,
       Hyperlink ["Inverse Symbolic Calculator Plus", "https://isc.carma.newcastle.edu.au/"]},
    {$CheckedBox,  $UncheckedBox,               $UncheckedBox,
      Hyperlink ["Wolfram|Alpha", "http://www.wolframalpha.com/"]},
    {$CheckedBox,   $CheckedBox,                $UncheckedBox,
      Hyperlink [MagnifiedTooltip ["RIES", "Free download is C that you must compile"], "http://mrob.com/pub/ries/"]},
    {$UncheckedBox, $CheckedBox,                $UncheckedBox,
      Hyperlink [MagnifiedTooltip["MESearch", "Running the free download requires Java"],
                 "http://www.xuru.org/mesearch/MESearch.asp"]},
    {$UncheckedBox, $CheckedBox,                $UncheckedBox,
      Hyperlink ["Portable version of the Plouffe Inverter", "http://plouffe.fr/Simon%20Plouffe.htm"]},
    {$CheckedBox,   $UncheckedBox,              $UncheckedBox,
      Hyperlink [MagnifiedTooltip ["On-line encyclopedia of integer sequences", $TruncateDigitsTooltip],
                 "https://oeis.org/"]},
    {$UncheckedBox, $UncheckedBox,               $CheckedBox,
      Hyperlink ["Maple  identify (\[Ellipsis])  function",
                      "http://www.maplesoft.com/support/help/Maple/view.aspx?path=identify&term=identify"]},
    {$CheckedBox,   $UncheckedBox,              $UncheckedBox,
                 MagnifiedTooltip [Style ["Your browser search engine", $TooltipColor1],
                                   $TruncateDigitsTooltip]}},
                  Background -> Lighter [LightBlue], Alignment -> {{Center, Center, Center, Left}}],
  Grid [{
    {Bolde ["Web "], Bolde [" Paper "],     Bolde [" Literature"]},
    {$CheckedBox,     $UncheckedBox,    Row [{" David F. Bailey and Simon Plouffe,  ",
       Hyperlink ["Recognizing numerical constants",
                  "http://docserver.carma.newcastle.edu.au/156/2/96_062-Bailey-Plouffe.pdf"]}]},
    {$UncheckedBox,    $CheckedBox,     Row [{" Johnathan Borwein and Peter Borwein,  ",
       Hyperlink ["A Dictionary of Real Numbers",
                  "http://www.amazon.com/Dictionary-Real-Numbers-J-Borwein/dp/1461585120"]}]},
    {$CheckedBox,     $UncheckedBox,
       Hyperlink [" Experimental Mathematics journal",
                  "http://www.tandfonline.com/loi/uexm20#.VlOVVtKrSt9"]},
    {$UncheckedBox,    $CheckedBox,     Row [{" Steven R. Finch,  ",
       Hyperlink ["Mathematical Constants",
                  "https://sites.oxy.edu/lengyel/originals/0521818052ws.pdf"]}]},
    {$CheckedBox,     $UncheckedBox,    Row [{" Steven R. Finch,  ",
       Hyperlink ["Errata and Addenda to Mathematical Constants",
                  "http://www.people.fas.harvard.edu/~sfinch/csolve/erradd.pdf"]}]},
    {$CheckedBox,     $UncheckedBox,    Row [{" Alan Meichsner,  ",
       Hyperlink ["Integer Relation Algorithms and the Recognition of numerical Constants",
                  "http://www.collectionscanada.gc.ca/obj/s4/f2/dsk3/ftp04/MQ61592.pdf"]}]},
    {$CheckedBox,     $UncheckedBox,    Row [{" Robert Munafo,  ",
       Hyperlink ["(A description of the RIES Algorithm)",
                  "http://mrob.com/pub/ries/index-2.html#algorithm"]}]},
    {$CheckedBox,     $UncheckedBox,    Row [{" Jon Zurutuza Salsamendi,  ",
       Hyperlink ["An Efficient Mathematical Expression Searcher \[Ellipsis]",
                  "http://www.xuru.org/downloads/papers/MESearch.pdf"]}]}},
       Background -> Lighter[LightPurple], Alignment -> {{Center, Center, Left}}]}];


(* ::Subsection::Closed:: *)
(*ContactUsTab [ ] :*)


ContactUsTab [] := Grid [{{Framed [Row [{
"To minimize your effort to prepare an email and our effort to process it well:
1.  Click the \"Copy template\" button to copy the email template below, then Paste it into your email program.
2.  Cut and paste appropriate lines to the \"To\" and \"Subject\" fields.
3.  Attach any intended attachments.  (Such as an annotated notebook with ", Bolde["$ProposeIO"],
      " and ", Bolde["$NSimplifyIO"], " or portions of ", Bolde["$AllProposeIO"], " and ", Bolde["$AllNSimplifyIO"], ".)
4.  If not on an attached image, then type the AskConstants  FontSize  and  Version  displayed on the AskConstants window title bar.
5.  To obtain pasteable Versions,  Shift-Enter  $AskConstantsVersionNumber  then  $Version  in a notebook.
6.  Delete irrelevant lines.  Then edit or insert relevant ones.  Then click Send.     Thanks in advance for the feedback!"}],
                           Background -> Lighter[LightPink]],

Button["Copy
template",  CopyToClipboard [$AskConstantsEmailTemplate],  ImageSize -> Automatic]},

{$AskConstantsEmailTemplate, SpanFromLeft}},  Alignment -> {Left, Top}];


(* ::Subsection::Closed:: *)
(*QuestionnaireTab [ ] :*)


QuestionnaireTab [] := Grid [{{
  $Questionnaire, 
  Button["Copy questionaire",  CopyToClipboard [$Questionnaire],  ImageSize -> Automatic]}},
                            Alignment -> {Left, Top}];


(* ::Subsection::Closed:: *)
(*ZoOMTab [ ] :*)


ZoomTab [] := Row [{
"\[Bullet]  AskConstants [fontSize]  uses the requested font size for all but the window title.
\[Bullet]  The default is 16, which is the recommended minimum for computer screens.
\[Bullet]  For projector or  over-the-shoulder presentations, use the largest font for which
    all of your presentation fits on the projection screen and also on your computer screen.
\[Bullet]  18 through 24 is appropriate for the highest resolution of most projectors.
\[Bullet]  Fonts smaller than the default 16 might enable you to include a window-capture image
    in an article without degrading legibility by scaling its bitmap.
\[Bullet]  For Windows, with a mouse having a scroll wheel, you can make further adjustments to
    all but the tooltip and Window-title font sizes by depressing the keyboard ", Style ["\[ControlKey]", Larger], " key
    and the mouse scroll wheel, then turning the scroll wheel.
    clicking \"+\" or \"-\" while, clicking ", Style ["\[ControlKey]", Larger], " or the Command key might work in other environments."}];


(* ::Subsection::Closed:: *)
(*FAQTab [ ] :*)


FAQTab [] := Pane [Column [{
  OpenerView [{Style [
"1.  My Computer-algebra system returned a result  containing complicated non-float constants
     that it cannot simplify further.  Can you help?", Gray],
"Try entering one of the constants in the \"NSimplify\" tab."}],

  OpenerView [{Style [
"2.  Propose does not work as well for inputs whose magnitude is quite large or quite small compared to 1.0 .  Why?",
                      Gray],
Row [{
"\[Bullet]  To propose a rational number for such a float, either the numerator or denominator must have many digits.
    The resulting large Entropy10, requires a correspondingly large Precision float -- enough to give a
    very large agreement compared to all rational numbers whose numerator and/or denominator differs by 1.
\[Bullet]  Irrational candidates generally also contain rational numbers, and you need enough Precision
    to distinguish between two adjacent integers in all of their numerators and denominators.
\[Bullet]  Scaling your float by a power of 10 or of any other integer is likely to hurt rather than  to help unless it
    fortuitously cancels some of the numerator or denominator factors of the rational number that would otherwise
    be required in a proposed rational candidate or in the overall rational coefficient of an irrational candidate.
\[Bullet]  The good news is that most ", Bolde ["mathematical"], " constants do not have extreme magnitudes.  For example, the
    table of about 10,000 such constants in ", Hyperlink ["Mathematical Constants.",
     "https://sites.oxy.edu/lengyel/originals/0521818052ws.pdf"], " has a minimum nonzero magnitude of 0.000111\[CenterEllipsis],
    a maximum magnitude of 137.0\[CenterEllipsis] (which is actually a dimensionless ", Bolde["physical"], " constant), and a median of about 0.87 ."}]}],

  OpenerView [{
Style ["3.  Why doesn't AskContants recognize  137.035999139  as the inverse fine-structure constant?",
                      Gray],
"\[Bullet]  We have not implemented approximations to physical constants, but it is a great suggestion.
\[Bullet]  Thank you! Please use the \"Contact us\" tab to send example input-output pairs you would like.
\[Bullet]  Meanwhile, there are many units-conversion sites on the web, if that is what you want."}],

  OpenerView [{
Style ["4.  Why doesn't AskContants recognize that  1729  has decompositions such as \!\(\*SuperscriptBox[\(1\), \(3\)]\) + \!\(\*SuperscriptBox[\(12\), \(3\)]\)  and  \!\(\*SuperscriptBox[\(9\), \(3\)]\) + \!\(\*SuperscriptBox[\(10\), \(3\)]\) ?", Gray],
Row [{
"\[Bullet]  We have not implemented decompositions of integers, but it is a great suggestion. 
\[Bullet]  Thank you! Please use the \"Contact us\" tab to send example decompositions you would like.
\[Bullet]  Meanwhile, Try the ", Hyperlink ["On-line encyclopedia of integer sequences", "https://oeis.org/"], "."}]}],

  OpenerView [{
Style ["5.  Is your \"Propose\" tab fallible?", Gray],
Row[{
"\[Bullet]  Even an Excellent-Merit result is not guaranteed equivalent the closed form that you seek.
\[Bullet]  However, it often is what you seek if the next best set (if any) has a best Merit that is at least 4 less.
\[Bullet]  If the best alternative has less than Good Merit or if there are more than one non-equivalent sets
    having nearly the same best Merit, then compute more digits to help decide if any of the equivalence
    sets keep improving their Merits.  It might require more than a few more digits to see improvement.
\[Bullet]  Closed forms that stop improving for many more digits are almost certainly", Style[" not ", Bold], "what you seek.
\[Bullet]  For example, try the Propose tab on  N [Tan [1 / \!\(\*SqrtBox[\(3538162\)]\)]], ", $Italp, "]  with  ", $Italp, " = 10, 20 and 40."}]}],

  OpenerView [{Style [
"6.  No computer algebra system I tried could find a closed form for my float, and neither AskContants
     nor the \"Resources\" alternatives could suggest a satisfactory one.  What should I do?", Gray],
Row [{
"\[Bullet]  Try to provide more correct digits.
\[Bullet]  If your integrand, summand or limitand is a sum, then try any finite terms separately.
\[Bullet]  If you suspect that your float is a multiple of some specific irrational constant such as \[Pi] or ", Sqrt[2], "
    then divide your float by that.  If you suspect that your float is a square root, then square it, etc.
\[Bullet]  Your float might not be expressible in closed form with any published expression components.
    That is true of most random floats, as evidenced by entering  RandomReal [ ]  in the \"Propose\" tab."}]}],

  OpenerView [{Style [
"7.  Why are some inverse functions prefixed \"Inverse\" and others prefixed \"RealInverse\"?", Gray],
Row [{
"\[Bullet]  Functions prefixed \"Inverse\" are built into ", $ItalMathematica, " and are usually applicable to all complex arguments.
\[Bullet]  Functions prefixed \"RealInverse\" are implemented in the \"RealInverse\" package included with AskConstants,
    and they are applicable only to the real domain. You can use them outside AskConstants.
\[Bullet]  For a positive precision ", $Italp, ", use  N [RealInverse... [...], ", $Italp, "]  to compute the real inverse to about ",
    $Italp, " significant digits.
\[Bullet]  In ", $ItalMathematica, " you can indicate an inverse of any function  ", $Italf,  " applied to  ", $Italy,
   "  as  InverseFunction [", $Italf, "] [", $Italy, "],
    but you have no branch choice, it is often slower, and it can return different branches for different ", $Italy, ".
    For example, try  Plot [InverseFunction [ExpIntegralEi] [y],  {y, -3, 5}]"}]}],

  OpenerView [{Style [Row [{
"8.  A Propose tab result included  LogIntegralZero [1],  not listed in the ", $ItalMathematica, " documentation.  Why?"}],
                      Gray],
Row [{
"\[Bullet]  Non-", $ItalMathematica, " functions with the suffix \"Zero\" are implemented in the \"Zeros\" package included
    with AskConstants.
\[Bullet]  They return the indicated zero of the indicated function, with zero number 1 being
    the first positive zero, if any, and zero number 0 being the first non-positive zero, if any.
\[Bullet]  For a positive precision ", $Italp, ", Use  N [...Zero [...], ", $Italp, "]  to compute the zero to about ", $Italp,
    " significant digits.
"}]}],

  OpenerView [{Style [Row [{
"9.  A Propose tab result included  GammaInfimumOrSupremumAbscissa [1],  not listed in the ",
      $ItalMathematica, " documentation.  Why?"}], Gray],
Row [{
"\[Bullet]  Functions with the suffix \"InfimumOrSupremumAbscissa\" are implemented in the \"InfimumAndSupremum\"
    package included with AskConstants.
\[Bullet]  They return the indicated infimum or supremum abscissa of the indicated function, with number 1 being
    the first positive such abscissa, if any, and number 0 being the first non-positive one, if any.
\[Bullet]  The abscissa is that of a singularity, a local maximum, a local minimum, or an endpoint of the real domain.
\[Bullet]  For a positive precision ", $Italp, ", Use  N [...InfimumOrSupremumAbscissa [...], ", $Italp,
    "]  to compute the abscissa to about ", $Italp, " significant digits."}]}],

  OpenerView [{Style [Row [{
"10.  A Propose tab result included  GammaInfimumOrSupremumOrdinate [1],  not listed in the ", $ItalMathematica, " documentation.  Why?"}], Gray],
Row [{
"\[Bullet]  Functions with the suffix \"InfimumOrSupremumOrdinate\" are implemented in the \"InfimumAndSupremum\" package
    included with AskConstants.
\[Bullet]  They return the indicated infimum or supremum ordinate of the indicated function, with number 1 being
    for the first positive corresponding abscissa, if any, and number 0 being the first non-positive one, if any.
\[Bullet]  The ordinate will be that of a local maximimum, a local minimum, or at an endpoint of the real domain.
\[Bullet]  For a positive precision ", $Italp, ", Use  N [...InfimumOrSupremumOrdinate [...], ", $Italp,
    "]  to compute the ordinate to about ", $Italp, " significant digits."}]}](*,
   Scrollbars -> {False, True}*)}]];


(* ::Subsection::Closed:: *)
(*AboutTab [ ] :*)


AboutTab [] := Column [{
  Row [{Bolde ["AskConstants Version"], " :  ", $AskConstantsVersionNumber}],
  "",
  Row [{Bolde ["AskConstants.m"], " is a ", $ItalMathematica, " package that is freely downloadable from either :
        ",  Hyperlink ["AskConstants.org", "http://www.AskConstants.org"], "    or
        ",  Hyperlink ["math.hawaii.edu/AskConstants", "http://www.math.hawaii.edu//AskConstants"], "
    It includes its successive prerequisite packages :
        \[Bullet] ", Bolde["Zeros.m"], ",  which returns the zeros for many ", $ItalMathematica, " special functions.
        \[Bullet] ", Bolde["InfimaAndSuprema.m"], ",  which returns the abscissas and ordinates of their local infima and suprema.
        \[Bullet] ", Bolde["RealInverseFunctions.m"], ",  which returns real branches of inverses of many ", $ItalMathematica, " special functions.
        \[Bullet] ", Bolde["ProposeLookupTable.m"], ",  which contains data for the table-lookup portion of the search.
        \[Bullet] ", Bolde["Propose.m"], ",  which provides functional forms of the AskConstants Propose and NSimplify tabs.
"}],
  Row [{Bolde ["Requirement"], " :  ", Ital ["Mathematica"], " 8.0 or later.
"}],
  Row [{Style ["Development team ", Bold], "from A to Z :"}],
  Row [{"   ",
    Column [{Row [{"  ", MagnifiedTooltip [$ArchimedesImage, "\[Pi]"]}],
             Hyperlink["Archimedes ",
               "http://itech.fgcu.edu/faculty/clindsey/mhf4404/archimedes/archimedes.html"]}],
    "     ",
    Column [{Row [{"    ", MagnifiedTooltip [$ConstanceImage,
"I am the team muse.  Muses are invisible, so this image is of an actress
  portraying Hypatia of Alexandria, the leading mathematician of her era."]}],
             "      Constance of ", "     Constantinople ", "AskConst@hawaii.edu"}, RowSpacings -> 0.8],
    "     ",
    Column [{Row [{"  ", MagnifiedTooltip [$PersonPlaceholderImage, "Please join our team"]}],
             "        Your",
             "homepage link? "}],
    "    ",
    Column [{Row [{"         ", $DaleMyersImage}],
             Hyperlink ["         Dale Myers",
                        "http://www.math.hawaii.edu/~dale/
"]}],
    "     ",
    Column [{Row [{"     ", $DStoutemyerImage}],
             Hyperlink [Column [{"         David ", "     Stoutemyer"}],
                 "https://www.researchgate.net/profile/David_Stoutemyer/publications"]}],
    "      ",
    Column [{MagnifiedTooltip [$ZenoImage, Defer [


"lim"  Sum [






















\!\(\*SuperscriptBox[\(2\), \("\<-k\>"\)]\),{"k", 1, "n"}]  =  1]],
             Hyperlink ["Zeno of Elea ", "https://en.wikipedia.org/wiki/Zeno_of_Elea "]}]}],
  "",
  OpenerView [{Bolde ["Acknowledgements :"],
"Thank you Lou D'Andria,  Rob Corless,  Steven R. Finch,  David Jeffrey,  Daniel Lichtblau,  Clemens G. Raab,  and  Albert Rich !"}]},
   Spacings -> {0.0, 0.0}, Editable -> False];


(* ::Section::Closed:: *)
(*End private and EndPackage :*)


End [];
EndPackage [];
