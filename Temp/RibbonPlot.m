(***********************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which typically
will have the same name as this file except ending in ".nb" instead of
".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent to
using the Evaluate Initialiation Cells menu command in the front end.

DO NOT EDIT THIS FILE.  This entire file is regenerated automatically 
each time the parent Notebook file is saved in the Mathematica front end.
Any changes you make to this file will be overwritten.
***********************************************************************)

(*A package to add additional graphics functions RibbonPlot3D and 
    ListRibbonPlot3D*)
(*Author: Jon McLoone, Marketing Wolfram Research*)
(*Written early 96 during a boring trade show*)
(*Last revised Oct 97*)

BeginPackage["Graphics`PlotTypes`"];

RibbonPlot3D::usage="RibbonPlot3D[fn1,{var,lo,hi},opts] shows a 2D plot 
of fn in 3D. RibbonPlot3D[{fn1,fn2,...},{var,lo,hi},opts] stacks a series
of 2D plots of functions fn1,fn2 etc";

ListRibbonPlot3D::usage="ListRibbonPlot3D[{data1,data2,...},opts] stacks a series
of 2D plots of data1,data2 etc. Data may be lists of evenly spaced y values
or pairs of {x,y} values.";

ShowBase::usage="ShowBase is an option for ListRibbonPlot3D and RibbonPlot3D.
With ShowBase->True a surface is drawn along the base line of thick ribbons";

RibbonBase::usage="RibbonBase is an option for ListRibbonPlot3D and RibbonPlot3D.
It sets the value for the origin.";

RibbonThickness::usage="RibbonThickness is an option for ListRibbonPlot3D and RibbonPlot3D.
It sets the thickness of the ribbons.";

RibbonSeperation::usage="RibbonSeperation is an option for ListRibbonPlot3D and RibbonPlot3D.
It sets the distance between consecutive ribbons";

ShowSides::usage="ShowSides is an option for ListRibbonPlot3D and RibbonPlot3D.
With ShowSides->True. thick ribbons are drawn with solid sides.";

ShowEnds::usage="ShowEnds is an option for ListRibonPlot3D and RibbonPlot3D.
With ShowEnds->True, thick ribbons are eterminated with solid ends";

Begin["`Private`"];

FilterOptions[ command_Symbol, opts___ ] :=Module[
		{keywords = First /@ Options[command]},
		Sequence @@ Select[ {opts}, MemberQ[keywords, First[#]]& ]
			];
																																																
thinpoly[x_,y1_,y2_,z_,base_]:=Polygon[{{x,z,base},{x,z,y1},{x+1,z,y2},{x+1,z,base},
						{x,z,base}}]/;Head[x]=!=List;
						
thinpoly[x_,{x1_,y1_},{x2_,y2_},z_,base_]:=Polygon[{{x1,z,base},{x1,z,y1},{x2,z,y2},{x2,z,base},
						{x1,z,base}}]/;Head[x]=!=List;
						
thickpoly[x_,y1_,y2_,z_,th_]:=Polygon[{{x,z,y1},{x,z+th,y1},{x+1,z+th,y2},
								{x+1,z,y2},{x,z,y1}}]/;Head[x]=!=List;
								
thickpoly[x_,{x1_,y1_},{x2_,y2_},z_,th_]:=Polygon[{{x1,z,y1},{x1,z+th,y1},
					{x2,z+th,y2},{x2,z,y2},{x1,z,y1}}]/;Head[x]=!=List;
					
polygonise[data_,z_,0,opts___]:=Thread[Graphics`PlotTypes`Private`thinpoly[Range[Length[data]-1]-1,
								Drop[data,-1],Drop[data,1],
								Table[z,{Length[data]-1}],
								Table[Graphics`PlotTypes`RibbonBase/.{opts}/.Options[ListRibbonPlot3D,RibbonBase],
								{Length[data]-1}]]];
								
polygonise[data_,z_,th_,opts___]:=Block[{base=Graphics`PlotTypes`RibbonBase/.{opts}/.Options[ListRibbonPlot3D,RibbonBase],
										min,max,d=Length[Dimensions[data]],
									first=Last[Flatten[{First[data]}]],
									last=Last[Flatten[{Last[data]}]]},
							If[d==1,min=0;max=Length[data]-1,
									min=Min[First[Transpose[data]]];max=Max[First[Transpose[data]]]];
									{If[(Graphics`PlotTypes`ShowBase/.{opts}/.Options[ListRibbonPlot3D,ShowBase]),
												Polygon[{{min,z,base},{min,z+th,base},{max,z+th,base},{max,z,base},{min,z,base}}],
												{}],
							If[Graphics`PlotTypes`ShowEnds/.{opts}/.Options[ListRibbonPlot3D,ShowEnds],
							{Polygon[{{min,z,base},{min,z+th,base},{min,z+th,first},{min,z,first}}],
								Polygon[{{max,z,base},{max,z+th,base},{max,z+th,last},{max,z,last}}]},
								{}],
								If[Graphics`PlotTypes`ShowSides/.{opts}/.Options[ListRibbonPlot3D,ShowSides],
													{Graphics`PlotTypes`Private`polygonise[data,z,0,opts],
													Graphics`PlotTypes`Private`polygonise[data,z+th,0,opts]},{}],
								Thread[Graphics`PlotTypes`Private`thickpoly[Range[Length[data]-1]-1,
								Drop[data,-1],Drop[data,1],
								Table[z,{Length[data]-1}],
								Table[th,{Length[data]-1}]]]}];
								

End[]; (*Private*)

Options[ListRibbonPlot3D]=Sort[Join[
		Options[Graphics3D],
		{ShowBase->False,RibbonBase->0,ShowEnds->False,ShowSides->False,
		RibbonThickness->1,RibbonSeperation->1}]];
		SetOptions[ListRibbonPlot3D,BoxRatios->{2,1,1}];
		
ListRibbonPlot3D[x_List,opts___]:=Show[Graphics3D[Flatten[
						(MapIndexed[Graphics`PlotTypes`Private`polygonise[#1,
						(First[#2]-1)(RibbonSeperation/.{opts}/.Options[ListRibbonPlot3D,RibbonSeperation]),
							(RibbonThickness/.{opts}/.Options[ListRibbonPlot3D,RibbonThickness]),opts]&,x]/.{opts}/.Options[ListRibbonPlot3D,RibbonSeperation])
									]],Graphics`PlotTypes`Private`FilterOptions[Graphics3D,opts,Apply[Sequence,Options[ListRibbonPlot3D]]]
									];
									
RibbonPlot3D[fnlist_List,{var_,lo_,hi_},opts___]:=
				ListRibbonPlot3D[Transpose[
								Table[N[Evaluate[fnlist/.var->x]]
								,{x,lo,hi,
								(hi-lo)/(PlotPoints/.{opts}/.Options[RibbonPlot3D,PlotPoints])}]]
							,opts,Apply[Sequence,Options[RibbonPlot3D]]];
							
RibbonPlot3D[fn_,{var_,lo_,hi_},opts___]:=
				RibbonPlot3D[{fn},{var,lo,hi},opts];
				
Options[RibbonPlot3D]=Sort[Join[Options[ListRibbonPlot3D],
					{PlotPoints->15}]];

EndPackage[];