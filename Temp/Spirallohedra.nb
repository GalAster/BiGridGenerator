(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    272384,       7176]
NotebookOptionsPosition[    188295,       5736]
NotebookOutlinePosition[    231582,       6656]
CellTagsIndexPosition[    231539,       6653]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Rhombic Spirallohedra", "Title",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"7ab19a7d-0c38-4492-a711-e7b5496a4ca7"],

Cell[TextData[{
 StyleBox[" plus",
  FontSize->18,
  FontSlant->"Italic"],
 "\n ",
 StyleBox["Space-fillings, surfaces, and conchoids;\n plane sections, ruled \
surfaces,\n the volume of the general k-armed spirallohedron;\n the \
composition of spirallohedra by rhombic hexahedra,\n",
  FontSize->18],
 StyleBox[" and more ...",
  FontSize->18,
  FontSlant->"Italic"]
}], "Subtitle",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"00824f0d-11ba-40ba-96b9-80e771541d88"],

Cell["\<\
Russell Towle; version of December, 2003
Box 141, Dutch Flat CA 95714    rtowle@inreach.com\
\>", "Subsubtitle",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"2d9706a1-60e0-4cb5-93dc-1ae782361cae"],

Cell[CellGroupData[{

Cell["Introduction; examples of spirallohedra", "Section",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"d624f0bf-c1dc-496f-b558-d4590fbf81ac"],

Cell[TextData[{
 StyleBox["Rhombic Spirallohedra\n\n",
  FontSize->20,
  FontWeight->"Bold",
  FontSlant->"Italic"],
 "In the July 2003 update, the special packing of mixed 3- and 6-armed \
spirallohedra is constructed, and plane sections of individual spirallohedra, \
or of packed spirallohedra, are found. Also, the \
\[OpenCurlyDoubleQuote]vertical lines\[CloseCurlyDoubleQuote] connecting the \
transformed equatorial faces of the \[OpenCurlyDoubleQuote]parent\
\[CloseCurlyDoubleQuote] polar zonohedron are found.\n\nIn the October 2002 \
update of the Rhombic Spirallohedra notebook, the volume of the general ",
 StyleBox["k",
  FontWeight->"Bold"],
 "-armed spirallohedron is found, and issues relating to the close-packings \
of 3- and 4-armed spirallohedra are explored. Spirallohedra arise by \
subtraction of some of the rhombic hexahedra which close-pack to compose a \
polar zonohedron; in the last, most recent section, we find these subtracted \
hexahedra, examine the volumes of hexahedra, and make spirallohedra from \
hexahedra. The (newest) last section of the notebook contains many \
subsections.\n\nThe discussion below describes what a spirallohedron is, and \
how these forms were discovered. Since rhombic spirallohedra are closely \
related to polar zonohedra, we begin there.\n\n\n",
 StyleBox["Polar zonohedra are bounded by ",
  FontSize->14],
 StyleBox["n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["*(",
  FontSize->14],
 StyleBox["n-1",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[") rhombic faces, where ",
  FontSize->14],
 StyleBox["n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" is the number of directions in which edges occur. There is an \
axis of ",
  FontSize->14],
 StyleBox["n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["-fold symmetry (herein, always coincident with the ",
  FontSize->14],
 StyleBox["z",
  FontSize->14,
  FontWeight->"Bold",
  FontSlant->"Italic"],
 StyleBox[" axis) which intersects the zonohedron at each \
\[OpenCurlyDoubleQuote]pole,\[CloseCurlyDoubleQuote] where ",
  FontSize->14],
 StyleBox["n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" equal rhombs meet. Simple instances include the cube (",
  FontSize->14],
 StyleBox["n=3",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[") and Kepler\[CloseCurlyQuote]s rhombic dodecahedron (",
  FontSize->14],
 StyleBox["n=4",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["); both of these exist in nature as crystals. For any one ",
  FontSize->14],
 StyleBox["n>=3",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[", an infinite variety of polar zonohedra may be constructed, \
ranging from oblate, squashed forms, to prolate, spindle-like forms; the \
determining parameter is the angle between edges and a plane orthogonal to \
the polar zonohedron\[CloseCurlyQuote]s symmetry axis, which I call \
\[OpenCurlyDoubleQuote]",
  FontSize->14],
 StyleBox["pitch",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[",\[CloseCurlyDoubleQuote] ",
  FontSize->14],
 StyleBox["0<pitch<90",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" degrees. Curiously, when ",
  FontSize->14],
 StyleBox["pitch",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" equals arc tan Sqrt[1/2] or 35.2643+ degrees, a polar zonohedron \
is an isometric, orthogonal \[OpenCurlyDoubleQuote]shadow\
\[CloseCurlyDoubleQuote] of an ",
  FontSize->14],
 StyleBox["n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["-cube (See \[Section]13 of H.S.M. Coxeter's ",
  FontSize->14],
 StyleBox["Regular Polytopes",
  FontSize->14,
  FontSlant->"Italic"],
 StyleBox[", Dover, 1973).",
  FontSize->14]
}], "Text",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"8fa128e9-aa47-4cca-8998-18fbab40a953"],

Cell["\<\
(*A polar projection, and three equatorial projections,
of n=12 polar zonohedra.*)
Show[PolarZonohedron[12,35.2643],
PlotLabel->\"n=12, pitch=35.2643\",
ViewPoint->{0,0,3}];
Show[PolarZonohedron[12,35.2643],
PlotLabel->\"n=12, pitch=35.2643\",
ViewPoint->{0,-3,0}];
Show[PolarZonohedron[12,15],(*oblate*)
PlotLabel->\"n=12, pitch=15\",
ViewPoint->{0,-3,0}];
Show[PolarZonohedron[12,60],(*prolate*)
PlotLabel->\"n=12, pitch=60\",
ViewPoint->{0,-3,0}];\
\>", "Input",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"552cf0ec-1a26-4e14-a283-f814e1896c64"],

Cell[TextData[{
 StyleBox["It so happens that the polar zonohedra can be dissected into the \
\[OpenCurlyDoubleQuote]tetrahedral\[CloseCurlyDoubleQuote] number, ",
  FontSize->14],
 StyleBox["n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["-things-taken-three-at-a-time, rhombic hexahedra. These are \
somewhat like squished cubes, in fact, when ",
  FontSize->14],
 StyleBox["pitch",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["=35.2643+ degrees, they arise as projections of the ordinary cubes \
which bound, in part, an ",
  FontSize->14],
 StyleBox["n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["-cube. When ",
  FontSize->14],
 StyleBox["n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" is even moderately large, say, ",
  FontSize->14],
 StyleBox["n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["=12, this dissection occurs in many different ways. When it is \
performed ",
  FontSize->14],
 StyleBox["in every possible way",
  FontSize->14,
  FontSlant->"Italic"],
 StyleBox[" the polar zonohedron of ",
  FontSize->14],
 StyleBox["pitch",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["=35.2643+ degrees is not just a ",
  FontSize->14],
 StyleBox["shadow",
  FontSize->14,
  FontSlant->"Italic"],
 StyleBox[", but a full-fledged orthogonal ",
  FontSize->14],
 StyleBox["projection",
  FontSize->14,
  FontSlant->"Italic"],
 StyleBox[", of the ",
  FontSize->14],
 StyleBox["n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["-cube.\n\nThe general zonohedron is determined by a set of three \
or more vectors spanning the 3-space, and each vector determines a ",
  FontSize->14],
 StyleBox["zone",
  FontSize->14,
  FontSlant->"Italic"],
 StyleBox[" of parallel edges, and faces bounded in part by these edges, \
which \[OpenCurlyDoubleQuote]girdle\[CloseCurlyDoubleQuote] the zonohedron. \
Convex zonohedra have central symmetry, and every face, edge and vertex has \
an equal, opposite, and similarly-situated counter-face, counter-edge, and \
counter-vertex. Any two zones of faces cross one another at a face and its \
counter-face. Below, one of the twelve zones of faces of an ",
  FontSize->14],
 StyleBox["n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["=12 polar zonohedron is depicted.",
  FontSize->14]
}], "Text",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"30db6895-267f-41b1-9cc2-3ff3ae89d218"],

Cell["\<\
n=12;pitch=35.2643;v=vectors[n,pitch];
a=PolarZonohedron[n,pitch];

(*color the second zone differently*)
Show[colorzone[2,a,v],
LightSources -> 
   {{{-1, 1, 1}, RGBColor[1, 1, 1]},
   {{1, -2, 2}, RGBColor[1, 1, 1]}},
Boxed->False,
Background->GrayLevel[0],
ViewPoint->{0,-.5,2}];

(*show the second zone by itself*)
Show[onezone[2,a,v],
Boxed->False,
Background->GrayLevel[0],
ViewPoint->{0,-.5,2}];

(*show all faces not in the second zone*)
Show[notzone[2,a,v],
Boxed->False,
Background->GrayLevel[0],
ViewPoint->{0,-.5,2}];\
\>", "Input",ExpressionUUID->"cace26d2-8a70-4dd5-842a-808ff03b9a20"],

Cell[TextData[{
 StyleBox["The \[OpenCurlyDoubleQuote]rhombic spirallohedra\
\[CloseCurlyDoubleQuote] constructed in this notebook were discovered \
accidentally, in early 1997, while attempting to develop a function which \
dissected a polar zonohedron into its component hexahedra ",
  FontSize->14],
 StyleBox["cyclically",
  FontSize->14,
  FontSlant->"Italic"],
 StyleBox[", that is, using nested loops in a way completely analogous to my \
method of creating the rhombic faces of a polar zonohedron. I managed to \
construct the \[OpenCurlyDoubleQuote]outermost\[CloseCurlyDoubleQuote] \
hexahedra in this way, such that all faces of the bounding polar zonohedron \
were accounted for. To all outward appearances, such an array of hexahedra \
looked like a polar zonohedron; but I knew the truth: it was hollow. \
Wondering what the interior might look like, I removed all hexahedra above \
the \[OpenCurlyDoubleQuote]equator\[CloseCurlyDoubleQuote] of the array, and \
looked inside.",
  FontSize->14]
}], "Text",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"f1695d42-70a2-4fe3-bddb-f865251ad73f"],

Cell["\<\
(*Make the hemisphere of hexahedra*)
(*n even, n>7*)
n=12;
pitch=35.2643;
hemi=If[EvenQ[n],Floor[n/2]-1,Floor[n/2]];
v=vectors[n,pitch];

q=Table[mark={0,0,0};
\tTable[hex[{ v[[j]], v[[1+Mod[j,n]]], v[[1+Mod[i+j,n]]]},mark],
\t\t{i,n-hemi}],{j,1,n-1,2}];
(*Change \"{i,n-hemi}\" to \"{i,n-2}\" to make it complete*)


Show[Graphics3D[ Polygon /@ Flatten[q ,2] ],
Boxed->False,
Axes->False,
ViewPoint->{0,-.25, 3}];\
\>", "Input",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"d5275b4c-24af-4784-abae-ddd13e1562f2"],

Cell[TextData[{
 StyleBox["I saw a series of spiraling ridges and valleys, and immediately \
realized they implied the existence of a \[OpenCurlyDoubleQuote]hidden \
polyhedron,\[CloseCurlyDoubleQuote] composed by a subset of the rhombic \
hexahedra, which polyhedron would have spiraling valleys and ridges. I set \
out to construct this hidden polyhedron by its faces, not by its hexahedra, \
and after a time, succeeded. I was able to construct what I would now call (",
  
  FontSize->14],
 StyleBox["n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["/2)-armed spirallohedra.\n\nEventually, more types of \
spirallohedra were recognized, and the common elements in their construction \
were fused to make a ",
  FontSize->14],
 StyleBox["Spirallohedron",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" function. Spirallohedra, as I conceive them, only exist when ",
  FontSize->14],
 StyleBox["n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[">=6, and ",
  FontSize->14],
 StyleBox["n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" not prime. All k-armed spirallohedra can be thought to arise by \
subtracting sets of rhombic hexahedra from the exterior of a polar \
zonohedron, said zonohedron having been dissected into hexahedra in a \
special, cyclic way. This construction is effected in the ",
  FontSize->14],
 StyleBox["Volume II",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" section, below.\n\nRhombic spirallohedra exist in enantiomorphic \
pairs, depending upon the sense of their spiraling ridges and valleys.",
  FontSize->14]
}], "Text",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"4df2fbaa-f005-47ed-9bde-a2f7fcbdac7d"],

Cell["\<\
(*An n=12, 3-armed spirallohedron*)
Show[a=Spirallohedron[12,3],
Axes->True,
ViewPoint->2.25*unit[ {0,0,2} ]];

(*The enantiomorphic spirallohedron*)
Show[Graphics3D[ Map[{-1,-1,-1}*#&, a[[1]], {-2}] ],
Axes->True,
ViewPoint->2.25*unit[ {0,0,2} ]];\
\>", "Input",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"3c447f54-44e2-478c-b57b-8d86714846c5"],

Cell[TextData[{
 StyleBox["I have found that for ",
  FontSize->14],
 StyleBox["j=n/k",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[", rhombic spirallohedra are bounded by ",
  FontSize->14],
 StyleBox["n(n-j)",
  FontWeight->"Bold"],
 " faces,",
 StyleBox[" 2n(n-j)",
  FontWeight->"Bold"],
 " edges, and ",
 StyleBox["n*(n-j)+2",
  FontWeight->"Bold"],
 " vertices. Using my ",
 StyleBox["parse",
  FontWeight->"Bold"],
 " function (which takes a ",
 StyleBox["Graphics3D",
  FontWeight->"Bold"],
 " polyhedron and reduces it to a list of Head-less polygons) and my ",
 StyleBox["vunion",
  FontWeight->"Bold"],
 " function (which finds the union of a set of n-vectors) the number of faces \
and number of vertices can be verified."
}], "Text",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"1de370fc-800f-428f-8bbd-59fa0d129364"],

Cell["\<\
n=12;k=3;j=(n/k);
a=Spirallohedron[n,k];
Print[\"For n=\",n,\", k=\",k,\", j=\",j,\", there are \", Length[parse[a]], \
\" faces.\"](*number of faces*)
Print[\"For n=\",n,\", k=\",k,\", j=\",j, \", there are \",
Length[vunion[Flatten[parse[a],1]]], \" vertices.\"](*number of vertices*)\
\>", "Input",ExpressionUUID->"4f24c835-0911-4e80-b200-6ad19324e681"],

Cell[TextData[{
 StyleBox["The complete syntax for the ",
  FontSize->14],
 StyleBox["Spirallohedron",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" function is\n           ",
  FontSize->14],
 StyleBox["Spirallohedron[n, k, pitch, factor, ratio]",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[", where\n           \n1.  ",
  FontSize->14],
 StyleBox["n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" is the (integer) number of directions in which edges occur.\n2.  ",
  FontSize->14],
 StyleBox["k",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" is a factor of ",
  FontSize->14],
 StyleBox["n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[", such that ",
  FontSize->14],
 StyleBox["k>2",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" and ",
  FontSize->14],
 StyleBox["k<n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[".",
  FontSize->14],
 StyleBox["\n3.  ",
  FontSize->14],
 StyleBox["pitch",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" is the angle, in degrees (",
  FontSize->14],
 StyleBox["0<",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["pitch",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["<90",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["), between edges and a plane orthogonal to the symmetry axis.\n4.  \
",
  FontSize->14],
 StyleBox["factor",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" is an integer factor of ",
  FontSize->14],
 StyleBox["n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[", ",
  FontSize->14],
 StyleBox["1<=",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["factor",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["<=",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[". Ordinarily, if this option is used, ",
  FontSize->14],
 StyleBox["1<factor<n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[".\n5.  ",
  FontSize->14],
 StyleBox["ratio",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" is a non-negative real number, by which every ",
  FontSize->14],
 StyleBox["factor",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["-th vector is multiplied.\n\nBy default, the ",
  FontSize->14],
 StyleBox["Spirallohedron",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" function uses ",
  FontSize->14],
 StyleBox["n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["=12",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[",  ",
  FontSize->14],
 StyleBox["k",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["=3",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[", ",
  FontSize->14],
 StyleBox["pitch",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["=35.2643",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[", ",
  FontSize->14],
 StyleBox["factor",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["=1",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[", and ",
  FontSize->14],
 StyleBox["ratio",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["=1",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[". Hence one may simply write:",
  FontSize->14]
}], "Text",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"36ed2f1d-f247-46dc-ac80-7237c028ed5c"],

Cell["\<\
n=24;k=4;
Show[Spirallohedron[n,k],
ViewPoint->{0,0,2}];\
\>", "Input",ExpressionUUID->"47ad2fdd-d1f3-4137-9fdb-15183701aff9"],

Cell[TextData[{
 "Non-equilateral equivalents to the k-armed spirallohedra may be constructed \
using ",
 StyleBox["factor",
  FontWeight->"Bold"],
 " and ",
 StyleBox["ratio",
  FontWeight->"Bold"],
 ", so that every ",
 StyleBox["factor",
  FontWeight->"Bold"],
 "-th vector is multiplied by ",
 StyleBox["ratio",
  FontWeight->"Bold"],
 ". Note that the same spirallohedron is shown in top and bottom views; yet \
the faces surrounding the axis of k-fold symmetry, in the center of each \
image, are different. Although every face of a spirallohedron has a \
counter-face, faces and counter-faces are ",
 StyleBox["not",
  FontWeight->"Bold"],
 " similarly situated. Thus, spirallohedra probably should not be regarded as \
zonohedra."
}], "Text",ExpressionUUID->"5145e16f-1708-4a89-9236-00796fc543ed"],

Cell["\<\
Show[Spirallohedron[12,6,35.2643,2,4],
ViewPoint->{0,0,2.5}];(*top view*)
Show[Spirallohedron[12,6,35.2643,2,4],
ViewPoint->{0,0,-2.5}];(*bottom view*)\
\>", "Input",ExpressionUUID->"9244b2e1-3edd-4697-9cdf-890356bf1b12"],

Cell[TextData[{
 StyleBox["One of the forms below (when ",
  FontSize->14],
 StyleBox["k",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" equals 6) is what results if, as mentioned above, a shell of \
rhombic hexahedra is created which accounts for all exterior faces of the \
polar zonohedron, so that the interior faces of this shell define a \
\[OpenCurlyDoubleQuote]hidden\[CloseCurlyDoubleQuote] zonohedron. The routine \
fails for odd ",
  FontSize->14],
 StyleBox["n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" and when ",
  FontSize->14],
 StyleBox["n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["=4",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" (no \[OpenCurlyDoubleQuote]hidden\[CloseCurlyDoubleQuote] \
zonohedron exists). Perhaps the most striking forms arise when ",
  FontSize->14],
 StyleBox["k",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" equals 3; I call these  \[OpenCurlyDoubleQuote]3-armed \
spirallohedra.\[CloseCurlyDoubleQuote]",
  FontSize->14]
}], "Text",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"8466e669-2000-45fe-8999-e8b9f2440fec"],

Cell["\<\
Show[Spirallohedron[12,6],(*6-armed*)
Boxed->False,
ViewPoint->{0,0,3}];
Show[Spirallohedron[12,4],(*4-armed*)
Boxed->False,
ViewPoint->{0,0,3}];
Show[Spirallohedron[12,3],(*3-armed*)
Boxed->False,
ViewPoint->{0,0,3}];\
\>", "Input",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"eac77012-3487-46d9-8e3d-e562003ea7c3"],

Cell[TextData[{
 StyleBox["The ",
  FontSize->14],
 StyleBox["Spirallohedron",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" function works somewhat as follows. The iterated routine is a \
table of tables of tables, with complicated and opaque constraints applied to \
the loops. Within these tables the ",
  FontSize->14],
 StyleBox["quad",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" function is invoked, which creates a parallelogram from a list of \
two vectors. The vectors are created in the ",
  FontSize->14],
 StyleBox["vectors",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" function, which accepts four arguments, ",
  FontSize->14],
 StyleBox["n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[", ",
  FontSize->14],
 StyleBox["pitch",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[", ",
  FontSize->14],
 StyleBox["factor",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[", and ",
  FontSize->14],
 StyleBox["ratio",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[". All the equilateral spirallohedra created represent types of \
\[OpenCurlyDoubleQuote]hidden\[CloseCurlyDoubleQuote] zonohedra which can \
arise by taking away certain sets of rhombic hexahedra from a polar \
zonohedron.\n\nIt is quite possible that my ",
  FontSize->14],
 StyleBox["Spirallohedron",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" function can be simplified, perhaps reduced to two nested loops, \
rather than three.\n\nTo construct a k-armed spirallohedron, two constraints \
must be met: ",
  FontSize->14],
 StyleBox["k",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" must divide ",
  FontSize->14],
 StyleBox["n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" without remainder, and ",
  FontSize->14],
 StyleBox["k",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" must be greater than or equal to 3. Hence ",
  FontSize->14],
 StyleBox["n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[">=6",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[", and ",
  FontSize->14],
 StyleBox["n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" not prime. A method to discover all possible values for ",
  FontSize->14],
 StyleBox["k,",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" for various ",
  FontSize->14],
 StyleBox["n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[", is as follows:",
  FontSize->14]
}], "Text",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"7b6671ad-fc2d-4b09-b761-29c9fe547da1"],

Cell[TextData[{
 StyleBox["t=Table[\na=Table[{i,Mod[n,i]},{i,2,(n/2)-1}];\n\
b=Select[a,#[[2]]==0&];\nfacs=If[b!={},Transpose[b][[1]],{}];\nJoin[{n}, \
Map[n/#&, facs]],(*the list of k's*)\n{n, 3, 48, 1}];",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "\nt1=Select[t, Length[#]>1&](*discard empty sets, output->{n, k1, k2, ...}*)"
}], "Input",ExpressionUUID->"e5f1e1ae-fb22-4b8e-ad1d-8beb5d296402"],

Cell[TextData[{
 StyleBox["Spirallohedra do not have central symmetry, and one doubts whether \
they should be called zonohedra. Although every face has a counter-face, they \
are not ",
  FontSize->14],
 StyleBox["similarly situated",
  FontSize->14,
  FontSlant->"Italic"],
 StyleBox[", and although we may pick out a zone of faces easily enough, the \
lack of symmetry is evident. Later, in the sections on close-packing, we will \
find that the faces of ",
  FontSize->14],
 StyleBox["k",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["-armed spirallohedra are distributed in ",
  FontSize->14],
 StyleBox["patches",
  FontSize->14,
  FontSlant->"Italic"],
 StyleBox[", ",
  FontSize->14],
 StyleBox["k(k-1)",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[" patches altogether, and that every patch has an equal and \
opposite ",
  FontSize->14],
 StyleBox["counterpatch",
  FontSize->14,
  FontSlant->"Italic"],
 StyleBox[". It should follow that the zones of faces are distributed in \
families, such that one family of zones crosses another family at a patch and \
counter-patch.",
  FontSize->14]
}], "Text",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"5ed380a7-67fb-4a48-9050-9c00a6fc789a"],

Cell["\<\
n=12;k=3;pitch=35.2643;v=vectors[n,pitch];
a=Spirallohedron[n,k,pitch];

(*color the second zone differently*)
Show[colorzone[2,a,v],
LightSources -> 
   {{{-1, 1, 1}, RGBColor[1, 1, 1]},
   {{1, -2, 2}, RGBColor[1, 1, 1]}},
Boxed->False,
Background->GrayLevel[0],
ViewPoint->{0,0,-2.5}];

(*show the second zone by itself*)
Show[onezone[2,a,v],
Boxed->False,
Background->GrayLevel[0],
ViewPoint->{0,0,2.5}];

(*show all faces not in the second zone*)
Show[notzone[2,a,v],
Boxed->False,
Background->GrayLevel[0],
ViewPoint->{0,0,2.5}];\
\>", "Input",ExpressionUUID->"4d304711-0972-4b8b-adba-70e049e3b2aa"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Initialization", "Section",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"b2d0a56f-7764-48f7-ac81-883b6d13996f"],

Cell[CellGroupData[{

Cell["Miscellaneous; Polar zonohedra; Rhombic Spirallohedra", "Subsection",ExpressionUUID->"fb5d422b-0e81-4243-94d6-26fbe89c974e"],

Cell["\<\
mag[v_]:=Sqrt[v.v](*magnitude of vector 'v'*)

unit[v_]:=v/mag[v](*unit vector in direction of 'v'*)

cent[v_List]:=Plus@@v/Length[v](*centroid of point list*)

mycross[ {ax_, ay_, az_}, {bx_, by_, bz_} ] :=
\t{ay bz - az by, az bx - ax bz, ax by - ay bx}(*cross product*)
\t
tosegs[gon_]:=Transpose[ {gon, RotateLeft[gon]} ](*polygon to edges*)\
\>", "Input",
 InitializationCell->
  True,ExpressionUUID->"f1366694-8c54-4cce-97ee-c77206b03736"],

Cell["\<\
(*area of parallelogram*)
sz[f_List] := mag[mycross[ f[[2]] - f[[1]], f[[3]] - f[[2]] ]]

(* treat 4gons specially for efficiency *)
totalarea[v_List] /; Length[v] == 4 :=
\tsz[v]

(* treat triangles specially for efficiency *)
totalarea[v_List] /; Length[v] == 3 :=
\tsz[v]/2
\t
(* general case: use polygon center as additional vertex *)
totalarea[v_List] :=
    Module[{bary = cent[v], circ, t},
        circ = tosegs[v];
        t=Apply[ {#1, #2, bary}&, circ, {1} ];
        Sum[sz[t[[i]]]/2,{i,Length[t]}]
    ]\
\>", "Input",
 InitializationCell->True,
 AspectRatioFixed->
  True,ExpressionUUID->"603b0b41-3343-4b19-a02f-a2f084b0f4b1"],

Cell["\<\
(*get Headless polygons from Graphics3D object or List*)
parse[x_]:= Cases[ x, {{_,_,_}..}, Infinity]\
\>", "Input",
 InitializationCell->
  True,ExpressionUUID->"e7a8857c-de1a-4cab-8d26-3ef4f399e26d"],

Cell["\<\
(*sort polygons by area*)
colorSort[poly_]:=(*~30* faster than old version*)
Block[{q1,q2,p},
p=parse[poly];
q1=Table[{p[[i]],totalarea[ p[[i]] ] },{i,Length[p]}];
q2=Split[Sort[q1,#1[[2]]<#2[[2]]&],
TrueQ[(Abs[#1[[2]]-#2[[2]]]<.0001)]&];
Print[\"You will need at least \",Length[q2],
\" colors in the colorlist below.\"];(*how many colors?*)
Table[Cases[q2[[i]],{{_,_,_}..},Infinity],{i,Length[q2]}]
]\
\>", "Input",
 InitializationCell->True,
 AspectRatioFixed->
  True,ExpressionUUID->"d57b1ae3-981f-422e-8497-edc1bdac7fe0"],

Cell["\<\
(*remove coincident faces; by Xah Lee*)
dePair[poly_]:=
Block[{a},
a=Sort[((Chop[Rationalize[(cent@#),10^-3]])@#&/@ (poly)),
OrderedQ[{Head@#1,Head@#2}]&];
Nest[
\t(
\t(DeleteCases[#,Null,{1}]&) @ (Flatten[#,1]&) @
\t((If[SameQ@@(Head/@#),Null,#]&) /@
\t\tPartition[Join[RotateRight[#],{Null,Null,Null}],2])
\t)&,a,2]/.({___}[li_List]:>li)
]\
\>", "Input",
 InitializationCell->True,
 AspectRatioFixed->
  True,ExpressionUUID->"eb150966-9591-4494-bb42-248fd95c7c93"],

Cell["\<\
(*n vectors*)
vectors[n_Integer,pitch_,factor_Integer,ratio_]:=
Block[{e},
Table[If[Mod[i,factor]==0,e=ratio,e=1];
\tN[{e Cos[Degree pitch] Cos[2Pi i/n],
\te Cos[Degree pitch] Sin[2Pi i/n],
\te Sin[Degree pitch]}],
\t{i,0,n-1}]]

vectors[n_:12,pitch_:35.2643,factor_:1,ratio_:1]:=
vectors[n, pitch, factor, ratio]
\t
(*parallelogram from two vectors, update global 'mark'*)
quad[x_,ref_]:={ref, ref+x[[1]], ref+x[[1]]+x[[2]], mark=ref+x[[2]]}

PolarZonohedron[n_Integer,pitch_,factor_Integer,ratio_]:=
Block[{v=vectors[n,pitch,factor,ratio],h=(Plus @@ \
vectors[n,pitch,factor,ratio])/2, q},
\tq=Table[mark=-h;
\t\tTable[quad[{v[[j]],v[[1+Mod[i+j-1,n]]]},mark],{i,n-1}],{j,n}];
\tGraphics3D[ Polygon /@ Flatten[q ,1] ]
]

PolarZonohedron[n_:12,pitch_:35.2643,factor_:1,ratio_:1]:=
PolarZonohedron[n, pitch, factor, ratio]

Spirallohedron[n_Integer,karm_Integer,pitch_,factor_,ratio_]:=
Block[{v=vectors[n,pitch,factor,ratio],
h=((Plus @@ vectors[n,pitch,factor,ratio])[[3]])/2,
klim,q,t},
klim=(n/karm);
q=Table[Table[If[k==1,mark={0,0,-h},mark=({0,0,-h}+Sum[ v[[ 1+Mod[j+(t-2),n] \
]],{t,k-1}])];
Table[quad[{v[[1+Mod[j+(k-2),n]]],v[[1+Mod[i+j+(k-2),n]]]},mark],
\t{i,klim-(k-1),n-k}],
\t\t{j,1,n-1,klim}],
\t\t\t{k,klim}];
Graphics3D[ Polygon /@ Flatten[q ,2] ]
]

Spirallohedron[n_:12, karm_:3, pitch_:35.2643, factor_:1, ratio_:1]:=
Spirallohedron[n, karm, pitch, factor, ratio]\
\>", "Input",
 InitializationCell->True,
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"94d283a6-d4b9-4e22-b0e0-6853a0a99383"],

Cell["\<\
(*from Graphics:Shapes: translate a polyhedron, etc.*)
trans[shape_, vec_List] :=
Block[{t = N[vec]},
 shape /. {
  poly:Polygon[_] :> Map[(t + #)&, poly, {2}],
  ln:Line[_]    :> Map[(t + #)&, ln, {2}],
  pt:Point[_]  :> Map[(t + #)&, pt,{1}] }
    ]\
\>", "Input",
 InitializationCell->
  True,ExpressionUUID->"97caf093-bf68-4c24-97bd-6c469dbe4133"],

Cell["\<\
vunion::usage = \"vunion[v] returns the union of a list of n-vectors.\";

vunion[v_]:=
Union[Chop[v],
SameTest->((Sign[#1]==Sign[#2]) && (Chop[#1-#2]==Table[0,{Length[v[[1]]]}]) \
&)]\
\>", "Input",
 InitializationCell->
  True,ExpressionUUID->"1efbc69f-d288-402b-aca2-53c0ad040043"],

Cell["\<\
(*makes an array of ijk points, translations for close-packing*)
makearray[{inum_,jnum_,knum_},trans_]:=
Block[{ir,jr,kr,f1,f2,f3},
ir=(inum-1)/2;
jr=(jnum-1)/2;
kr=(knum-1)/2;
Flatten[Table[
f1=i*trans[[1]];
f2=j*trans[[2]]+f1;
f3=k*trans[[3]]+f2;
f3,
{i,-ir,ir,1},
{j,-jr,jr,1},
{k,-kr,kr,1}
],2]
]\
\>", "Input",
 InitializationCell->
  True,ExpressionUUID->"88696b56-03dc-465b-b949-faf52388cf29"],

Cell["\<\
(*makes an array of ijk points, translations for close-packing*)
make2Darray[{inum_,jnum_},trans_]:=
Block[{ir,jr,f1,f2},
ir=(inum-1)/2;
jr=(jnum-1)/2;
Flatten[Table[
f1=i*trans[[1]];
f2=j*trans[[2]]+f1;
f2,
{i,-ir,ir,1},
{j,-jr,jr,1}
],1]
]\
\>", "Input",
 InitializationCell->
  True,ExpressionUUID->"81c570ab-b7e3-4998-9dba-ffbd566cb4c9"],

Cell["\<\
tol=0.000001;
same[v1_, v2_]:=
   And @@ Map[Abs[#]<tol&, v1-v2]
   
facevectors[gon_]:= Map[#[[1]]-#[[2]]&,Partition[Join[gon,{First[gon]}],2,1]]

(*get kth zone from zonohedron 'poly' determined by vectors 'star'*)
onezone[k_Integer,poly_,star_]:= 
Block[{qaz=Map[facevectors[#]&,b=parse[poly]]},
zaq=Map[First,Position[Map[Map[same[#, star[[k]] ]&,# ]&,qaz],True]];
Graphics3D[ Polygon /@ b[[zaq]] ] 
]

(*get all faces not in kth zone from zonohedron 'poly'
determined by vectors 'star'*)
notzone[k_Integer,poly_,star_]:= 
Block[{qaz=Map[facevectors[#]&,b=parse[poly]]},
zaq=Union[Map[First,Position[Map[Map[same[#, star[[k]] ]&,# ]&,qaz],True]]];
xaq=Select[Range[Length[b]],MemberQ[zaq,#]==False&];
Graphics3D[ Polygon /@ b[[xaq]] ] 
]

(*color kth zone from zonohedron 'poly' determined by vectors 'star'*)
colorzone[k_Integer,poly_,star_]:= 
Block[{qaz=Map[facevectors[#]&,b=parse[poly]]},
zaq=Union[Map[First,Position[Map[Map[same[#, star[[k]] ]&,# ]&,qaz],True]]];
xaq=Select[Range[Length[b]],MemberQ[zaq,#]==False&];
Graphics3D[ {{SurfaceColor[RGBColor[1,.3,.3] ],Polygon /@ b[[zaq]]},
{SurfaceColor[RGBColor[.5,.5,1] ],Polygon /@ b[[xaq]]}} ] 
]\
\>", "Input",
 InitializationCell->
  True,ExpressionUUID->"bebdda11-4fbc-4a96-a882-6e3aaa0daa46"],

Cell["\<\
(*a function which creates a rhombic hexahedron from three vectors*)
(*it then updates global variable 'mark'*)
hex[x_,ref_]:={
{a=ref, b=ref+x[[1]], c=ref+x[[1]]+x[[2]], d=ref+x[[2]]},
{a,a+x[[3]],b+x[[3]],b},
{b,b+x[[3]],c+x[[3]],c},
{c,c+x[[3]],d+x[[3]],d},
{d,d+x[[3]],a+x[[3]],a},
{mark=a+x[[3]],b+x[[3]],c+x[[3]],d+x[[3]]}
}\
\>", "Input",
 InitializationCell->True,
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"767a9a94-1b08-49bc-83f0-356431a0dacf"]
}, Open  ]],

Cell[CellGroupData[{

Cell["For Ruled Surfaces", "Subsection",ExpressionUUID->"a418cde6-fb54-43bd-b3a5-3c2258ef123e"],

Cell["\<\
(*makes lines along ridges of (n/factor)-armed spirallohedron*)
ridges[n_Integer,kk_Integer,pitch_]:=
Block[{v=vectors[n,pitch],h=(Plus @@ vectors[n,pitch])/2, q, factor},
factor=(n/kk);
\tq=Table[mark=-h;
\t\tTable[zad[ v[[1+Mod[i+j-1,n]]], mark],{i,0,n-1}],{j,1,n,factor}];
\tGraphics3D[ {AbsoluteThickness[2],Line /@ Flatten[q ,1]} ]
]

ridges[n_:12,kk_:1,pitch_:35.2643]:=
ridges[n, kk, pitch]\
\>", "Input",
 InitializationCell->
  True,ExpressionUUID->"81244d58-f00f-41af-94bc-390bfaed68b3"],

Cell["\<\
(*updates position on ridge*)
zad[x_,ref_]:={ref, mark=ref+x}\
\>", "Input",
 InitializationCell->
  True,ExpressionUUID->"24fc42c6-2197-475c-b420-a49d36587b9c"],

Cell["\<\
(*assembles list of vertices of (n/factor)-armed spirallohedron for ruling*)
spiverts[n_Integer,kk_Integer,pitch_]:=
Block[{v=vectors[n,pitch],h=(Plus @@ vectors[n,pitch])/2, q, factor},
factor=(n/kk);
\tq=Table[mark=-h;
\t\tTable[zad[ v[[1+Mod[i+j-1,n]]], mark],{i,0,n-1}],{j,1,n,factor}];
\tChop[q]
]

spiverts[n_:12,kk_:1,pitch_:35.2643]:=
spiverts[n, kk, pitch]\
\>", "Input",
 InitializationCell->
  True,ExpressionUUID->"7c35532e-b471-42fe-8b94-9c61bd526c8e"],

Cell["\<\
RSruled[x_]:=(*uses output of spiverts[]*)
Block[{b,c},
b=Transpose[x];
Graphics3D[
Table[c=Last /@ b[[k]];{RGBColor[0,0,1], Line[ Join[ c, {First@c}] ]},
{k, Length[b]}]
](*end Graphics3D*)
]\
\>", "Input",
 InitializationCell->
  True,ExpressionUUID->"bab05664-2e1e-472c-8de7-36c92ee3c0f0"],

Cell["\<\
RSgons[x_]:=(*uses output of spiverts[]*)
Map[#[[2]]&, Transpose[x], {2}]\
\>", "Input",
 InitializationCell->
  True,ExpressionUUID->"119ac633-8070-4baf-b5fd-00f0ddbde0dc"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Sections, volume", "Subsection",ExpressionUUID->"82d56358-db3e-4cd2-9d9e-7ec1b1c8cd9b"],

Cell["\<\

(*divide-by-zero-protected*)
(*find the section, if it exists, of a segment '{p, q}'
by the subspace perpendicular to the unit vector 'vec'
at distance 'd' from the origin*)

section[{p_, q_}, d_, vec_] :=
Block[{t,tempdot,denom},
tempdot=(q - p) . vec;
denom=If[Chop[tempdot]==0,.000000001,tempdot];
t = (d*vec . vec - p . vec)/denom; 
If[t >= 0 && t <= 1, p + t*(q - p)]
]\
\>", "Input",
 InitializationCell->
  True,ExpressionUUID->"14f3a1b4-21fe-4815-b5ae-b848458af4ce"],

Cell["\<\
(*find the distance from the point 'pt' to the plane
(or n-1)-space) with unit normal 'norm' at distance 'dist'
from the origin.*)

ptspace[pt_,norm_,dist_]:=Abs[(Plus @@ (pt*norm))+dist]\
\>", "Input",
 InitializationCell->
  True,ExpressionUUID->"9a19210c-3791-4fdf-b340-3f0240432677"],

Cell["\<\
hullvol[poly_]:=(*changed, to hopefully handle non-centered objects*)
Block[{a,c,transpoly},
c=Chop[cent[ vunion[Flatten[parse[poly],1]] ]];
transpoly=trans[poly, -c];
(*first divide faces into triangles*)
a=Flatten[Map[toTriangles[#]&, parse[transpoly] ],1];
(*sum one-sixth the volumes of the determined parallelpipeds*)
N[Plus @@ Flatten[Map[(Abs[Minors[#, 3]]/6)&, a]]]
]\
\>", "Input",
 InitializationCell->
  True,ExpressionUUID->"56cab51a-04f1-48f9-8f9d-2ff9bece5950"],

Cell["\<\
(*from Wouter Meussen*)
myOrdering[z_List]:=(Sort[Transpose[{z,Range[Length[z]]}]]//Transpose) [[2]]

(*from Wouter Meussen*)
ang2[{v1_List,v2_List},v2_]:=1.
ang2[{v1_List,v2_List},v1_]:=-1.
ang2[{v1_List,v2_List},v3_List]:=
Block[{a,b},
a=If[mag[v2-v1]==0,.000000001,mag[v2-v1]];
b=If[mag[v3-v2]==0,.000000001,mag[v3-v2]];
(v2-v1).(v3-v2)/a/b
]

(*from Wouter Meussen*)
ang[{v1_List,v2_List},v2_|v1_]:=1.
ang[{v1_List,v2_List},v3_List]:=
Block[{a,b},
a=If[mag[v2-v1]==0,.000000001,mag[v2-v1]];
b=If[mag[v3-v2]==0,.000000001,mag[v3-v2]];
(v2-v1).(v3-v2)/a/b
]

(*from Wouter Meussen*)
(*finds convex polygonal hull of 3D points in plane*)
convexhull[pts_]:=
Block[{cen,dis,idx,xfar,far,xsec,hull},
cen=cent[pts];
dis=mag[#-cen]& /@ pts;
idx=myOrdering[dis];
xfar=Last[idx];
far=pts[[xfar]];
xsec=Sort[{10+  ang2[{cen,far},pts[[#]] ]-10.,
\tmag[(far-pts[[#]])] ,#} &/@idx][[-2,-1]];
hull={xfar,xsec};

FixedPoint[Last[AppendTo[hull, 
Sort[ {10+ang[  pts[[Take[hull,-2] ]],
pts[[#]] ]-10.,
mag[(pts[[ Last[hull] ]] -pts[[#]])] ,#} &/@idx] [[-3,-1]] ] ]&,0,
SameTest->(First[hull]==#2 &)];
pts[[ Drop[hull,-1] ]]
]\
\>", "Input",
 InitializationCell->True,
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"200726e3-120a-4b25-9254-a2dc7a2339c2"],

Cell["\<\
(*These functions appear elsewhere under different names*)

(* turn n-gon into list of triangles *)

toTriangles[vlist_List] /; Length[vlist] == 3 := {vlist}

(* treat 4gons specially for efficiency *)

toTriangles[vlist_List] /; Length[vlist] == 4 :=
\t{vlist[[{1, 2, 3}]], vlist[[{3, 4, 1}]]}

(* general case: use center of gravity as additional vertex *)
(* in this way, some nonconvex polygons can also be rendered correctly *)

toTriangles[vlist_List] :=
    Module[{bary = (Plus @@ vlist)/Length[vlist], circ},
        circ = Partition[ Append[vlist, First[vlist]], 2, 1 ];
        Apply[ {#1, #2, bary}&, circ, {1} ]
    ]\
\>", "Input",
 InitializationCell->
  True,ExpressionUUID->"861be807-f2a5-4c58-8847-d21ee3f9824d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Volume II", "Subsection",ExpressionUUID->"35ba425f-1fd9-453d-87bb-bd988b88e95a"],

Cell["\<\
(*a function which creates a rhombic hexahedron from three vectors*)
(*it then updates global variable 'mark'*)
newhex[{i_,j_,k_},ref_]:=Graphics3D[
Polygon/@
{
{ref, ref+i, ref+i+j, ref+j},(*face ij*)
{ref+j,ref+j+i,ref+j+i+k,ref+j+k},(*face ik*)

{ref, ref+j, ref+j+k, mark=ref+k},(*face jk and update mark*)
{ref+k, ref+k+j, ref+k+j+i, ref+k+i},(*face ji*)

{ref, ref+k, ref+k+i, ref+i},(*face ki*)
{ref+i, ref+i+k, ref+i+k+j, ref+i+j}(*face kj*)
}]\
\>", "Input",
 InitializationCell->
  True,ExpressionUUID->"57983439-f0ce-4102-985d-3cf8abcf2cff"],

Cell["\<\
(*create the vectors which determine a polar zonohedron*)
vectors[n_Integer,pitch_,edge_]:=
Table[
\tN[{edge Cos[Degree pitch] Cos[2Pi i/n],
\tedge Cos[Degree pitch] Sin[2Pi i/n],
\tedge Sin[Degree pitch]}],
\t{i,0,n-1}]\
\>", "Input",
 InitializationCell->True,
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"3cb84f99-19f7-4608-956c-17ed3ef19f73"],

Cell["\<\
(*note: pitch in radians*)
kvolume[n_,k_,pitch_,edge_]:=(edge^3*n*Cos[pitch]^2*Csc[Pi/n]^2*(-(k*Sin[(2*\
Pi)/k]) + n*Sin[(2*Pi)/n])*Sin[pitch])/(4*k)\
\>", "Input",
 InitializationCell->
  True,ExpressionUUID->"a72cd375-3e8d-44e3-b6f8-ce8352548772"],

Cell["\<\
(*from Standard Packages, Discrete Math, Combinatorica.nb*)
KSubsets[l_List,0] := { {} }
KSubsets[l_List,1] := Partition[l,1]
KSubsets[l_List,k_Integer?Positive] := {l} /; (k == Length[l])
KSubsets[l_List,k_Integer?Positive] := {}  /; (k > Length[l])

KSubsets[l_List,k_Integer?Positive] :=
\tJoin[
\t\tMap[(Prepend[#,First[l]])&, KSubsets[Rest[l],k-1]],
\t\tKSubsets[Rest[l],k]
\t]\
\>", "Input",
 InitializationCell->
  True,ExpressionUUID->"4822a130-68c9-45cb-b8a5-389f11379272"],

Cell["\<\
(*makes the face-index of equivalent faces above and below the equator \
equal*)
cycleface[trip_]:=Map[If[#>hemi,n-#,#]&, trip]\
\>", "Input",
 InitializationCell->
  True,ExpressionUUID->"bf762e4e-478e-4063-8322-3172dccd37bc"],

Cell["\<\
(*take face-indices ijk and form product of sines*)
sinproduct[f_]:=
StringJoin[
If[f[[1]]==1, StringJoin[ \"Sin[Pi/\",ToString[n],\"] \" ],
\t StringJoin[ \"Sin[\",ToString[ f[[1]] ],\"Pi/\",ToString[n],\"] \"] ],
If[f[[2]]==1, StringJoin[ \"Sin[Pi/\",ToString[n],\"] \" ],
\t StringJoin[ \"Sin[\",ToString[ f[[2]] ],\"Pi/\",ToString[n],\"] \"] ],
\"Sin[\",ToString[ f[[3]] ],\"Pi/\",ToString[n],\"] \"
]\
\>", "Input",
 InitializationCell->
  True,ExpressionUUID->"1a808887-e361-4a2f-bc0f-6b3000851664"],

Cell["\<\
Clear[i,j,k,n,t,edge](*this is how I got symbolic hexahedral volume*)
jj=edge*{{Cos[t]*Cos[2*i*Pi/n],Cos[t]*Sin[2*i*Pi/n],Sin[t]},
{Cos[t]*Cos[2*j*Pi/n],Cos[t]*Sin[2*j*Pi/n],Sin[t]},
{Cos[t]*Cos[2*k*Pi/n],Cos[t]*Sin[2*k*Pi/n],Sin[t]}};

Simplify[  jj[[1]].(Cross[ jj[[2]], jj[[3]] ]) ]\
\>", "Input",ExpressionUUID->"07396155-6cda-4fa4-b951-03b69f57e04d"],

Cell["\<\
(*how many hexahedra compose an {n,k} spirallohedron?*)
hexacore[n_,k_]:=((-2 + k)*(-1 + k)*n^3)/(6*k^2)\
\>", "Input",
 InitializationCell->
  True,ExpressionUUID->"ec4b1cf1-08a9-49ca-b5b8-94b9f19d9e1f"],

Cell["\<\
symhexvol[{i_,j_,k_}, n_,t_]:=Abs[
-4*edge^3*Cos[t]^2*Sin[((i - j)*Pi)/n]*Sin[((i - k)*Pi)/n]*Sin[((j - \
k)*Pi)/n]*Sin[t]
]\
\>", "Input",
 InitializationCell->
  True,ExpressionUUID->"12466b11-6ec6-4acc-8c86-b34ba5068a21"],

Cell["\<\
(*sort hexahedra by volume*)
volumeSort[trip_]:=
Block[{q1,q3},
q1=Map[{#[[1]], Det[ v[[ #[[1]] ]] ], #[[2]] }&, trip];
q3=Split[Sort[q1,#1[[2]]<#2[[2]]&],
TrueQ[(Abs[#1[[2]]-#2[[2]]]<.0001)]&];
Print[\"You will need at least \",Length[q3],
\" colors in the colorlist below.\"];
Table[Cases[q3[[i]],Graphics3D[_],Infinity],{i,Length[q3]}]
];\
\>", "Input",
 InitializationCell->
  True,ExpressionUUID->"e65a8aa0-9951-4434-a1b6-b54a6b19ed64"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["3-armed cubic filling", "Section",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"3e88a299-70e0-4ba8-b945-d9bf0d49f06e"],

Cell[TextData[{
 "The 3-armed spirallohedron arises whenever ",
 StyleBox["n / j",
  FontWeight->"Bold"],
 " = 3. It is reminiscent of a cube, and by the methods below, only three \
translation vectors are found. The method is somewhat as follows: the \
spirallohedron face-centers are found. Using the first two edges of each \
face, the surface normals are found. From this list we find the positions of \
faces with normals opposite to each given face. A vector of translation is \
found by subtracting the first face-center from the second. Then this list of \
translation vectors is reduced by taking its union (using the ",
 StyleBox["vunion",
  FontWeight->"Bold"],
 " function), and further reduced by discarding collinear vectors.There are \
always but three directions of translation for 3-armed spirallohedra, after \
discarding opposites.\n\nThere are also always six \
\[OpenCurlyDoubleQuote]patches\[CloseCurlyDoubleQuote] of faces in three \
patch-counterpatch pairs. Below, we create close-packings of i*j*k 3-armed \
spirallohedra, and examine their translation vectors, and their patches and \
counterpatches. Each patch is a \[OpenCurlyDoubleQuote]rhomboid region\
\[CloseCurlyDoubleQuote] of ",
 StyleBox["n/k",
  FontWeight->"Bold"],
 " by ",
 StyleBox["n/k",
  FontWeight->"Bold"],
 " rhombs."
}], "Text",ExpressionUUID->"16e775ac-8acb-46e4-b9c6-0e4de0513cdb"],

Cell[CellGroupData[{

Cell["Close-packing", "Subsection",ExpressionUUID->"9936738b-58c4-4597-9eb6-0d91494c0063"],

Cell["\<\
(*create and preview 3-armed spirallohedron 'a'*)
n=12;k=3;
Show[a=Spirallohedron[n,k],
Axes->True,
ViewPoint->{0,0,2}];\
\>", "Input",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"2ca2d6f1-2ce0-4d7a-8190-e4b8ece38c28"],

Cell["\<\
faces=parse[a];(*get faces*)
c1=Map[ Chop[cent[#] ]&, faces];(*get face centers*)
(*now get cross products for all faces*)
c2=Map[ Chop[ Cross[ (#[[2]]-#[[1]]), (#[[3]]-#[[2]]) ] ]&, faces];

(*find indices of pairs of faces with opposite normals*)
z1=Table[
{k,Flatten[ Position[c2, x_ /; Chop[ x+c2[[k]] ]=={0,0,0},{1}, 1 ] ][[1]]},
{k,Length[c2]}];

Print[\"Total number of faces is \", Length[faces]]
dex=Union[ Sort /@ z1 ];(*unique pairs of indices, half number of faces*)

Print[\"Number of opposite pairs is \", Length[dex]];

q=Map[c1[[ #[[1]] ]]-c1[[ #[[2]] ]]&, z1];(*subtract every face center from \
its opposite*)

vectrans=vunion[q];(*discard duplicate translation vectors*)
Print[\"Total number of trans vectors is \", Length[vectrans]]

t=Union[ vectrans, SameTest->(Chop[#1+#2]=={0,0,0}&)];(*discard collinears*)
Print[\"Discarding opposites, number of trans vectors is \", Length[t]]

qaz=Table[(*find pairs of patches connected to the same trans vector*)
Flatten[ Position[q, x_ /; (Chop[ x+vectrans[[k]] ]=={0,0,0}) ,{1}] ],
{k,Length[vectrans]}];

Print[\"The faces fall into \", Length[qaz], \" sets, each of length \",
Union[Map[Length[#]&, qaz]] ]\
\>", "Input",ExpressionUUID->"01391231-6a0e-444c-bb8e-a954db1186e7"],

Cell[TextData[{
 "We preview the space-filling by applying each of the three translation \
vectors to our 3-armed spirallohedron ",
 StyleBox["a",
  FontWeight->"Bold"],
 "."
}], "Text",ExpressionUUID->"9dbe7360-b06a-4c34-aca8-b100768b0603"],

Cell["\<\
(*Preview translations*)
b1=trans[a, t[[1]] ];
b2=trans[a, t[[2]] ];
b3=trans[a, t[[3]] ];
Show[{a,b1,b2,b3},
Boxed->False,
Background->RGBColor[.4,.1,.1],
ViewPoint->2.25*unit[{0,0,2}]];
Print[\"There are \",Length[faces],\" polygons bounding the \
spirallohedron.\"]
Print[\"There are \",Length[p1=parse[{a,b1,b2,b3}]],\" polygons \
altogether.\"]
Print[\"There are \", Length[dePair[p1] ],\" unshared polygons.\"]\
\>", "Input",ExpressionUUID->"1488bd3f-b13d-4299-a3b0-4058993f08dd"],

Cell["\<\
Having visually confirmed that, at least, the spirallohedra do not \
interpenetrate, we create a list of multiples of the three translation \
vectors. A parallelepipedal array of points is created, the spirallohedra \
translated accordingly, and then, partly as a check to see if the \
spirallohedra are meeting face-to-face, and partly to reduce computational \
overload, all coincident pairs of faces are discarded. Only the exterior \
faces are displayed. For instance, in the example here, there are 2592 rhombs \
altogether, but only 864 remain after removing the coincident (interior) \
pairs.\
\>", "Text",ExpressionUUID->"bda99f31-755a-4c86-9df4-d9091bec4ceb"],

Cell["\<\
latticepoints=makearray[{3,3,3},t];(*make an array of {i*j*k} points for \
translation*)
pack=Map[trans[a,#]&, latticepoints];(*can explode by writing \
\"1.1*latticepoints\"*)
Print[\"There are \",Length[f1=parse[pack]],\" faces altogether.\"]
Print[\"There are \",Length[ f2=dePair[f1] ],\" exterior faces.\"]\
\>", "Input",ExpressionUUID->"66deb197-7cb4-43ac-a508-b0afb0171ec0"],

Cell["\<\
(*display array*)
Show[zaq=Graphics3D[{EdgeForm[],Polygon /@ f2}],
Boxed->False,
Background->RGBColor[.4,.1,.1],
ViewPoint->2.25*unit[ {0,0,1} ]];\
\>", "Input",ExpressionUUID->"305d8203-8a57-421b-8851-372ace137aae"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Patches, Counterpatches, and produced translation vectors", "Subsection",ExpressionUUID->"70e080a6-1a13-4ad2-a524-5ca0df2d6b08"],

Cell["Show all patch-counterpatch pairs in sequence.", "Text",ExpressionUUID->"098f8172-f96d-450b-a094-3feabc022ad6"],

Cell["\<\
(*reduce to (k(k-1)/2) pairs of patch and counterpatch*)
patches=Union[Sort/@Map[ Sort/@Transpose[ z1[[ # ]] ]&, qaz]];
facepatches=Map[Polygon/@faces[[#]]&, patches, {2} ];(*patch/counterpatch*)
patchnumber=Length[facepatches];

Table[(*look at all patches and counterpatches*)
Show[zaq=Graphics3D[ facepatches[[ i ]]  ],(*Range[i] builds up patches*)
ViewPoint->2.25*unit[{0,0,1}]],
{i,patchnumber}];\
\>", "Input",ExpressionUUID->"1b9f4c9a-3b30-4c8b-9f46-0e5adc62ed5b"],

Cell["\<\
Show all translation vectors, produced through the face-centers.\
\>", "Text",ExpressionUUID->"429e0e7f-e741-415d-a402-1e07102e7e8e"],

Cell["\<\
(*make lines through face centers \"c1\"*)
sca=0.75;(*scale line from face to counterface*)
segs=Table[
vc=c1[[ dex[[ k,1 ]] ]] - c1[[ dex[[ k,2 ]] ]];(*face to counterface*)
Line[ {c1[[ dex[[ k,1 ]] ]]+(sca*vc), c1[[ dex[[ k,2 ]] ]]-(sca*vc)} ],
{k,Length[ dex ]}
];

Show[{a,Graphics3D[{
AbsolutePointSize[4], Map[Point[#]&, c1],
GrayLevel[0],AbsoluteDashing[{4,4}],segs}]
},
Boxed->False,
LightSources -> 
   {
   {{-10,8,2}, GrayLevel[.5]},
   {{0,0,5}, GrayLevel[.75]}
   },
Background->RGBColor[1,1,1],
PlotRange->All,
ViewPoint->2.25*unit[{0,0,-2}]];\
\>", "Input",ExpressionUUID->"37f13441-5eee-4a21-b1e2-25653b64d415"],

Cell["We can specially color a patch-counterpatch pair. ", "Text",ExpressionUUID->"b26b17b5-5b09-45b1-9f1a-a3d3b521bb7f"],

Cell["\<\
chosenpatch=patches[[1]];(*our chosen patch/counterpatch*)
notpatch=Complement[ Range[Length[faces]], chosenpatch];(*all the other faces*)


(*apply differing colors to (1) patch/counterpatch,
and (2) the rest of the faces*)
xaq=Graphics3D[
{SurfaceColor[ RGBColor[1,1,0]],
   Polygon /@ faces[[ Flatten[chosenpatch,1] ]],
SurfaceColor[RGBColor[.5,.5,.5]],
   Polygon /@ faces[[ notpatch ]]
}
];


Show[xaq,
LightSources -> 
   {
   {{-1,1,2}, RGBColor[1, 1, 1]},
   {{1,-2,0}, RGBColor[1, 1, 1]}
   },
Boxed->False,
Background->GrayLevel[0],
ViewPoint->2.25*unit[ {0,-.5,2} ] ];\
\>", "Input",ExpressionUUID->"b340bcfc-4e4b-452b-8a53-7d8cb850ae5a"],

Cell["\<\
Or, we can assign three different colors to the three pairs of patches and \
counterpatches.\
\>", "Text",ExpressionUUID->"71db1486-48a7-4f72-8a1b-5c15b0fd5ed0"],

Cell["\<\
(*apply differing colors to all three patch/counterpatch pairs*)
xaq=Graphics3D[
{SurfaceColor[ RGBColor[1,1,0]],
   Polygon /@ faces[[ Flatten[ patches[[1]],1 ] ]],
SurfaceColor[RGBColor[1,0,0]],
   Polygon /@ faces[[ Flatten[ patches[[2]],1 ] ]],
SurfaceColor[RGBColor[0,0,1]],
   Polygon /@ faces[[ Flatten[ patches[[3]],1 ] ]]
}
];


Show[xaq,
LightSources -> 
   {
   {{-1,1,2}, RGBColor[1, 1, 1]},
   {{1,-2,0}, RGBColor[1, 1, 1]}
   },
Boxed->False,
Background->GrayLevel[0],
ViewPoint->2.25*unit[ {0,-1,2} ] ];\
\>", "Input",ExpressionUUID->"95fe8780-d4f6-4053-acfe-baec4ba7055c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["4-armed dodecahedral filling", "Section",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"0a2b8088-fc3f-4060-b0c2-810cede8fa42"],

Cell[TextData[{
 "The 4-armed spirallohedron arises whenever ",
 StyleBox["k",
  FontWeight->"Bold"],
 "=4. It is reminiscent of a rhombic dodecahedron, and by the methods below, \
six translation vectors are found. These methods are the same as those \
discussed in the section on 3-armed cubic filling, above.\n\nThere are also \
always twelve \[OpenCurlyDoubleQuote]patches\[CloseCurlyDoubleQuote] of \
faces, in six patch-counterpatch pairs. Below, we create close-packings of \
i*j*k 4-armed spirallohedra, and examine their translation vectors, and their \
patches and counterpatches. Each patch is a \[OpenCurlyDoubleQuote]rhomboid \
region\[CloseCurlyDoubleQuote] of ",
 StyleBox["n/k",
  FontWeight->"Bold"],
 " by ",
 StyleBox["n/k",
  FontWeight->"Bold"],
 " rhombs."
}], "Text",ExpressionUUID->"2b241f09-c395-4c1a-979f-1862ddc07cc7"],

Cell[CellGroupData[{

Cell["Close-packing", "Subsection",ExpressionUUID->"eb40a8e8-dae0-4408-87b5-0a56db73dcc8"],

Cell["\<\
(*create and preview 4-armed spirallohedron 'a'*)
n=12;
Show[a=Spirallohedron[n,4],
Axes->True,
ViewPoint->{0,0,2}];\
\>", "Input",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"7209ec53-0bf3-462b-aa19-c7a704bd678e"],

Cell["\<\
faces=parse[a];(*get faces*)
c1=Map[ Chop[cent[#] ]&, faces];(*get face centers*)
(*now get cross products for all faces*)
c2=Map[ Chop[ Cross[ (#[[2]]-#[[1]]), (#[[3]]-#[[2]]) ] ]&, faces];

(*find indices of pairs of faces with opposite normals*)
z1=Table[
{k,Flatten[ Position[c2, x_ /; Chop[ x+c2[[k]] ]=={0,0,0},{1}, 1 ] ][[1]]},
{k,Length[c2]}];

Print[\"Total number of faces is \", Length[faces]]
dex=Union[ Sort /@ z1 ];(*unique pairs of indices, half number of faces*)

Print[\"Number of opposite pairs is \", Length[dex]];

q=Map[c1[[ #[[1]] ]]-c1[[ #[[2]] ]]&, z1];(*subtract every face center from \
its opposite*)

vectrans=vunion[q];(*discard duplicate translation vectors*)
Print[\"Total number of trans vectors is \", Length[vectrans]]

t=Union[ vectrans, SameTest->(Chop[#1+#2]=={0,0,0}&)];(*discard collinears*)
Print[\"Discarding opposites, number of trans vectors is \", Length[t]]

qaz=Table[(*find pairs of patches connected to the same trans vector*)
Flatten[ Position[q, x_ /; (Chop[ x+vectrans[[k]] ]=={0,0,0}) ,{1}] ],
{k,Length[vectrans]}];

Print[\"The faces fall into \", Length[qaz], \" sets, each of length \",
Union[Map[Length[#]&, qaz]] ]\
\>", "Input",ExpressionUUID->"04d8f621-996a-4c1f-ad11-b090ec9c5f23"],

Cell[TextData[{
 "We preview the space-filling by applying each of the three translation \
vectors to our 3-armed spirallohedron ",
 StyleBox["a",
  FontWeight->"Bold"],
 "."
}], "Text",ExpressionUUID->"bd3ddc3b-98ab-4189-959f-7b393812a3ed"],

Cell["\<\
(*Preview translations*)
b1=trans[a, t[[1]] ];
b2=trans[a, t[[2]] ];
b3=trans[a, t[[3]] ];
Show[{a,b1,b2,b3},
Boxed->False,
Background->RGBColor[.4,.1,.1],
ViewPoint->2.25*unit[{0,0,2}]];
Print[\"There are \",Length[faces],\" polygons bounding the \
spirallohedron.\"]
Print[\"There are \",Length[f1=parse[{a,b1,b2,b3}]],\" polygons \
altogether.\"]
Print[\"There are \", Length[dePair[f1] ],\" unshared polygons.\"]\
\>", "Input",ExpressionUUID->"bfc85cdf-9975-46a1-97df-3dbcb238e33b"],

Cell["\<\
Having visually confirmed that, at least, the spirallohedra do not \
interpenetrate, we create a list of multiples of the three translation \
vectors. A parallelepipedal array of points is created, the spirallohedra \
translated accordingly, and then, partly as a check to see if the \
spirallohedra are meeting face-to-face, and partly to reduce computational \
overload, all coincident pairs of faces are discarded. Only the exterior \
faces are displayed. For instance, in the example here, there are 2592 rhombs \
altogether, but only 864 remain after removing the coincident (interior) \
pairs.\
\>", "Text",ExpressionUUID->"0f32a55e-cdca-4bf6-851e-425710a491a7"],

Cell["\<\
latticepoints=makearray[{3,3,3},t];(*make an array of {i*j*k} points for \
translation*)
pack=Map[trans[a,#]&, latticepoints];(*can explode by writing \
\"1.1*latticepoints\"*)
Print[\"There are \",Length[f1=parse[pack]],\" faces altogether.\"]
Print[\"There are \",Length[ f2=dePair[f1] ],\" exterior faces.\"]\
\>", "Input",ExpressionUUID->"d0e5d591-fa15-42cb-a012-eefa81177f30"],

Cell["\<\
(*display array*)
Show[zaq=Graphics3D[{EdgeForm[],Polygon /@ f2}],
Boxed->False,
Background->RGBColor[.4,.1,.1],
ViewPoint->2.25*unit[ {0,0,1} ]];\
\>", "Input",ExpressionUUID->"c1d9db9d-c8ba-42ec-9b44-f015d34f6638"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Patches, Counterpatches, and produced translation vectors", "Subsection",ExpressionUUID->"df1898c2-59ae-4b29-96a3-f7ec99e6fc34"],

Cell["Show all patch-counterpatch pairs in sequence.", "Text",ExpressionUUID->"5f2755a2-7db5-4802-b2c5-ef3b57692a84"],

Cell["\<\
(*reduce to (k(k-1)/2) pairs of patch and counterpatch*)
patches=Union[Sort/@Map[ Sort/@Transpose[ z1[[ # ]] ]&, qaz]];
facepatches=Map[Polygon/@faces[[#]]&, patches, {2} ];(*patch/counterpatch*)
patchnumber=Length[facepatches];

Table[(*look at all patches and counterpatches*)
Show[zaq=Graphics3D[ facepatches[[ i ]]  ],(*Range[i] builds up patches*)
ViewPoint->2.25*unit[{0,0,1}]],
{i,patchnumber}];\
\>", "Input",ExpressionUUID->"ad12975f-723c-4078-a9e4-4563a193ec14"],

Cell["\<\
Show all translation vectors, produced through the face-centers.\
\>", "Text",ExpressionUUID->"1a31e7ef-d849-4dbf-967d-5ef2626d323e"],

Cell["\<\
(*make lines through face centers \"c1\"*)
sca=0.75;(*scale line from face to counterface*)
segs=Table[
vc=c1[[ dex[[ k,1 ]] ]] - c1[[ dex[[ k,2 ]] ]];(*face to counterface*)
Line[ {c1[[ dex[[ k,1 ]] ]]+(sca*vc), c1[[ dex[[ k,2 ]] ]]-(sca*vc)} ],
{k,Length[ dex ]}
];

Show[{a,Graphics3D[{
AbsolutePointSize[4], Map[Point[#]&, c1],
GrayLevel[0],AbsoluteDashing[{4,4}],segs}]
},
Boxed->False,
LightSources -> 
   {
   {{-10,8,2}, GrayLevel[.5]},
   {{0,0,5}, GrayLevel[.75]}
   },
Background->RGBColor[1,1,1],
PlotRange->All,
ViewPoint->2.25*unit[{0,0,-2}]];\
\>", "Input",ExpressionUUID->"da5c0406-9da0-4781-85b2-1d1769c9ea57"],

Cell["We can specially color a patch-counterpatch pair. ", "Text",ExpressionUUID->"c22d40a2-1b3e-4f3c-b777-dd7e04673997"],

Cell["\<\
chosenpatch=patches[[1]];(*our chosen patch/counterpatch*)
notpatch=Complement[ Range[Length[faces]], chosenpatch];(*all the other faces*)


(*apply differing colors to (1) patch/counterpatch,
and (2) the rest of the faces*)
xaq=Graphics3D[
{SurfaceColor[ RGBColor[1,1,0]],
   Polygon /@ faces[[ Flatten[chosenpatch,1] ]],
SurfaceColor[RGBColor[.5,.5,.5]],
   Polygon /@ faces[[ notpatch ]]
}
];


Show[xaq,
LightSources -> 
   {
   {{-1,1,2}, RGBColor[1, 1, 1]},
   {{1,-2,0}, RGBColor[1, 1, 1]}
   },
Boxed->False,
Background->GrayLevel[0],
ViewPoint->2.25*unit[ {0,-.5,2} ] ];\
\>", "Input",ExpressionUUID->"a9c41622-e00b-4e88-aa73-430e59ae2b94"],

Cell["\<\
Or, we can assign six different colors to the six pairs of patches and \
counterpatches.\
\>", "Text",ExpressionUUID->"caaf213f-f6f9-45e0-8165-9e1a3b709b76"],

Cell["\<\
(*apply differing colors to all three patch/counterpatch pairs*)
xaq=Graphics3D[
{SurfaceColor[ RGBColor[1,1,0]],
   Polygon /@ faces[[ Flatten[ patches[[1]],1 ] ]],
SurfaceColor[RGBColor[1,0,0]],
   Polygon /@ faces[[ Flatten[ patches[[2]],1 ] ]],
SurfaceColor[RGBColor[0,0,1]],
   Polygon /@ faces[[ Flatten[ patches[[3]],1 ] ]],
SurfaceColor[ RGBColor[1,0,0]],
   Polygon /@ faces[[ Flatten[ patches[[4]],1 ] ]],
SurfaceColor[RGBColor[0,0,.5]],
   Polygon /@ faces[[ Flatten[ patches[[5]],1 ] ]],
SurfaceColor[RGBColor[0,.5,0]],
   Polygon /@ faces[[ Flatten[ patches[[6]],1 ] ]]
}
];


Show[xaq,
LightSources -> 
   {
   {{-1,1,2}, RGBColor[1, 1, 1]},
   {{1,-2,0}, RGBColor[1, 1, 1]}
   },
Boxed->False,
Background->GrayLevel[0],
ViewPoint->2.25*unit[ {0,0,2} ] ];\
\>", "Input",ExpressionUUID->"993bde0a-a391-4eac-aa66-daf020b3b20f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Combined 3- and 6-armed filling", "Section",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"70030fba-6ba1-47d8-a2a1-cded5ff5b928"],

Cell[TextData[{
 "This packing of 3- and 6-armed spirallohedra was discovered by Frans Snik, \
physics student in the Netherlands. It took me a long time to construct it. \
After some failures I even doubted it could exist, and believed the 3-armed \
spirallohedra must interpenetrate.\n\nThe 6-armed spirallohedra fit together \
along their \[OpenCurlyDoubleQuote]equatorial\[CloseCurlyDoubleQuote] \
face-patches, in parallel layers, each layer constructed in the manner of \
hexagons tiling the plane. The 3-armed spirallohedra fit into the \
\[OpenCurlyDoubleQuote]hollows\[CloseCurlyDoubleQuote] where any three \
6-armed spirallohedra in one plane layer meet, with the added twist, that \
they are in two orientations, one spirallohedron being rotated 60 degrees \
(equivalent to 180 degrees) with respect to the other around its axis of \
3-fold symmetry. The two types occupy alternate hollows around any one \
6-armed spirallohedron. Thus there are alternating \
\[OpenCurlyDoubleQuote]plane\[CloseCurlyDoubleQuote] layers of 6-armed and \
3-armed spirallohedra.\n\nInterestingly, this packing arises for all ",
 StyleBox["n",
  FontSlant->"Italic"],
 " a multiple of 6, including the case when ",
 StyleBox["n",
  FontSlant->"Italic"],
 " and ",
 StyleBox["k",
  FontSlant->"Italic"],
 " equal 6, and the \[OpenCurlyDoubleQuote]degenerate\[CloseCurlyDoubleQuote] \
6-armed spirallohedron arises, which is an ordinary convex polar zonohedron \
bounded by 30 faces.\n\nWe begin by creating the two 3-armed spirallohedra; \
by reversing signs on only {x,y} of {x,y,z}, we effect a rotation of 180 \
degrees, equivalent to a rotation of 60 degrees. We name the two ",
 StyleBox["a1",
  FontWeight->"Bold"],
 " and ",
 StyleBox["a2",
  FontWeight->"Bold"],
 ". The 6-armed spirallohedron is named ",
 StyleBox["b",
  FontWeight->"Bold"],
 ". If you wish to create the ",
 StyleBox["n",
  FontSlant->"Italic"],
 "=6 polar zonohedron, set ",
 StyleBox["n",
  FontSlant->"Italic"],
 "=6 and substitute ",
 StyleBox["PolarZonohedron[n]",
  FontWeight->"Bold"],
 " for",
 StyleBox[" Spirallohedron[n,k]",
  FontWeight->"Bold"],
 "."
}], "Text",ExpressionUUID->"6f61e04c-cad6-409f-8f11-a8704e8f540f"],

Cell["\<\
(*set 'n'*)
n=12;

(*create and preview 3-armed spirallohedron 'a1'*)
k=3;
Show[a1=Spirallohedron[n,k],
Axes->True,
ViewPoint->2.25*unit[ {0,0,1} ]];

(*create and preview the rotated 3-armed spirallohedron 'a2'*)
Show[a2=Graphics3D[ Map[{-1,-1, 1}*#&, a1[[1]], {-2}] ],
Axes->True,
ViewPoint->2.25*unit[ {0,0,1} ]];

(*create and preview the 6-armed spirallohedron 'b'*)
k=6;
Show[b=Spirallohedron[n,k],
Axes->True,
ViewPoint->2.25*unit[ {0,0,1} ]];\
\>", "Input",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"8c9825d1-71e4-4f1f-967c-7619d1ef8f9e"],

Cell[TextData[{
 "Now we find the translation vectors for the 6-armed spirallohedron ",
 StyleBox["b",
  FontWeight->"Bold"],
 "."
}], "Text",ExpressionUUID->"5b11d944-15df-44cb-8f5d-721d2c30aeb7"],

Cell["\<\
faces=parse[b];(*get faces*)
c1=Map[ Chop[cent[#] ]&, faces];(*get face centers*)
(*now get cross products for all faces*)
c2=Map[ Chop[ Cross[ (#[[2]]-#[[1]]), (#[[3]]-#[[2]]) ] ]&, faces];

(*find indices of pairs of faces with opposite normals*)
z1=Table[
{k,Flatten[ Position[c2, x_ /; Chop[ x+c2[[k]] ]=={0,0,0},{1}, 1 ] ][[1]]},
{k,Length[c2]}];

Print[\"Total number of faces is \", Length[faces]]
dex=Union[ Sort /@ z1 ];(*unique pairs of indices, half number of faces*)

Print[\"Number of opposite pairs is \", Length[dex]];

q=Map[c1[[ #[[1]] ]]-c1[[ #[[2]] ]]&, z1];(*subtract every face center from \
its opposite*)

vectrans=vunion[q];(*discard duplicate translation vectors*)
Print[\"Total number of trans vectors is \", Length[vectrans]]

t=Union[ vectrans, SameTest->(Chop[#1+#2]=={0,0,0}&)];(*discard collinears*)
Print[\"Discarding opposites, number of trans vectors is \", Length[t]]

qaz=Table[(*find pairs of patches connected to the same trans vector*)
Flatten[ Position[q, x_ /; (Chop[ x+vectrans[[k]] ]=={0,0,0}) ,{1}] ],
{k,Length[vectrans]}];

Print[\"The faces fall into \", Length[qaz], \" sets, each of length \",
Union[Map[Length[#]&, qaz]] ]\
\>", "Input",ExpressionUUID->"14335dcc-ddb2-4f91-bfc9-efb0dc60748e"],

Cell[TextData[{
 "We select those translation vectors in the ",
 StyleBox["xy",
  FontWeight->"Bold"],
 " plane."
}], "Text",ExpressionUUID->"cf4dba4d-5cdc-4d41-a94b-11ff9bb98e37"],

Cell["\<\
(*select those translation vectors with z=0*)
t2=Select[Chop[t], #[[3]]==0&]\
\>", "Input",ExpressionUUID->"ae594217-d0b1-4581-b1a3-b3a9923ba0d2"],

Cell[TextData[{
 "Now, create a planar array of 6-armed spirallohedra.Only two of the three \
vectors ",
 StyleBox["t2",
  FontWeight->"Bold"],
 " are used; the function ",
 StyleBox["make2Darray",
  FontWeight->"Bold"],
 " makes a 3X3 rhombic grid of points, which we use to translate the \
spirallohedron. We choose 3X3 so that one 6-armed spirallohedron falls on the \
center of the array, and we can use its \[OpenCurlyDoubleQuote]corners\
\[CloseCurlyDoubleQuote] or extreme equatorial vertices for the positions of \
the prototypical 3-armed spirallohedra. It\[CloseCurlyQuote]s just a lazy way \
to do it. Someday I'll fix it."
}], "Text",ExpressionUUID->"9347085a-75c5-41eb-bc5c-9d3607ea8101"],

Cell["\<\
latticepoints=make2Darray[{3,3},t2];(*make an array of {i*j} points for \
translation*)
pack=Map[trans[b,#]&, latticepoints];(*can explode by writing \
\"1.1*latticepoints\"*)
Print[\"There are \",Length[f1=parse[pack]],\" faces altogether.\"]
Print[\"There are \",Length[ f2=dePair[f1] ],\" exterior faces.\"]
zaq=Graphics3D[Polygon /@ f2];\
\>", "Input",ExpressionUUID->"6c29fe10-c45d-4d1a-a619-6153770d06a8"],

Cell["\<\
(*display array*)
Show[{zaq},
Boxed->True,
Axes->True,
ViewPoint->2.25*unit[ {0,-0,1} ]];\
\>", "Input",ExpressionUUID->"e3dd1d85-b2dd-46fc-b537-9b258bdd2d37"],

Cell[TextData[{
 "Next we find the six extreme equatorial points, and order them into the \
hexagon ",
 StyleBox["poly",
  FontWeight->"Bold"],
 ", so that we can use points {1,3,5} for one type of 3-armed spirallohedron, \
and points {2,4,6} for the other. To actually move the 3-armed spirallohedra \
around on their own translation vectors, we define ",
 StyleBox["hexvectors",
  FontWeight->"Bold"],
 "."
}], "Text",ExpressionUUID->"5999b263-5864-40c0-bd88-cd40d0128b7f"],

Cell["\<\
(*all points on equator of 6-armed \"b\"*)
spec=vunion[Select[Chop[Flatten[parse[b],1] ], #[[3]]==0&]]
Print[\"There are \", Length[spec], \" points on the equator.\"]
hexdist=Max[Map[mag[#]&, spec]];(*greatest distance->points on proper hexagon*)
Print[\"The greatest distance is \", hexdist]

(*points on hexagon*)
newt=Select[spec, (Abs[mag[#]-hexdist]<.001)&];(*find points*)
poly=convexhull[newt];(*order points*)
(*now get the vectors of translation*)
hexvectors={poly[[3]]-poly[[1]], poly[[4]]-poly[[2]], poly[[5]]-poly[[3]]};

(*look at hexagon, ordered vertices*)
r=hexdist*1.3;(*for PlotRange*)
Show[Graphics3D[ Table[{Point[ poly[[i]] ],Text[ToString[i],poly[[i]]*1.1]} \
,{i,Length[poly]}] ],
Boxed->True,
Axes->True,
PlotRange->{{-r,r},{-r,r},{-1,1}},
ViewPoint->2.25*unit[ {0,-0,1} ]];\
\>", "Input",ExpressionUUID->"447d1e96-4cee-4d3f-88b1-d8461c48264e"],

Cell[TextData[{
 "Here we actually move the two types of 3-armed spirallohedra into their \
\[OpenCurlyDoubleQuote]initial\[CloseCurlyDoubleQuote] position. They form a \
ring of six.\nI am not quite sure why the order {a1, a2} always works. Maybe \
it doesn't always work.\nWe also check the difference between the total \
number of faces, and the number remaining after all coincident faces have \
been removed, using ",
 StyleBox["dePair",
  FontWeight->"Bold"],
 "."
}], "Text",ExpressionUUID->"5799b699-0f2d-4166-b02d-7b7f931a7b9d"],

Cell["\<\
(*define the rise of one edge at default pitch=35.2643 degrees*)
h1=N[Sqrt[1/3]];
(*OK ... put them all in position first*)
(*this really ought to fail some of the time! orientation ...*)
obj1=trans[a1, poly[[1]]+{0,0,(n/2)*h1}];
obj2=trans[a2, poly[[2]]+{0,0,(n/2)*h1}];
obj3=trans[a1, poly[[3]]+{0,0,(n/2)*h1}];
obj4=trans[a2, poly[[4]]+{0,0,(n/2)*h1}];
obj5=trans[a1, poly[[5]]+{0,0,(n/2)*h1}];
obj6=trans[a2, poly[[6]]+{0,0,(n/2)*h1}];
Print[\"There are \",Length[ff1=parse[{obj1,obj2,obj3,obj4,obj5,obj6}]],\" \
faces altogether.\"]
Print[\"There are \",Length[ ff2=dePair[ff1] ],\" exterior faces.\"]

(*display the ring of 3-armed spirallohedra*)
Show[Graphics3D[Polygon /@ ff2],
Boxed->True,
Axes->True,
ViewPoint->2.25*unit[ {0,0,2} ]];\
\>", "Input",ExpressionUUID->"673db5ff-a152-428a-a66e-3a171393b568"],

Cell["\<\
Test the packing by fitting the ring of 3-armed spirallohedra to two 6-armed \
spirallohedra, one above, one below.\
\>", "Text",ExpressionUUID->"6fac8a07-b3f0-40c4-b7ea-bdb1357319f0"],

Cell["\<\
(*translate one 6-armed to higher position*)
bhi=trans[b, {0,0,n*h1}];

(*display ring of 3-armed with one 6-armed above, one below*)
Show[{obj1,obj2,obj3,obj4,obj5,obj6,b,bhi},
Boxed->True,
Axes->True,
ViewPoint->2.25*unit[ {0,0,2} ]];\
\>", "Input",ExpressionUUID->"44e0f3d7-608e-4105-bff1-1bd2f5851bf5"],

Cell[TextData[{
 "Test the packing by fitting just two 3-armed spirallohedra together, an ",
 StyleBox["a1",
  FontWeight->"Bold"],
 " to an ",
 StyleBox["a2",
  FontWeight->"Bold"],
 ", and finding the number of coincident faces. Interestingly, ",
 StyleBox["a1",
  FontWeight->"Bold"],
 " and ",
 StyleBox["a2",
  FontWeight->"Bold"],
 " do not meet along a common \[OpenCurlyDoubleQuote]patch\
\[CloseCurlyDoubleQuote] of faces, but share two half-patches."
}], "Text",ExpressionUUID->"7cf63404-9dfd-435c-a3bf-e486a0c05ec9"],

Cell["\<\
Show[{obj1,obj2},
Boxed->True,
Axes->True,
ViewPoint->2.25*unit[ {0,0,2} ]];
Print[\"There are \",Length[ff1=parse[{obj1,obj2}]],\" faces altogether.\"]
Print[\"There are \",Length[ ff2=dePair[ff1] ],\" exterior faces.\"]
Print[\"There are \", Length[ff1]-Length[ff2],\" coincident faces.\"]\
\>", "Input",ExpressionUUID->"1f3a803f-eb67-4532-b9ae-897f33ea2631"],

Cell[TextData[{
 "Test the packing by fitting just one 3-armed spirallohedron to one \
6-armed",
 ", and finding the number of coincident faces. The patches of the 6-armed \
are (when ",
 StyleBox["n",
  FontSlant->"Italic"],
 "=12) made of four rhombs each, while those of the 3-armed are made of 16 \
rhombs each. We examine the projection closely, and conclude that, when ",
 StyleBox["n",
  FontSlant->"Italic"],
 "=12, two half-patches of a 3-armed spirallohedron meet four full patches of \
a 6-armed spirallohedron."
}], "Text",ExpressionUUID->"5b240bf8-7ff6-4b5b-8194-485789c9c896"],

Cell["\<\
Show[{obj1,b},
Boxed->True,
Axes->True,
ViewPoint->2.25*unit[ {0,2,1} ]];
Print[\"There are \",Length[ff1=parse[{obj1,b}]],\" faces altogether.\"]
Print[\"There are \",Length[ ff2=dePair[ff1] ],\" exterior faces.\"]
Print[\"There are \", Length[ff1]-Length[ff2],\" coincident faces.\"]\
\>", "Input",ExpressionUUID->"aca58be1-672a-4af0-b099-90b4b1ef12fb"],

Cell[TextData[{
 "At last we go ahead and make a rhombic array of 3-armed spirallohedra. We \
do this by first translating an ",
 StyleBox["a1",
  FontWeight->"Bold"],
 " from its \[OpenCurlyDoubleQuote]prototypical\[CloseCurlyDoubleQuote] \
position at one corner of the equatorial hexagon of the \
\[OpenCurlyDoubleQuote]central 6-armed \
spirallohedron,\[CloseCurlyDoubleQuote] along a line, in both directions. We \
make an linear array named ",
 StyleBox["arr1",
  FontWeight->"Bold"],
 " of length ",
 StyleBox["tr+1",
  FontWeight->"Bold"],
 ". Then we translate this linear array by the second vector to make a \
rhombic array ",
 StyleBox["arr2",
  FontWeight->"Bold"],
 ".\n\nThe same process is followed with the rotated 3-armed spirallohedron \
",
 StyleBox["a2",
  FontWeight->"Bold"],
 ", and we obtain the rhombic array ",
 StyleBox["arr4",
  FontWeight->"Bold"],
 ".\n\nThen coincident faces are removed (",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " often crashes, if too many coincident polygons are passed to display), and \
this finall array, ",
 StyleBox["triarr",
  FontWeight->"Bold"],
 ", is shown."
}], "Text",ExpressionUUID->"b70b507e-7622-4baf-855f-6e10159f94bc"],

Cell["\<\
tr=2;

arr1=Table[
trans[obj1, (k*hexvectors[[1]])],
{k,-tr,tr,1}];
arr2=Table[
trans[arr1, (k*hexvectors[[2]])],
{k,-tr,tr,1}];

arr3=Table[
trans[obj2, (k*hexvectors[[1]])],
{k,-tr,tr,1}];
arr4=Table[
trans[arr3, (k*hexvectors[[2]])],
{k,-tr,tr,1}];
ff3=dePair[ parse[{arr2,arr4}] ];
triarr=Graphics3D[Polygon /@ ff3];

Show[triarr,
Boxed->True,
Axes->True,
ViewPoint->2.25*unit[ {0,0,1} ]];\
\>", "Input",ExpressionUUID->"ba168a46-c3d8-4786-b8bc-bdec413c0ecd"],

Cell["\<\
Finally, combine the rhombic array of 3-armed spirallohedra with the original \
array of 6-armed, and with one copy of that array, translated to the next \
level up.\
\>", "Text",ExpressionUUID->"148e462e-b546-40c4-a736-1f130c773e16"],

Cell["\<\
(*translate the array of 6-armed to next level up*)
hizaq=trans[zaq, {0,0,n*h1}];

Show[{zaq,triarr,hizaq},
Boxed->True,
Axes->True,
ViewPoint->2.25*unit[ {0,0,1} ]];\
\>", "Input",ExpressionUUID->"a05be6c0-690e-4117-9ae0-e85eb5bde2d5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["5-armed icosahedral array", "Section",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"ed1f1403-5e1b-4faf-a29d-95d9fae072cc"],

Cell[TextData[{
 "The 5-armed spirallohedron arises whenever ",
 StyleBox["k",
  FontWeight->"Bold"],
 "=5. It is reminiscent of an ",
 StyleBox["n=5",
  FontWeight->"Bold"],
 " polar zonohedron, and by the methods below,ten translation vectors are \
found. These methods are the same as those discussed in the section on \
3-armed cubic filling, above.\n\nThere are also always twenty \
\[OpenCurlyDoubleQuote]patches\[CloseCurlyDoubleQuote] of faces, in ten \
patch-counterpatch pairs. Below, we create arrays of i*j*k 5-armed \
spirallohedra, and examine their translation vectors, and their patches and \
counterpatches. Each patch is a \[OpenCurlyDoubleQuote]rhomboid region\
\[CloseCurlyDoubleQuote] of ",
 StyleBox["n/k",
  FontWeight->"Bold"],
 " by ",
 StyleBox["n/k",
  FontWeight->"Bold"],
 " rhombs."
}], "Text",ExpressionUUID->"d9c52f6d-ce9d-4286-9fcf-79275d20e39a"],

Cell[CellGroupData[{

Cell["Array", "Subsection",ExpressionUUID->"771c4de8-8898-489b-862a-58c2da255710"],

Cell["\<\
(*create and preview 3-armed spirallohedron 'a'*)
n=10;k=5;
Show[a=Spirallohedron[n,k],
Axes->True,
ViewPoint->{0,0,2}];\
\>", "Input",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"269e870b-274d-4800-945e-f09d7f137d32"],

Cell["\<\
faces=parse[a];(*get faces*)
c1=Map[ Chop[cent[#] ]&, faces];(*get face centers*)
(*now get cross products for all faces*)
c2=Map[ Chop[ Cross[ (#[[2]]-#[[1]]), (#[[3]]-#[[2]]) ] ]&, faces];

(*find indices of pairs of faces with opposite normals*)
z1=Table[
{k,Flatten[ Position[c2, x_ /; Chop[ x+c2[[k]] ]=={0,0,0},{1}, 1 ] ][[1]]},
{k,Length[c2]}];

Print[\"Total number of faces is \", Length[faces]]
dex=Union[ Sort /@ z1 ];(*unique pairs of indices, half number of faces*)

Print[\"Number of opposite pairs is \", Length[dex]];

q=Map[c1[[ #[[1]] ]]-c1[[ #[[2]] ]]&, z1];(*subtract every face center from \
its opposite*)

vectrans=vunion[q];(*discard duplicate translation vectors*)
Print[\"Total number of trans vectors is \", Length[vectrans]]

t=Union[ vectrans, SameTest->(Chop[#1+#2]=={0,0,0}&)];(*discard collinears*)
Print[\"Discarding opposites, number of trans vectors is \", Length[t]]

qaz=Table[(*find pairs of patches connected to the same trans vector*)
Flatten[ Position[q, x_ /; (Chop[ x+vectrans[[k]] ]=={0,0,0}) ,{1}] ],
{k,Length[vectrans]}];

Print[\"The faces fall into \", Length[qaz], \" sets, each of length \",
Union[Map[Length[#]&, qaz]] ]\
\>", "Input",ExpressionUUID->"e8933bd0-8421-4115-8431-e2aa279e11e4"],

Cell[TextData[{
 "We preview the space-filling by applying the first three translation \
vectors to our 5-armed spirallohedron ",
 StyleBox["a",
  FontWeight->"Bold"],
 "."
}], "Text",ExpressionUUID->"a0daed25-9e78-44c3-abd9-0873b7b454a7"],

Cell["\<\
(*Preview translations*)
b1=trans[a, t[[1]] ];
b2=trans[a, t[[2]] ];
b3=trans[a, t[[3]] ];
Show[{a,b1,b2,b3},
Boxed->False,
Background->RGBColor[.4,.1,.1],
ViewPoint->2.25*unit[{0,0,2}]];
Print[\"There are \",Length[faces],\" polygons bounding the \
spirallohedron.\"]
Print[\"There are \",Length[f1=parse[{a,b1,b2,b3}]],\" polygons \
altogether.\"]
Print[\"There are \", Length[dePair[f1] ],\" unshared polygons.\"]\
\>", "Input",ExpressionUUID->"30fa3e9e-eb12-4307-aa29-c7b028ce266e"],

Cell["\<\
Having visually confirmed that, at least, the spirallohedra do not \
interpenetrate, we create a list of multiples of the three translation \
vectors. A parallelepipedal array of points is created, the spirallohedra \
translated accordingly, and then, partly as a check to see if the \
spirallohedra are meeting face-to-face, and partly to reduce computational \
overload, all coincident pairs of faces are discarded. Only the exterior \
faces are displayed. For instance, in the example here, there are 2592 rhombs \
altogether, but only 864 remain after removing the coincident (interior) \
pairs.\
\>", "Text",ExpressionUUID->"dff5db20-a222-49a0-b36e-44d886010acd"],

Cell["\<\
latticepoints=makearray[{3,3,3},t];(*make an array of {i*j*k} points for \
translation*)
pack=Map[trans[a,#]&, latticepoints];(*can explode by writing \
\"1.1*latticepoints\"*)
Print[\"There are \",Length[f1=parse[pack]],\" faces altogether.\"]
Print[\"There are \",Length[ f2=dePair[f1] ],\" exterior faces.\"]\
\>", "Input",ExpressionUUID->"6edb937b-5bbf-4140-80b3-ce8fcef2a516"],

Cell["\<\
(*display array*)
Show[zaq=Graphics3D[{EdgeForm[],Polygon /@ f2}],
Boxed->False,
Background->RGBColor[.4,.1,.1],
ViewPoint->2.25*unit[ {0,0,1} ]];\
\>", "Input",ExpressionUUID->"f05ed87e-4d7a-4825-b16e-0b46a22fa09e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Patches, Counterpatches, and produced translation vectors", "Subsection",ExpressionUUID->"8480c7b9-0f78-4464-b03a-b71bff22eeb5"],

Cell["Show all patch-counterpatch pairs in sequence.", "Text",ExpressionUUID->"951c8e7b-17bd-4c6c-98c9-cdba006a9b51"],

Cell["\<\
(*reduce to (k(k-1)/2) pairs of patch and counterpatch*)
patches=Union[Sort/@Map[ Sort/@Transpose[ z1[[ # ]] ]&, qaz]];
facepatches=Map[Polygon/@faces[[#]]&, patches, {2} ];(*patch/counterpatch*)
patchnumber=Length[facepatches];

Table[(*look at all patches and counterpatches*)
Show[zaq=Graphics3D[ facepatches[[ i ]]  ],(*Range[i] builds up patches*)
ViewPoint->2.25*unit[{0,0,1}]],
{i,patchnumber}];\
\>", "Input",ExpressionUUID->"ef466e52-7916-452e-9f1a-11cd9894d953"],

Cell["\<\
Show all translation vectors, produced through the face-centers.\
\>", "Text",ExpressionUUID->"aa480c9b-53dd-4e54-bc37-00d5f5c19df4"],

Cell["\<\
(*make lines through face centers \"c1\"*)
sca=0.75;(*scale line from face to counterface*)
segs=Table[
vc=c1[[ dex[[ k,1 ]] ]] - c1[[ dex[[ k,2 ]] ]];(*face to counterface*)
Line[ {c1[[ dex[[ k,1 ]] ]]+(sca*vc), c1[[ dex[[ k,2 ]] ]]-(sca*vc)} ],
{k,Length[ dex ]}
];

Show[{a,Graphics3D[{
AbsolutePointSize[4], Map[Point[#]&, c1],
GrayLevel[0],AbsoluteDashing[{4,4}],segs}]
},
Boxed->False,
LightSources -> 
   {
   {{-10,8,2}, GrayLevel[.5]},
   {{0,0,5}, GrayLevel[.75]}
   },
Background->RGBColor[1,1,1],
PlotRange->All,
ViewPoint->2.25*unit[{0,0,-2}]];\
\>", "Input",ExpressionUUID->"3f66825a-43c8-4f6c-85d6-abd121244c4f"],

Cell["We can specially color a patch-counterpatch pair. ", "Text",ExpressionUUID->"d7c3b2c1-442e-4c43-b149-c73f17724380"],

Cell["\<\
chosenpatch=patches[[1]];(*our chosen patch/counterpatch*)
notpatch=Complement[ Range[Length[faces]], chosenpatch];(*all the other faces*)


(*apply differing colors to (1) patch/counterpatch,
and (2) the rest of the faces*)
xaq=Graphics3D[
{SurfaceColor[ RGBColor[1,1,0]],
   Polygon /@ faces[[ Flatten[chosenpatch,1] ]],
SurfaceColor[RGBColor[.5,.5,.5]],
   Polygon /@ faces[[ notpatch ]]
}
];


Show[xaq,
LightSources -> 
   {
   {{-1,1,2}, RGBColor[1, 1, 1]},
   {{1,-2,0}, RGBColor[1, 1, 1]}
   },
Boxed->False,
Background->GrayLevel[0],
ViewPoint->2.25*unit[ {0,-.5,2} ] ];\
\>", "Input",ExpressionUUID->"272a3bf4-2cf6-4ca5-a03a-ca243135a847"],

Cell["\<\
Or, we can assign ten different colors to the ten pairs of patches and \
counterpatches.\
\>", "Text",ExpressionUUID->"31fc173e-230b-4a66-b61f-14e737bb8a84"],

Cell["\<\
(*apply differing colors to all three patch/counterpatch pairs*)
xaq=Graphics3D[
{SurfaceColor[ RGBColor[1,1,0]],
   Polygon /@ faces[[ Flatten[ patches[[1]],1 ] ]],
SurfaceColor[RGBColor[1,0,0]],
   Polygon /@ faces[[ Flatten[ patches[[2]],1 ] ]],
SurfaceColor[RGBColor[0,0,1]],
   Polygon /@ faces[[ Flatten[ patches[[3]],1 ] ]],
SurfaceColor[ RGBColor[1,0,0]],
   Polygon /@ faces[[ Flatten[ patches[[4]],1 ] ]],
SurfaceColor[RGBColor[0,0,.5]],
   Polygon /@ faces[[ Flatten[ patches[[5]],1 ] ]],
SurfaceColor[RGBColor[0,.5,0]],
   Polygon /@ faces[[ Flatten[ patches[[6]],1 ] ]],
SurfaceColor[RGBColor[1,1,1]],
   Polygon /@ faces[[ Flatten[ patches[[7]],1 ] ]],
SurfaceColor[ RGBColor[.5,.5,.5]],
   Polygon /@ faces[[ Flatten[ patches[[8]],1 ] ]],
SurfaceColor[RGBColor[1,0,.5]],
   Polygon /@ faces[[ Flatten[ patches[[9]],1 ] ]],
SurfaceColor[RGBColor[0,0,.2]],
   Polygon /@ faces[[ Flatten[ patches[[10]],1 ] ]]   
}
];


Show[xaq,
LightSources -> 
   {
   {{-1,1,2}, RGBColor[1, 1, 1]},
   {{1,-2,0}, RGBColor[1, 1, 1]}
   },
Boxed->False,
Background->GrayLevel[0],
ViewPoint->2.25*unit[ {0,0,2} ] ];\
\>", "Input",ExpressionUUID->"47a6203e-2277-49ec-86ca-b5b43d17a98c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Filling selected regions of space", "Section",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"92469029-43c7-43f8-bea6-bbdd207e9075"],

Cell["\<\
When creating close-packings of polyhedra, it is often convenient to assemble \
the list of translation vectors first, then actually translate the \
polyhedron. A single spirallohedron can be a rather husky chunk of data, and \
an array of spirallohedra can place large demands upon the computer\
\[CloseCurlyQuote]s processor and RAM. Here we create a rather large list of \
translation points (10^3), but use only a subset to actually translate our \
spirallohedron.\
\>", "Text",ExpressionUUID->"adaf1811-02af-4c0f-b46f-92bc072e0895"],

Cell["\<\
(*create simplest unit 4-armed spirallohedron*)
Show[a=Spirallohedron[8,4],
Axes->True,
ViewPoint->{0,0,2}];\
\>", "Input",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"88894df7-3adf-4e54-b71a-d1967ab1f6de"],

Cell["\<\
faces=parse[a];(*get faces*)
c1=Map[ Chop[cent[#] ]&, faces];(*get face centers*)
(*now get cross products for all faces*)
c2=Map[ Chop[ Cross[ (#[[2]]-#[[1]]), (#[[3]]-#[[2]]) ] ]&, faces];

(*find indices of pairs of faces with opposite normals*)
z1=Table[
{k,Flatten[ Position[c2, x_ /; Chop[ x+c2[[k]] ]=={0,0,0},{1}, 1 ] ][[1]]},
{k,Length[c2]}];

Print[\"Total number of faces is \", Length[faces]]
dex=Union[ Sort /@ z1 ];(*unique pairs of indices, half number of faces*)

Print[\"Number of opposite pairs is \", Length[dex]];

q=Map[c1[[ #[[1]] ]]-c1[[ #[[2]] ]]&, z1];(*subtract every face center from \
its opposite*)

vectrans=vunion[q];(*discard duplicate translation vectors*)
Print[\"Total number of trans vectors is \", Length[vectrans]]

t=Union[ vectrans, SameTest->(Chop[#1+#2]=={0,0,0}&)];(*discard collinears*)
Print[\"Discarding opposites, number of trans vectors is \", Length[t]]

qaz=Table[(*find pairs of patches connected to the same trans vector*)
Flatten[ Position[q, x_ /; (Chop[ x+vectrans[[k]] ]=={0,0,0}) ,{1}] ],
{k,Length[vectrans]}];

Print[\"The faces fall into \", Length[qaz], \" sets, each of length \",
Union[Map[Length[#]&, qaz]] ]\
\>", "Input",ExpressionUUID->"0eb32673-6606-435e-aa4a-a76d228bfc1b"],

Cell["\<\
latticepoints=makearray[{10,10,10},t[[{1,2,3}]] ];(*make an array of {i*j*k} \
points for translation*)
Print[\"There are \", Length[latticepoints],\" points, with maximum distance \
\",
Max[Map[mag[#]&, latticepoints]]]\
\>", "Input",ExpressionUUID->"64fd19b8-4dae-4d9e-b5c9-ae4e316d13be"],

Cell[TextData[StyleBox["Make a Planar Array",
 FontSize->18]], "Text",ExpressionUUID->"91ff5557-110e-421e-a46b-78428e8f138a"],

Cell["\<\
(*select all points near the xy plane*)
region=Select[latticepoints, (Abs[ #[[3]] ]<1)&];
Length[region]\
\>", "Input",ExpressionUUID->"cbd0e0e4-0955-4e5b-9817-f4ada1233de7"],

Cell[TextData[StyleBox["Or, a Spherical Array",
 FontSize->18]], "Text",ExpressionUUID->"ba909f72-7c0b-4264-a1fe-312e2a4f3fd4"],

Cell["\<\
(*make a hollow ball of spirallohedra with an opening*)
region=Select[latticepoints, (mag[#]>6 && mag[#]<10 && #[[3]]<5)&];
Length[region]\
\>", "Input",ExpressionUUID->"aa106c12-20da-41a8-ba2a-2146d29d6a4b"],

Cell["\<\
pack=Map[trans[a,#]&, region];(*can explode by writing \
\"1.1*latticepoints\"*)
Print[\"There are \",Length[f1=parse[pack]],\" faces altogether.\"]
Print[\"There are \",Length[ f2=dePair[f1] ],\" exterior faces.\"]\
\>", "Input",ExpressionUUID->"7c8eccd7-11a8-4500-a91b-0366971031f7"],

Cell["\<\
(*display array*)
Show[zaq=Graphics3D[{EdgeForm[],Polygon /@ f2}],
Boxed->False,
Background->RGBColor[.4,.1,.1],
ViewPoint->2.25*unit[ {0,-.25,1} ]];\
\>", "Input",ExpressionUUID->"f1c4d2ad-6e34-4d00-a8f0-5976c9f1479f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Conchoids and Holy Conchoids", "Section",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"c10b1414-04ec-469f-a981-218130338b93"],

Cell[TextData[{
 "I call them \[OpenCurlyDoubleQuote]conchoids\[CloseCurlyDoubleQuote] \
because their curves remind me of shells.\n\nIf collinear translation vectors \
are allowed, a three-armed spirallohedron will always yield a set of six \
vectors. Translations along these give a packing of spirallohedra with open \
\[OpenCurlyDoubleQuote]cups\[CloseCurlyDoubleQuote] at the north and south \
poles. By filling these cups with two more spirallohedra, and deleting \
interior faces, we obtain a \[OpenCurlyDoubleQuote]conchoid\
\[CloseCurlyDoubleQuote] polyhedron. In the example below, the conchoid is \
bounded by 672 rhombs. Note that it mimics a rhombic hexahedron, the eight \
spirallohedra approximating the positions of the eight vertices of the \
hexahedron.\n\n4-armed conchoids can also be created. When ",
 StyleBox["k>4",
  FontWeight->"Bold"],
 ", the spirallohedra interpenetrate, but interesting forms result, anyway."
}], "Text",ExpressionUUID->"0a47e23d-a336-4bd3-a4e0-aac4f604375d"],

Cell["\<\
(*create 3-armed spirallohedron*)
n=12;
Show[a=Spirallohedron[n,3],
Axes->True,
ViewPoint->{0,0,2}];\
\>", "Input",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"d3caaad9-8173-4773-995e-cc9cc9e77181"],

Cell["\<\
faces=parse[a];(*get faces*)
c1=Map[ Chop[cent[#] ]&, faces];(*get face centers*)
(*now get cross products for all faces*)
c2=Map[ Chop[ Cross[ (#[[2]]-#[[1]]), (#[[3]]-#[[2]]) ] ]&, faces];

(*find indices of pairs of faces with opposite normals*)
z1=Table[
{k,Flatten[ Position[c2, x_ /; Chop[ x+c2[[k]] ]=={0,0,0},{1}, 1 ] ][[1]]},
{k,Length[c2]}];

Print[\"Total number of faces is \", Length[faces]]
dex=Union[ Sort /@ z1 ];(*unique pairs of indices, half number of faces*)

Print[\"Number of opposite pairs is \", Length[dex]];

q=Map[c1[[ #[[1]] ]]-c1[[ #[[2]] ]]&, z1];(*subtract every face center from \
its opposite*)

vectrans=vunion[q];(*discard duplicate translation vectors*)
Print[\"Total number of trans vectors is \", Length[vectrans]]

t=Union[ vectrans, SameTest->(Chop[#1+#2]=={0,0,0}&)];(*discard collinears*)
Print[\"Discarding opposites, number of trans vectors is \", Length[t]]

qaz=Table[(*find pairs of patches connected to the same trans vector*)
Flatten[ Position[q, x_ /; (Chop[ x+vectrans[[k]] ]=={0,0,0}) ,{1}] ],
{k,Length[vectrans]}];

Print[\"The faces fall into \", Length[qaz], \" sets, each of length \",
Union[Map[Length[#]&, qaz]] ]\
\>", "Input",ExpressionUUID->"fba0dd0c-f2c5-4b14-b427-e339bcef5d14"],

Cell["\<\
cap=Chop[Plus@@vectors[n,pitch]];(*vector for polar positions*)
allconch=Join[ Map[trans[a,#]&, vectrans], {a}, {trans[a,cap]}, \
{trans[a,-cap]} ];
Print[\"There are \", Length[ f1=parse[allconch] ], \" polygons \
altogether.\"]
Print[\"There are \", Length[ f2=dePair[f1] ], \" polygons after deleting \
coincident pairs.\"]\
\>", "Input",ExpressionUUID->"d70fce64-eae8-4dc1-9578-ce3fd3053f98"],

Cell["\<\
(*display conchoid*)
Show[zaq=Graphics3D[{EdgeForm[],Polygon /@ f2}],
Boxed->False,
Background->RGBColor[.4,.1,.1],
ViewPoint->2.25*unit[{0,-.25,0}]];\
\>", "Input",ExpressionUUID->"b5e58f38-c403-4d3e-841d-1a4c8bbe1e2b"],

Cell[TextData[StyleBox["Holy Conchoid",
 FontSize->18]], "Text",ExpressionUUID->"4fcc3a05-6cbc-4d2f-888f-88fd3d83b702"],

Cell["\<\
holyconch=Join[ Map[trans[a,#]&, vectrans], {a}];
Print[\"There are \", Length[ f1=parse[holyconch] ], \" polygons altogether.\"]
Print[\"There are \", Length[ f2=dePair[f1] ], \" polygons after deleting \
coincident pairs.\"]\
\>", "Input",ExpressionUUID->"a2c8381a-6881-472c-801d-32bf83630c42"],

Cell["\<\
(*display conchoid*)
Show[zaq=Graphics3D[{EdgeForm[],Polygon /@ f2}],
Boxed->False,
Background->RGBColor[.4,.1,.1],
ViewPoint->2.25*unit[{0,-.25,2}]];\
\>", "Input",ExpressionUUID->"6ee47596-89bc-4421-b834-7d6126f828f5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Rhombic surfaces; degenerate spirallohedra", "Section",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"8ed40221-1f05-4ffe-aa1c-9738e3a6ab41"],

Cell[TextData[{
 "Sometimes accidents are fruitful. In this case, the \
\[OpenCurlyDoubleQuote]illegal\[CloseCurlyDoubleQuote] used of ",
 StyleBox["k",
  FontWeight->"Bold"],
 StyleBox["=2",
  FontWeight->"Bold"],
 " leads to a twisted patch of rhombs. These enclose no volume, and cannot \
fill space; but they can be joined to form an infinite undulating surface. \
The methods seem strange, even to me, but for some reason they work."
}], "Text",ExpressionUUID->"aa4974e0-75a3-4672-a215-5d7744453a52"],

Cell["\<\
(*create surface patch where k=2*)
Show[a=Spirallohedron[12,2],
Axes->True,
ViewPoint->{2,0,0}];\
\>", "Input",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"82a6fe6c-78e5-41af-a683-24cced5c32ab"],

Cell["\<\
(*find candidates for translation vectors*)
faces=parse[a];(*get faces*)

(*sort vertices by z coordinate*)
t=Sort[vunion[ Flatten[faces,1] ],#1[[3]]<#2[[3]]&];

t1=Last@t;(*largest z coordinate*)

(*now add vertex with largest z to all vertices with z=0*)
q1=(t1+#)& /@ Select[t,#[[3]]==0&];

(*test translation vectors*)
vpt=Cross[q1[[1]],t1];(*viewpoint orthogonal to the two vectors*)

b1=trans[a, 2*t1 ];(*straight up*)
b2=trans[a, q1[[1]] ];(*use first of the q1's*)

Show[{a,b1,b2},
Boxed->False,
Background->RGBColor[.4,.1,.1],
ViewPoint->2.25*unit[ vpt ]];\
\>", "Input",ExpressionUUID->"b395b625-604c-4735-b086-89d607726866"],

Cell["\<\
i=4;(*iterator: there will be ((2*i)+1)^2 patches*)
b4=Table[k*q1[[1]],{k,-i,i}];(*one line of patches*)

(*now translate the whole line, repeatedly, making a parallelogrammic \
region*)
b5=Flatten[Table[Map[k*2*t1+#&, b4],{k,-i,i}],1];

(*select a subregion of patches, with an optional hole, to display*)
t2=Select[b5, (mag[#]<12 (*&& mag[#]>10*))&];
Print[\"There will be \",Length[t2],\" patches altogether.\"];

b6=Map[trans[a,#]&, t2];(*translate patches*)
zaq=Graphics3D[{EdgeForm[],Cases[b6,Polygon[x_],Infinity]}];\
\>", "Input",ExpressionUUID->"b1932665-11bd-4f9c-9124-046ec3b5c872"],

Cell["\<\
(*display selected patches*)
Show[zaq,
Boxed->False,
Background->RGBColor[.4,.1,.1],
ViewPoint->2.25*unit[ vpt ] ];\
\>", "Input",ExpressionUUID->"bf9f5bf5-b551-4da4-886c-f9e1902a51ba"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Coloring by area", "Section",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"607b8b2b-008b-4bb7-bc2f-6ef784540399"],

Cell[TextData[StyleBox["An example, if one does not yet exist.",
 FontSize->18]], "Text",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"ebacdef9-1175-4b8a-bc09-9519a7a0dc79"],

Cell["\<\
(*avoid 35.2643 pitch, it makes faces of different types have equal areas*)
Show[a=Spirallohedron[12,3,35],
Axes->True,
ViewPoint->{0,0,2}];\
\>", "Input",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"7c8e4b11-59c2-46c8-b921-715def050532"],

Cell[TextData[StyleBox["Sort polygons by surface area.",
 FontSize->18]], "Text",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"948f3b69-c535-434a-ba04-518bca93bda0"],

Cell["\<\
(*split the polygons into lists according to area*)
s=colorSort[a];\
\>", "Input",ExpressionUUID->"bf826bb6-c797-4d5d-a69b-5c0e7374e683"],

Cell[TextData[StyleBox["Various schemes to build a list of colors; choose \
one.",
 FontSize->18]], "Text",ExpressionUUID->"ed35bf71-50fd-48fa-9a6f-\
f9b24bc4526e"],

Cell["\<\
(*relate rgb colors to indices*)
z=Length[s];
colorlist=Table[ If[Mod[i,2]==0,
\tRGBColor[ .2,.2,i/z ],
\t\tRGBColor[ i/z,.2,.2 ]], {i,z}];\
\>", "Input",
 AspectRatioFixed->
  True,ExpressionUUID->"187562c0-04a7-4f92-a12d-1af280121ca5"],

Cell["\<\
(*Or, use Hue.*)
z=Length[s];
colorlist=Table[ Hue[ i/z, 1, 1-(i/z)], {i,z}];\
\>", "Input",
 AspectRatioFixed->
  True,ExpressionUUID->"b27ff4a8-59fe-4b4b-88ff-a8763b2dc55b"],

Cell["\<\
(*relate Hue to indices*)
z=Length[s];
colorlist=Table[ If[Mod[i,2]==0 || Mod[i,5]==0,
\tHue[ i/z, 1, 1-(i/(z))],
\t\tHue[ i/z, 1, (i/z)]], {i,z}];\
\>", "Input",ExpressionUUID->"3225898f-d311-4735-8a24-d0404dd14c1b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "if", " ", "the", " ", "number", " ", "of", " ", "colors", " ", "needed", 
    " ", "is", " ", "10", " ", "or", " ", "less"}], "*)"}], 
  RowBox[{
   RowBox[{"colorlist", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"RGBColor", "[", 
       RowBox[{"1", ",", ".25", ",", ".25"}], "]"}], ",", 
      RowBox[{"RGBColor", "[", 
       RowBox[{".25", ",", ".25", ",", "1"}], "]"}], ",", 
      RowBox[{"RGBColor", "[", 
       RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
      RowBox[{"RGBColor", "[", 
       RowBox[{".5", ",", ".5", ",", ".5"}], "]"}], ",", 
      RowBox[{"RGBColor", "[", 
       RowBox[{"1", ",", "0", ",", "1"}], "]"}], ",", 
      RowBox[{"RGBColor", "[", 
       RowBox[{".5", ",", "0", ",", "0"}], "]"}], ",", 
      RowBox[{"RGBColor", "[", 
       RowBox[{"0", ",", "0", ",", ".5"}], "]"}], ",", 
      RowBox[{"RGBColor", "[", 
       RowBox[{".5", ",", ".5", ",", "0"}], "]"}], ",", 
      RowBox[{"RGBColor", "[", 
       RowBox[{".5", ",", "0", ",", ".5"}], "]"}], ",", 
      RowBox[{"RGBColor", "[", 
       RowBox[{"0", ",", ".5", ",", "0"}], "]"}]}], "}"}]}], ";"}]}]], "Input",\
ExpressionUUID->"edc9bc24-2907-4f4e-ab9e-7a6976c72780"],

Cell["\<\
(*Or, assemble a list of random colors of the proper length.*)
colorlist=Table[RGBColor[Random[Real,{0,1}],
\t\tRandom[Real,{0,1}],
\t\tRandom[Real,{0,1}]],{Length[s]}];\
\>", "Input",
 AspectRatioFixed->
  True,ExpressionUUID->"911d4117-21b8-4523-8b90-30ea85827be3"],

Cell[TextData[StyleBox["Display Colored Polygons",
 FontSize->18]], "Text",ExpressionUUID->"b24eca91-9b81-4957-974f-16555b666d72"],

Cell[TextData[{
 "xaq=Graphics3D[\n{EdgeForm[],\n\tTable[ {SurfaceColor[colorlist[[i]],",
 StyleBox["GrayLevel[.5], 5", "Input"],
 " ],\n\t\tPolygon /@ s[[ i ]]}, {i,Length[s]}]\n}];\n\t\nShow[xaq,\n\
LightSources -> \n   {\n   {{-1,0,2}, RGBColor[1, 1, 1]},\n   {{1,1,0}, \
RGBColor[1, 1, 1]}\n   },\nBoxed->False,\nBackground->GrayLevel[0],\n\
ViewPoint->2.25*unit[ {-5,-2,0} ] ];"
}], "Input",
 AspectRatioFixed->
  True,ExpressionUUID->"bbe0ecaa-39c1-49f5-a826-40eeb69337d1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Ruled Surfaces", "Section",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"8539df40-f458-46da-b450-335a918940fd"],

Cell["\<\
The curved, spiraling surfaces between the ridges of spirallohedra are \
approximations of ruled surfaces, which seem related to helicoids. Below, an \
illustration.\
\>", "Text",ExpressionUUID->"ae22a036-ac65-4329-b02a-8598d36babf8"],

Cell["\<\
n=24;
pitch=35.2643;
k=4;
a=Show[
{RSruled[ spiverts[n, k, pitch] ],
ridges[n, k, pitch],
Spirallohedron[n, k, pitch]},
Boxed->False,
ViewPoint->{0,-2,0}
];\
\>", "Input",ExpressionUUID->"d34dd73c-7215-49b4-b64a-0a292adabdd5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Arrays of k-gons; the Vertical Lines", "Section",ExpressionUUID->"23752e42-cd19-40f3-864f-265b443d2de8"],

Cell["\<\
3- and 4-armed pirallohedra close-pack; very well; but so also do their \
suites of k-gons fit together. Below, a suite of k-gons is found, the same \
translation vectors are found by the same methods, an array of lattice points \
constructed, and the k-gonal suite is translated into the lattice positions.\
\>", "Text",ExpressionUUID->"e8d0b34f-bb9d-4260-a96d-d7902c91dc81"],

Cell["\<\
(*choose n, 3- or 4-armed spirallohedron*)
n=24;k=3;pitch=35.2643;

(*display spirallohedron*)
Show[a=Spirallohedron[n,k],
Axes->True,
ViewPoint->2.25*unit[ {0,0,1}]
];

(*get corners of k-gons*)
gonverts=RSgons[spiverts[n,k,pitch]];

(*Make all k-gons of ruled surface*)
allbases=Table[
Polygon[convexhull[
gonverts[[k]]
]],
{k,1,n-1}];
Show[ab=Graphics3D[ allbases ],
PlotRange->All,
ViewPoint->2.25*unit[ {0,0,1} ]
];\
\>", "Input",ExpressionUUID->"b3a63408-c786-40cf-acf4-7748da07edb5"],

Cell["\<\
(*get translation vectors \"t\"*)

faces=parse[a];(*get faces*)
c1=Map[ Chop[cent[#] ]&, faces];(*get face centers*)
(*now get cross products for all faces*)
c2=Map[ Chop[ Cross[ (#[[2]]-#[[1]]), (#[[3]]-#[[2]]) ] ]&, faces];

(*find indices of pairs of faces with opposite normals*)
z1=Table[
{k,Flatten[ Position[c2, x_ /; Chop[ x+c2[[k]] ]=={0,0,0},{1}, 1 ] ][[1]]},
{k,Length[c2]}];

Print[\"Total number of faces is \", Length[faces]]
dex=Union[ Sort /@ z1 ];(*unique pairs of indices, half number of faces*)

Print[\"Number of opposite pairs is \", Length[dex]];

q=Map[c1[[ #[[1]] ]]-c1[[ #[[2]] ]]&, z1];(*subtract every face center from \
its opposite*)

vectrans=vunion[q];(*discard duplicate translation vectors*)
Print[\"Total number of trans vectors is \", Length[vectrans]]

t=Union[ vectrans, SameTest->(Chop[#1+#2]=={0,0,0}&)];(*discard collinears*)
Print[\"Discarding opposites, number of trans vectors is \", Length[t]]
\
\>", "Input",ExpressionUUID->"3dfcc0dc-5cea-437f-b928-ca83b2bbe8df"],

Cell[TextData[StyleBox["Make Array, Display",
 FontSize->18]], "Text",ExpressionUUID->"16f43296-a4f0-4b43-b1bb-da70c2b35992"],

Cell["\<\
(*make lattice, translate copies of k-gon suites*)
latticepoints=makearray[{5,5,5},t];(*make an array of {i*j*k} points for \
translation*)
pack=Map[trans[ab,#]&, latticepoints];(*can explode by writing \
\"1.1*latticepoints\"*)
Print[\"There are \",Length[f1=parse[pack]],\" faces altogether.\"]

(*display array*)
Show[zaq=Graphics3D[{EdgeForm[RGBColor[1,1,0]],Polygon /@ f1}],
Boxed->False,
Background->RGBColor[0,0,.3],
ViewPoint->2.25*unit[ {0,-1,1} ]];\
\>", "Input",ExpressionUUID->"152a71ca-ccea-4983-8aee-f59d3048e061"],

Cell[TextData[StyleBox["Truncate Array, Display",
 FontSize->18]], "Text",ExpressionUUID->"72a37ab8-4d2e-4fee-b6ed-239e520b136a"],

Cell["\<\
(*select all polygons with z coordinate less than 5.25*)
region=Select[f1, (Abs[ #[[1,3]] ]<5.25)&];
Length[region]

(*display array*)
Show[zaq=Graphics3D[{EdgeForm[RGBColor[1,1,0]],Polygon /@ region}],
Boxed->False,
Background->RGBColor[0,0,.3],
ViewPoint->2.25*unit[ {0,-1,1} ]];\
\>", "Input",ExpressionUUID->"7bdb7f62-0822-4321-9cf1-9e4631718f97"],

Cell[TextData[StyleBox["Vertical Lines",
 FontSize->18]], "Text",ExpressionUUID->"715fc608-4fd1-4e92-9725-1add2c2fe64f"],

Cell[TextData[{
 "The mysterious \[OpenCurlyDoubleQuote]vertical \
lines\[CloseCurlyDoubleQuote] may be seen for all ",
 StyleBox["n",
  FontSlant->"Italic"],
 " even, and all ",
 StyleBox["k",
  FontSlant->"Italic"],
 ", by setting ",
 StyleBox["n",
  FontSlant->"Italic"],
 " and ",
 StyleBox["k",
  FontSlant->"Italic"],
 " to desired values in the first cell below. These lines connect the \
vertices of the \[OpenCurlyDoubleQuote]equatorial\[CloseCurlyDoubleQuote] \
faces of the \[OpenCurlyDoubleQuote]parent\[CloseCurlyDoubleQuote] polar \
zonohedron. The transformation polar zonohedron->spirallohedra sends a \
\[OpenCurlyDoubleQuote]horizontal\[CloseCurlyDoubleQuote] cycle of ",
 StyleBox["n",
  FontSlant->"Italic"],
 " equatorial faces into ",
 StyleBox["k",
  FontSlant->"Italic"],
 " vertical lines of ",
 StyleBox["n",
  FontSlant->"Italic"],
 "/",
 StyleBox["k",
  FontSlant->"Italic"],
 " of these same faces. I presume the same vertical lines exist for ",
 StyleBox["n",
  FontSlant->"Italic"],
 " odd, but since the equator of the parent polar zonohedron crosses two \
cycles of ",
 StyleBox["n",
  FontSlant->"Italic"],
 " equal faces, the vertical lines likewise will span two almost-vertical \
stacks of the corresponding faces in the spirallohedron."
}], "Text",ExpressionUUID->"d7dfed2d-7728-460d-a9af-c8dab645a672"],

Cell["\<\
(*choose n even*)
n=12;k=3;pitch=35;

(*get corners of k-gons*)
gonverts=RSgons[spiverts[n,k,pitch]];

(*n even*)
j=n/k;
goncount=((j/2)*(k-2));
 q2=Join[ {gonverts[[ goncount ]]},{ 
      RotateRight[ gonverts[[ (n-goncount) ]] ]} ]; 
q3=Graphics3D[{AbsoluteThickness[4],Line/@Transpose[q2]}];

(*display spirallohedron*)
Show[{a=Spirallohedron[n,k],q3},
Axes->True,
ViewPoint->2.25*unit[ {0,-2,1}]
];


(*Make all k-gons of ruled surface*)
allbases=Table[
Polygon[convexhull[
gonverts[[k]]
]],
{k,1,n-1}];
Show[{q3,ab=Graphics3D[ allbases ]},
PlotRange->All,
ViewPoint->2.25*unit[ {0,-2,1} ]
];\
\>", "Input",ExpressionUUID->"6bc39e8e-2343-490b-9f3a-2022dfc7e9d1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Plane Sections", "Section",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"ce0c19cc-9f97-43b4-abfc-379161f7c0bb"],

Cell["\<\
Needs work!! I have my doubts about which of my several versions of the \
section function to use. The sections sometimes are not accurate. I believe \
that this is because my methods assume that each section of a spirallohedron \
is just one polygon, when in fact a section can be two polygons.

To see an example of such failure, set

a=Spirallohedron[12,3];
v1=N[unit[ {0,-1,0} ]];(*line perpendicular to plane of section*)
dist=N[1*Sqrt[3]];(*distance of sectioning plane from origin*)\
\>", "Text",ExpressionUUID->"ac8de3f2-4a5b-48eb-995d-715148958ecd"],

Cell[CellGroupData[{

Cell["Just One Spirallohedron", "Subsection",ExpressionUUID->"770dd729-973c-4b54-a203-3357985fe98a"],

Cell["\<\
(*create spirallohedron 'a'*)
Show[a=Spirallohedron[12,3],
Axes->True,
ViewPoint->{0,0,2}];\
\>", "Input",ExpressionUUID->"228e4a6c-c3d3-4191-bc0d-b89aeb8aa9d0"],

Cell["\<\
v1=N[unit[ {0,0,1} ]];(*line perpendicular to plane of section*)
dist=N[1.5];(*distance of sectioning plane from origin*)\
\>", "Input",ExpressionUUID->"3c54b78d-1c4e-4d5b-8c04-c210a42d59ae"],

Cell["\<\
(*get the faces and truncated faces to one side of the section*)
f=Chop[Cases[a,Polygon[x_]:>x,Infinity]];
s1=Table[
e1=tosegs[ f[[k]] ];
q1=vunion[Select[Flatten[e1,1], Chop[(#.v1)-dist]>=0&]];(*all on one side of \
plane*)
a1=Select[Map[section[#, dist, v1 ]&, e1 ], VectorQ[#]&];
b1=vunion[ Join[q1,a1] ];(*it was necessary to discard duplicates*)
If[Length[b1]>2, Polygon[convexhull[ b1 ]], {}],
{k,Length[f]}];\
\>", "Input",ExpressionUUID->"906ac58d-0ae8-4a17-b334-84b620b04b5b"],

Cell["\<\
(*the truncated spirallohedron*)
Show[spirallochunk=Graphics3D[ Cases[s1,Polygon[x_],Infinity] ],
PlotRange->All,
ViewPoint->2.25*unit[ -v1 ]
];\
\>", "Input",ExpressionUUID->"b353c7f4-be51-48ee-bb63-1b12a66723ab"],

Cell["\<\
(*now get the often non-convex section itself*)
f=Chop[Cases[a,Polygon[x_]:>x,Infinity]];

segments=Cases[Table[
e1=tosegs[ f[[k]] ];
a1=vunion[ Chop[Select[Map[section[#, dist, v1 ]&, e1 ], VectorQ[#]&]] ],
{k,Length[f]}],
{{_,_,_},{_,_,_}}];

If[Length[segments]>2,

segverts=Chop[N[vunion[ Flatten[segments,1] ]]];

z1=Table[
Flatten[
\tJoin[
\tPosition[segverts, x:{_,_,_} /; Chop[x-segments[[k,1]]]=={0,0,0} ],
\tPosition[segverts, x:{_,_,_} /; Chop[x-segments[[k,2]]]=={0,0,0} ]
\t],
1],
{k,Length[segments]}];

z2=Join[z1,Map[Reverse[#]&, z1] ];

beg=z2[[1]];
r=Table[
a1=Join[beg, Flatten[Select[z2,#[[1]]==beg[[2]] && #[[2]] != beg[[1]]&],1]];
beg=Take[a1,-2];
a1,
{Length[z1]}];

p=Join[ r[[1,{1,2}]], Map[Last[#]&, Drop[r,-2] ] ];
s2=Polygon[ Map[segverts[[#]]&, p] ] ];(*end If*)\
\>", "Input",ExpressionUUID->"d589eca1-60a4-47c4-8314-76020b66e5c1"],

Cell["\<\
(*split into triangles and remove all edges*)
spirallosect=Graphics3D[ {EdgeForm[], Polygon /@ toTriangles[ s2[[1]] ]}];
Show[spirallosect,
PlotRange->All,
Boxed->False,
ViewPoint->2.25*unit[ -v1 ]
];\
\>", "Input",ExpressionUUID->"4b097021-7edc-450f-b1e0-cb2f439007c8"],

Cell["\<\
Show[{spirallochunk,spirallosect},
PlotRange->All,
Boxed->False,
ViewPoint->2.25*unit[ v1 ]
];\
\>", "Input",ExpressionUUID->"9b8ca2c5-bbbc-4a00-a497-7c0b9b3d4702"]
}, Open  ]],

Cell[CellGroupData[{

Cell["An Array of  Spirallohedra", "Subsection",ExpressionUUID->"e6c17980-a83a-4bdb-82c4-3e72d47bdddb"],

Cell["\<\
(*create spirallohedron 'a'*)
Show[a=Spirallohedron[12,3],
Axes->True,
ViewPoint->{0,0,2}];\
\>", "Input",ExpressionUUID->"f52d0c34-374c-41e7-b6ac-7ad06fb0c2a7"],

Cell["\<\
(*find translation vectors*)

faces=Chop[a[[1]]] /.Polygon[x_]:>x;(*get faces*)
c1=Map[ Chop[cent[#] ]&, faces];(*get face centers*)
s1=Map[ tosegs[#]&, faces];(*get all edges*)

(*now find face normals*)
c2=Map[ Chop[ Cross[ (#[[1,2]]-#[[1,1]]), (#[[2,2]]-#[[2,1]]) ] ]&, s1];

(*find pairs of faces with opposite normals*)
z1=Table[
p3=Flatten[ Position[c2, x_ /; Chop[ x+c2[[k]] ]=={0,0,0},{1} ] ];
c1[[k]]-First@c1[[p3]],(*a vector of translation*)
{k,Length[c2]}];

(*discard coincident and collinear translation vectors*)
t=Union[ vunion[z1], SameTest->(Chop[Cross[#1, #2]]=={0,0,0}&)]
Length[t]\
\>", "Input",ExpressionUUID->"2dc7f43b-a750-448c-9f58-d8689c0a7e29"],

Cell["\<\
latticepoints=makearray[{2,2,2},t];(*make an array of {i*j*k} points for \
translation*)
pack=Map[trans[a,#]&, 1.1*latticepoints];(*can explode by writing \
\"1.1*latticepoints\"*)
Print[\"There are \",Length[f1=parse[pack]],\" faces altogether.\"]
Print[\"There are \",Length[ f2=dePair[f1] ],\" exterior faces.\"]\
\>", "Input",ExpressionUUID->"ff0ad7ca-8232-4289-9eaf-d6222f6e8860"],

Cell["\<\
(*
Cross[ unit[ t[[1]] ], unit[ t[[2]] ] ](*use this to get section \
perpendicular to two translation vectors*)
*)\
\>", "Input",ExpressionUUID->"d462e7ac-5eb0-4d5d-9405-278943f5253d"],

Cell["\<\
v1=N[ unit[Cross[ unit[ t[[1]] ], unit[ t[[3]] ] ] ] ];(*line perpendicular \
to plane of section*)
dist=3; (*distance of sectioning plane from origin*)\
\>", "Input",ExpressionUUID->"599bdeb3-041b-4962-b207-e0cb3ef3453f"],

Cell["\<\
tot=Table[(*OK all this does is get all polyhedra and polygons to one side of \
section*)
f=Chop[Cases[pack[[j]],Polygon[x_]:>x,Infinity]];
Table[
e1=tosegs[ f[[k]] ];
q1=vunion[Select[Flatten[e1,1], Chop[(#.v1)-dist]>=0&]];(*all on one side of \
plane*)
a1=Select[Map[section[#, dist, v1 ]&, e1 ], VectorQ[#]&];
b1=vunion[ Join[q1,a1] ];(*it was necessary to discard duplicates*)
If[Length[b1]>2, Polygon[convexhull[ b1 ]], {}],
{k,Length[f]}],
{j,Length[pack]}];\
\>", "Input",ExpressionUUID->"03c5727b-4c44-4f68-9c25-88c23813832e"],

Cell["\<\
Show[zaq=Graphics3D[ Cases[tot,Polygon[x_],Infinity] ],
PlotRange->All,
ViewPoint->2.25*unit[ -v1 ]
];\
\>", "Input",ExpressionUUID->"379470f6-eee2-43ba-b418-a84afacf2924"],

Cell["\<\
pat=Table[(*and now this intricate piece of work gets the (possibly \
non-convex) sections themselves*)
f=Chop[Cases[pack[[j]],Polygon[x_]:>x,Infinity]];

segments=Cases[Table[
e1=tosegs[ f[[k]] ];
a1=vunion[ Chop[Select[Map[section[#, dist, v1 ]&, e1 ], VectorQ[#]&]] ],
{k,Length[f]}],
{{_,_,_},{_,_,_}}];

If[Length[segments]>2,

segverts=Chop[N[vunion[ Flatten[segments,1] ]]];

z1=Table[
Flatten[
\tJoin[
\tPosition[segverts, x:{_,_,_} /; Chop[x-segments[[k,1]]]=={0,0,0} ],
\tPosition[segverts, x:{_,_,_} /; Chop[x-segments[[k,2]]]=={0,0,0} ]
\t],
1],
{k,Length[segments]}];

z2=Join[z1,Map[Reverse[#]&, z1] ];

beg=z2[[1]];
r=Table[
a=Join[beg, Flatten[Select[z2,#[[1]]==beg[[2]] && #[[2]] != beg[[1]]&],1]];
beg=Take[a,-2];
a,
{Length[z1]}];

p=Join[ r[[1,{1,2}]], Map[Last[#]&, Drop[r,-2] ] ];
Polygon[ Map[segverts[[#]]&, p] ] ](*end If*),
{j,Length[pack]}];
Length[ sect=Cases[pat,Polygon[x_]] ]\
\>", "Input",ExpressionUUID->"0a2bcdd9-1217-4627-9273-6d1e7c10d5c1"],

Cell["\<\
(*so, split into triangles and remove all edges*)
poly=Polygon /@ Flatten[ Map[toTriangles[#]&, \
Cases[sect,Polygon[x_]:>x,Infinity] ], 1];

Show[Graphics3D[ {EdgeForm[], poly} ],
PlotRange->All,
Boxed->False,
ViewPoint->2.25*unit[ -v1 ]
];

Show[{Graphics3D[ {EdgeForm[], poly} ],zaq},
PlotRange->All,
Boxed->False,
ViewPoint->2.25*unit[ -v1 ]
];\
\>", "Input",ExpressionUUID->"dacc0589-df25-4dd3-8006-edb8549c1d0f"],

Cell["\<\
(*everything below has to do with making prism-things and seems broken!*)
allsegs=Map[tosegs[#]&, Cases[sect,Polygon[x_]:>x,Infinity] ];\
\>", "Input",ExpressionUUID->"65f99b30-e747-48ce-b6b3-7640f2448c79"],

Cell["tops=Flatten[allsegs,1];", "Input",ExpressionUUID->"0540f329-0a28-4908-957a-4f5f89b56f61"],

Cell["bots=Map[{{0,0,-10.25},{0,0,-10.25}}+#&, tops ];", "Input",ExpressionUUID->"4fc4e7bb-521c-4c1c-b123-7d900dfea7b0"],

Cell["lats=MapThread[Join[Reverse[#1],#2]&, {tops, bots} ];", "Input",ExpressionUUID->"10e8c7ee-2549-4995-a346-1df0ccc74960"],

Cell["\<\
Show[zaq=Graphics3D[
{Cases[tot, Polygon[x_],Infinity],
Polygon /@ lats,
{EdgeForm[],SurfaceColor[RGBColor[1,1,0]],
Polygon /@ Flatten[poly,1] },
{GrayLevel[0],AbsoluteThickness[1],Line /@ Flatten[allsegs,1]}
}
],
PlotRange->All,
Boxed->False,
ViewPoint->2.25*unit[ {-1,0,1.5} ]
];\
\>", "Input",ExpressionUUID->"c9eaa957-dfb0-4159-a76e-964c372ae90d"],

Cell["\<\
Show[zaq,
Boxed->False,
Background->GrayLevel[0],
(*ViewVertical->unit[{0,-1,0}],*)
ViewPoint->2.25*unit[ {0,-2,1.5} ] ];\
\>", "Input",ExpressionUUID->"ac50fe89-84aa-4990-bfd3-368e87d9ef21"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Volume I", "Section",ExpressionUUID->"e501022a-627e-4200-9a30-242089aa329a"],

Cell["Clear[n,k]", "Input",ExpressionUUID->"4b35024d-ab67-4a7e-b54a-50bdab531022"],

Cell[TextData[{
 "Briefly, let the volume of a ",
 "k",
 "-armed spirallohedron be denoted ",
 Cell[BoxData[
  SubscriptBox["V", "k"]],ExpressionUUID->
  "e443bdc4-23c0-4391-a09c-61f7bd93330c"],
 ", the volume of the circumscribing n-merous polar zonohedron, ",
 Cell[BoxData[
  SubscriptBox["V", "n"]],ExpressionUUID->
  "e6654d97-cd85-4f1a-af66-cf047591dddd"],
 ", the area of a regular k-gon, ",
 Cell[BoxData[
  SubscriptBox["A", "k"]],ExpressionUUID->
  "bbe8c736-e551-4078-81d0-fdc778d5b061"],
 ", and the area of the circumscribing regular n-gon, ",
 Cell[BoxData[
  SubscriptBox["A", "n"]],ExpressionUUID->
  "4208232a-00da-4fb8-bcb3-acfcd7003d57"],
 ", such that k>2 and k is a factor of n; then the volume of the \
spirallohedron is"
}], "Text",ExpressionUUID->"a7c900a3-3dc9-4e76-a195-4edd08da46b8"],

Cell[BoxData[
 FormBox[
  StyleBox[
   RowBox[{
    SubscriptBox["V", "k"], "=", 
    RowBox[{
     FractionBox[
      SubscriptBox["A", "k"], 
      SubscriptBox["A", "n"]], "\[CenterDot]", 
     SubscriptBox["V", "n"]}]}],
   FontSize->24], TraditionalForm]], "Input",
 Editable->False,ExpressionUUID->"f4c2bd91-1c29-4ee5-9aa0-3b91e1c5a17e"],

Cell[CellGroupData[{

Cell["Prologue", "Subsection",ExpressionUUID->"7ac4f743-3f6b-404c-9782-63195419086a"],

Cell[TextData[{
 "The volume of the general polar zonohedron of ",
 StyleBox["n",
  FontWeight->"Bold"],
 " directions which edges occur, edge length ",
 StyleBox["edge",
  FontWeight->"Bold"],
 " and angle-between-edges-and-a-plane-orthogonal-to-the-symmetry-axis ",
 StyleBox["pitch",
  FontWeight->"Bold"],
 " is"
}], "Text",ExpressionUUID->"277a5ffc-64fa-4bce-bb13-a34e5423f66c"],

Cell[BoxData[
 FormBox[
  StyleBox[
   RowBox[{
    FractionBox["1", "2"], " ", 
    SuperscriptBox["edge", "3"], " ", 
    SuperscriptBox["n", "2"], " ", 
    RowBox[{"cot", "(", 
     FractionBox["\[Pi]", "n"], ")"}], " ", 
    RowBox[{
     SuperscriptBox["cos", "2"], "(", "pitch", ")"}], " ", 
    RowBox[{"sin", "(", "pitch", ")"}]}],
   FontWeight->"Bold"], TraditionalForm]], "Text",ExpressionUUID->"e9b542dc-\
63ec-4bb0-9834-adfc602d7fa5"],

Cell[TextData[{
 "What is the volume of a k-armed spirallohedron? Perhaps we should adopt the \
usage, an {n,k}-armed spirallohedron, since there are still ",
 StyleBox["n",
  FontWeight->"Bold"],
 " directions in which edges occur. Then it is true that an {n,k}-armed \
spirallohedron may always be inscribed within an {n}-polar zonohedron of the \
same edge length and pitch, so that certain ",
 StyleBox["k",
  FontWeight->"Bold"],
 " sets of edges coincide, and true also that for any given polar zonohedron, \
if one or more related k-armed spirallohedra exist, they have, at any rate, a \
lesser volume.\n\nIn fact, spirallohedra can be said to arise by subtracting \
rhombic hexahedra from the exteriors of polar zonohedra. The fewer the \
\[OpenCurlyDoubleQuote]arms,\[CloseCurlyDoubleQuote] the less the volume. For \
the special case when ",
 StyleBox["k",
  FontWeight->"Bold"],
 " equals ",
 StyleBox["n/2",
  FontWeight->"Bold"],
 ", a simple expression gives the volume of the spirallohedron:"
}], "Text",ExpressionUUID->"1fb86e63-6913-4c1e-aa42-ae495649c12a"],

Cell[BoxData[
 FormBox[
  RowBox[{
   FractionBox["1", "2"], " ", 
   SuperscriptBox["edge", "3"], " ", 
   SuperscriptBox["n", "2"], " ", 
   RowBox[{"cot", "(", 
    FractionBox["\[Pi]", "n"], ")"}], " ", 
   StyleBox[
    RowBox[{"cos", "(", 
     FractionBox["\[Pi]", 
      FractionBox["n", "2"]], ")"}],
    FontWeight->"Bold"], " ", 
   RowBox[{
    SuperscriptBox["cos", "2"], "(", "pitch", ")"}], " ", 
   RowBox[{"sin", "(", "pitch", ")"}]}], TraditionalForm]], "Text",ExpressionU\
UID->"c6b4c32d-ccb0-4967-8a08-679140ba40f1"],

Cell["\<\
The new term is highlighted.

I began efforts to find an expression giving the volume of the general \
{n,k}-armed spirallohedron as follows. In the example below, a spirallohedron \
is constructed, its series of k-gons is also constructed, and plane sections \
are taken at each level in a cumbersome exercise, so that a sort of \
\[OpenCurlyDoubleQuote]antiprismoid\[CloseCurlyDoubleQuote] is cut out from \
the rest of the spirallohedron (or a right regular k-gonal pyramid, from each \
pole), and the appropriate k-gonal bases or base added. Then, treating these \
as convex polyhedra, although they are not, their volumes are found. Finally, \
the volume is compared to that of the related polar zonohedron, giving a ratio.

In the next subsection, results are tabulated. There were many unsolved \
ratios.\
\>", "Text",ExpressionUUID->"5cb577aa-f737-4179-ac8e-149d1d1c4f17"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example of method to measure volume", "Subsection",ExpressionUUID->"68de1bd1-65dc-4919-a9a3-d0b39f58374d"],

Cell["\<\
This shows the method by which I split the spirallohedra into chunks, and \
summed their volumes.\
\>", "Text",ExpressionUUID->"0f5d9bb2-4609-435d-8dc7-b7d3eba1a586"],

Cell["\<\
(*create spirallohedron 'a'*)
n=10;pitch=35.2643;j=2;k=5;
Show[a=Spirallohedron[n,k],
Axes->True,
ViewPoint->{0,0,2}];\
\>", "Input",ExpressionUUID->"baa54974-521c-42b9-b32c-8b298fe396c2"],

Cell["\<\
(*get vertices*)
verts=vunion[Flatten[ parse[a], 1]];
z=Union[ Map[#[[3]]&, verts], SameTest->(Chop[#1-#2]==0&) ]
Length[z]

(*get corners of k-gons*)
gonverts=Reverse[RSgons[spiverts[n,k,pitch]]];
Length[gonverts]

(*Make all k-gons of ruled surface*)
allbases=Table[
Polygon[convexhull[
gonverts[[k]]
]],
{k,n,2,-1}];
Show[zaq=Graphics3D[ allbases ],
PlotRange->All,
ViewPoint->2.25*unit[ {0,-1,0} ]
];
Length[allbases]\
\>", "Input",ExpressionUUID->"261e499e-597b-4e68-9eb9-676bd794bc05"],

Cell["\<\
v1=N[unit[ {0,0,1} ]];(*vector perpendicular to plane of section*)

layers=Table[

mydist=z[[ i ]];(*corresponds to allbases[[ stage-1 ]]*)

f=Chop[parse[a]];(*get all faces*)

t=Table[(*make a list of polygons to one side of section*)
e1=tosegs[ f[[k]] ];(*make polygon into list of segments*)

(*all on one side of plane*)
q1=vunion[Select[Flatten[e1,1], Chop[(#.v1)-mydist]>=0&]];

(*now get actual segment sections (points)*)
a1=Chop[ Select[Map[section[#, mydist, v1 ]&, e1 ], VectorQ[#]&] ];
(*Print[ Length[q1],Length[a1] ];what is going on?*)

b1=vunion[ Join[q1,a1] ];(*it was necessary to discard duplicates*)

(*avoid degenerate cases, make polygon*)
If[Length[b1]>2, Polygon[convexhull[ b1 ]], {}],
{k,Length[f]}];

poly1=(*now get non-empty, Polygon members of list*)
Cases[t,Polygon[x_],Infinity];


mydist=z[[ i+1 ]];
f=Chop[parse[poly1]];(*get all faces*)

t=Table[(*make a list of polygons to one side of section*)
e1=tosegs[ f[[k]] ];(*make polygon into list of segments*)

(*all on one side of plane*)
q1=vunion[Select[Flatten[e1,1], Chop[(#.v1)-mydist]<=0&]];

(*now get actual segment sections (points)*)
a1=Chop[ Select[Map[section[#, mydist, v1 ]&, e1 ], VectorQ[#]&] ];
(*Print[ Length[q1],Length[a1] ];what is going on?*)

b1=vunion[ Join[q1,a1] ];(*it was necessary to discard duplicates*)

(*avoid degenerate cases, make polygon*)
If[Length[b1]>2, Polygon[convexhull[ b1 ]], {}],
{k,Length[f]}];

poly2=(*now get non-empty, Polygon members of list*)
Cases[t,Polygon[x_],Infinity];

(*Show[Graphics3D[ {poly2} ],
PlotRange->All,
ViewPoint->2.25*unit[ {0,-2,0} ]
];*)
poly2,
{i,n,1,-1}];\
\>", "Input",ExpressionUUID->"9424ad85-2f92-4254-8afa-4d4ab6745bdc"],

Cell["\<\
h1=Join[layers[[n]], {allbases[[1]]} ];(*pyramid*)
h12=Join[layers[[1]], {allbases[[n-1]]} ];(*pyramid*)
h=Table[(*antiprismoid chunks*)
Join[layers[[k]], {allbases[[n-k]],allbases[[n-k+1]]} ],
{k,2,Length[layers]-1}];

polychunks=Join[{h1},h,{h12}];(*assemble all chunks*)

Show[Graphics3D[ polychunks ],
PlotRange->All,
ViewPoint->2.25*unit[ {0,0,-1} ]
];\
\>", "Input",ExpressionUUID->"7b0c792c-f4af-4942-bd2a-8d897858151d"],

Cell["\<\
(*show chunks exploded apart slightly*)
chunkcents=Chop[Map[cent[vunion[ Flatten[ parse[ # ],1]]]&, polychunks]];
explodechunks=MapThread[trans[#1,.2*#2]&, {polychunks, chunkcents}];
Show[Graphics3D[ explodechunks ],
PlotRange->All,
ViewPoint->2.25*unit[ {0,-1,0} ]
];\
\>", "Input",ExpressionUUID->"1ca18d71-ff42-4662-b470-00925cc07fdf"],

Cell["\<\
(*volume of the circumscribing polar zonohedron*)
Print[\"n=\",n]
Print[\"j=\",j]
Print[\"k=\",k]
edge=1;(*of unit edge length*)

pzvol = N[(edge^3)*(n^2)*(.5)*(Cot[Pi/n])*(Cos[Degree pitch]^2)*(Sin[Degree \
pitch])];
Print[\"Volume of circumscribing polar zonohedron is \", pzvol];

vols=Table[(*I am doubtful that the volumes are right*)
hullvol[ polychunks[[k]] ],
{k,Length[polychunks]}];

spivol=Plus@@vols;
Print[\"Volume of spirallohedron is \", spivol];

rv1=spivol/pzvol;
rv2=pzvol/spivol;
voldiff=pzvol-spivol;

Print[\"Ratio of spirallohedron to polar zonohedron is \", rv1];
Print[\"Difference between spirallohedron and polar zonohedron is \", voldiff];
Print[\"Volume of each of the k subtracted regions of hexahedra is \", \
subhex=voldiff/k];
Print[\"Ratio of a hexahedral region to polar zonohedron is \", subhex/pzvol];\
\>", "Input",ExpressionUUID->"4e63fddf-5725-42f8-af13-957def2d61bb"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Table of Initial Results", "Subsection",ExpressionUUID->"759d852c-853f-4ab6-80bb-2976ae9e173a"],

Cell["\<\
These were the results obtained by splitting spirallohedra into chunks, and \
then summing the volumes of the chunks. The third column is the volume ratio, \
spirallohedron/polar zonohedron; the fourth column gives the expression \
found, if any, which gave that ratio.\
\>", "Text",ExpressionUUID->"3cc88707-4e8b-424f-a44a-261c04159d52"],

Cell[OutputFormData["\<\
{{{\"n=6, 3-armed\", 0.5, \"Cos[Pi/3]\"}}, {{\"n=8, 4-armed\", 0.707, \
\"Cos[Pi/4]\"}}, 
 {{\"n=9, 3-armed\", 0.449099, \"Sqrt[1/12]/Sin[2Pi/9]\"}}, 
 {{\"n=10, 5-armed\", 0.809, \"Cos[Pi/5]\"}}, 
 {{\"n=12, 3-armed\", 0.433, \"Cos[Pi/6]*Cos[Pi/3]\"}, 
  {\"n=12, 4-armed\", 0.666, \"Cos[Pi/6]*Sqrt[16/27]\"}, 
  {\"n=12, 6-armed\", 0.866, \"Cos[Pi/6]\"}}, 
 {{\"n=14, 7-armed\", 0.900969, \"Cos[Pi/7]\"}}, {{\"n=15, 3-armed\", \
0.425841}, 
  {\"n=15, 5-armed\", 0.77942}}, {{\"n=16, 4-armed\", 0.653281, \
\"Cos[Pi/8]*Cos[Pi/4]\"}, 
  {\"n=16, 8-armed\", 0.92388, \"Cos[Pi/8]\"}}, 
 {{\"n=18, 3-armed\", 0.422015, \"Sqrt[3]/(Sin[2Pi/9]*Cos[Pi/9]*Cos[Pi/3])\"}, 
  {\"n=18, 6-armed\", 0.84403, \"Sqrt[3]/(Sin[2Pi/9]*Cos[Pi/9])\"}, 
  {\"n=18, 9-armed\", 0.939693, \"Cos[Pi/9]\"}}, {{\"n=21, 3-armed\", \
0.419731}, 
  {\"n=21, 7-armed\", 0.884159}}, 
 {{\"n=24, 3-armed\", 0.418258, \"Cos[Pi/12]*Cos[Pi/6]*Cos[Pi/3]\"}, 
  {\"n=24, 4-armed\", 0.643951, \"Cos[Pi/12]*Cos[Pi/6]*Sqrt[16/27]\"}, 
  {\"n=24, 6-armed\", 0.836516, \"Cos[Pi/12]*Cos[Pi/6]\"}, 
  {\"n=24, 8-armed\", 0.910684, \"Cos[Pi/12]*Sqrt[8/9]\"}, 
  {\"n=24, 12-armed\", 0.965926, \"Cos[Pi/12]\"}}, {{\"n=28, 4-armed\", \
0.641994}, 
  {\"n=28, 7-armed\", 0.87838}, {\"n=28, 14-armed\", 0.974928, \
\"Cos[Pi/14]\"}}, 
 {{\"n=42, 3-armed\", 0.415043}, {\"n=42, 6-armed\", 0.830086}, 
  {\"n=42, 7-armed\", 0.874284}, {\"n=42, 14-armed\", 0.970382}, 
  {\"n=42, 21-armed\", 0.9888308, \"Cos[Pi/21]\"}}}\
\>", "\<\
n=6, 3-armed   0.5      Cos[Pi/3]


n=8, 4-armed   0.707    Cos[Pi/4]


n=9, 3-armed   0.449099 Sqrt[1/12]/Sin[2Pi/9]


n=10, 5-armed  0.809    Cos[Pi/5]


n=12, 3-armed  0.433    Cos[Pi/6]*Cos[Pi/3]

n=12, 4-armed  0.666    Cos[Pi/6]*Sqrt[16/27]

n=12, 6-armed  0.866    Cos[Pi/6]


n=14, 7-armed  0.900969 Cos[Pi/7]


n=15, 3-armed  0.425841

n=15, 5-armed  0.77942


n=16, 4-armed  0.653281 Cos[Pi/8]*Cos[Pi/4]

n=16, 8-armed  0.92388  Cos[Pi/8]


n=18, 3-armed  0.422015 Sqrt[3]/(Sin[2Pi/9]*Cos[Pi/9]*Cos[Pi/3])

n=18, 6-armed  0.84403  Sqrt[3]/(Sin[2Pi/9]*Cos[Pi/9])

n=18, 9-armed  0.939693 Cos[Pi/9]


n=21, 3-armed  0.419731

n=21, 7-armed  0.884159


n=24, 3-armed  0.418258 Cos[Pi/12]*Cos[Pi/6]*Cos[Pi/3]

n=24, 4-armed  0.643951 Cos[Pi/12]*Cos[Pi/6]*Sqrt[16/27]

n=24, 6-armed  0.836516 Cos[Pi/12]*Cos[Pi/6]

n=24, 8-armed  0.910684 Cos[Pi/12]*Sqrt[8/9]

n=24, 12-armed 0.965926 Cos[Pi/12]


n=28, 4-armed  0.641994

n=28, 7-armed  0.87838

n=28, 14-armed 0.974928 Cos[Pi/14]


n=42, 3-armed  0.415043

n=42, 6-armed  0.830086

n=42, 7-armed  0.874284

n=42, 14-armed 0.970382

n=42, 21-armed 0.988831 Cos[Pi/21]\
\>"], "Output",
 Editable->False,ExpressionUUID->"4272c847-05aa-465a-8c32-30b443af5999"]
}, Open  ]],

Cell[CellGroupData[{

Cell["The solution is found!", "Subsection",ExpressionUUID->"e53a9cdb-399e-4feb-b3cd-a89facac5429"],

Cell[TextData[{
 "Having failed to discover expressions for some cases, I finally set that \
job aside and considered the broad outlines. The ratios I sought had nothing \
to do with pitch; I had verified this by finding the volumes of various \
spirallohedra for various pitches. Finally it struck me that, just as the \
vertices of a k-armed spirallohedron fall into planes orthogonal to the \
symmetry axis, and the k vertices where these planes intersect the k ridges \
form the corners of a regular k-gon, so also the vertices of the \
circumscribing polar zonohedron lie on those same planes, and form the \
corners of regular n-gons. And, just as the k-armed spirallohedron can be \
inscribed within its related polar zonohedron, so also each k-gon is \
inscribed within its coplanar n-gon.\n\nWhat, then, is the ratio of the area \
of a k-gon to that of its circumscribing n-gon? What is ",
 Cell[BoxData[
  SubscriptBox["A", "k"]],ExpressionUUID->
  "2286dda3-1abe-41b5-aa40-a9df17ad9a6c"],
 "/",
 Cell[BoxData[
  SubscriptBox["A", "n"]],ExpressionUUID->
  "f5357ad8-f6c3-4e26-a902-c80a634f08f5"],
 "?"
}], "Text",ExpressionUUID->"ac8aadc2-5681-451f-b992-12dfe6106823"],

Cell["\<\
A regular n-gon, of unit circumradius, divides into 2n equal-area right \
triangles of hypotenuse 1, base Sin[Pi/n] (half the side of the n-gon) and \
alternate side Cos[Pi/n] (in-radius of the n-gon). Two triangles equal a \
rectangle of sides Sin[Pi/n}, Cos[Pi/n]. Hence the area of the n-gon is \
n*Sin[Pi/n]*Cos[Pi/n].\
\>", "Text",ExpressionUUID->"057ca9a1-7245-41ea-80cc-349d5acda975"],

Cell["\<\
n=12;
k=4;
area1=N[ n*Sin[Pi/n]*Cos[Pi/n] ];
area2=N[ k*Sin[Pi/k]*Cos[Pi/k] ];
Print[\"Ratio of areas, \",k,\"-gon to \",n,\"-gon, is \", area2/area1]
Clear[n,k]\
\>", "Input",ExpressionUUID->"1c0b7568-3d5f-4511-8b00-940faecc7a91"],

Cell[TextData[{
 "The above example gives the ratio of the volume of an n=12, 4-armed \
spirallohedron to the volume of its circumscribing n=12 polar zonohedron, \
which was one of my problematic cases. Testing many other cases, including \
those for which I had found no expression, I found that I obtained the \
identical ratios. Hence, without proof, I think the ratio ",
 Cell[BoxData[
  SubscriptBox["A", "k"]],ExpressionUUID->
  "34bb27bf-2811-4337-a341-b1585a51c71f"],
 "/",
 Cell[BoxData[
  SubscriptBox["A", "n"]],ExpressionUUID->
  "8e6b4bb7-5e9d-49ed-9990-c97ed3c55f9d"],
 " is the key to the volume of the general {n,k}-armed spirallohedron.\n\nIt \
only remained to combine this ratio with my expression giving the volume of \
the general polar zonohedron, that is, to multiply the volume of a polar \
zonohedron by"
}], "Text",ExpressionUUID->"4e3d218b-6de9-4dce-91be-23068288a3c6"],

Cell[BoxData[
 FormBox[
  FractionBox[
   RowBox[{"k", " ", 
    RowBox[{"sin", "(", 
     FractionBox["\[Pi]", "k"], ")"}], " ", 
    RowBox[{"cos", "(", 
     FractionBox["\[Pi]", "k"], ")"}]}], 
   RowBox[{"n", " ", 
    RowBox[{"sin", "(", 
     FractionBox["\[Pi]", "n"], ")"}], " ", 
    RowBox[{"cos", "(", 
     FractionBox["\[Pi]", "n"], ")"}]}]], TraditionalForm]], "Input",Expressio\
nUUID->"eb57d2b1-ccb6-4462-baed-70e3c83daf61"],

Cell[TextData[{
 "Now, we can substitute ",
 StyleBox["k",
  FontSlant->"Italic"],
 "(Sin[2*Pi/",
 StyleBox["k",
  FontSlant->"Italic"],
 "]/2, and similarly for ",
 StyleBox["n",
  FontSlant->"Italic"],
 ", in the expression above.",
 "\nLetting ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " combine terms, sort out identities, and simplify, we obtain an expression \
for the volume of the general ",
 StyleBox["k",
  FontSlant->"Italic"],
 "-armed spirallohedron.",
 "."
}], "Text",ExpressionUUID->"6e444cf0-c982-4b21-95a0-2a9ac7bdba8b"],

Cell["Clear[n,j,k,edge,pitch]", "Input",ExpressionUUID->"f2236f6c-c9c4-4f4b-b9ea-841593fac991"],

Cell["\<\
(*volume polar zonohedron determined by n vectors,
edge length 'edge', complement to angle between edges and symmetry axis \
'pitch'*)

polarvolume=edge^3 * n^2 * 1/2 * Cot[Pi/n] * Cos[pitch]^2 * Sin[pitch]\
\>", "Input",ExpressionUUID->"b9b96615-6dca-448f-ae43-932251b40adc"],

Cell["\<\
(*ratio, area regular k-gon to area circumscribing n-gon*)

polygonratio=((k*Sin[2*Pi/k])/2) / ((n*Sin[2*Pi/n])/2)\
\>", "Input",ExpressionUUID->"51c8339a-b610-4ad6-b0e0-3bc12d748b5c"],

Cell["\<\
(*volume k-armed spirallohedron inscribed with polar zonohedron*)

spiralvolume=FullSimplify[ polygonratio*polarvolume ]\
\>", "Input",ExpressionUUID->"922fda6b-cdd5-4759-b3f8-8c6fcc43094e"],

Cell[TextData[{
 "Hence, volume of {n,k}-armed Rhombic Spirallohedron:\n\n",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     FractionBox["1", "4"], " ", 
     SuperscriptBox["edge", "3"], " ", "k", " ", "n", " ", 
     RowBox[{
      SuperscriptBox["cos", "2"], "(", "pitch", ")"}], " ", 
     RowBox[{
      SuperscriptBox["csc", "2"], "(", 
      FractionBox["\[Pi]", "n"], ")"}], " ", 
     RowBox[{"sin", "(", 
      FractionBox[
       RowBox[{"2", " ", "\[Pi]"}], "k"], ")"}], " ", 
     RowBox[{"sin", "(", "pitch", ")"}]}],
    FontWeight->"Bold"], TraditionalForm]], "Output",ExpressionUUID->
  "0da2a688-c33b-4c6e-bec0-e831679be3cf"]
}], "Text",ExpressionUUID->"22d48e5c-e6c8-4712-88ba-7c144601ae30"],

Cell["\<\
Below, we test this same expression in InputForm. Note that the example\
\[LongDash]a 3-armed, n=9 spirallohedron\[LongDash]is one of my problem \
cases, as seen in the Table of Results subsection, above.\
\>", "Text",ExpressionUUID->"3cb011fa-2984-49c2-8cba-c3fd06ecb761"],

Cell["\<\
n=9;edge=1;pitch=35.2643;k=3;

spirvol=(edge^3*k*n*Cos[Degree pitch]^2*Csc[Pi/n]^2*Sin[(2*Pi)/k]*Sin[Degree \
pitch])/4

(*Volume of Polar Zonohedron*)
pozvol=(edge^3)*(n^2)*(.5)*(Cot[Pi/n])*(Cos[Degree pitch]^2)*(Sin[Degree \
pitch])

spirvol/pozvol\
\>", "Input",ExpressionUUID->"a4f8e61a-bcd1-4ef7-aefd-a45eea6ed400"],

Cell[TextData[{
 "Finally, it is apparent that the ratios of volumes (i.e., ",
 StyleBox["V",
  FontWeight->"Bold"],
 "[spirallohedron] / ",
 StyleBox["V",
  FontWeight->"Bold"],
 "[polar zonohedron]) for the various k\[LongDash]{k=3, 4, 5 \
,...}\[LongDash]converge upon certain values. Consider the ratio of a 3-armed \
spirallohedron to its circumscribing polar zonohedron, as n grows large:"
}], "Text",ExpressionUUID->"a3c329d1-2318-458b-ae2a-934f84b9c135"],

Cell["\<\
n=2400;edge=1;pitch=35.2643;k=3;

(*Volume of Spirallohedron*)
spirvol=(edge^3*k*n*Cos[Degree pitch]^2*Csc[Pi/n]^2*Sin[(2*Pi)/k]*Sin[Degree \
pitch])/4

(*Volume of Polar Zonohedron*)
pozvol=(edge^3)*(n^2)*(.5)*(Cot[Pi/n])*(Cos[Degree pitch]^2)*(Sin[Degree \
pitch])

Print[\"The ratio is \", spirvol/pozvol]\
\>", "Input",ExpressionUUID->"b276a96d-ea8f-4b97-94e0-e6d6fe757cb2"],

Cell["As n->infinity, this ratio is simply", "Text",ExpressionUUID->"dd286544-49c0-4b15-8c87-3cd7ecb147f5"],

Cell[BoxData[
 FormBox[
  FractionBox[
   RowBox[{"k", " ", 
    RowBox[{"sin", "(", 
     FractionBox["\[Pi]", "k"], ")"}], " ", 
    RowBox[{"cos", "(", 
     FractionBox["\[Pi]", "k"], ")"}]}], "\[Pi]"], TraditionalForm]], "Input",\
ExpressionUUID->"748b4137-b941-42aa-9423-1ccc66d818f5"],

Cell["Tabulating these limiting volume ratios, we have", "Text",ExpressionUUID->"3e656918-c33c-4095-b5ef-90465ebed52b"],

Cell["\<\
Table[
N[ k*Sin[Pi/k]*Cos[Pi/k]/Pi ],
{k,3,13}]\
\>", "Input",ExpressionUUID->"56e6e2c5-3ea1-49fe-b1b7-e8bc672a26b7"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Volume II: Hexahedral Composition of Spirallohedra", "Section",ExpressionUUID->"6986d187-a40e-4882-9c9e-1731deccd8f6"],

Cell["\<\
This was originally a separate notebook, with its own Initialization section. \
It has been rolled into the main Spirallohedron notebook intact. Included are \
the creation of k-regions from hexahedra, the creation of polar zonohedra \
from hexahedra, the creation of 3- and 4-armed spirallohedra from hexahedra, \
and the discovery and construction of nested, hidden \
\[OpenCurlyDoubleQuote]quasi-spirallohedra\[CloseCurlyDoubleQuote] within \
spirallohedra.\
\>", "Text",ExpressionUUID->"89ce52a0-7788-42cf-b535-f91c7dbf54cb"],

Cell[CellGroupData[{

Cell["Discussion", "Subsection",ExpressionUUID->"7d0008fd-2ea4-4f6a-93b2-dea9e2cc776e"],

Cell[TextData[{
 StyleBox["Warning: my ",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox["PolarZonohedron",
  FontWeight->"Bold",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox[" and ",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox["Spirallohedron",
  FontWeight->"Bold",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox[" functions accept the variable ",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox["pitch",
  FontSlant->"Italic",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox[" in degrees, and set ",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox["pitch",
  FontSlant->"Italic",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox[" by default to 35.2643+ degrees. In many examples below, however, ",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox["pitch",
  FontSlant->"Italic",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox[" is given in radian measure, for the purposes of certain embedded \
functions. It is always set to 35.2643+ degrees, in order to allow for \
construction of relevant spirallohedra, etc. If one wants to change ",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox["pitch",
  FontSlant->"Italic",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox[" in this section, one must use considerable caution. My \
recommendation: leave ",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox["pitch",
  FontSlant->"Italic",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox[" alone. It does not bear greatly upon the essentially \
combinatorial subjects explored herein.\n",
  FontColor->RGBColor[1, 0, 0]],
 "\nRhombic spirallohedra can be constructed by subtracting rhombic hexahedra \
from polar zonohedra. This notebook examines such constructions, and issues \
bearing upon the volumes of polar zonohedra, rhombic spirallohedra, and \
rhombic hexahedra.\n\n\nPolar zonohedra are determined by a set of ",
 StyleBox["n",
  FontSlant->"Italic"],
 " vectors, and may be dissected into the \[OpenCurlyDoubleQuote]tetrahedral\
\[CloseCurlyDoubleQuote] number of ",
 StyleBox["n",
  FontSlant->"Italic"],
 "-things-taken-three-at-a-time rhombic hexahedra. In ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " we can express this tetrahedral number as follows: "
}], "Text",ExpressionUUID->"1616ef9e-9070-437f-946a-57dbd524a52e"],

Cell["\<\
Table[Print[\"When n=\",n,\" there are \",Binomial[n,3],\" hexahedra.\"],
{n,3,12}];\
\>", "Input",ExpressionUUID->"6fbbf289-5e34-45cc-b828-308753d953a9"],

Cell[TextData[{
 "When ",
 StyleBox["n",
  FontSlant->"Italic"],
 "=3 or ",
 StyleBox["n",
  FontSlant->"Italic"],
 "=4, there is only one \[OpenCurlyDoubleQuote]type\[CloseCurlyDoubleQuote] \
of hexahedron, but more typically there are several to many types. Just as \
the polar zonohedron is determined by ",
 StyleBox["n",
  FontSlant->"Italic"],
 " vectors, so also each individual hexahedron is determined by some three of \
those ",
 StyleBox["n",
  FontSlant->"Italic"],
 " vectors. We can use the \[OpenCurlyDoubleQuote]",
 StyleBox["KSubsets",
  FontWeight->"Bold"],
 "\[CloseCurlyDoubleQuote] function from Steven Skiena\[CloseCurlyQuote]s ",
 StyleBox["Combinatorica",
  FontWeight->"Bold"],
 " package to make a list of the triples of vector indices. For example, when \
",
 StyleBox["n",
  FontSlant->"Italic"],
 "=5, we obtain this list of indices:"
}], "Text",ExpressionUUID->"bd396440-f191-4857-ae06-2c6679858627"],

Cell["KSubsets[Range[5],3]", "Input",ExpressionUUID->"52773821-6f53-4015-8526-b5f2469bb5ca"],

Cell[TextData[{
 "Polar zonohedra are bounded by ",
 StyleBox["n(n-1)",
  FontSlant->"Italic"],
 " faces. Any two of the ",
 StyleBox["n",
  FontSlant->"Italic"],
 " vectors determines a face, and, in reverse order, the equal and opposite \
counter-face. There are ",
 StyleBox["n",
  FontSlant->"Italic"],
 "-1 \[OpenCurlyDoubleQuote]rows\[CloseCurlyDoubleQuote] or cycles\
\[CloseCurlyDoubleQuote] of ",
 StyleBox["n",
  FontSlant->"Italic"],
 " faces, with row 1 equivalent to row ",
 StyleBox["n",
  FontSlant->"Italic"],
 "-1, row 2 equivalent to row ",
 StyleBox["n",
  FontSlant->"Italic"],
 "-2, and so on. When ",
 StyleBox["n",
  FontSlant->"Italic"],
 " is even, there is an \[OpenCurlyDoubleQuote]equatorial\
\[CloseCurlyDoubleQuote] row with no equivalent. That is, when ",
 StyleBox["n",
  FontSlant->"Italic"],
 "=6, we have five rows: row 1 (equiv.row 5), row 2 (equiv.row 4), and row 3 \
(equatorial row).\n\nIn the list of indices above, we can find the \
\[OpenCurlyDoubleQuote]face indices\[CloseCurlyDoubleQuote] of a hexahedron \
by subtracting pairs of indices in turn. For instance, the first triple is \
{1,2,3}. 2-1=1, 3-2=1, 3-1=2, hence, this hexahedron, in face-index form, can \
be represented as [1,1,2]. For some purposes it is useful to ignore \
equivalence between rows, in other cases one might want to reveal \
equivalence. The triple {1,4,5} provides an example. Ignoring equivalence, we \
have face-indices [3,1,4], but applying equivalence (and reducing to lowest \
terms) we have [2,1,1]. By sorting these indices we get [1,1,2] and can \
conclude that the hexahedra determined by triples {1,2,3} and {1,4,5} are the \
same.\n\nIf we actually test the equivalence of hexahedra {1,2,3} and {1,4,5} \
by finding their volumes, we find that they are at least equal in volume. \
However, the problem of deciding exactly how many different types of \
hexahedra do exist, for some given ",
 StyleBox["n",
  FontSlant->"Italic"],
 ", is a little difficult. One might take the approach that, if two hexahedra \
have the same volume, then they are of the same type. That, unfortunately, is \
not always the case. It is almost always the case, but not always. There \
exist \[OpenCurlyDoubleQuote]hexahedral identities\[CloseCurlyDoubleQuote] \
when a hexahedron of one type has the same volume as a hexahedron of another \
type. They are bounded by different faces, yet have the same volume. The \
lowest ",
 StyleBox["n",
  FontSlant->"Italic"],
 " for which this occurs is 12.\n\nSuch problems can be explored in more \
detail in the sections below. Eventually, we do dissect a polar zonohedron \
into its entire suite of rhombic hexahedra, not just mathematically, but in \
the sense of constructing each particular hexahedron, with its six rhombic \
faces, and displaying all or part of them. We also construct \
\[OpenCurlyDoubleQuote]",
 StyleBox["k",
  FontSlant->"Italic"],
 "-regions\[CloseCurlyDoubleQuote] of rhombic hexahedra, being that exact set \
of hexahedra which must be subtracted from a polar zonohedron to create the \
",
 StyleBox["k",
  FontSlant->"Italic"],
 " \[OpenCurlyDoubleQuote]valleys\[CloseCurlyDoubleQuote] bounding a ",
 StyleBox["k",
  FontSlant->"Italic"],
 "-armed spirallohedron. Finally, we construct 3- and 4-armed spirallohedra \
from hexahedra, and discover certain hidden quasi-spirallohedron, nested \
within."
}], "Text",ExpressionUUID->"88f9fd9e-8dc4-417f-a4b6-9e42ee043a02"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Volumes of Hexahedra, a First Look", "Subsection",ExpressionUUID->"516f7d2a-e225-4593-987b-9faf66fa9adf"],

Cell[TextData[{
 "The ",
 StyleBox["n",
  FontSlant->"Italic"],
 " vectors which determine a polar zonohedron are made using my \
\[OpenCurlyDoubleQuote]",
 StyleBox["vectors",
  FontWeight->"Bold"],
 "\" function, which was designed to take the \
angle-between-edges-and-a-plane-orthogonal-to-the-symmetry-axis \
\[OpenCurlyQuote]pitch\[CloseCurlyQuote] in degrees; so there is a little \
extra confusion below, where pitch is given in radian measure. We set ",
 StyleBox["n",
  FontSlant->"Italic"],
 ", ",
 StyleBox["pitch",
  FontSlant->"Italic"],
 ", edge length, make the ",
 StyleBox["n",
  FontSlant->"Italic"],
 " vectors, find the triples of indices, and then find the volumes of each \
hexahedron by taking the determinant of vector triple, and display results in \
the form {triple, volume}."
}], "Text",ExpressionUUID->"cf2d9184-444e-495a-84e5-d344c59350d6"],

Cell["\<\
n=6;
pitch=ArcTan[ Sqrt[1/2] ];(*at this pitch, orthogonal shadow of hypercube*)
edge=1;(*set to (3/n)^.5 to obtain a \"normalized eutactic star\"*)
v=vectors[n,1/Degree pitch,edge];(*correct for radian measure*)

triples=KSubsets[Range[n],3];(*the idea here is that the hexahedra must be \
sorted by index not by volume*)
indexedhexvols=Table[{triples[[i]],
Det[ v[[ triples[[i]] ]] ]},{i,Length[triples]}]\
\>", "Input",ExpressionUUID->"ac41405f-054b-460f-a616-f930faeb501f"],

Cell["\<\
We see that there are three different volumes scattered within the list. We \
reorder by volume.\
\>", "Text",ExpressionUUID->"b9b970f9-abeb-44f0-b299-6153c17bd925"],

Cell["\<\
dex1=Split[
\tSort[indexedhexvols, (#1[[2]]<#2[[2]]&)],
(Chop[ #1[[2]]-#2[[2]] ]==0&)]\
\>", "Input",ExpressionUUID->"e47017d0-ad4d-4b66-b624-2fb14c6a0aae"],

Cell["\<\
Now we reorder each volume set from lowest to highest triple..\
\>", "Text",ExpressionUUID->"fa41412d-6cec-43e9-ab28-a53b51cc5237"],

Cell["dex2=Map[Sort[# ]&, dex1]", "Input",ExpressionUUID->"f72c8918-bd87-44fc-934a-d9ef14a4fb64"],

Cell[TextData[{
 "Finally, we get the \[OpenCurlyDoubleQuote]representative\
\[CloseCurlyDoubleQuote] index triple for each volume. It so happens that \
when ",
 StyleBox["n",
  FontSlant->"Italic"],
 "<11, the ordering of volumes is the same as the ordering of representative \
vector index triples. Go back to the top and set ",
 StyleBox["n",
  FontSlant->"Italic"],
 "=11 to see an out-of-order set of volumes."
}], "Text",ExpressionUUID->"2f5e946d-6c99-4b72-b29c-6061b4934d0a"],

Cell["\<\
dex3=Sort[Map[First[#]&, dex2]](*indices in lowest terms, volumes for that \
class*)
Print[\"When n=\",n,\" the volumes are ordered? \
\",OrderedQ[newdiffvols=Map[#[[2]]&, dex3]]]\
\>", "Input",ExpressionUUID->"0157eecd-b36e-4f21-b04e-cad7bfecd4ee"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Distinct Hexahedra and Their Volumes", "Subsection",ExpressionUUID->"1f1e822f-19ef-4f2f-87a6-2ab1abcfd6a3"],

Cell[TextData[{
 "When we use the approach in the section above, we do not pick up the rare \
hexahedral identities. The first instance of such an identity is when ",
 StyleBox["n",
  FontSlant->"Italic"],
 "=12. By converting the vector-index triples to face-index triples in lowest \
terms, so that when a face of row ",
 StyleBox["n-k",
  FontSlant->"Italic"],
 " appears, we treat it as a face of row ",
 StyleBox["k",
  FontSlant->"Italic"],
 ", we find that although there are 12 different types of hexahedra when ",
 StyleBox["n",
  FontSlant->"Italic"],
 "=12, there are only 11 different volumes. Experience has shown that the \
ratios between hexahedral volumes are unaffected by ",
 StyleBox["pitch",
  FontSlant->"Italic"],
 ", or by edge length, so to experiment further, change only ",
 StyleBox["n",
  FontSlant->"Italic"],
 "."
}], "Text",ExpressionUUID->"300df458-fa3b-482f-a275-816c45eb8f40"],

Cell["Binomial[n,3]", "Input",ExpressionUUID->"0c874978-64be-4871-aa0c-8061e9760d7b"],

Cell["KSubsets[Range[n],3]", "Input",ExpressionUUID->"e809daa3-13c0-4193-acf4-cf97c1998870"],

Cell["\<\
(*set n, pitch, edge length, make vectors*)
n=11;
pitch=ArcTan[ Sqrt[1/2] ];(*at this pitch, orthogonal shadow of hypercube*)
edge=1;(*set to (3/n)^.5 to obtain a \"normalized eutactic star\"*)
v=vectors[n,1/Degree pitch,edge];(*correct for radian measure*)

hemi=If[EvenQ[n],n/2,((n-1)/2)];(*face-number of equatorial cycle(s)*)
triples=KSubsets[Range[n],3];(*each triple determines a hexahedron*)

facehex=Map[Sort[ cycleface[{#[[2]]-#[[1]], #[[3]]-#[[2]], #[[3]]-#[[1]]}] \
]&, triples];(*preserves order of triples while converting to face-indices*)
Print[\"The lowest-term face-index triples are \", dexface=Union[facehex] ];
Print[];
Print[\"There are \", numhex=Length[dexface], \" different types of hexahedra\
\"];\
\>", "Input",ExpressionUUID->"9a4a932c-d803-40b0-b2e8-a2bee5e6f4ff"],

Cell["\<\
q1=Table[(*find positions in general list of each type of face-indexed \
hexahedron*)
Flatten[Position[ facehex, dexface[[j]]]],
{j,Length[dexface]}];

Print[\"The \",Length[triples],\" hexahedra fall into sets of \
\",hexsets=Map[Length[#]&, q1]];(*this many of each type, ordered from lowest \
face-index to highest*)
Print[];Print[];

rephex=Map[ First[#]&, q1];(*just choose the first of each sublist to \
represent that type*)
(*go ahead and get representative volumes*)
rephexvols=Map[ Det[ v[[ # ]] ]&, triples[[rephex]] ];

(*now go back to vector indices for each type*)
Print[\"The vector triples are \", triples[[rephex]]];
Print[];Print[];
(*recall the corresponding face-index triples*)
Print[\"The face triples are \", dexface];
Print[];Print[];

(*and find the volumes for each type, in face-index order*)
Print[\"The corresponding volumes are \", rephexvols];

Print[];
Print[\"There are \",
Length[ Union[rephexvols,SameTest->(Chop[ #1-#2 ]==0&)] ],
\" different volumes.\"]\
\>", "Input",ExpressionUUID->"e4063a67-ca06-4d65-b476-12925cd49771"],

Cell[TextData[{
 "From the above we see that although there are 12 different types of \
hexahedra, there are only eleven different volumes. Volume 4 equals volume 6, \
so that (by face-index) hexahedron [1,4,5] has the same volume as hexahedron \
[2,2,4].\n\nAnother way of computing the volume of a hexahedron is, given the \
three vectors which determine it, v1, v2, v3, say, to take ",
 StyleBox["Abs[ v1 . Cross[ v2, v3] ]",
  FontWeight->"Bold"],
 "."
}], "Text",ExpressionUUID->"03a974f2-cb8c-4cd7-bd9f-de1909096994"],

Cell["\<\
Det[ v[[ {1,2,3} ]] ]==Abs[ v[[1]]. Cross[ v[[2]], v[[3]] ] ]\
\>", "Input",ExpressionUUID->"02f2be32-8a8e-45c6-8290-21f0dcf3bb44"],

Cell["\<\
Clear[nn,i,j,k,v1,v2,v3,h]
v1={Cos[i*2*Pi/nn],Sin[i*2*Pi/nn],h};
v2={Cos[j*2*Pi/nn],Sin[j*2*Pi/nn],h};
v3={Cos[k*2*Pi/nn],Sin[k*2*Pi/nn],h};

Simplify[Abs[ v1.Cross[v2,v3] ]]\
\>", "Input",ExpressionUUID->"ad2f229f-dc82-4b39-a2c8-46609c583bfe"],

Cell[TextData[{
 "When we use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s symbolic capabilities on the expression ",
 StyleBox["Abs[ v1 . Cross[ v2, v3] ]",
  FontWeight->"Bold"],
 " we obtain an interesting result. The details are a little involved, but in \
essence, the ",
 StyleBox["n",
  FontSlant->"Italic"],
 " vectors as I define them are of the form {Cos[i*2*Pi/n], Sin[i*2*Pi/n], \
h}, and when these are used symbolically, we find that the \
\[OpenCurlyDoubleQuote]core symbolic terms\[CloseCurlyDoubleQuote] \
(neglecting edge length and ",
 StyleBox["pitch",
  FontSlant->"Italic"],
 "), for a hexahedron of face-indices [i,j,k], are ( 4* Sin[i*Pi/n] * \
Sin[j*Pi/n] * Sin[k*Pi/n] ). See above. For our purposes \
let\[CloseCurlyQuote]s forget the \[OpenCurlyQuote]4\[CloseCurlyQuote] for \
now."
}], "Text",ExpressionUUID->"744ed9ef-f44b-48c6-ab48-47e25c20182d"],

Cell["\<\
(*now we do not reduce face-indices to lowest terms*)
faceindices=Map[
{#[[2]]-#[[1]], #[[3]]-#[[2]], #[[3]]-#[[1]]}&, triples[[rephex]] ];
Print[\"The face indices, not reduced to lowest terms, are \", faceindices];
Print[];Print[];
Print[\"The core symbolic terms for hexahedral volumes are \", \
Map[sinproduct[#]&, faceindices]];\
\>", "Input",ExpressionUUID->"d6800f4d-d46b-41df-a7e3-9e4f95be97bf"],

Cell[TextData[{
 "When we give ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " an expression such as Cos[Pi/6], however, it will if possible return some \
other equivalent. See below."
}], "Text",ExpressionUUID->"5dcd4a62-7d0f-4ad7-bd10-24023fc13e3b"],

Cell["Cos[Pi/6]", "Input",ExpressionUUID->"91e07759-2ee6-4848-b4c3-579af6d2b452"],

Cell["\<\
Hence, to make a table of vector index triples, face index triples, core \
symbolic expressions, and actual numeric volumes, a special \
\[OpenCurlyDoubleQuote]sinproduct\[CloseCurlyDoubleQuote] function was cobbed \
together, to force the desired expressions to appear. Note that the \
face-index triples are not in lowest equivalent terms.\
\>", "Text",ExpressionUUID->"972f5f8e-c964-4637-a99c-aa974bae8517"],

Cell["\<\
symbs=Map[{
#,
{#[[2]]-#[[1]], #[[3]]-#[[2]], #[[3]]-#[[1]]},
sinproduct[ {#[[2]]-#[[1]], #[[3]]-#[[2]], #[[3]]-#[[1]]} ],
N[symhexvol[#, n, pitch ]]
}&, triples[[rephex]] ];


TraditionalForm[
TableForm[symbs,
TableSpacing->{4,2},
TableHeadings->{None,
{\"Vectors\", \"Faces\", \"Core Symbolic Expression\",\"Numeric Volume\"}
}]
]\
\>", "Input",ExpressionUUID->"455911a7-b818-49c1-a60b-0033f96ca642"],

Cell[TextData[{
 "Now, recalling that we have obtained the number of hexahedra for each \
different type, we can approach the total volume of a polar zonohedron as a \
sum of multiples of the volumes for each type. Note that here no attempt was \
made to force ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to use the \[OpenCurlyDoubleQuote]core symbolic expressions.\
\[CloseCurlyDoubleQuote]"
}], "Text",ExpressionUUID->"f5c89cdd-07a1-41a1-bf51-2d6a27024edd"],

Cell["\<\
MapThread[{
#1, symhexvol[#2, n, pitch ]
}&, {hexsets,triples[[rephex]]} ]\
\>", "Input",ExpressionUUID->"2ba8d034-8a54-471c-a687-f5355eaca983"],

Cell["\<\
Here we actually form each particular product, and display in TraditionalForm.\
\>", "Text",ExpressionUUID->"95d42d22-c2df-417a-84ce-6148c5ee60dc"],

Cell["\<\
TraditionalForm[TableForm[
MapThread[{
(#1) * (symhexvol[#2, n, pitch ])
}&, {hexsets,triples[[rephex]]} ]
]]\
\>", "Input",ExpressionUUID->"10c03c79-7026-41cc-8b1f-26e2321b2ead"],

Cell["\<\
We add the products to obtain the volume of the polar zonohedron, and then \
Simplify the resulting expression.\
\>", "Text",ExpressionUUID->"a73080da-9dff-4e82-8efe-fc2278f1367c"],

Cell["\<\
pv=Plus@@MapThread[{
(#1) * (symhexvol[#2, n, pitch ])
}&, {hexsets,triples[[rephex]]} ]
TraditionalForm[Simplify[pv]]\
\>", "Input",ExpressionUUID->"15f6c823-180c-44c9-9860-57e782a2853a"],

Cell["\<\
Here we try a different form, and then Simplify the resulting expression.\
\>", "Text",ExpressionUUID->"a7efb6af-d543-44fc-bd2d-d2c4bc3c5112"],

Cell["\<\
qq=TrigToExp[Plus@@MapThread[{
(#1) * (symhexvol[#2, n, pitch ])
}&, {hexsets,triples[[rephex]]} ]
]
TraditionalForm[Simplify[qq]]\
\>", "Input",ExpressionUUID->"52207b24-08a9-4730-ae2b-e0b0ae7baca8"],

Cell["We have obtained the volume of the polar zonohedron.", "Text",ExpressionUUID->"59ccc300-0147-4af1-9551-08eb53f292a8"],

Cell["N[pv]", "Input",ExpressionUUID->"95136716-40c4-4582-a535-f4c2e6a956cb"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Volumes of Polar Zonohedra, Spirallohedra, and k-regions", "Subsection",ExpressionUUID->"21384836-1a38-4854-b009-ad989b443c2f"],

Cell[TextData[{
 "We obtain symbolic representations of various expressions and use them to \
construct functions to find the volumes of polar zonohedra, rhombic \
spirallohedra, and ",
 StyleBox["k",
  FontSlant->"Italic"],
 "-regions.\n\nYears of effort led gradually to the discovery of the \
following expression for the volume of the general polar zonohedron, where ",
 StyleBox["n",
  FontSlant->"Italic"],
 " is the number of vectors, ",
 StyleBox["pitch",
  FontSlant->"Italic"],
 " is the complement to the angle between edges and symmetry axis, and ",
 StyleBox["edge",
  FontSlant->"Italic"],
 " is the edge length."
}], "Text",ExpressionUUID->"c317b3c4-38d8-4c37-b367-aa03a151a19c"],

Cell["Clear[n,j,k,edge,pitch,pzvol, spivol]", "Input",ExpressionUUID->"90730664-3c32-4ed7-9323-901c7fcd7a02"],

Cell["\<\
(*volume polar zonohedron determined by n vectors,
edge length 'edge', complement to angle between edges and symmetry axis \
'pitch'*)

polarvolume=edge^3 * n^2 * 1/2 * Cot[Pi/n] * Cos[pitch]^2 * Sin[pitch]\
\>", "Input",ExpressionUUID->"7b9637ef-e9a0-4e18-ae67-d2395e5042a4"],

Cell["\<\
(*We cast the expression as a function accpeting n,pitch and edge as inputs*)
(*note: pitch is assumed to be given in degrees*)

pzvol[n_,pitch_,edge_]:=(edge^3*n^2*Cos[Degree*pitch]^2*Cot[Pi/n]*Sin[Degree*\
pitch])/2\
\>", "Input",ExpressionUUID->"16dd3126-4a43-41f0-b775-2aeb1999b11b"],

Cell[TextData[{
 "See the ",
 StyleBox["Volume",
  FontWeight->"Bold"],
 " section above for details about how the volume of the general k-armed \
spirallohedron was found. It involves the ratio between a regular k-gon and a \
(circumscribing) regular n-gon. A regular polygon of ",
 StyleBox["j",
  FontSlant->"Italic"],
 " sides can be divided into ",
 StyleBox["j",
  FontSlant->"Italic"],
 " equal isosceles triangles. Each such triangle is half of a rhomb with two \
interior angles of 360/",
 StyleBox["j",
  FontSlant->"Italic"],
 " degrees. The area of such a rhomb is Sin[360/",
 StyleBox["j",
  FontSlant->"Italic"],
 "]; hence the area of the ",
 StyleBox["j",
  FontSlant->"Italic"],
 "-gon is ",
 StyleBox["j",
  FontSlant->"Italic"],
 "*Sin[360/",
 StyleBox["j",
  FontSlant->"Italic"],
 "]/2."
}], "Text",ExpressionUUID->"9895b9b0-8449-4bf9-afae-1cdc4a311c5f"],

Cell["\<\
(*ratio, area regular k-gon to area circumscribing n-gon*)

polygonratio=((k*Sin[2*Pi/k])/2) / ((n*Sin[2*Pi/n])/2)\
\>", "Input",ExpressionUUID->"3e112db8-4681-4b6d-bef6-ae4542c7156f"],

Cell["\<\
The product of the polygon ratio and the volume of the circumscribing polar \
zonohedron gives the volume of the inscribed k-armed spirallohedron.\
\>", "Text",ExpressionUUID->"b9d9f831-140f-4b13-8bba-2057db406860"],

Cell["\<\
(*volume k-armed spirallohedron inscribed with polar zonohedron*)

spiralvolume=FullSimplify[ polygonratio*polarvolume ]\
\>", "Input",ExpressionUUID->"0608e01f-3b08-419e-a3b5-9295aa0e4772"],

Cell["\<\
(*volume of k-armed spirallohedron*)
(*note: pitch is assumed to be given in degrees*)

spivol[n_,k_,pitch_,edge_]:=(edge^3*k*n*Cos[Degree*pitch]^2*Csc[Pi/n]^2*Sin[(\
2*Pi)/k]*Sin[Degree*pitch])/4\
\>", "Input",ExpressionUUID->"85aa7f29-a545-418f-88b3-e4772e625a9f"],

Cell[TextData[{
 "Since ",
 StyleBox["k",
  FontSlant->"Italic"],
 "-armed spirallohedra can be constructed by subtracting ",
 StyleBox["k",
  FontSlant->"Italic"],
 " regions of hexahedra from the circumscribing polar zonohedron, we find an \
expression for the volume of one of the ",
 StyleBox["k",
  FontSlant->"Italic"],
 " regions."
}], "Text",ExpressionUUID->"ea484867-45b2-4389-960a-0cab968c3a4a"],

Cell["\<\
(*volume of one of the k subtracted regions of hexahedra*)

kvol=FullSimplify[ (polarvolume-spiralvolume) / k ]\
\>", "Input",ExpressionUUID->"fe45a4f0-4146-4b08-accf-3fc5a1016e67"],

Cell["\<\
(*volume of one of the subtracted k regions of hexahedra*)
(*note: pitch is assumed to be given in degrees*)

kvolume[n_,k_,pitch_,edge_]:=(edge^3*n*Cos[Degree*pitch]^2*Csc[Pi/n]^2*(-(k*\
Sin[(2*Pi)/k]) + n*Sin[(2*Pi)/n])*Sin[Degree*pitch])/(4*k)\
\>", "Input",ExpressionUUID->"67edcd43-ce6c-4ae4-8e41-80bf06e42d6e"],

Cell["Here are some examples.", "Text",ExpressionUUID->"f61749a9-d691-4daf-a542-46da6f7c5fd8"],

Cell["\<\
pzvol[12, 35.2643, 1]
spivol[12, 3, 35.2643, 1]
kvolume[12, 3, 35.2643, 1]\
\>", "Input",ExpressionUUID->"51212c98-3e4d-4669-b19b-435e486715f1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Make Hexahedral k-Regions", "Subsection",ExpressionUUID->"f5cb9868-f753-4f8d-96ce-c64eaf8534c4"],

Cell[TextData[{
 "Here we construct the hexahedra forming one of the ",
 StyleBox["k",
  FontSlant->"Italic"],
 " regions subtracted from a polar zonohedron to make a spirallohedron.\n\n\
Once again we adopt ",
 StyleBox["n",
  FontSlant->"Italic"],
 "=12. A hexahedron function was written expressly for this construction. The \
function accepts three vectors, ",
 StyleBox["vi",
  FontWeight->"Bold"],
 ", ",
 StyleBox["vj",
  FontWeight->"Bold"],
 ", and ",
 StyleBox["vk",
  FontWeight->"Bold"],
 ", and a reference point-of-beginning (the \[OpenCurlyDoubleQuote]top\
\[CloseCurlyDoubleQuote] of the hexahedron) ",
 StyleBox["ref",
  FontWeight->"Bold"],
 ". It creates the six faces and updates ",
 StyleBox["ref",
  FontWeight->"Bold"],
 ", defining the top of the next hexahedron in turn. In a close-packing of \
polyhedra every face is the join between two polyhedra; in this local, finite \
close-packing of hexahedra, which are zonohedra, every face is part of a \
\[OpenCurlyDoubleQuote]family\[CloseCurlyDoubleQuote] or set of equal and \
parallel \[OpenCurlyDoubleQuote]interfaces.\[CloseCurlyDoubleQuote] The first \
face created by the hexahedron function is propagated through a series of \
interfaces in nested loops. That is to say, consider the vector index \
triples, which are \[OpenCurlyDoubleQuote]canonically\[CloseCurlyDoubleQuote] \
ordered from least to greatest. The list of integer triples typically begins \
with a sequence such as {{1,2,3}, {1,2,4}, {1,2,5}, ...}. In the construction \
below, the common members of such a triple sequence, in this case {1,2}, form \
the continuous series of equal interfaces."
}], "Text",ExpressionUUID->"08fd3d05-4b87-4d3b-ac9b-96b36efdd409"],

Cell["\<\
(*set n, pitch, edge length, make vectors, find triples*)
n=12;
pitch=ArcTan[ Sqrt[1/2] ];(*at this pitch, orthogonal shadow of hypercube*)
edge=1;(*set to (3/n)^.5 to obtain a \"normalized eutactic star\"*)
v=vectors[n,1/Degree pitch,edge];(*correct for radian measure*)
triples=KSubsets[Range[n],3];(*each triple determines a hexahedron*)

(*try out hexahedron function*)
Show[newhex[ v[[{1,2,3}]], {0,0,0}],
Axes->True,
ViewPoint->{0,-1,3}];\
\>", "Input",ExpressionUUID->"d027f5bc-2320-47fd-bef4-d3b7de4fd0a0"],

Cell[TextData[{
 "Now we create the vector indices for one k-region, in this case, ",
 StyleBox["k",
  FontSlant->"Italic"],
 "=3, but we call it ",
 StyleBox["karm",
  FontSlant->"Italic"],
 ". Nested loops are used, the innermost defining integer triples {i,j,k}. \
The nested output is flattened, the number of triples found, and the \
resulting region volume is first calculated as a sum of hexahedral volumes, \
then using the ",
 StyleBox["kvolume",
  FontWeight->"Bold"],
 " function. The two results are tested for equality. "
}], "Text",ExpressionUUID->"b548aaaf-8760-4533-a4ab-2984e9161ccf"],

Cell["\<\
karm=3;(*set number of arms of spirallohedron, karm a divisor of n*)
q=Table[(*set up list of vector triples for region hexahedra*)
Table[
\tTable[{i,j,k},
\t{k,j+1,n}],
{j,i+1,(n/karm)}],
{i,1,(n/karm)-1}]

regiontriples=Flatten[q,2];
Print[\"There are \", Length[regiontriples], \" hexahedra in the region.\"];
Print[\"The volume of the hexahedra is \", vol1=Plus@@Map[ Det[ v[[ # ]] ]&, \
regiontriples ]];
Print[\"The volume of the region is \", \
vol2=N[kvolume[n,karm,pitch,edge]]];(*volume of one of k regions*)
Print[\"Computed volume equal to measured volume? \", vol1==vol2];\
\>", "Input",ExpressionUUID->"c1656ec4-fdbc-42e2-ba7d-9e21109e1f97"],

Cell[TextData[{
 "Now we actually make each hexahedron. In oder to force the k-region to \
align with a k-armed spirallohedron centered on the origin, the negative of \
the point \[OpenCurlyDoubleQuote]",
 StyleBox["pt",
  FontWeight->"Bold"],
 "\[CloseCurlyDoubleQuote] is defined as the point-of-beginning. However, \
this will not suffice for all the hexahedra needed, and observation and \
experimentation led to the somewhat awkward construction for other \
points-of-beginning, ",
 StyleBox["-pt+(Plus@@v[[ Range[i-1] ]])",
  FontWeight->"Bold"],
 ". \n\nWe also go ahead and make the associated k-armed spirallohedron, and \
display, first, the region itself, and then next, the region and the \
spirallohedron, with the region translated slightly to separate it."
}], "Text",ExpressionUUID->"03cc2f1c-f073-48d5-b3ff-f57aa710a629"],

Cell["\<\
pt=Chop[ (Plus@@v)/2 ];(*create region hexahedra*)
zaq=Table[
Table[If[i==1,mark=-pt,mark=-pt+(Plus@@v[[ Range[i-1] ]]) ];
\tTable[ newhex[ v[[{i,j,k}]],mark],
\t{k,j+1,n}],
{j,i+1,n/karm}],
{i,1,(n/karm)-1}];

a=Spirallohedron[n,karm];(*create k-armed spirallohedron*)


Show[zaq,(*show region hexahedra*)
Axes->True,
ViewPoint->{0,0,-3}];

Show[{a,trans[zaq, {-1,1,0}]},(*show spirallohedron and translated region*)
Axes->True,
ViewPoint->2.25*unit[{0,-.5, -2}]];\
\>", "Input",ExpressionUUID->"43c6e519-246f-426d-b449-40e8c4436d1c"],

Cell[TextData[{
 "Here the hexahedra of the k-region are exploded apart slightly and \
displayed, alone and with the associated spirallohedron. The explosion is \
performed by first flattening the nested lists of hexahedra into one long \
list. A scale term ",
 StyleBox["sca",
  FontWeight->"Bold"],
 " is set, the center of each hexahedron is found, and that hexahedron is \
translated by the product of ",
 StyleBox["sca",
  FontWeight->"Bold"],
 " and that center."
}], "Text",ExpressionUUID->"122db262-a62d-4c60-84fd-debb6ddd3651"],

Cell["\<\
Length[h1=Flatten[zaq,2]];
sca=0.25;
xaq=Map[ trans[#, sca*cent[ vunion[ Flatten[ parse[ # ], 1] ] ] ]&, h1];
Show[xaq,(*show hexahedra*)
Axes->True,
ViewPoint->2.25*unit[{0,0,3}]];

Show[{a,xaq},(*show hexahedra with spirallohedron*)
Axes->True,
ViewPoint->2.25*unit[{0,0,3}]];\
\>", "Input",ExpressionUUID->"7b23bb94-f17e-479f-96a0-86d2aa143ded"],

Cell[CellGroupData[{

Cell["Analyze Triples", "Subsubsection",ExpressionUUID->"c01ccf40-82a3-45ab-b917-0c5b29aaddf9"],

Cell[TextData[{
 "We have constructed one k-region, in the example above, ",
 StyleBox["k",
  FontSlant->"Italic"],
 "=3. Here it is assumed that the section ",
 StyleBox["Make Hexahedral k-regions",
  FontWeight->"Bold"],
 " has been evaluated with ",
 StyleBox["k",
  FontSlant->"Italic"],
 "=3, and we form the vector indices for the other two regions by addition. \
After adding we sort so that the resulting triples go from lowest to highest \
terms. Then we find all those triples which are in the global list ",
 StyleBox["triples",
  FontWeight->"Bold"],
 ", comprising the entire polar zonohedron, but ",
 StyleBox["not",
  FontSlant->"Italic"],
 " in any of the regions. These are those triples which correspond to the \
hexahedra which compose the core spirallohedron, and we name this sublist ",
 StyleBox["core",
  FontWeight->"Bold"],
 "."
}], "Text",ExpressionUUID->"0e740487-0e50-49c2-90f2-42eae09c4e41"],

Cell["\<\
h2=(n/3)-1;
h3=(2*n/3)-1;
s1=regiontriples;
s2=Sort/@Map[ 1+Mod[{h2,h2,h2}+#, n]&, regiontriples];
s3=Sort/@Map[ 1+Mod[{h3,h3,h3}+#, n]&, regiontriples];
Print[\"The total number of hexahedra in all regions is \", \
r1=Length[s4=Union[s1,s2,s3]]];
Print[];
Print[\"The indices for hexahedra in the core spirallohedron are \", \
core=Complement[ triples, s4 ]];
Print[];
Print[\"The number of hexahedra in the core spirallohedron is \
\",r2=Length[core]];\
\>", "Input",ExpressionUUID->"5e5b5dd0-9bee-4c15-a51b-f3b107783d72"],

Cell["\<\
Now we look at the average volumes of region hexahedra and core hexahedra.\
\>", "Text",ExpressionUUID->"428e6237-c2c9-4063-b263-45bde40fd56d"],

Cell["\<\
Print[\"The volume of the regional hexahedra is \", vr=3*Plus@@Map[ Det[ v[[ \
# ]] ]&, regiontriples ]];

Print[\"Average volume of a regional hexahedron is \", vr/r1];

Print[];

Print[\"The volume of the core hexahedra is \", vc=Plus@@Map[ Det[ v[[ # ]] \
]&, core ]];

Print[\"Average volume of a core hexahedron is \", vc/r2];

Print[];
Print[\"The ratio between the two volumes is \", vc/vr];
Print[\"The ratio between core volume and polar zonohedron is \", vc/(vr+vc)];\
\>", "Input",ExpressionUUID->"fb5555ba-a350-4ef3-9f38-400d0f295c68"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Make a Hexahedral Polar Zonohedron", "Subsection",ExpressionUUID->"09017d36-f213-4595-9225-783f321a5e32"],

Cell[TextData[{
 "In an unintended consequence of making a hexahedral ",
 StyleBox["k-",
  FontSlant->"Italic"],
 "region, b",
 "y altering the lengths of the nested loops we can construct a polar \
zonohedron dissected into its tetrahedral number of hexahedra!"
}], "Text",ExpressionUUID->"56178085-082e-4fac-9a73-58f03d57f31c"],

Cell["\<\
(*set n, pitch, edge length, make vectors, find triples*)
n=12;
pitch=ArcTan[ Sqrt[1/2] ];(*at this pitch, orthogonal shadow of hypercube*)
edge=1;(*set to (3/n)^.5 to obtain a \"normalized eutactic star\"*)
v=vectors[n,1/Degree pitch,edge];(*correct for radian measure*)
triples=KSubsets[Range[n],3];(*each triple determines a hexahedron*)

pt=Chop[ (Plus@@v)/2 ];(*create region hexahedra*)
zaq=Table[
Table[If[i==1,mark=-pt,mark=-pt+(Plus@@v[[ Range[i-1] ]]) ];
\tTable[ newhex[ v[[{i,j,k}]],mark],
\t{k,j+1,n}],
{j,i+1,n-1}],
{i,1,n-2}];

Print[\"There are by theory \", Binomial[n,3], \" hexahedra, and we have \
constructed \", Length[Flatten[zaq,2]], \" hexahedra.\"];

Show[zaq,(*show hexahedra*)
Axes->True,
ViewPoint->2.25*unit[{0,0,1}]];\
\>", "Input",ExpressionUUID->"f0b024d6-40f0-454f-baf6-e91cf2bb829b"],

Cell[TextData[{
 "Since the list \[OpenCurlyDoubleQuote]",
 StyleBox["zaq",
  FontWeight->"Bold"],
 "\[CloseCurlyDoubleQuote] of hexahedra is nested, we can display each \
principal sublist."
}], "Text",ExpressionUUID->"36e4a042-07dc-4b15-8f7f-ea80815f4c19"],

Cell["\<\
Table[Show[zaq[[k]],(*a sublist of hexahedra*)
Axes->True,
ViewPoint->2.25*unit[{0,0,3}]],
{k,Length[zaq]}];\
\>", "Input",ExpressionUUID->"7f73bd29-29ab-4a6f-9fa6-e0721919b74d"],

Cell["We can display each sublist within any principal sublist.", "Text",ExpressionUUID->"7abfec72-67ec-4e19-83c4-a90200324da0"],

Cell["\<\
Table[Show[zaq[[1,k]],(*a sublist of hexahedra*)
Axes->True,
ViewPoint->2.25*unit[{0,0,3}]],
{k,Length[ zaq[[1]] ]}];\
\>", "Input",ExpressionUUID->"4a0f9ab6-130b-41f5-b20d-b0c2d1d40ce2"],

Cell["And we can explode the hexahedra apart.", "Text",ExpressionUUID->"08f8dbe2-8d17-4048-827f-b1171770c556"],

Cell["\<\
h1=Flatten[zaq,2];
sca=0.5;
xaq=Map[ trans[#, sca*cent[ vunion[ Flatten[ parse[ # ], 1] ] ] ]&, h1];
Show[xaq,(*show hexahedra*)
Axes->True,
ViewPoint->2.25*unit[{0,0,3}]];\
\>", "Input",ExpressionUUID->"a55fac33-2498-4ebc-b0a4-bd424bc261b8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["All Regions; Hexahedral Spirallohedra; Rinds and Layers", "Subsection",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"6822a5f9-fb92-43f0-b392-3764ff58c6a0"],

Cell[TextData[{
 "By further modifying the nested loops giving a \
\[OpenCurlyDoubleQuote]representative\[CloseCurlyDoubleQuote] ",
 StyleBox["k",
  FontSlant->"Italic"],
 "-region, we can construct all ",
 StyleBox["k",
  FontSlant->"Italic"],
 " of the ",
 StyleBox["k",
  FontSlant->"Italic"],
 "-regions. Then, subtracting the hexahedra from all ",
 StyleBox["k",
  FontSlant->"Italic"],
 "-regions from the hexahedra of the circumscribing polar zonohedron, we \
obtain the index triples for the \[OpenCurlyDoubleQuote]core\
\[CloseCurlyDoubleQuote] spiirallohedron. Analysis of these indices yielded \
cumbersome nested loops which give the hexahedral composition of 3- and \
4-armed spirallohedra; no such construction is yet found for the \
\[OpenCurlyDoubleQuote]higher\[CloseCurlyDoubleQuote] ",
 StyleBox["k",
  FontSlant->"Italic"],
 "-armed spirallohedra. We sort hexahedra by volume and assign different \
colors to them. Finally, we discover hidden \
\[OpenCurlyDoubleQuote]quasi-spirallohedra\[CloseCurlyDoubleQuote] nested \
within the hexahedrally composed spirallohedra.\n\nFurther notes will be \
found in the particular subsections."
}], "Text",ExpressionUUID->"e833ed2e-3597-4ee6-96a2-d1a7b7d3287d"],

Cell[CellGroupData[{

Cell["Construction of k-regions", "Subsubsection",ExpressionUUID->"6dcefdc4-d46a-4b19-b8d3-643590783eb7"],

Cell[TextData[{
 "By example we set ",
 StyleBox["n",
  FontSlant->"Italic"],
 "=15, ",
 StyleBox["k",
  FontSlant->"Italic"],
 "=3. We call ",
 StyleBox["k",
  FontSlant->"Italic"],
 " \[OpenCurlyDoubleQuote]karm\[CloseCurlyDoubleQuote] to avoid confusion \
with the nested loops, {i,j,k}."
}], "Text",ExpressionUUID->"81cc26c5-5a3d-46c5-8806-40c9c11c1921"],

Cell["\<\
(*set n, pitch, edge length, make vectors, find triples*)
n=15;
pitch=ArcTan[ Sqrt[1/2] ];(*at this pitch, orthogonal shadow of hypercube*)
edge=1;(*set to (3/n)^.5 to obtain a \"normalized eutactic star\"*)
v=vectors[n,1/Degree pitch,edge];(*correct for radian measure*)
triples=KSubsets[Range[n],3];(*each triple determines a hexahedron*)
karm=3;
kstep=n/karm;\
\>", "Input",ExpressionUUID->"32f8bf4f-39df-4cc1-8166-928a8b448e4b"],

Cell[TextData[{
 "We construct all ",
 StyleBox["k ",
  FontSlant->"Italic"],
 "of the ",
 StyleBox["k",
  FontSlant->"Italic"],
 "-regions, and display them {1, 2, ..., ",
 StyleBox["k",
  FontSlant->"Italic"],
 "} at a time."
}], "Text",ExpressionUUID->"ed957681-e84a-418a-a6cb-25902ac16c7f"],

Cell["\<\
pt=Chop[ (Plus@@v)/2 ];(*sum of vectors, divided by 2*)

allregions=Table[

Table[
  Table[If[i==1,mark=-pt,mark=-pt+(Plus@@v[[ Range[sk+1,i-1] ]]) ];
\tTable[ newhex[ v[[ 1+Mod[{i-1,j-1,k-1}, n] ]],mark],
\t{k,j+1,n+sk}],
  {j, i+1, sk+(n/karm) }],
{i, sk+1, sk+((n/karm)-1) }],

{sk,0,n-kstep,kstep}];

Table[
Show[allregions[[ Range[i] ]],(*show two regions*)
Axes->True,
ViewPoint->{0,0,-3}],
{i, Length[allregions]}];\
\>", "Input",ExpressionUUID->"35bc0ef3-56c1-4724-be8d-483014e476b7"],

Cell[TextData[{
 "We construct the vector indices alone for all regions, eliminate these from \
the master list of indices for the circumscribing polar zonohedron, and thus \
obtain the index triples for the \[OpenCurlyDoubleQuote]core\
\[CloseCurlyDoubleQuote] ",
 StyleBox["k",
  FontSlant->"Italic"],
 "-armed spirallohedron. If you wish to see the list of core triples, remove \
the semi-colon from the end of the line",
 StyleBox[" ",
  FontWeight->"Bold"],
 StyleBox["core=Complement[triples, Sort/@regflat ];",
  FontWeight->"Bold"],
 "."
}], "Text",ExpressionUUID->"812888f4-9699-4675-8a93-4d02b80a2b44"],

Cell["\<\
regdex=Table[

Table[
  Table[
\tTable[ 1+Mod[{i-1,j-1,k-1}, n],
\t{k,j+1,n+sk}],
  {j, i+1, sk+(n/karm) }],
{i, sk+1, sk+((n/karm)-1) }],

{sk,0,n-kstep,kstep}];

regflat=Flatten[Map[ Flatten[#,2]&, regdex],1];
core=Complement[triples, Sort/@regflat ];
Print[\"There are \", c=Length[core], \" hexahedra in the core \
spirallohedron.\"];\
\>", "Input",ExpressionUUID->"5a5bffe4-9dd8-44d1-bceb-9b5b683477f3"],

Cell["\<\
(*we can compute the number of hexahedra*)
hexacore[n,karm]\
\>", "Input",ExpressionUUID->"9b7770b3-3d1a-412a-87e4-68f6691eb4ec"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Analyze Core Triples", "Subsubsection",ExpressionUUID->"40f5e2fd-e3c8-4cbf-822b-5e4b63da4c35"],

Cell[TextData[{
 "We have created the list ",
 StyleBox["core",
  FontSlant->"Italic"],
 " in the section above, and also defined ",
 StyleBox["n",
  FontSlant->"Italic"],
 ", etc. Here we merely apply some of the same types of analysis as in the \
section \[OpenCurlyDoubleQuote]Distinct Hexahedra\[CloseCurlyDoubleQuote] \
above. There is nothing done here which is needed below, in subsequent \
sections."
}], "Text",ExpressionUUID->"f7227771-4424-404c-8613-c5e10ec22930"],

Cell["\<\
hemi=If[EvenQ[n],n/2,((n-1)/2)];(*face-number of equatorial cycle(s)*)

spifacehex=Map[Sort[ cycleface[{#[[2]]-#[[1]], #[[3]]-#[[2]], #[[3]]-#[[1]]}] \
]&, core];(*preserves order of triples while converting to face-indices*)
Print[\"The lowest-term face-index triples are \", \
spidexface=Union[spifacehex] ];
Print[];
Print[\"There are \", spinumhex=Length[spidexface], \" different types of \
hexahedra\"];\
\>", "Input",ExpressionUUID->"6b11487d-6dd8-41f2-b7a2-efa94c5608f4"],

Cell["\<\
spiq1=Table[(*find positions in general list of each type of face-indexed \
hexahedron*)
Flatten[Position[ spifacehex, spidexface[[j]]]],
{j,Length[spidexface]}];

Print[\"The \",Length[core],\" hexahedra fall into sets of \
\",spihexsets=Map[Length[#]&, spiq1]];(*this many of each type, ordered from \
lowest face-index to highest*)
Print[];Print[];

spirephex=Map[ First[#]&, spiq1];(*just choose the first of each sublist to \
represent that type*)
(*go ahead and get representative volumes*)
spirephexvols=Map[ Det[ v[[ # ]] ]&, core[[spirephex]] ];

(*now go back to vector indices for each type*)
Print[\"The vector triples are \", core[[spirephex]]];
Print[];Print[];
(*recall the corresponding face-index triples*)
Print[\"The face triples are \", spidexface];
Print[];Print[];

(*and find the volumes for each type, in face-index order*)
Print[\"The corresponding volumes are \", spirephexvols];

Print[];
Print[\"There are \",
Length[ Union[spirephexvols,SameTest->(Chop[ #1-#2 ]==0&)] ],
\" different volumes.\"]\
\>", "Input",ExpressionUUID->"6ed255dc-84bd-47b1-be22-2f970980fc7f"],

Cell["\<\
(*now we do not reduce face-indices to lowest terms*)
spifaceindices=Map[
{#[[2]]-#[[1]], #[[3]]-#[[2]], #[[3]]-#[[1]]}&, core[[spirephex]] ];
Print[\"The face indices, not reduced to lowest terms, are \", spifaceindices];
Print[];Print[];
Print[\"The core symbolic terms for hexahedral volumes are \", \
Map[sinproduct[#]&, spifaceindices]];\
\>", "Input",ExpressionUUID->"27780919-a0b5-4472-bc59-0d5964ccc434"],

Cell["\<\
spisymbs=Map[{
#,
{#[[2]]-#[[1]], #[[3]]-#[[2]], #[[3]]-#[[1]]},
sinproduct[ {#[[2]]-#[[1]], #[[3]]-#[[2]], #[[3]]-#[[1]]} ],
N[symhexvol[#, n, pitch ]]
}&, core[[spirephex]] ];


TraditionalForm[
TableForm[spisymbs,
TableSpacing->{4,2},
TableHeadings->{None,
{\"Vectors\", \"Faces\", \"Core Symbolic Expression\",\"Numeric Volume\"}
}]
]\
\>", "Input",ExpressionUUID->"9678ca6b-91c6-48b6-ac48-fde09809508d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create Spirallohedron", "Subsubsection",ExpressionUUID->"5e39d4c5-03d1-4cee-bc92-c0244297b2fe"],

Cell["\<\
So far, the nested loop structure below only works for 3- and 4-armed \
spirallohedra.\
\>", "Text",ExpressionUUID->"b04aaa57-2db0-4628-9ec0-cf3c435cd185"],

Cell["\<\
(*set n, pitch, edge length, make vectors, find triples*)
n=12;
pitch=ArcTan[ Sqrt[1/2] ];(*at this pitch, orthogonal shadow of hypercube*)
edge=1;
v=vectors[n,1/Degree pitch,edge];(*correct for radian measure*)
karm=3;
kstep=n/karm;

pt=Chop[ (Plus@@v)/2 ];
(*works for all 3- and 4-armed*)
spirhex=Table[
  Table[
  If[i<2,mark=-pt,mark=-pt+(Plus@@v[[ Range[1,i-1] ]]) ];
  If[j>(kstep)+1 && j<(2*kstep)+1,
    mark=mark+(Plus@@v[[ Range[(kstep)+1,j-1] ]]),
\tmark=mark+(Plus@@v[[ Range[(2*kstep)+1,j-1] ]]) ];\t
\tTable[ newhex[ v[[ 1+Mod[{i-1,j-1,k-1}, n] ]], mark],
\t{k, If[j<(2*kstep)+1, (2*kstep)+1, (3*kstep)+1], n}],
  {j, If[i<kstep+1, kstep+1, (2*kstep)+1], (n-kstep) }],
{i, 1, n-(2*kstep) }];

Show[spirhex,(*show spirallohedron composed by hexahedra*)
Axes->True,
ViewPoint->{0,0,3}];\
\>", "Input",ExpressionUUID->"4657ce2b-c52c-4c27-83c8-ef98b9dac957"],

Cell["We can, of course, explode the hexahedra apart.", "Text",ExpressionUUID->"b3e0ffb6-3b88-4770-b8e0-23ad4e005e28"],

Cell["\<\
h1=Flatten[spirhex,2];
sca=0.25;
xaq=Map[ trans[#, sca*cent[ vunion[ Flatten[ parse[ # ], 1] ] ] ]&, h1];
Show[xaq,(*show hexahedra*)
Axes->True,
ViewPoint->2.25*unit[{0,0,3}]];\
\>", "Input",ExpressionUUID->"c4ee706b-5196-480b-9faf-9f05ad30bb73"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Color Hexahedra by Volume", "Subsubsection",ExpressionUUID->"4ddf8e78-2d20-48ca-b85f-82b7b89d2c95"],

Cell[TextData[{
 "Having succeeded in creating 3- and 4-armed spirallohedra from rhombic \
hexahedra, I wondered what the distribution of volume\[LongDash]of the \
different types of hexahedra, roughly\[LongDash]might look like. I modified \
the nested loop to give the output {indices, hexahedron}, to facilitate \
finding the volume of any given hexahedron.\n\nWe use ",
 StyleBox["n",
  FontSlant->"Italic"],
 "=24, ",
 StyleBox["k",
  FontSlant->"Italic"],
 "=3, to get a reasonably complicated spirallohedron for a test subject."
}], "Text",ExpressionUUID->"f4a2b5af-c576-4dca-8fd6-7a6105904d83"],

Cell["\<\
(*set n, pitch, edge length, make vectors, find triples*)
n=24;
pitch=ArcTan[ Sqrt[1/2] ];(*at this pitch, orthogonal shadow of hypercube*)
edge=1;(*set to (3/n)^.5 to obtain a \"normalized eutactic star\"*)
v=vectors[n,1/Degree pitch,edge];(*correct for radian measure*)
karm=3;
kstep=n/karm;

(*creat list {triple, hexahedron}*)
pt=Chop[ (Plus@@v)/2 ];
(*works for all 3- and 4-armed*)
dexspirhex=Table[
  Table[
  If[i<2,mark=-pt,mark=-pt+(Plus@@v[[ Range[1,i-1] ]]) ];
  If[j>(kstep)+1 && j<(2*kstep)+1,
    mark=mark+(Plus@@v[[ Range[(kstep)+1,j-1] ]]),
\tmark=mark+(Plus@@v[[ Range[(2*kstep)+1,j-1] ]]) ];\t
\tTable[ {1+Mod[{i-1,j-1,k-1}, n], newhex[ v[[ 1+Mod[{i-1,j-1,k-1}, n] ]], \
mark] },
\t{k, If[j<(2*kstep)+1, (2*kstep)+1, (3*kstep)+1], n}],
  {j, If[i<kstep+1, kstep+1, (2*kstep)+1], (n-kstep) }],
{i, 1, n-(2*kstep) }];\
\>", "Input",ExpressionUUID->"21cbf8f9-53be-4222-9264-b5ee089aeeb5"],

Cell["\<\
Here we look at the hexahedra, exploded slightly, to see if they actually \
exist.\
\>", "Text",ExpressionUUID->"7164e0a5-60fa-47fc-9b89-d0b0c68b19b3"],

Cell["\<\
h1=Flatten[dexspirhex,2];
sca=0.25;
xaq=Map[ trans[#[[2]], sca*cent[ vunion[ Flatten[ parse[ #[[2]] ], 1] ] ] ]&, \
h1];
Show[xaq,(*show hexahedra*)
Axes->True,
ViewPoint->2.25*unit[{0,0,3}]];\
\>", "Input",ExpressionUUID->"60765f0a-33e3-4990-a06d-ef939aaa13fb"],

Cell[TextData[{
 "Now we apply the ",
 StyleBox["volumeSort",
  FontWeight->"Bold"],
 " function to split the hexahedra into sublists according to volume."
}], "Text",ExpressionUUID->"13847558-ecbf-411c-b0f9-37cbd453f4de"],

Cell["\<\
h2=Flatten[dexspirhex,2];
Print[\"There are \",Length[h2], \" hexahedra.\"];
Print[];
shex=volumeSort[ h2 ];
Print[];
Print[\"The hexahedra fall into sets of \", Map[Length[#]&, shex], \" \
according to volume.\"];
Print[];
Print[\"There are \", colnum=Length[shex], \" different volumes.\"];
colorlist=Table[GrayLevel[k/colnum],{k, Length[shex]}];\
\>", "Input",ExpressionUUID->"d96d59ec-c517-40ff-83cc-39e1fd0d4fdb"],

Cell["Make a list of shades of gray, and display.", "Text",ExpressionUUID->"83db40fe-6d82-4b20-b205-5aa2ebed081f"],

Cell["\<\
colorlist=Table[GrayLevel[k/colnum],{k, Length[shex]}];

qaq=Graphics3D[
Table[
\tTable[ {SurfaceColor[colorlist[[i]],GrayLevel[0], 2 ],
\t\tFirst@shex[[i,k]]},{k, Length[ shex[[i]] ]}],
\t\t{i,Length[shex]}]
];

Show[qaq,
Boxed->False,
Background->GrayLevel[0],
LightSources -> 
   {
   {{-1,1,0}, RGBColor[1, 1, 1]},
   {{1,0,1}, RGBColor[1, 1, 1]}
   },
ViewPoint->2.5*unit[{0, 0, 1}]];\
\>", "Input",ExpressionUUID->"4684ff3a-0efe-4dd7-bfa7-2fc816fc4c17"],

Cell["Display the colored-by-volume hexahedra exploded slightly.", "Text",ExpressionUUID->"9dbb1016-98b5-43a5-9ac8-5ac9e777c56b"],

Cell["\<\
h1=Flatten[qaq[[1]],1];
Length[h1]
sca=0.25;
xaq=Graphics3D[{EdgeForm[],
Map[ trans[#, sca*cent[ vunion[ Flatten[ parse[ # ], 1] ] ] ]&, h1]}
];
Show[xaq,(*show hexahedra*)
Boxed->False,
Background->RGBColor[0, 0, .5],
LightSources -> 
   {
   {{-1,-1,0}, GrayLevel[1]},
   {{1,0,1}, GrayLevel[1]}
   },
ViewPoint->2.25*unit[{0,0,1}]];\
\>", "Input",ExpressionUUID->"479945f9-4578-4eea-a98d-236d3853e687"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Rinds, Layers, and Hidden Quasi-spirallohedra", "Subsubsection",ExpressionUUID->"e3b9568d-cf8b-4cf5-b990-4d43fc1f4ff3"],

Cell[TextData[{
 "I have been thinking about the arrangement of rhombic hexahedra within \
polar zonohedra for a long time. It is quite difficult to visualize. When ",
 StyleBox["n",
  FontSlant->"Italic"],
 " is greater than, say, 8, there are many different arrangements possible. \
One can perform other types of dissection upon polar zonohedra, too, for \
instance, into a mixture of rhombic dodecahedra and rhombic hexahedra, or \
into many different types of rhombic zonohedra.\n\nAs mentioned above, the \
ratios between hexahedra volumes are fixed, so let us imagine now that ",
 StyleBox["pitch",
  FontSlant->"Italic"],
 " is 35.2643+ degrees, so that any given type of hexahedron is at its \
maximum volume.\n\nWhenever ",
 StyleBox["n",
  FontSlant->"Italic"],
 " is a multiple of 3, there are ",
 StyleBox["n",
  FontSlant->"Italic"],
 "/3 cubes within the mix of hexahedra. The positions of these cubes within \
the polar zonohedron are not tightly constrained. One is free, for instance, \
to locate the cubes along the symmetry axis. For that matter, whenever ",
 StyleBox["n",
  FontSlant->"Italic"],
 " is a multiple of 4, there are ",
 StyleBox["n",
  FontSlant->"Italic"],
 "/4 of Kepler\[CloseCurlyQuote]s Rhombic Dodecahedra within a polar \
zonohedron, each formed from four equal hexahedra. We are free to locate \
these dodecahedra along the symmetry axis of the polar zonohedron, and let \
all other hexahedra accommodate their positions to these dodecahedra.\n\n\
3-armed spirallohedra clearly have cubes embedded at their north and south \
poles; 4-armed spirallohedra have Kepler\[CloseCurlyQuote]s Rhombic \
Dodecahedra embedded at ",
 StyleBox["their",
  FontSlant->"Italic"],
 " north and south poles; and the general ",
 StyleBox["k",
  FontSlant->"Italic"],
 "-armed spirallohedron have ",
 StyleBox["n=k",
  FontSlant->"Italic"],
 " polar zonohedra embedded at their north and south poles. Are the positions \
of these zonohedra, within spirallohedra, more tightly constrained than they \
are within the circumscribing polar zonohedra? This seems likely.\n\nHere we \
discover that, whatever the total range of positions of hexahedra or higher \
rhombic zonohedra may be, we can find \
\[OpenCurlyDoubleQuote]quasi-spirallohedra\[CloseCurlyDoubleQuote] nested \
within 3- and 4-armed spirallohedra. For reasons which are not yet clear to \
me, the hidden quasi-spirallohedra are more symmetrical in 3-armed \
spirallohedra. When ",
 StyleBox["n",
  FontSlant->"Italic"],
 " is large, ",
 StyleBox["n",
  FontSlant->"Italic"],
 " an odd multiple of 3, we develop a series of nested 3-armed \
quasi-spirallohedra, with the two end members of the series being the \
outermost, \[OpenCurlyDoubleQuote]true\[CloseCurlyDoubleQuote] \
spirallohedron, while the innermost 3-armed quasi-spirallohedron is simply a \
single cube. Were one to animate this series in reverse one would see a cube \
morphing into a 3-armed spirallohedron.\n\nHowever, the equivalent series, \
with ",
 StyleBox["n",
  FontSlant->"Italic"],
 " a multiple of 4, would ",
 StyleBox["not",
  FontSlant->"Italic"],
 " show Kepler\[CloseCurlyQuote]s Rhombic Dodecahedron morphing into a \
4-armed spirallohedron. This will be apparent if one experiments.\n\nThe \
initial example is ",
 StyleBox["n",
  FontSlant->"Italic"],
 "=15, ",
 StyleBox["k",
  FontSlant->"Italic"],
 "=3. Try these other pairs of {",
 StyleBox["n, k",
  FontSlant->"Italic"],
 "}: {16, 4}, {12, 3}, {12, 4}."
}], "Text",ExpressionUUID->"ed12eeff-d515-4a82-866d-452e63086ce9"],

Cell["\<\
(*set n, pitch, edge length, make vectors, find triples*)
n=15;
pitch=ArcTan[ Sqrt[1/2] ];(*at this pitch, orthogonal shadow of hypercube*)
edge=1;(*set to (3/n)^.5 to obtain a \"normalized eutactic star\"*)
v=vectors[n,1/Degree pitch,edge];(*correct for radian measure*)
karm=3;(*number of arms of spirallohedron*)
kstep=n/karm;(*length of step from one arm to next*)\
\>", "Input",ExpressionUUID->"6343216c-1b63-4a0e-aa6d-639f9b0d82b0"],

Cell["\<\
To facilitate selection of hexahedral layers, we form the expression {index \
triple, center of hexahedron, hexahedron}.\
\>", "Text",ExpressionUUID->"b7276880-8f47-48d4-9e77-f9e3669e351a"],

Cell["\<\
(*create list {triple, hexahedron center, hexahedron}*)
pt=Chop[ (Plus@@v)/2 ];
(*works for all 3- and 4-armed*)
dexspirhex=Table[
  Table[
  If[i<2,mark=-pt,mark=-pt+(Plus@@v[[ Range[1,i-1] ]]) ];
  If[j>(kstep)+1 && j<(2*kstep)+1,
    mark=mark+(Plus@@v[[ Range[(kstep)+1,j-1] ]]),
\tmark=mark+(Plus@@v[[ Range[(2*kstep)+1,j-1] ]]) ];
\t\t
\tTable[
\t{
\t1+Mod[{i-1,j-1,k-1}, n],(*index triple*)
\tmark+(Plus@@v[[ 1+Mod[{i-1,j-1,k-1}, n] ]]/2),(*hexahedron center*)
\tnewhex[ v[[ 1+Mod[{i-1,j-1,k-1}, n] ]], mark](*hexahedron*)
\t},
\t
\t{k, If[j<(2*kstep)+1, (2*kstep)+1, (3*kstep)+1], n}],
  {j, If[i<kstep+1, kstep+1, (2*kstep)+1], (n-kstep) }],
{i, 1, n-(2*kstep) }];

(*flatten nested list of {triples, centers, hexahedra}*)
allhex=Flatten[dexspirhex,2];\
\>", "Input",ExpressionUUID->"91968e0a-67a7-494a-9bcc-a60d7ecace07"],

Cell["\<\
We are going to find the outermost layer of hexahedra by selecting all \
hexahedra with centers closest to face-centers of the spirallohedron.\
\>", "Text",ExpressionUUID->"f0c74bcc-dc6a-4ebb-9614-4891cb8003f2"],

Cell["\<\
(*find face-centers of spirallohedron*)
a=Spirallohedron[n,karm];
fcents=Chop[Map[ cent[ vunion[#] ]&,  parse[a]]];

(*find those hexahedra closest to face centers; outermost layer*)
selhex=Table[
Select[allhex, mag[#[[2]]-fcents[[k]] ]<0.6&],
{k,Length[fcents]}];\
\>", "Input",ExpressionUUID->"0912f9fd-074c-4508-9d2d-c1d9b050a889"],

Cell["\<\
Now we discard duplicate hexahedra, and then subtract the layer from the \
spirallohedron.\
\>", "Text",ExpressionUUID->"59400a16-2e91-45fc-852f-e3955f2128c8"],

Cell["\<\
(*discard duplicate hexahedra and flatten list*)
Length[ layer1=Union[Flatten[selhex,1], SameTest->(#1[[1]]==#2[[1]]&)] ]

(*now find all hexahedra not in outermost layer*)
Length[ innerhex=Complement[ allhex, layer1, SameTest->(#1[[1]]==#2[[1]]&) ] ]

(*hexahedra of hidden quasi-spirallohedron*)
hidden=Map[#[[3]]&, innerhex];

Show[hidden,(*show hexahedra of quasi-spirallohedron*)
Axes->True,
ViewPoint->2.25*unit[{0,0,3}]];\
\>", "Input",ExpressionUUID->"c3d4fba3-adc8-4931-96a9-f47bdbe4e6ba"],

Cell["\<\
Finally we discard all coincident faces, giving a quasi-spirallohedron as a \
list of its exterior faces..\
\>", "Text",ExpressionUUID->"db07b49d-f8f8-4993-b0d4-6931430126d2"],

Cell["\<\
Print[\"There are \",Length[f1=parse[hidden]],\" polygons altogether.\"]
Print[\"There are \", Length[f2=dePair[f1] ],\" unshared polygons.\"]
newsurface=Graphics3D[Polygon /@ f2];

Show[newsurface,(*show faces of hidden quasi-spirallohedron*)
Axes->True,
ViewPoint->2.25*unit[{0,0,3}]];\
\>", "Input",ExpressionUUID->"f4203258-d431-4975-a5fe-8c5c6a3c2e62"],

Cell[TextData[{
 "Now we can find the next hidden quasi-spirallohedron. For 3-armed \
spirallohedra, if ",
 StyleBox["n",
  FontSlant->"Italic"],
 "=15, as when ",
 StyleBox["n",
  FontSlant->"Italic"],
 " is odd, generally, the innermost quasi-spirallohedron is a single cube. It \
is as though ",
 StyleBox["n",
  FontSlant->"Italic"],
 " is descending in steps of six: 15, 9, 3.",
 " When ",
 StyleBox["n",
  FontSlant->"Italic"],
 " is even, the innermost quasi-spirallohedron is a quasi ",
 StyleBox["n",
  FontSlant->"Italic"],
 "=6. Below, we simply overwrite pre-existing variables so that the process \
of hidden quasi-spirallohedron extraction can be iterated; each time we \
finish by finding the exterior faces, and name this \
\[OpenCurlyDoubleQuote]newsurface.\[CloseCurlyDoubleQuote] Similarly, each \
time we name the hidden hexahedra \[OpenCurlyDoubleQuote]innerhex.\
\[CloseCurlyDoubleQuote]"
}], "Text",ExpressionUUID->"95ab182d-d6eb-464e-8363-992f0c5fe44d"],

Cell["\<\
(*find face-centers of spirallohedron*)
a=newsurface;
fcents=Chop[Map[ cent[ vunion[#] ]&,  parse[a]]];

(*find those hexahedra closest to face centers; outermost layer*)
selhex=Table[
Select[innerhex, mag[#[[2]]-fcents[[k]] ]<0.6&],
{k,Length[fcents]}];\
\>", "Input",ExpressionUUID->"95392e52-edc5-4eed-aef9-ee54effb8525"],

Cell["\<\
(*discard duplicate hexahedra and flatten list*)
Length[ layer1=Union[Flatten[selhex,1], SameTest->(#1[[1]]==#2[[1]]&)] ]

(*now find all hexahedra not in outermost layer*)
Length[ innerhex=Complement[ innerhex, layer1, SameTest->(#1[[1]]==#2[[1]]&) \
] ]

(*hexahedra of hidden quasi-spirallohedron*)
hidden=Map[#[[3]]&, innerhex];

Show[hidden,(*show hexahedra of quasi-spirallohedron*)
Axes->True,
ViewPoint->2.25*unit[{0,0,3}]];\
\>", "Input",ExpressionUUID->"fd3fbb9d-0f91-460e-952d-b18a87862ea2"],

Cell["\<\
Print[\"There are \",Length[f1=parse[hidden]],\" polygons altogether.\"]
Print[\"There are \", Length[f2=dePair[f1] ],\" unshared polygons.\"]
newsurface=Graphics3D[Polygon /@ f2];
Show[newsurface,(*show faces of hidden quasi-spirallohedron*)
Axes->True,
ViewPoint->2.25*unit[{0,0,3}]];\
\>", "Input",ExpressionUUID->"0bf8d101-4cf9-45ab-8a62-8c86e3943307"],

Cell[TextData[{
 "Now we will fully iterate the process, and create an animation. We must \
have already set ",
 StyleBox["n",
  FontSlant->"Italic"],
 " and ",
 StyleBox["karm",
  FontSlant->"Italic"],
 " and made the spirallohedron of hexahedra first. The discovery of the \
hidden quasi-spirallohedra, below, becomes a somewhat lengthy process, when \
",
 StyleBox["n",
  FontSlant->"Italic"],
 ">15."
}], "Text",ExpressionUUID->"a1b50d5f-0053-442e-a055-6802a5f4c598"],

Cell["\<\
newsurface=Spirallohedron[n,karm];
innerhex=allhex;
jlim=Floor[(n-3)/6];(*number of steps*)

quasi=Join[{newsurface},
Table[

(*find face-centers of spirallohedron*)
fcents=Chop[Map[ cent[ vunion[#] ]&,  parse[newsurface]]];

(*find those hexahedra closest to face centers; outermost layer*)
selhex=Table[
Select[innerhex, mag[#[[2]]-fcents[[k]] ]<0.6&],
{k,Length[fcents]}];

(*discard duplicate hexahedra and flatten list*)
layer1=Union[Flatten[selhex,1], SameTest->(#1[[1]]==#2[[1]]&)];

(*now find all hexahedra not in outermost layer*)
innerhex=Complement[ innerhex, layer1, SameTest->(#1[[1]]==#2[[1]]&) ];

(*hexahedra of hidden quasi-spirallohedron*)
hidden=Map[#[[3]]&, innerhex];
f1=parse[hidden];
f2=dePair[f1];
newsurface=Graphics3D[Polygon /@ f2],
{jlim}]
];

Table[(*display series of polyhedra*)
Show[ quasi[[k]],
Boxed->False,
ViewPoint->{0,0,2.5}],
{k, Length[quasi]}];\
\>", "Input",ExpressionUUID->"8e40d2c1-2750-444a-84ad-864c92042074"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Experimental", "Subsubsection",
 ImageRegion->{{0, 1}, {0, 
  1}},ExpressionUUID->"2fb94353-ed92-4b62-8e0e-43509c13c165"],

Cell[TextData[{
 "Here we make ",
 StyleBox["k",
  FontSlant->"Italic"],
 "-regions with the output of the nested loops in the form {index triple, \
center of hexahedron, hexahedron}, which allows us to, say, display only \
those hexahedra with centers below a certain level.\n",
 "\nBy example we set ",
 StyleBox["n",
  FontSlant->"Italic"],
 "=15, ",
 StyleBox["k",
  FontSlant->"Italic"],
 "=3. We call ",
 StyleBox["k",
  FontSlant->"Italic"],
 " \[OpenCurlyDoubleQuote]karm\[CloseCurlyDoubleQuote] to avoid confusion \
with the nested loops, {i,j,k}."
}], "Text",ExpressionUUID->"7d02db49-7f70-45eb-a71c-21dbd25b3a0b"],

Cell["\<\
(*set n, pitch, edge length, make vectors, find triples*)
n=15;
pitch=ArcTan[ Sqrt[1/2] ];(*at this pitch, orthogonal shadow of hypercube*)
edge=1;
v=vectors[n,1/Degree pitch,edge];(*correct for radian measure*)
karm=3;
kstep=n/karm;\
\>", "Input",ExpressionUUID->"aedff6af-3d32-4a13-a30e-5d6e719d74b1"],

Cell[TextData[{
 "We construct all ",
 StyleBox["k ",
  FontSlant->"Italic"],
 "of the ",
 StyleBox["k",
  FontSlant->"Italic"],
 "-regions."
}], "Text",ExpressionUUID->"6b107d32-b3c4-427e-9a26-28945e26982d"],

Cell["\<\
pt=Chop[ (Plus@@v)/2 ];(*sum of vectors, divided by 2*)

allregions=Table[

Table[
  Table[If[i==1,mark=-pt,mark=-pt+(Plus@@v[[ Range[sk+1,i-1] ]]) ];
\tTable[
\t{
\t1+Mod[{i-1,j-1,k-1}, n],(*index triple*)
\tmark+(Plus@@v[[ 1+Mod[{i-1,j-1,k-1}, n] ]]/2),(*hexahedron center*)
\tnewhex[ v[[ 1+Mod[{i-1,j-1,k-1}, n] ]], mark](*hexahedron*)
\t},
\t{k,j+1,n+sk}],
  {j, i+1, sk+(n/karm) }],
{i, sk+1, sk+((n/karm)-1) }],

{sk,0,n-kstep,kstep}];\
\>", "Input",ExpressionUUID->"ef055086-2b46-4d82-99f1-fd04c99d51de"],

Cell[TextData[{
 "We flatten the nested loops and then, for no particular reason, remove \
coincident faces from the first region, and display the resulting \
\[OpenCurlyDoubleQuote]region-polyhedron,\[CloseCurlyDoubleQuote] identical \
in outward appearance to the region of hexahedra. It is interesting to use \
the ",
 StyleBox["colorSort",
  FontWeight->"Bold"],
 " function on such a region-polyhedron (this region-polyhedron has been \
named \[OpenCurlyDoubleQuote]regpoly\[CloseCurlyDoubleQuote]; go to the \
\[OpenCurlyDoubleQuote]Color by Area\[CloseCurlyDoubleQuote] section, \
above)."
}], "Text",ExpressionUUID->"09261815-be59-420a-a2c9-c861843440f8"],

Cell["\<\
(*flatten nested list of {triples, centers, hexahedra}*)
hexreg=Map[Flatten[#,2]&, allregions];

f1=dePair[ parse[ hexreg[[1]] ] ];
Show[regpoly=Graphics3D[Polygon/@f1],
Axes->True,
ViewPoint->{0,0,-3}];\
\>", "Input",ExpressionUUID->"1ecaff45-0018-4aa6-825e-29ec87bd9360"],

Cell[TextData[{
 "Make the k-armed spirallohedron, then select all regional hexahedra with ",
 StyleBox["z",
  FontSlant->"Italic"],
 " coordinate less than zero, and display spirallohedron with sublist of \
regional hexahedra."
}], "Text",ExpressionUUID->"5ede45b0-fd89-4236-b6f1-d495fee2ec55"],

Cell["\<\
a=Spirallohedron[n,karm];

h1=Table[
Map[#[[3]]&, Select[hexreg[[k]], #[[2,3]]<0&] ],
{k,Length[hexreg]}];

Show[xaq={a,h1},
Axes->True,
ViewPoint->2.25*unit[{0,0,1}]];\
\>", "Input",ExpressionUUID->"df307b3b-5942-4394-8d28-414b51c9dd22"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
AutoGeneratedPackage->None,
WindowToolbars->{},
InitializationCellEvaluation->True,
WindowSize->{743, 881},
WindowMargins->{{6, Automatic}, {Automatic, 8}},
ShowCellLabel->True,
ShowCellTags->False,
Magnification->1,
FrontEndVersion->"11.2 for Microsoft Windows (64-bit) (2017\:5e7410\:67082\
\:65e5)",
StyleDefinitions->Notebook[{
   Cell[
    CellGroupData[{
      Cell["Style Definitions", "Subtitle"], 
      Cell[
      "Modify the definitions below to change the default appearance of all \
cells in a given style.  Make modifications to any definition using commands \
in the Format menu.", "Text"], 
      Cell[
       CellGroupData[{
         Cell["Style Environment Names", "Section"], 
         Cell[
          StyleData[All, "Working"], PageWidth -> WindowWidth, 
          CellLabelMargins -> {{12, Inherited}, {Inherited, Inherited}}, 
          ScriptMinSize -> 9], 
         Cell[
          StyleData[All, "Presentation"], PageWidth -> WindowWidth, 
          CellLabelMargins -> {{24, Inherited}, {Inherited, Inherited}}, 
          ScriptMinSize -> 12], 
         Cell[
          StyleData[All, "Condensed"], PageWidth -> WindowWidth, 
          CellLabelMargins -> {{8, Inherited}, {Inherited, Inherited}}, 
          ScriptMinSize -> 8], 
         Cell[
          StyleData[All, "Printout"], PageWidth -> PaperWidth, 
          CellLabelMargins -> {{2, Inherited}, {Inherited, Inherited}}, 
          ScriptMinSize -> 5, 
          PrivateFontOptions -> {"FontType" -> "Outline"}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Notebook Options", "Section"], 
         Cell[
         "The options defined for the style below will be used at the \
Notebook level.", "Text"], 
         Cell[
          StyleData["Notebook"], PageHeaders -> {{
             Cell[
              TextData[{
                CounterBox["Page"]}], "PageNumber"], None, 
             Cell[
              TextData[{
                ValueBox["FileName"]}], "Header"]}, {
             Cell[
              TextData[{
                ValueBox["FileName"]}], "Header"], None, 
             Cell[
              TextData[{
                CounterBox["Page"]}], "PageNumber"]}}, CellFrameLabelMargins -> 
          6, StyleMenuListing -> None]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Styles for Headings", "Section"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Title"], CellMargins -> {{12, Inherited}, {20, 40}}, 
             CellGroupingRules -> {"TitleGrouping", 0}, PageBreakBelow -> 
             False, DefaultNewInlineCellStyle -> "None", 
             InputAutoReplacements -> {"TeX" -> StyleBox[
                 RowBox[{"T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "LaTeX" -> StyleBox[
                 RowBox[{"L", 
                   StyleBox[
                    AdjustmentBox[
                    "A", BoxMargins -> {{-0.36, -0.1}, {0, 0}}, 
                    BoxBaselineShift -> -0.2], FontSize -> Smaller], "T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "mma" -> "Mathematica", 
               "Mma" -> "Mathematica", "MMA" -> "Mathematica"}, 
             LanguageCategory -> "NaturalLanguage", CounterIncrements -> 
             "Title", 
             CounterAssignments -> {{"Section", 0}, {"Equation", 0}, {
               "Figure", 0}, {"Subtitle", 0}, {"Subsubtitle", 0}}, FontFamily -> 
             "Helvetica", FontSize -> 36, FontWeight -> "Bold"], 
            Cell[
             StyleData["Title", "Presentation"], 
             CellMargins -> {{24, 10}, {20, 40}}, LineSpacing -> {1, 0}, 
             FontSize -> 44], 
            Cell[
             StyleData["Title", "Condensed"], 
             CellMargins -> {{8, 10}, {4, 8}}, FontSize -> 20], 
            Cell[
             StyleData["Title", "Printout"], 
             CellMargins -> {{2, 10}, {12, 30}}, FontSize -> 24]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subtitle"], 
             CellMargins -> {{12, Inherited}, {20, 15}}, 
             CellGroupingRules -> {"TitleGrouping", 10}, PageBreakBelow -> 
             False, DefaultNewInlineCellStyle -> "None", 
             InputAutoReplacements -> {"TeX" -> StyleBox[
                 RowBox[{"T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "LaTeX" -> StyleBox[
                 RowBox[{"L", 
                   StyleBox[
                    AdjustmentBox[
                    "A", BoxMargins -> {{-0.36, -0.1}, {0, 0}}, 
                    BoxBaselineShift -> -0.2], FontSize -> Smaller], "T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "mma" -> "Mathematica", 
               "Mma" -> "Mathematica", "MMA" -> "Mathematica"}, 
             LanguageCategory -> "NaturalLanguage", CounterIncrements -> 
             "Subtitle", 
             CounterAssignments -> {{"Section", 0}, {"Equation", 0}, {
               "Figure", 0}, {"Subsubtitle", 0}}, FontFamily -> "Helvetica", 
             FontSize -> 24], 
            Cell[
             StyleData["Subtitle", "Presentation"], 
             CellMargins -> {{24, 10}, {20, 20}}, LineSpacing -> {1, 0}, 
             FontSize -> 36], 
            Cell[
             StyleData["Subtitle", "Condensed"], 
             CellMargins -> {{8, 10}, {4, 4}}, FontSize -> 14], 
            Cell[
             StyleData["Subtitle", "Printout"], 
             CellMargins -> {{2, 10}, {12, 8}}, FontSize -> 18]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subsubtitle"], 
             CellMargins -> {{12, Inherited}, {20, 15}}, 
             CellGroupingRules -> {"TitleGrouping", 20}, PageBreakBelow -> 
             False, DefaultNewInlineCellStyle -> "None", 
             InputAutoReplacements -> {"TeX" -> StyleBox[
                 RowBox[{"T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "LaTeX" -> StyleBox[
                 RowBox[{"L", 
                   StyleBox[
                    AdjustmentBox[
                    "A", BoxMargins -> {{-0.36, -0.1}, {0, 0}}, 
                    BoxBaselineShift -> -0.2], FontSize -> Smaller], "T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "mma" -> "Mathematica", 
               "Mma" -> "Mathematica", "MMA" -> "Mathematica"}, 
             LanguageCategory -> "NaturalLanguage", CounterIncrements -> 
             "Subsubtitle", 
             CounterAssignments -> {{"Section", 0}, {"Equation", 0}, {
               "Figure", 0}}, FontFamily -> "Helvetica", FontSize -> 14, 
             FontSlant -> "Italic"], 
            Cell[
             StyleData["Subsubtitle", "Presentation"], 
             CellMargins -> {{24, 10}, {20, 20}}, LineSpacing -> {1, 0}, 
             FontSize -> 24], 
            Cell[
             StyleData["Subsubtitle", "Condensed"], 
             CellMargins -> {{8, 10}, {8, 8}}, FontSize -> 12], 
            Cell[
             StyleData["Subsubtitle", "Printout"], 
             CellMargins -> {{2, 10}, {12, 8}}, FontSize -> 14]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Section"], CellDingbat -> "\[FilledSquare]", 
             CellMargins -> {{25, Inherited}, {8, 24}}, 
             CellGroupingRules -> {"SectionGrouping", 30}, PageBreakBelow -> 
             False, DefaultNewInlineCellStyle -> "None", 
             InputAutoReplacements -> {"TeX" -> StyleBox[
                 RowBox[{"T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "LaTeX" -> StyleBox[
                 RowBox[{"L", 
                   StyleBox[
                    AdjustmentBox[
                    "A", BoxMargins -> {{-0.36, -0.1}, {0, 0}}, 
                    BoxBaselineShift -> -0.2], FontSize -> Smaller], "T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "mma" -> "Mathematica", 
               "Mma" -> "Mathematica", "MMA" -> "Mathematica"}, 
             LanguageCategory -> "NaturalLanguage", CounterIncrements -> 
             "Section", 
             CounterAssignments -> {{"Subsection", 0}, {"Subsubsection", 0}}, 
             FontFamily -> "Helvetica", FontSize -> 16, FontWeight -> "Bold"], 
            Cell[
             StyleData["Section", "Presentation"], 
             CellMargins -> {{40, 10}, {11, 32}}, LineSpacing -> {1, 0}, 
             FontSize -> 24], 
            Cell[
             StyleData["Section", "Condensed"], 
             CellMargins -> {{18, Inherited}, {6, 12}}, FontSize -> 12], 
            Cell[
             StyleData["Section", "Printout"], 
             CellMargins -> {{13, 0}, {7, 22}}, FontSize -> 14]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subsection"], CellDingbat -> "\[FilledSmallSquare]", 
             CellMargins -> {{22, Inherited}, {8, 20}}, 
             CellGroupingRules -> {"SectionGrouping", 40}, PageBreakBelow -> 
             False, DefaultNewInlineCellStyle -> "None", 
             InputAutoReplacements -> {"TeX" -> StyleBox[
                 RowBox[{"T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "LaTeX" -> StyleBox[
                 RowBox[{"L", 
                   StyleBox[
                    AdjustmentBox[
                    "A", BoxMargins -> {{-0.36, -0.1}, {0, 0}}, 
                    BoxBaselineShift -> -0.2], FontSize -> Smaller], "T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "mma" -> "Mathematica", 
               "Mma" -> "Mathematica", "MMA" -> "Mathematica"}, 
             LanguageCategory -> "NaturalLanguage", CounterIncrements -> 
             "Subsection", CounterAssignments -> {{"Subsubsection", 0}}, 
             FontFamily -> "Times", FontSize -> 14, FontWeight -> "Bold"], 
            Cell[
             StyleData["Subsection", "Presentation"], 
             CellMargins -> {{36, 10}, {11, 32}}, LineSpacing -> {1, 0}, 
             FontSize -> 22], 
            Cell[
             StyleData["Subsection", "Condensed"], 
             CellMargins -> {{16, Inherited}, {6, 12}}, FontSize -> 12], 
            Cell[
             StyleData["Subsection", "Printout"], 
             CellMargins -> {{9, 0}, {7, 22}}, FontSize -> 12]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subsubsection"], CellDingbat -> 
             "\[FilledSmallSquare]", 
             CellMargins -> {{22, Inherited}, {8, 18}}, 
             CellGroupingRules -> {"SectionGrouping", 50}, PageBreakBelow -> 
             False, DefaultNewInlineCellStyle -> "None", 
             InputAutoReplacements -> {"TeX" -> StyleBox[
                 RowBox[{"T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "LaTeX" -> StyleBox[
                 RowBox[{"L", 
                   StyleBox[
                    AdjustmentBox[
                    "A", BoxMargins -> {{-0.36, -0.1}, {0, 0}}, 
                    BoxBaselineShift -> -0.2], FontSize -> Smaller], "T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "mma" -> "Mathematica", 
               "Mma" -> "Mathematica", "MMA" -> "Mathematica"}, 
             LanguageCategory -> "NaturalLanguage", CounterIncrements -> 
             "Subsubsection", FontFamily -> "Times", FontWeight -> "Bold"], 
            Cell[
             StyleData["Subsubsection", "Presentation"], 
             CellMargins -> {{34, 10}, {11, 26}}, LineSpacing -> {1, 0}, 
             FontSize -> 18], 
            Cell[
             StyleData["Subsubsection", "Condensed"], 
             CellMargins -> {{17, Inherited}, {6, 12}}, FontSize -> 10], 
            Cell[
             StyleData["Subsubsection", "Printout"], 
             CellMargins -> {{9, 0}, {7, 14}}, FontSize -> 11]}, Closed]]}, 
        Closed]], 
      Cell[
       CellGroupData[{
         Cell["Styles for Body Text", "Section"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Text"], CellMargins -> {{12, 10}, {7, 7}}, 
             InputAutoReplacements -> {"TeX" -> StyleBox[
                 RowBox[{"T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "LaTeX" -> StyleBox[
                 RowBox[{"L", 
                   StyleBox[
                    AdjustmentBox[
                    "A", BoxMargins -> {{-0.36, -0.1}, {0, 0}}, 
                    BoxBaselineShift -> -0.2], FontSize -> Smaller], "T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "mma" -> "Mathematica", 
               "Mma" -> "Mathematica", "MMA" -> "Mathematica"}, Hyphenation -> 
             True, LineSpacing -> {1, 3}, CounterIncrements -> "Text", 
             FontSize -> 14], 
            Cell[
             StyleData["Text", "Presentation"], 
             CellMargins -> {{24, 10}, {10, 10}}, LineSpacing -> {1, 5}, 
             FontSize -> 16], 
            Cell[
             StyleData["Text", "Condensed"], CellMargins -> {{8, 10}, {6, 6}},
              LineSpacing -> {1, 1}, FontSize -> 11], 
            Cell[
             StyleData["Text", "Printout"], CellMargins -> {{2, 2}, {6, 6}}, 
             TextJustification -> 0.5, FontSize -> 10]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["SmallText"], CellMargins -> {{12, 10}, {6, 6}}, 
             DefaultNewInlineCellStyle -> "None", Hyphenation -> True, 
             LineSpacing -> {1, 3}, LanguageCategory -> "NaturalLanguage", 
             CounterIncrements -> "SmallText", FontFamily -> "Helvetica", 
             FontSize -> 9], 
            Cell[
             StyleData["SmallText", "Presentation"], 
             CellMargins -> {{24, 10}, {8, 8}}, LineSpacing -> {1, 5}, 
             FontSize -> 12], 
            Cell[
             StyleData["SmallText", "Condensed"], 
             CellMargins -> {{8, 10}, {5, 5}}, LineSpacing -> {1, 2}, 
             FontSize -> 9], 
            Cell[
             StyleData["SmallText", "Printout"], 
             CellMargins -> {{2, 2}, {5, 5}}, TextJustification -> 0.5, 
             FontSize -> 7]}, Closed]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell["Styles for Input/Output", "Section"], 
         Cell[
         "The cells in this section define styles used for input and output \
to the kernel.  Be careful when modifying, renaming, or removing these \
styles, because the front end associates special meanings with these style \
names. Some attributes for these styles are actually set in FormatType Styles \
(in the last section of this stylesheet). ", "Text"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Input"], CellMargins -> {{45, 10}, {5, 7}}, 
             Evaluatable -> True, CellGroupingRules -> "InputGrouping", 
             CellHorizontalScrolling -> True, PageBreakWithin -> False, 
             GroupPageBreakWithin -> False, DefaultFormatType -> 
             DefaultInputFormatType, 
             HyphenationOptions -> {
              "HyphenationCharacter" -> "\[Continuation]"}, 
             AutoItalicWords -> {}, LanguageCategory -> "Formula", FormatType -> 
             InputForm, ShowStringCharacters -> True, NumberMarks -> True, 
             LinebreakAdjustments -> {0.85, 2, 10, 0, 1}, CounterIncrements -> 
             "Input", FontWeight -> "Bold"], 
            Cell[
             StyleData["Input", "Presentation"], 
             CellMargins -> {{72, Inherited}, {8, 10}}, LineSpacing -> {1, 0},
              FontSize -> 16], 
            Cell[
             StyleData["Input", "Condensed"], 
             CellMargins -> {{40, 10}, {2, 3}}, FontSize -> 11], 
            Cell[
             StyleData["Input", "Printout"], CellMargins -> {{39, 0}, {4, 6}},
              LinebreakAdjustments -> {0.85, 2, 10, 1, 1}, FontSize -> 9]}, 
           Closed]], 
         Cell[
          StyleData["InputOnly"], Evaluatable -> True, CellGroupingRules -> 
          "InputGrouping", CellHorizontalScrolling -> True, DefaultFormatType -> 
          DefaultInputFormatType, 
          HyphenationOptions -> {"HyphenationCharacter" -> "\[Continuation]"},
           AutoItalicWords -> {}, LanguageCategory -> "Formula", FormatType -> 
          InputForm, ShowStringCharacters -> True, NumberMarks -> True, 
          LinebreakAdjustments -> {0.85, 2, 10, 0, 1}, CounterIncrements -> 
          "Input", StyleMenuListing -> None, FontWeight -> "Bold"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Output"], CellMargins -> {{47, 10}, {7, 5}}, 
             CellEditDuplicate -> True, CellGroupingRules -> "OutputGrouping",
              CellHorizontalScrolling -> True, PageBreakWithin -> False, 
             GroupPageBreakWithin -> False, GeneratedCell -> True, 
             CellAutoOverwrite -> True, DefaultFormatType -> 
             DefaultOutputFormatType, 
             HyphenationOptions -> {
              "HyphenationCharacter" -> "\[Continuation]"}, 
             AutoItalicWords -> {}, LanguageCategory -> "Formula", FormatType -> 
             InputForm, CounterIncrements -> "Output"], 
            Cell[
             StyleData["Output", "Presentation"], 
             CellMargins -> {{72, Inherited}, {10, 8}}, LineSpacing -> {1, 0},
              FontSize -> 16], 
            Cell[
             StyleData["Output", "Condensed"], 
             CellMargins -> {{41, Inherited}, {3, 2}}, FontSize -> 11], 
            Cell[
             StyleData["Output", "Printout"], 
             CellMargins -> {{39, 0}, {6, 4}}, FontSize -> 9]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Message"], 
             CellMargins -> {{45, Inherited}, {Inherited, Inherited}}, 
             CellGroupingRules -> "OutputGrouping", PageBreakWithin -> False, 
             GroupPageBreakWithin -> False, GeneratedCell -> True, 
             CellAutoOverwrite -> True, ShowCellLabel -> False, 
             DefaultFormatType -> DefaultOutputFormatType, 
             HyphenationOptions -> {
              "HyphenationCharacter" -> "\[Continuation]"}, 
             AutoItalicWords -> {}, FormatType -> InputForm, 
             CounterIncrements -> "Message", StyleMenuListing -> None, 
             FontSize -> 11, FontColor -> RGBColor[0, 0, 1]], 
            Cell[
             StyleData["Message", "Presentation"], 
             CellMargins -> {{72, Inherited}, {Inherited, Inherited}}, 
             LineSpacing -> {1, 0}, FontSize -> 16], 
            Cell[
             StyleData["Message", "Condensed"], 
             CellMargins -> {{41, Inherited}, {Inherited, Inherited}}, 
             FontSize -> 11], 
            Cell[
             StyleData["Message", "Printout"], 
             CellMargins -> {{39, Inherited}, {Inherited, Inherited}}, 
             FontSize -> 7, FontColor -> GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Print"], 
             CellMargins -> {{45, Inherited}, {Inherited, Inherited}}, 
             CellGroupingRules -> "OutputGrouping", CellHorizontalScrolling -> 
             True, PageBreakWithin -> False, GroupPageBreakWithin -> False, 
             GeneratedCell -> True, CellAutoOverwrite -> True, ShowCellLabel -> 
             False, DefaultFormatType -> DefaultOutputFormatType, 
             HyphenationOptions -> {
              "HyphenationCharacter" -> "\[Continuation]"}, 
             AutoItalicWords -> {}, FormatType -> InputForm, 
             CounterIncrements -> "Print", StyleMenuListing -> None], 
            Cell[
             StyleData["Print", "Presentation"], 
             CellMargins -> {{72, Inherited}, {Inherited, Inherited}}, 
             LineSpacing -> {1, 0}, FontSize -> 16], 
            Cell[
             StyleData["Print", "Condensed"], 
             CellMargins -> {{41, Inherited}, {Inherited, Inherited}}, 
             FontSize -> 11], 
            Cell[
             StyleData["Print", "Printout"], 
             CellMargins -> {{39, Inherited}, {Inherited, Inherited}}, 
             FontSize -> 8]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Graphics"], 
             CellMargins -> {{4, Inherited}, {Inherited, Inherited}}, 
             CellGroupingRules -> "GraphicsGrouping", CellHorizontalScrolling -> 
             True, PageBreakWithin -> False, GeneratedCell -> True, 
             CellAutoOverwrite -> True, ShowCellLabel -> False, 
             DefaultFormatType -> DefaultOutputFormatType, LanguageCategory -> 
             None, FormatType -> InputForm, CounterIncrements -> "Graphics", 
             ImageMargins -> {{43, Inherited}, {Inherited, 0}}, 
             StyleMenuListing -> None, FontFamily -> "Courier", FontSize -> 
             10], 
            Cell[
             StyleData["Graphics", "Presentation"], 
             ImageMargins -> {{62, Inherited}, {Inherited, 0}}], 
            Cell[
             StyleData["Graphics", "Condensed"], 
             ImageMargins -> {{38, Inherited}, {Inherited, 0}}, Magnification -> 
             0.6], 
            Cell[
             StyleData["Graphics", "Printout"], 
             ImageMargins -> {{30, Inherited}, {Inherited, 0}}, Magnification -> 
             0.8]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["CellLabel"], StyleMenuListing -> None, FontFamily -> 
             "Helvetica", FontSize -> 9, FontColor -> RGBColor[0, 0, 1]], 
            Cell[
             StyleData["CellLabel", "Presentation"], FontSize -> 12], 
            Cell[
             StyleData["CellLabel", "Condensed"], FontSize -> 9], 
            Cell[
             StyleData["CellLabel", "Printout"], FontFamily -> "Courier", 
             FontSize -> 8, FontSlant -> "Italic", FontColor -> 
             GrayLevel[0]]}, Closed]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Inline Formatting", "Section"], 
         Cell[
         "These styles are for modifying individual words or letters in a \
cell exclusive of the cell tag.", "Text"], 
         Cell[
          StyleData["RM"], StyleMenuListing -> None, FontWeight -> "Plain", 
          FontSlant -> "Plain"], 
         Cell[
          StyleData["BF"], StyleMenuListing -> None, FontWeight -> "Bold"], 
         Cell[
          StyleData["IT"], StyleMenuListing -> None, FontSlant -> "Italic"], 
         Cell[
          StyleData["TR"], StyleMenuListing -> None, FontFamily -> "Times", 
          FontWeight -> "Plain", FontSlant -> "Plain"], 
         Cell[
          StyleData["TI"], StyleMenuListing -> None, FontFamily -> "Times", 
          FontWeight -> "Plain", FontSlant -> "Italic"], 
         Cell[
          StyleData["TB"], StyleMenuListing -> None, FontFamily -> "Times", 
          FontWeight -> "Bold", FontSlant -> "Plain"], 
         Cell[
          StyleData["TBI"], StyleMenuListing -> None, FontFamily -> "Times", 
          FontWeight -> "Bold", FontSlant -> "Italic"], 
         Cell[
          StyleData["MR"], StyleMenuListing -> None, FontFamily -> "Courier", 
          FontWeight -> "Plain", FontSlant -> "Plain"], 
         Cell[
          StyleData["MO"], StyleMenuListing -> None, FontFamily -> "Courier", 
          FontWeight -> "Plain", FontSlant -> "Italic"], 
         Cell[
          StyleData["MB"], StyleMenuListing -> None, FontFamily -> "Courier", 
          FontWeight -> "Bold", FontSlant -> "Plain"], 
         Cell[
          StyleData["MBO"], StyleMenuListing -> None, FontFamily -> "Courier",
           FontWeight -> "Bold", FontSlant -> "Italic"], 
         Cell[
          StyleData["SR"], StyleMenuListing -> None, FontFamily -> 
          "Helvetica", FontWeight -> "Plain", FontSlant -> "Plain"], 
         Cell[
          StyleData["SO"], StyleMenuListing -> None, FontFamily -> 
          "Helvetica", FontWeight -> "Plain", FontSlant -> "Italic"], 
         Cell[
          StyleData["SB"], StyleMenuListing -> None, FontFamily -> 
          "Helvetica", FontWeight -> "Bold", FontSlant -> "Plain"], 
         Cell[
          StyleData["SBO"], StyleMenuListing -> None, FontFamily -> 
          "Helvetica", FontWeight -> "Bold", FontSlant -> "Italic"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["SO10"], StyleMenuListing -> None, FontFamily -> 
             "Helvetica", FontSize -> 10, FontWeight -> "Plain", FontSlant -> 
             "Italic"], 
            Cell[
             StyleData["SO10", "Printout"], StyleMenuListing -> None, 
             FontFamily -> "Helvetica", FontSize -> 7, FontWeight -> "Plain", 
             FontSlant -> "Italic"], 
            Cell[
             StyleData["SO10", "EnhancedPrintout"], StyleMenuListing -> None, 
             FontFamily -> "Futura", FontSize -> 7, FontWeight -> "Plain", 
             FontSlant -> "Italic"]}, Closed]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Formulas and Programming", "Section"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["InlineFormula"], CellMargins -> {{10, 4}, {0, 8}}, 
             CellHorizontalScrolling -> True, 
             HyphenationOptions -> {
              "HyphenationCharacter" -> "\[Continuation]"}, LanguageCategory -> 
             "Formula", ScriptLevel -> 1, SingleLetterItalics -> True], 
            Cell[
             StyleData["InlineFormula", "Presentation"], 
             CellMargins -> {{24, 10}, {10, 10}}, LineSpacing -> {1, 5}, 
             FontSize -> 16], 
            Cell[
             StyleData["InlineFormula", "Condensed"], 
             CellMargins -> {{8, 10}, {6, 6}}, LineSpacing -> {1, 1}, 
             FontSize -> 11], 
            Cell[
             StyleData["InlineFormula", "Printout"], 
             CellMargins -> {{2, 0}, {6, 6}}, FontSize -> 10]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["DisplayFormula"], 
             CellMargins -> {{42, Inherited}, {Inherited, Inherited}}, 
             CellHorizontalScrolling -> True, DefaultFormatType -> 
             DefaultInputFormatType, 
             HyphenationOptions -> {
              "HyphenationCharacter" -> "\[Continuation]"}, LanguageCategory -> 
             "Formula", ScriptLevel -> 0, SingleLetterItalics -> True, 
             UnderoverscriptBoxOptions -> {LimitsPositioning -> True}], 
            Cell[
             StyleData["DisplayFormula", "Presentation"], 
             LineSpacing -> {1, 5}, FontSize -> 16], 
            Cell[
             StyleData["DisplayFormula", "Condensed"], LineSpacing -> {1, 1}, 
             FontSize -> 11], 
            Cell[
             StyleData["DisplayFormula", "Printout"], FontSize -> 10]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Program"], CellFrame -> {{0, 0}, {0.5, 0.5}}, 
             CellMargins -> {{10, 4}, {0, 8}}, CellHorizontalScrolling -> 
             True, LanguageCategory -> "Formula", ScriptLevel -> 1, 
             FontFamily -> "Courier"], 
            Cell[
             StyleData["Program", "Presentation"], 
             CellMargins -> {{24, 10}, {10, 10}}, LineSpacing -> {1, 5}, 
             FontSize -> 16], 
            Cell[
             StyleData["Program", "Condensed"], 
             CellMargins -> {{8, 10}, {6, 6}}, LineSpacing -> {1, 1}, 
             FontSize -> 11], 
            Cell[
             StyleData["Program", "Printout"], 
             CellMargins -> {{2, 0}, {6, 6}}, FontSize -> 9]}, Closed]]}, 
        Closed]], 
      Cell[
       CellGroupData[{
         Cell["Hyperlink Styles", "Section"], 
         Cell[
         "The cells below define styles useful for making hypertext \
ButtonBoxes.  The \"Hyperlink\" style is for links within the same Notebook, \
or between Notebooks.", "Text"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Hyperlink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0, 0, 1], 
             ButtonBoxOptions -> {
              Active -> True, ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`NotebookLocate[#2]}]& ), ButtonNote -> 
               ButtonData}], 
            Cell[
             StyleData["Hyperlink", "Presentation"], FontSize -> 16], 
            Cell[
             StyleData["Hyperlink", "Condensed"], FontSize -> 11], 
            Cell[
             StyleData["Hyperlink", "Printout"], FontSize -> 10, 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
         "The following styles are for linking automatically to the on-line \
help system.", "Text"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["MainBookLink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0, 0, 1], 
             ButtonBoxOptions -> {
              Active -> True, 
               Appearance -> {Automatic, None, "Normal", Automatic}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`HelpBrowserLookup["MainBook", #]}]& )}], 
            Cell[
             StyleData["MainBookLink", "Presentation"], FontSize -> 16], 
            Cell[
             StyleData["MainBookLink", "Condensed"], FontSize -> 11], 
            Cell[
             StyleData["MainBookLink", "Printout"], FontSize -> 10, 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["AddOnsLink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, FontFamily -> "Courier", 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0, 0, 1], 
             ButtonBoxOptions -> {
              Active -> True, 
               Appearance -> {Automatic, None, "Normal", Automatic}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`HelpBrowserLookup["AddOns", #]}]& )}], 
            Cell[
             StyleData["AddOnsLink", "Presentation"], FontSize -> 16], 
            Cell[
             StyleData["AddOnsLink", "Condensed"], FontSize -> 11], 
            Cell[
             StyleData["AddOnsLink", "Printout"], FontSize -> 10, 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["RefGuideLink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, FontFamily -> "Courier", 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0, 0, 1], 
             ButtonBoxOptions -> {
              Active -> True, 
               Appearance -> {Automatic, None, "Normal", Automatic}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`HelpBrowserLookup["RefGuide", #]}]& )}], 
            Cell[
             StyleData["RefGuideLink", "Presentation"], FontSize -> 16], 
            Cell[
             StyleData["RefGuideLink", "Condensed"], FontSize -> 11], 
            Cell[
             StyleData["RefGuideLink", "Printout"], FontSize -> 10, 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["GettingStartedLink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0, 0, 1], 
             ButtonBoxOptions -> {
              Active -> True, 
               Appearance -> {Automatic, None, "Normal", Automatic}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`HelpBrowserLookup["GettingStarted", #]}]& )}], 
            Cell[
             StyleData["GettingStartedLink", "Presentation"], FontSize -> 16], 
            Cell[
             StyleData["GettingStartedLink", "Condensed"], FontSize -> 11], 
            Cell[
             StyleData["GettingStartedLink", "Printout"], FontSize -> 10, 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["OtherInformationLink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0, 0, 1], 
             ButtonBoxOptions -> {
              Active -> True, 
               Appearance -> {Automatic, None, "Normal", Automatic}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`HelpBrowserLookup["OtherInformation", #]}]& )}], 
            Cell[
             StyleData["OtherInformationLink", "Presentation"], FontSize -> 
             16], 
            Cell[
             StyleData["OtherInformationLink", "Condensed"], FontSize -> 11], 
            
            Cell[
             StyleData["OtherInformationLink", "Printout"], FontSize -> 10, 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Styles for Headers and Footers", "Section"], 
         Cell[
          StyleData["Header"], CellMargins -> {{0, 0}, {4, 1}}, 
          DefaultNewInlineCellStyle -> "None", LanguageCategory -> 
          "NaturalLanguage", StyleMenuListing -> None, FontSize -> 10, 
          FontSlant -> "Italic"], 
         Cell[
          StyleData["Footer"], CellMargins -> {{0, 0}, {0, 4}}, 
          DefaultNewInlineCellStyle -> "None", LanguageCategory -> 
          "NaturalLanguage", StyleMenuListing -> None, FontSize -> 9, 
          FontSlant -> "Italic"], 
         Cell[
          StyleData["PageNumber"], CellMargins -> {{0, 0}, {4, 1}}, 
          StyleMenuListing -> None, FontFamily -> "Times", FontSize -> 10]}, 
        Closed]], 
      Cell[
       CellGroupData[{
         Cell["Palette Styles", "Section"], 
         Cell[
         "The cells below define styles that define standard ButtonFunctions, \
for use in palette buttons.", "Text"], 
         Cell[
          StyleData["Paste"], StyleMenuListing -> None, 
          ButtonStyleMenuListing -> Automatic, 
          ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
               FrontEnd`NotebookApply[
                FrontEnd`InputNotebook[], #, After]}]& )}], 
         Cell[
          StyleData["Evaluate"], StyleMenuListing -> None, 
          ButtonStyleMenuListing -> Automatic, 
          ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
               FrontEnd`NotebookApply[
                FrontEnd`InputNotebook[], #, All], 
               SelectionEvaluate[
                FrontEnd`InputNotebook[], All]}]& )}], 
         Cell[
          StyleData["EvaluateCell"], StyleMenuListing -> None, 
          ButtonStyleMenuListing -> Automatic, 
          ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
               FrontEnd`NotebookApply[
                FrontEnd`InputNotebook[], #, All], 
               FrontEnd`SelectionMove[
                FrontEnd`InputNotebook[], All, Cell, 1], 
               FrontEnd`SelectionEvaluateCreateCell[
                FrontEnd`InputNotebook[], All]}]& )}], 
         Cell[
          StyleData["CopyEvaluate"], StyleMenuListing -> None, 
          ButtonStyleMenuListing -> Automatic, 
          ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
               FrontEnd`SelectionCreateCell[
                FrontEnd`InputNotebook[], All], 
               FrontEnd`NotebookApply[
                FrontEnd`InputNotebook[], #, All], 
               FrontEnd`SelectionEvaluate[
                FrontEnd`InputNotebook[], All]}]& )}], 
         Cell[
          StyleData["CopyEvaluateCell"], StyleMenuListing -> None, 
          ButtonStyleMenuListing -> Automatic, 
          ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
               FrontEnd`SelectionCreateCell[
                FrontEnd`InputNotebook[], All], 
               FrontEnd`NotebookApply[
                FrontEnd`InputNotebook[], #, All], 
               FrontEnd`SelectionEvaluateCreateCell[
                FrontEnd`InputNotebook[], All]}]& )}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Placeholder Styles", "Section"], 
         Cell[
         "The cells below define styles useful for making placeholder objects \
in palette templates.", "Text"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Placeholder"], Placeholder -> True, StyleMenuListing -> 
             None, FontSlant -> "Italic", FontColor -> 
             RGBColor[0.890623, 0.864698, 0.384756], 
             TagBoxOptions -> {
              Editable -> False, Selectable -> False, StripWrapperBoxes -> 
               False}], 
            Cell[
             StyleData["Placeholder", "Presentation"]], 
            Cell[
             StyleData["Placeholder", "Condensed"]], 
            Cell[
             StyleData["Placeholder", "Printout"]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["PrimaryPlaceholder"], StyleMenuListing -> None, 
             DrawHighlighted -> True, FontSlant -> "Italic", Background -> 
             RGBColor[0.912505, 0.891798, 0.507774], 
             TagBoxOptions -> {
              Editable -> False, Selectable -> False, StripWrapperBoxes -> 
               False}], 
            Cell[
             StyleData["PrimaryPlaceholder", "Presentation"]], 
            Cell[
             StyleData["PrimaryPlaceholder", "Condensed"]], 
            Cell[
             StyleData["PrimaryPlaceholder", "Printout"]]}, Closed]]}, 
        Closed]], 
      Cell[
       CellGroupData[{
         Cell["FormatType Styles", "Section"], 
         Cell[
         "The cells below define styles that are mixed in with the styles of \
most cells.  If a cell's FormatType matches the name of one of the styles \
defined below, then that style is applied between the cell's style and its \
own options. This is particularly true of Input and Output.", "Text"], 
         Cell[
          StyleData["CellExpression"], PageWidth -> Infinity, 
          CellMargins -> {{6, Inherited}, {Inherited, Inherited}}, 
          ShowCellLabel -> False, ShowSpecialCharacters -> False, 
          AllowInlineCells -> False, Hyphenation -> False, 
          AutoItalicWords -> {}, StyleMenuListing -> None, FontFamily -> 
          "Courier", FontSize -> 12, Background -> GrayLevel[1]], 
         Cell[
          StyleData["InputForm"], InputAutoReplacements -> {}, 
          AllowInlineCells -> False, Hyphenation -> False, StyleMenuListing -> 
          None, FontFamily -> "Courier"], 
         Cell[
          StyleData["OutputForm"], PageWidth -> Infinity, TextAlignment -> 
          Left, LineSpacing -> {0.6, 1}, StyleMenuListing -> None, FontFamily -> 
          "Courier"], 
         Cell[
          StyleData["StandardForm"], 
          InputAutoReplacements -> {
           "->" -> "\[Rule]", ":>" -> "\[RuleDelayed]", "<=" -> 
            "\[LessEqual]", ">=" -> "\[GreaterEqual]", "!=" -> "\[NotEqual]", 
            "==" -> "\[Equal]", Inherited}, LineSpacing -> {1.25, 0}, 
          StyleMenuListing -> None, FontFamily -> "Courier"], 
         Cell[
          StyleData["TraditionalForm"], 
          InputAutoReplacements -> {
           "->" -> "\[Rule]", ":>" -> "\[RuleDelayed]", "<=" -> 
            "\[LessEqual]", ">=" -> "\[GreaterEqual]", "!=" -> "\[NotEqual]", 
            "==" -> "\[Equal]", Inherited}, LineSpacing -> {1.25, 0}, 
          SingleLetterItalics -> True, TraditionalFunctionNotation -> True, 
          DelimiterMatching -> None, StyleMenuListing -> None], 
         Cell[
         "The style defined below is mixed in to any cell that is in an \
inline cell within another.", "Text"], 
         Cell[
          StyleData["InlineCell"], TextAlignment -> Left, ScriptLevel -> 1, 
          StyleMenuListing -> None], 
         Cell[
          StyleData["InlineCellEditing"], StyleMenuListing -> None, 
          Background -> RGBColor[1, 0.749996, 0.8]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Automatic Styles", "Section"], 
         Cell[
         "The cells below define styles that are used to affect the display \
of certain types of objects in typeset expressions.  For example, \
\"UnmatchedBracket\" style defines how unmatched bracket, curly bracket, and \
parenthesis characters are displayed (typically by coloring them to make them \
stand out).", "Text"], 
         Cell[
          StyleData["UnmatchedBracket"], StyleMenuListing -> None, FontColor -> 
          RGBColor[0.760006, 0.330007, 0.8]]}, Closed]]}, Open]]}, Visible -> 
  False, FrontEndVersion -> 
  "11.2 for Microsoft Windows (64-bit) (2017\:5e7410\:67082\:65e5)", 
  StyleDefinitions -> "Default.nb"],
PrivateNotebookOptions -> {"ColorPalette" -> {RGBColor, -1}},
RenderingOptions -> {"RenderIncrementally" -> False},
RenderingOptions -> {"ObjectDithering" -> True},
RenderingOptions -> {"RasterDithering" -> False},
MacintoshSystemPageSetup -> \
"00`0001804P000000_X2@?oaonh32@9B:P85:0?l0@00004/0B`0000036L9H001\n\
0000I0000@400@0000000BL?0040000000000000000000000000000000000?o2\n\
okD<Y@V[00P100000000000000000000"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 128, 2, 103, "Title",ExpressionUUID->"7ab19a7d-0c38-4492-a711-e7b5496a4ca7"],
Cell[711, 26, 474, 14, 174, "Subtitle",ExpressionUUID->"00824f0d-11ba-40ba-96b9-80e771541d88"],
Cell[1188, 42, 212, 5, 68, "Subsubtitle",ExpressionUUID->"2d9706a1-60e0-4cb5-93dc-1ae782361cae"],
Cell[CellGroupData[{
Cell[1425, 51, 148, 2, 51, "Section",ExpressionUUID->"d624f0bf-c1dc-496f-b558-d4590fbf81ac"],
Cell[1576, 55, 3732, 106, 490, "Text",ExpressionUUID->"8fa128e9-aa47-4cca-8998-18fbab40a953"],
Cell[5311, 163, 565, 17, 249, "Input",ExpressionUUID->"552cf0ec-1a26-4e14-a283-f814e1896c64"],
Cell[5879, 182, 2368, 75, 229, "Text",ExpressionUUID->"30db6895-267f-41b1-9cc2-3ff3ae89d218"],
Cell[8250, 259, 609, 24, 357, "Input",ExpressionUUID->"cace26d2-8a70-4dd5-842a-808ff03b9a20"],
Cell[8862, 285, 1110, 21, 147, "Text",ExpressionUUID->"f1695d42-70a2-4fe3-bddb-f865251ad73f"],
Cell[9975, 308, 529, 20, 267, "Input",ExpressionUUID->"d5275b4c-24af-4784-abae-ddd13e1562f2"],
Cell[10507, 330, 1671, 42, 245, "Text",ExpressionUUID->"4df2fbaa-f005-47ed-9bde-a2f7fcbdac7d"],
Cell[12181, 374, 363, 12, 147, "Input",ExpressionUUID->"3c447f54-44e2-478c-b57b-8d86714846c5"],
Cell[12547, 388, 841, 29, 93, "Text",ExpressionUUID->"1de370fc-800f-428f-8bbd-59fa0d129364"],
Cell[13391, 419, 366, 7, 102, "Input",ExpressionUUID->"4f24c835-0911-4e80-b200-6ad19324e681"],
Cell[13760, 428, 3143, 143, 231, "Text",ExpressionUUID->"36ed2f1d-f247-46dc-ac80-7237c028ed5c"],
Cell[16906, 573, 136, 4, 57, "Input",ExpressionUUID->"47ad2fdd-d1f3-4137-9fdb-15183701aff9"],
Cell[17045, 579, 805, 22, 112, "Text",ExpressionUUID->"5145e16f-1708-4a89-9236-00796fc543ed"],
Cell[17853, 603, 231, 5, 72, "Input",ExpressionUUID->"9244b2e1-3edd-4697-9cdf-890356bf1b12"],
Cell[18087, 610, 1105, 34, 93, "Text",ExpressionUUID->"8466e669-2000-45fe-8999-e8b9f2440fec"],
Cell[19195, 646, 333, 12, 147, "Input",ExpressionUUID->"eac77012-3487-46d9-8e3d-e562003ea7c3"],
Cell[19531, 660, 2462, 91, 250, "Text",ExpressionUUID->"7b6671ad-fc2d-4b09-b761-29c9fe547da1"],
Cell[21996, 753, 403, 7, 117, "Input",ExpressionUUID->"e5f1e1ae-fb22-4b8e-ad1d-8beb5d296402"],
Cell[22402, 762, 1212, 37, 130, "Text",ExpressionUUID->"5ed380a7-67fb-4a48-9050-9c00a6fc789a"],
Cell[23617, 801, 615, 24, 357, "Input",ExpressionUUID->"4d304711-0972-4b8b-adba-70e049e3b2aa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[24269, 830, 123, 2, 31, "Section",ExpressionUUID->"b2d0a56f-7764-48f7-ac81-883b6d13996f"],
Cell[CellGroupData[{
Cell[24417, 836, 130, 0, 46, "Subsection",ExpressionUUID->"fb5d422b-0e81-4243-94d6-26fbe89c974e"],
Cell[24550, 838, 455, 13, 162, "Input",ExpressionUUID->"f1366694-8c54-4cce-97ee-c77206b03736",
 InitializationCell->True],
Cell[25008, 853, 652, 22, 282, "Input",ExpressionUUID->"603b0b41-3343-4b19-a02f-a2f084b0f4b1",
 InitializationCell->True],
Cell[25663, 877, 211, 5, 42, "Input",ExpressionUUID->"e7a8857c-de1a-4cab-8d26-3ef4f399e26d",
 InitializationCell->True],
Cell[25877, 884, 537, 15, 177, "Input",ExpressionUUID->"d57b1ae3-981f-422e-8497-edc1bdac7fe0",
 InitializationCell->True],
Cell[26417, 901, 476, 16, 192, "Input",ExpressionUUID->"eb150966-9591-4494-bb42-248fd95c7c93",
 InitializationCell->True],
Cell[26896, 919, 1524, 46, 642, "Input",ExpressionUUID->"94d283a6-d4b9-4e22-b0e0-6853a0a99383",
 InitializationCell->True],
Cell[28423, 967, 361, 11, 132, "Input",ExpressionUUID->"97caf093-bf68-4c24-97bd-6c469dbe4133",
 InitializationCell->True],
Cell[28787, 980, 293, 9, 87, "Input",ExpressionUUID->"1efbc69f-d288-402b-aca2-53c0ad040043",
 InitializationCell->True],
Cell[29083, 991, 410, 19, 252, "Input",ExpressionUUID->"88696b56-03dc-465b-b949-faf52388cf29",
 InitializationCell->True],
Cell[29496, 1012, 351, 16, 207, "Input",ExpressionUUID->"81c570ab-b7e3-4998-9dba-ffbd566cb4c9",
 InitializationCell->True],
Cell[29850, 1030, 1267, 33, 462, "Input",ExpressionUUID->"bebdda11-4fbc-4a96-a882-6e3aaa0daa46",
 InitializationCell->True],
Cell[31120, 1065, 472, 14, 162, "Input",ExpressionUUID->"767a9a94-1b08-49bc-83f0-356431a0dacf",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[31629, 1084, 95, 0, 30, "Subsection",ExpressionUUID->"a418cde6-fb54-43bd-b3a5-3c2258ef123e"],
Cell[31727, 1086, 507, 14, 177, "Input",ExpressionUUID->"81244d58-f00f-41af-94bc-390bfaed68b3",
 InitializationCell->True],
Cell[32237, 1102, 171, 5, 42, "Input",ExpressionUUID->"24fc42c6-2197-475c-b420-a49d36587b9c",
 InitializationCell->True],
Cell[32411, 1109, 475, 14, 192, "Input",ExpressionUUID->"7c35532e-b471-42fe-8b94-9c61bd526c8e",
 InitializationCell->True],
Cell[32889, 1125, 302, 11, 132, "Input",ExpressionUUID->"bab05664-2e1e-472c-8de7-36c92ee3c0f0",
 InitializationCell->True],
Cell[33194, 1138, 183, 5, 42, "Input",ExpressionUUID->"119ac633-8070-4baf-b5fd-00f0ddbde0dc",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[33414, 1148, 93, 0, 30, "Subsection",ExpressionUUID->"82d56358-db3e-4cd2-9d9e-7ec1b1c8cd9b"],
Cell[33510, 1150, 485, 16, 207, "Input",ExpressionUUID->"14f3a1b4-21fe-4815-b5ae-b848458af4ce",
 InitializationCell->True],
Cell[33998, 1168, 297, 8, 87, "Input",ExpressionUUID->"9a19210c-3791-4fdf-b340-3f0240432677",
 InitializationCell->True],
Cell[34298, 1178, 485, 12, 147, "Input",ExpressionUUID->"56cab51a-04f1-48f9-8f9d-2ff9bece5950",
 InitializationCell->True],
Cell[34786, 1192, 1253, 46, 642, "Input",ExpressionUUID->"200726e3-120a-4b25-9254-a2dc7a2339c2",
 InitializationCell->True],
Cell[36042, 1240, 740, 22, 297, "Input",ExpressionUUID->"861be807-f2a5-4c58-8847-d21ee3f9824d",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[36819, 1267, 86, 0, 30, "Subsection",ExpressionUUID->"35ba425f-1fd9-453d-87bb-bd988b88e95a"],
Cell[36908, 1269, 562, 17, 222, "Input",ExpressionUUID->"57983439-f0ce-4102-985d-3cf8abcf2cff",
 InitializationCell->True],
Cell[37473, 1288, 362, 11, 117, "Input",ExpressionUUID->"3cb84f99-19f7-4608-956c-17ed3ef19f73",
 InitializationCell->True],
Cell[37838, 1301, 259, 6, 57, "Input",ExpressionUUID->"a72cd375-3e8d-44e3-b6f8-ce8352548772",
 InitializationCell->True],
Cell[38100, 1309, 492, 14, 177, "Input",ExpressionUUID->"4822a130-68c9-45cb-b8a5-389f11379272",
 InitializationCell->True],
Cell[38595, 1325, 237, 6, 57, "Input",ExpressionUUID->"bf762e4e-478e-4063-8322-3172dccd37bc",
 InitializationCell->True],
Cell[38835, 1333, 515, 12, 147, "Input",ExpressionUUID->"1a808887-e361-4a2f-bc0f-6b3000851664",
 InitializationCell->True],
Cell[39353, 1347, 365, 7, 102, "Input",ExpressionUUID->"07396155-6cda-4fa4-b951-03b69f57e04d"],
Cell[39721, 1356, 214, 5, 42, "Input",ExpressionUUID->"ec4b1cf1-08a9-49ca-b5b8-94b9f19d9e1f",
 InitializationCell->True],
Cell[39938, 1363, 234, 7, 72, "Input",ExpressionUUID->"12466b11-6ec6-4acc-8c86-b34ba5068a21",
 InitializationCell->True],
Cell[40175, 1372, 451, 13, 162, "Input",ExpressionUUID->"e65a8aa0-9951-4434-a1b6-b54a6b19ed64",
 InitializationCell->True]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[40675, 1391, 130, 2, 31, "Section",ExpressionUUID->"3e88a299-70e0-4ba8-b945-d9bf0d49f06e"],
Cell[40808, 1395, 1382, 27, 226, "Text",ExpressionUUID->"16e775ac-8acb-46e4-b9c6-0e4de0513cdb"],
Cell[CellGroupData[{
Cell[42215, 1426, 90, 0, 46, "Subsection",ExpressionUUID->"9936738b-58c4-4597-9eb6-0d91494c0063"],
Cell[42308, 1428, 235, 8, 87, "Input",ExpressionUUID->"2ca2d6f1-2ce0-4d7a-8190-e4b8ece38c28"],
Cell[42546, 1438, 1252, 31, 462, "Input",ExpressionUUID->"01391231-6a0e-444c-bb8e-a954db1186e7"],
Cell[43801, 1471, 241, 6, 34, "Text",ExpressionUUID->"9dbe7360-b06a-4c34-aca8-b100768b0603"],
Cell[44045, 1479, 496, 14, 177, "Input",ExpressionUUID->"1488bd3f-b13d-4299-a3b0-4058993f08dd"],
Cell[44544, 1495, 678, 10, 109, "Text",ExpressionUUID->"bda99f31-755a-4c86-9df4-d9091bec4ceb"],
Cell[45225, 1507, 391, 7, 102, "Input",ExpressionUUID->"66deb197-7cb4-43ac-a508-b0afb0171ec0"],
Cell[45619, 1516, 226, 6, 87, "Input",ExpressionUUID->"305d8203-8a57-421b-8851-372ace137aae"]
}, Open  ]],
Cell[CellGroupData[{
Cell[45882, 1527, 134, 0, 30, "Subsection",ExpressionUUID->"70e080a6-1a13-4ad2-a524-5ca0df2d6b08"],
Cell[46019, 1529, 117, 0, 33, "Text",ExpressionUUID->"098f8172-f96d-450b-a094-3feabc022ad6"],
Cell[46139, 1531, 482, 10, 147, "Input",ExpressionUUID->"1b9f4c9a-3b30-4c8b-9f46-0e5adc62ed5b"],
Cell[46624, 1543, 143, 2, 33, "Text",ExpressionUUID->"429e0e7f-e741-415d-a402-1e07102e7e8e"],
Cell[46770, 1547, 637, 22, 327, "Input",ExpressionUUID->"37f13441-5eee-4a21-b1e2-25653b64d415"],
Cell[47410, 1571, 121, 0, 33, "Text",ExpressionUUID->"b26b17b5-5b09-45b1-9f1a-a3d3b521bb7f"],
Cell[47534, 1573, 659, 25, 387, "Input",ExpressionUUID->"b340bcfc-4e4b-452b-8a53-7d8cb850ae5a"],
Cell[48196, 1600, 171, 3, 33, "Text",ExpressionUUID->"71db1486-48a7-4f72-8a1b-5c15b0fd5ed0"],
Cell[48370, 1605, 598, 22, 327, "Input",ExpressionUUID->"95fe8780-d4f6-4053-acfe-baec4ba7055c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[49017, 1633, 137, 2, 31, "Section",ExpressionUUID->"0a2b8088-fc3f-4060-b0c2-810cede8fa42"],
Cell[49157, 1637, 845, 18, 149, "Text",ExpressionUUID->"2b241f09-c395-4c1a-979f-1862ddc07cc7"],
Cell[CellGroupData[{
Cell[50027, 1659, 90, 0, 46, "Subsection",ExpressionUUID->"eb40a8e8-dae0-4408-87b5-0a56db73dcc8"],
Cell[50120, 1661, 231, 8, 87, "Input",ExpressionUUID->"7209ec53-0bf3-462b-aa19-c7a704bd678e"],
Cell[50354, 1671, 1252, 31, 567, "Input",ExpressionUUID->"04d8f621-996a-4c1f-ad11-b090ec9c5f23"],
Cell[51609, 1704, 241, 6, 53, "Text",ExpressionUUID->"bd3ddc3b-98ab-4189-959f-7b393812a3ed"],
Cell[51853, 1712, 496, 14, 207, "Input",ExpressionUUID->"bfc85cdf-9975-46a1-97df-3dbcb238e33b"],
Cell[52352, 1728, 678, 10, 128, "Text",ExpressionUUID->"0f32a55e-cdca-4bf6-851e-425710a491a7"],
Cell[53033, 1740, 391, 7, 102, "Input",ExpressionUUID->"d0e5d591-fa15-42cb-a012-eefa81177f30"],
Cell[53427, 1749, 226, 6, 87, "Input",ExpressionUUID->"c1d9db9d-c8ba-42ec-9b44-f015d34f6638"]
}, Open  ]],
Cell[CellGroupData[{
Cell[53690, 1760, 134, 0, 30, "Subsection",ExpressionUUID->"df1898c2-59ae-4b29-96a3-f7ec99e6fc34"],
Cell[53827, 1762, 117, 0, 33, "Text",ExpressionUUID->"5f2755a2-7db5-4802-b2c5-ef3b57692a84"],
Cell[53947, 1764, 482, 10, 177, "Input",ExpressionUUID->"ad12975f-723c-4078-a9e4-4563a193ec14"],
Cell[54432, 1776, 143, 2, 33, "Text",ExpressionUUID->"1a31e7ef-d849-4dbf-967d-5ef2626d323e"],
Cell[54578, 1780, 637, 22, 357, "Input",ExpressionUUID->"da5c0406-9da0-4781-85b2-1d1769c9ea57"],
Cell[55218, 1804, 121, 0, 33, "Text",ExpressionUUID->"c22d40a2-1b3e-4f3c-b777-dd7e04673997"],
Cell[55342, 1806, 659, 25, 387, "Input",ExpressionUUID->"a9c41622-e00b-4e88-aa73-430e59ae2b94"],
Cell[56004, 1833, 167, 3, 33, "Text",ExpressionUUID->"caaf213f-f6f9-45e0-8165-9e1a3b709b76"],
Cell[56174, 1838, 849, 28, 417, "Input",ExpressionUUID->"993bde0a-a391-4eac-aa66-daf020b3b20f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[57072, 1872, 140, 2, 31, "Section",ExpressionUUID->"70030fba-6ba1-47d8-a2a1-cded5ff5b928"],
Cell[57215, 1876, 2199, 50, 359, "Text",ExpressionUUID->"6f61e04c-cad6-409f-8f11-a8704e8f540f"],
Cell[59417, 1928, 565, 22, 297, "Input",ExpressionUUID->"8c9825d1-71e4-4f1f-967c-7619d1ef8f9e"],
Cell[59985, 1952, 197, 5, 34, "Text",ExpressionUUID->"5b11d944-15df-44cb-8f5d-721d2c30aeb7"],
Cell[60185, 1959, 1252, 31, 462, "Input",ExpressionUUID->"14335dcc-ddb2-4f91-bfc9-efb0dc60748e"],
Cell[61440, 1992, 180, 5, 34, "Text",ExpressionUUID->"cf4dba4d-5cdc-4d41-a94b-11ff9bb98e37"],
Cell[61623, 1999, 156, 3, 42, "Input",ExpressionUUID->"ae594217-d0b1-4581-b1a3-b3a9923ba0d2"],
Cell[61782, 2004, 701, 14, 92, "Text",ExpressionUUID->"9347085a-75c5-41eb-bc5c-9d3607ea8101"],
Cell[62486, 2020, 421, 8, 117, "Input",ExpressionUUID->"6c29fe10-c45d-4d1a-a619-6153770d06a8"],
Cell[62910, 2030, 169, 6, 87, "Input",ExpressionUUID->"e3dd1d85-b2dd-46fc-b537-9b258bdd2d37"],
Cell[63082, 2038, 475, 11, 73, "Text",ExpressionUUID->"5999b263-5864-40c0-bd88-cd40d0128b7f"],
Cell[63560, 2051, 879, 21, 312, "Input",ExpressionUUID->"447d1e96-4cee-4d3f-88b1-d8461c48264e"],
Cell[64442, 2074, 537, 10, 91, "Text",ExpressionUUID->"5799b699-0f2d-4166-b02d-7b7f931a7b9d"],
Cell[64982, 2086, 825, 20, 297, "Input",ExpressionUUID->"673db5ff-a152-428a-a66e-3a171393b568"],
Cell[65810, 2108, 194, 3, 33, "Text",ExpressionUUID->"6fac8a07-b3f0-40c4-b7ea-bdb1357319f0"],
Cell[66007, 2113, 316, 9, 132, "Input",ExpressionUUID->"44e0f3d7-608e-4105-bff1-1bd2f5851bf5"],
Cell[66326, 2124, 527, 15, 54, "Text",ExpressionUUID->"7cf63404-9dfd-435c-a3bf-e486a0c05ec9"],
Cell[66856, 2141, 371, 8, 117, "Input",ExpressionUUID->"1f3a803f-eb67-4532-b9ae-897f33ea2631"],
Cell[67230, 2151, 590, 13, 90, "Text",ExpressionUUID->"5b240bf8-7ff6-4b5b-8194-485789c9c896"],
Cell[67823, 2166, 365, 8, 117, "Input",ExpressionUUID->"aca58be1-672a-4af0-b099-90b4b1ef12fb"],
Cell[68191, 2176, 1199, 34, 190, "Text",ExpressionUUID->"b70b507e-7622-4baf-855f-6e10159f94bc"],
Cell[69393, 2212, 473, 23, 342, "Input",ExpressionUUID->"ba168a46-c3d8-4786-b8bc-bdec413c0ecd"],
Cell[69869, 2237, 244, 4, 52, "Text",ExpressionUUID->"148e462e-b546-40c4-a736-1f130c773e16"],
Cell[70116, 2243, 246, 8, 117, "Input",ExpressionUUID->"a05be6c0-690e-4117-9ae0-e85eb5bde2d5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[70399, 2256, 134, 2, 31, "Section",ExpressionUUID->"ed1f1403-5e1b-4faf-a29d-95d9fae072cc"],
Cell[70536, 2260, 879, 21, 149, "Text",ExpressionUUID->"d9c52f6d-ce9d-4286-9fcf-79275d20e39a"],
Cell[CellGroupData[{
Cell[71440, 2285, 82, 0, 46, "Subsection",ExpressionUUID->"771c4de8-8898-489b-862a-58c2da255710"],
Cell[71525, 2287, 235, 8, 87, "Input",ExpressionUUID->"269e870b-274d-4800-945e-f09d7f137d32"],
Cell[71763, 2297, 1252, 31, 567, "Input",ExpressionUUID->"e8933bd0-8421-4115-8431-e2aa279e11e4"],
Cell[73018, 2330, 239, 6, 53, "Text",ExpressionUUID->"a0daed25-9e78-44c3-abd9-0873b7b454a7"],
Cell[73260, 2338, 496, 14, 207, "Input",ExpressionUUID->"30fa3e9e-eb12-4307-aa29-c7b028ce266e"],
Cell[73759, 2354, 678, 10, 128, "Text",ExpressionUUID->"dff5db20-a222-49a0-b36e-44d886010acd"],
Cell[74440, 2366, 391, 7, 102, "Input",ExpressionUUID->"6edb937b-5bbf-4140-80b3-ce8fcef2a516"],
Cell[74834, 2375, 226, 6, 87, "Input",ExpressionUUID->"f05ed87e-4d7a-4825-b16e-0b46a22fa09e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[75097, 2386, 134, 0, 30, "Subsection",ExpressionUUID->"8480c7b9-0f78-4464-b03a-b71bff22eeb5"],
Cell[75234, 2388, 117, 0, 33, "Text",ExpressionUUID->"951c8e7b-17bd-4c6c-98c9-cdba006a9b51"],
Cell[75354, 2390, 482, 10, 177, "Input",ExpressionUUID->"ef466e52-7916-452e-9f1a-11cd9894d953"],
Cell[75839, 2402, 143, 2, 33, "Text",ExpressionUUID->"aa480c9b-53dd-4e54-bc37-00d5f5c19df4"],
Cell[75985, 2406, 637, 22, 357, "Input",ExpressionUUID->"3f66825a-43c8-4f6c-85d6-abd121244c4f"],
Cell[76625, 2430, 121, 0, 33, "Text",ExpressionUUID->"d7c3b2c1-442e-4c43-b149-c73f17724380"],
Cell[76749, 2432, 659, 25, 387, "Input",ExpressionUUID->"272a3bf4-2cf6-4ca5-a03a-ca243135a847"],
Cell[77411, 2459, 167, 3, 33, "Text",ExpressionUUID->"31fc173e-230b-4a66-b61f-14e737bb8a84"],
Cell[77581, 2464, 1191, 36, 537, "Input",ExpressionUUID->"47a6203e-2277-49ec-86ca-b5b43d17a98c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[78821, 2506, 142, 2, 31, "Section",ExpressionUUID->"92469029-43c7-43f8-bea6-bbdd207e9075"],
Cell[78966, 2510, 547, 8, 109, "Text",ExpressionUUID->"adaf1811-02af-4c0f-b46f-92bc072e0895"],
Cell[79516, 2520, 223, 7, 72, "Input",ExpressionUUID->"88894df7-3adf-4e54-b71a-d1967ab1f6de"],
Cell[79742, 2529, 1252, 31, 552, "Input",ExpressionUUID->"0eb32673-6606-435e-aa4a-a76d228bfc1b"],
Cell[80997, 2562, 300, 6, 87, "Input",ExpressionUUID->"64fd19b8-4dae-4d9e-b5c9-ae4e316d13be"],
Cell[81300, 2570, 125, 1, 36, "Text",ExpressionUUID->"91ff5557-110e-421e-a46b-78428e8f138a"],
Cell[81428, 2573, 184, 4, 57, "Input",ExpressionUUID->"cbd0e0e4-0955-4e5b-9817-f4ada1233de7"],
Cell[81615, 2579, 127, 1, 36, "Text",ExpressionUUID->"ba909f72-7c0b-4264-a1fe-312e2a4f3fd4"],
Cell[81745, 2582, 218, 4, 57, "Input",ExpressionUUID->"aa106c12-20da-41a8-ba2a-2146d29d6a4b"],
Cell[81966, 2588, 295, 5, 72, "Input",ExpressionUUID->"7c8eccd7-11a8-4500-a91b-0366971031f7"],
Cell[82264, 2595, 229, 6, 87, "Input",ExpressionUUID->"f1c4d2ad-6e34-4d00-a8f0-5976c9f1479f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[82530, 2606, 137, 2, 31, "Section",ExpressionUUID->"c10b1414-04ec-469f-a981-218130338b93"],
Cell[82670, 2610, 1005, 15, 224, "Text",ExpressionUUID->"0a47e23d-a336-4bd3-a4e0-aac4f604375d"],
Cell[83678, 2627, 215, 8, 87, "Input",ExpressionUUID->"d3caaad9-8173-4773-995e-cc9cc9e77181"],
Cell[83896, 2637, 1252, 31, 552, "Input",ExpressionUUID->"fba0dd0c-f2c5-4b14-b427-e339bcef5d14"],
Cell[85151, 2670, 406, 8, 117, "Input",ExpressionUUID->"d70fce64-eae8-4dc1-9578-ce3fd3053f98"],
Cell[85560, 2680, 230, 6, 87, "Input",ExpressionUUID->"b5e58f38-c403-4d3e-841d-1a4c8bbe1e2b"],
Cell[85793, 2688, 119, 1, 36, "Text",ExpressionUUID->"4fcc3a05-6cbc-4d2f-888f-88fd3d83b702"],
Cell[85915, 2691, 306, 5, 87, "Input",ExpressionUUID->"a2c8381a-6881-472c-801d-32bf83630c42"],
Cell[86224, 2698, 230, 6, 87, "Input",ExpressionUUID->"6ee47596-89bc-4421-b834-7d6126f828f5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[86491, 2709, 151, 2, 31, "Section",ExpressionUUID->"8ed40221-1f05-4ffe-aa1c-9738e3a6ab41"],
Cell[86645, 2713, 505, 10, 72, "Text",ExpressionUUID->"aa4974e0-75a3-4672-a215-5d7744453a52"],
Cell[87153, 2725, 211, 7, 72, "Input",ExpressionUUID->"82a6fe6c-78e5-41af-a683-24cced5c32ab"],
Cell[87367, 2734, 645, 22, 327, "Input",ExpressionUUID->"b395b625-604c-4735-b086-89d607726866"],
Cell[88015, 2758, 603, 14, 207, "Input",ExpressionUUID->"b1932665-11bd-4f9c-9124-046ec3b5c872"],
Cell[88621, 2774, 195, 6, 87, "Input",ExpressionUUID->"bf9f5bf5-b551-4da4-886c-f9e1902a51ba"]
}, Open  ]],
Cell[CellGroupData[{
Cell[88853, 2785, 125, 2, 31, "Section",ExpressionUUID->"607b8b2b-008b-4bb7-bc2f-6ef784540399"],
Cell[88981, 2789, 179, 3, 36, "Text",ExpressionUUID->"ebacdef9-1175-4b8a-bc09-9519a7a0dc79"],
Cell[89163, 2794, 255, 7, 72, "Input",ExpressionUUID->"7c8e4b11-59c2-46c8-b921-715def050532"],
Cell[89421, 2803, 171, 3, 36, "Text",ExpressionUUID->"948f3b69-c535-434a-ba04-518bca93bda0"],
Cell[89595, 2808, 147, 3, 42, "Input",ExpressionUUID->"bf826bb6-c797-4d5d-a69b-5c0e7374e683"],
Cell[89745, 2813, 164, 3, 36, "Text",ExpressionUUID->"ed35bf71-50fd-48fa-9a6f-f9b24bc4526e"],
Cell[89912, 2818, 247, 8, 87, "Input",ExpressionUUID->"187562c0-04a7-4f92-a12d-1af280121ca5"],
Cell[90162, 2828, 185, 6, 57, "Input",ExpressionUUID->"b27ff4a8-59fe-4b4b-88ff-a8763b2dc55b"],
Cell[90350, 2836, 227, 6, 87, "Input",ExpressionUUID->"3225898f-d311-4735-8a24-d0404dd14c1b"],
Cell[90580, 2844, 1233, 30, 75, "Input",ExpressionUUID->"edc9bc24-2907-4f4e-ab9e-7a6976c72780"],
Cell[91816, 2876, 277, 7, 72, "Input",ExpressionUUID->"911d4117-21b8-4523-8b90-30ea85827be3"],
Cell[92096, 2885, 130, 1, 36, "Text",ExpressionUUID->"b24eca91-9b81-4957-974f-16555b666d72"],
Cell[92229, 2888, 479, 9, 237, "Input",ExpressionUUID->"bbe0ecaa-39c1-49f5-a826-40eeb69337d1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[92745, 2902, 123, 2, 31, "Section",ExpressionUUID->"8539df40-f458-46da-b450-335a918940fd"],
Cell[92871, 2906, 244, 4, 52, "Text",ExpressionUUID->"ae22a036-ac65-4329-b02a-8598d36babf8"],
Cell[93118, 2912, 236, 11, 162, "Input",ExpressionUUID->"d34dd73c-7215-49b4-b64a-0a292adabdd5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[93391, 2928, 110, 0, 31, "Section",ExpressionUUID->"23752e42-cd19-40f3-864f-265b443d2de8"],
Cell[93504, 2930, 386, 5, 71, "Text",ExpressionUUID->"e8d0b34f-bb9d-4260-a96d-d7902c91dc81"],
Cell[93893, 2937, 500, 23, 342, "Input",ExpressionUUID->"b3a63408-c786-40cf-acf4-7748da07edb5"],
Cell[94396, 2962, 1018, 27, 402, "Input",ExpressionUUID->"3dfcc0dc-5cea-437f-b928-ca83b2bbe8df"],
Cell[95417, 2991, 125, 1, 36, "Text",ExpressionUUID->"16f43296-a4f0-4b43-b1bb-da70c2b35992"],
Cell[95545, 2994, 538, 13, 192, "Input",ExpressionUUID->"152a71ca-ccea-4983-8aee-f59d3048e061"],
Cell[96086, 3009, 129, 1, 36, "Text",ExpressionUUID->"72a37ab8-4d2e-4fee-b6ed-239e520b136a"],
Cell[96218, 3012, 361, 10, 147, "Input",ExpressionUUID->"7bdb7f62-0822-4321-9cf1-9e4631718f97"],
Cell[96582, 3024, 120, 1, 36, "Text",ExpressionUUID->"715fc608-4fd1-4e92-9725-1add2c2fe64f"],
Cell[96705, 3027, 1341, 39, 128, "Text",ExpressionUUID->"d7dfed2d-7728-460d-a9af-c8dab645a672"],
Cell[98049, 3068, 676, 31, 462, "Input",ExpressionUUID->"6bc39e8e-2343-490b-9f3a-2022dfc7e9d1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[98762, 3104, 123, 2, 31, "Section",ExpressionUUID->"ce0c19cc-9f97-43b4-abfc-379161f7c0bb"],
Cell[98888, 3108, 568, 11, 185, "Text",ExpressionUUID->"ac8de3f2-4a5b-48eb-995d-715148958ecd"],
Cell[CellGroupData[{
Cell[99481, 3123, 100, 0, 46, "Subsection",ExpressionUUID->"770dd729-973c-4b54-a203-3357985fe98a"],
Cell[99584, 3125, 171, 5, 72, "Input",ExpressionUUID->"228e4a6c-c3d3-4191-bc0d-b89aeb8aa9d0"],
Cell[99758, 3132, 201, 3, 42, "Input",ExpressionUUID->"3c54b78d-1c4e-4d5b-8c04-c210a42d59ae"],
Cell[99962, 3137, 495, 11, 162, "Input",ExpressionUUID->"906ac58d-0ae8-4a17-b334-84b620b04b5b"],
Cell[100460, 3150, 224, 6, 87, "Input",ExpressionUUID->"b353c7f4-be51-48ee-bb63-1b12a66723ab"],
Cell[100687, 3158, 871, 34, 507, "Input",ExpressionUUID->"d589eca1-60a4-47c4-8314-76020b66e5c1"],
Cell[101561, 3194, 280, 8, 117, "Input",ExpressionUUID->"4b097021-7edc-450f-b1e0-cb2f439007c8"],
Cell[101844, 3204, 174, 6, 87, "Input",ExpressionUUID->"9b8ca2c5-bbbc-4a00-a497-7c0b9b3d4702"]
}, Open  ]],
Cell[CellGroupData[{
Cell[102055, 3215, 103, 0, 30, "Subsection",ExpressionUUID->"e6c17980-a83a-4bdb-82c4-3e72d47bdddb"],
Cell[102161, 3217, 171, 5, 72, "Input",ExpressionUUID->"f52d0c34-374c-41e7-b6ac-7ad06fb0c2a7"],
Cell[102335, 3224, 681, 19, 282, "Input",ExpressionUUID->"2dc7f43b-a750-448c-9f58-d8689c0a7e29"],
Cell[103019, 3245, 395, 7, 102, "Input",ExpressionUUID->"ff0ad7ca-8232-4289-9eaf-d6222f6e8860"],
Cell[103417, 3254, 195, 5, 72, "Input",ExpressionUUID->"d462e7ac-5eb0-4d5d-9405-278943f5253d"],
Cell[103615, 3261, 232, 4, 57, "Input",ExpressionUUID->"599bdeb3-041b-4962-b207-e0cb3ef3453f"],
Cell[103850, 3267, 544, 13, 192, "Input",ExpressionUUID->"03c5727b-4c44-4f68-9c25-88c23813832e"],
Cell[104397, 3282, 182, 5, 72, "Input",ExpressionUUID->"379470f6-eee2-43ba-b418-a84afacf2924"],
Cell[104582, 3289, 986, 37, 552, "Input",ExpressionUUID->"0a2bcdd9-1217-4627-9273-6d1e7c10d5c1"],
Cell[105571, 3328, 428, 16, 237, "Input",ExpressionUUID->"dacc0589-df25-4dd3-8006-edb8549c1d0f"],
Cell[106002, 3346, 216, 3, 42, "Input",ExpressionUUID->"65f99b30-e747-48ce-b6b3-7640f2448c79"],
Cell[106221, 3351, 96, 0, 27, "Input",ExpressionUUID->"0540f329-0a28-4908-957a-4f5f89b56f61"],
Cell[106320, 3353, 120, 0, 27, "Input",ExpressionUUID->"4fc4e7bb-521c-4c1c-b123-7d900dfea7b0"],
Cell[106443, 3355, 125, 0, 27, "Input",ExpressionUUID->"10e8c7ee-2549-4995-a346-1df0ccc74960"],
Cell[106571, 3357, 361, 13, 192, "Input",ExpressionUUID->"c9eaa957-dfb0-4159-a76e-964c372ae90d"],
Cell[106935, 3372, 201, 6, 87, "Input",ExpressionUUID->"ac50fe89-84aa-4990-bfd3-368e87d9ef21"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[107185, 3384, 82, 0, 31, "Section",ExpressionUUID->"e501022a-627e-4200-9a30-242089aa329a"],
Cell[107270, 3386, 82, 0, 27, "Input",ExpressionUUID->"4b35024d-ab67-4a7e-b54a-50bdab531022"],
Cell[107355, 3388, 810, 21, 71, "Text",ExpressionUUID->"a7c900a3-3dc9-4e76-a195-4edd08da46b8"],
Cell[108168, 3411, 343, 11, 73, "Input",ExpressionUUID->"f4c2bd91-1c29-4ee5-9aa0-3b91e1c5a17e"],
Cell[CellGroupData[{
Cell[108536, 3426, 85, 0, 46, "Subsection",ExpressionUUID->"7ac4f743-3f6b-404c-9782-63195419086a"],
Cell[108624, 3428, 383, 11, 54, "Text",ExpressionUUID->"277a5ffc-64fa-4bce-bb13-a34e5423f66c"],
Cell[109010, 3441, 448, 13, 49, "Text",ExpressionUUID->"e9b542dc-63ec-4bb0-9834-adfc602d7fa5"],
Cell[109461, 3456, 1074, 22, 188, "Text",ExpressionUUID->"1fb86e63-6913-4c1e-aa42-ae495649c12a"],
Cell[110538, 3480, 536, 16, 59, "Text",ExpressionUUID->"c6b4c32d-ccb0-4967-8a08-679140ba40f1"],
Cell[111077, 3498, 890, 15, 204, "Text",ExpressionUUID->"5cb577aa-f737-4179-ac8e-149d1d1c4f17"]
}, Open  ]],
Cell[CellGroupData[{
Cell[112004, 3518, 112, 0, 30, "Subsection",ExpressionUUID->"68de1bd1-65dc-4919-a9a3-d0b39f58374d"],
Cell[112119, 3520, 176, 3, 33, "Text",ExpressionUUID->"0f5d9bb2-4609-435d-8dc7-b7d3eba1a586"],
Cell[112298, 3525, 198, 6, 87, "Input",ExpressionUUID->"baa54974-521c-42b9-b32c-8b298fe396c2"],
Cell[112499, 3533, 501, 21, 312, "Input",ExpressionUUID->"261e499e-597b-4e68-9eb9-676bd794bc05"],
Cell[113003, 3556, 1692, 57, 852, "Input",ExpressionUUID->"9424ad85-2f92-4254-8afa-4d4ab6745bdc"],
Cell[114698, 3615, 437, 13, 192, "Input",ExpressionUUID->"7b0c792c-f4af-4942-bd2a-8d897858151d"],
Cell[115138, 3630, 348, 8, 117, "Input",ExpressionUUID->"1ca18d71-ff42-4662-b470-00925cc07fdf"],
Cell[115489, 3640, 917, 27, 417, "Input",ExpressionUUID->"4e63fddf-5725-42f8-af13-957def2d61bb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[116443, 3672, 101, 0, 30, "Subsection",ExpressionUUID->"759d852c-853f-4ab6-80bb-2976ae9e173a"],
Cell[116547, 3674, 348, 5, 71, "Text",ExpressionUUID->"3cc88707-4e8b-424f-a44a-261c04159d52"],
Cell[116898, 3681, 2717, 102, 598, "Output",ExpressionUUID->"4272c847-05aa-465a-8c32-30b443af5999"]
}, Open  ]],
Cell[CellGroupData[{
Cell[119652, 3788, 99, 0, 30, "Subsection",ExpressionUUID->"e53a9cdb-399e-4feb-b3cd-a89facac5429"],
Cell[119754, 3790, 1178, 21, 185, "Text",ExpressionUUID->"ac8aadc2-5681-451f-b992-12dfe6106823"],
Cell[120935, 3813, 401, 6, 71, "Text",ExpressionUUID->"057ca9a1-7245-41ea-80cc-349d5acda975"],
Cell[121339, 3821, 241, 7, 102, "Input",ExpressionUUID->"1c0b7568-3d5f-4511-8b00-940faecc7a91"],
Cell[121583, 3830, 896, 17, 147, "Text",ExpressionUUID->"4e3d218b-6de9-4dce-91be-23068288a3c6"],
Cell[122482, 3849, 441, 13, 57, "Input",ExpressionUUID->"eb57d2b1-ccb6-4462-baed-70e3c83daf61"],
Cell[122926, 3864, 548, 20, 71, "Text",ExpressionUUID->"6e444cf0-c982-4b21-95a0-2a9ac7bdba8b"],
Cell[123477, 3886, 95, 0, 27, "Input",ExpressionUUID->"f2236f6c-c9c4-4f4b-b9ea-841593fac991"],
Cell[123575, 3888, 286, 6, 87, "Input",ExpressionUUID->"b9b96615-6dca-448f-ae43-932251b40adc"],
Cell[123864, 3896, 194, 4, 57, "Input",ExpressionUUID->"51c8339a-b610-4ad6-b0e0-3bc12d748b5c"],
Cell[124061, 3902, 200, 4, 57, "Input",ExpressionUUID->"922fda6b-cdd5-4759-b3f8-8c6fcc43094e"],
Cell[124264, 3908, 719, 19, 73, "Text",ExpressionUUID->"22d48e5c-e6c8-4712-88ba-7c144601ae30"],
Cell[124986, 3929, 283, 4, 52, "Text",ExpressionUUID->"3cb011fa-2984-49c2-8cba-c3fd06ecb761"],
Cell[125272, 3935, 330, 11, 162, "Input",ExpressionUUID->"a4f8e61a-bcd1-4ef7-aefd-a45eea6ed400"],
Cell[125605, 3948, 462, 10, 72, "Text",ExpressionUUID->"a3c329d1-2318-458b-ae2a-934f84b9c135"],
Cell[126070, 3960, 388, 12, 177, "Input",ExpressionUUID->"b276a96d-ea8f-4b97-94e0-e6d6fe757cb2"],
Cell[126461, 3974, 107, 0, 33, "Text",ExpressionUUID->"dd286544-49c0-4b15-8c87-3cd7ecb147f5"],
Cell[126571, 3976, 291, 8, 49, "Input",ExpressionUUID->"748b4137-b941-42aa-9423-1ccc66d818f5"],
Cell[126865, 3986, 119, 0, 33, "Text",ExpressionUUID->"3e656918-c33c-4095-b5ef-90465ebed52b"],
Cell[126987, 3988, 127, 4, 57, "Input",ExpressionUUID->"56e6e2c5-3ea1-49fe-b1b7-e8bc672a26b7"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[127163, 3998, 124, 0, 31, "Section",ExpressionUUID->"6986d187-a40e-4882-9c9e-1731deccd8f6"],
Cell[127290, 4000, 539, 8, 90, "Text",ExpressionUUID->"89ce52a0-7788-42cf-b535-f91c7dbf54cb"],
Cell[CellGroupData[{
Cell[127854, 4012, 87, 0, 46, "Subsection",ExpressionUUID->"7d0008fd-2ea4-4f6a-93b2-dea9e2cc776e"],
Cell[127944, 4014, 2179, 56, 300, "Text",ExpressionUUID->"1616ef9e-9070-437f-946a-57dbd524a52e"],
Cell[130126, 4072, 164, 3, 42, "Input",ExpressionUUID->"6fbbf289-5e34-45cc-b828-308753d953a9"],
Cell[130293, 4077, 930, 27, 91, "Text",ExpressionUUID->"bd396440-f191-4857-ae06-2c6679858627"],
Cell[131226, 4106, 92, 0, 27, "Input",ExpressionUUID->"52773821-6f53-4015-8526-b5f2469bb5ca"],
Cell[131321, 4108, 3452, 73, 546, "Text",ExpressionUUID->"88f9fd9e-8dc4-417f-a4b6-9e42ee043a02"]
}, Open  ]],
Cell[CellGroupData[{
Cell[134810, 4186, 111, 0, 30, "Subsection",ExpressionUUID->"516f7d2a-e225-4593-987b-9faf66fa9adf"],
Cell[134924, 4188, 871, 23, 110, "Text",ExpressionUUID->"cf2d9184-444e-495a-84e5-d344c59350d6"],
Cell[135798, 4213, 487, 10, 147, "Input",ExpressionUUID->"ac41405f-054b-460f-a616-f930faeb501f"],
Cell[136288, 4225, 175, 3, 33, "Text",ExpressionUUID->"b9b970f9-abeb-44f0-b299-6153c17bd925"],
Cell[136466, 4230, 166, 4, 57, "Input",ExpressionUUID->"e47017d0-ad4d-4b66-b624-2fb14c6a0aae"],
Cell[136635, 4236, 141, 2, 33, "Text",ExpressionUUID->"fa41412d-6cec-43e9-ab28-a53b51cc5237"],
Cell[136779, 4240, 97, 0, 27, "Input",ExpressionUUID->"f72c8918-bd87-44fc-934a-d9ef14a4fb64"],
Cell[136879, 4242, 482, 11, 71, "Text",ExpressionUUID->"2f5e946d-6c99-4b72-b29c-6061b4934d0a"],
Cell[137364, 4255, 259, 5, 72, "Input",ExpressionUUID->"0157eecd-b36e-4f21-b04e-cad7bfecd4ee"]
}, Open  ]],
Cell[CellGroupData[{
Cell[137660, 4265, 113, 0, 30, "Subsection",ExpressionUUID->"1f1e822f-19ef-4f2f-87a6-2ab1abcfd6a3"],
Cell[137776, 4267, 910, 23, 128, "Text",ExpressionUUID->"300df458-fa3b-482f-a275-816c45eb8f40"],
Cell[138689, 4292, 85, 0, 27, "Input",ExpressionUUID->"0c874978-64be-4871-aa0c-8061e9760d7b"],
Cell[138777, 4294, 92, 0, 27, "Input",ExpressionUUID->"e809daa3-13c0-4193-acf4-cf97c1998870"],
Cell[138872, 4296, 803, 16, 252, "Input",ExpressionUUID->"9a4a932c-d803-40b0-b2e8-a2bee5e6f4ff"],
Cell[139678, 4314, 1071, 30, 447, "Input",ExpressionUUID->"e4063a67-ca06-4d65-b476-12925cd49771"],
Cell[140752, 4346, 523, 9, 129, "Text",ExpressionUUID->"03a974f2-cb8c-4cd7-bd9f-de1909096994"],
Cell[141278, 4357, 141, 2, 27, "Input",ExpressionUUID->"02f2be32-8a8e-45c6-8290-21f0dcf3bb44"],
Cell[141422, 4361, 254, 7, 102, "Input",ExpressionUUID->"ad2f229f-dc82-4b39-a2c8-46609c583bfe"],
Cell[141679, 4370, 889, 21, 110, "Text",ExpressionUUID->"744ed9ef-f44b-48c6-ab48-47e25c20182d"],
Cell[142571, 4393, 413, 8, 117, "Input",ExpressionUUID->"d6800f4d-d46b-41df-a7e3-9e4f95be97bf"],
Cell[142987, 4403, 258, 6, 52, "Text",ExpressionUUID->"5dcd4a62-7d0f-4ad7-bd10-24023fc13e3b"],
Cell[143248, 4411, 81, 0, 27, "Input",ExpressionUUID->"91e07759-2ee6-4848-b4c3-579af6d2b452"],
Cell[143332, 4413, 420, 6, 71, "Text",ExpressionUUID->"972f5f8e-c964-4637-a99c-aa974bae8517"],
Cell[143755, 4421, 412, 16, 237, "Input",ExpressionUUID->"455911a7-b818-49c1-a60b-0033f96ca642"],
Cell[144170, 4439, 470, 9, 71, "Text",ExpressionUUID->"f5c89cdd-07a1-41a1-bf51-2d6a27024edd"],
Cell[144643, 4450, 154, 4, 57, "Input",ExpressionUUID->"2ba8d034-8a54-471c-a687-f5355eaca983"],
Cell[144800, 4456, 157, 2, 33, "Text",ExpressionUUID->"95d42d22-c2df-417a-84ce-6148c5ee60dc"],
Cell[144960, 4460, 189, 6, 87, "Input",ExpressionUUID->"10c03c79-7026-41cc-8b1f-26e2321b2ead"],
Cell[145152, 4468, 190, 3, 33, "Text",ExpressionUUID->"a73080da-9dff-4e82-8efe-fc2278f1367c"],
Cell[145345, 4473, 198, 5, 72, "Input",ExpressionUUID->"15f6c823-180c-44c9-9860-57e782a2853a"],
Cell[145546, 4480, 152, 2, 33, "Text",ExpressionUUID->"a7efb6af-d543-44fc-bd2d-d2c4bc3c5112"],
Cell[145701, 4484, 210, 6, 87, "Input",ExpressionUUID->"52207b24-08a9-4730-ae2b-e0b0ae7baca8"],
Cell[145914, 4492, 123, 0, 33, "Text",ExpressionUUID->"59ccc300-0147-4af1-9551-08eb53f292a8"],
Cell[146040, 4494, 77, 0, 27, "Input",ExpressionUUID->"95136716-40c4-4582-a535-f4c2e6a956cb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[146154, 4499, 133, 0, 30, "Subsection",ExpressionUUID->"21384836-1a38-4854-b009-ad989b443c2f"],
Cell[146290, 4501, 694, 17, 128, "Text",ExpressionUUID->"c317b3c4-38d8-4c37-b367-aa03a151a19c"],
Cell[146987, 4520, 109, 0, 27, "Input",ExpressionUUID->"90730664-3c32-4ed7-9323-901c7fcd7a02"],
Cell[147099, 4522, 286, 6, 87, "Input",ExpressionUUID->"7b9637ef-e9a0-4e18-ae67-d2395e5042a4"],
Cell[147388, 4530, 297, 6, 102, "Input",ExpressionUUID->"16dd3126-4a43-41f0-b775-2aeb1999b11b"],
Cell[147688, 4538, 875, 29, 91, "Text",ExpressionUUID->"9895b9b0-8449-4bf9-afae-1cdc4a311c5f"],
Cell[148566, 4569, 194, 4, 57, "Input",ExpressionUUID->"3e112db8-4681-4b6d-bef6-ae4542c7156f"],
Cell[148763, 4575, 225, 3, 52, "Text",ExpressionUUID->"b9d9f831-140f-4b13-8bba-2057db406860"],
Cell[148991, 4580, 200, 4, 57, "Input",ExpressionUUID->"0608e01f-3b08-419e-a3b5-9295aa0e4772"],
Cell[149194, 4586, 276, 6, 87, "Input",ExpressionUUID->"85aa7f29-a545-418f-88b3-e4772e625a9f"],
Cell[149473, 4594, 405, 12, 52, "Text",ExpressionUUID->"ea484867-45b2-4389-960a-0cab968c3a4a"],
Cell[149881, 4608, 191, 4, 57, "Input",ExpressionUUID->"fe45a4f0-4146-4b08-accf-3fc5a1016e67"],
Cell[150075, 4614, 326, 6, 87, "Input",ExpressionUUID->"67edcd43-ce6c-4ae4-8e41-80bf06e42d6e"],
Cell[150404, 4622, 94, 0, 33, "Text",ExpressionUUID->"f61749a9-d691-4daf-a542-46da6f7c5fd8"],
Cell[150501, 4624, 154, 4, 57, "Input",ExpressionUUID->"51212c98-3e4d-4669-b19b-435e486715f1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[150692, 4633, 102, 0, 30, "Subsection",ExpressionUUID->"f5cb9868-f753-4f8d-96ce-c64eaf8534c4"],
Cell[150797, 4635, 1708, 37, 244, "Text",ExpressionUUID->"08fd3d05-4b87-4d3b-ac9b-96b36efdd409"],
Cell[152508, 4674, 524, 12, 177, "Input",ExpressionUUID->"d027f5bc-2320-47fd-bef4-d3b7de4fd0a0"],
Cell[153035, 4688, 601, 14, 91, "Text",ExpressionUUID->"b548aaaf-8760-4533-a4ab-2984e9161ccf"],
Cell[153639, 4704, 665, 16, 237, "Input",ExpressionUUID->"c1656ec4-fdbc-42e2-ba7d-9e21109e1f97"],
Cell[154307, 4722, 838, 15, 149, "Text",ExpressionUUID->"03cc2f1c-f073-48d5-b3ff-f57aa710a629"],
Cell[155148, 4739, 545, 19, 282, "Input",ExpressionUUID->"43c6e519-246f-426d-b449-40e8c4436d1c"],
Cell[155696, 4760, 536, 12, 91, "Text",ExpressionUUID->"122db262-a62d-4c60-84fd-debb6ddd3651"],
Cell[156235, 4774, 358, 11, 162, "Input",ExpressionUUID->"7b23bb94-f17e-479f-96a0-86d2aa143ded"],
Cell[CellGroupData[{
Cell[156618, 4789, 95, 0, 42, "Subsubsection",ExpressionUUID->"c01ccf40-82a3-45ab-b917-0c5b29aaddf9"],
Cell[156716, 4791, 920, 23, 132, "Text",ExpressionUUID->"0e740487-0e50-49c2-90f2-42eae09c4e41"],
Cell[157639, 4816, 534, 14, 207, "Input",ExpressionUUID->"5e5b5dd0-9bee-4c15-a51b-f3b107783d72"],
Cell[158176, 4832, 153, 2, 33, "Text",ExpressionUUID->"428e6237-c2c9-4063-b263-45bde40fd56d"],
Cell[158332, 4836, 557, 16, 252, "Input",ExpressionUUID->"fb5555ba-a350-4ef3-9f38-400d0f295c68"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[158938, 4858, 111, 0, 30, "Subsection",ExpressionUUID->"09017d36-f213-4595-9225-783f321a5e32"],
Cell[159052, 4860, 329, 7, 52, "Text",ExpressionUUID->"56178085-082e-4fac-9a73-58f03d57f31c"],
Cell[159384, 4869, 828, 22, 327, "Input",ExpressionUUID->"f0b024d6-40f0-454f-baf6-e91cf2bb829b"],
Cell[160215, 4893, 258, 6, 34, "Text",ExpressionUUID->"36e4a042-07dc-4b15-8f7f-ea80815f4c19"],
Cell[160476, 4901, 188, 5, 72, "Input",ExpressionUUID->"7f73bd29-29ab-4a6f-9fa6-e0721919b74d"],
Cell[160667, 4908, 128, 0, 33, "Text",ExpressionUUID->"7abfec72-67ec-4e19-83c4-a90200324da0"],
Cell[160798, 4910, 197, 5, 72, "Input",ExpressionUUID->"4a0f9ab6-130b-41f5-b20d-b0c2d1d40ce2"],
Cell[160998, 4917, 110, 0, 33, "Text",ExpressionUUID->"08f8dbe2-8d17-4048-827f-b1171770c556"],
Cell[161111, 4919, 252, 7, 102, "Input",ExpressionUUID->"a55fac33-2498-4ebc-b0a4-bd424bc261b8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[161400, 4931, 167, 2, 30, "Subsection",ExpressionUUID->"6822a5f9-fb92-43f0-b392-3764ff58c6a0"],
Cell[161570, 4935, 1220, 27, 166, "Text",ExpressionUUID->"e833ed2e-3597-4ee6-96a2-d1a7b7d3287d"],
Cell[CellGroupData[{
Cell[162815, 4966, 105, 0, 42, "Subsubsection",ExpressionUUID->"6dcefdc4-d46a-4b19-b8d3-643590783eb7"],
Cell[162923, 4968, 358, 12, 33, "Text",ExpressionUUID->"81cc26c5-5a3d-46c5-8806-40c9c11c1921"],
Cell[163284, 4982, 442, 9, 132, "Input",ExpressionUUID->"32f8bf4f-39df-4cc1-8166-928a8b448e4b"],
Cell[163729, 4993, 294, 11, 33, "Text",ExpressionUUID->"ed957681-e84a-418a-a6cb-25902ac16c7f"],
Cell[164026, 5006, 502, 19, 282, "Input",ExpressionUUID->"35bc0ef3-56c1-4724-be8d-483014e476b7"],
Cell[164531, 5027, 612, 14, 92, "Text",ExpressionUUID->"812888f4-9699-4675-8a93-4d02b80a2b44"],
Cell[165146, 5043, 418, 16, 237, "Input",ExpressionUUID->"5a5bffe4-9dd8-44d1-bceb-9b5b683477f3"],
Cell[165567, 5061, 139, 3, 42, "Input",ExpressionUUID->"9b7770b3-3d1a-412a-87e4-68f6691eb4ec"]
}, Open  ]],
Cell[CellGroupData[{
Cell[165743, 5069, 100, 0, 28, "Subsubsection",ExpressionUUID->"40f5e2fd-e3c8-4cbf-822b-5e4b63da4c35"],
Cell[165846, 5071, 475, 11, 71, "Text",ExpressionUUID->"f7227771-4424-404c-8613-c5e10ec22930"],
Cell[166324, 5084, 489, 10, 162, "Input",ExpressionUUID->"6b11487d-6dd8-41f2-b7a2-efa94c5608f4"],
Cell[166816, 5096, 1104, 30, 447, "Input",ExpressionUUID->"6ed255dc-84bd-47b1-be22-2f970980fc7f"],
Cell[167923, 5128, 422, 8, 132, "Input",ExpressionUUID->"27780919-a0b5-4472-bc59-0d5964ccc434"],
Cell[168348, 5138, 418, 16, 237, "Input",ExpressionUUID->"9678ca6b-91c6-48b6-ac48-fde09809508d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[168803, 5159, 101, 0, 28, "Subsubsection",ExpressionUUID->"5e39d4c5-03d1-4cee-bc92-c0244297b2fe"],
Cell[168907, 5161, 165, 3, 33, "Text",ExpressionUUID->"b04aaa57-2db0-4628-9ec0-cf3c435cd185"],
Cell[169075, 5166, 879, 25, 372, "Input",ExpressionUUID->"4657ce2b-c52c-4c27-83c8-ef98b9dac957"],
Cell[169957, 5193, 118, 0, 33, "Text",ExpressionUUID->"b3e0ffb6-3b88-4770-b8e0-23ad4e005e28"],
Cell[170078, 5195, 257, 7, 102, "Input",ExpressionUUID->"c4ee706b-5196-480b-9faf-9f05ad30bb73"]
}, Open  ]],
Cell[CellGroupData[{
Cell[170372, 5207, 105, 0, 28, "Subsubsection",ExpressionUUID->"4ddf8e78-2d20-48ca-b85f-82b7b89d2c95"],
Cell[170480, 5209, 601, 12, 109, "Text",ExpressionUUID->"f4a2b5af-c576-4dca-8fd6-7a6105904d83"],
Cell[171084, 5223, 915, 23, 342, "Input",ExpressionUUID->"21cbf8f9-53be-4222-9264-b5ee089aeeb5"],
Cell[172002, 5248, 161, 3, 33, "Text",ExpressionUUID->"7164e0a5-60fa-47fc-9b89-d0b0c68b19b3"],
Cell[172166, 5253, 272, 8, 117, "Input",ExpressionUUID->"60765f0a-33e3-4990-a06d-ef939aaa13fb"],
Cell[172441, 5263, 222, 5, 34, "Text",ExpressionUUID->"13847558-ecbf-411c-b0f9-37cbd453f4de"],
Cell[172666, 5270, 428, 11, 162, "Input",ExpressionUUID->"d96d59ec-c517-40ff-83cc-39e1fd0d4fdb"],
Cell[173097, 5283, 114, 0, 33, "Text",ExpressionUUID->"83db40fe-6d82-4b20-b205-5aa2ebed081f"],
Cell[173214, 5285, 469, 19, 282, "Input",ExpressionUUID->"4684ff3a-0efe-4dd7-bfa7-2fc816fc4c17"],
Cell[173686, 5306, 129, 0, 33, "Text",ExpressionUUID->"9dbb1016-98b5-43a5-9ac8-5ac9e777c56b"],
Cell[173818, 5308, 415, 16, 237, "Input",ExpressionUUID->"479945f9-4578-4eea-a98d-236d3853e687"]
}, Open  ]],
Cell[CellGroupData[{
Cell[174270, 5329, 125, 0, 28, "Subsubsection",ExpressionUUID->"e3b9568d-cf8b-4cf5-b990-4d43fc1f4ff3"],
Cell[174398, 5331, 3549, 80, 641, "Text",ExpressionUUID->"ed12eeff-d515-4a82-866d-452e63086ce9"],
Cell[177950, 5413, 448, 8, 117, "Input",ExpressionUUID->"6343216c-1b63-4a0e-aa6d-639f9b0d82b0"],
Cell[178401, 5423, 199, 3, 52, "Text",ExpressionUUID->"b7276880-8f47-48d4-9e77-f9e3669e351a"],
Cell[178603, 5428, 841, 24, 357, "Input",ExpressionUUID->"91968e0a-67a7-494a-9bcc-a60d7ecace07"],
Cell[179447, 5454, 221, 3, 52, "Text",ExpressionUUID->"f0c74bcc-dc6a-4ebb-9614-4891cb8003f2"],
Cell[179671, 5459, 344, 9, 132, "Input",ExpressionUUID->"0912f9fd-074c-4508-9d2d-c1d9b050a889"],
Cell[180018, 5470, 169, 3, 33, "Text",ExpressionUUID->"59400a16-2e91-45fc-852f-e3955f2128c8"],
Cell[180190, 5475, 508, 13, 207, "Input",ExpressionUUID->"c3d4fba3-adc8-4931-96a9-f47bdbe4e6ba"],
Cell[180701, 5490, 185, 3, 33, "Text",ExpressionUUID->"db07b49d-f8f8-4993-b0d4-6931430126d2"],
Cell[180889, 5495, 367, 8, 117, "Input",ExpressionUUID->"f4203258-d431-4975-a5fe-8c5c6a3c2e62"],
Cell[181259, 5505, 977, 25, 128, "Text",ExpressionUUID->"95ab182d-d6eb-464e-8363-992f0c5fe44d"],
Cell[182239, 5532, 334, 9, 132, "Input",ExpressionUUID->"95392e52-edc5-4eed-aef9-ee54effb8525"],
Cell[182576, 5543, 512, 14, 207, "Input",ExpressionUUID->"fd3fbb9d-0f91-460e-952d-b18a87862ea2"],
Cell[183091, 5559, 366, 7, 102, "Input",ExpressionUUID->"0bf8d101-4cf9-45ab-8a62-8c86e3943307"],
Cell[183460, 5568, 471, 14, 71, "Text",ExpressionUUID->"a1b50d5f-0053-442e-a055-6802a5f4c598"],
Cell[183934, 5584, 966, 35, 589, "Input",ExpressionUUID->"8e40d2c1-2750-444a-84ad-864c92042074"]
}, Open  ]],
Cell[CellGroupData[{
Cell[184937, 5624, 127, 2, 41, "Subsubsection",ExpressionUUID->"2fb94353-ed92-4b62-8e0e-43509c13c165"],
Cell[185067, 5628, 624, 18, 87, "Text",ExpressionUUID->"7d02db49-7f70-45eb-a71c-21dbd25b3a0b"],
Cell[185694, 5648, 313, 8, 130, "Input",ExpressionUUID->"aedff6af-3d32-4a13-a30e-5d6e719d74b1"],
Cell[186010, 5658, 208, 8, 30, "Text",ExpressionUUID->"6b107d32-b3c4-427e-9a26-28945e26982d"],
Cell[186221, 5668, 521, 18, 300, "Input",ExpressionUUID->"ef055086-2b46-4d82-99f1-fd04c99d51de"],
Cell[186745, 5688, 663, 12, 88, "Text",ExpressionUUID->"09261815-be59-420a-a2c9-c861843440f8"],
Cell[187411, 5702, 283, 8, 130, "Input",ExpressionUUID->"1ecaff45-0018-4aa6-825e-29ec87bd9360"],
Cell[187697, 5712, 295, 6, 49, "Text",ExpressionUUID->"5ede45b0-fd89-4236-b6f1-d495fee2ec55"],
Cell[187995, 5720, 248, 10, 164, "Input",ExpressionUUID->"df307b3b-5942-4394-8d28-414b51c9dd22"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)

